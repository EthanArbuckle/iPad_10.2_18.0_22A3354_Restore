_QWORD *sub_10007311C(uint64_t a1, void *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[4];
  _QWORD *v22;

  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v22 = _swiftEmptyArrayStorage;
      result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v4);
      if (v4 < 0)
        break;
      v6 = 0;
      while (v4 != v6)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
        else
          v7 = *(id *)(a1 + 8 * v6 + 32);
        v8 = v7;
        ++v6;
        v9 = objc_msgSend(v7, "identifier");
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v12 = v11;

        v21[3] = &type metadata for String;
        v21[0] = v10;
        v21[1] = v12;
        v13 = sub_1000758CC();
        v14 = objc_allocWithZone((Class)LNValue);
        v15 = sub_100055748(v21, v13);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
        v17 = v22[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
        v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
        specialized ContiguousArray._endMutation()(v18);
        if (v4 == v6)
        {
          v19 = v22;

          return v19;
        }
      }
      __break(1u);
LABEL_12:
      if (a1 < 0)
        v20 = a1;
      else
        v20 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter(v20);
      swift_bridgeObjectRelease(a1);
      if (!v4)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
LABEL_16:

    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1000732D4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 >> 62)
    goto LABEL_12;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      specialized ContiguousArray.reserveCapacity(_:)(v6);
      if (v6 < 0)
        break;
      v7 = 0;
      while (v6 != v7)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
        else
          v8 = *(id *)(a1 + 8 * v7 + 32);
        v9 = v8;
        ++v7;
        objc_allocWithZone((Class)LNProperty);
        swift_bridgeObjectRetain();
        v10 = sub_100016F00(a2, a3, v9);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v11 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
        v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
        specialized ContiguousArray._endMutation()(v12);
        if (v6 == v7)
          goto LABEL_13;
      }
      __break(1u);
LABEL_12:
      sub_10000C020();
      v6 = sub_1000058C8();
      swift_bridgeObjectRelease(a1);
      if (!v6)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    sub_1000101FC();
    sub_100018A40();
  }
}

_QWORD *sub_100073434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;

  v6 = a4;
  v7 = a3;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    v25 = v9;
    v10 = (uint64_t *)(v9 + 40);
    v11 = _swiftEmptyArrayStorage;
    do
    {
      if (*(_QWORD *)(a5 + 16))
      {
        v13 = *(v10 - 1);
        v12 = *v10;
        swift_bridgeObjectRetain();
        v14 = sub_100016064(v13);
        if ((v15 & 1) != 0)
        {
          v16 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * v14);
          swift_bridgeObjectRetain();
          v17 = v16;
          v18 = objc_msgSend(v17, "displayRepresentation");
          v19 = objc_msgSend(v18, "name");
          swift_bridgeObjectRelease(v12);

          if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
          {
            sub_10002FE34();
            v11 = v22;
          }
          v20 = v11[2];
          if (v20 >= v11[3] >> 1)
          {
            sub_10002FE34();
            v11 = v23;
          }
          v11[2] = v20 + 1;
          v21 = &v11[3 * v20];
          v21[4] = v13;
          v21[5] = v12;
          v21[6] = v19;
        }
        else
        {
          swift_bridgeObjectRelease(v12);
        }
      }
      v10 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease(v25);
    v6 = a4;
    v7 = a3;
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return v11;
}

void sub_1000735EC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unint64_t v19;
  unint64_t v20;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1000101B0();
  for (; v6; v6 = sub_1000058C8())
  {
    v19 = v5;
    v20 = v5 & 0xC000000000000001;
    v7 = 4;
    while (1)
    {
      v8 = v20 ? (id)sub_1000133B4() : *(id *)(v5 + 8 * v7);
      v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v10 = v6;
      v11 = v8;
      v12 = a3;
      v13 = objc_msgSend(v8, "identifier");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      a3 = v12;
      v17 = v14 == a2 && v16 == v12;
      if (v17)
      {
        swift_bridgeObjectRelease(v19);
LABEL_17:
        sub_10000EC84();
        sub_1000101FC();
        goto LABEL_21;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, a2, v12, 0);
      sub_10000E038();
      if ((v18 & 1) != 0)
        goto LABEL_17;

      ++v7;
      v6 = v10;
      v17 = v9 == v10;
      v5 = v19;
      if (v17)
        goto LABEL_20;
    }
    __break(1u);
LABEL_19:
    sub_1000101B0();
  }
LABEL_20:
  sub_10000EC84();
  sub_1000059A8();
LABEL_21:
  sub_100018A40();
}

_QWORD *sub_100073758(uint64_t a1)
{
  return sub_100073774(a1, &qword_100128AF8, (void (*)(void))sub_1000320BC, &qword_1001282C0);
}

_QWORD *sub_100073774(uint64_t a1, uint64_t *a2, void (*a3)(void), uint64_t *a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_10001BE7C(a2);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v6);
  }
  else
  {
    v7 = &_swiftEmptyDictionarySingleton;
  }
  v10 = v7;
  v8 = sub_10000EC68();
  sub_100075BFC(v8, 1, &v10, a3, a4);
  sub_1000117B4();
  return v10;
}

_QWORD *sub_100073828(uint64_t a1)
{
  return sub_100073774(a1, &qword_100128A80, (void (*)(void))sub_1000320A4, &qword_1001282D0);
}

uint64_t sub_100073844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100073860, 0, 0);
}

uint64_t sub_100073860()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  void **v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  id v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  _QWORD *v92;

  v1 = v0[2];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v81 = v0[2];
    else
      v81 = v1 & 0xFFFFFFFFFFFFFF8;
    sub_10000EC68();
    v2 = _CocoaArrayWrapper.endIndex.getter(v81);
    v3 = v0[2];
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v3 = sub_10000EC68();
  }
  v88 = v0;
  if (v2)
  {
    v4 = 0;
    v85 = v1 & 0xC000000000000001;
    v5 = _swiftEmptyArrayStorage;
    v83 = v3 + 32;
    v84 = v2;
    while (1)
    {
      v6 = v85 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0[2]) : *(id *)(v83 + 8 * v4);
      v7 = v6;
      v8 = __OFADD__(v4, 1);
      v9 = v4 + 1;
      if (v8)
        break;
      v10 = sub_10001771C((uint64_t)v6, "systemProtocols");
      sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
      v11 = sub_10001F4B4();

      if ((unint64_t)v11 >> 62)
      {
        if (v11 < 0)
          v26 = v11;
        else
          v26 = v11 & 0xFFFFFFFFFFFFFF8;
        v27 = v7;
        sub_1000058B4();
        v12 = _CocoaArrayWrapper.endIndex.getter(v26);
      }
      else
      {
        v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        v13 = v7;
        sub_1000058B4();
      }
      v86 = v9;
      if (v12)
      {
        v14 = 0;
        v15 = v12;
        while (1)
        {
          v16 = (v11 & 0xC000000000000001) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v11)
              : sub_1000137BC(v11 + 8 * v14);
          v17 = v16;
          v18 = v14 + 1;
          if (__OFADD__(v14, 1))
            break;
          v19 = v7;
          v20 = v7;
          v21 = v17;
          if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          {
            sub_100016408();
            v5 = v24;
          }
          v22 = v5[2];
          if (v22 >= v5[3] >> 1)
          {
            sub_100016408();
            v5 = v25;
          }
          v5[2] = v22 + 1;
          v23 = &v5[2 * v22];
          v23[4] = v20;
          v23[5] = v21;

          ++v14;
          v7 = v19;
          if (v18 == v15)
            goto LABEL_22;
        }
        __break(1u);
        goto LABEL_65;
      }
LABEL_22:
      sub_1000117AC(v11);

      v4 = v86;
      v0 = v88;
      if (v86 == v84)
      {
        v3 = v88[2];
        goto LABEL_29;
      }
    }
  }
  else
  {
    v5 = _swiftEmptyArrayStorage;
LABEL_29:
    swift_bridgeObjectRelease(v3);
    sub_100072E24((uint64_t)v5, sub_10007652C);
    v29 = v28;
    v30 = *(_QWORD *)(v28 + 16);
    v31 = (uint64_t)_swiftEmptyArrayStorage;
    if (v30)
    {
      v92 = _swiftEmptyArrayStorage;
      sub_100016794();
      specialized ContiguousArray.reserveCapacity(_:)(v30);
      v32 = 32;
      do
      {
        v33 = *(id *)(v29 + v32);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v33);
        v34 = v92[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
        v35 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v33);
        specialized ContiguousArray._endMutation()(v35);
        v32 += 16;
        --v30;
      }
      while (v30);
      v31 = (uint64_t)v92;
      sub_10000E038();
    }
    v89 = v31;
    if ((unint64_t)v31 >> 62)
    {
      if (v31 >= 0)
        v31 &= 0xFFFFFFFFFFFFFF8uLL;
      swift_bridgeObjectRetain();
      v82 = v31;
      v31 = v89;
      v36 = _CocoaArrayWrapper.endIndex.getter(v82);
    }
    else
    {
      v36 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
      sub_1000101B0();
    }
    v87 = v29;
    v37 = _swiftEmptyArrayStorage;
    if (!v36)
    {
LABEL_58:
      v53 = (_QWORD *)v0[5];
      v90 = v0[4];
      v54 = v0[3];
      sub_1000117AC(v31);
      v92 = &_swiftEmptySetSingleton;
      v55 = sub_10000C020();
      sub_1000759B4(v55);
      v57 = v56;
      swift_bridgeObjectRelease(v92);
      sub_1000059B0();
      v58 = sub_10000E858(v53 + 2, v53[5]);
      v59 = *v58;
      v60 = v58[1];
      v61 = v58[2];
      v62 = v58[3];
      sub_10000C020();
      sub_100016794();
      sub_1000058B4();
      v63 = sub_100073434(v57, v59, v60, v61, v62);
      v64 = sub_100073774((uint64_t)v63, &qword_100128AC0, (void (*)(void))sub_1000320D4, &qword_10012A3F0);
      swift_retain();
      sub_100075EA0((uint64_t)v64, (uint64_t)v53);
      v66 = v65;
      sub_1000059A8();
      v67 = v53[8];
      v53[8] = v66;
      swift_bridgeObjectRelease(v67);
      v68 = sub_10001BE7C(&qword_100129D88);
      v69 = _swiftEmptyArrayStorage;
      Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v68, &protocol witness table for String);
      sub_10001C094();
      v70 = v53[7];
      v53[7] = v64;
      swift_bridgeObjectRelease(v70);
      v71 = (_QWORD *)swift_task_alloc(48);
      v71[2] = v53;
      v71[3] = v54;
      v71[4] = v90;
      v92 = _swiftEmptyArrayStorage;
      v72 = *(_QWORD *)(v87 + 16);
      if (v72)
      {
        sub_1000101B0();
        v73 = (void **)(v87 + 40);
        v74 = v88;
        do
        {
          v75 = v88[4];
          v76 = v88[3];
          v77 = *v73;
          v78 = *(v73 - 1);
          v79 = v77;
          sub_100074324(v78, v76, v75, v79);

          sub_1000592F8();
          v73 += 2;
          --v72;
        }
        while (v72);
        sub_1000059A8();
        v69 = v92;
      }
      else
      {
        v74 = v88;
      }
      sub_1000059A8();
      swift_task_dealloc(v71);
      return ((uint64_t (*)(_QWORD *))v74[1])(v69);
    }
    v38 = 0;
    v39 = v31 & 0xC000000000000001;
    while (1)
    {
      v40 = v39 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v31) : sub_1000137BC(v31 + 8 * v38);
      v41 = v40;
      v42 = v38 + 1;
      if (__OFADD__(v38, 1))
        break;
      v91 = v40;
      sub_100073F14(&v91, &v92);

      v43 = v92;
      v44 = v92[2];
      v45 = v37[2];
      if (__OFADD__(v45, v44))
        goto LABEL_66;
      if (!swift_isUniquelyReferenced_nonNull_native(v37) || v45 + v44 > v37[3] >> 1)
      {
        sub_10001B71C();
        v37 = v46;
      }
      if (v43[2])
      {
        v47 = v37[2];
        if ((v37[3] >> 1) - v47 < v44)
          goto LABEL_69;
        v48 = (unint64_t)&v37[2 * v47 + 4];
        if ((unint64_t)(v43 + 4) < v48 + 16 * v44 && v48 < (unint64_t)&v43[2 * v44 + 4])
          return _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
        swift_arrayInitWithCopy(v48);
        if (v44)
        {
          v50 = v37[2];
          v8 = __OFADD__(v50, v44);
          v51 = v50 + v44;
          if (v8)
            goto LABEL_70;
          v37[2] = v51;
        }
      }
      else if (v44)
      {
        goto LABEL_67;
      }
      swift_bridgeObjectRelease(v43);
      ++v38;
      v52 = v42 == v36;
      v0 = v88;
      v31 = v89;
      if (v52)
        goto LABEL_58;
    }
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
}

uint64_t sub_100073ED8(void *a1, void *a2, uint64_t a3)
{
  sub_10000E858((_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 40));
  return sub_10005E2F4(a1, a2);
}

void sub_100073F14(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v3 = v2;
  v5 = *a1;
  v6 = objc_msgSend(*a1, "parameters");
  sub_10000795C(0, &qword_1001286C8, LNActionParameterMetadata_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6);

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter(v25);
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v33 = v3;
  v28 = v5;
  v29 = a2;
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
LABEL_33:
      sub_10001B71C();
      v10 = v26;
      goto LABEL_22;
    }
    v9 = 0;
    v10 = _swiftEmptyArrayStorage;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
      else
        v11 = *(id *)(v7 + 8 * v9 + 32);
      v12 = v11;
      v13 = sub_1000741C8();
      v15 = v14;

      if (v15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        {
          sub_10001B71C();
          v10 = v18;
        }
        v16 = v10[2];
        if (v16 >= v10[3] >> 1)
        {
          sub_10001B71C();
          v10 = v19;
        }
        v10[2] = v16 + 1;
        v17 = &v10[2 * v16];
        v17[4] = v13;
        v17[5] = v15;
      }
      ++v9;
    }
    while (v8 != v9);
  }
  else
  {
    v10 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease_n(v7, 2);
  v20 = sub_100076140(v28);
  if (!v20)
  {
    v31 = 0u;
    v32 = 0u;
    goto LABEL_26;
  }
  v21 = v20;
  v22 = LNActionTypeSpecificMetadataKeyEntityType;
  sub_10002D9CC(v22, v21);

  swift_bridgeObjectRelease(v21);
  if (!*((_QWORD *)&v32 + 1))
  {
LABEL_26:
    sub_10000E0D4((uint64_t)&v31);
    goto LABEL_27;
  }
  if ((swift_dynamicCast(v30, &v31, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_27;
  v3 = v30[0];
  a2 = (_QWORD *)v30[1];
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    goto LABEL_33;
LABEL_22:
  v23 = v10[2];
  if (v23 >= v10[3] >> 1)
  {
    sub_10001B71C();
    v10 = v27;
  }
  v10[2] = v23 + 1;
  v24 = &v10[2 * v23];
  v24[4] = v3;
  v24[5] = a2;
LABEL_27:
  *v29 = v10;
}

uint64_t sub_1000741C8()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;

  v1 = objc_msgSend(v0, "valueType");
  v2 = objc_opt_self(LNEntityValueType);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
  {
    v8 = objc_opt_self(LNArrayValueType);
    v9 = swift_dynamicCastObjCClass(v1, v8);
    if (v9)
    {
      v10 = (void *)v9;
      v11 = v1;
      v12 = objc_msgSend(v10, "memberValueType");
      v13 = objc_opt_self(LNEntityValueType);
      v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
      if (v14)
      {
        v15 = objc_msgSend(v14, "identifier");
        v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

        return v7;
      }

    }
    else
    {

    }
    return 0;
  }
  v4 = (void *)v3;
  v5 = v1;
  v6 = objc_msgSend(v4, "identifier");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

_QWORD *sub_100074324(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  char v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v54;
  _QWORD v55[2];
  void *v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;

  v5 = v4;
  v60 = a2;
  v61 = a3;
  v59 = a1;
  v7 = objc_msgSend(a1, "parameters");
  sub_10000795C(0, &qword_1001286C8, LNActionParameterMetadata_ptr);
  v8 = sub_10001F4B4();

  swift_retain();
  v62 = v5;
  sub_100072FA4(v8);
  v10 = v9;
  swift_bridgeObjectRelease(v8);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    v16 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  v12 = v10 + 32;
  v13 = *(_QWORD *)(v10 + 32);
  if (v13 >> 62)
    goto LABEL_66;
  v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_100016794();
  if (v14)
  {
    while (v11 != 1)
    {
      v42 = 5;
      while (1)
      {
        v43 = v42 - 3;
        if (__OFADD__(v42 - 4, 1))
          break;
        v44 = *(_QWORD *)(v10 + 8 * v42);
        if (v44 >> 62)
        {
          sub_1000101B0();
          v45 = sub_1000185D0();
          sub_1000059A8();
          if (!v45)
            goto LABEL_67;
        }
        else if (!*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_67;
        }
        ++v42;
        if (v43 == v11)
          goto LABEL_5;
      }
LABEL_65:
      __break(1u);
LABEL_66:
      sub_100016794();
      sub_1000101B0();
      v46 = sub_1000185D0();
      sub_1000059A8();
      if (!v46)
        goto LABEL_67;
    }
LABEL_5:
    sub_10000E038();
    v15 = *(_QWORD *)(v10 + 16);
    v16 = _swiftEmptyArrayStorage;
    if (v15)
    {
      v65 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000527C4();
      v16 = (_QWORD *)v65;
      do
      {
        if (*(_QWORD *)v12 >> 62)
        {
          sub_1000101B0();
          v17 = sub_1000185D0();
          sub_1000059A8();
        }
        else
        {
          v17 = *(_QWORD *)((*(_QWORD *)v12 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (__OFSUB__(v17, 1))
          goto LABEL_63;
        v65 = (uint64_t)v16;
        v11 = v16[2];
        if (v11 >= v16[3] >> 1)
        {
          sub_1000527C4();
          v16 = (_QWORD *)v65;
        }
        v16[2] = v11 + 1;
        v16[v11 + 4] = v17 - 1;
        v12 += 8;
      }
      while (--v15);
    }
LABEL_16:
    sub_10000C020();
    sub_10002FFB4();
    v11 = v18;
    v12 = *(_QWORD *)(v18 + 16);
    v19 = v12 + 1;
    if (v12 >= *(_QWORD *)(v18 + 24) >> 1)
      goto LABEL_74;
    while (1)
    {
      *(_QWORD *)(v11 + 16) = v19;
      *(_QWORD *)(v11 + 8 * v12 + 32) = v16;
      if (v12 > 1)
        goto LABEL_31;
      v20 = v16[2];
      if (!v20)
        goto LABEL_31;
      v12 = v20 - 1;
      if ((uint64_t)v16[v20 + 3] <= 0)
      {
        if (v20 != 1)
        {
          v25 = v20 + 2;
          do
          {
            v12 = v25 - 4;
            if (v25 - 4 >= v20)
              goto LABEL_64;
            if ((uint64_t)v16[v25] > 0)
              goto LABEL_20;
          }
          while (--v25 != 3);
        }
LABEL_31:
        v65 = (uint64_t)_swiftEmptyArrayStorage;
        v58 = *(_QWORD *)(v11 + 16);
        if (!v58)
        {
          sub_10000E038();
LABEL_50:
          sub_1000101FC();
          sub_1000059B0();
          return (_QWORD *)v65;
        }
        v55[0] = v11;
        v55[1] = v16;
        v57 = v11 + 32;
        v12 = v10 + 32;
        swift_bridgeObjectRetain();
        v27 = 0;
        v56 = a4;
        while (1)
        {
          v63 = v55;
          v28 = *(_QWORD *)(v57 + 8 * v27);
          v64 = _swiftEmptyArrayStorage;
          sub_100016794();
          swift_bridgeObjectRetain();
          specialized ContiguousArray.reserveCapacity(_:)(0);
          v11 = *(_QWORD *)(v10 + 16);
          a4 = (void *)v10;
          sub_100016794();
          if (v11)
            break;
LABEL_43:
          v10 = (uint64_t)a4;
          sub_10000C028();
          swift_bridgeObjectRelease(v28);
          sub_10000C028();
          v36 = sub_100074934(v59, v60, v61, v56);
          swift_release();
          if (v36)
          {
            v37 = v36;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v39 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v38 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v39 >= v38 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
            v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v37);
            specialized Array._endMutation()(v40);

          }
          if (++v27 == v58)
          {
            sub_1000101FC();
            sub_10000E038();
            goto LABEL_50;
          }
        }
        v29 = 0;
        v10 = v28 + 32;
        while (v29 < *(_QWORD *)(v28 + 16))
        {
          v30 = *(_QWORD *)(v12 + 8 * v29);
          v31 = *(_QWORD *)(v10 + 8 * v29);
          if ((v30 & 0xC000000000000001) != 0)
          {
            sub_1000101B0();
            v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v30);
            v32 = sub_1000059A8();
          }
          else
          {
            if ((v31 & 0x8000000000000000) != 0)
              goto LABEL_61;
            if (v31 >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_62;
            v32 = (uint64_t)sub_1000137BC(v30 + 8 * v31);
            v33 = v32;
          }
          ++v29;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
          v34 = v64[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
          v35 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v33);
          specialized ContiguousArray._endMutation()(v35);
          if (v11 == v29)
            goto LABEL_43;
        }
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
LABEL_20:
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_1000B8500();
        v16 = v26;
      }
      if ((int64_t)v12 >= v16[2])
        break;
      v21 = v16[v12 + 4];
      v22 = __OFSUB__(v21, 1);
      v23 = v21 - 1;
      if (v22)
        goto LABEL_73;
      v16[v12 + 4] = v23;
      v12 = *(_QWORD *)(v11 + 16);
      v24 = *(_QWORD *)(v11 + 24);
      v19 = v12 + 1;
      sub_10000C020();
      if (v12 >= v24 >> 1)
      {
LABEL_74:
        sub_10002FFB4();
        v11 = v54;
      }
    }
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
LABEL_67:
  sub_1000117AC(v10);
  sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
  v47 = objc_msgSend((id)objc_opt_self(LNSystemProtocol), "openEntitySystemProtocol");
  v48 = static NSObject.== infix(_:_:)(a4, v47);

  v41 = _swiftEmptyArrayStorage;
  if ((v48 & 1) != 0)
  {
    v49 = sub_100074934(v59, v60, v61, a4);
    if (v49)
    {
      v50 = v49;
      v51 = sub_10001BE7C(&qword_100128750);
      v52 = sub_100017650(v51);
      *(_OWORD *)(v52 + 16) = xmmword_1000EFAF0;
      *(_QWORD *)(v52 + 32) = v50;
      v65 = v52;
      specialized Array._endMutation()(v52);
      return (_QWORD *)v65;
    }
  }
  return v41;
}

id sub_100074934(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v22;

  v5 = objc_msgSend(a1, "identifier");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v7 = v6;

  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a1, "mangledTypeNameForBundleIdentifier:", v8);

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = objc_msgSend(a1, "openAppWhenRun");
  LOBYTE(v9) = (_BYTE)v13;
  v14 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", sub_10001771C((uint64_t)v13, "outputFlags"));
  v15 = sub_10001771C((uint64_t)v14, "outputType");
  v16 = sub_10001771C((uint64_t)v15, "systemProtocols");
  sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16);

  v18 = objc_allocWithZone((Class)LNAction);
  sub_10000EC68();
  v19 = sub_1000C5B8C(v22, v7, v10, v12, (char)v9, v14, v15, v17);
  v20 = sub_100074F58(a1, a4, v19);
  objc_allocWithZone((Class)LNSuggestedAction);
  return sub_100075B3C(v19, a4, (uint64_t)v20);
}

_QWORD *sub_100074C98(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  unint64_t v31;

  v2 = v1;
  v4 = sub_100004ED8(a1);
  if (!v5)
    return _swiftEmptyArrayStorage;
  v6 = v4;
  v7 = v5;
  v8 = sub_1000741C8();
  if (v9)
  {
    v10 = v8;
    v11 = v9;
    v12 = v2[7];
    sub_1000101B0();
    v13 = sub_10002D8B0(v10, v11, v12);
    sub_1000059B0();
    sub_1000059A8();
    if (v13)
    {
      sub_10000EC68();
      sub_10001AC5C(v13);
      v15 = v14;
      sub_1000101FC();
LABEL_11:
      sub_1000117B4();
      return (_QWORD *)v15;
    }
LABEL_13:
    sub_1000117B4();
    return _swiftEmptyArrayStorage;
  }
  v16 = objc_msgSend(a1, "valueType");
  v17 = objc_opt_self(LNLinkEnumerationValueType);
  v18 = (void *)swift_dynamicCastObjCClass(v16, v17);
  if (v18)
  {
    v19 = objc_msgSend(v18, "enumerationIdentifier");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v15 = v21;

    v22 = sub_10000E858(v2 + 2, v2[5])[2];
    sub_100016794();
    sub_1000101B0();
    sub_10002D990(v20, v15, v22);
    v24 = v23;
    sub_1000059A8();
    sub_10000E038();
    if (v24)
    {
      sub_1000059A8();
      v15 = (uint64_t)v24;
      v25 = sub_100074EC0();
      sub_10000EC68();
      sub_10001AC5C((unint64_t)v25);
      sub_10001C094();

      goto LABEL_11;
    }
    v30 = v2[7];
    swift_bridgeObjectRetain();
    v31 = sub_10002D8B0(v20, v15, v30);
    sub_1000059A8();
    sub_10000C028();
    if (v31)
    {
      sub_10000EC68();
      sub_10001AC5C(v31);
      sub_10001C094();

      goto LABEL_11;
    }

    goto LABEL_13;
  }

  v26 = sub_10001BE7C(&qword_100128750);
  v27 = sub_100017650(v26);
  *(_OWORD *)(v27 + 16) = xmmword_1000EFAF0;
  v28 = objc_allocWithZone((Class)LNProperty);
  v29 = sub_100016F00(v6, v7, 0);
  *(_QWORD *)(v27 + 32) = v29;
  specialized Array._endMutation()(v29);
  return (_QWORD *)v27;
}

_QWORD *sub_100074EC0()
{
  void *v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = objc_msgSend(v0, "cases");
  sub_10000795C(0, &qword_100129868, LNEnumCaseMetadata_ptr);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1);

  v3 = sub_10007311C(v2, v0);
  swift_bridgeObjectRelease(v2);
  return v3;
}

_QWORD *sub_100074F58(void *a1, void *a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v7;
  id v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  uint64_t *v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  NSString v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  void *v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  unint64_t v93;
  uint64_t v94;
  id v95;
  void *v96;
  id v97;
  uint64_t v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  _QWORD *v112;
  id v113;
  void *v114;
  id v115;
  id v116;
  NSString v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  id v122;
  _QWORD v123[2];
  _QWORD v124[4];
  _QWORD *v125;

  v7 = objc_msgSend(a1, "descriptionMetadata");
  v122 = a2;
  if (v7)
  {
    v3 = v7;
    v8 = objc_msgSend(v7, "descriptionText");

    v9 = &_swiftEmptyDictionarySingleton;
    if (v8)
    {
      v10 = (void *)LNSuggestedActionDialogParameterKeyDescription;
      v11 = a3;
      if (sub_10000E858(v125 + 2, v125[5])[1])
      {
        v12 = v10;
        sub_10000EC68();
        v13 = sub_1000766C0();
        sub_1000117B4();
      }
      else
      {
        v14 = v10;
        v13 = 0;
      }
      v15 = sub_100017A7C();

      v16 = sub_10001359C();
      v18 = v17;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      v124[0] = &_swiftEmptyDictionarySingleton;
      sub_100026158(v16, v18, v10, isUniquelyReferenced_nonNull_native);
      v3 = &_swiftEmptyDictionarySingleton;

      sub_100005A78();
      a3 = v11;
      v9 = &_swiftEmptyDictionarySingleton;
    }
  }
  else
  {
    v9 = &_swiftEmptyDictionarySingleton;
  }
  v20 = LNActionMetadata._iconSystemImageNameForAppIntentsOnly.getter();
  if (v21)
  {
    v22 = v20;
    v23 = v21;
    v3 = LNSuggestedActionDialogParameterKeyIconSystemImageName;
    sub_10001B120();
    sub_10001CD70();
    sub_10000C0D0(v22, v23, v24, v25);
    v9 = (_QWORD *)v124[0];

    sub_100005A78();
  }
  v26 = sub_100076140(a1);
  v27 = v125;
  if (v26)
  {
    v28 = v26;
    v3 = LNActionTypeSpecificMetadataKeyEntityType;
    sub_10002D9CC(v3, v28);

    sub_1000059A8();
    if (v124[3])
    {
      if ((swift_dynamicCast(v123, v124, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v29 = v123[0];
        v3 = (_QWORD *)v123[1];
        v30 = v27[8];
        sub_1000101B0();
        v31 = sub_10002D944(v29, (uint64_t)v3, v30);
        v33 = v32;
        sub_1000117B4();
        sub_1000059A8();
        if (v33)
        {
          v3 = LNSuggestedActionDialogParameterKeyEntityType;
          sub_10001B120();
          sub_10001CD70();
          sub_10000C0D0(v31, v33, v34, v35);
          v9 = (_QWORD *)v124[0];

          sub_100005A78();
        }
      }
    }
    else
    {
      sub_10000E0D4((uint64_t)v124);
    }
  }
  v36 = objc_msgSend(v122, "identifier");
  static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemProtocolIdentifierChangeBinarySetting);
  v37 = sub_100010284();
  if (v3 == (_QWORD *)v37 && &LNSuggestedActionDialogParameterKeyEntityType == v38)
  {
    sub_1000117AC((uint64_t)&LNSuggestedActionDialogParameterKeyEntityType);
    goto LABEL_41;
  }
  v40 = sub_10001B2F8(v37, (uint64_t)v38);
  swift_bridgeObjectRelease(&LNSuggestedActionDialogParameterKeyEntityType);
  sub_10000E038();
  if ((v40 & 1) != 0)
  {
LABEL_41:

    v57 = sub_10000E858(v27 + 2, v27[5]);
    v58 = sub_1000766C8(0x676E6974746573, 0xE700000000000000, *v57, v57[1], v57[2], v57[3]);
    if (v58)
    {
      v59 = (void *)v58;
      v60 = sub_10000E858(v27 + 2, v27[5]);
      v61 = sub_1000766C8(0x704F65676E616863, 0xEF6E6F6974617265, *v60, v60[1], v60[2], v60[3]);
      if (v61)
      {
        v62 = (void *)v61;
        v63 = LNSuggestedActionDialogParameterKeyEntityName;
        v64 = objc_msgSend(v59, "displayRepresentation");
        v65 = objc_msgSend(v64, "title");

        if (sub_10000E858(v27 + 2, v27[5])[1])
        {
          sub_10000EC68();
          v66 = sub_1000766C0();
          sub_1000117B4();
        }
        else
        {
          v66 = 0;
        }
        v80 = sub_100017A7C();

        v81 = sub_10001359C();
        v83 = v82;

        v84 = sub_10001B120();
        v124[0] = v9;
        sub_100026158(v81, v83, v63, v84);
        v85 = v124[0];

        sub_100005A78();
        v86 = LNSuggestedActionDialogParameterKeyChangeOperation;
        v87 = objc_msgSend(v62, "identifier");
        v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
        v90 = v89;

        v91 = swift_isUniquelyReferenced_nonNull_native(v85);
        v124[0] = v85;
        sub_100026158(v88, v90, v86, v91);
        v9 = (_QWORD *)v124[0];

LABEL_53:
        sub_100005A78();
        return v9;
      }

    }
    sub_1000101FC();
    v67 = sub_1000764BC();
    sub_1000176B0((uint64_t)&type metadata for SuggestedActionsGeneratorDialogingError, v67);
    v69 = 0;
    *(_QWORD *)v68 = a3;
LABEL_47:
    *(_BYTE *)(v68 + 8) = v69;
    swift_willThrow(a3);
    return v9;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(LNSystemProtocolIdentifierNavigateSequentially);
  v41 = sub_100010284();
  if (v40 == v41 && &LNSuggestedActionDialogParameterKeyEntityType == v42)
  {

    sub_1000117AC((uint64_t)&LNSuggestedActionDialogParameterKeyEntityType);
    goto LABEL_49;
  }
  v44 = sub_10001B2F8(v41, (uint64_t)v42);

  swift_bridgeObjectRelease(&LNSuggestedActionDialogParameterKeyEntityType);
  v45 = sub_10000E038();
  if ((v44 & 1) != 0)
  {
LABEL_49:
    v70 = sub_10000E858(v27 + 2, v27[5]);
    v71 = sub_1000766C8(0x6F69746365726964, 0xE90000000000006ELL, *v70, v70[1], v70[2], v70[3]);
    if (v71)
    {
      v72 = (void *)v71;
      v73 = LNSuggestedActionDialogParameterKeyDirection;
      v74 = objc_msgSend(v72, "identifier");
      v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      v77 = v76;

      sub_10001B120();
      sub_10001CD70();
      sub_10000C0D0(v75, v77, v78, v79);
      v9 = (_QWORD *)v124[0];

      goto LABEL_53;
    }
    sub_1000101FC();
    v93 = sub_1000764BC();
    sub_1000176B0((uint64_t)&type metadata for SuggestedActionsGeneratorDialogingError, v93);
    *(_QWORD *)v68 = a3;
    v69 = 1;
    goto LABEL_47;
  }
  v46 = sub_10000EC70(v45, "parameters");
  sub_10000795C(0, &qword_1001284E0, LNProperty_ptr);
  v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46);

  if (v47 >> 62)
    goto LABEL_69;
  v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1000101B0();
  for (; v48; v48 = sub_1000058C8())
  {
    v49 = 4;
    while (1)
    {
      v50 = (v47 & 0xC000000000000001) != 0 ? (id)sub_1000133B4() : *(id *)(v47 + 8 * v49);
      v51 = v50;
      v52 = v49 - 3;
      if (__OFADD__(v49 - 4, 1))
        break;
      v53 = sub_10000EC70((uint64_t)v50, "value");
      if (v53
        && (v54 = v53, v55 = objc_msgSend(v53, "valueType"), v54, v55))
      {
        v56 = objc_opt_self(LNEntityValueType);
        if (sub_100018F28(v56))
        {
          sub_1000117AC(v47);

          v95 = sub_10000EC70(v94, "value");
          if (v95)
          {
            v96 = v95;
            v97 = objc_msgSend(v95, "valueType");
            v98 = objc_opt_self(LNEntityValueType);
            v99 = (void *)sub_100018F28(v98);
            if (!v99)
              goto LABEL_60;
            v100 = objc_msgSend(v99, "identifier");
            v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
            v103 = v102;

            v104 = v125[8];
            sub_10000EC68();
            sub_10002D944(v101, v103, v104);
            v106 = v105;
            swift_bridgeObjectRelease(v103);
            sub_1000117B4();
            if (v106)
            {
              v107 = LNSuggestedActionDialogParameterKeyEntityType;
              sub_10001B120();
              v108 = sub_10001B4B0();
              sub_10000C0D0(v108, v109, v110, v111);
              v9 = (_QWORD *)v124[0];

              sub_100005A78();
            }
            else
            {
LABEL_60:

            }
            v112 = v125;
            v113 = objc_msgSend(v96, "displayRepresentation");
            if (v113)
            {
              v114 = v113;
              v115 = LNSuggestedActionDialogParameterKeyEntityName;
              v116 = objc_msgSend(v114, "title");
              if (sub_10000E858(v112 + 2, v112[5])[1])
              {
                sub_10000EC68();
                v117 = sub_1000766C0();
                sub_1000117B4();
              }
              else
              {
                v117 = 0;
              }
              v118 = objc_msgSend(v116, "localizedStringForLocaleIdentifier:", v117);

              sub_10001359C();
              sub_10001B120();
              v119 = sub_10001B4B0();
              sub_100026158(v119, v120, v115, v121);
              v9 = (_QWORD *)v124[0];

              goto LABEL_53;
            }

          }
          return v9;
        }

      }
      else
      {
        v55 = v51;
      }

      ++v49;
      if (v52 == v48)
        goto LABEL_39;
    }
    __break(1u);
LABEL_69:
    sub_1000101B0();
  }
LABEL_39:
  sub_1000117AC(v47);
  return v9;
}

_QWORD *sub_100075860()
{
  _QWORD *v0;

  sub_10000E87C(v0 + 2);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  return v0;
}

uint64_t sub_10007588C()
{
  uint64_t v0;

  sub_100075860();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for SuggestedActionsGenerator()
{
  return objc_opt_self(_TtC10LinkDaemon25SuggestedActionsGenerator);
}

id sub_1000758CC()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000795C(0, &qword_10012A3E0, LNLinkEnumerationValueType_ptr);
  v1 = objc_msgSend(v0, "identifier");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  return sub_100075944(v2, v4);
}

id sub_100075944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  NSString v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(v4, "initWithEnumerationIdentifier:", v5);

  return v6;
}

void sub_1000759B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17[2];
  _QWORD *v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = a1 + 40;
    v5 = _swiftEmptyArrayStorage;
    v15 = a1 + 40;
    do
    {
      v16 = v5;
      v6 = (uint64_t *)(v4 + 16 * v3);
      v7 = v3;
      while (1)
      {
        if (v7 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v9 = *(v6 - 1);
        v8 = *v6;
        v3 = v7 + 1;
        swift_bridgeObjectRetain_n(*v6, 2);
        v10 = sub_10001161C(v17, v9, v8);
        swift_bridgeObjectRelease(v17[1]);
        if ((v10 & 1) != 0)
          break;
        swift_bridgeObjectRelease(v8);
        v6 += 2;
        ++v7;
        if (v2 == v3)
          goto LABEL_13;
      }
      v5 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      v18 = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10001573C();
        v5 = v18;
      }
      v12 = v5[2];
      v13 = v12 + 1;
      if (v12 >= v5[3] >> 1)
      {
        sub_10001573C();
        v13 = v12 + 1;
        v5 = v18;
      }
      v5[2] = v13;
      v14 = &v5[2 * v12];
      v14[4] = v9;
      v14[5] = v8;
      v4 = v15;
    }
    while (v2 - 1 != v7);
  }
LABEL_13:
  swift_bridgeObjectRelease(a1);
}

id sub_100075B3C(void *a1, void *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  NSDictionary v8;
  id v9;

  v4 = v3;
  if (a3)
  {
    type metadata accessor for LNSuggestedActionDialogParameterKey(0);
    sub_10002D80C(&qword_100128438, (uint64_t (*)(uint64_t))type metadata accessor for LNSuggestedActionDialogParameterKey, (uint64_t)&unk_1000EF7CC);
    v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v8.super.isa = 0;
  }
  v9 = objc_msgSend(v4, "initWithAction:systemProtocol:dialogParameters:", a1, a2, v8.super.isa);

  return v9;
}

uint64_t sub_100075BFC(uint64_t a1, char a2, _QWORD *a3, void (*a4)(void), uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  void **i;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  id v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  Swift::String v29;
  Swift::String v30;
  uint64_t v32;
  uint64_t v35;
  unint64_t v36;
  _QWORD v37[2];
  uint64_t v38;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRetain();
  v32 = v7;
  for (i = (void **)(v7 + 48); ; i += 3)
  {
    v10 = (uint64_t)*(i - 2);
    v9 = (uint64_t)*(i - 1);
    v11 = *i;
    v37[0] = v10;
    v37[1] = v9;
    v12 = (_QWORD *)*a3;
    sub_100016794();
    v13 = v11;
    v15 = sub_100016310();
    v16 = v12[2];
    v17 = (v14 & 1) == 0;
    if (__OFADD__(v16, v17))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v18 = v14;
    if (v12[3] < v16 + v17)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_10001BE7C(a5);
      _NativeDictionary.copy()();
      if ((v18 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    v22 = (_QWORD *)(v21[6] + 16 * v15);
    *v22 = v10;
    v22[1] = v9;
    *(_QWORD *)(v21[7] + 8 * v15) = v13;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_18;
    v21[2] = v25;
    a2 = 1;
    if (!--v5)
      return sub_1000117AC(v32);
  }
  a4();
  v19 = sub_100016310();
  if ((v18 & 1) != (v20 & 1))
    goto LABEL_19;
  v15 = v19;
  if ((v18 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v26 = sub_1000176B0((uint64_t)&type metadata for _MergeError, (uint64_t)&protocol witness table for _MergeError);
  swift_willThrow(v26);
  v38 = v26;
  swift_errorRetain(v26);
  v27 = sub_10001BE7C((uint64_t *)&unk_100129420);
  if ((swift_dynamicCast(v27, &v38, v27, &type metadata for _MergeError, 0) & 1) == 0)
  {
    sub_10000E038();

    sub_1000117AC(v32);
    return swift_errorRelease(v38);
  }
LABEL_20:
  v35 = 0;
  v36 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v29._object = (void *)0x80000001000F4EF0;
  v29._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v29);
  _print_unlocked<A, B>(_:_:)(v37, &v35, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v30._countAndFlagsBits = 39;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v35, v36, "Swift/NativeDictionary.swift", 28, 2);
  __break(1u);
  return result;
}

void sub_100075EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;

  sub_10001BE7C(&qword_10012A3E8);
  v4 = static _DictionaryStorage.copy(original:)(a1);
  v5 = (_QWORD *)v4;
  v6 = 0;
  v39 = a1;
  v40 = a2;
  v9 = *(_QWORD *)(a1 + 64);
  v8 = a1 + 64;
  v7 = v9;
  v10 = 1 << *(_BYTE *)(v8 - 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v7;
  v35 = v8;
  v36 = (unint64_t)(v10 + 63) >> 6;
  v37 = v4 + 64;
  v38 = (_QWORD *)(a2 + 16);
  if ((v11 & v7) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  v41 = v6;
  for (i = v13 | (v6 << 6); ; i = __clz(__rbit64(v16)) + (v17 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * i);
    v20 = *v19;
    v21 = v19[1];
    v22 = *(void **)(*(_QWORD *)(v39 + 56) + 8 * i);
    v23 = sub_10000E858(v38, *(_QWORD *)(v40 + 40))[1];
    swift_bridgeObjectRetain();
    v24 = v22;
    if (v23)
    {
      swift_bridgeObjectRetain();
      v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v23);
    }
    else
    {
      v25 = 0;
    }
    v26 = objc_msgSend(v22, "localizedStringForLocaleIdentifier:", v25);

    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    *(_QWORD *)(v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v30 = (_QWORD *)(v5[6] + 16 * i);
    *v30 = v20;
    v30[1] = v21;
    v31 = (uint64_t *)(v5[7] + 16 * i);
    *v31 = v27;
    v31[1] = v29;
    v32 = v5[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v5[2] = v34;
    v6 = v41;
    if (v12)
      goto LABEL_4;
LABEL_5:
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_27;
    if (v15 >= v36)
      goto LABEL_25;
    v16 = *(_QWORD *)(v35 + 8 * v15);
    v17 = v6 + 1;
    if (!v16)
    {
      v17 = v6 + 2;
      if (v6 + 2 >= v36)
        goto LABEL_25;
      v16 = *(_QWORD *)(v35 + 8 * v17);
      if (!v16)
      {
        v17 = v6 + 3;
        if (v6 + 3 >= v36)
          goto LABEL_25;
        v16 = *(_QWORD *)(v35 + 8 * v17);
        if (!v16)
          break;
      }
    }
LABEL_18:
    v12 = (v16 - 1) & v16;
    v41 = v17;
  }
  v18 = v6 + 4;
  if (v6 + 4 >= v36)
  {
LABEL_25:
    swift_release();
    return;
  }
  v16 = *(_QWORD *)(v35 + 8 * v18);
  if (v16)
  {
    v17 = v6 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v36)
      goto LABEL_25;
    v16 = *(_QWORD *)(v35 + 8 * v17);
    ++v18;
    if (v16)
      goto LABEL_18;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100076140(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = objc_msgSend(a1, "typeSpecificMetadata");
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for LNActionTypeSpecificMetadataKey(0);
  v4 = v3;
  v5 = sub_10002D80C(&qword_100128428, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&unk_1000EF810);
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, v4, (char *)&type metadata for Any + 8, v5);

  return v6;
}

uint64_t sub_1000761CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  _QWORD *v14;
  id v15;
  unint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  _QWORD v41[5];
  _QWORD v42[3];
  ValueMetadata *v43;
  _UNKNOWN **v44;

  v43 = &type metadata for SiriDiscoverabilityClosedAppSuggestionStrategy;
  v44 = &off_10011C428;
  v14 = (_QWORD *)swift_allocObject(&unk_10011CF40, 48, 7);
  v42[0] = v14;
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = objc_msgSend(a7, "parameters", swift_bridgeObjectRetain().n128_f64[0]);
  sub_10000795C(0, &qword_1001284E0, LNProperty_ptr);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15);

  swift_bridgeObjectRetain();
  sub_1000735EC(v16, a1, a2);
  v18 = v17;
  swift_bridgeObjectRelease(v16);
  if (!v18)
    goto LABEL_10;
  v19 = objc_msgSend(v18, "value");
  if (!v19)
    goto LABEL_8;
  v20 = v19;
  v21 = objc_msgSend(v19, "value");
  _bridgeAnyObjectToAny(_:)(v41, v21);
  swift_unknownObjectRelease(v21);
  if ((swift_dynamicCast(v40, v41, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {

LABEL_8:
LABEL_10:
    v38 = 0;
    goto LABEL_11;
  }
  v23 = v40[0];
  v22 = v40[1];
  v24 = objc_msgSend(v20, "valueType");
  v25 = objc_opt_self(LNLinkEnumerationValueType);
  v26 = swift_dynamicCastObjCClass(v24, v25);
  if (!v26)
    goto LABEL_9;
  v27 = (void *)v26;
  v28 = sub_10000E858(v42, (uint64_t)v43)[2];
  v29 = objc_msgSend(v27, "enumerationIdentifier", swift_bridgeObjectRetain().n128_f64[0]);
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  sub_10002D990(v30, v32, v28);
  v34 = v33;
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v28);
  if (!v34)
  {
LABEL_9:

    swift_bridgeObjectRelease(v22);
    goto LABEL_10;
  }
  v35 = objc_msgSend(v34, "cases");
  sub_10000795C(0, &qword_100129868, LNEnumCaseMetadata_ptr);
  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35);

  swift_bridgeObjectRetain();
  sub_1000735EC(v36, v23, v22);
  v38 = v37;
  swift_bridgeObjectRelease(v36);

  swift_bridgeObjectRelease(v22);
LABEL_11:
  sub_10000E87C(v42);
  return v38;
}

unint64_t sub_1000764BC()
{
  unint64_t result;

  result = qword_10012A3D8;
  if (!qword_10012A3D8)
  {
    result = swift_getWitnessTable(&unk_1000F0F08, &type metadata for SuggestedActionsGeneratorDialogingError);
    atomic_store(result, (unint64_t *)&qword_10012A3D8);
  }
  return result;
}

uint64_t sub_1000764F8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10007652C(void *a1, void *a2)
{
  uint64_t v2;

  return sub_100073ED8(a1, a2, v2);
}

uint64_t initializeBufferWithCopyOfBuffer for SuggestedActionsGeneratorDialogingError(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  id v5;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(id *)a2;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for SuggestedActionsGeneratorDialogingError(id *a1)
{

}

uint64_t assignWithCopy for SuggestedActionsGeneratorDialogingError(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  id v5;
  void *v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(id *)a2;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;

  return a1;
}

uint64_t assignWithTake for SuggestedActionsGeneratorDialogingError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for SuggestedActionsGeneratorDialogingError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SuggestedActionsGeneratorDialogingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000766A0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SuggestedActionsGeneratorDialogingError()
{
  return &type metadata for SuggestedActionsGeneratorDialogingError;
}

NSString sub_1000766C0()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000766C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;

  return sub_1000761CC(a1, a2, a3, a4, a5, a6, v6);
}

void sub_1000766D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  _BYTE v40[168];
  uint64_t v41;
  uint64_t v42;
  ValueMetadata *v43;
  _UNKNOWN **v44;
  _OWORD v45[6];
  uint64_t v46;
  _QWORD v47[21];
  _BYTE v48[176];

  if (qword_100127DD8 != -1)
    swift_once(&qword_100127DD8, sub_100076E54);
  sub_1000189C4(v47, &unk_10012A3F8);
  sub_1000379AC(v47);
  if (qword_100127DE0 != -1)
    swift_once(&qword_100127DE0, sub_100076F30);
  sub_10001768C((uint64_t)&qword_10012A4A0);
  v41 = a3;
  v42 = a4;
  == infix<A>(_:_:)();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  if (qword_100127DE8 != -1)
    swift_once(&qword_100127DE8, sub_100076F5C);
  sub_10001768C((uint64_t)&qword_10012A4B8);
  v41 = a1;
  v42 = a2;
  == infix<A>(_:_:)();
  && infix(_:_:)(v11, v13, v15, v16, v17, v18);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000059B0();
  sub_1000059A8();
  sub_1000189C4(v40, v47);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v20, v22, v24, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)&v41);
  sub_1000117AC(v24);
  sub_1000117AC(v22);
  sub_100037A7C(v47);
  sub_1000189C4(v48, &v41);
  v43 = &type metadata for Table;
  v44 = &protocol witness table for Table;
  v41 = sub_1000100C8((uint64_t)&unk_10011D020, 184);
  sub_1000189C4((void *)(v41 + 16), v48);
  v25 = Connection.pluck(_:)(&v41);
  sub_10000E87C(&v41);
  if (!v38)
  {
    if (v25)
    {
      sub_100077074((uint64_t *)v45);
      v37 = v45[1];
      v39 = v45[0];
      v35 = v45[3];
      v36 = v45[2];
      v33 = v45[5];
      v34 = v45[4];
      v26 = v46;
      sub_1000059B0();
      swift_bridgeObjectRelease();
      v28 = v33;
      v27 = v34;
      v30 = v35;
      v29 = v36;
      v32 = v37;
      v31 = v39;
    }
    else
    {
      v26 = 0;
      v31 = 0uLL;
      v32 = 0uLL;
      v29 = 0uLL;
      v30 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
    }
    *(_OWORD *)a5 = v31;
    *(_OWORD *)(a5 + 16) = v32;
    *(_OWORD *)(a5 + 32) = v29;
    *(_OWORD *)(a5 + 48) = v30;
    *(_OWORD *)(a5 + 64) = v27;
    *(_OWORD *)(a5 + 80) = v28;
    *(_QWORD *)(a5 + 96) = v26;
  }
  sub_1000117E8();
}

uint64_t sub_1000769A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[21];
  _BYTE v17[168];
  _QWORD v18[22];

  if (qword_100127DD8 != -1)
    swift_once(&qword_100127DD8, sub_100076E54);
  sub_1000189C4(v18, &unk_10012A3F8);
  if (a2)
  {
    sub_1000379AC(v18);
    if (qword_100127DE8 != -1)
      swift_once(&qword_100127DE8, sub_100076F5C);
    sub_10001768C((uint64_t)&qword_10012A4B8);
    v16[0] = a1;
    v16[1] = a2;
    == infix<A>(_:_:)();
    v7 = v6;
    v3 = v8;
    v10 = v9;
    sub_1000189C4(&v15, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v7, v3, v10, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v16);
    sub_1000117AC(v10);
    sub_1000117AC(v3);
    sub_100037A7C(v18);
    v11 = v16;
  }
  else
  {
    sub_1000379AC(v18);
    v11 = v18;
  }
  sub_1000189C4(v17, v11);
  v16[3] = &type metadata for Table;
  v16[4] = &protocol witness table for Table;
  v16[0] = sub_1000100C8((uint64_t)&unk_10011D020, 184);
  sub_1000189C4((void *)(v16[0] + 16), v17);
  Connection.prepareRowIterator(_:)(v16);
  v12 = sub_10000E87C(v16);
  if (!v2)
  {
    __chkstk_darwin(v12);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    v3 = v14;
    swift_release();
    sub_1000059B0();
    swift_release();
  }
  return v3;
}

uint64_t sub_100076C1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;

  v2 = v1;
  sub_10000BFF4();
  sub_10001C7A4();
  sub_1000101FC();
  v4 = *(void **)(v1 + 16);
  sub_10000BFF4();
  sub_10001C7A4();
  sub_1000101FC();
  v5 = *(id *)(v2 + 32);
  sub_100018C3C();

  sub_10000BFF4();
  sub_10001C7A4();
  sub_1000101FC();
  sub_10000BFF4();
  sub_10001C7A4();
  sub_1000101FC();
  v6 = *(void **)(v2 + 72);
  sub_10000BFF4();
  sub_10001C7A4();
  sub_1000101FC();
  v7 = *(id *)(v2 + 88);
  sub_100018C3C();

  v8 = *(_QWORD *)(v2 + 96);
  swift_bridgeObjectRetain(v8);
  sub_1000354E0(a1, v8);
  return swift_bridgeObjectRelease(v8);
}

void sub_100076CD4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (sub_100017E14(v4, v5, *a2, v6) & 1) != 0)
  {
    v8 = a1[2];
    v9 = a1[3];
    v10 = a2[2];
    v11 = a2[3];
    v12 = v8 == v10 && v9 == v11;
    if (v12 || (sub_100017E14(v8, v9, v10, v11) & 1) != 0)
    {
      sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
      if ((static NSObject.== infix(_:_:)(a1[4], a2[4]) & 1) != 0)
      {
        v13 = a1[5];
        v14 = a1[6];
        v15 = a2[5];
        v16 = a2[6];
        v17 = v13 == v15 && v14 == v16;
        if (v17 || (sub_100017E14(v13, v14, v15, v16) & 1) != 0)
        {
          v18 = a1[7];
          v19 = a1[8];
          v20 = a2[7];
          v21 = a2[8];
          v22 = v18 == v20 && v19 == v21;
          if (v22 || (sub_100017E14(v18, v19, v20, v21) & 1) != 0)
          {
            v23 = a1[9];
            v24 = a1[10];
            v25 = a2[9];
            v26 = a2[10];
            v27 = v23 == v25 && v24 == v26;
            if ((v27 || (sub_100017E14(v23, v24, v25, v26) & 1) != 0)
              && (static NSObject.== infix(_:_:)(a1[11], a2[11]) & 1) != 0)
            {
              sub_10002F6EC();
            }
          }
        }
      }
    }
  }
}

void sub_100076DE4()
{
  _QWORD v0[9];

  Hasher.init(_seed:)(v0, 0);
  sub_100076C1C((uint64_t)v0);
  Hasher._finalize()();
  sub_100018C30();
}

void sub_100076E20(uint64_t a1)
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, a1);
  sub_100076C1C((uint64_t)v1);
  Hasher._finalize()();
  sub_100018C30();
}

void *sub_100076E54()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0xD000000000000010, 0x80000001000F4870, 0, 0);
  return memcpy(&unk_10012A3F8, __src, 0xA8uLL);
}

uint64_t sub_100076EA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_100076F30(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012A4A0, 0x6E6564496E617073, 0xEE00726569666974);
}

uint64_t sub_100076F5C(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012A4B8, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_100076F80(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012A4D0, 0x79747265706F7270, 0xED0000656C746954);
}

uint64_t sub_100076FAC(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012A4E8, 0xD000000000000010, 0x80000001000F4350);
}

uint64_t sub_100076FD0(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012A500, 0xD000000000000011, 0x80000001000F4F30);
}

uint64_t sub_100076FF4(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012A518, 0xD000000000000017, 0x80000001000F4F10);
}

uint64_t sub_100077018(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012A530, 0x65756C6176, 0xE500000000000000);
}

uint64_t sub_100077034@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3[13];

  sub_100077074(v3);
  return sub_1000775EC((uint64_t)v3, a1);
}

uint64_t sub_10007706C@<X0>(uint64_t a1@<X8>)
{
  return sub_100077034(a1);
}

uint64_t sub_100077074@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _UNKNOWN **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100127DE8 != -1)
    swift_once(&qword_100127DE8, sub_100076F5C);
  Row.get<A>(_:)();
  v34 = v36;
  v35 = v37;
  if (qword_100127DE0 != -1)
    swift_once(&qword_100127DE0, sub_100076F30);
  Row.get<A>(_:)();
  v6 = v36;
  v5 = v37;
  swift_retain();
  v7 = sub_10005AD0C(v34, v35, v6, v5);
  v31 = v6;
  v32 = v7;
  v33 = v5;
  swift_release();
  if (qword_100127DF0 != -1)
    swift_once(&qword_100127DF0, sub_100076F80);
  Row.get<A>(_:)();
  v8 = v36;
  v9 = v37;
  if (qword_100127DF8 != -1)
    swift_once(&qword_100127DF8, sub_100076FAC);
  Row.get<A>(_:)();
  v10 = v36;
  v11 = v37;
  if (qword_100127E00 != -1)
    swift_once(&qword_100127E00, sub_100076FD0);
  Row.get<A>(_:)();
  v30 = v8;
  v13 = v36;
  v12 = v37;
  if (qword_100127E08 != -1)
    swift_once(&qword_100127E08, sub_100076FF4);
  Row.get<A>(_:)();
  v28 = v4;
  v29 = v9;
  v15 = v36;
  v14 = v37;
  if (qword_100127E10 != -1)
    swift_once(&qword_100127E10, sub_100077018);
  Row.get<A>(_:)();
  v26 = v36;
  v27 = v37;
  sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
  v16 = LNStaticDeferredLocalizedString.init(localizedStringResourceJSON:)(v30, v29);
  v30 = sub_10000795C(0, &qword_100128768, LNValue_ptr);
  v17 = type metadata accessor for URL(0);
  v18 = (uint64_t)v28;
  sub_100014360((uint64_t)v28, 1, 1, v17);
  v19 = static LNValue.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v26, v27, v18, 0);
  sub_100020D24((uint64_t)v28);
  result = swift_bridgeObjectRelease(v27);
  v22 = v34;
  v21 = v35;
  v24 = v32;
  v23 = v33;
  *a1 = v31;
  a1[1] = v23;
  a1[2] = v22;
  a1[3] = v21;
  a1[4] = v16;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v13;
  a1[8] = v12;
  a1[9] = v15;
  a1[10] = v14;
  a1[11] = v19;
  a1[12] = (uint64_t)v24;
  return result;
}

_QWORD *sub_10007758C@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  _QWORD v5[13];

  result = a1(v5);
  if (!v2)
    return (_QWORD *)sub_1000775EC((uint64_t)v5, a2);
  return result;
}

_QWORD *sub_1000775D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007758C(*(_QWORD *(**)(_QWORD *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1000775EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C((uint64_t *)&unk_100129F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *assignWithCopy for LNAppShortcutSpanRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (void *)a2[4];
  v9 = (void *)a1[4];
  a1[4] = v8;
  v10 = v8;

  a1[5] = a2[5];
  v11 = a2[6];
  v12 = a1[6];
  a1[6] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  a1[7] = a2[7];
  v13 = a2[8];
  v14 = a1[8];
  a1[8] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  a1[9] = a2[9];
  v15 = a2[10];
  v16 = a1[10];
  a1[10] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = (void *)a2[11];
  v18 = (void *)a1[11];
  a1[11] = v17;
  v19 = v17;

  v20 = a2[12];
  v21 = a1[12];
  a1[12] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

void *initializeWithTake for LNAppShortcutSpanRecord(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

_QWORD *assignWithTake for LNAppShortcutSpanRecord(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  v7 = *(_QWORD *)(a2 + 48);
  v8 = a1[6];
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = a1[8];
  a1[7] = *(_QWORD *)(a2 + 56);
  a1[8] = v9;
  swift_bridgeObjectRelease(v10);
  a1[9] = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(a1[10]);
  v11 = (void *)a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);

  v12 = a1[12];
  a1[12] = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for LNAppShortcutSpanRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNAppShortcutSpanRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LNAppShortcutSpanRecord()
{
  return &type metadata for LNAppShortcutSpanRecord;
}

unint64_t sub_100077898()
{
  unint64_t result;

  result = qword_10012A548;
  if (!qword_10012A548)
  {
    result = swift_getWitnessTable(&unk_1000F0F78, &type metadata for LNAppShortcutSpanRecord);
    atomic_store(result, (unint64_t *)&qword_10012A548);
  }
  return result;
}

uint64_t sub_1000778D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v3 = 0;
  v25 = result;
  v26 = *(_QWORD *)(result + 16);
  v19 = _swiftEmptyArrayStorage;
  v27 = a3;
LABEL_2:
  v4 = v3 << 6;
  while (1)
  {
    if (v26 == v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v19;
    }
    v5 = v3;
    if (v3 >= *(_QWORD *)(v25 + 16))
      break;
    v7 = *(_QWORD *)(v25 + v4 + 32);
    v6 = *(_QWORD *)(v25 + v4 + 40);
    v8 = *(_QWORD *)(v25 + v4 + 56);
    v24 = *(_QWORD *)(v25 + v4 + 48);
    v9 = *(_QWORD *)(v25 + v4 + 64);
    v10 = *(_QWORD *)(v25 + v4 + 72);
    v11 = *(_QWORD *)(v25 + v4 + 80);
    v22 = *(_BYTE *)(v25 + v4 + 89);
    v23 = *(_BYTE *)(v25 + v4 + 88);
    if (v7 == a2 && v6 == a3)
    {
      v7 = a2;
      v6 = a3;
LABEL_12:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = v19;
      result = swift_isUniquelyReferenced_nonNull_native(v19);
      v28 = v19;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_100052860(0, v19[2] + 1, 1);
        v13 = v19;
      }
      v15 = v13[2];
      v14 = v13[3];
      v16 = v15 + 1;
      a3 = v27;
      if (v15 >= v14 >> 1)
      {
        v18 = v15 + 1;
        v20 = v13[2];
        result = (uint64_t)sub_100052860((char *)(v14 > 1), v15 + 1, 1);
        v16 = v18;
        v15 = v20;
        a3 = v27;
        v13 = v28;
      }
      v3 = v5 + 1;
      v13[2] = v16;
      v19 = v13;
      v17 = &v13[8 * v15];
      v17[4] = v7;
      v17[5] = v6;
      v17[6] = v24;
      v17[7] = v8;
      v17[8] = v9;
      v17[9] = v10;
      v17[10] = v11;
      *((_BYTE *)v17 + 88) = v23;
      *((_BYTE *)v17 + 89) = v22;
      goto LABEL_2;
    }
    v4 += 64;
    ++v3;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, a2, v27, 0);
    a3 = v27;
    if ((result & 1) != 0)
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100077AAC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = result;
  v25 = *(_QWORD *)(result + 16);
  if (v25)
  {
    v3 = 0;
    v24 = result + 32;
    v21 = (uint64_t *)(a2 + 56);
    v22 = _swiftEmptyArrayStorage;
    v23 = result;
    v31 = a2;
    while (1)
    {
      if (v3 >= *(_QWORD *)(v2 + 16))
      {
LABEL_29:
        __break(1u);
        return result;
      }
      v4 = v24 + (v3 << 6);
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v4 + 16);
      v7 = *(_QWORD *)(v4 + 24);
      v8 = *(_QWORD *)(v4 + 40);
      v29 = *(_QWORD *)(v4 + 32);
      v30 = *(_QWORD *)v4;
      v28 = *(_QWORD *)(v4 + 48);
      v26 = *(_BYTE *)(v4 + 57);
      v27 = *(_BYTE *)(v4 + 56);
      ++v3;
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
        goto LABEL_19;
      result = *(_QWORD *)(v31 + 32);
      v10 = *(_QWORD *)(v31 + 40);
      if (result != v6 || v10 != v7)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v6, v7, 0);
        if ((result & 1) == 0)
          break;
      }
LABEL_24:
      v2 = v23;
      a2 = v31;
      if (v3 == v25)
        goto LABEL_27;
    }
    if (v9 != 1)
    {
      v12 = v21;
      v13 = 1;
      while (1)
      {
        v14 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        result = *(v12 - 1);
        v15 = *v12;
        if (result == v6 && v15 == v7)
          goto LABEL_24;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v15, v6, v7, 0);
        if ((result & 1) != 0)
          goto LABEL_24;
        v12 += 2;
        ++v13;
        if (v14 == v9)
          goto LABEL_19;
      }
      __break(1u);
      goto LABEL_29;
    }
LABEL_19:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = v22;
    result = swift_isUniquelyReferenced_nonNull_native(v22);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100052860(0, v22[2] + 1, 1);
      v17 = v22;
    }
    v19 = v17[2];
    v18 = v17[3];
    if (v19 >= v18 >> 1)
    {
      result = (uint64_t)sub_100052860((char *)(v18 > 1), v19 + 1, 1);
      v17 = v22;
    }
    v17[2] = v19 + 1;
    v22 = v17;
    v20 = &v17[8 * v19];
    v20[4] = v30;
    v20[5] = v5;
    v20[6] = v6;
    v20[7] = v7;
    v20[8] = v29;
    v20[9] = v8;
    v20[10] = v28;
    *((_BYTE *)v20 + 88) = v27;
    *((_BYTE *)v20 + 89) = v26;
    goto LABEL_24;
  }
  v22 = _swiftEmptyArrayStorage;
LABEL_27:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v22;
}

_QWORD *sub_100077CE0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  sub_1000525B4();
  v3 = *(_QWORD *)(a1 + 16);
  sub_10000EC68();
  v19 = v3;
  v18 = a1;
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      sub_10000C030();
      v8 = a2(v4, v6, v7);
      v10 = v9;
      v12 = v11;
      v14 = v13;
      sub_1000059C4();
      v15 = _swiftEmptyArrayStorage[2];
      if (v15 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_1000525B4();
      ++v4;
      v5 += 2;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      v16 = &_swiftEmptyArrayStorage[4 * v15];
      v16[4] = v8;
      v16[5] = v10;
      v16[6] = v12;
      v16[7] = v14;
    }
    while (v19 != v4);
  }
  swift_bridgeObjectRelease(v18);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100077E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v6 = (uint64_t *)(v5 + 64);
    v7 = _swiftEmptyArrayStorage;
    v16 = a2;
    do
    {
      v8 = *(v6 - 3);
      v9 = *(v6 - 1);
      v18 = *(v6 - 2);
      v19 = *(v6 - 4);
      v10 = *v6;
      swift_bridgeObjectRetain_n(*v6, 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100077AAC(v10, a2);
      swift_bridgeObjectRetain();
      sub_100059078();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_100030048();
        v7 = v13;
      }
      v11 = v7[2];
      if (v11 >= v7[3] >> 1)
      {
        sub_100030048();
        v7 = v14;
      }
      v7[2] = v11 + 1;
      v12 = &v7[5 * v11];
      v12[4] = v19;
      v12[5] = v8;
      v12[6] = v18;
      v12[7] = v9;
      v12[8] = a3;
      v6 += 5;
      --v4;
      a2 = v16;
    }
    while (v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_100077FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a4;
  v22 = a1;
  v7 = sub_10001BE7C(&qword_100128EC0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001F350();
  v9 = type metadata accessor for _RegexFactory(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  makeFactory()(v11);
  v23[0] = a2;
  v23[1] = a3;
  v14 = sub_100040100();
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v23, &type metadata for String, v14);
  v15 = sub_10001BE7C(&qword_100128E88);
  v16 = sub_10001BE7C(&qword_100128E80);
  sub_10007EC60(&qword_100128E98, &qword_100128E80);
  v18 = v17;
  sub_10007EC60(&qword_100128ED8, &qword_100128EC0);
  _RegexFactory.accumulate<A, B, C>(_:_:)(v22, v4, v15, v16, v7, v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void sub_100078124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  unint64_t v15;
  uint64_t *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  void *v71;
  id v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144[4];

  v2 = v0;
  v3 = sub_1000791D8();
  if (v1)
    return;
  v129 = v3;
  v144[3] = (uint64_t)_swiftEmptyArrayStorage;
  v11 = (int *)sub_10001943C();
  v12 = *(_QWORD *)(v0 + v11[7]);
  v141 = v0;
  v127 = *(_QWORD *)(v12 + 16);
  if (!v127)
  {
LABEL_42:
    v144[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    v65 = *(_QWORD *)(v2 + v11[12]);
    v66 = *(_QWORD *)(v65 + 16);
    if (v66)
    {
      v67 = v2 + v11[5];
      v68 = *(_QWORD *)(v67 + 48);
      v134 = *(_QWORD *)(v67 + 40);
      swift_bridgeObjectRetain();
      v132 = v69;
      v70 = (void **)(v69 + 48);
      do
      {
        v136 = v66;
        v71 = *v70;
        sub_10000C030();
        v72 = v71;
        v73 = sub_10000BFF4();
        v74 = sub_100013328(v73, "entityIdentifier");
        v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v140 = v75;

        v77 = sub_100013328(v76, "phraseTemplates");
        sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
        v138 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v77);

        v78 = sub_10001BE7C(&qword_100128760);
        v79 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, type metadata for String, v78, &protocol witness table for String);
        v80 = sub_10000795C(0, &qword_100128768, LNValue_ptr);
        v81 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, type metadata for String, v80, &protocol witness table for String);
        type metadata accessor for LNPlatformName(0);
        v82 = v68;
        v84 = v83;
        v85 = sub_10000795C(0, &qword_10012BF50, LNAvailabilityAnnotation_ptr);
        sub_10007EC94(&qword_100128418, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName);
        v86 = v84;
        v68 = v82;
        v88 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v86, v85, v87);
        v89 = objc_allocWithZone((Class)LNAssistantIntentMetadata);
        v90 = sub_10007D300(v143, v140, v138, v79, v81, v88);
        sub_10007939C(v134, v68, v90, _swiftEmptyArrayStorage, v129, v144);
        sub_100059130(v91);

        sub_1000059C4();
        v92 = sub_1000101FC();
        v70 += 3;
        v66 = v136 - 1;
      }
      while (v136 != 1);
      v100 = sub_10000FE84(v92, v93, v94, v95, v96, v97, v98, v99, v108, (uint64_t)v110, v112.n128_i64[0], v112.n128_i64[1], v115, v117, v119, v121, (uint64_t)v123, v125, v127,
               v129,
               v132);
      sub_1000107D8(v100, v101, v102, v103, v104, v105, v106, v107, v109, v111, v113, v114, v116, v118, v120, v122, v124, v126, v128,
        v130);
    }
    else
    {
      sub_1000107D8(v65, v4, v5, v6, v7, v8, v9, v10, v108, (uint64_t)v110, v112.n128_i64[0], v112.n128_i64[1], v115, v117, v119, v121, (uint64_t)v123, v125, v127,
        v129);
    }
    swift_bridgeObjectRelease();
    return;
  }
  v123 = (_QWORD *)(v0 + v11[10]);
  v125 = v11[11];
  v108 = (uint64_t)v11;
  v121 = v0 + v11[5];
  v119 = v12 + 32;
  v14 = swift_bridgeObjectRetain();
  v15 = 0;
  v14.n128_u64[0] = 136315138;
  v112 = v14;
  v110 = (char *)&type metadata for Any + 8;
  v117 = v13;
  while (v15 < *(_QWORD *)(v13 + 16))
  {
    v135 = v15;
    v16 = (uint64_t *)(v119 + 24 * v15);
    v133 = *v16;
    v17 = (void *)v16[2];
    v139 = v16[1];
    swift_bridgeObjectRetain();
    v18 = v17;
    v19 = objc_msgSend(v18, "intentIdentifier");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    sub_10000E858(v123, v123[3]);
    v23 = *(_QWORD *)(v121 + 40);
    v24 = *(_QWORD *)(v121 + 48);
    sub_10000BFF4();
    sub_10006143C(v23, v24, v20, v22);
    v142 = v25;
    v26 = sub_1000101FC();
    v27 = *(_QWORD *)(v2 + v125);
    v137 = v18;
    v28 = sub_100017A8C(v26, "intentIdentifier");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);

    if (*(_QWORD *)(v27 + 16) && (v30 = sub_100016064(v29), (v31 & 1) != 0))
    {
      v32 = *(void **)(*(_QWORD *)(v27 + 56) + 8 * v30);
      v33 = v32;
    }
    else
    {
      v32 = 0;
    }
    v2 = v141;
    v34 = sub_1000101FC();
    if (v142)
    {
      v131 = v32;
      v35 = sub_100017A8C(v34, "identifier");
      sub_10000E038();

      v37 = sub_100017A8C(v36, "parameters");
      sub_10000795C(0, &qword_1001286C8, LNActionParameterMetadata_ptr);
      v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37);

      if (v38 >> 62)
      {
        sub_1000101B0();
        v39 = sub_1000058C8();
      }
      else
      {
        v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
        sub_1000101B0();
      }
      v40 = &off_100126000;
      if (v39)
      {
        if (v39 < 1)
          goto LABEL_49;
        v41 = 0;
        v42 = _swiftEmptyArrayStorage;
        do
        {
          if ((v38 & 0xC000000000000001) != 0)
            v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v38);
          else
            v43 = *(id *)(v38 + 8 * v41 + 32);
          v44 = v43;
          v45 = objc_msgSend(v43, v40[413], v108);
          v46 = objc_opt_self(LNArrayValueType);
          if (swift_dynamicCastObjCClass(v45, v46))
          {

            v47 = sub_100004ED8(v44);
            v49 = v48;

            if (v49)
            {
              if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
              {
                sub_1000073A0();
                sub_10001B71C();
                v42 = v53;
              }
              v51 = v42[2];
              v50 = v42[3];
              if (v51 >= v50 >> 1)
              {
                sub_10000C0D8(v50);
                sub_10001B71C();
                v42 = v54;
              }
              v42[2] = v51 + 1;
              v52 = &v42[2 * v51];
              v52[4] = v47;
              v52[5] = v49;
              v40 = &off_100126000;
            }
          }
          else
          {

          }
          ++v41;
        }
        while (v39 != v41);
      }
      else
      {
        v42 = _swiftEmptyArrayStorage;
      }
      sub_1000117AC(v38);
      v144[0] = (uint64_t)_swiftEmptyDictionarySingleton;
      v2 = v141;
      if (v42)
        goto LABEL_33;
    }
    else
    {
      if (!v32)
      {
        if (qword_100127E70 != -1)
          swift_once(&qword_100127E70, sub_100090544);
        v58 = sub_10000C05C();
        sub_100012A40(v58, (uint64_t)qword_10012D0C8);
        v59 = sub_100016794();
        v60 = Logger.logObject.getter(v59);
        v61 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v60, v61))
        {
          v62 = sub_100011780(12);
          v63 = sub_100011780(32);
          v144[0] = v63;
          *(_DWORD *)v62 = v112.n128_u32[0];
          sub_100016794();
          *(_QWORD *)(v62 + 4) = sub_100018928(v20, v64, v144);
          sub_100018C48();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "%s does not have any metadata, skipping", (uint8_t *)v62, 0xCu);
          swift_arrayDestroy(v63, 1);
          v2 = v141;
          sub_1000133FC(v63);
          sub_1000133FC(v62);

          swift_bridgeObjectRelease();
        }
        else
        {

          swift_bridgeObjectRelease();
          sub_1000117AC((uint64_t)v22);
        }
        goto LABEL_34;
      }
      v131 = v32;
      v55 = objc_msgSend(v32, "identifier");
      sub_10000E038();

      v144[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    }
    v42 = _swiftEmptyArrayStorage;
LABEL_33:
    sub_10007939C(v133, v139, v137, v42, v129, v144);
    v57 = v56;
    sub_1000059C4();
    sub_1000059A8();
    sub_100059130(v57);

    sub_10000C028();
LABEL_34:
    v15 = v135 + 1;
    v13 = v117;
    if (v135 + 1 == v127)
    {
      swift_bridgeObjectRelease();
      v11 = (int *)v108;
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
}

uint64_t sub_10007897C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_10001BE7C(&qword_1001296A8);
  v1 = swift_allocObject(v0, 96, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000EFD90;
  *(_QWORD *)(v1 + 32) = String.subscript.getter(15, 983047);
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 56) = v4;
  v5 = (0x80000001000F3A10 & 0xF00000000000000) >> 40;
  if ((0x80000001000F3A10 & 0x2000000000000000) == 0)
    v5 = 1114112;
  v6 = 11;
  if ((0x80000001000F3A10 & 0x1000000000000000) == 0)
    v6 = 7;
  result = String.subscript.getter(15, v5 | v6);
  *(_QWORD *)(v1 + 64) = result;
  *(_QWORD *)(v1 + 72) = v8;
  *(_QWORD *)(v1 + 80) = v9;
  *(_QWORD *)(v1 + 88) = v10;
  qword_10012CF58 = v1;
  return result;
}

uint64_t sub_100078A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10001BE7C(&qword_100128E80);
  sub_1000269D8(v0, qword_10012CF60);
  sub_100012A40(v0, (uint64_t)qword_10012CF60);
  v1 = sub_10001BE7C(&qword_100128E88);
  sub_10007EC60(&qword_100128E98, &qword_100128E80);
  return Regex.init<A>(_:)(sub_100078AE8, 0, v1, v0, v2);
}

uint64_t sub_100078AE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v47 = a1;
  v1 = sub_10001BE7C(&qword_100128EC0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = v1;
  __chkstk_darwin(v1);
  v44 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - v6;
  v8 = sub_10001BE7C(&qword_100128E80);
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for _RegexFactory(0);
  v11 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001BE7C(&qword_100128EC8);
  v15 = *(_QWORD *)(v14 - 8);
  v42 = v14;
  v43 = v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v39 = (char *)&v37 - v19;
  v52 = 31524;
  v53 = 0xE200000000000000;
  v20 = sub_100040100();
  v21 = static RegexComponentBuilder.buildExpression<A>(_:)(&v52, type metadata for String, v20);
  makeFactory()(v21);
  v48 = v7;
  sub_100078E7C((uint64_t)v7);
  v22 = sub_10001BE7C(&qword_100128E88);
  sub_10007EC60(&qword_100128ED8, &qword_100128EC0);
  v24 = v23;
  v37 = v10;
  v38 = v3;
  _RegexFactory.capture<A, B>(_:)(v7, v22, v3, v23);
  v41 = *(void (**)(char *, uint64_t))(v2 + 8);
  v41(v7, v3);
  v40 = *(void (**)(char *, uint64_t))(v11 + 8);
  v40(v13, v49);
  Capture.init(_:)(v10, v22);
  sub_10007EC60(&qword_100128EE0, &qword_100128EC8);
  v26 = v25;
  v27 = v39;
  v28 = v42;
  static RegexComponentBuilder.buildExpression<A>(_:)(v17, v42, v25);
  v43 = *(_QWORD *)(v43 + 8);
  ((void (*)(char *, uint64_t))v43)(v17, v28);
  v50 = 125;
  v51 = 0xE100000000000000;
  static RegexComponentBuilder.buildExpression<A>(_:)(&v50, type metadata for String, v20);
  v50 = v54;
  v51 = v55;
  v29 = v48;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(&v50, type metadata for String, v20);
  v30 = swift_bridgeObjectRelease();
  makeFactory()(v30);
  v31 = v44;
  v32 = v38;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v29, v38, v24);
  v33 = (uint64_t)v37;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v31, v27, v22, v32, v28, v24, v26);
  v34 = v31;
  v35 = v41;
  v41(v34, v32);
  v40(v13, v49);
  sub_100077FB0(v33, v52, v53, v47);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v33, v46);
  v35(v48, v32);
  return ((uint64_t (*)(char *, uint64_t))v43)(v27, v28);
}

uint64_t sub_100078E7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a1;
  v41 = type metadata accessor for RegexRepetitionBehavior(0);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v38 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for _RegexFactory(0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001BE7C(&qword_100128EE8);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CharacterClass(0);
  v33 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001BE7C(&qword_100128EF0);
  v34 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001BE7C(&qword_100128EC0);
  v35 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v32 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v32 - v21;
  static RegexComponent<>.word.getter(v23);
  v24 = sub_100014360((uint64_t)v7, 1, 1, v41);
  makeFactory()(v24);
  sub_10007EC94((unint64_t *)&qword_100128EF8, (uint64_t (*)(uint64_t))&type metadata accessor for CharacterClass);
  _RegexFactory.oneOrMore<A, B>(_:_:)(v10, v7, &type metadata for Substring, v8, v25);
  sub_1000131A8((uint64_t)v7, &qword_100128EE8);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);
  OneOrMore.init(_:)(v16, &type metadata for Substring);
  OneOrMore.regex.getter(v11);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v13, v11);
  v27 = v38;
  static RegexRepetitionBehavior.reluctant.getter(v26);
  Regex.repetitionBehavior(_:)(v27, v14);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v41);
  v28 = *(void (**)(char *, uint64_t))(v35 + 8);
  v28(v16, v14);
  sub_10007EC60(&qword_100128ED8, &qword_100128EC0);
  v30 = v29;
  static RegexComponentBuilder.buildExpression<A>(_:)(v19, v14, v29);
  v28(v19, v14);
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(v22, v14, v30);
  return ((uint64_t (*)(char *, uint64_t))v28)(v22, v14);
}

uint64_t sub_1000791D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = sub_10001943C();
  v2 = (_QWORD *)(v0 + *(int *)(v1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000E858(v2, v3);
  v5 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v6 = sub_10001ABD0(v5);
  *(_OWORD *)(v6 + 16) = xmmword_1000EFAE0;
  v7 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  v8 = *v7;
  v9 = v7[1];
  *(_QWORD *)(v6 + 32) = *v7;
  *(_QWORD *)(v6 + 40) = v9;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24);
  sub_10000C030();
  v11 = v10(v6, v3, v4);
  v13 = v12;
  sub_10000EC84();
  v14 = v2[3];
  v15 = v2[4];
  sub_10000E858(v2, v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32))(v8, v9, v14, v15);
  v17 = v16;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18)
  {
    v19 = (_BYTE *)(v16 + 48);
    while ((*v19 & 1) == 0)
    {
      v19 += 24;
      if (!--v18)
        goto LABEL_5;
    }
    v22 = *((_QWORD *)v19 - 2);
    v23 = *((_QWORD *)v19 - 1);
    sub_1000101EC(v23);
    sub_100037D78(v17, v22, v23);
    v25 = v24;
    v20 = swift_allocObject(v5, 64, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1000EFD90;
    *(_QWORD *)(v20 + 32) = v22;
    *(_QWORD *)(v20 + 40) = v23;
    *(_QWORD *)(v20 + 48) = v11;
    *(_QWORD *)(v20 + 56) = v13;
    v21 = v25;
  }
  else
  {
LABEL_5:
    v20 = sub_10001ABD0(v5);
    *(_OWORD *)(v20 + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(v20 + 32) = v11;
    *(_QWORD *)(v20 + 40) = v13;
    v21 = v17;
  }
  sub_1000382BC(v21);
  sub_1000059A8();
  sub_100058FC0();
  return v20;
}

void sub_10007939C(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  NSURL *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[4];
  _QWORD *v62;
  void *v63;

  v7 = v6;
  v53 = a6;
  v57 = a4;
  v58 = a5;
  v55 = a1;
  v56 = a2;
  sub_10001BE7C(&qword_100128740);
  sub_100013E18();
  __chkstk_darwin(v9);
  sub_1000192A0();
  v51 = v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - v12;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  sub_100013E18();
  __chkstk_darwin(v16);
  v52 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100017A8C(v18, "phraseTemplates");
  sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v22 = sub_100017A8C(v21, "intentIdentifier");
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v59 = v23;

  if (!(v20 >> 62))
  {
    v24 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_10000C020();
    if (v24)
      goto LABEL_3;
LABEL_13:
    sub_1000059B0();
    sub_1000166C4((uint64_t)v13, 1);
LABEL_14:
    sub_1000131A8((uint64_t)v13, &qword_100128740);
    goto LABEL_15;
  }
  sub_10000C020();
  if (!sub_1000058C8())
    goto LABEL_13;
LABEL_3:
  sub_1000530A4(0, (v20 & 0xC000000000000001) == 0, v20);
  if ((v20 & 0xC000000000000001) != 0)
    v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
  else
    v25 = *(id *)(v20 + 32);
  v26 = v25;
  sub_1000059B0();
  v27 = objc_msgSend(v26, "bundleURL");

  if (v27)
  {
    v28 = v51;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v27);

    v29 = 0;
  }
  else
  {
    v29 = 1;
    v28 = v51;
  }
  v30 = v52;
  sub_1000166C4(v28, v29);
  sub_10007EB8C(v28, (uint64_t)v13);
  if (sub_10001C93C((uint64_t)v13, 1, v14) == 1)
    goto LABEL_14;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v30, v13, v14);
  v31 = (void *)objc_opt_self(NSBundle);
  URL._bridgeToObjectiveC()(v32);
  v34 = v33;
  v35 = objc_msgSend(v31, "ln_uniqueBundleWithURL:", v33);

  if (v35)
  {
    v36 = sub_10001943C();
    v37 = sub_100016624(*(_QWORD *)(v60 + *(int *)(v36 + 24)), *(_QWORD *)(v60 + *(int *)(v36 + 24) + 8), (uint64_t)"AssistantIntents");

    sub_10007F654();
    goto LABEL_16;
  }
  sub_10007F654();
LABEL_15:
  v37 = 0;
LABEL_16:
  v38 = sub_100079E20(v20, v37);
  v39 = sub_1000059B0();
  v40 = sub_100017A8C(v39, "parameterValues");
  v41 = sub_10001BE7C(&qword_100128760);
  v42 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v40, type metadata for String, v41, &protocol witness table for String);

  v43 = sub_10007A564(v42, v37, v53);
  sub_100007398();
  sub_10000E038();
  v44 = sub_10007FE38(a3);
  v63 = &_swiftEmptySetSingleton;
  v62 = _swiftEmptyArrayStorage;
  v45 = v38[2];
  if (v45)
  {
    sub_10000C030();
    v53 = v38;
    v46 = v38 + 7;
    while (1)
    {
      v47 = *(v46 - 1);
      v48 = *v46;
      v49 = *(v46 - 2);
      v61[0] = *(v46 - 3);
      v61[1] = v49;
      v61[2] = v47;
      v61[3] = v48;
      sub_100016794();
      sub_1000058B4();
      sub_10007AFDC(&v62, v61, v54, v59, v60, v58, v43, 0, v57, (uint64_t)v44, (uint64_t *)&v63, v55, v56, a3);
      if (v7)
        break;
      v46 += 4;
      sub_100007398();
      sub_10000E038();
      if (!--v45)
      {
        sub_1000059B0();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    sub_1000059A8();
    sub_1000059B0();
    swift_bridgeObjectRelease();
    sub_1000117AC((uint64_t)v53);
    sub_100007398();
    sub_10000E038();
    sub_1000101FC();
    sub_1000059D4();
  }
  else
  {
    sub_1000059B0();
LABEL_22:
    swift_bridgeObjectRelease();
    sub_1000059C4();
    sub_1000059A8();
    sub_1000059D4();
  }
  sub_1000117E8();
}

void sub_100079814(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  id v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  void *v63;
  NSURL *v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  sub_10001BE7C(&qword_100128740);
  sub_100013E18();
  __chkstk_darwin(v7);
  sub_1000192A0();
  v74 = v8;
  __chkstk_darwin(v9);
  v76 = (char *)&v69 - v10;
  v75 = type metadata accessor for URL(0);
  v73 = *(_QWORD *)(v75 - 8);
  sub_100013E18();
  __chkstk_darwin(v11);
  sub_10001F350();
  v12 = *(id *)(a2 + 16);
  v13 = objc_msgSend(v12, "intentIdentifier");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17 = sub_10001943C();
  sub_10000E858((_QWORD *)(a3 + *(int *)(v17 + 40)), *(_QWORD *)(a3 + *(int *)(v17 + 40) + 24));
  v18 = a3 + *(int *)(v17 + 20);
  v19 = *(_QWORD *)(v18 + 40);
  v20 = *(_QWORD *)(v18 + 48);
  sub_10001A83C();
  v21 = v19;
  v78 = (_QWORD *)v14;
  v22 = v77;
  sub_10006143C(v21, v20, v14, v16);
  v79 = v12;
  if (v22)
  {
    swift_errorRelease();
    sub_10000EC84();
    if (qword_100127E70 != -1)
      swift_once(&qword_100127E70, sub_100090544);
    v24 = sub_10000C05C();
    v25 = (uint8_t *)sub_100012A40(v24, (uint64_t)qword_10012D0C8);
    v26 = sub_10000BFF4();
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.info.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = (uint64_t)v78;
    if (v29)
    {
      sub_100011780(12);
      v31 = sub_10001B7F0();
      v82 = v31;
      *(_DWORD *)v25 = 136315138;
      sub_10000BFF4();
      v80 = sub_10000FBEC(v30, (unint64_t)v16, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
      swift_bridgeObjectRelease_n(v16, 3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s does not have any metadata, skipping", v25, 0xCu);
      swift_arrayDestroy(v31, 1);
      sub_1000133FC(v31);
      sub_1000133FC((uint64_t)v25);

    }
    else
    {

      sub_1000117AC((uint64_t)v16);
    }

    return;
  }
  v69 = v17;
  v70 = v3;
  v72 = v23;
  v77 = 0;
  v32 = sub_10000EC84();
  v33 = sub_100017A8C(v32, "phrases");
  v71 = sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
  v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33);

  if (v34 >> 62)
  {
    sub_1000101B0();
    v35 = sub_1000058C8();
    sub_1000059A8();
  }
  else
  {
    v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v36 = (uint64_t)v78;
  v37 = (uint64_t)v76;
  if (!v35)
  {
    sub_1000059A8();
    sub_100014360(v37, 1, 1, v75);
LABEL_18:
    sub_1000131A8(v37, &qword_100128740);
    goto LABEL_19;
  }
  sub_1000530A4(0, (v34 & 0xC000000000000001) == 0, v34);
  if ((v34 & 0xC000000000000001) != 0)
    v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v34);
  else
    v38 = *(id *)(v34 + 32);
  v39 = v38;
  v40 = sub_1000059A8();
  v41 = sub_100013328(v40, "bundleURL");

  if (v41)
  {
    v42 = v74;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v41);

    v43 = 0;
    v44 = a3;
    v45 = v70;
    v37 = (uint64_t)v76;
  }
  else
  {
    v43 = 1;
    v44 = a3;
    v45 = v70;
    v37 = (uint64_t)v76;
    v42 = v74;
  }
  v46 = v75;
  sub_100014360(v42, v43, 1, v75);
  sub_10007EB8C(v42, v37);
  v47 = v44;
  if (sub_10001C93C(v37, 1, v46) == 1)
    goto LABEL_18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32))(v45, v37, v46);
  v63 = (void *)objc_opt_self(NSBundle);
  URL._bridgeToObjectiveC()(v64);
  v66 = v65;
  v67 = objc_msgSend(v63, "ln_uniqueBundleWithURL:", v65);

  if (v67)
  {
    v68 = v45;
    v49 = (_QWORD *)sub_100016624(*(_QWORD *)(v47 + *(int *)(v69 + 24)), *(_QWORD *)(v47 + *(int *)(v69 + 24) + 8), (uint64_t)"AssistantIntents");

    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v68, v75);
    goto LABEL_20;
  }
  v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v45, v75);
LABEL_19:
  v49 = _swiftEmptyDictionarySingleton;
LABEL_20:
  v50 = sub_100017A8C(v48, "phrases");
  v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v50);

  v52 = sub_100079E20(v51, (uint64_t)v49);
  sub_100007398();
  sub_10000E038();
  v78 = v52;
  v53 = v52[2];
  if (v53)
  {
    v54 = v78 + 7;
    do
    {
      v55 = *(v54 - 1);
      v56 = *v54;
      objc_allocWithZone((Class)LNExamplePhraseDescription);
      sub_10000BFF4();
      sub_100016794();
      v57 = sub_10007D48C(4, v36, (uint64_t)v16, v55, v56, 0, 0, 0, 0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v57);
      v59 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v58 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v59 >= v58 >> 1)
      {
        v61 = sub_10000C0D8(v58);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61, v62, 1);
      }
      v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v57);
      specialized Array._endMutation()(v60);
      v54 += 4;
      --v53;
    }
    while (v53);
  }

  swift_bridgeObjectRelease();
  sub_1000101FC();

}

_QWORD *sub_100079E20(int64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    sub_10000EC68();
    if (_CocoaArrayWrapper.endIndex.getter(v18))
      goto LABEL_3;
LABEL_13:
    sub_1000117B4();
    return _swiftEmptyArrayStorage;
  }
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_10000EC68();
  if (!v5)
    goto LABEL_13;
LABEL_3:
  sub_1000530A4(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0)
    v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  else
    v6 = *(id *)(a1 + 32);
  v7 = v6;
  v8 = sub_1000117B4();
  if (a2
    && (v9 = objc_msgSend(v7, "key"),
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9),
        v12 = v11,
        v9,
        v13 = sub_10002D8B0(v10, v12, a2),
        v8 = sub_10000C028(),
        v13))
  {
    v22 = v13;
    sub_10000C030();
    sub_10007D5E0(&v22, (uint64_t (*)(uint64_t))sub_1000932E8, (uint64_t (*)(_QWORD *))sub_10007D658);
    v14 = sub_1000059C4();
    v15 = v22;
    __chkstk_darwin(v14);
    v21 = v7;
    v16 = sub_100077CE0(v15, sub_100040044);

    swift_release();
  }
  else
  {
    __chkstk_darwin(v8);
    v21 = v2;
    sub_100095974((void (*)(_QWORD *__return_ptr, id *))sub_10007EBD4, (uint64_t)&v20, a1);
    v16 = v17;

  }
  return v16;
}

uint64_t sub_10007A000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  Swift::Int v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t result;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;

  v4 = sub_10001BE7C(&qword_100128E78);
  v71 = *(_QWORD *)(v4 - 8);
  sub_100013E18();
  __chkstk_darwin(v5);
  sub_1000192A0();
  v66 = v6;
  __chkstk_darwin(v7);
  v69 = (char *)v62 - v8;
  v72 = (_QWORD *)a1;
  v73 = a2;
  if (qword_100127E20 != -1)
LABEL_25:
    swift_once(&qword_100127E20, sub_100078A4C);
  v9 = sub_10001BE7C(&qword_100128E80);
  v10 = sub_100012A40(v9, (uint64_t)qword_10012CF60);
  v11 = sub_10001BE7C(&qword_100128E88);
  v12 = sub_100040088();
  sub_10007EC60(&qword_100128E98, &qword_100128E80);
  v14 = BidirectionalCollection<>.matches<A, B>(of:)(v10, type metadata for String, v11, v9, v12, v13);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = _swiftEmptyArrayStorage;
  v70 = v4;
  v63 = v14;
  if (v15)
  {
    v80 = _swiftEmptyArrayStorage;
    sub_1000525E8();
    sub_10007F684();
    v18 = v14 + v17;
    v20 = *(_QWORD *)(v19 + 72);
    v67 = *(char **)(v19 + 16);
    v68 = v20;
    v16 = v80;
    do
    {
      v21 = v69;
      ((void (*)(char *, uint64_t, uint64_t))v67)(v69, v18, v4);
      Regex.Match.output.getter(&v72, v4);
      v22 = (uint64_t)v72;
      v23 = v73;
      v24 = v74;
      v25 = v75;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v21, v4);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_1000525E8();
        v16 = v80;
      }
      v27 = v16[2];
      v26 = v16[3];
      if (v27 >= v26 >> 1)
      {
        sub_10000C0D8(v26);
        sub_1000525E8();
        v16 = v80;
      }
      v16[2] = v27 + 1;
      v28 = &v16[4 * v27];
      v28[4] = v22;
      v28[5] = v23;
      v28[6] = v24;
      v28[7] = v25;
      v18 += v68;
      --v15;
      v4 = v70;
    }
    while (v15);
    v14 = v63;
  }
  v72 = v16;
  sub_1000100E0();
  sub_10007D5E0((uint64_t *)&v72, (uint64_t (*)(uint64_t))sub_1000932FC, (uint64_t (*)(_QWORD *))sub_10007DCBC);
  sub_10000C028();
  v29 = sub_10001BE7C(&qword_100128EA0);
  sub_10007EC60(&qword_100128EA8, &qword_100128EA0);
  v31 = v30;
  v32 = sub_1000400C4();
  v4 = Sequence<>.joined(separator:)(0, 0xE000000000000000, v29, v31, v32);
  v34 = v33;
  swift_release();
  v35 = *(char **)(v14 + 16);
  if (!v35)
  {
LABEL_22:
    sub_1000059C4();
    return v4;
  }
  v62[0] = v4;
  v62[1] = v34;
  sub_10007F684();
  v37 = v14 + v36;
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  v64 = *(_QWORD *)(v38 + 72);
  v65 = v39;
  sub_10000C030();
  v40 = _swiftEmptyDictionarySingleton;
  v41 = v70;
  v42 = v66;
  while (1)
  {
    v67 = v35;
    v65(v42, v37, v41);
    Regex.Match.output.getter(&v72, v41);
    swift_bridgeObjectRelease();
    v43 = v76;
    v44 = v77;
    v45 = v78;
    v46 = v79;
    v68 = Regex.Match.range.getter(v41);
    v69 = v47;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
    v72 = v40;
    sub_10000DD30();
    v49 = sub_10003155C();
    v51 = v40[2];
    v52 = (v50 & 1) == 0;
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v54 = v49;
    v4 = v50;
    sub_10001BE7C(&qword_100128EB8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v53))
      break;
LABEL_16:
    v40 = v72;
    if ((v4 & 1) != 0)
    {
      sub_10001B660();
    }
    else
    {
      sub_1000192E8((uint64_t)&v72[v54 >> 6]);
      v57 = (_QWORD *)(v40[6] + 32 * v54);
      *v57 = v43;
      v57[1] = v44;
      v57[2] = v45;
      v57[3] = v46;
      sub_10001B660();
      v58 = v40[2];
      v59 = __OFADD__(v58, 1);
      v60 = v58 + 1;
      if (v59)
        goto LABEL_24;
      v40[2] = v60;
      sub_10001A83C();
    }
    sub_10000EC84();
    sub_100005A78();
    v41 = v70;
    v42 = v66;
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v66, v70);
    v37 += v64;
    v35 = v67 - 1;
    if (v67 == (char *)1)
    {
      sub_1000059C4();
      v4 = v62[0];
      goto LABEL_22;
    }
  }
  sub_10000DD30();
  v55 = sub_10003155C();
  if ((v4 & 1) == (v56 & 1))
  {
    v54 = v55;
    goto LABEL_16;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Substring);
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

void sub_10007A498(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a1;
  _s7BuilderVMa(0);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "localizedStringForLocaleIdentifier:", v4);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = objc_msgSend(v3, "key");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  *a2 = v10;
  a2[1] = v12;
  a2[2] = v6;
  a2[3] = v8;
}

uint64_t sub_10007A564(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  char v31;
  BOOL v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD *@<X8>);
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t j;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  NSString v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  char v94;
  Swift::Bool v95;
  unint64_t v96;
  char v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  char v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  void *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  uint64_t v135;
  int64_t v136;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  void (*v147)(_QWORD *@<X8>);
  void (*v148)(_QWORD *@<X8>);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  _QWORD *v159;

  if (a2 && (v3 = a2, *(_QWORD *)(a2 + 16)))
  {
    v138 = a1 + 64;
    sub_1000185D8();
    v6 = v5 & v4;
    v139 = (unint64_t)(v7 + 63) >> 6;
    swift_bridgeObjectRetain();
    v147 = 0;
    v8 = 0;
    v9 = _swiftEmptyDictionarySingleton;
    if (!v6)
      goto LABEL_5;
LABEL_4:
    v10 = __clz(__rbit64(v6));
    v11 = (v6 - 1) & v6;
    for (i = v10 | (v8 << 6); ; i = __clz(__rbit64(v14)) + (v8 << 6))
    {
      v143 = v8;
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
      v17 = v16[1];
      v151 = *v16;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
      if ((unint64_t)v18 >> 62)
      {
        v54 = v18 < 0 ? *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i) : v18 & 0xFFFFFFFFFFFFFF8;
        sub_1000101EC(v18);
        sub_10001A83C();
        v19 = _CocoaArrayWrapper.endIndex.getter(v54);
        sub_1000059C4();
      }
      else
      {
        v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
        sub_10000C030();
        sub_10001A83C();
      }
      v141 = v11;
      if (v19)
        break;
LABEL_57:
      sub_10000EC84();
      sub_1000059C4();
      v6 = v141;
      v8 = v143;
      if (v141)
        goto LABEL_4;
LABEL_5:
      v13 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_136;
      if (v13 >= v139)
      {
LABEL_121:
        swift_release();
        v59 = 0;
        v123 = (uint64_t)v147;
        goto LABEL_122;
      }
      v14 = *(_QWORD *)(v138 + 8 * v13);
      ++v8;
      if (!v14)
      {
        v8 = v13 + 1;
        if (v13 + 1 >= v139)
          goto LABEL_121;
        v14 = *(_QWORD *)(v138 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 2;
          if (v13 + 2 >= v139)
            goto LABEL_121;
          v14 = *(_QWORD *)(v138 + 8 * v8);
          if (!v14)
          {
            v15 = v13 + 3;
            if (v15 >= v139)
              goto LABEL_121;
            v14 = *(_QWORD *)(v138 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                v8 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_138;
                if (v8 >= v139)
                  goto LABEL_121;
                v14 = *(_QWORD *)(v138 + 8 * v8);
                ++v15;
                if (v14)
                  goto LABEL_18;
              }
            }
            v8 = v15;
          }
        }
      }
LABEL_18:
      v11 = (v14 - 1) & v14;
    }
    v155 = v18 & 0xC000000000000001;
    v20 = 4;
    v144 = v18;
    v149 = v17;
    v154 = v19;
    while (1)
    {
      v21 = v155
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, v18)
          : *(id *)(v18 + 8 * v20);
      v22 = v20 - 3;
      if (__OFADD__(v20 - 4, 1))
        break;
      v23 = v21;
      v24 = objc_msgSend(v21, "key");
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);

      if (*(_QWORD *)(v3 + 16) && (v157 = v23, v26 = sub_100016064(v25), (v27 & 1) != 0))
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v26);
        sub_10000C030();
        sub_100007398();
        sub_10001A83C();
        sub_10007ECC8((uint64_t)v147, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
        sub_100016064(v151);
        sub_100019CF0();
        if (v32)
          goto LABEL_129;
        v33 = v30;
        v34 = v31;
        sub_10001BE7C(&qword_10012A568);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)_swiftEmptyDictionarySingleton))
        {
          v35 = sub_100016064(v151);
          if ((v34 & 1) != (v36 & 1))
            goto LABEL_139;
          v33 = v35;
        }
        sub_100005A78();
        if ((v34 & 1) == 0)
        {
          v37 = v28;
          sub_10001B4C8();
          *v38 = v151;
          v38[1] = v149;
          *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v33) = _swiftEmptyArrayStorage;
          v39 = _swiftEmptyDictionarySingleton[2];
          v40 = v39 + 1;
          v41 = __OFADD__(v39, 1);
          sub_10000EC68();
          if (v41)
            goto LABEL_133;
          _swiftEmptyDictionarySingleton[2] = v40;
          v28 = v37;
        }
        v42 = v3;
        swift_bridgeObjectRetain();
        v43 = _swiftEmptyDictionarySingleton[7];
        sub_1000117B4();
        v44 = *(_QWORD *)(v28 + 16);
        v45 = *(_QWORD *)(v43 + 8 * v33);
        v46 = *(_QWORD *)(v45 + 16);
        if (__OFADD__(v46, v44))
          goto LABEL_130;
        v47 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v43 + 8 * v33));
        *(_QWORD *)(v43 + 8 * v33) = v45;
        if (!v47 || v46 + v44 > *(_QWORD *)(v45 + 24) >> 1)
        {
          sub_10001EE90();
          v45 = v48;
          *(_QWORD *)(v43 + 8 * v33) = v48;
        }
        v3 = v42;
        v22 = v20 - 3;
        if (*(_QWORD *)(v28 + 16))
        {
          v49 = *(_QWORD *)(v45 + 16);
          if ((*(_QWORD *)(v45 + 24) >> 1) - v49 < v44)
            goto LABEL_132;
          v50 = v45 + 16 * v49 + 32;
          if (v28 + 32 < v50 + 16 * v44 && v50 < v28 + 32 + 16 * v44)
            goto LABEL_140;
          swift_arrayInitWithCopy(v50);
          if (v44)
          {
            v52 = *(_QWORD *)(v45 + 16);
            v32 = __OFADD__(v52, v44);
            v53 = v52 + v44;
            if (v32)
              goto LABEL_134;
            *(_QWORD *)(v45 + 16) = v53;
          }
        }
        else if (v44)
        {
          goto LABEL_131;
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)(v43 + 8 * v33) = v45;
        sub_10000EC84();

        v147 = sub_10007AFCC;
        v18 = v144;
      }
      else
      {

        sub_100007398();
      }
      ++v20;
      if (v22 == v154)
        goto LABEL_57;
    }
  }
  else
  {
    v133 = a1 + 64;
    sub_1000185D8();
    v57 = v56 & v55;
    v134 = (unint64_t)(v58 + 63) >> 6;
    swift_bridgeObjectRetain();
    v59 = 0;
    v60 = 0;
    v9 = _swiftEmptyDictionarySingleton;
    if (!v57)
      goto LABEL_65;
LABEL_64:
    sub_10001EDEC();
    for (j = v62 | (v61 << 6); ; j = __clz(__rbit64(v65)) + (v61 << 6))
    {
      v136 = v61;
      v67 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * j);
      v68 = *v67;
      v69 = v67[1];
      v145 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * j);
      if ((unint64_t)v145 >> 62)
      {
        v122 = v145 < 0 ? *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * j) : v145 & 0xFFFFFFFFFFFFFF8;
        sub_1000101EC(v145);
        sub_10001A83C();
        v70 = _CocoaArrayWrapper.endIndex.getter(v122);
        sub_1000059B0();
      }
      else
      {
        v70 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        sub_10001A83C();
      }
      v135 = v57;
      if (v70)
        break;
LABEL_114:
      sub_10000EC84();
      swift_bridgeObjectRelease();
      v57 = v135;
      v60 = v136;
      if (v135)
        goto LABEL_64;
LABEL_65:
      v64 = v60 + 1;
      if (__OFADD__(v60, 1))
        goto LABEL_135;
      if (v64 >= v134)
      {
LABEL_120:
        swift_release();
        v123 = 0;
LABEL_122:
        sub_10007ECC8(v123, 0);
        sub_10007ECC8((uint64_t)v59, 0);
        return (uint64_t)v9;
      }
      v65 = *(_QWORD *)(v133 + 8 * v64);
      v61 = v60 + 1;
      if (!v65)
      {
        v61 = v64 + 1;
        if (v64 + 1 >= v134)
          goto LABEL_120;
        v65 = *(_QWORD *)(v133 + 8 * v61);
        if (!v65)
        {
          v61 = v64 + 2;
          if (v64 + 2 >= v134)
            goto LABEL_120;
          v65 = *(_QWORD *)(v133 + 8 * v61);
          if (!v65)
          {
            v66 = v64 + 3;
            if (v66 >= v134)
              goto LABEL_120;
            v65 = *(_QWORD *)(v133 + 8 * v66);
            if (!v65)
            {
              while (1)
              {
                v61 = v66 + 1;
                if (__OFADD__(v66, 1))
                  goto LABEL_137;
                if (v61 >= v134)
                  goto LABEL_120;
                v65 = *(_QWORD *)(v133 + 8 * v61);
                ++v66;
                if (v65)
                  goto LABEL_78;
              }
            }
            v61 = v66;
          }
        }
      }
LABEL_78:
      v57 = (v65 - 1) & v65;
    }
    v142 = v68;
    v71 = 4;
    v140 = v70;
    while (1)
    {
      v72 = (v145 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v71 - 4, v145)
          : *(id *)(v145 + 8 * v71);
      v73 = v72;
      if (__OFADD__(v71 - 4, 1))
        break;
      v150 = v71 - 3;
      v74 = objc_msgSend(v72, "key");
      v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      v77 = v76;

      v78 = *a3;
      v152 = v71;
      if (*(_QWORD *)(*a3 + 16) && (v79 = sub_10001003C(v75), (v80 & 1) != 0))
      {
        v81 = (uint64_t *)(*(_QWORD *)(v78 + 56) + 16 * v79);
        v156 = v81[1];
        v158 = *v81;
        swift_bridgeObjectRetain();
        sub_100007398();
      }
      else
      {
        v82 = v69;
        v148 = v59;
        v83 = v75;
        v84 = v9;
        _s7BuilderVMa(0);
        v85 = String._bridgeToObjectiveC()();
        v146 = v73;
        v86 = objc_msgSend(v73, "localizedStringForLocaleIdentifier:", v85);

        v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
        v88 = v87;

        sub_1000058B4();
        v156 = v88;
        sub_10000EC68();
        v89 = swift_isUniquelyReferenced_nonNull_native(*a3);
        v159 = (_QWORD *)*a3;
        *a3 = 0x8000000000000000;
        v90 = v83;
        sub_10001003C(v83);
        sub_10007F6A4();
        if (v32)
          goto LABEL_126;
        v93 = v91;
        v94 = v92;
        sub_10001BE7C(&qword_100128220);
        v95 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v89, v83);
        v9 = v84;
        v69 = v82;
        if (v95)
        {
          v96 = sub_10001003C(v90);
          if ((v94 & 1) != (v97 & 1))
            goto LABEL_139;
          v93 = v96;
        }
        if ((v94 & 1) != 0)
        {
          v98 = (uint64_t *)(v159[7] + 16 * v93);
          swift_bridgeObjectRelease();
          *v98 = v158;
          v98[1] = v156;
        }
        else
        {
          v159[(v93 >> 6) + 8] |= 1 << v93;
          v99 = (uint64_t *)(v159[6] + 16 * v93);
          *v99 = v90;
          v99[1] = v77;
          v100 = (uint64_t *)(v159[7] + 16 * v93);
          *v100 = v158;
          v100[1] = v156;
          v101 = v159[2];
          v32 = __OFADD__(v101, 1);
          v102 = v101 + 1;
          if (v32)
            goto LABEL_128;
          v159[2] = v102;
          sub_1000058B4();
        }
        *a3 = v159;
        swift_bridgeObjectRelease_n(v77, 2);
        swift_bridgeObjectRelease();
        v73 = v146;
        v59 = v148;
      }
      sub_10001A83C();
      sub_10007ECC8((uint64_t)v59, 0);
      v103 = swift_isUniquelyReferenced_nonNull_native(v9);
      sub_10001F41C();
      sub_100019CF0();
      if (v32)
        goto LABEL_124;
      v106 = v104;
      v107 = v105;
      sub_10001BE7C(&qword_10012A568);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v103, (Swift::Int)v9))
      {
        v108 = sub_10001F41C();
        if ((v107 & 1) != (v109 & 1))
          goto LABEL_139;
        v106 = v108;
      }
      sub_100005A78();
      if ((v107 & 1) == 0)
      {
        sub_10001B4C8();
        *v110 = v142;
        v110[1] = v69;
        *(_QWORD *)(v9[7] + 8 * v106) = _swiftEmptyArrayStorage;
        v111 = v9[2];
        v112 = v111 + 1;
        v113 = __OFADD__(v111, 1);
        sub_10000EC68();
        if (v113)
          goto LABEL_127;
        v9[2] = v112;
      }
      swift_bridgeObjectRetain();
      v114 = v9[7];
      sub_1000117B4();
      v115 = *(_QWORD *)(v114 + 8 * v106);
      v116 = swift_isUniquelyReferenced_nonNull_native(v115);
      *(_QWORD *)(v114 + 8 * v106) = v115;
      v117 = v73;
      if ((v116 & 1) == 0)
      {
        sub_10001EE90();
        v115 = v120;
        *(_QWORD *)(v114 + 8 * v106) = v120;
      }
      v118 = *(_QWORD *)(v115 + 16);
      if (v118 >= *(_QWORD *)(v115 + 24) >> 1)
      {
        sub_10001EE90();
        v115 = v121;
        *(_QWORD *)(v114 + 8 * v106) = v121;
      }
      *(_QWORD *)(v115 + 16) = v118 + 1;
      v119 = v115 + 16 * v118;
      *(_QWORD *)(v119 + 32) = v158;
      *(_QWORD *)(v119 + 40) = v156;
      sub_10000EC84();

      v71 = v152 + 1;
      v59 = sub_10007AFCC;
      if (v150 == v140)
        goto LABEL_114;
    }
    __break(1u);
LABEL_124:
    __break(1u);
  }
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
  __break(1u);
LABEL_140:
  sub_100014418();
  sub_10007F63C();
  result = _fatalErrorMessage(_:_:file:line:flags:)(v125, v126, v127, v128, v129, v130, v131, v132);
  __break(1u);
  return result;
}

void sub_10007AFCC(_QWORD *a1@<X8>)
{
  *a1 = _swiftEmptyArrayStorage;
}

uint64_t sub_10007AFDC(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, _QWORD *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  unint64_t i;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  BOOL v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  int64_t v80;
  uint64_t v82;
  uint64_t v84;
  uint64_t v86;
  int64_t v87;

  v79 = *a2;
  v17 = a2[2];
  v76 = a2[1];
  v18 = a2[3];
  sub_10007A000(v17, v18);
  v87 = v19;
  v21 = v20;
  _s7BuilderVMa(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = sub_1000778D4(v22, a3, a4);
  sub_10007B51C(a3, a4, v79, v76, v17, v18, v21, v24, v71, v72, v73, a6, a7, v23, a8, a9, a10);
  if (v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v27 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v28 = 0;
  v77 = v27 + 64;
  v29 = 1 << *(_BYTE *)(v27 + 32);
  if (v29 < 64)
    v30 = ~(-1 << v29);
  else
    v30 = -1;
  v31 = v30 & *(_QWORD *)(v27 + 64);
  v80 = (unint64_t)(v29 + 63) >> 6;
  v82 = v27;
  v32 = a1;
  v75 = v17;
  while (v31)
  {
    v33 = __clz(__rbit64(v31));
    v31 &= v31 - 1;
    v34 = v33 | (v28 << 6);
LABEL_23:
    v87 = v28;
    v38 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * v34);
    v39 = *v38;
    v40 = v38[1];
    v41 = (uint64_t *)(*(_QWORD *)(v27 + 56) + 16 * v34);
    v42 = v41[1];
    v84 = *v41;
    v43 = *a11;
    if (!*(_QWORD *)(*a11 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
    Hasher.init(_seed:)(&v86, *(_QWORD *)(v43 + 40));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)(&v86, v39, v40);
    v44 = Hasher._finalize()();
    v45 = -1 << *(_BYTE *)(v43 + 32);
    v46 = v44 & ~v45;
    v47 = v43 + 56;
    if (((*(_QWORD *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) != 0)
    {
      v48 = *(_QWORD *)(v43 + 48);
      v49 = (_QWORD *)(v48 + 16 * v46);
      v50 = v49[1];
      v51 = *v49 == v39 && v50 == v40;
      if (!v51 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v49, v50, v39, v40, 0) & 1) == 0)
      {
        v74 = ~v45;
        v52 = (v46 + 1) & ~v45;
        if (((*(_QWORD *)(v47 + ((v52 >> 3) & 0xFFFFFFFFFFFFF8)) >> v52) & 1) != 0)
        {
          v53 = (_QWORD *)(v48 + 16 * v52);
          v54 = v53[1];
          v55 = *v53 == v39 && v54 == v40;
          if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v53, v54, v39, v40, 0) & 1) != 0)
            goto LABEL_36;
          for (i = v52 + 1; ; i = v57 + 1)
          {
            v57 = i & v74;
            if (((*(_QWORD *)(v47 + (((i & v74) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v74)) & 1) == 0)
              break;
            v58 = (_QWORD *)(v48 + 16 * v57);
            v59 = v58[1];
            v60 = *v58 == v39 && v59 == v40;
            if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v58, v59, v39, v40, 0) & 1) != 0)
              goto LABEL_36;
          }
        }
        goto LABEL_46;
      }
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = a1;
      v17 = v75;
      v27 = v82;
      v28 = v87;
      result = swift_bridgeObjectRelease();
    }
    else
    {
LABEL_46:
      swift_bridgeObjectRelease();
      v32 = a1;
      v17 = v75;
LABEL_47:
      swift_bridgeObjectRetain();
      sub_10001161C(&v86, v39, v40);
      swift_bridgeObjectRelease();
      v61 = objc_msgSend(a14, "intentIdentifier");
      v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      v64 = v63;

      v65 = objc_allocWithZone((Class)LNExamplePhraseDescription);
      swift_bridgeObjectRetain();
      v67 = sub_10007D48C(0, v62, v64, v39, v40, v84, v42, v17, v66);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v67);
      v69 = *(_QWORD *)((*v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v68 = *(_QWORD *)((*v32 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v69 >= v68 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
      v70 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v69, v67);
      result = specialized Array._endMutation()(v70);
      v27 = v82;
      v28 = v87;
    }
  }
  v35 = v28 + 1;
  if (__OFADD__(v28, 1))
  {
    __break(1u);
    goto LABEL_52;
  }
  if (v35 >= v80)
    return swift_release();
  v36 = *(_QWORD *)(v77 + 8 * v35);
  ++v28;
  if (v36)
    goto LABEL_22;
  v28 = v35 + 1;
  if (v35 + 1 >= v80)
    return swift_release();
  v36 = *(_QWORD *)(v77 + 8 * v28);
  if (v36)
    goto LABEL_22;
  v28 = v35 + 2;
  if (v35 + 2 >= v80)
    return swift_release();
  v36 = *(_QWORD *)(v77 + 8 * v28);
  if (v36)
  {
LABEL_22:
    v31 = (v36 - 1) & v36;
    v34 = __clz(__rbit64(v36)) + (v28 << 6);
    goto LABEL_23;
  }
  v37 = v35 + 3;
  if (v37 >= v80)
    return swift_release();
  v36 = *(_QWORD *)(v77 + 8 * v37);
  if (v36)
  {
    v28 = v37;
    goto LABEL_22;
  }
  while (1)
  {
    v28 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v28 >= v80)
      return swift_release();
    v36 = *(_QWORD *)(v77 + 8 * v28);
    ++v37;
    if (v36)
      goto LABEL_22;
  }
LABEL_52:
  __break(1u);
  return result;
}

void sub_10007B51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t isUniquelyReferenced_nonNull_native, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _BOOL8 v49;
  Swift::Int v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  int64_t v89;
  char v90;
  uint64_t v91;
  int64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  _BOOL8 v109;
  unint64_t v110;
  char v111;
  Swift::Bool v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  os_log_type_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  os_log_type_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t inited;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  int64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  _QWORD *v214;
  int64_t v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  BOOL v227;
  BOOL v228;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  BOOL v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  BOOL v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  _QWORD *v294;
  int64_t v295;
  _QWORD *v296;
  unint64_t v297;
  unint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  BOOL v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v314;
  uint64_t v315;
  int64_t v316;
  int64_t v317;
  uint64_t v318;
  int64_t v319;
  uint64_t v320;
  int64_t v321;
  int64_t v322;
  int64_t v323;
  int64_t v324;
  int64_t v325;
  uint64_t v326;
  int64_t v327;
  int64_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t *v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char v358;
  unint64_t v359;
  char v360;
  char v361;
  unint64_t v362;
  uint64_t *v363;
  uint64_t *v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  os_log_type_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _BYTE *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  _QWORD *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  __int128 v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  _QWORD *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  int64_t v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  int64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  char v572[72];
  _QWORD v573[5];
  unint64_t v574;
  int64_t v575;
  uint64_t v576;
  int64_t v577;
  uint64_t v578;
  _QWORD *v579;
  int64_t v580;
  uint64_t v581;
  int64_t v582;
  uint64_t v583;
  _QWORD *v584;

  v529 = a5;
  v457 = a3;
  v505 = a2;
  v490 = a1;
  v20 = a14;
  v21 = String.subscript.getter(15, 983047);
  v533 = v22;
  v537 = v21;
  v530 = v23;
  v541 = a7;
  v544 = v24;
  v29 = *(_QWORD *)(a7 + 16);
  v30 = *(_QWORD *)(a14 + 16);
  v547 = isUniquelyReferenced_nonNull_native;
  v467 = a4;
  if (!v30)
  {
    v481 = _swiftEmptyDictionarySingleton;
    goto LABEL_23;
  }
  v526 = *(_QWORD *)(a7 + 16);
  sub_10000BFF4();
  a7 = 0;
  v31 = _swiftEmptyDictionarySingleton;
  do
  {
    v32 = *(_QWORD *)(v20 + a7 + 40);
    v557 = *(_QWORD *)(v20 + a7 + 32);
    v29 = *(_QWORD *)(v20 + a7 + 48);
    v33 = *(_QWORD *)(v20 + a7 + 56);
    v34 = *(_QWORD *)(v20 + a7 + 72);
    v551 = v30;
    v554 = *(_QWORD *)(v20 + a7 + 64);
    v35 = *(_QWORD *)(v20 + a7 + 80);
    v36 = *(_BYTE *)(v20 + a7 + 88);
    v37 = *(_BYTE *)(v20 + a7 + 89);
    v38 = v31[2];
    v568 = v32;
    swift_bridgeObjectRetain();
    sub_1000101EC(v33);
    v564 = v34;
    sub_10000C020();
    v560 = v35;
    sub_1000100E0();
    if (v38)
    {
      v39 = v31;
      v40 = sub_100016064(v29);
      v41 = _swiftEmptyArrayStorage;
      if ((v42 & 1) != 0)
      {
        v41 = *(_QWORD **)(v31[7] + 8 * v40);
        sub_10000C020();
      }
    }
    else
    {
      v39 = v31;
      v41 = _swiftEmptyArrayStorage;
    }
    sub_10000EC84();
    swift_bridgeObjectRetain();
    sub_10001A83C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
    {
      sub_1000073A0();
      sub_10002FD7C();
      v41 = v61;
    }
    v44 = v41[2];
    v43 = v41[3];
    if (v44 >= v43 >> 1)
    {
      sub_100019ADC(v43);
      sub_10002FD7C();
      v41 = v62;
    }
    v41[2] = v44 + 1;
    v45 = &v41[8 * v44];
    v45[4] = v557;
    v45[5] = v568;
    v45[6] = v29;
    v45[7] = v33;
    v45[8] = v554;
    v45[9] = v564;
    v45[10] = v560;
    *((_BYTE *)v45 + 88) = v36;
    *((_BYTE *)v45 + 89) = v37;
    sub_10001A83C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
    v579 = v39;
    v46 = sub_10007F678();
    v48 = v39[2];
    v49 = (v47 & 1) == 0;
    v50 = v48 + v49;
    if (__OFADD__(v48, v49))
    {
LABEL_311:
      __break(1u);
LABEL_312:
      swift_bridgeObjectRelease();
      swift_release();
      a7 = (unint64_t)v481;
LABEL_314:
      sub_1000101FC();
      sub_1000117B4();
      if (qword_100127E70 != -1)
        goto LABEL_339;
      goto LABEL_315;
    }
    v51 = v46;
    v52 = v47;
    sub_10001BE7C(&qword_10012A550);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v50))
    {
      sub_10007F678();
      sub_10001B5DC();
      if (!v227)
      {
LABEL_340:
        v377 = type metadata for String;
        goto LABEL_341;
      }
      v51 = v53;
    }
    v31 = v579;
    if ((v52 & 1) != 0)
    {
      v54 = v579;
      v55 = v579[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v55 + 8 * v51) = v41;
      v31 = v54;
    }
    else
    {
      sub_10001E920();
      v57 = (int64_t *)(v56 + 16 * v51);
      *v57 = v29;
      v57[1] = v33;
      *(_QWORD *)(v31[7] + 8 * v51) = v41;
      v58 = v31[2];
      v59 = __OFADD__(v58, 1);
      v60 = v58 + 1;
      if (v59)
        goto LABEL_320;
      v31[2] = v60;
      sub_10001A83C();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000117AC(v33);
    sub_100005A78();
    a7 += 64;
    v20 = a14;
    --v30;
  }
  while (v551 != 1);
  v481 = v31;
  v21 = sub_1000101FC();
  a4 = v467;
  isUniquelyReferenced_nonNull_native = v547;
  v29 = v526;
LABEL_23:
  if ((a15 & 1) != 0)
  {
    if (!v29)
    {
      v132 = sub_10007F6C0(v21, v22, v23, v24, v25, v26, v27, v28, v386, v391, v396, v401, v406, v411, v416, v421, v426, v431, v436,
               v441,
               v446,
               v452,
               v457,
               v461,
               v467,
               v471,
               v476,
               (uint64_t)v481);
      sub_10007F6B8(v132, v133, v134, v135, v136, v137, v138, v139, v388, v393, v398, v403, v408, v413, v418, v423, v428, v433, v438,
        v443,
        v448,
        v454,
        v459,
        v463,
        v469,
        v473,
        v478,
        v483,
        v485,
        v487,
        v488,
        v489,
        v490,
        v491,
        v492,
        v493,
        v496,
        v499,
        v502,
        v504,
        v505,
        v506,
        v508,
        v511,
        v514,
        v517,
        v520,
        v523,
        v526,
        v529,
        v530,
        v533,
        v537,
        v541,
        v544);
      if (qword_100127E70 != -1)
        goto LABEL_335;
      goto LABEL_82;
    }
    sub_10000BFF4();
    sub_10002D8F8(v537, v533, v530, v544, v541);
    a7 = v63;
    v21 = sub_1000101FC();
    if ((a7 & 1) != 0)
    {
      v146 = sub_10007F6B8(v21, v22, v23, v24, v25, v26, v27, v28, v386, v391, v396, v401, v406, v411, v416, v421, v426, v431, v436,
               v441,
               v446,
               v452,
               v457,
               v461,
               v467,
               v471,
               v476,
               (uint64_t)v481,
               v485,
               v487,
               v488,
               v489,
               v490,
               v491,
               v492,
               v493,
               v496,
               v499,
               v502,
               v504,
               v505,
               v506,
               v508,
               v511,
               v514,
               v517,
               v520,
               v523,
               v526,
               v529,
               v530,
               v533,
               v537,
               v541,
               v544);
      sub_10007F6C0(v146, v147, v148, v149, v150, v151, v152, v153, v389, v394, v399, v404, v409, v414, v419, v424, v429, v434, v439,
        v444,
        v449,
        v455,
        v460,
        v464,
        v470,
        v474,
        v479,
        v484);
      if (qword_100127E70 != -1)
        goto LABEL_337;
      goto LABEL_85;
    }
  }
  if ((unint64_t)v29 > 5)
  {
    isUniquelyReferenced_nonNull_native = a4;
    v64 = sub_10007F6C0(v21, v22, v23, v24, v25, v26, v27, v28, v386, v391, v396, v401, v406, v411, v416, v421, v426, v431, v436,
            v441,
            v446,
            v452,
            v457,
            v461,
            v467,
            v471,
            v476,
            (uint64_t)v481);
    sub_10007F6B8(v64, v65, v66, v67, v68, v69, v70, v71, v387, v392, v397, v402, v407, v412, v417, v422, v427, v432, v437,
      v442,
      v447,
      v453,
      v458,
      v462,
      v468,
      v472,
      v477,
      v482,
      v485,
      v487,
      v488,
      v489,
      v490,
      v491,
      v492,
      v493,
      v496,
      v499,
      v502,
      v504,
      v505,
      v506,
      v508,
      v511,
      v514,
      v517,
      v520,
      v523,
      v526,
      v529,
      v530,
      v533,
      v537,
      v541,
      v544);
    if (qword_100127E70 == -1)
      goto LABEL_28;
    goto LABEL_332;
  }
  v82 = a16;
  a7 = a13;
  sub_10004B988(a13, v573);
  v555 = v573[0];
  v558 = v573[3];
  v83 = v573[4];
  v549 = v573[1];
  v552 = (unint64_t)(v573[2] + 64) >> 6;
  sub_10000EC68();
  v84 = _swiftEmptyDictionarySingleton;
  v507 = a16;
  if (!v83)
    goto LABEL_32;
  while (2)
  {
    sub_10001EDEC();
    v561 = v83;
    v86 = v85 | (v558 << 6);
LABEL_54:
    v93 = (uint64_t *)(*(_QWORD *)(v555 + 48) + 16 * v86);
    v94 = *v93;
    a7 = v93[1];
    v95 = *(_QWORD *)(*(_QWORD *)(v555 + 56) + 8 * v86);
    v96 = HIBYTE(a7) & 0xF;
    if ((a7 & 0x2000000000000000) == 0)
      v96 = v94;
    v97 = 7;
    if (((a7 >> 60) & ((v94 & 0x800000000000000) == 0)) != 0)
      v97 = 11;
    v98 = v97 | (v96 << 16);
    sub_10000EC68();
    sub_10000C030();
    v99 = String.subscript.getter(15, v98);
    v101 = v100;
    v103 = v102;
    v105 = v104;
    v569 = v95;
    sub_10000C030();
    v29 = sub_100013368();
    v579 = v84;
    v565 = v99;
    v106 = sub_10001A98C();
    v108 = v84[2];
    v109 = (v107 & 1) == 0;
    isUniquelyReferenced_nonNull_native = v108 + v109;
    if (__OFADD__(v108, v109))
    {
      __break(1u);
LABEL_320:
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      __break(1u);
LABEL_329:
      __break(1u);
LABEL_330:
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      swift_once(&qword_100127E70, sub_100090544);
LABEL_28:
      v72 = sub_10000C05C();
      v73 = sub_100012A40(v72, (uint64_t)qword_10012D0C8);
      v74 = sub_1000101EC(isUniquelyReferenced_nonNull_native);
      Logger.logObject.getter(v74);
      v75 = sub_1000059DC();
      if (sub_100011808(v75))
      {
        sub_100011780(12);
        v76 = sub_10001B7F0();
        sub_10007F698(v76);
        sub_100017E1C(4.8149e-34);
        v78 = sub_100018928(v457, v77, (uint64_t *)&v579);
        sub_10001C7B4(v78);
        sub_100018C48();
        v81 = "Skipping phrase template with too many tokens: %s";
        goto LABEL_87;
      }
      goto LABEL_88;
    }
    v110 = v106;
    v111 = v107;
    sub_10001BE7C(&qword_100128228);
    v112 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v29, isUniquelyReferenced_nonNull_native);
    isUniquelyReferenced_nonNull_native = v547;
    if (v112)
    {
      sub_10001A98C();
      sub_10001B5DC();
      if (!v227)
      {
        v377 = &type metadata for Substring;
LABEL_341:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v377);
        __break(1u);
LABEL_342:
        sub_100014418();
        sub_10007F63C();
        _fatalErrorMessage(_:_:file:line:flags:)(v378, v379, v380, v381, v382, v383, v384, v385);
        __break(1u);
LABEL_343:
        swift_release();
        __break(1u);
        return;
      }
      v110 = v113;
    }
    v84 = v579;
    if ((v111 & 1) != 0)
    {
      v114 = v579[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v114 + 8 * v110) = v569;
    }
    else
    {
      sub_10001E920();
      v116 = (uint64_t *)(v115 + 32 * v110);
      *v116 = v565;
      v116[1] = v101;
      v116[2] = v103;
      v116[3] = v105;
      *(_QWORD *)(v84[7] + 8 * v110) = v569;
      v117 = v84[2];
      v59 = __OFADD__(v117, 1);
      v118 = v117 + 1;
      if (v59)
        goto LABEL_321;
      v84[2] = v118;
      sub_10000C020();
    }
    swift_bridgeObjectRelease();
    sub_1000117B4();
    sub_1000059B0();
    sub_100005A78();
    v82 = a16;
    v83 = v561;
    if (v561)
      continue;
    break;
  }
LABEL_32:
  v87 = v558 + 1;
  if (__OFADD__(v558, 1))
    goto LABEL_322;
  if (v87 < v552)
  {
    v88 = *(_QWORD *)(v549 + 8 * v87);
    v89 = v558 + 1;
    if (!v88)
    {
      sub_10001EF48();
      if (v90 == v59)
        goto LABEL_69;
      sub_10001EFC4();
      if (!v88)
      {
        sub_10001EF48();
        if (v90 == v59)
          goto LABEL_69;
        sub_10001EFC4();
        if (!v88)
        {
          sub_10001EF48();
          if (v90 == v59)
            goto LABEL_69;
          sub_10001EFC4();
          if (!v88)
          {
            sub_10001EF48();
            if (v90 == v59)
              goto LABEL_69;
            sub_10001EFC4();
            if (!v88)
            {
              v89 = v91 + 5;
              if (v91 + 5 >= v552)
                goto LABEL_69;
              v88 = *(_QWORD *)(v549 + 8 * v89);
              if (!v88)
              {
                v92 = v558 + 7;
                do
                {
                  if (v92 >= v552)
                    goto LABEL_69;
                  v88 = *(_QWORD *)(v549 + 8 * v92++);
                }
                while (!v88);
                v89 = v92 - 1;
              }
            }
          }
        }
      }
    }
    v558 = v89;
    v561 = (v88 - 1) & v88;
    v86 = __clz(__rbit64(v88)) + (v89 << 6);
    goto LABEL_54;
  }
LABEL_69:
  swift_release();
  v119 = *(_QWORD *)(a12 + 16);
  v120 = (unint64_t)_swiftEmptyArrayStorage;
  if (v119)
  {
    swift_bridgeObjectRetain();
    v122 = (uint64_t *)(v121 + 40);
    v123 = _swiftEmptyArrayStorage;
    do
    {
      v125 = *(v122 - 1);
      v124 = *v122;
      v126 = HIBYTE(*v122) & 0xF;
      if ((*v122 & 0x2000000000000000) == 0)
        v126 = v125 & 0xFFFFFFFFFFFFLL;
      if (v126)
      {
        sub_10000BFF4();
        if ((swift_isUniquelyReferenced_nonNull_native(v123) & 1) == 0)
        {
          sub_1000167CC();
          sub_10001B71C();
          v123 = v130;
        }
        v128 = v123[2];
        v127 = v123[3];
        v29 = v128 + 1;
        if (v128 >= v127 >> 1)
        {
          sub_10001F170(v127);
          sub_10001B71C();
          v123 = v131;
        }
        v123[2] = v29;
        v129 = &v123[2 * v128];
        v129[4] = v125;
        v129[5] = v124;
        v82 = a16;
      }
      v122 += 2;
      --v119;
    }
    while (v119);
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = v547;
  }
  else
  {
    v123 = _swiftEmptyArrayStorage;
  }
  v160 = sub_100013368();
  v579 = v84;
  sub_100026260((uint64_t)v123, v537, v533, v530, v544, v160);
  v450 = (uint64_t)v579;
  sub_1000117B4();
  sub_100005A78();
  v161 = sub_10001BE7C(&qword_100128B10);
  inited = swift_initStackObject(v161, v572);
  v503 = xmmword_1000EFAE0;
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(inited + 32) = v529;
  *(_QWORD *)(inited + 40) = isUniquelyReferenced_nonNull_native;
  v163 = v505;
  *(_QWORD *)(inited + 48) = v490;
  *(_QWORD *)(inited + 56) = v505;
  v465 = inited;
  *(_QWORD *)(inited + 64) = _swiftEmptyArrayStorage;
  sub_100016794();
  sub_10000C020();
  v164 = sub_1000101B0();
  sub_1000521CC(v164, v165, v166, v167, v168, v169, v170, v171, v386, v391, v396, v401, v406, v411, v416, v421, v426, v431, a17,
    v441,
    v450,
    v452,
    v457,
    v465,
    v467,
    v471);
  v173 = v172;
  sub_1000059A8();
  v579 = v173;
  sub_10007D5E0((uint64_t *)&v579, (uint64_t (*)(uint64_t))sub_100093310, sub_10003F428);
  if (v476)
    goto LABEL_343;
  v480 = 0;
  a7 = (unint64_t)v579;
  v174 = v481;
  v430 = v579[2];
  if (v430)
  {
    v175 = 0;
    v435 = (uint64_t)(v579 + 4);
    v486 = (uint64_t)(v82 + 7);
    v425 = (uint64_t)v579;
    do
    {
      if (v175 >= *(_QWORD *)(a7 + 16))
        goto LABEL_331;
      v445 = v175;
      v176 = (unint64_t *)(v435 + 48 * v175);
      v177 = *v176;
      v29 = v176[1];
      v178 = v176[2];
      v179 = v176[3];
      v548 = v176[5];
      v550 = v176[4];
      sub_100013E10();
      v566 = v178;
      v570 = v179;
      v180 = static String._fromSubstring(_:)(v177, v29, v178, v179);
      v553 = v29;
      v556 = v177;
      v559 = (unint64_t)v29 >> 16;
      v562 = v177 >> 16;
      if (v174[2] && (v181 = sub_100016064(v180), v174 = v481, (v182 & 1) != 0))
      {
        v183 = *(_QWORD *)(v481[7] + 8 * v181);
        sub_1000100E0();
        sub_1000117B4();
        v420 = v466[2];
        if (v420)
        {
          v410 = (uint64_t)(v466 + 4);
          v487 = v183 + 32;
          v488 = *(_QWORD *)(v183 + 16);
          sub_10000EC68();
          v456 = 0;
          v184 = _swiftEmptyArrayStorage;
          v475 = v183;
          while (!v488)
          {
            a7 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_140:
            v234 = *(_QWORD *)(a7 + 16);
            v235 = v184[2];
            v29 = v235 + v234;
            if (__OFADD__(v235, v234))
            {
              __break(1u);
LABEL_334:
              __break(1u);
LABEL_335:
              swift_once(&qword_100127E70, sub_100090544);
LABEL_82:
              v140 = sub_10000C05C();
              v73 = sub_100012A40(v140, (uint64_t)qword_10012D0C8);
              v141 = sub_1000101EC(isUniquelyReferenced_nonNull_native);
              Logger.logObject.getter(v141);
              v142 = sub_1000059DC();
              if (sub_100011808(v142))
              {
                sub_100011780(12);
                v143 = sub_10001B7F0();
                sub_10007F698(v143);
                sub_100017E1C(4.8149e-34);
                v145 = sub_100018928(v529, v144, (uint64_t *)&v579);
                sub_10001C7B4(v145);
                sub_100018C48();
                goto LABEL_87;
              }
LABEL_88:

              sub_1000117AC(isUniquelyReferenced_nonNull_native);
LABEL_89:
              Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, type metadata for String, type metadata for String, &protocol witness table for String);
              goto LABEL_90;
            }
            isUniquelyReferenced_nonNull_native = (uint64_t)v184;
            v236 = swift_isUniquelyReferenced_nonNull_native(v184);
            v237 = isUniquelyReferenced_nonNull_native;
            if ((v236 & 1) == 0 || v29 > *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24) >> 1)
            {
              sub_100030048();
              v237 = v238;
            }
            if (*(_QWORD *)(a7 + 16))
            {
              v239 = *(_QWORD *)(v237 + 16);
              if ((*(_QWORD *)(v237 + 24) >> 1) - v239 < v234)
              {
                __break(1u);
LABEL_337:
                swift_once(&qword_100127E70, sub_100090544);
LABEL_85:
                v154 = sub_10000C05C();
                v73 = sub_100012A40(v154, (uint64_t)qword_10012D0C8);
                v155 = sub_1000101EC(isUniquelyReferenced_nonNull_native);
                Logger.logObject.getter(v155);
                v156 = sub_1000059DC();
                if (!sub_100011808(v156))
                  goto LABEL_88;
                sub_100011780(12);
                v157 = sub_10001B7F0();
                sub_10007F698(v157);
                sub_100017E1C(4.8149e-34);
                v159 = sub_100018928(v529, v158, (uint64_t *)&v579);
                sub_10001C7B4(v159);
                sub_100018C48();
LABEL_87:
                sub_1000100E8((void *)&_mh_execute_header, v79, v80, v81);
                sub_100011040();
                sub_1000133FC(v29);
                sub_1000133FC(v73);

                goto LABEL_89;
              }
              v240 = v237 + 40 * v239 + 32;
              v29 = a7 + 32;
              sub_10007F664();
              v243 = v243 || v240 >= v242;
              if (!v243)
                goto LABEL_342;
              isUniquelyReferenced_nonNull_native = v241;
              sub_10001BE7C(&qword_100128B18);
              sub_1000135A4();
              if (v234)
              {
                v244 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
                v59 = __OFADD__(v244, v234);
                v245 = v244 + v234;
                if (v59)
                {
                  __break(1u);
LABEL_339:
                  swift_once(&qword_100127E70, sub_100090544);
LABEL_315:
                  v368 = sub_10000C05C();
                  v369 = sub_100012A40(v368, (uint64_t)qword_10012D0C8);
                  v370 = sub_1000101EC(v467);
                  Logger.logObject.getter(v370);
                  v371 = sub_1000059DC();
                  if (sub_100011808(v371))
                  {
                    sub_100011780(12);
                    v372 = sub_10001B7F0();
                    sub_10007F698(v372);
                    sub_100017E1C(4.8149e-34);
                    v374 = sub_100018928(v457, v373, (uint64_t *)&v579);
                    sub_10001C7B4(v374);
                    sub_100018C48();
                    sub_1000100E8((void *)&_mh_execute_header, v375, v376, "Skipping phrase template with an unrecognized token: %s");
                    sub_100011040();
                    sub_1000133FC(v29);
                    sub_1000133FC(v369);

                  }
                  else
                  {

                    sub_1000117AC(v467);
                  }
                  Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, type metadata for String, type metadata for String, &protocol witness table for String);
                  goto LABEL_309;
                }
                *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v245;
              }
            }
            else
            {
              isUniquelyReferenced_nonNull_native = v237;
              if (v234)
                goto LABEL_334;
            }
            sub_1000117B4();
            ++v456;
            v174 = v481;
            v184 = (_QWORD *)isUniquelyReferenced_nonNull_native;
            if (v456 == v420)
            {
              swift_bridgeObjectRelease();
              sub_1000117AC((uint64_t)v466);
              v466 = (_QWORD *)isUniquelyReferenced_nonNull_native;
              goto LABEL_236;
            }
          }
          v415 = (uint64_t)v184;
          v185 = (uint64_t *)(v410 + 40 * v456);
          v186 = v185[1];
          v120 = v185[3];
          v509 = v185[2];
          v512 = *v185;
          v187 = v185[4];
          sub_1000100E0();
          v515 = v187;
          sub_10000EC68();
          v518 = v186;
          sub_100013E10();
          sub_10001A83C();
          v188 = 0;
          a7 = (unint64_t)_swiftEmptyArrayStorage;
          v545 = v120;
          while (2)
          {
            v189 = v487 + (v188 << 6);
            v190 = *(_QWORD *)(v189 + 48);
            v527 = *(_QWORD *)(v190 + 16);
            if (!v527)
              goto LABEL_137;
            v489 = v188;
            v191 = *(_QWORD *)(v189 + 24);
            v497 = *(_QWORD *)(v189 + 16);
            v500 = *(_QWORD *)v189;
            v192 = *(_QWORD *)(v189 + 40);
            v494 = *(_QWORD *)(v189 + 32);
            v524 = v190 + 32;
            HIDWORD(v491) = *(unsigned __int8 *)(v189 + 56);
            LODWORD(v492) = *(unsigned __int8 *)(v189 + 57);
            v538 = *(_QWORD *)(v189 + 8);
            swift_bridgeObjectRetain();
            v534 = v191;
            sub_1000101B0();
            v531 = v192;
            sub_10000BFF4();
            v542 = v190;
            sub_1000101EC(v190);
            v521 = sub_10004004C();
            v193 = 0;
LABEL_104:
            v194 = (unint64_t *)(v524 + 16 * v193);
            v195 = *v194;
            v196 = v194[1];
            v579 = (_QWORD *)v512;
            v580 = v518;
            v574 = v195;
            v575 = v196;
            swift_bridgeObjectRetain();
            sub_10000C030();
            v197 = String.replaceSubrange<A>(_:with:)(v550, v548, &v574, type metadata for String, v521);
            if (qword_100127E18 != -1)
              v197 = swift_once(&qword_100127E18, sub_10007897C);
            v204 = qword_10012CF58;
            v205 = *(_QWORD *)(qword_10012CF58 + 16);
            if (!v205)
              goto LABEL_110;
            v197 = sub_10007EBF0(*(_QWORD *)(qword_10012CF58 + 32), *(_QWORD *)(qword_10012CF58 + 40), *(_QWORD *)(qword_10012CF58 + 48), *(_QWORD *)(qword_10012CF58 + 56), v556, v553, v566, v570);
            if ((v197 & 1) != 0)
              goto LABEL_108;
            if (v205 != 1)
            {
              v219 = (_QWORD *)(v204 + 88);
              v220 = 1;
              while (1)
              {
                v120 = v220 + 1;
                if (__OFADD__(v220, 1))
                {
                  __break(1u);
                  goto LABEL_292;
                }
                v221 = sub_10001349C();
                v227 = v227 && v222 == v225;
                v228 = v227 && v223 == v226;
                if (v228 && v224 == v559)
                  break;
                LOBYTE(v390) = 0;
                v197 = _stringCompareInternal(_:_:_:_:expecting:)(v221);
                if ((v197 & 1) != 0)
                  break;
                ++v220;
                v219 += 4;
                v207 = v570;
                if (v120 == v205)
                  goto LABEL_111;
              }
LABEL_108:
              v206 = v515;
              sub_1000101B0();
              v120 = v545;
              sub_10001A83C();
            }
            else
            {
LABEL_110:
              v207 = v570;
LABEL_111:
              v208 = sub_100018E64(v197, v198, v199, v200, v201, v207, v202, v203, v390, v395, v400, v405, v410, v415, v420, v425, v430, v435, v440,
                       v445,
                       v451,
                       v456,
                       v457,
                       (uint64_t)v466,
                       v467,
                       v475,
                       v480,
                       (uint64_t)v481,
                       v486,
                       v487,
                       v488,
                       v489,
                       v490,
                       v491,
                       v492,
                       v494,
                       v497,
                       v500,
                       v503,
                       *((uint64_t *)&v503 + 1),
                       v505,
                       (uint64_t)v507,
                       v509,
                       v512,
                       v515,
                       v518,
                       v521,
                       v524,
                       v527,
                       a7,
                       v531,
                       v534,
                       v538,
                       v542,
                       v545,
                       v548,
                       v550,
                       v553,
                       v556,
                       v559,
                       v562,
                       v566);
              v210 = sub_100096DB4(v208, v209, v507);
              sub_1000059A8();
              swift_bridgeObjectRetain();
              sub_100013E10();
              sub_1000101B0();
              sub_1000058B4();
              v206 = v515;
              sub_1000101B0();
              swift_bridgeObjectRetain();
              sub_10000EC68();
              sub_100016794();
              sub_10001A83C();
              sub_10000C020();
              if ((sub_100013368() & 1) == 0)
              {
                sub_100005918();
                v206 = v232;
              }
              v212 = *(_QWORD *)(v206 + 16);
              v211 = *(_QWORD *)(v206 + 24);
              if (v212 >= v211 >> 1)
              {
                sub_10000C0D8(v211);
                sub_10002FD7C();
                v206 = v233;
              }
              *(_QWORD *)(v206 + 16) = v212 + 1;
              v213 = v206 + (v212 << 6);
              *(_QWORD *)(v213 + 32) = v500;
              *(_QWORD *)(v213 + 40) = v538;
              *(_QWORD *)(v213 + 48) = v497;
              *(_QWORD *)(v213 + 56) = v534;
              isUniquelyReferenced_nonNull_native = v531;
              *(_QWORD *)(v213 + 64) = v494;
              *(_QWORD *)(v213 + 72) = v531;
              v120 = v545;
              *(_QWORD *)(v213 + 80) = v542;
              *(_BYTE *)(v213 + 88) = BYTE4(v491);
              *(_BYTE *)(v213 + 89) = (v210 | v492) & 1;
              sub_1000059C4();
              sub_1000059B0();
              sub_10000E038();
              sub_10000C028();
              a7 = v529;
            }
            sub_1000059C4();
            v214 = v579;
            v215 = v580;
            if ((swift_isUniquelyReferenced_nonNull_native(a7) & 1) == 0)
            {
              sub_1000167CC();
              sub_100030048();
              a7 = v230;
            }
            v217 = *(_QWORD *)(a7 + 16);
            v216 = *(_QWORD *)(a7 + 24);
            if (v217 >= v216 >> 1)
            {
              sub_10001F170(v216);
              sub_100030048();
              a7 = v231;
            }
            ++v193;
            *(_QWORD *)(a7 + 16) = v217 + 1;
            v218 = (_QWORD *)(a7 + 40 * v217);
            v218[4] = v214;
            v218[5] = v215;
            v218[6] = v509;
            v218[7] = v120;
            v218[8] = v206;
            if (v193 == v527)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000117AC(v542);
              v163 = v505;
              v82 = v507;
              v188 = v489;
LABEL_137:
              if (++v188 == v488)
              {
                swift_bridgeObjectRelease();
                sub_10000EC84();
                swift_bridgeObjectRelease();
                sub_10000C028();
                v184 = (_QWORD *)v415;
                goto LABEL_140;
              }
              continue;
            }
            goto LABEL_104;
          }
        }
        sub_10000C028();
        sub_1000117B4();
        v466 = _swiftEmptyArrayStorage;
      }
      else
      {
        sub_1000117B4();
        if (!*(_QWORD *)(v451 + 16))
          goto LABEL_312;
        sub_10000BFF4();
        v246 = sub_10003155C();
        if ((v247 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          sub_1000101FC();
          a7 = (unint64_t)v481;
          goto LABEL_314;
        }
        v248 = *(_QWORD *)(*(_QWORD *)(v451 + 56) + 8 * v246);
        sub_1000101B0();
        sub_1000101FC();
        v498 = v466[2];
        if (v498)
        {
          v249 = *(_QWORD *)(v248 + 16);
          v492 = v248;
          v495 = (uint64_t)(v466 + 4);
          v516 = v248 + 32;
          sub_10000EC68();
          v120 = 0;
          isUniquelyReferenced_nonNull_native = (uint64_t)_swiftEmptyArrayStorage;
          v513 = v249;
          do
          {
            if (v249)
            {
              v510 = isUniquelyReferenced_nonNull_native;
              v501 = v120;
              v250 = (uint64_t *)(v495 + 40 * v120);
              v251 = v250[1];
              v252 = v250[3];
              v519 = v250[2];
              v522 = *v250;
              v253 = v250[4];
              v584 = _swiftEmptyArrayStorage;
              v528 = v251;
              swift_bridgeObjectRetain();
              v543 = v252;
              sub_100013E10();
              v525 = v253;
              sub_10000EC68();
              sub_10005282C();
              v120 = 0;
              v546 = v584;
              while (1)
              {
                v254 = (uint64_t *)(v516 + 16 * v120);
                v255 = *v254;
                v29 = v254[1];
                sub_10000C020();
                sub_10000C030();
                v535 = static String._fromSubstring(_:)(v556, v553, v566, v570);
                v257 = v256;
                v258 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
                v259 = sub_10001ABD0(v258);
                *(_OWORD *)(v259 + 16) = v503;
                *(_QWORD *)(v259 + 32) = v255;
                *(_QWORD *)(v259 + 40) = v29;
                v579 = (_QWORD *)v522;
                v580 = v528;
                v539 = v255;
                v574 = v255;
                v575 = v29;
                v260 = sub_10004004C();
                sub_1000101EC(v29);
                sub_10000EC68();
                v261 = String.replaceSubrange<A>(_:with:)(v550, v548, &v574, type metadata for String, v260);
                if (qword_100127E18 != -1)
                  v261 = swift_once(&qword_100127E18, sub_10007897C);
                a7 = qword_10012CF58;
                v268 = *(_QWORD *)(qword_10012CF58 + 16);
                if (v268)
                {
                  v261 = sub_10007EBF0(*(_QWORD *)(qword_10012CF58 + 32), *(_QWORD *)(qword_10012CF58 + 40), *(_QWORD *)(qword_10012CF58 + 48), *(_QWORD *)(qword_10012CF58 + 56), v556, v553, v566, v570);
                  if ((v261 & 1) != 0)
                  {
LABEL_192:
                    swift_bridgeObjectRetain();
                    v289 = v525;
                    sub_10000BFF4();
                    goto LABEL_200;
                  }
                  v532 = v257;
                  if (v268 != 1)
                  {
                    v269 = a7 + 88;
                    v270 = 1;
                    while (1)
                    {
                      a7 = v270 + 1;
                      if (__OFADD__(v270, 1))
                        break;
                      v271 = sub_10001349C();
                      if (v227 && v272 == v275 && v273 == v276 && v274 == v559)
                        goto LABEL_192;
                      LOBYTE(v390) = 0;
                      v261 = _stringCompareInternal(_:_:_:_:expecting:)(v271);
                      if ((v261 & 1) != 0)
                        goto LABEL_192;
                      ++v270;
                      v269 += 32;
                      v280 = v570;
                      if (a7 == v268)
                        goto LABEL_185;
                    }
                    __break(1u);
LABEL_294:
                    v219 = _swiftEmptyArrayStorage;
                    goto LABEL_295;
                  }
                }
                else
                {
                  v532 = v257;
                }
                v280 = v570;
LABEL_185:
                v281 = sub_100018E64(v261, v262, v263, v264, v265, v280, v266, v267, v390, v395, v400, v405, v410, v415, v420, v425, v430, v435, v440,
                         v445,
                         v451,
                         v456,
                         v457,
                         (uint64_t)v466,
                         v467,
                         v475,
                         v480,
                         (uint64_t)v481,
                         v486,
                         v487,
                         v488,
                         v489,
                         v490,
                         v491,
                         v492,
                         v495,
                         v498,
                         v501,
                         v503,
                         *((uint64_t *)&v503 + 1),
                         v505,
                         (uint64_t)v507,
                         v510,
                         v513,
                         v516,
                         v519,
                         v522,
                         v525,
                         v528,
                         v529,
                         v532,
                         v535,
                         v539,
                         v543,
                         (uint64_t)v546,
                         v548,
                         v550,
                         v553,
                         v556,
                         v559,
                         v562,
                         v566);
                v283 = v282;
                v284 = v82[2];
                if (!v284)
                  goto LABEL_194;
                v285 = v281;
                v286 = v82[4];
                v287 = v82[5];
                v288 = v286 == v285 && v287 == v283;
                if (v288 || (sub_10000EB38(v286, v287) & 1) != 0)
                {
                  sub_10001A85C();
                  goto LABEL_195;
                }
                if (v284 == 1)
                {
LABEL_194:
                  sub_10000DD60();
                  goto LABEL_195;
                }
                a7 = v486;
                v300 = 1;
                while (1)
                {
                  v301 = v300 + 1;
                  if (__OFADD__(v300, 1))
                  {
                    __break(1u);
                    goto LABEL_311;
                  }
                  v302 = *(_QWORD *)(a7 - 8);
                  v303 = *(_QWORD *)a7;
                  v304 = v302 == v285 && v303 == v283;
                  if (v304 || (sub_10000EB38(v302, v303) & 1) != 0)
                    break;
                  a7 += 16;
                  ++v300;
                  if (v301 == v284)
                  {
                    sub_10000DD60();
                    goto LABEL_214;
                  }
                }
                sub_10001A85C();
LABEL_214:
                v163 = v505;
                v82 = v507;
LABEL_195:
                sub_1000059A8();
                sub_1000101EC(v163);
                sub_10000BFF4();
                sub_1000100E0();
                sub_1000101EC(v259);
                swift_bridgeObjectRetain();
                v289 = v525;
                sub_10000BFF4();
                sub_10000EC68();
                sub_10000C030();
                v290 = a7;
                if ((swift_isUniquelyReferenced_nonNull_native(v525) & 1) == 0)
                {
                  sub_100005918();
                  v289 = v305;
                }
                v292 = *(_QWORD *)(v289 + 16);
                v291 = *(_QWORD *)(v289 + 24);
                if (v292 >= v291 >> 1)
                {
                  sub_100019ADC(v291);
                  sub_10002FD7C();
                  v289 = v306;
                }
                *(_QWORD *)(v289 + 16) = v292 + 1;
                v293 = v289 + (v292 << 6);
                *(_QWORD *)(v293 + 32) = v490;
                *(_QWORD *)(v293 + 40) = v163;
                *(_QWORD *)(v293 + 48) = v536;
                *(_QWORD *)(v293 + 56) = v290;
                *(_QWORD *)(v293 + 64) = v540;
                *(_QWORD *)(v293 + 72) = v29;
                *(_QWORD *)(v293 + 80) = v259;
                *(_BYTE *)(v293 + 88) = 1;
                *(_BYTE *)(v293 + 89) = v529;
                sub_1000117AC(v259);
                sub_1000117AC(v29);
                v29 = v290;
LABEL_200:
                sub_10000E038();
                sub_1000117AC(v29);
                sub_10000C028();
                sub_1000059B0();
                v294 = v579;
                v295 = v580;
                v296 = v546;
                v584 = v546;
                v298 = v546[2];
                v297 = v546[3];
                v29 = v298 + 1;
                if (v298 >= v297 >> 1)
                {
                  sub_10000C0D8(v297);
                  sub_10005282C();
                  v296 = v584;
                }
                ++v120;
                v296[2] = v29;
                v546 = v296;
                v299 = &v296[5 * v298];
                v299[4] = v294;
                v299[5] = v295;
                v299[6] = v519;
                v299[7] = v543;
                v299[8] = v289;
                v249 = v513;
                v163 = v505;
                if (v120 == v513)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  isUniquelyReferenced_nonNull_native = v510;
                  v120 = v501;
                  v307 = v546;
                  goto LABEL_216;
                }
              }
            }
            v307 = _swiftEmptyArrayStorage;
LABEL_216:
            v308 = v307[2];
            a7 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
            if (__OFADD__(a7, v308))
              goto LABEL_323;
            if ((swift_isUniquelyReferenced_nonNull_native(isUniquelyReferenced_nonNull_native) & 1) == 0
              || (int64_t)(a7 + v308) > *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24) >> 1)
            {
              sub_100030048();
              isUniquelyReferenced_nonNull_native = v309;
            }
            if (v307[2])
            {
              v310 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
              if ((*(_QWORD *)(isUniquelyReferenced_nonNull_native + 24) >> 1) - v310 < v308)
                goto LABEL_328;
              v311 = isUniquelyReferenced_nonNull_native + 40 * v310 + 32;
              v29 = (int64_t)(v307 + 4);
              sub_10007F664();
              if (!v243 && v311 < v312)
                goto LABEL_342;
              sub_10001BE7C(&qword_100128B18);
              sub_1000135A4();
              v82 = v507;
              if (v308)
              {
                v314 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
                v59 = __OFADD__(v314, v308);
                v315 = v314 + v308;
                if (v59)
                  goto LABEL_329;
                *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v315;
              }
            }
            else
            {
              v82 = v507;
              if (v308)
                goto LABEL_324;
            }
            ++v120;
            swift_bridgeObjectRelease();
          }
          while (v120 != v498);
          swift_bridgeObjectRelease();
          sub_1000117AC((uint64_t)v466);
          v466 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        else
        {
          sub_1000059A8();
          sub_1000117B4();
          v466 = _swiftEmptyArrayStorage;
        }
        v174 = v481;
      }
LABEL_236:
      swift_bridgeObjectRelease();
      v175 = v445 + 1;
      a7 = v425;
    }
    while (v445 + 1 != v430);
  }
  sub_1000059A8();
  swift_release();
  isUniquelyReferenced_nonNull_native = (uint64_t)_swiftEmptyArrayStorage;
  v579 = _swiftEmptyArrayStorage;
  sub_10004B988(v440, &v574);
  a7 = v574;
  v316 = v575;
  v317 = v577;
  v318 = v578;
  v29 = (unint64_t)(v576 + 64) >> 6;
  sub_1000101EC(v440);
  if (!v318)
    goto LABEL_239;
LABEL_238:
  v318 &= v318 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    sub_100059078();
    if (v318)
      goto LABEL_238;
LABEL_239:
    v319 = v317 + 1;
    if (__OFADD__(v317, 1))
      goto LABEL_325;
    if (v319 >= v29)
      break;
    v320 = *(_QWORD *)(v316 + 8 * v319);
    if (!v320)
    {
      v321 = v317 + 2;
      if (v317 + 2 >= v29)
        break;
      v320 = *(_QWORD *)(v316 + 8 * v321);
      if (v320)
        goto LABEL_250;
      v321 = v317 + 3;
      if (v317 + 3 >= v29)
        break;
      v320 = *(_QWORD *)(v316 + 8 * v321);
      if (v320)
        goto LABEL_250;
      v321 = v317 + 4;
      if (v317 + 4 >= v29)
        break;
      v320 = *(_QWORD *)(v316 + 8 * v321);
      if (v320)
        goto LABEL_250;
      v321 = v317 + 5;
      if (v317 + 5 >= v29)
        break;
      v320 = *(_QWORD *)(v316 + 8 * v321);
      if (v320)
      {
LABEL_250:
        v319 = v321;
      }
      else
      {
        v319 = v317 + 6;
        if (v317 + 6 >= v29)
          break;
        v320 = *(_QWORD *)(v316 + 8 * v319);
        if (!v320)
        {
          v322 = v317 + 7;
          do
          {
            if (v322 >= v29)
              goto LABEL_260;
            v320 = *(_QWORD *)(v316 + 8 * v322++);
          }
          while (!v320);
          v319 = v322 - 1;
        }
      }
    }
    v318 = (v320 - 1) & v320;
    v317 = v319;
  }
LABEL_260:
  sub_1000059A8();
  swift_release();
  a7 = (unint64_t)v579;
  v584 = _swiftEmptyArrayStorage;
  sub_10004B988(v440, &v579);
  v29 = v580;
  v323 = v582;
  isUniquelyReferenced_nonNull_native = v583;
  v324 = (unint64_t)(v581 + 64) >> 6;
  sub_1000101EC(v440);
  if (!isUniquelyReferenced_nonNull_native)
    goto LABEL_262;
  while (2)
  {
    isUniquelyReferenced_nonNull_native &= isUniquelyReferenced_nonNull_native - 1;
LABEL_275:
    swift_bridgeObjectRetain();
    sub_100059078();
    if (isUniquelyReferenced_nonNull_native)
      continue;
    break;
  }
LABEL_262:
  v325 = v323 + 1;
  if (__OFADD__(v323, 1))
    goto LABEL_326;
  if (v325 >= v324)
    goto LABEL_283;
  v326 = *(_QWORD *)(v29 + 8 * v325);
  if (v326)
  {
LABEL_274:
    isUniquelyReferenced_nonNull_native = (v326 - 1) & v326;
    v323 = v325;
    goto LABEL_275;
  }
  v327 = v323 + 2;
  if (v323 + 2 >= v324)
    goto LABEL_283;
  v326 = *(_QWORD *)(v29 + 8 * v327);
  if (v326)
    goto LABEL_273;
  v327 = v323 + 3;
  if (v323 + 3 >= v324)
    goto LABEL_283;
  v326 = *(_QWORD *)(v29 + 8 * v327);
  if (v326)
    goto LABEL_273;
  v327 = v323 + 4;
  if (v323 + 4 >= v324)
    goto LABEL_283;
  v326 = *(_QWORD *)(v29 + 8 * v327);
  if (v326)
    goto LABEL_273;
  v327 = v323 + 5;
  if (v323 + 5 >= v324)
    goto LABEL_283;
  v326 = *(_QWORD *)(v29 + 8 * v327);
  if (v326)
  {
LABEL_273:
    v325 = v327;
    goto LABEL_274;
  }
  v325 = v323 + 6;
  if (v323 + 6 >= v324)
    goto LABEL_283;
  v326 = *(_QWORD *)(v29 + 8 * v325);
  if (v326)
    goto LABEL_274;
  v328 = v323 + 7;
  while (v328 < v324)
  {
    v326 = *(_QWORD *)(v29 + 8 * v328++);
    if (v326)
    {
      v325 = v328 - 1;
      goto LABEL_274;
    }
  }
LABEL_283:
  swift_bridgeObjectRelease();
  swift_release();
  v329 = v584;
  v330 = v584[2];
  if (!v330)
    goto LABEL_294;
  sub_10000BFF4();
  v331 = v329 + 7;
  v219 = _swiftEmptyArrayStorage;
  do
  {
    v333 = *(v331 - 1);
    v332 = *v331;
    sub_10000C030();
    if ((sub_100013368() & 1) == 0)
    {
      sub_10001EE90();
      v219 = v336;
    }
    v120 = v219[2];
    v334 = v219[3];
    if (v120 >= v334 >> 1)
    {
      sub_10000C0D8(v334);
      sub_10001EE90();
      v219 = v337;
    }
    v219[2] = v120 + 1;
    v335 = &v219[2 * v120];
    v335[4] = v333;
    v335[5] = v332;
    v331 += 8;
    --v330;
  }
  while (v330);
LABEL_292:
  sub_1000101FC();
LABEL_295:
  sub_1000101FC();
  sub_1000101B0();
  sub_10000EC68();
  v338 = sub_100077E10((uint64_t)v466, (uint64_t)v219, a7);
  sub_1000059A8();
  sub_1000059C4();
  sub_1000117B4();
  v584 = v338;
  sub_10007E918();
  v339 = sub_1000C1A7C(15, (uint64_t)v584);
  v343 = (uint64_t)sub_1000560B0(v339, v340, v341, v342);
  v351 = v343;
  v352 = *(_QWORD *)(v343 + 16);
  if (v352)
  {
    sub_10000EC68();
    v353 = (uint64_t *)(v351 + 64);
    v354 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      v563 = v352;
      isUniquelyReferenced_nonNull_native = *(v353 - 4);
      v29 = *(v353 - 3);
      v355 = *(v353 - 1);
      v356 = *v353;
      a7 = *(v353 - 2);
      sub_1000101EC(v29);
      sub_10000BFF4();
      sub_1000100E0();
      v567 = sub_10007D058(a7, v355, v356);
      v571 = v357;
      v358 = sub_100013368();
      v584 = v354;
      sub_10001A48C();
      sub_10007F6A4();
      if (v59)
        goto LABEL_327;
      a7 = v359;
      v361 = v360;
      sub_10001BE7C(&qword_100128220);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v358, v120))
      {
        sub_10001A48C();
        sub_10001B5DC();
        if (!v227)
          goto LABEL_340;
        a7 = v362;
      }
      v354 = v584;
      if ((v361 & 1) != 0)
      {
        v363 = (uint64_t *)(v584[7] + 16 * a7);
        swift_bridgeObjectRelease();
        *v363 = v567;
        v363[1] = v571;
      }
      else
      {
        sub_1000192E8((uint64_t)&v584[a7 >> 6]);
        v364 = (uint64_t *)(v354[6] + 16 * a7);
        *v364 = isUniquelyReferenced_nonNull_native;
        v364[1] = v29;
        v365 = (uint64_t *)(v354[7] + 16 * a7);
        *v365 = v567;
        v365[1] = v571;
        v366 = v354[2];
        v59 = __OFADD__(v366, 1);
        v367 = v366 + 1;
        if (v59)
          goto LABEL_330;
        v354[2] = v367;
        sub_10000C030();
      }
      sub_10000C028();
      swift_bridgeObjectRelease();
      sub_1000117AC(v29);
      sub_100005A78();
      v353 += 5;
      --v352;
      if (v563 == 1)
      {
        v343 = sub_1000117B4();
        break;
      }
    }
  }
  sub_10000FE84(v343, v344, v345, v346, v347, v348, v349, v350, v390, v395, v400, v405, v410, v415, v420, v425, v430, v435, v440,
    v445,
    v451);
LABEL_309:
  swift_bridgeObjectRelease();
LABEL_90:
  sub_1000117E8();
}

uint64_t sub_10007D058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  Swift::String v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  Swift::String v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v53[8];
  uint64_t v55;

  swift_bridgeObjectRetain();
  sub_10001A844(40);
  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v46 = a1;
    v47 = a2;
    sub_10000C030();
    v6 = 0;
    v7 = _swiftEmptyArrayStorage;
    v48 = a3;
    while (1)
    {
      v50 = (uint64_t)v7;
      v8 = *(_QWORD *)(a3 + v6 + 40);
      v9 = *(_QWORD *)(a3 + v6 + 48);
      v10 = *(_QWORD *)(a3 + v6 + 56);
      v11 = *(_QWORD *)(a3 + v6 + 64);
      v12 = *(void **)(a3 + v6 + 72);
      v13 = *(unsigned __int8 *)(a3 + v6 + 88);
      v14 = *(unsigned __int8 *)(a3 + v6 + 89);
      v49 = v8;
      if (v13 == 1)
      {
        swift_bridgeObjectRetain();
        sub_10000C020();
        sub_1000101EC((uint64_t)v12);
        sub_100016794();
        v15._countAndFlagsBits = v11;
        v15._object = v12;
        String.append(_:)(v15);
        sub_10000C028();
        sub_10001A844(34);
        if (v14)
          goto LABEL_7;
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_10000C020();
        sub_1000101EC((uint64_t)v12);
        sub_100016794();
        if (v14)
        {
LABEL_7:
          v55 = v10;
          sub_10000C020();
          v24._countAndFlagsBits = 23357;
          v24._object = (void *)0xE200000000000000;
          String.append(_:)(v24);
          sub_1000187A8(v25, v26, v27, v28, v29, v30, v31, v32, v45, v46, v47, v48, v49, v50, v9);
          sub_10000EC84();
          sub_10001A844(93);
          swift_bridgeObjectRelease();
          sub_10000C028();
          sub_1000059B0();
          goto LABEL_8;
        }
      }
      v55 = v10;
      sub_10000C020();
      sub_10001A844(61);
      sub_1000187A8(v16, v17, v18, v19, v20, v21, v22, v23, v45, v46, v47, v48, v49, v50, v9);
      swift_bridgeObjectRelease();
      sub_10000C028();
      sub_1000059B0();
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      v7 = (_QWORD *)v51;
      if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
      {
        sub_1000073A0();
        sub_10001B71C();
        v7 = v36;
      }
      v34 = v7[2];
      v33 = v7[3];
      if (v34 >= v33 >> 1)
      {
        sub_100019ADC(v33);
        sub_10001B71C();
        v7 = v37;
      }
      v7[2] = v34 + 1;
      v35 = &v7[2 * v34];
      v35[4] = *(_QWORD *)v53;
      v35[5] = v55;
      v6 += 64;
      --v5;
      a3 = v48;
      if (!v5)
      {
        sub_1000059C4();
        v4 = v46;
        break;
      }
    }
  }
  v38 = sub_10001BE7C(&qword_10012A558);
  sub_10007EC60(&qword_10012A560, &qword_10012A558);
  v40 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v38, v39);
  v42 = v41;
  sub_10000C028();
  sub_100013E10();
  v43._countAndFlagsBits = v40;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  sub_1000059C4();
  sub_10000EC68();
  sub_10001A844(41);
  sub_1000117B4();
  return v4;
}

id sub_10007D300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  NSString v8;
  uint64_t v9;
  NSArray v10;
  NSDictionary v11;
  uint64_t v12;
  NSDictionary v13;
  uint64_t v14;
  NSDictionary v15;
  id v16;

  v8 = String._bridgeToObjectiveC()();
  v9 = swift_bridgeObjectRelease();
  sub_1000100D8(v9, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
  v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1000059C4();
  sub_10001BE7C(&qword_100128760);
  v11.super.isa = sub_10001F02C().super.isa;
  v12 = sub_1000059B0();
  sub_1000100D8(v12, &qword_100128768, LNValue_ptr);
  v13.super.isa = sub_10001F02C().super.isa;
  sub_10000C028();
  if (a6)
  {
    type metadata accessor for LNPlatformName(0);
    sub_1000100D8(v14, &qword_10012BF50, LNAvailabilityAnnotation_ptr);
    sub_10007EC94(&qword_100128418, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName);
    v15.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v15.super.isa = 0;
  }
  v16 = objc_msgSend(v6, "initWithIntentIdentifier:phraseTemplates:parameterValues:impliedValues:availabilityAnnotations:", v8, v10.super.isa, v11.super.isa, v13.super.isa, v15.super.isa);

  return v16;
}

id sub_10007D48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  NSString v14;
  NSString v15;
  NSString v16;
  NSString v17;
  id v18;

  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  if (!a7)
  {
    v16 = 0;
    if (a9)
      goto LABEL_3;
LABEL_5:
    v17 = 0;
    goto LABEL_6;
  }
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  if (!a9)
    goto LABEL_5;
LABEL_3:
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a9);
LABEL_6:
  v18 = objc_msgSend(v9, "initWithKind:parentIdentifier:phrase:expected:phraseTemplate:", a1, v14, v15, v16, v17);

  return v18;
}

uint64_t sub_10007D598(uint64_t *a1)
{
  return sub_10007D5E0(a1, (uint64_t (*)(uint64_t))sub_1000932E8, (uint64_t (*)(_QWORD *))sub_10007D658);
}

uint64_t sub_10007D5BC(uint64_t *a1)
{
  return sub_10007D5E0(a1, (uint64_t (*)(uint64_t))sub_1000932FC, (uint64_t (*)(_QWORD *))sub_10007DCBC);
}

uint64_t sub_10007D5E0(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

void sub_10007D658(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v17;
  Swift::Int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  Swift::Int v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  Swift::Int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_10007E3B8(0, v3, 1, a1);
      return;
    }
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  v5 = v4;
  sub_1000B78A8(v3 / 2);
  v104 = v6;
  v105 = v3;
  v106 = v7;
  v102 = a1;
  if (v3 > 0)
  {
    v103 = v5;
    v8 = 0;
    v9 = *a1;
    v101 = *a1 + 8;
    v107 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      v10 = v8++;
      if (v8 >= v3)
        goto LABEL_32;
      v11 = (uint64_t *)(v9 + 16 * v8);
      v12 = *v11;
      v13 = v11[1];
      v14 = (_QWORD *)(v9 + 16 * v10);
      v15 = v14[1];
      if (v12 == *v14 && v13 == v15)
        break;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1);
      v18 = v10 + 2;
      if (v10 + 2 < v3)
        goto LABEL_13;
LABEL_23:
      v8 = v18;
      if ((v17 & 1) == 0)
        goto LABEL_32;
LABEL_24:
      if (v18 < v10)
        goto LABEL_149;
      if (v10 < v18)
      {
        v26 = 16 * v18;
        v27 = 16 * v10;
        v28 = v18;
        v29 = v10;
        do
        {
          if (v29 != --v28)
          {
            if (!v9)
              goto LABEL_153;
            v30 = v9 + v26;
            v31 = *(_QWORD *)(v9 + v27);
            v32 = *(_QWORD *)(v9 + v27 + 8);
            *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
            *(_QWORD *)(v30 - 16) = v31;
            *(_QWORD *)(v30 - 8) = v32;
          }
          ++v29;
          v26 -= 16;
          v27 += 16;
        }
        while (v29 < v28);
      }
LABEL_31:
      v8 = v18;
LABEL_32:
      if (v8 >= v3)
        goto LABEL_41;
      if (__OFSUB__(v8, v10))
        goto LABEL_144;
      if (v8 - v10 >= v103)
        goto LABEL_41;
      if (__OFADD__(v10, v103))
        goto LABEL_147;
      if (v10 + v103 >= v3)
        v33 = v3;
      else
        v33 = v10 + v103;
      if (v33 < v10)
      {
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        return;
      }
      if (v8 == v33)
      {
LABEL_41:
        v34 = v107;
      }
      else
      {
        v85 = (_QWORD *)(v9 + 16 * v8);
        v34 = v107;
        do
        {
          v86 = (uint64_t *)(v9 + 16 * v8);
          v87 = *v86;
          v88 = v86[1];
          v89 = v10;
          v90 = v85;
          do
          {
            v91 = *(v90 - 2);
            v92 = *(v90 - 1);
            v93 = v87 == v91 && v88 == v92;
            if (v93 || (_stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, v91, v92, 1) & 1) == 0)
              break;
            if (!v9)
              goto LABEL_151;
            v87 = *v90;
            v88 = v90[1];
            *(_OWORD *)v90 = *((_OWORD *)v90 - 1);
            *(v90 - 1) = v88;
            *(v90 - 2) = v87;
            v90 -= 2;
            ++v89;
          }
          while (v8 != v89);
          ++v8;
          v85 += 2;
        }
        while (v8 != v33);
        v8 = v33;
      }
      if (v8 < v10)
        goto LABEL_143;
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
        v34 = sub_100092968(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
      v36 = *((_QWORD *)v34 + 2);
      v35 = *((_QWORD *)v34 + 3);
      v37 = v36 + 1;
      if (v36 >= v35 >> 1)
        v34 = sub_100092968((char *)(v35 > 1), v36 + 1, 1, v34);
      *((_QWORD *)v34 + 2) = v37;
      v38 = v34 + 32;
      v39 = &v34[16 * v36 + 32];
      *(_QWORD *)v39 = v10;
      *((_QWORD *)v39 + 1) = v8;
      v107 = v34;
      if (v36)
      {
        while (1)
        {
          v40 = v37 - 1;
          if (v37 >= 4)
          {
            v45 = &v38[16 * v37];
            v46 = *((_QWORD *)v45 - 8);
            v47 = *((_QWORD *)v45 - 7);
            v51 = __OFSUB__(v47, v46);
            v48 = v47 - v46;
            if (v51)
              goto LABEL_128;
            v50 = *((_QWORD *)v45 - 6);
            v49 = *((_QWORD *)v45 - 5);
            v51 = __OFSUB__(v49, v50);
            v43 = v49 - v50;
            v44 = v51;
            if (v51)
              goto LABEL_129;
            v52 = v37 - 2;
            v53 = &v38[16 * v37 - 32];
            v55 = *(_QWORD *)v53;
            v54 = *((_QWORD *)v53 + 1);
            v51 = __OFSUB__(v54, v55);
            v56 = v54 - v55;
            if (v51)
              goto LABEL_130;
            v51 = __OFADD__(v43, v56);
            v57 = v43 + v56;
            if (v51)
              goto LABEL_132;
            if (v57 >= v48)
            {
              v75 = &v38[16 * v40];
              v77 = *(_QWORD *)v75;
              v76 = *((_QWORD *)v75 + 1);
              v51 = __OFSUB__(v76, v77);
              v78 = v76 - v77;
              if (v51)
                goto LABEL_138;
              v68 = v43 < v78;
              goto LABEL_79;
            }
          }
          else
          {
            if (v37 != 3)
            {
              v69 = *((_QWORD *)v34 + 4);
              v70 = *((_QWORD *)v34 + 5);
              v51 = __OFSUB__(v70, v69);
              v62 = v70 - v69;
              v63 = v51;
              goto LABEL_73;
            }
            v42 = *((_QWORD *)v34 + 4);
            v41 = *((_QWORD *)v34 + 5);
            v51 = __OFSUB__(v41, v42);
            v43 = v41 - v42;
            v44 = v51;
          }
          if ((v44 & 1) != 0)
            goto LABEL_131;
          v52 = v37 - 2;
          v58 = &v38[16 * v37 - 32];
          v60 = *(_QWORD *)v58;
          v59 = *((_QWORD *)v58 + 1);
          v61 = __OFSUB__(v59, v60);
          v62 = v59 - v60;
          v63 = v61;
          if (v61)
            goto LABEL_133;
          v64 = &v38[16 * v40];
          v66 = *(_QWORD *)v64;
          v65 = *((_QWORD *)v64 + 1);
          v51 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          if (v51)
            goto LABEL_135;
          if (__OFADD__(v62, v67))
            goto LABEL_137;
          if (v62 + v67 >= v43)
          {
            v68 = v43 < v67;
LABEL_79:
            if (v68)
              v40 = v52;
            goto LABEL_81;
          }
LABEL_73:
          if ((v63 & 1) != 0)
            goto LABEL_134;
          v71 = &v38[16 * v40];
          v73 = *(_QWORD *)v71;
          v72 = *((_QWORD *)v71 + 1);
          v51 = __OFSUB__(v72, v73);
          v74 = v72 - v73;
          if (v51)
            goto LABEL_136;
          if (v74 < v62)
            goto LABEL_90;
LABEL_81:
          v79 = v40 - 1;
          if (v40 - 1 >= v37)
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }
          if (!v9)
            goto LABEL_152;
          v80 = &v38[16 * v79];
          v81 = *(_QWORD *)v80;
          v82 = &v38[16 * v40];
          v83 = *((_QWORD *)v82 + 1);
          sub_10007E578((char *)(v9 + 16 * *(_QWORD *)v80), (char *)(v9 + 16 * *(_QWORD *)v82), v9 + 16 * v83, v106);
          if (v1)
          {
            v94 = v107;
LABEL_107:
            swift_bridgeObjectRelease(v94);
            if (v105 >= -1)
            {
              *(_QWORD *)(v104 + 16) = 0;
              swift_bridgeObjectRelease(v104);
              return;
            }
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
            goto LABEL_148;
          }
          if (v83 < v81)
            goto LABEL_125;
          if (v40 > *((_QWORD *)v107 + 2))
            goto LABEL_126;
          *(_QWORD *)v80 = v81;
          *(_QWORD *)&v38[16 * v79 + 8] = v83;
          v84 = *((_QWORD *)v107 + 2);
          if (v40 >= v84)
            goto LABEL_127;
          v34 = v107;
          v37 = v84 - 1;
          memmove(&v38[16 * v40], v82 + 16, 16 * (v84 - 1 - v40));
          *((_QWORD *)v107 + 2) = v84 - 1;
          if (v84 <= 2)
            goto LABEL_90;
        }
      }
      v37 = 1;
LABEL_90:
      v3 = v105;
      if (v8 >= v105)
        goto LABEL_111;
    }
    v18 = v10 + 2;
    if (v10 + 2 >= v3)
      goto LABEL_31;
    v17 = 0;
LABEL_13:
    v19 = (uint64_t *)(v101 + 16 * v18);
    do
    {
      v20 = *(v19 - 1);
      v21 = *v19;
      v22 = (_QWORD *)(v9 + 16 * v8);
      v23 = v22[1];
      if (v20 == *v22 && v21 == v23)
      {
        if ((v17 & 1) != 0)
          goto LABEL_24;
      }
      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1)) & 1) != 0)
      {
        goto LABEL_23;
      }
      v19 += 2;
      v25 = v18 + 1;
      v8 = v18;
      v18 = v25;
    }
    while (v25 < v3);
    v18 = v25;
    goto LABEL_23;
  }
  v107 = (char *)_swiftEmptyArrayStorage;
  v37 = _swiftEmptyArrayStorage[2];
LABEL_111:
  if (v37 >= 2)
  {
    v95 = *v102;
    while (1)
    {
      v96 = v37 - 2;
      if (v37 < 2)
        break;
      if (!v95)
        goto LABEL_154;
      v94 = v107;
      v97 = *(_QWORD *)&v107[16 * v96 + 32];
      v98 = *(_QWORD *)&v107[16 * v37 + 24];
      sub_10007E578((char *)(v95 + 16 * v97), (char *)(v95 + 16 * *(_QWORD *)&v107[16 * v37 + 16]), v95 + 16 * v98, v106);
      if (v1)
        goto LABEL_107;
      if (v98 < v97)
        goto LABEL_140;
      if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0)
        v94 = sub_100092A54((uint64_t)v107);
      if (v96 >= *((_QWORD *)v94 + 2))
        goto LABEL_141;
      v99 = &v94[16 * v96 + 32];
      *(_QWORD *)v99 = v97;
      *((_QWORD *)v99 + 1) = v98;
      v100 = *((_QWORD *)v94 + 2);
      if (v37 > v100)
        goto LABEL_142;
      memmove(&v94[16 * v37 + 16], &v94[16 * v37 + 32], 16 * (v100 - v37));
      v107 = v94;
      *((_QWORD *)v94 + 2) = v100 - 1;
      v37 = v100 - 1;
      v3 = v105;
      if (v100 <= 2)
        goto LABEL_122;
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
LABEL_122:
  swift_bridgeObjectRelease(v107);
  if (v3 < -1)
    goto LABEL_150;
  *(_QWORD *)(v104 + 16) = 0;
  swift_bridgeObjectRelease(v104);
}

void sub_10007DCBC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v20;
  Swift::Int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  Swift::Int v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  Swift::Int v38;
  char *v39;
  Swift::Int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  Swift::Int v97;
  unint64_t *v98;
  BOOL v101;
  _OWORD *v102;
  __int128 v103;
  __int128 v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  Swift::Int v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_10007E47C(0, v3, 1, a1);
      return;
    }
LABEL_165:
    __break(1u);
    goto LABEL_166;
  }
  v5 = v4;
  sub_1000B78C0(v3 / 2);
  v116 = v6;
  v117 = v3;
  v118 = v7;
  v114 = a1;
  if (v3 > 0)
  {
    v115 = v5;
    v8 = 0;
    v9 = *a1;
    v112 = *a1 - 32;
    v113 = *a1 + 16;
    v119 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      v10 = v8++;
      if (v8 >= v3)
        goto LABEL_45;
      v11 = (unint64_t *)(v9 + 32 * v8);
      v12 = *v11;
      v13 = v11[1];
      v14 = v11[2];
      v15 = v11[3];
      v16 = (_QWORD *)(v9 + 32 * v10);
      if (v14 == v16[2] && v15 == v16[3] && v12 >> 16 == *v16 >> 16 && v13 >> 16 == v16[1] >> 16)
      {
        v21 = v10 + 2;
        if (v10 + 2 >= v3)
          goto LABEL_44;
        v20 = 0;
      }
      else
      {
        v20 = _stringCompareInternal(_:_:_:_:expecting:)(v14);
        v21 = v10 + 2;
        if (v10 + 2 >= v3)
          goto LABEL_36;
      }
      v22 = (_QWORD *)(v113 + 32 * v21);
      do
      {
        v23 = (_QWORD *)(v9 + 32 * v8);
        if (*v22 == v23[2] && v22[1] == v23[3] && *(v22 - 2) >> 16 == *v23 >> 16 && *(v22 - 1) >> 16 == v23[1] >> 16)
        {
          if ((v20 & 1) != 0)
          {
            v3 = v117;
            goto LABEL_37;
          }
        }
        else if (((v20 ^ _stringCompareInternal(_:_:_:_:expecting:)(*v22)) & 1) != 0)
        {
          goto LABEL_35;
        }
        v27 = v21 + 1;
        v22 += 4;
        v8 = v21;
        v21 = v27;
      }
      while (v27 < v117);
      v21 = v27;
LABEL_35:
      v3 = v117;
LABEL_36:
      v8 = v21;
      if ((v20 & 1) != 0)
      {
LABEL_37:
        if (v21 < v10)
          goto LABEL_169;
        if (v10 < v21)
        {
          v28 = 32 * v21;
          v29 = 32 * v10;
          v30 = v21;
          v31 = v10;
          do
          {
            if (v31 != --v30)
            {
              if (!v9)
                goto LABEL_173;
              v32 = (_OWORD *)(v9 + v29);
              v33 = v9 + v28;
              v34 = *(_QWORD *)(v9 + v29 + 16);
              v35 = *(_QWORD *)(v9 + v29 + 24);
              v36 = *(_OWORD *)(v9 + v29);
              v37 = *(_OWORD *)(v9 + v28 - 16);
              *v32 = *(_OWORD *)(v9 + v28 - 32);
              v32[1] = v37;
              *(_OWORD *)(v33 - 32) = v36;
              *(_QWORD *)(v33 - 16) = v34;
              *(_QWORD *)(v33 - 8) = v35;
            }
            ++v31;
            v28 -= 32;
            v29 += 32;
          }
          while (v31 < v30);
        }
LABEL_44:
        v8 = v21;
      }
LABEL_45:
      if (v8 >= v3)
        goto LABEL_54;
      if (__OFSUB__(v8, v10))
        goto LABEL_164;
      if (v8 - v10 >= v115)
        goto LABEL_54;
      if (__OFADD__(v10, v115))
        goto LABEL_167;
      if (v10 + v115 >= v3)
        v38 = v3;
      else
        v38 = v10 + v115;
      if (v38 < v10)
      {
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
        return;
      }
      if (v8 == v38)
      {
LABEL_54:
        v39 = v119;
      }
      else
      {
        v91 = (unint64_t *)(v112 + 32 * v8);
        v39 = v119;
        do
        {
          v92 = (unint64_t *)(v9 + 32 * v8);
          v93 = *v92;
          v94 = v92[1];
          v95 = v92[2];
          v96 = v92[3];
          v97 = v10;
          v98 = v91;
          do
          {
            v101 = v95 == v98[2] && v96 == v98[3] && v93 >> 16 == *v98 >> 16 && v94 >> 16 == v98[1] >> 16;
            if (v101 || (_stringCompareInternal(_:_:_:_:expecting:)(v95) & 1) == 0)
              break;
            if (!v9)
              goto LABEL_171;
            v102 = v98 + 4;
            v93 = v98[4];
            v94 = v98[5];
            v95 = v98[6];
            v96 = v98[7];
            v103 = *(_OWORD *)v98;
            v104 = *((_OWORD *)v98 + 1);
            *v98 = v93;
            v98[1] = v94;
            v98[2] = v95;
            v98[3] = v96;
            v98 -= 4;
            ++v97;
            *v102 = v103;
            v102[1] = v104;
          }
          while (v8 != v97);
          ++v8;
          v91 += 4;
        }
        while (v8 != v38);
        v8 = v38;
      }
      if (v8 < v10)
        goto LABEL_163;
      v40 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
        v39 = sub_100092968(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
      v42 = *((_QWORD *)v39 + 2);
      v41 = *((_QWORD *)v39 + 3);
      v43 = v42 + 1;
      if (v42 >= v41 >> 1)
        v39 = sub_100092968((char *)(v41 > 1), v42 + 1, 1, v39);
      *((_QWORD *)v39 + 2) = v43;
      v44 = v39 + 32;
      v45 = &v39[16 * v42 + 32];
      *(_QWORD *)v45 = v40;
      *((_QWORD *)v45 + 1) = v8;
      v119 = v39;
      if (v42)
      {
        while (1)
        {
          v46 = v43 - 1;
          if (v43 >= 4)
          {
            v51 = &v44[16 * v43];
            v52 = *((_QWORD *)v51 - 8);
            v53 = *((_QWORD *)v51 - 7);
            v57 = __OFSUB__(v53, v52);
            v54 = v53 - v52;
            if (v57)
              goto LABEL_148;
            v56 = *((_QWORD *)v51 - 6);
            v55 = *((_QWORD *)v51 - 5);
            v57 = __OFSUB__(v55, v56);
            v49 = v55 - v56;
            v50 = v57;
            if (v57)
              goto LABEL_149;
            v58 = v43 - 2;
            v59 = &v44[16 * v43 - 32];
            v61 = *(_QWORD *)v59;
            v60 = *((_QWORD *)v59 + 1);
            v57 = __OFSUB__(v60, v61);
            v62 = v60 - v61;
            if (v57)
              goto LABEL_150;
            v57 = __OFADD__(v49, v62);
            v63 = v49 + v62;
            if (v57)
              goto LABEL_152;
            if (v63 >= v54)
            {
              v81 = &v44[16 * v46];
              v83 = *(_QWORD *)v81;
              v82 = *((_QWORD *)v81 + 1);
              v57 = __OFSUB__(v82, v83);
              v84 = v82 - v83;
              if (v57)
                goto LABEL_158;
              v74 = v49 < v84;
              goto LABEL_92;
            }
          }
          else
          {
            if (v43 != 3)
            {
              v75 = *((_QWORD *)v39 + 4);
              v76 = *((_QWORD *)v39 + 5);
              v57 = __OFSUB__(v76, v75);
              v68 = v76 - v75;
              v69 = v57;
              goto LABEL_86;
            }
            v48 = *((_QWORD *)v39 + 4);
            v47 = *((_QWORD *)v39 + 5);
            v57 = __OFSUB__(v47, v48);
            v49 = v47 - v48;
            v50 = v57;
          }
          if ((v50 & 1) != 0)
            goto LABEL_151;
          v58 = v43 - 2;
          v64 = &v44[16 * v43 - 32];
          v66 = *(_QWORD *)v64;
          v65 = *((_QWORD *)v64 + 1);
          v67 = __OFSUB__(v65, v66);
          v68 = v65 - v66;
          v69 = v67;
          if (v67)
            goto LABEL_153;
          v70 = &v44[16 * v46];
          v72 = *(_QWORD *)v70;
          v71 = *((_QWORD *)v70 + 1);
          v57 = __OFSUB__(v71, v72);
          v73 = v71 - v72;
          if (v57)
            goto LABEL_155;
          if (__OFADD__(v68, v73))
            goto LABEL_157;
          if (v68 + v73 >= v49)
          {
            v74 = v49 < v73;
LABEL_92:
            if (v74)
              v46 = v58;
            goto LABEL_94;
          }
LABEL_86:
          if ((v69 & 1) != 0)
            goto LABEL_154;
          v77 = &v44[16 * v46];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v57 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v57)
            goto LABEL_156;
          if (v80 < v68)
            goto LABEL_103;
LABEL_94:
          v85 = v46 - 1;
          if (v46 - 1 >= v43)
          {
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
          if (!v9)
            goto LABEL_172;
          v86 = &v44[16 * v85];
          v87 = *(_QWORD *)v86;
          v88 = &v44[16 * v46];
          v89 = *((_QWORD *)v88 + 1);
          sub_10007E71C((char *)(v9 + 32 * *(_QWORD *)v86), (char *)(v9 + 32 * *(_QWORD *)v88), v9 + 32 * v89, v118);
          if (v1)
          {
            v105 = v119;
LABEL_127:
            swift_bridgeObjectRelease(v105);
            if (v117 >= -1)
            {
              *(_QWORD *)(v116 + 16) = 0;
              swift_bridgeObjectRelease(v116);
              return;
            }
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
            goto LABEL_168;
          }
          if (v89 < v87)
            goto LABEL_145;
          if (v46 > *((_QWORD *)v119 + 2))
            goto LABEL_146;
          *(_QWORD *)v86 = v87;
          *(_QWORD *)&v44[16 * v85 + 8] = v89;
          v90 = *((_QWORD *)v119 + 2);
          if (v46 >= v90)
            goto LABEL_147;
          v39 = v119;
          v43 = v90 - 1;
          memmove(&v44[16 * v46], v88 + 16, 16 * (v90 - 1 - v46));
          *((_QWORD *)v119 + 2) = v90 - 1;
          if (v90 <= 2)
            goto LABEL_103;
        }
      }
      v43 = 1;
LABEL_103:
      v3 = v117;
      if (v8 >= v117)
        goto LABEL_131;
    }
  }
  v119 = (char *)_swiftEmptyArrayStorage;
  v43 = _swiftEmptyArrayStorage[2];
LABEL_131:
  if (v43 >= 2)
  {
    v106 = *v114;
    while (1)
    {
      v107 = v43 - 2;
      if (v43 < 2)
        break;
      if (!v106)
        goto LABEL_174;
      v105 = v119;
      v108 = *(_QWORD *)&v119[16 * v107 + 32];
      v109 = *(_QWORD *)&v119[16 * v43 + 24];
      sub_10007E71C((char *)(v106 + 32 * v108), (char *)(v106 + 32 * *(_QWORD *)&v119[16 * v43 + 16]), v106 + 32 * v109, v118);
      if (v1)
        goto LABEL_127;
      if (v109 < v108)
        goto LABEL_160;
      if ((swift_isUniquelyReferenced_nonNull_native(v119) & 1) == 0)
        v105 = sub_100092A54((uint64_t)v119);
      if (v107 >= *((_QWORD *)v105 + 2))
        goto LABEL_161;
      v110 = &v105[16 * v107 + 32];
      *(_QWORD *)v110 = v108;
      *((_QWORD *)v110 + 1) = v109;
      v111 = *((_QWORD *)v105 + 2);
      if (v43 > v111)
        goto LABEL_162;
      memmove(&v105[16 * v43 + 16], &v105[16 * v43 + 32], 16 * (v111 - v43));
      v119 = v105;
      *((_QWORD *)v105 + 2) = v111 - 1;
      v43 = v111 - 1;
      if (v111 <= 2)
        goto LABEL_142;
    }
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
    goto LABEL_165;
  }
LABEL_142:
  swift_bridgeObjectRelease(v119);
  if (v117 < -1)
    goto LABEL_170;
  *(_QWORD *)(v116 + 16) = 0;
  swift_bridgeObjectRelease(v116);
}

uint64_t sub_10007E3B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        v13 = *(v12 - 2);
        v14 = *(v12 - 1);
        if (result == v13 && v10 == v14)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1);
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_10007E47C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 32 * a3 - 32;
    while (2)
    {
      v9 = (unint64_t *)(v7 + 32 * v4);
      v10 = *v9;
      v11 = v9[1];
      result = v9[2];
      v12 = v9[3];
      v13 = v6;
      v14 = (_QWORD *)v8;
      do
      {
        if (result == v14[2] && v12 == v14[3] && v10 >> 16 == *v14 >> 16 && v11 >> 16 == v14[1] >> 16)
          break;
        result = _stringCompareInternal(_:_:_:_:expecting:)(result);
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v18 = v14 + 4;
        v10 = v14[4];
        v11 = v14[5];
        result = v14[6];
        v12 = v14[7];
        v19 = *(_OWORD *)v14;
        v20 = *((_OWORD *)v14 + 1);
        *v14 = v10;
        v14[1] = v11;
        v14[2] = result;
        v14[3] = v12;
        v14 -= 4;
        ++v13;
        *v18 = v19;
        v18[1] = v20;
      }
      while (v4 != v13);
      ++v4;
      v8 += 32;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_10007E578(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_10001B888(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v20 = (char *)(a3 - 16);
    while (1)
    {
      v21 = v20 + 16;
      v22 = *((_QWORD *)v12 - 2);
      v23 = *((_QWORD *)v12 - 1);
      v24 = v12 - 16;
      v25 = *((_QWORD *)v6 - 2);
      v26 = *((_QWORD *)v6 - 1);
      v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1) & 1) == 0)
      {
        v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29)
          goto LABEL_43;
      }
      else
      {
        v28 = v21 != v6 || v20 >= v6;
        v24 = v6 - 16;
        v6 -= 16;
        if (!v28)
          goto LABEL_43;
      }
      *(_OWORD *)v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_47;
    }
  }
  sub_10001B888(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *((_QWORD *)v6 + 1);
      v15 = *((_QWORD *)v4 + 1);
      v16 = *(_QWORD *)v6 == *(_QWORD *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v14, *(_QWORD *)v4, v15, 1) & 1) != 0)
        break;
      v17 = v4;
      v16 = v7 == v4;
      v4 += 16;
      if (!v16)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v17 = v6;
    v16 = v7 == v6;
    v6 += 16;
    if (v16)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  sub_10001B888(v4, (v12 - v4) / 16, v6);
  return 1;
}

uint64_t sub_10007E71C(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  char *v17;
  __int128 v18;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  __int128 v29;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 32;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 32;
  if (v9 >= v11)
  {
    sub_100030FEC(a2, (uint64_t)(a3 - (_QWORD)a2) / 32, a4);
    v12 = (unint64_t)&v4[32 * v11];
    if (v7 >= v6 || v10 < 32)
      goto LABEL_55;
    v20 = (char *)(a3 - 32);
    while (1)
    {
      v21 = (char *)(v12 - 32);
      v22 = v20 + 32;
      v23 = *(_QWORD *)(v12 - 16);
      v26 = v23 == *((_QWORD *)v6 - 2)
         && *(_QWORD *)(v12 - 8) == *((_QWORD *)v6 - 1)
         && *(_QWORD *)(v12 - 32) >> 16 == *((_QWORD *)v6 - 4) >> 16
         && *(_QWORD *)(v12 - 24) >> 16 == *((_QWORD *)v6 - 3) >> 16;
      if (v26 || (_stringCompareInternal(_:_:_:_:expecting:)(v23) & 1) == 0)
      {
        v28 = v22 != (char *)v12 || (unint64_t)v20 >= v12;
        v12 -= 32;
        if (!v28)
          goto LABEL_51;
      }
      else
      {
        v27 = v22 != v6 || v20 >= v6;
        v21 = v6 - 32;
        v6 -= 32;
        if (!v27)
          goto LABEL_51;
      }
      v29 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v29;
LABEL_51:
      v20 -= 32;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_55;
    }
  }
  sub_100030FEC(a1, (a2 - a1) / 32, a4);
  v12 = (unint64_t)&v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      v13 = *((_QWORD *)v6 + 2);
      v14 = v13 == *((_QWORD *)v4 + 2) && *((_QWORD *)v6 + 3) == *((_QWORD *)v4 + 3);
      v15 = v14 && *(_QWORD *)v6 >> 16 == *(_QWORD *)v4 >> 16;
      v16 = v15 && *((_QWORD *)v6 + 1) >> 16 == *((_QWORD *)v4 + 1) >> 16;
      if (!v16 && (_stringCompareInternal(_:_:_:_:expecting:)(v13) & 1) != 0)
        break;
      v17 = v4;
      v14 = v7 == v4;
      v4 += 32;
      if (!v14)
        goto LABEL_19;
LABEL_20:
      v7 += 32;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_25;
    }
    v17 = v6;
    v14 = v7 == v6;
    v6 += 32;
    if (v14)
      goto LABEL_20;
LABEL_19:
    v18 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v17;
    *((_OWORD *)v7 + 1) = v18;
    goto LABEL_20;
  }
LABEL_25:
  v6 = v7;
LABEL_55:
  sub_100030FEC(v4, (uint64_t)(v12 - (_QWORD)v4) / 32, v6);
  return 1;
}

void sub_10007E918()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v25 = v2 - 2;
  if (v2 >= 2)
  {
    v3 = 0;
    while (1)
    {
      v26 = 0;
      swift_stdlib_random(&v26, 8);
      v4 = (v26 * (unsigned __int128)v2) >> 64;
      if (v2 > v26 * v2)
      {
        v5 = -(uint64_t)v2 % v2;
        if (v5 > v26 * v2)
        {
          do
          {
            v26 = 0;
            swift_stdlib_random(&v26, 8);
          }
          while (v5 > v26 * v2);
          v4 = (v26 * (unsigned __int128)v2) >> 64;
        }
      }
      v6 = v3 + v4;
      if (__OFADD__(v3, v4))
        break;
      if (v3 != v6)
      {
        v7 = *(_QWORD *)(v1 + 16);
        if (v3 >= v7)
          goto LABEL_20;
        if (v6 >= v7)
          goto LABEL_21;
        v8 = (uint64_t *)(v1 + 32 + 40 * v3);
        v9 = v8[2];
        v10 = v8[3];
        v11 = v8[4];
        v12 = (uint64_t *)(v1 + 32 + 40 * v6);
        v13 = v12[1];
        v24 = *v12;
        v14 = v12[3];
        v22 = *v8;
        v23 = v12[2];
        v15 = v12[4];
        v21 = v8[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
        {
          sub_100093324();
          v1 = v16;
        }
        if (v3 >= *(_QWORD *)(v1 + 16))
          goto LABEL_22;
        v17 = (_QWORD *)(v1 + 32 + 40 * v3);
        *v17 = v24;
        v17[1] = v13;
        v17[2] = v23;
        v17[3] = v14;
        v17[4] = v15;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v6 >= *(_QWORD *)(v1 + 16))
          goto LABEL_23;
        v18 = (_QWORD *)(v1 + 32 + 40 * v6);
        *v18 = v22;
        v18[1] = v21;
        v18[2] = v9;
        v18[3] = v10;
        v18[4] = v11;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *v20 = v1;
      }
      --v2;
      if (v3++ == v25)
        return;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

uint64_t _s7BuilderVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_10012A5C8;
  if (!qword_10012A5C8)
    return swift_getSingletonMetadata(a1, &_s7BuilderVMn);
  return result;
}

uint64_t sub_10007EB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_100128740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10007EBD4(void **a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10007A498(a1, a2);
}

uint64_t sub_10007EBF0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 == a7 && a4 == a8 && a1 >> 16 == a5 >> 16 && a2 >> 16 == a6 >> 16)
    return 1;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)(a3) & 1;
}

void sub_10007EC60(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100025A6C(a2);
    atomic_store(sub_10001ED90(v3), a1);
  }
  sub_10000BFBC();
}

void sub_10007EC94(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = a2(255);
    atomic_store(sub_10001ED90(v3), a1);
  }
  sub_10000BFBC();
}

uint64_t sub_10007ECC8(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void sub_10007ECDC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_1000101B0();
  sub_10000BFBC();
}

_QWORD *_s18ExpectedInvocationVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *_s18ExpectedInvocationVwta(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *_s18ExpectedInvocationVMa()
{
  return &_s18ExpectedInvocationVN;
}

char *sub_10007EDC8(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v34)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v32);
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = *(_OWORD *)&a2[v8 + 24];
    *(_OWORD *)&a1[v8 + 24] = v11;
    (**(void (***)(char *, char *))(v11 - 8))(&a1[v8], &a2[v8]);
    v12 = *((_QWORD *)v10 + 6);
    *((_QWORD *)v9 + 5) = *((_QWORD *)v10 + 5);
    *((_QWORD *)v9 + 6) = v12;
    v13 = a3[6];
    v14 = a3[7];
    v15 = &a1[v13];
    v16 = &a2[v13];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = *(_QWORD *)&a2[v14];
    *(_QWORD *)&a1[v14] = v18;
    v19 = a3[8];
    v20 = a3[9];
    v21 = *(_QWORD *)&a2[v19];
    *(_QWORD *)&a1[v19] = v21;
    v22 = *(_QWORD *)&a2[v20];
    *(_QWORD *)&a1[v20] = v22;
    v23 = a3[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    v26 = *(_OWORD *)&a2[v23 + 24];
    *(_OWORD *)&a1[v23 + 24] = v26;
    v27 = v26;
    v34 = **(void (***)(char *, char *, uint64_t))(v26 - 8);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    v34(v24, v25, v27);
    v28 = a3[11];
    v29 = a3[12];
    v30 = *(_QWORD *)&a2[v28];
    *(_QWORD *)&a1[v28] = v30;
    v31 = *(_QWORD *)&a2[v29];
    *(_QWORD *)&a1[v29] = v31;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
  }
  return a1;
}

uint64_t sub_10007EF44(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + a2[5]);
  sub_10000E87C(v5);
  swift_bridgeObjectRelease(v5[6]);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
  sub_10000E87C((_QWORD *)(a1 + a2[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
}

uint64_t sub_10007EFF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v32)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + v7, a2 + v7);
  v11 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v8 + 48) = v11;
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v17;
  v18 = a3[8];
  v19 = a3[9];
  v20 = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v20;
  v21 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  v22 = a3[10];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_OWORD *)(a2 + v22 + 24);
  *(_OWORD *)(a1 + v22 + 24) = v25;
  v26 = v25;
  v32 = **(void (***)(uint64_t, uint64_t, uint64_t))(v25 - 8);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  v32(v23, v24, v26);
  v27 = a3[11];
  v28 = a3[12];
  v29 = *(_QWORD *)(a2 + v27);
  *(_QWORD *)(a1 + v27) = v29;
  v30 = *(_QWORD *)(a2 + v28);
  *(_QWORD *)(a1 + v28) = v30;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t sub_10007F144(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_100040534((_QWORD *)(a1 + v7), (_QWORD *)(a2 + v7));
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  v10 = *(_QWORD *)(v9 + 48);
  v11 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v13[1];
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v17);
  v18 = a3[8];
  v19 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v19);
  v20 = a3[9];
  v21 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v21);
  sub_100040534((_QWORD *)(a1 + a3[10]), (_QWORD *)(a2 + a3[10]));
  v22 = a3[11];
  v23 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v23);
  v24 = a3[12];
  v25 = *(_QWORD *)(a2 + v24);
  v26 = *(_QWORD *)(a1 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t sub_10007F29C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  v17 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  return a1;
}

uint64_t sub_10007F364(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_10000E87C((_QWORD *)(a1 + v7));
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  v11 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_bridgeObjectRelease(v19);
  v20 = a3[8];
  v21 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[9];
  v23 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  sub_10000E87C((_QWORD *)(a1 + v24));
  v27 = *(_OWORD *)(v26 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v27;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
  v28 = a3[11];
  v29 = *(_QWORD *)(a1 + v28);
  *(_QWORD *)(a1 + v28) = *(_QWORD *)(a2 + v28);
  swift_bridgeObjectRelease(v29);
  v30 = a3[12];
  v31 = *(_QWORD *)(a1 + v30);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_10007F494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007F4A0);
}

uint64_t sub_10007F4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = type metadata accessor for Logger(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return sub_10001C93C(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_10007F51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007F528);
}

uint64_t sub_10007F528(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for Logger(0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return sub_100014360(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_10007F5A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "8";
    v4[2] = &unk_1000F1018;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_1000F1030;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10007F654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

unint64_t sub_10007F678()
{
  uint64_t v0;

  return sub_100016064(v0);
}

uint64_t sub_10007F698(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = result;
  return result;
}

uint64_t sub_10007F6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  return swift_bridgeObjectRelease(a55);
}

uint64_t sub_10007F6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  return swift_bridgeObjectRelease(a28);
}

void sub_10007F6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100050B18();
  v1 = v0;
  v2 = sub_10001BE7C(&qword_10012A620);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  sub_10005116C((void *)1, 500, v1);
  qword_10012CF78 = v3;
}

uint64_t sub_10007F71C()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataChangedNotification);
  qword_10012CF80 = result;
  *(_QWORD *)algn_10012CF88 = v1;
  return result;
}

_QWORD *sub_10007F748(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  void (*v37)(unint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;

  v45 = a1;
  v44 = type metadata accessor for Notification(0);
  v3 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - v6;
  if (*(_QWORD *)(a2 + 16))
  {
    v8 = (void *)LNMetadataChangedNotification;
    v50 = 0u;
    v51 = 0u;
    v9 = sub_10001BE7C(&qword_100129618);
    inited = swift_initStackObject(v9, &v49);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataChangedNotificationEventKey);
    v48 = v11;
    v12 = v8;
    sub_100017738();
    *(_QWORD *)(inited + 96) = &type metadata for Int;
    *(_QWORD *)(inited + 72) = 1;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataChangedNotificationBundlesKey);
    v48 = v13;
    sub_100017738();
    v14 = sub_10007FC08();
    swift_bridgeObjectRetain();
    sub_100052268();
    v16 = v15;
    swift_bridgeObjectRelease(a2);
    sub_100050638(v16);
    swift_release();
    v17 = sub_100050F54();
    *(_QWORD *)(inited + 168) = v14;
    *(_QWORD *)(inited + 144) = v17;
    v18 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    Notification.init(name:object:userInfo:)(v12, &v50, v18);
    sub_10002FD68();
    v20 = v19;
    if (v19[2] >= v19[3] >> 1)
    {
      sub_10001AE78();
      v20 = v39;
    }
    v21 = sub_10001C7D0();
    v22(v21, v7, v44);
  }
  else
  {
    v20 = _swiftEmptyArrayStorage;
  }
  if (*(_QWORD *)(v45 + 16))
  {
    v42 = v3;
    v23 = (void *)LNMetadataChangedNotification;
    v50 = 0u;
    v51 = 0u;
    v24 = v45;
    v25 = sub_10001BE7C(&qword_100129618);
    v26 = swift_initStackObject(v25, &v46);
    *(_OWORD *)(v26 + 16) = xmmword_1000EFD90;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataChangedNotificationEventKey);
    v48 = v27;
    v28 = v23;
    sub_100017724();
    *(_QWORD *)(v26 + 96) = &type metadata for Int;
    *(_QWORD *)(v26 + 72) = 0;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataChangedNotificationBundlesKey);
    v48 = v29;
    sub_100017724();
    v30 = sub_10007FC08();
    swift_bridgeObjectRetain();
    sub_100052268();
    v32 = v31;
    swift_bridgeObjectRelease(v24);
    sub_100050638(v32);
    swift_release();
    v33 = sub_100050F54();
    *(_QWORD *)(v26 + 168) = v30;
    *(_QWORD *)(v26 + 144) = v33;
    v34 = Dictionary.init(dictionaryLiteral:)(v26, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v35 = v43;
    Notification.init(name:object:userInfo:)(v28, &v50, v34);
    if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    {
      sub_10002FD68();
      v20 = v40;
    }
    if (v20[2] >= v20[3] >> 1)
    {
      sub_10001AE78();
      v20 = v41;
    }
    v36 = sub_10001C7D0();
    v37(v36, v35, v44);
  }
  return v20;
}

uint64_t sub_10007FB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *v10;

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = sub_10001AC6C(v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x65766F6D6572202CLL;
  v7._object = (void *)0xEB00000000203A64;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = sub_10001AC6C(v8);
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v10);
  return 0x203A6465646461;
}

uint64_t sub_10007FC00()
{
  uint64_t *v0;

  return sub_10007FB0C(*v0, v0[1]);
}

unint64_t sub_10007FC08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100128D28;
  if (!qword_100128D28)
  {
    v1 = objc_opt_self(NSArray);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100128D28);
  }
  return result;
}

uint64_t destroy for RegistryUpdatedNotification(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s10LinkDaemon27RegistryUpdatedNotificationVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for RegistryUpdatedNotification(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for RegistryUpdatedNotification(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RegistryUpdatedNotification(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RegistryUpdatedNotification(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RegistryUpdatedNotification()
{
  return &type metadata for RegistryUpdatedNotification;
}

ValueMetadata *type metadata accessor for NotifyingRegistryObserver()
{
  return &type metadata for NotifyingRegistryObserver;
}

unint64_t sub_10007FDD8(uint64_t a1)
{
  unint64_t result;

  result = sub_10007FDFC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10007FDFC()
{
  unint64_t result;

  result = qword_10012A628;
  if (!qword_10012A628)
  {
    result = swift_getWitnessTable(&unk_1000F10BC, &type metadata for RegistryUpdatedNotification);
    atomic_store(result, (unint64_t *)&qword_10012A628);
  }
  return result;
}

_QWORD *sub_10007FE38(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  Swift::Int v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *result;
  char isUnique;
  _OWORD *v45;
  uint64_t v46;
  int64_t v47;
  _QWORD v49[5];
  _BYTE v50[64];
  _OWORD v51[2];
  _OWORD v52[2];

  v1 = objc_msgSend(a1, "impliedValues");
  v2 = sub_10000795C(0, &qword_100128768, LNValue_ptr);
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, type metadata for String, v2, &protocol witness table for String);

  sub_10004B988(v3, v49);
  v4 = v49[0];
  v5 = v49[3];
  v6 = v49[4];
  v46 = v49[1];
  v47 = (unint64_t)(v49[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  while (v6)
  {
    v7 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v8 = v7 | (v5 << 6);
LABEL_26:
    v16 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v8);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * v8);
    sub_1000100E0();
    v20 = v19;
    v21 = objc_msgSend(a1, "intentIdentifier");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    sub_1000801F0(v20, v18, v17, v22, v24, (uint64_t)v50);
    swift_bridgeObjectRelease();
    sub_1000809D8((uint64_t)v50, (uint64_t)v51);
    if (*((_QWORD *)&v51[0] + 1))
    {
      v25 = sub_10001BE7C(&qword_100128B20);
      v26 = (_OWORD *)swift_allocObject(v25, 96, 7);
      v27 = v51[0];
      v28 = v51[1];
      v26[1] = xmmword_1000EFAE0;
      v26[2] = v27;
      v29 = v52[0];
      v26[3] = v28;
      v26[4] = v29;
      v45 = v26;
      *(_OWORD *)((char *)v26 + 74) = *(_OWORD *)((char *)v52 + 10);
      sub_1000100E0();
      isUnique = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v30 = sub_10001774C();
      v32 = _swiftEmptyDictionarySingleton[2];
      v33 = (v31 & 1) == 0;
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
        goto LABEL_39;
      v35 = v30;
      v36 = v31;
      sub_10001BE7C(&qword_10012A550);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v34))
      {
        v37 = sub_10001774C();
        if ((v36 & 1) != (v38 & 1))
          goto LABEL_41;
        v35 = v37;
      }
      if ((v36 & 1) != 0)
      {
        v39 = _swiftEmptyDictionarySingleton[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v39 + 8 * v35) = v45;
      }
      else
      {
        _swiftEmptyDictionarySingleton[(v35 >> 6) + 8] |= 1 << v35;
        v40 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v35);
        *v40 = v18;
        v40[1] = v17;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v35) = v45;
        v41 = _swiftEmptyDictionarySingleton[2];
        v13 = __OFADD__(v41, 1);
        v42 = v41 + 1;
        if (v13)
          goto LABEL_40;
        _swiftEmptyDictionarySingleton[2] = v42;
        sub_1000100E0();
      }

      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
  v9 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v9 >= v47)
      goto LABEL_37;
    v10 = *(_QWORD *)(v46 + 8 * v9);
    v11 = v5 + 1;
    if (!v10)
    {
      sub_10001C7F4();
      if (v12 == v13)
        goto LABEL_37;
      sub_10001844C();
      if (!v10)
      {
        sub_10001C7F4();
        if (v12 == v13)
          goto LABEL_37;
        sub_10001844C();
        if (!v10)
        {
          sub_10001C7F4();
          if (v12 == v13)
            goto LABEL_37;
          sub_10001844C();
          if (!v10)
          {
            sub_10001C7F4();
            if (v12 == v13)
              goto LABEL_37;
            sub_10001844C();
            if (!v10)
            {
              v11 = v14 + 5;
              if (v14 + 5 >= v47)
                goto LABEL_37;
              v10 = *(_QWORD *)(v46 + 8 * v11);
              if (!v10)
              {
                v15 = v5 + 7;
                while (v15 < v47)
                {
                  v10 = *(_QWORD *)(v46 + 8 * v15++);
                  if (v10)
                  {
                    v11 = v15 - 1;
                    goto LABEL_25;
                  }
                }
LABEL_37:
                swift_release();
                swift_bridgeObjectRelease();
                return _swiftEmptyDictionarySingleton;
              }
            }
          }
        }
      }
    }
LABEL_25:
    v6 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
    v5 = v11;
    goto LABEL_26;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
  __break(1u);
  return result;
}

void sub_1000801F0(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  int v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  char v43;
  id v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;

  v9 = objc_msgSend(a1, "valueType");
  v10 = objc_opt_self(LNLinkEnumerationValueType);
  v11 = swift_dynamicCastObjCClass(v9, v10);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = objc_msgSend(a1, "value");
    _bridgeAnyObjectToAny(_:)(&v60, v13);
    swift_unknownObjectRelease(v13);
    if ((swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, type metadata for String, 6) & 1) != 0)
    {
      v14 = (uint64_t)v58;
      v15 = v59;
      swift_bridgeObjectRetain();
      v16 = a3;
      v17 = objc_msgSend(v12, "enumerationIdentifier", swift_bridgeObjectRetain().n128_f64[0]);
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      v60 = v18;
      v61 = v20;
      v21._countAndFlagsBits = 46;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      v22._countAndFlagsBits = v14;
      v22._object = v15;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v24 = v60;
      v23 = v61;
LABEL_4:

LABEL_31:
      v46 = _swiftEmptyArrayStorage;
      v48 = a4;
      v47 = a2;
      goto LABEL_32;
    }
  }

  v25 = objc_msgSend(a1, "valueType");
  v26 = objc_opt_self(LNPrimitiveValueType);
  v27 = swift_dynamicCastObjCClass(v25, v26);
  if (v27)
  {
    v28 = v27;
    sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
    v29 = objc_msgSend((id)objc_opt_self(LNPrimitiveValueType), "BOOLValueType");
    LOBYTE(v28) = static NSObject.== infix(_:_:)(v28, v29);

    if ((v28 & 1) != 0)
    {
      v30 = objc_msgSend(a1, "value");
      _bridgeAnyObjectToAny(_:)(&v60, v30);
      swift_unknownObjectRelease(v30);
      if ((swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      {
        v31 = v58;

        if (v31)
          v24 = 1163219540;
        else
          v24 = 0x45534C4146;
        if (v31)
          v23 = 0xE400000000000000;
        else
          v23 = 0xE500000000000000;
        goto LABEL_25;
      }
    }
  }

  v9 = objc_msgSend(a1, "valueType");
  v32 = objc_opt_self(LNArrayValueType);
  v33 = (void *)swift_dynamicCastObjCClass(v9, v32);
  if (!v33)
    goto LABEL_19;
  v34 = objc_msgSend(v33, "memberValueType");
  v35 = objc_opt_self(LNEntityValueType);
  if (!swift_dynamicCastObjCClass(v34, v35))
  {

    goto LABEL_22;
  }

  v36 = objc_msgSend(a1, "value");
  _bridgeAnyObjectToAny(_:)(&v60, v36);
  swift_unknownObjectRelease(v36);
  v37 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
  if ((swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, v37, 6) & 1) != 0)
  {
    if (v58[2])
    {
      v24 = v58[4];
      v23 = v58[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v16 = a3;
      swift_bridgeObjectRetain();
      goto LABEL_4;
    }

    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_19:

  }
LABEL_22:
  v38 = objc_msgSend(a1, "valueType");
  v39 = objc_opt_self(LNEntityValueType);
  v40 = swift_dynamicCastObjCClass(v38, v39);

  if (v40)
  {
    v41 = objc_msgSend(a1, "value");
    _bridgeAnyObjectToAny(_:)(&v60, v41);
    swift_unknownObjectRelease(v41);
    if ((swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, type metadata for String, 6) & 1) != 0)
    {
      v24 = (uint64_t)v58;
      v23 = (unint64_t)v59;
LABEL_25:
      swift_bridgeObjectRetain();
      v16 = a3;
LABEL_30:
      swift_bridgeObjectRetain();
      goto LABEL_31;
    }
  }
  v42 = objc_msgSend(a1, "valueType");
  v43 = sub_100080878();

  v16 = a3;
  if ((v43 & 1) != 0
    && (v44 = objc_msgSend(a1, "value"),
        _bridgeAnyObjectToAny(_:)(&v60, v44),
        swift_unknownObjectRelease(v44),
        (swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, type metadata for String, 6) & 1) != 0)
    || (v45 = objc_msgSend(a1, "value"),
        _bridgeAnyObjectToAny(_:)(&v60, v45),
        swift_unknownObjectRelease(v45),
        swift_dynamicCast(&v58, &v60, (char *)&type metadata for Any + 8, type metadata for String, 6)))
  {
    v24 = (uint64_t)v58;
    v23 = (unint64_t)v59;
    swift_bridgeObjectRetain();
    goto LABEL_30;
  }
  if (qword_100127E70 != -1)
    swift_once(&qword_100127E70, sub_100090544);
  v49 = type metadata accessor for Logger(0);
  sub_100012A40(v49, (uint64_t)qword_10012D0C8);
  v50 = swift_bridgeObjectRetain_n(a3, 2);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    v60 = v54;
    *(_DWORD *)v53 = 136315138;
    swift_bridgeObjectRetain();
    v58 = (_QWORD *)sub_10000FBEC(a2, a3, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Tried converting parameter %s to String but failed", v53, 0xCu);
    swift_arrayDestroy(v54, 1);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v48 = 0;
  a5 = 0;
  v47 = 0;
  v16 = 0;
  v24 = 0;
  v23 = 0;
  v46 = 0;
LABEL_32:
  *(_QWORD *)a6 = v48;
  *(_QWORD *)(a6 + 8) = a5;
  *(_QWORD *)(a6 + 16) = v47;
  *(_QWORD *)(a6 + 24) = v16;
  *(_QWORD *)(a6 + 32) = v24;
  *(_QWORD *)(a6 + 40) = v23;
  *(_QWORD *)(a6 + 48) = v46;
  *(_WORD *)(a6 + 56) = 0;
}

uint64_t sub_100080878()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  id v4;
  char v5;
  id v6;
  char v7;
  id v8;
  char v9;
  id v11;
  char v12;

  sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
  v1 = (void *)objc_opt_self(LNPrimitiveValueType);
  v2 = objc_msgSend(v1, "intValueType");
  v3 = static NSObject.== infix(_:_:)(v0, v2);

  if ((v3 & 1) != 0)
    return 1;
  v4 = objc_msgSend(v1, "doubleValueType");
  v5 = static NSObject.== infix(_:_:)(v0, v4);

  if ((v5 & 1) != 0)
    return 1;
  v6 = objc_msgSend(v1, "int16ValueType");
  v7 = static NSObject.== infix(_:_:)(v0, v6);

  if ((v7 & 1) != 0)
    return 1;
  v8 = objc_msgSend(v1, "int32ValueType");
  v9 = static NSObject.== infix(_:_:)(v0, v8);

  if ((v9 & 1) != 0)
    return 1;
  v11 = objc_msgSend(v1, "int64ValueType");
  v12 = static NSObject.== infix(_:_:)(v0, v11);

  return v12 & 1;
}

uint64_t sub_1000809D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_10012A630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100080A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t (*v11)(uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v4 = type metadata accessor for LNActionRecord(0);
  v23 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v22 = (uint64_t)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - v7;
  v9 = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v24 = a2;
    v10 = 0;
    v11 = type metadata accessor for LNActionRecord;
    v20 = a1;
    while (v10 < *(_QWORD *)(a1 + 16))
    {
      v12 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      v13 = *(_QWORD *)(v23 + 72);
      sub_10008C900(a1 + v12 + v13 * v10, (uint64_t)v8, v11);
      __chkstk_darwin(v14);
      *(&v19 - 2) = (uint64_t)v8;
      if ((sub_1000818BC(v24, sub_10008C920) & 1) != 0)
      {
        v15 = v11;
        sub_10008C928((uint64_t)v8, v22, v11);
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          sub_100052650(0, v9[2] + 1, 1);
        v9 = v25;
        v17 = v25[2];
        v16 = v25[3];
        if (v17 >= v16 >> 1)
        {
          sub_100052650(v16 > 1, v17 + 1, 1);
          v9 = v25;
        }
        v9[2] = v17 + 1;
        v18 = (uint64_t)v9 + v12 + v17 * v13;
        v11 = v15;
        sub_10008C928(v22, v18, v15);
        a1 = v20;
      }
      else
      {
        sub_10001DBC8((uint64_t)v8, v11);
      }
      if (v21 == ++v10)
      {
        a2 = v24;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
  }
}

uint64_t sub_100080C44(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  unint64_t v26;
  char v27;
  char v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  _BOOL8 v33;
  Swift::Int v34;
  char v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t result;
  char isUnique;
  unint64_t v47;
  char v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  _QWORD v52[5];
  _QWORD *v53;

  sub_10004B988(a2, v52);
  v5 = v52[0];
  v51 = v52[3];
  v6 = v52[4];
  v49 = v52[1];
  v50 = (unint64_t)(v52[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v6)
    {
      v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v8 = v7 | (v51 << 6);
      goto LABEL_20;
    }
    v9 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v9 >= v50)
      goto LABEL_38;
    v10 = *(_QWORD *)(v49 + 8 * v9);
    v11 = v51 + 1;
    if (!v10)
    {
      v11 = v51 + 2;
      if (v51 + 2 >= v50)
        goto LABEL_38;
      v10 = *(_QWORD *)(v49 + 8 * v11);
      if (!v10)
      {
        v11 = v51 + 3;
        if (v51 + 3 >= v50)
          goto LABEL_38;
        v10 = *(_QWORD *)(v49 + 8 * v11);
        if (!v10)
        {
          v11 = v51 + 4;
          if (v51 + 4 >= v50)
            goto LABEL_38;
          v10 = *(_QWORD *)(v49 + 8 * v11);
          if (!v10)
          {
            v11 = v51 + 5;
            if (v51 + 5 >= v50)
              goto LABEL_38;
            v10 = *(_QWORD *)(v49 + 8 * v11);
            if (!v10)
            {
              v12 = v51 + 6;
              while (v12 < v50)
              {
                v10 = *(_QWORD *)(v49 + 8 * v12++);
                if (v10)
                {
                  v11 = v12 - 1;
                  goto LABEL_19;
                }
              }
LABEL_38:
              swift_release();
              swift_bridgeObjectRelease(a3);
              return (uint64_t)a1;
            }
          }
        }
      }
    }
LABEL_19:
    v6 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
    v51 = v11;
LABEL_20:
    v13 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v8);
    v15 = *v13;
    v14 = v13[1];
    v16 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v8);
    v17 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain();
    if (!v17)
    {
      swift_bridgeObjectRetain();
LABEL_25:
      v22 = sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
      v23 = sub_10004FE50();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = (_QWORD *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v22, &type metadata for String, v23);
      goto LABEL_26;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = sub_100016064(v15);
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease(v14);
      goto LABEL_25;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = sub_10008B064(v20);
    swift_bridgeObjectRelease(v20);
LABEL_26:
    v24 = objc_allocWithZone((Class)LNBundleActionsMetadata);
    v25 = sub_10008C450(v16, (uint64_t)v21);
    if (v25)
    {
      v29 = v25;
      isUnique = swift_isUniquelyReferenced_nonNull_native(a1);
      v53 = a1;
      v30 = sub_100016064(v15);
      v31 = a1[2];
      v48 = v32;
      v33 = (v32 & 1) == 0;
      v34 = v31 + v33;
      if (__OFADD__(v31, v33))
        goto LABEL_40;
      v47 = v30;
      sub_10001BE7C(&qword_10012A778);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v34))
      {
        v47 = sub_100016064(v15);
        if ((v48 & 1) != (v35 & 1))
          goto LABEL_42;
      }
      a1 = v53;
      if ((v48 & 1) != 0)
      {
        v36 = v53[7];

        *(_QWORD *)(v36 + 8 * v47) = v29;
      }
      else
      {
        v53[(v47 >> 6) + 8] |= 1 << v47;
        v41 = (uint64_t *)(a1[6] + 16 * v47);
        *v41 = v15;
        v41[1] = v14;
        *(_QWORD *)(a1[7] + 8 * v47) = v29;
        v42 = a1[2];
        v43 = __OFADD__(v42, 1);
        v44 = v42 + 1;
        if (v43)
          goto LABEL_41;
        a1[2] = v44;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease_n(v14, 2);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      swift_bridgeObjectRetain();
      v26 = sub_100016064(v15);
      v28 = v27;
      swift_bridgeObjectRelease(a1);
      if ((v28 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
        v53 = a1;
        v38 = a1[3];
        sub_10001BE7C(&qword_10012A778);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38);
        a1 = v53;
        swift_bridgeObjectRelease(*(_QWORD *)(v53[6] + 16 * v26 + 8));
        v39 = *(void **)(a1[7] + 8 * v26);
        v40 = sub_10000795C(0, &qword_10012B200, LNBundleActionsMetadata_ptr);
        _NativeDictionary._delete(at:)(v26, a1, &type metadata for String, v40);

        swift_bridgeObjectRelease_n(v14, 2);
        swift_bridgeObjectRelease(0x8000000000000000);
        swift_bridgeObjectRelease(v16);
      }
      else
      {
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease_n(v14, 2);
      }
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_QWORD *sub_10008110C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001573C();
    v3 = *(_QWORD *)(type metadata accessor for LNBundleRecord(0) - 8);
    v4 = *(_QWORD *)(v3 + 72);
    v5 = (uint64_t *)(((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + a1 + 8);
    do
    {
      v7 = *(v5 - 1);
      v6 = *v5;
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1)
        sub_10001573C();
      v5 = (uint64_t *)((char *)v5 + v4);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v7;
      v10[5] = v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100081200(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10001108C();
    v4 = type metadata accessor for LNActionRecord(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    do
    {
      v8 = *(id *)(v6 + *(int *)(v4 + 24));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = *(_QWORD *)(v11 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v8);
      specialized ContiguousArray._endMutation()(v10);
      v6 += v7;
      --v2;
    }
    while (v2);
    return (_QWORD *)v11;
  }
  return result;
}

_QWORD *sub_1000812D0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10001108C();
    v4 = (void **)(a1 + 48);
    do
    {
      v5 = *v4;
      v4 += 3;
      v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      v7 = *(_QWORD *)(v9 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
      specialized ContiguousArray._endMutation()(v8);
      --v2;
    }
    while (v2);
    return (_QWORD *)v9;
  }
  return result;
}

uint64_t sub_100081370(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;

  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    v22 = a3;
    a3 = 4;
    while (1)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a3 - 4, a1)
         : *(id *)(a1 + 8 * a3);
      v9 = v8;
      v10 = a3 - 3;
      if (__OFADD__(a3 - 4, 1))
        break;
      v11 = sub_100004ED8(v8);
      if (!v12)
        goto LABEL_14;
      v13 = v12;
      if (v11 == a2 && v12 == v22)
      {
        swift_bridgeObjectRelease(v12);
      }
      else
      {
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a2, v22, 0);
        swift_bridgeObjectRelease(v13);
        if ((v15 & 1) == 0)
        {
LABEL_14:

          goto LABEL_17;
        }
      }
      sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
      v16 = objc_msgSend(v9, "valueType");
      v17 = static NSObject.== infix(_:_:)(v16, a4);

      if ((v17 & 1) != 0)
      {
        v18 = 1;
        goto LABEL_20;
      }
LABEL_17:
      ++a3;
      if (v10 == v7)
      {
        v18 = 0;
LABEL_20:
        a3 = v22;
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_22:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  }
  v18 = 0;
LABEL_27:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);

  return v18;
}

BOOL sub_10008152C(char a1, char a2)
{
  return qword_1000F12F8[a1] == qword_1000F12F8[a2];
}

void sub_100081550(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_1000815A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  swift_getAtKeyPath(&v26, a2, a3);
  swift_getAtKeyPath(&v25, a2, a4);
  swift_getAtKeyPath(&v23, &v25, a5);
  v9 = v27;
  v10 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  v11 = v26;
  swift_bridgeObjectRetain();
  v12 = sub_100016064(v11);
  if ((v13 & 1) == 0)
  {
LABEL_5:
    v15 = sub_10000795C(0, &qword_10012A710, LNActionMetadata_ptr);
    v14 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v15, &protocol witness table for String);
    goto LABEL_6;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
LABEL_6:
  swift_bridgeObjectRelease(v9);
  v16 = v23;
  v17 = v24;
  v18 = v25;
  swift_bridgeObjectRetain();
  v19 = v18;
  swift_isUniquelyReferenced_nonNull_native(v14);
  sub_100025B74((uint64_t)v19, v16, v17);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(0x8000000000000000);
  v20 = v26;
  v21 = v27;
  swift_bridgeObjectRetain();
  sub_100055960(v14, v20, v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v24);
  v22 = v25;
  swift_bridgeObjectRelease(v21);

}

void sub_100081734(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, _QWORD *a9, void (*a10)(id, uint64_t, uint64_t, uint64_t), void (*a11)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[2];
  _QWORD v33[3];

  v33[0] = a2;
  v33[1] = a3;
  v33[2] = a4;
  swift_getAtKeyPath(v32, v33, a5);
  swift_getAtKeyPath(&v31, v33, a6);
  swift_getAtKeyPath(&v29, &v31, a7);
  v15 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
  {
    sub_10000C020();
    goto LABEL_5;
  }
  v16 = v32[0];
  sub_10000C020();
  v17 = sub_100016064(v16);
  if ((v18 & 1) == 0)
  {
LABEL_5:
    v20 = sub_10000795C(0, a8, a9);
    v19 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v20, &protocol witness table for String);
    goto LABEL_6;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
LABEL_6:
  sub_1000059B0();
  v21 = v29;
  v22 = v30;
  v23 = v31;
  sub_10000C020();
  v24 = v23;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
  a10(v24, v21, v22, isUniquelyReferenced_nonNull_native);
  sub_1000059B0();
  swift_bridgeObjectRelease(0x8000000000000000);
  v26 = v32[0];
  v27 = v32[1];
  sub_10000C030();
  a11(v19, v26, v27);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v30);
  v28 = v31;
  swift_bridgeObjectRelease(v27);

}

uint64_t sub_1000818BC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  _QWORD v20[5];
  uint64_t v21;

  sub_10004B988(a1, v20);
  v4 = v20[0];
  v21 = v20[1];
  v5 = v20[3];
  v6 = v20[4];
  v7 = (unint64_t)(v20[2] + 64) >> 6;
  result = swift_bridgeObjectRetain(a1);
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v5 << 6);
      goto LABEL_20;
    }
    v11 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v11 >= v7)
      goto LABEL_22;
    v12 = *(_QWORD *)(v21 + 8 * v11);
    v13 = v5 + 1;
    if (!v12)
    {
      v13 = v5 + 2;
      if (v5 + 2 >= v7)
        goto LABEL_22;
      v12 = *(_QWORD *)(v21 + 8 * v13);
      if (!v12)
      {
        v13 = v5 + 3;
        if (v5 + 3 >= v7)
          goto LABEL_22;
        v12 = *(_QWORD *)(v21 + 8 * v13);
        if (!v12)
        {
          v13 = v5 + 4;
          if (v5 + 4 >= v7)
            goto LABEL_22;
          v12 = *(_QWORD *)(v21 + 8 * v13);
          if (!v12)
          {
            v13 = v5 + 5;
            if (v5 + 5 >= v7)
              goto LABEL_22;
            v12 = *(_QWORD *)(v21 + 8 * v13);
            if (!v12)
            {
              v14 = v5 + 6;
              while (v14 < v7)
              {
                v12 = *(_QWORD *)(v21 + 8 * v14++);
                if (v12)
                {
                  v13 = v14 - 1;
                  goto LABEL_19;
                }
              }
LABEL_22:
              swift_release(v4);
              return 1;
            }
          }
        }
      }
    }
LABEL_19:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v5 = v13;
LABEL_20:
    v15 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v10);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * v10);
    swift_bridgeObjectRetain(v17);
    v19 = v18;
    LOBYTE(v16) = a2(v16, v17, v19);

    result = swift_bridgeObjectRelease(v17);
    if ((v16 & 1) == 0)
    {
      swift_release(v4);
      return 0;
    }
  }
  __break(1u);
  return result;
}

void *_LNMetadataProviderDirect.__allocating_init(connection:options:)()
{
  objc_class *v0;
  uint64_t v1;
  void *v2;
  id v3;

  sub_100016330();
  v3 = objc_allocWithZone(v0);
  return _LNMetadataProviderDirect.init(connection:options:)(v2, v1);
}

void *_LNMetadataProviderDirect.init(connection:options:)(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  void (*v29)(char *, void *, uint64_t);
  char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  objc_class *ObjectType;
  uint64_t v59;
  objc_super v60;
  _QWORD v61[3];
  void **v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;

  v51 = a2;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v4 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v4);
  v54 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v55 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v55 + 64);
  __chkstk_darwin(v6);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v48 - v10;
  v59 = swift_allocBox(v4, v9);
  v53 = v12;
  v57 = v6;
  sub_100014360(v12, 1, 1, v6);
  v13 = sub_1000100C8((uint64_t)&unk_10011D2C0, 24);
  *(_QWORD *)(v13 + 16) = 0;
  v14 = (uint64_t *)(v13 + 16);
  v64 = sub_1000820C4;
  v65 = v13;
  v62 = _NSConcreteStackBlock;
  v63 = 1107296256;
  v15 = sub_10001EE00((uint64_t)sub_100081550);
  v16 = v2;
  swift_retain();
  sub_10008C9C8();
  v56 = a1;
  v17 = objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:", v15);
  _Block_release(v15);
  _bridgeAnyObjectToAny(_:)(&v62, v17);
  swift_unknownObjectRelease(v17);
  v18 = sub_10001BE7C(&qword_10012A638);
  if ((swift_dynamicCast(v61, &v62, (char *)&type metadata for Any + 8, v18, 6) & 1) != 0)
  {
    v48 = v7;
    v49 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = v55;
    v20 = (void *)v61[0];
    v21 = sub_1000100C8((uint64_t)&unk_10011D310, 32);
    v22 = v59;
    *(_QWORD *)(v21 + 16) = v13;
    *(_QWORD *)(v21 + 24) = v22;
    v64 = sub_10008C284;
    v65 = v21;
    v62 = _NSConcreteStackBlock;
    v63 = 1107296256;
    v23 = sub_10001EE00((uint64_t)sub_1000218DC);
    swift_retain();
    swift_retain();
    swift_release();
    v50 = v20;
    objc_msgSend(v20, "fetchDatabaseURL:", v23);
    _Block_release(v23);
    v24 = v53;
    sub_100017758(v53, (uint64_t)&v62, 0);
    v25 = v24;
    v15 = v54;
    sub_10008C95C(v25, (uint64_t)v54, &qword_100128740);
    if (sub_10001C93C((uint64_t)v15, 1, v57) == 1)
    {

      sub_1000131E0((uint64_t)v15, &qword_100128740);
      sub_100017758((uint64_t)v14, (uint64_t)v61, 0);
      v26 = *v14;
      if (!*v14)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
        sub_10001F1F8();
        v36 = objc_allocWithZone((Class)NSError);
        sub_10001B314((uint64_t)v15, v22, 9003);
        v26 = 0;
      }
      v37 = v56;
      v38 = swift_errorRetain(v26);
      swift_willThrow(v38);
      sub_10008C9C8();
      swift_release();
      sub_10008C9AC();

    }
    else
    {
      v53 = v13;
      v29 = *(void (**)(char *, void *, uint64_t))(v19 + 32);
      v30 = v11;
      v29(v11, v15, v57);
      URL.startAccessingSecurityScopedResource()();
      URL.absoluteString.getter(v31);
      sub_10001F1F8();
      v32 = type metadata accessor for Connection();
      sub_1000100C8(v32, 121);
      v33 = v52;
      v34 = Connection.init(_:readonly:)((uint64_t)v15, (unint64_t)v11, 1);
      if (!v33)
      {
        v40 = v34;
        swift_retain();
        Connection.busyTimeout.setter(0.5);
        v41 = v49;
        v42 = v57;
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v49, v30, v57);
        v43 = *(unsigned __int8 *)(v19 + 80);
        v44 = (v43 + 16) & ~v43;
        v45 = swift_allocObject(&unk_10011D360, v44 + v48, v43 | 7);
        v29((char *)(v45 + v44), v41, v42);
        sub_100017758(v40 + 24, (uint64_t)v61, 1);
        v46 = *(_QWORD *)(v40 + 24);
        v47 = *(_QWORD *)(v40 + 32);
        *(_QWORD *)(v40 + 24) = sub_10008C2EC;
        *(_QWORD *)(v40 + 32) = v45;
        sub_10007ECC8(v46, v47);
        *(_QWORD *)&v16[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection] = v40;
        v16[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion] = (v51 & 2) != 0;

        v60.receiver = v16;
        v60.super_class = ObjectType;
        v15 = objc_msgSendSuper2(&v60, "init");
        swift_release();
        sub_10008C9AC();
        sub_10001A6CC();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v30, v42);
        swift_release();
        swift_release();
        return v15;
      }

      URL.stopAccessingSecurityScopedResource()();
      swift_willThrow(v35);
      sub_10008C9AC();
      sub_10001A6CC();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v57);
      sub_10008C9C8();
      swift_release();
    }
  }
  else
  {

    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10001F1F8();
    v27 = objc_allocWithZone((Class)NSError);
    v28 = sub_10001B314((uint64_t)v15, (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), 9003);
    swift_willThrow(v28);
    swift_release();
    swift_release();
    sub_10001A6CC();
  }
  swift_deallocPartialClassInstance(v16, ObjectType, 17, 7);
  return v15;
}

uint64_t sub_100082050()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100082074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(a2 + 16, v6, 1, 0);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  swift_errorRelease(v4);
  return swift_errorRetain(a1);
}

uint64_t sub_1000820C4(uint64_t a1)
{
  uint64_t v1;

  return sub_100082074(a1, v1);
}

uint64_t sub_1000820CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _BYTE v18[24];
  _BYTE v19[24];

  v8 = sub_10001BE7C(&qword_100128740);
  v9 = __chkstk_darwin(v8);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = swift_projectBox(a4, v9);
  v13 = 1;
  swift_beginAccess(a3 + 16, v19, 1, 0);
  v14 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a2;
  swift_errorRetain(a2);
  swift_errorRelease(v14);
  if (a1)
  {
    v15 = objc_msgSend(a1, "url");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v13 = 0;
  }
  v16 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v11, v13, 1, v16);
  swift_beginAccess(v12, v18, 1, 0);
  return sub_10004BCC8((uint64_t)v11, v12);
}

id sub_10008227C(uint64_t a1)
{
  _BYTE *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  *(_QWORD *)&v1[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection] = a1;
  v1[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion] = 0;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1000822D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  unsigned int v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char v43;
  uint64_t v44;
  id result;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  uint8_t *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  uint8_t *v64;
  int v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  void *v74;
  uint64_t v75;

  v70 = a6;
  v12 = type metadata accessor for Logger(0);
  v68 = *(_QWORD *)(v12 - 8);
  v69 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v15 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v16 = objc_msgSend(v15, "isApplication"),
        v15,
        !v16))
  {
    v27 = v70;
    sub_100088538((uint64_t)a2, a3, a4, a5, v70, &v74);
    if (v6)
    {
      swift_bridgeObjectRelease(a3);

      v29 = v27;
LABEL_27:
      swift_bridgeObjectRelease(v29);
      return a2;
    }

    goto LABEL_9;
  }
  v17 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v18 = sub_10001BE7C(&qword_100128750);
  v19 = swift_allocObject(v18, 40, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v20 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v19 + 32) = v20;
  v73 = (id)v19;
  specialized Array._endMutation()(v20);
  v21 = (uint64_t)v73;
  v22 = objc_allocWithZone((Class)RBSAssertion);
  v23 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v17, v21);
  v73 = 0;
  v24 = objc_msgSend(v23, "acquireWithError:", &v73);
  v25 = v73;
  if (v24)
  {
    v26 = v73;
    v27 = v70;
    sub_100088538((uint64_t)a2, a3, a4, a5, v70, &v74);
    v28 = v6;
    if (v6)
    {
      objc_msgSend(v23, "invalidate");
      goto LABEL_11;
    }
    objc_msgSend(v23, "invalidate");

LABEL_9:
    a2 = v74;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v27);
    return a2;
  }
  v30 = v73;
  v28 = (void *)_convertNSErrorToError(_:)(v25);

  swift_willThrow(v31);
LABEL_11:
  v73 = v28;
  swift_errorRetain(v28);
  v32 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v33 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v72, &v73, v32, v33, 0))
  {
LABEL_25:

    goto LABEL_26;
  }
  v67 = v23;
  v34 = v72;
  v35 = objc_msgSend(v72, "domain");
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v36 == v39 && v38 == v40)
  {
    swift_bridgeObjectRelease_n(v38, 2);
  }
  else
  {
    v42 = v40;
    v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v39, v40, 0);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v42);
    if ((v43 & 1) == 0)
    {

LABEL_26:
      swift_errorRelease(v73);
      swift_bridgeObjectRelease(a3);

      v29 = v70;
      goto LABEL_27;
    }
  }
  v44 = swift_errorRelease(v28);
  result = (id)getLNLogCategoryMetadata(v44);
  if (result)
  {
    Logger.init(_:)();
    v46 = v34;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    v49 = v48;
    if (os_log_type_enabled(v47, v48))
    {
      v50 = swift_slowAlloc(12, -1);
      v65 = v49;
      v51 = (uint8_t *)v50;
      v66 = swift_slowAlloc(32, -1);
      v75 = v66;
      v64 = v51;
      *(_DWORD *)v51 = 136315138;
      v52 = objc_msgSend(v46, "localizedDescription", v51 + 4);
      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v55 = v54;

      v71 = sub_10000FBEC(v53, v55, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);

      swift_bridgeObjectRelease(v55);
      v56 = v64;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v65, "Failed to acquire assertions: %s", v64, 0xCu);
      v57 = v66;
      swift_arrayDestroy(v66, 1);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v69);
    v23 = v67;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v60 = v59;
    v61 = objc_allocWithZone((Class)NSError);
    v62 = sub_10008C1AC(v58, v60, 9006, 0);
    swift_willThrow(v62);

    goto LABEL_25;
  }
  __break(1u);
  return result;
}

id sub_1000828B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  unsigned int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  unsigned int v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char v39;
  uint64_t v40;
  id result;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  int v45;
  uint64_t v46;
  uint8_t *v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  os_log_t v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  os_log_t v65;
  uint8_t *v66;
  int v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  id v76;

  v11 = type metadata accessor for Logger(0);
  v70 = *(_QWORD *)(v11 - 8);
  v71 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v14 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v15 = objc_msgSend(v14, "isApplication"),
        v14,
        !v15))
  {
    sub_1000893F0(a3, a4, a5, &v75);
    if (v5)
    {
LABEL_26:
      swift_bridgeObjectRelease(a5);

      swift_bridgeObjectRelease(a4);
      return a2;
    }

    goto LABEL_8;
  }
  v16 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v17 = sub_10001BE7C(&qword_100128750);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v19 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v18 + 32) = v19;
  v74 = (id)v18;
  specialized Array._endMutation()(v19);
  v20 = (uint64_t)v74;
  v21 = objc_allocWithZone((Class)RBSAssertion);
  v22 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v16, v20);
  v74 = 0;
  v23 = objc_msgSend(v22, "acquireWithError:", &v74);
  v24 = v74;
  if (v23)
  {
    v25 = v74;
    sub_1000893F0(a3, a4, a5, &v75);
    v26 = v5;
    if (v5)
    {
      objc_msgSend(v22, "invalidate");
      goto LABEL_10;
    }
    objc_msgSend(v22, "invalidate");

LABEL_8:
    a2 = v75;
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a4);
    return a2;
  }
  v27 = v74;
  v26 = (void *)_convertNSErrorToError(_:)(v24);

  swift_willThrow(v28);
LABEL_10:
  v74 = v26;
  swift_errorRetain(v26);
  v29 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v30 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v73, &v74, v29, v30, 0))
  {

    goto LABEL_25;
  }
  v68 = v22;
  v69 = v73;
  v31 = objc_msgSend(v73, "domain");
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v32 == v35 && v34 == v36)
  {
    swift_bridgeObjectRelease_n(v34, 2);
  }
  else
  {
    v38 = v36;
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v35, v36, 0);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v38);
    if ((v39 & 1) == 0)
    {

LABEL_25:
      swift_errorRelease(v74);
      goto LABEL_26;
    }
  }
  v40 = swift_errorRelease(v26);
  result = (id)getLNLogCategoryMetadata(v40);
  if (result)
  {
    Logger.init(_:)();
    v42 = v69;
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    v45 = v44;
    if (os_log_type_enabled(v43, v44))
    {
      v46 = swift_slowAlloc(12, -1);
      v67 = v45;
      v47 = (uint8_t *)v46;
      v69 = (id)swift_slowAlloc(32, -1);
      v76 = v69;
      v66 = v47;
      *(_DWORD *)v47 = 136315138;
      v48 = objc_msgSend(v42, "localizedDescription", v47 + 4);
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v65 = v43;
      v50 = v42;
      v51 = v49;
      v53 = v52;

      v54 = v51;
      v42 = v50;
      v72 = sub_10000FBEC(v54, v53, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);

      swift_bridgeObjectRelease(v53);
      v56 = v65;
      v55 = v66;
      _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v67, "Failed to acquire assertions: %s", v66, 0xCu);
      v57 = v69;
      swift_arrayDestroy(v69, 1);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v13, v71);
    v58 = v68;
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v61 = v60;
    v62 = objc_allocWithZone((Class)NSError);
    v63 = sub_10008C1AC(v59, v61, 9006, 0);
    swift_willThrow(v63);

    goto LABEL_25;
  }
  __break(1u);
  return result;
}

id sub_100082E90(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  unsigned int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  unsigned int v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  id result;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  uint64_t v45;
  uint8_t *v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  os_log_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  _QWORD v63[2];
  os_log_t v64;
  uint8_t *v65;
  int v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  void *v73;
  uint64_t v74;

  v69 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v11 = (char *)v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v12 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v13 = objc_msgSend(v12, "isApplication"),
        v12,
        !v13))
  {
    sub_10008885C(a3, a4, (uint64_t *)&v73);
    if (v4)
    {
LABEL_26:

      swift_bridgeObjectRelease(a4);
      return a2;
    }

    goto LABEL_8;
  }
  v14 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v15 = sub_10001BE7C(&qword_100128750);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v17 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v16 + 32) = v17;
  v72 = (id)v16;
  specialized Array._endMutation()(v17);
  v18 = (uint64_t)v72;
  v19 = objc_allocWithZone((Class)RBSAssertion);
  v20 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v14, v18);
  v72 = 0;
  v21 = objc_msgSend(v20, "acquireWithError:", &v72);
  v22 = v72;
  if (v21)
  {
    v23 = v72;
    sub_10008885C(a3, a4, (uint64_t *)&v73);
    v24 = v4;
    if (v4)
    {
      objc_msgSend(v20, "invalidate");
      goto LABEL_10;
    }
    objc_msgSend(v20, "invalidate");

LABEL_8:
    a2 = v73;
    swift_bridgeObjectRelease(a4);
    return a2;
  }
  v25 = v72;
  v24 = (void *)_convertNSErrorToError(_:)(v22);

  swift_willThrow(v26);
LABEL_10:
  v72 = v24;
  swift_errorRetain(v24);
  v27 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v28 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v71, &v72, v27, v28, 0))
  {

    goto LABEL_25;
  }
  v68 = v20;
  v29 = v71;
  v30 = objc_msgSend(v71, "domain");
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v31 == v34 && v33 == v35)
  {
    swift_bridgeObjectRelease_n(v33, 2);
  }
  else
  {
    v37 = v35;
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 0);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v37);
    if ((v38 & 1) == 0)
    {

LABEL_25:
      swift_errorRelease(v72);
      goto LABEL_26;
    }
  }
  v39 = swift_errorRelease(v24);
  result = (id)getLNLogCategoryMetadata(v39);
  if (result)
  {
    Logger.init(_:)();
    v41 = v29;
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    v44 = v43;
    if (os_log_type_enabled(v42, v43))
    {
      v45 = swift_slowAlloc(12, -1);
      v66 = v44;
      v46 = (uint8_t *)v45;
      v67 = swift_slowAlloc(32, -1);
      v74 = v67;
      v65 = v46;
      *(_DWORD *)v46 = 136315138;
      v63[1] = v46 + 4;
      v47 = objc_msgSend(v41, "localizedDescription");
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      v64 = v42;
      v49 = v41;
      v50 = v48;
      v52 = v51;

      v53 = v50;
      v41 = v49;
      v70 = sub_10000FBEC(v53, v52, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);

      swift_bridgeObjectRelease(v52);
      v55 = v64;
      v54 = v65;
      _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v66, "Failed to acquire assertions: %s", v65, 0xCu);
      v56 = v67;
      swift_arrayDestroy(v67, 1);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v69);
    v57 = v68;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v60 = v59;
    v61 = objc_allocWithZone((Class)NSError);
    v62 = sub_10008C1AC(v58, v60, 9006, 0);
    swift_willThrow(v62);

    goto LABEL_25;
  }
  __break(1u);
  return result;
}

id sub_100083448(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  unsigned int v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v43;
  char v44;
  uint64_t v45;
  id result;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint8_t *v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  _QWORD v66[2];
  uint8_t *v67;
  int v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;

  v73 = a4;
  v12 = type metadata accessor for Logger(0);
  v71 = *(_QWORD *)(v12 - 8);
  v72 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v15 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v16 = objc_msgSend(v15, "isApplication"),
        v15,
        !v16))
  {
    v23 = *(id *)&a2[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    swift_retain();
    v27 = v73;
    sub_10004DED8(a3, v73, a5, a6);
    if (v6)
    {
      swift_bridgeObjectRelease(a6);
      swift_bridgeObjectRelease(v27);

      swift_release();
      return v23;
    }
    v31 = v30;
    swift_release();
    v23 = sub_100081200(v31);

    swift_bridgeObjectRelease(v31);
LABEL_9:
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v27);
    return v23;
  }
  v17 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v18 = sub_10001BE7C(&qword_100128750);
  v19 = swift_allocObject(v18, 40, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v20 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v19 + 32) = v20;
  v76 = (id)v19;
  specialized Array._endMutation()(v20);
  v21 = (uint64_t)v76;
  v22 = objc_allocWithZone((Class)RBSAssertion);
  v23 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v17, v21);
  v76 = 0;
  v24 = objc_msgSend(v23, "acquireWithError:", &v76);
  v25 = v76;
  v70 = v23;
  if (v24)
  {
    v26 = v76;
    swift_retain();
    v27 = v73;
    sub_10004DED8(a3, v73, a5, a6);
    v29 = v6;
    if (v6)
    {
      swift_release();
      v23 = v70;
      objc_msgSend(v70, "invalidate");
      goto LABEL_11;
    }
    v59 = v28;
    swift_release();
    v23 = sub_100081200(v59);
    swift_bridgeObjectRelease(v59);
    v60 = v70;
    objc_msgSend(v70, "invalidate");

    goto LABEL_9;
  }
  v32 = v76;
  v29 = (void *)_convertNSErrorToError(_:)(v25);

  swift_willThrow(v33);
LABEL_11:
  v76 = v29;
  swift_errorRetain(v29);
  v34 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v35 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v75, &v76, v34, v35, 0))
  {
LABEL_25:

    goto LABEL_26;
  }
  v36 = v75;
  v37 = objc_msgSend(v75, "domain");
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v23 = v39;

  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v38 == v40 && v23 == v41)
  {
    swift_bridgeObjectRelease_n(v23, 2);
  }
  else
  {
    v43 = v41;
    v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v23, v40, v41, 0);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v43);
    if ((v44 & 1) == 0)
    {

LABEL_26:
      swift_errorRelease(v76);
      swift_bridgeObjectRelease(a6);
      swift_bridgeObjectRelease(v73);

      return v23;
    }
  }
  v45 = swift_errorRelease(v29);
  result = (id)getLNLogCategoryMetadata(v45);
  if (result)
  {
    Logger.init(_:)();
    v47 = v36;
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter();
    v50 = v49;
    if (os_log_type_enabled(v48, v49))
    {
      v51 = swift_slowAlloc(12, -1);
      v68 = v50;
      v52 = (uint8_t *)v51;
      v69 = swift_slowAlloc(32, -1);
      v77 = v69;
      v67 = v52;
      *(_DWORD *)v52 = 136315138;
      v66[1] = v52 + 4;
      v53 = objc_msgSend(v47, "localizedDescription");
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v56 = v55;

      v74 = sub_10000FBEC(v54, v56, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);

      swift_bridgeObjectRelease(v56);
      v57 = v67;
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v68, "Failed to acquire assertions: %s", v67, 0xCu);
      v58 = v69;
      swift_arrayDestroy(v69, 1);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v14, v72);
    v23 = v70;
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v63 = v62;
    v64 = objc_allocWithZone((Class)NSError);
    v65 = sub_10008C1AC(v61, v63, 9006, 0);
    swift_willThrow(v65);

    goto LABEL_25;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100083AC0(uint64_t a1, char *a2)
{
  void *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  id v9;
  unsigned int v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  unsigned int v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *result;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint8_t *v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  id v61;
  id v62;
  _QWORD v63[2];
  os_log_t v64;
  uint8_t *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  uint64_t v72;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD **)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v9 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v10 = objc_msgSend(v9, "isApplication"),
        v9,
        !v10))
  {
    v6 = *(_QWORD **)&a2[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    v24 = swift_retain();
    v25 = sub_1000C32C8(v24);
    if (v2)
    {

      swift_release();
    }
    else
    {
      v26 = v25;
      swift_release();
      v6 = sub_10008110C(v26);

      swift_bridgeObjectRelease(v26);
    }
    return v6;
  }
  v11 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v12 = sub_10001BE7C(&qword_100128750);
  v13 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v14 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v13 + 32) = v14;
  v71 = (id)v13;
  specialized Array._endMutation()(v14);
  v15 = (uint64_t)v71;
  v16 = objc_allocWithZone((Class)RBSAssertion);
  v17 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v11, v15);
  v71 = 0;
  v18 = objc_msgSend(v17, "acquireWithError:", &v71);
  v19 = v71;
  if (v18)
  {
    v20 = v71;
    v21 = swift_retain();
    v22 = sub_1000C32C8(v21);
    v23 = v2;
    if (!v2)
    {
      v58 = v22;
      swift_release();
      v6 = sub_10008110C(v58);
      swift_bridgeObjectRelease(v58);
      objc_msgSend(v17, "invalidate");

      return v6;
    }
    swift_release();
    objc_msgSend(v17, "invalidate");
  }
  else
  {
    v27 = v71;
    v23 = (void *)_convertNSErrorToError(_:)(v19);

    swift_willThrow(v28);
  }
  v71 = v23;
  swift_errorRetain(v23);
  v29 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v30 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v70, &v71, v29, v30, 0))
  {
LABEL_24:

    swift_errorRelease(v71);
    return v6;
  }
  v68 = v5;
  v31 = v70;
  v32 = objc_msgSend(v70, "domain");
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v33 == v36 && v35 == v37)
  {
    swift_bridgeObjectRelease_n(v35, 2);
  }
  else
  {
    v39 = v37;
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 0);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v39);
    if ((v40 & 1) == 0)
    {

      goto LABEL_24;
    }
  }
  v41 = swift_errorRelease(v23);
  result = (id)getLNLogCategoryMetadata(v41);
  if (result)
  {
    Logger.init(_:)();
    v43 = v31;
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter();
    v46 = v45;
    if (os_log_type_enabled(v44, v45))
    {
      v67 = v46;
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      v72 = v66;
      v65 = v47;
      *(_DWORD *)v47 = 136315138;
      v63[1] = v47 + 4;
      v48 = objc_msgSend(v43, "localizedDescription");
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v64 = v44;
      v50 = v43;
      v51 = v49;
      v53 = v52;

      v54 = v51;
      v43 = v50;
      v69 = sub_10000FBEC(v54, v53, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);

      swift_bridgeObjectRelease(v53);
      v56 = v64;
      v55 = v65;
      _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v67, "Failed to acquire assertions: %s", v65, 0xCu);
      v57 = v66;
      swift_arrayDestroy(v66, 1);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

    }
    ((void (*)(char *, uint64_t))v6[1])(v8, v68);
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v6 = v60;
    v61 = objc_allocWithZone((Class)NSError);
    v62 = sub_10008C1AC(v59, (uint64_t)v6, 9006, 0);
    swift_willThrow(v62);

    goto LABEL_24;
  }
  __break(1u);
  return result;
}

void sub_1000840C4()
{
  NSObject *v0;
  char *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  id v28;
  os_log_type_t v29;
  uint8_t *v30;
  id v31;
  id v32;
  os_log_type_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39[2];

  sub_10000C038();
  sub_100018F34();
  v4 = sub_100018C54(__stack_chk_guard);
  v36 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001B738();
  sub_10001EF54();
  if (!v26
    || (v5 = (void *)objc_opt_self(RBSProcessHandle),
        objc_msgSend(sub_10001A99C(v5), "isApplication"),
        sub_10008C9B4(),
        !v2))
  {
    sub_10008C9A0(OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection);
    sub_100010128();
    if (v0)
    {

      sub_10001105C();
LABEL_27:
      sub_1000117B4();
      goto LABEL_28;
    }

    sub_10001105C();
    goto LABEL_10;
  }
  v6 = (void *)objc_opt_self(RBSTarget);
  v7 = sub_10001A99C(v6);
  v8 = sub_10001BE7C(&qword_100128750);
  v9 = sub_1000100C8(v8, 40);
  *(_OWORD *)(v9 + 16) = xmmword_1000EFAF0;
  sub_1000100D8(v9, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  sub_100018A5C();
  sub_100011870();
  v12 = sub_100018458(v10, v11, (uint64_t)"FinishTaskInterruptable");
  *(_QWORD *)(v9 + 32) = v12;
  specialized Array._endMutation()(v12);
  v13 = objc_allocWithZone((Class)RBSAssertion);
  v14 = sub_10001AE90((uint64_t)"AppIntents Query");
  v39[0] = 0;
  if (objc_msgSend(v14, "acquireWithError:", v39))
  {
    v7 = *(id *)&v1[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    v15 = v39[0];
    swift_retain();
    sub_1000133C0();
    v16 = v0;
    if (v0)
    {
      sub_10001F97C();
      v35 = v14;
      objc_msgSend(v14, "invalidate");
      goto LABEL_12;
    }
    sub_10001F97C();
    objc_msgSend(v14, "invalidate");

LABEL_10:
    sub_1000117B4();
LABEL_28:
    sub_10001F188();
    sub_1000117E8();
    return;
  }
  v35 = v14;
  v17 = v39[0];
  v16 = sub_100016638();

  sub_100013E4C();
LABEL_12:
  v39[0] = v16;
  swift_errorRetain(v16);
  v18 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v19 = sub_1000100D8(v18, &qword_10012A728, NSError_ptr);
  v21 = sub_10001EFD8((uint64_t)&v38, (uint64_t)v39, v20, v19);
  if (!(_DWORD)v21)
  {
LABEL_26:

    swift_errorRelease(v39[0]);
    goto LABEL_27;
  }
  v22 = v38;
  v23 = sub_10001A454(v21, "domain");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  sub_10008C9BC();
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  v26 = v7 == (id)v24 && v3 == v25;
  if (v26)
  {
    sub_10000592C();
  }
  else
  {
    LOBYTE(v23) = sub_100015978(v24, v25);
    sub_100007398();
    sub_10000EC84();
    if ((v23 & 1) == 0)
    {

      goto LABEL_26;
    }
  }
  v27 = sub_100010120();
  if ((id)getLNLogCategoryMetadata(v27))
  {
    sub_10001B5EC();
    v28 = v22;
    sub_10001EFD0();
    v29 = sub_10000BFD4();
    if (sub_1000101D0(v29))
    {
      v33 = v23;
      v30 = (uint8_t *)sub_100011780(12);
      v34 = (void *)sub_100011780(32);
      v39[1] = v34;
      *(_DWORD *)v30 = 136315138;
      v31 = sub_100013328((uint64_t)v34, "localizedDescription");
      sub_1000190F0((uint64_t)v31);
      sub_10000ECF4();
      v37 = sub_1000187B8();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);

      sub_100007398();
      sub_1000100C0((void *)&_mh_execute_header, v16, v33, "Failed to acquire assertions: %s", v30);
      sub_10001B128();
      sub_1000133FC(12);
      sub_1000133FC((uint64_t)v30);

    }
    else
    {

    }
    sub_10001EE58(v36);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v32 = objc_allocWithZone((Class)NSError);
    sub_10001AC78();
    sub_10000C0E4();

    goto LABEL_26;
  }
  __break(1u);
}

id sub_100084504(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  unsigned int v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char v43;
  uint64_t v44;
  id result;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  uint8_t *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  uint8_t *v64;
  int v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  void *v74;
  uint64_t v75;

  v70 = a4;
  v12 = type metadata accessor for Logger(0);
  v68 = *(_QWORD *)(v12 - 8);
  v69 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v15 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v16 = objc_msgSend(v15, "isApplication"),
        v15,
        !v16))
  {
    v27 = v70;
    sub_100088EF0(a3, v70, a5, a6, &v74);
    if (v6)
    {
      swift_bridgeObjectRelease(a6);
      v29 = v27;
LABEL_27:
      swift_bridgeObjectRelease(v29);

      return a2;
    }

    goto LABEL_9;
  }
  v17 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v18 = sub_10001BE7C(&qword_100128750);
  v19 = swift_allocObject(v18, 40, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v20 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v19 + 32) = v20;
  v73 = (id)v19;
  specialized Array._endMutation()(v20);
  v21 = (uint64_t)v73;
  v22 = objc_allocWithZone((Class)RBSAssertion);
  v23 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v17, v21);
  v73 = 0;
  v24 = objc_msgSend(v23, "acquireWithError:", &v73);
  v25 = v73;
  if (v24)
  {
    v26 = v73;
    v27 = v70;
    sub_100088EF0(a3, v70, a5, a6, &v74);
    v28 = v6;
    if (v6)
    {
      objc_msgSend(v23, "invalidate");
      goto LABEL_11;
    }
    objc_msgSend(v23, "invalidate");

LABEL_9:
    a2 = v74;
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v27);
    return a2;
  }
  v30 = v73;
  v28 = (void *)_convertNSErrorToError(_:)(v25);

  swift_willThrow(v31);
LABEL_11:
  v73 = v28;
  swift_errorRetain(v28);
  v32 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v33 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v72, &v73, v32, v33, 0))
  {
LABEL_25:

    goto LABEL_26;
  }
  v67 = v23;
  v34 = v72;
  v35 = objc_msgSend(v72, "domain");
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v36 == v39 && v38 == v40)
  {
    swift_bridgeObjectRelease_n(v38, 2);
  }
  else
  {
    v42 = v40;
    v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v39, v40, 0);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v42);
    if ((v43 & 1) == 0)
    {

LABEL_26:
      swift_errorRelease(v73);
      swift_bridgeObjectRelease(a6);
      v29 = v70;
      goto LABEL_27;
    }
  }
  v44 = swift_errorRelease(v28);
  result = (id)getLNLogCategoryMetadata(v44);
  if (result)
  {
    Logger.init(_:)();
    v46 = v34;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    v49 = v48;
    if (os_log_type_enabled(v47, v48))
    {
      v50 = swift_slowAlloc(12, -1);
      v65 = v49;
      v51 = (uint8_t *)v50;
      v66 = swift_slowAlloc(32, -1);
      v75 = v66;
      v64 = v51;
      *(_DWORD *)v51 = 136315138;
      v52 = objc_msgSend(v46, "localizedDescription", v51 + 4);
      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v55 = v54;

      v71 = sub_10000FBEC(v53, v55, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);

      swift_bridgeObjectRelease(v55);
      v56 = v64;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v65, "Failed to acquire assertions: %s", v64, 0xCu);
      v57 = v66;
      swift_arrayDestroy(v66, 1);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v69);
    v23 = v67;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v60 = v59;
    v61 = objc_allocWithZone((Class)NSError);
    v62 = sub_10008C1AC(v58, v60, 9006, 0);
    swift_willThrow(v62);

    goto LABEL_25;
  }
  __break(1u);
  return result;
}

void sub_100084AE4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  unsigned int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  id v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint8_t *v48;
  NSObject *v49;
  uint8_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;

  sub_10000C038();
  v2 = v1;
  v3 = sub_100018C54(__stack_chk_guard);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = ((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001EF54();
  if (!v28
    || (v7 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v8 = objc_msgSend(v7, "isApplication"),
        v7,
        !v8))
  {
    sub_1000107E0();
    if (!v0)
    {

      goto LABEL_27;
    }
    goto LABEL_26;
  }
  v9 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v10 = sub_10001BE7C(&qword_100128750);
  v11 = sub_1000100C8(v10, 40);
  *(_OWORD *)(v11 + 16) = xmmword_1000EFAF0;
  sub_1000100D8(v11, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  sub_100018A5C();
  sub_100011870();
  *(_QWORD *)(v11 + 32) = sub_100018458(v12, v13, (uint64_t)"FinishTaskInterruptable");
  v55 = (id)v11;
  sub_100019074();
  v14 = (uint64_t)v55;
  v15 = objc_allocWithZone((Class)RBSAssertion);
  v16 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v9, v14);
  v55 = 0;
  if (sub_100019D98(v16, "acquireWithError:"))
  {
    v17 = v55;
    sub_1000107E0();
    if (!v0)
    {
      sub_100010044(0x100127000);

LABEL_27:
      sub_10001F188();
      sub_1000117E8();
      return;
    }
    sub_100010044(0x100127000);
  }
  else
  {
    v18 = v55;
    sub_100016638();

    sub_100013E4C();
  }
  sub_1000135B8();
  v19 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v20 = sub_1000100D8(v19, &qword_10012A728, NSError_ptr);
  if (!sub_10001F790(v20))
  {
LABEL_25:

    sub_10001AA80();
LABEL_26:

    goto LABEL_27;
  }
  v53 = v3;
  v21 = v54;
  v22 = objc_msgSend(v54, "domain");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  v28 = v23 == v26 && v25 == v27;
  if (v28)
  {
    swift_bridgeObjectRelease_n(v25, 2);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v26, v27, 0);
    swift_bridgeObjectRelease(v25);
    sub_10000EC84();
    if ((v23 & 1) == 0)
    {

      goto LABEL_25;
    }
  }
  v29 = sub_100010120();
  if ((id)getLNLogCategoryMetadata(v29))
  {
    Logger.init(_:)();
    v30 = v21;
    Logger.logObject.getter(v30);
    v31 = sub_10000BFD4();
    if (sub_10001CE20(v31))
    {
      v52 = (int)v21;
      v32 = (uint8_t *)sub_100011780(12);
      v33 = sub_100011780(32);
      v51 = v33;
      v56 = v33;
      v50 = v32;
      *(_DWORD *)v32 = 136315138;
      v48 = v32 + 4;
      v34 = sub_100013328(v33, "localizedDescription");
      v35 = sub_1000190F0((uint64_t)v34);
      v49 = v6;
      v36 = v30;
      v37 = v35;
      sub_10000ECF4();
      v38 = v37;
      v30 = v36;
      v39 = sub_10000FBEC(v38, v23, &v56);
      v40 = sub_10001B4F0(v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41);

      sub_100007398();
      v43 = v49;
      v42 = v50;
      sub_1000100C0((void *)&_mh_execute_header, v49, (os_log_type_t)v52, "Failed to acquire assertions: %s", v50);
      sub_10001B128();
      sub_1000133FC(12);
      sub_1000133FC((uint64_t)v42);

    }
    else
    {

    }
    (*(void (**)(NSObject *, uint64_t))(v4 + 8))(v6, v53);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v46 = v45;
    v47 = objc_allocWithZone((Class)NSError);
    sub_10001B314(v44, v46, 9006);
    sub_10000C0E4();

    goto LABEL_25;
  }
  __break(1u);
}

id sub_100084F40(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  unsigned int v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id result;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  uint64_t v54;
  uint8_t *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  _QWORD v68[2];
  uint8_t *v69;
  int v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;

  v75 = a6;
  v12 = type metadata accessor for Logger(0);
  v73 = *(_QWORD *)(v12 - 8);
  v74 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v15 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v16 = objc_msgSend(v15, "isApplication"),
        v15,
        !v16))
  {
    v31 = *(_QWORD *)&a2[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    swift_retain();
    v32 = a5;
    v28 = v75;
    v33 = sub_1000CAD48(a3, a4, v32, v75);
    if (v6)
    {
      swift_bridgeObjectRelease(a4);

      swift_release();
LABEL_8:
      v34 = v28;
LABEL_9:
      swift_bridgeObjectRelease(v34);
      return (id)v31;
    }
    v35 = v33;
    swift_release();
    v31 = (uint64_t)sub_1000812D0(v35);

    swift_bridgeObjectRelease(v35);
    goto LABEL_11;
  }
  v17 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v18 = sub_10001BE7C(&qword_100128750);
  v19 = swift_allocObject(v18, 40, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v20 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v19 + 32) = v20;
  v78 = (id)v19;
  specialized Array._endMutation()(v20);
  v21 = (uint64_t)v78;
  v22 = objc_allocWithZone((Class)RBSAssertion);
  v23 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v17, v21);
  v78 = 0;
  v24 = objc_msgSend(v23, "acquireWithError:", &v78);
  v25 = v78;
  if (v24)
  {
    v26 = v78;
    swift_retain();
    v27 = a5;
    v28 = v75;
    v29 = sub_1000CAD48(a3, a4, v27, v75);
    v30 = v6;
    if (v6)
    {
      swift_release();
      objc_msgSend(v23, "invalidate");
      goto LABEL_14;
    }
    v62 = v29;
    swift_release();
    v31 = (uint64_t)sub_1000812D0(v62);
    swift_bridgeObjectRelease(v62);
    objc_msgSend(v23, "invalidate");

LABEL_11:
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(v28);
    return (id)v31;
  }
  v37 = v78;
  v30 = (void *)_convertNSErrorToError(_:)(v25);

  swift_willThrow(v38);
  v28 = v75;
LABEL_14:
  v78 = v30;
  swift_errorRetain(v30);
  v31 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v39 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v77, &v78, v31, v39, 0))
  {

    swift_errorRelease(v78);
    swift_bridgeObjectRelease(a4);

    goto LABEL_8;
  }
  v72 = v23;
  v40 = v77;
  v41 = objc_msgSend(v77, "domain");
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v31 = v43;

  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v42 == v44 && v31 == v45)
  {
    swift_bridgeObjectRelease_n(v31, 2);
  }
  else
  {
    v47 = v45;
    v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v31, v44, v45, 0);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v47);
    if ((v48 & 1) == 0)
    {

LABEL_29:
      swift_errorRelease(v78);
      swift_bridgeObjectRelease(a4);

      v34 = v75;
      goto LABEL_9;
    }
  }
  v49 = swift_errorRelease(v30);
  result = (id)getLNLogCategoryMetadata(v49);
  if (result)
  {
    Logger.init(_:)();
    v50 = v40;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    v53 = v52;
    if (os_log_type_enabled(v51, v52))
    {
      v54 = swift_slowAlloc(12, -1);
      v70 = v53;
      v55 = (uint8_t *)v54;
      v71 = swift_slowAlloc(32, -1);
      v79 = v71;
      v69 = v55;
      *(_DWORD *)v55 = 136315138;
      v68[1] = v55 + 4;
      v56 = objc_msgSend(v50, "localizedDescription");
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v59 = v58;

      v76 = sub_10000FBEC(v57, v59, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);

      swift_bridgeObjectRelease(v59);
      v60 = v69;
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v70, "Failed to acquire assertions: %s", v69, 0xCu);
      v61 = v71;
      swift_arrayDestroy(v71, 1);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v73 + 8))(v14, v74);
    v63 = v72;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v65 = v64;
    v66 = objc_allocWithZone((Class)NSError);
    v67 = sub_10008C1AC(v31, v65, 9006, 0);
    swift_willThrow(v67);

    goto LABEL_29;
  }
  __break(1u);
  return result;
}

id sub_1000855D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  unsigned int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  unsigned int v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char v39;
  uint64_t v40;
  id result;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  int v45;
  uint64_t v46;
  uint8_t *v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  _QWORD v60[2];
  uint8_t *v61;
  int v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  void *v70;
  uint64_t v71;

  v10 = type metadata accessor for Logger(0);
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v13 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v14 = objc_msgSend(v13, "isApplication"),
        v13,
        !v14))
  {
    sub_10008AC78(a5, &v70);
    if (v5)
    {
LABEL_26:
      swift_bridgeObjectRelease(a4);

      return a2;
    }

    goto LABEL_8;
  }
  v15 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v16 = sub_10001BE7C(&qword_100128750);
  v17 = swift_allocObject(v16, 40, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v18 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v17 + 32) = v18;
  v69 = (id)v17;
  specialized Array._endMutation()(v18);
  v19 = (uint64_t)v69;
  v20 = objc_allocWithZone((Class)RBSAssertion);
  v21 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v15, v19);
  v69 = 0;
  v22 = objc_msgSend(v21, "acquireWithError:", &v69);
  v23 = v69;
  if (v22)
  {
    v24 = v69;
    sub_10008AC78(a5, &v70);
    v25 = v5;
    if (v5)
    {
      objc_msgSend(v21, "invalidate");
      goto LABEL_10;
    }
    objc_msgSend(v21, "invalidate");

LABEL_8:
    a2 = v70;
    swift_bridgeObjectRelease(a4);
    return a2;
  }
  v26 = v69;
  v25 = (void *)_convertNSErrorToError(_:)(v23);

  swift_willThrow(v27);
LABEL_10:
  v69 = v25;
  swift_errorRetain(v25);
  v28 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v29 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v68, &v69, v28, v29, 0))
  {

    goto LABEL_25;
  }
  v64 = v21;
  v30 = v68;
  v31 = objc_msgSend(v68, "domain");
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v32 == v35 && v34 == v36)
  {
    swift_bridgeObjectRelease_n(v34, 2);
  }
  else
  {
    v38 = v36;
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v35, v36, 0);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v38);
    if ((v39 & 1) == 0)
    {

LABEL_25:
      swift_errorRelease(v69);
      goto LABEL_26;
    }
  }
  v40 = swift_errorRelease(v25);
  result = (id)getLNLogCategoryMetadata(v40);
  if (result)
  {
    Logger.init(_:)();
    v42 = v30;
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    v45 = v44;
    if (os_log_type_enabled(v43, v44))
    {
      v46 = swift_slowAlloc(12, -1);
      v62 = v45;
      v47 = (uint8_t *)v46;
      v63 = swift_slowAlloc(32, -1);
      v71 = v63;
      v61 = v47;
      *(_DWORD *)v47 = 136315138;
      v60[1] = v47 + 4;
      v48 = objc_msgSend(v42, "localizedDescription");
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v51 = v50;

      v67 = sub_10000FBEC(v49, v51, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

      swift_bridgeObjectRelease(v51);
      v52 = v61;
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v62, "Failed to acquire assertions: %s", v61, 0xCu);
      v53 = v63;
      swift_arrayDestroy(v63, 1);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v65 + 8))(v12, v66);
    v54 = v64;
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v57 = v56;
    v58 = objc_allocWithZone((Class)NSError);
    v59 = sub_10008C1AC(v55, v57, 9006, 0);
    swift_willThrow(v59);

    goto LABEL_25;
  }
  __break(1u);
  return result;
}

id sub_100085B88(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  unsigned int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  unsigned int v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  id result;
  NSObject *v44;
  NSObject *v45;
  os_log_type_t v46;
  int v47;
  uint64_t v48;
  uint8_t *v49;
  NSObject *v50;
  id v51;
  unint64_t v52;
  unint64_t v53;
  NSObject *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62[2];
  uint8_t *v63;
  int v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  id v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[40];
  _BYTE v75[40];
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;

  v67 = a4;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v12 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v13 = objc_msgSend(v12, "isApplication"),
        v12,
        !v13))
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    swift_retain();
    v27 = a3;
    v25 = v67;
    sub_1000C65EC(v27, v67, (uint64_t)v75);
    if (v4)
    {
      swift_bridgeObjectRelease(v25);

      swift_release();
      return (id)v8;
    }
    swift_release();
    sub_10008C7AC((uint64_t)v75, (uint64_t)&v78);
    if (*((_QWORD *)&v78 + 1))
    {
      v71 = v78;
      v8 = v79;
      sub_10001E408((uint64_t)&v71);
    }
    else
    {
      v8 = 0;
    }
    v20 = a2;
LABEL_20:

    swift_bridgeObjectRelease(v25);
    return (id)v8;
  }
  v14 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v15 = sub_10001BE7C(&qword_100128750);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v17 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v16 + 32) = v17;
  v70 = (id)v16;
  specialized Array._endMutation()(v17);
  v18 = (uint64_t)v70;
  v19 = objc_allocWithZone((Class)RBSAssertion);
  v20 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v14, v18);
  v70 = 0;
  v21 = objc_msgSend(v20, "acquireWithError:", &v70);
  v22 = v70;
  if (v21)
  {
    v23 = v70;
    swift_retain();
    v24 = a3;
    v25 = v67;
    sub_1000C65EC(v24, v67, (uint64_t)v74);
    v26 = v4;
    if (v4)
    {
      swift_release();
      objc_msgSend(v20, "invalidate");
      goto LABEL_11;
    }
    swift_release();
    sub_10008C7AC((uint64_t)v74, (uint64_t)&v76);
    if (*((_QWORD *)&v76 + 1))
    {
      v72 = v76;
      v8 = v77;
      sub_10001E408((uint64_t)&v72);
    }
    else
    {
      v8 = 0;
    }
    objc_msgSend(v20, "invalidate");

    goto LABEL_20;
  }
  v28 = v70;
  v26 = (void *)_convertNSErrorToError(_:)(v22);

  swift_willThrow(v29);
  v25 = v67;
LABEL_11:
  v70 = v26;
  swift_errorRetain(v26);
  v30 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v31 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v69, &v70, v30, v31, 0))
  {

    swift_errorRelease(v70);
    v41 = v25;
    goto LABEL_30;
  }
  v66 = v69;
  v32 = -[NSObject domain](v69, "domain");
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v33 == v36 && v35 == v37)
  {
    swift_bridgeObjectRelease_n(v35, 2);
  }
  else
  {
    v39 = v37;
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 0);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v39);
    if ((v40 & 1) == 0)
    {

      swift_errorRelease(v70);
      v41 = v67;
LABEL_30:
      swift_bridgeObjectRelease(v41);

      return (id)v8;
    }
  }
  v42 = swift_errorRelease(v26);
  result = (id)getLNLogCategoryMetadata(v42);
  if (result)
  {
    Logger.init(_:)();
    v44 = v66;
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    v47 = v46;
    if (os_log_type_enabled(v45, v46))
    {
      v66 = v45;
      v48 = swift_slowAlloc(12, -1);
      v64 = v47;
      v49 = (uint8_t *)v48;
      v65 = swift_slowAlloc(32, -1);
      v73 = v65;
      v63 = v49;
      *(_DWORD *)v49 = 136315138;
      v62[1] = (uint64_t)(v49 + 4);
      v50 = v44;
      v51 = -[NSObject localizedDescription](v44, "localizedDescription");
      v62[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v53 = v52;

      v44 = v50;
      v68 = sub_10000FBEC(v62[0], v53, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);

      swift_bridgeObjectRelease(v53);
      v54 = v66;
      v55 = v63;
      _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v64, "Failed to acquire assertions: %s", v63, 0xCu);
      v56 = v65;
      swift_arrayDestroy(v65, 1);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v57 = v67;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v8 = v59;
    v60 = objc_allocWithZone((Class)NSError);
    v61 = sub_10008C1AC(v58, v8, 9006, 0);
    swift_willThrow(v61);

    swift_errorRelease(v70);
    v41 = v57;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000862B0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  id v12;
  unsigned int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  unsigned int v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  _QWORD *result;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint8_t *v58;
  _QWORD *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  _QWORD v67[2];
  uint8_t *v68;
  _QWORD *v69;
  id v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  char v75[8];
  _QWORD *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  id v80[3];
  uint64_t v81;
  uint64_t v82;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD **)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v12 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v13 = objc_msgSend(v12, "isApplication"),
        v12,
        !v13))
  {
    v9 = *(_QWORD **)&a2[OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection];
    swift_retain();
    sub_1000BF6D8((uint64_t)v80);
    v29 = v81;
    v30 = v82;
    sub_10000E858(v80, v81);
    if (qword_100127EF0 != -1)
      swift_once(&qword_100127EF0, sub_1000BF668);
    *(_QWORD *)&v77 = a3;
    *((_QWORD *)&v77 + 1) = a4;
    == infix<A>(_:_:)();
    v78 = v29;
    v79 = v30;
    sub_10001795C(&v77);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000E87C(v80);
    sub_100019A48(&v77, (uint64_t)v80);
    v31 = v73;
    v32 = sub_1000BFC30(v80);
    if (v31)
    {
      sub_10000E87C(v80);
      swift_bridgeObjectRelease();

      swift_release();
      return v9;
    }
    v33 = v32;
    sub_10000E87C(v80);
    swift_release();
    v9 = sub_1000812D0(v33);

    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    return v9;
  }
  v72 = a2;
  v14 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v15 = sub_10001BE7C(&qword_100128750);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v17 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v16 + 32) = v17;
  v80[0] = (id)v16;
  specialized Array._endMutation()(v17);
  v18 = v80[0];
  v19 = objc_allocWithZone((Class)RBSAssertion);
  v20 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v14, (uint64_t)v18);
  v80[0] = 0;
  v21 = objc_msgSend(v20, "acquireWithError:", v80);
  v22 = v80[0];
  v70 = v20;
  if (v21)
  {
    v71 = a4;
    v23 = v80[0];
    swift_retain();
    sub_1000BF6D8((uint64_t)v80);
    v24 = v81;
    v25 = v82;
    v69 = sub_10000E858(v80, v81);
    if (qword_100127EF0 != -1)
      swift_once(&qword_100127EF0, sub_1000BF668);
    *(_QWORD *)&v77 = a3;
    *((_QWORD *)&v77 + 1) = v71;
    == infix<A>(_:_:)();
    v78 = v24;
    v79 = v25;
    sub_10001795C(&v77);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000E87C(v80);
    sub_100019A48(&v77, (uint64_t)v80);
    v26 = (void *)v73;
    v27 = sub_1000BFC30(v80);
    v28 = v26;
    if (v26)
    {
      sub_10000E87C(v80);
      swift_release();
      v20 = v70;
      objc_msgSend(v70, "invalidate");
      a4 = v71;
      goto LABEL_15;
    }
    v60 = v27;
    sub_10000E87C(v80);
    swift_release();
    v9 = sub_1000812D0(v60);
    swift_bridgeObjectRelease();
    v61 = v70;
    objc_msgSend(v70, "invalidate");

    goto LABEL_13;
  }
  v34 = v80[0];
  v28 = (void *)_convertNSErrorToError(_:)(v22);

  swift_willThrow(v35);
LABEL_15:
  v36 = v72;
  v80[0] = v28;
  swift_errorRetain(v28);
  v37 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v38 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v77, v80, v37, v38, 0))
  {

    swift_errorRelease(v80[0]);
LABEL_30:
    swift_bridgeObjectRelease();

    return v9;
  }
  v73 = v8;
  v39 = (void *)v77;
  v40 = objc_msgSend((id)v77, "domain");
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v41 == v44 && v43 == v45)
  {
    swift_bridgeObjectRelease_n(v43, 2);
  }
  else
  {
    v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v44, v45, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
    {

      swift_errorRelease(v80[0]);
      swift_bridgeObjectRelease();

      return v9;
    }
  }
  v71 = a4;
  v48 = swift_errorRelease(v28);
  result = (id)getLNLogCategoryMetadata(v48);
  if (result)
  {
    Logger.init(_:)();
    v50 = v39;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = (_QWORD *)swift_slowAlloc(32, -1);
      v76 = v69;
      v68 = v53;
      *(_DWORD *)v53 = 136315138;
      v67[1] = v53 + 4;
      v54 = objc_msgSend(v50, "localizedDescription");
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      v57 = v56;

      v74 = sub_10000FBEC(v55, v57, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);

      swift_bridgeObjectRelease();
      v58 = v68;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to acquire assertions: %s", v68, 0xCu);
      v59 = v69;
      swift_arrayDestroy(v69, 1);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

    }
    else
    {

    }
    ((void (*)(char *, uint64_t))v9[1])(v11, v73);
    v36 = v72;
    v9 = v70;
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v64 = v63;
    v65 = objc_allocWithZone((Class)NSError);
    v66 = sub_10008C1AC(v62, v64, 9006, 0);
    swift_willThrow(v66);

    swift_errorRelease(v80[0]);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

void sub_100086B10(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  unsigned int v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  char *v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  _QWORD v58[2];
  id v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;

  v63 = a8;
  v64 = a4;
  v65 = a2;
  v13 = type metadata accessor for Logger(0);
  v60 = *(_QWORD *)(v13 - 8);
  v61 = v13;
  __chkstk_darwin(v13);
  v62 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v15 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v16 = objc_msgSend(v15, "isApplication"),
        v15,
        !v16))
  {
    v27 = v65;
    sub_10008B49C((uint64_t)v65, a3, v64, a5, a6);
    if (v8)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }

    goto LABEL_8;
  }
  v17 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v18 = sub_10001BE7C(&qword_100128750);
  v19 = swift_allocObject(v18, 40, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v20 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v19 + 32) = v20;
  v68 = (id)v19;
  specialized Array._endMutation()(v20);
  v21 = (uint64_t)v68;
  v22 = objc_allocWithZone((Class)RBSAssertion);
  v23 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v17, v21);
  v68 = 0;
  v24 = objc_msgSend(v23, "acquireWithError:", &v68);
  v25 = v68;
  if (v24)
  {
    v26 = v68;
    v27 = v65;
    sub_10008B49C((uint64_t)v65, a3, v64, a5, a6);
    v28 = v8;
    if (v8)
    {
      objc_msgSend(v23, "invalidate");
      goto LABEL_10;
    }
    objc_msgSend(v23, "invalidate");

LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v29 = v68;
  v28 = (void *)_convertNSErrorToError(_:)(v25);

  swift_willThrow(v30);
  v27 = v65;
LABEL_10:
  v68 = v28;
  swift_errorRetain(v28);
  v31 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v32 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v67, &v68, v31, v32, 0))
  {

LABEL_25:
    swift_errorRelease(v68);
    goto LABEL_26;
  }
  v59 = v23;
  v33 = v67;
  v34 = objc_msgSend(v67, "domain");
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v35 == v38 && v37 == v39)
  {
    swift_bridgeObjectRelease_n(v37, 2);
  }
  else
  {
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v38, v39, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
    {

      swift_errorRelease(v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
  }
  v42 = swift_errorRelease(v28);
  if ((id)getLNLogCategoryMetadata(v42))
  {
    v43 = v62;
    Logger.init(_:)();
    v44 = v33;
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v69 = v48;
      *(_DWORD *)v47 = 136315138;
      v58[1] = v47 + 4;
      v49 = objc_msgSend(v44, "localizedDescription");
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v52 = v51;

      v66 = sub_10000FBEC(v50, v52, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to acquire assertions: %s", v47, 0xCu);
      swift_arrayDestroy(v48, 1);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);

      (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v61);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v60 + 8))(v43, v61);
    }
    v27 = v65;
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v55 = v54;
    v56 = objc_allocWithZone((Class)NSError);
    v57 = sub_10008C1AC(v53, v55, 9006, 0);
    swift_willThrow(v57);

    goto LABEL_25;
  }
  __break(1u);
}

void sub_100087140(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  void *v6;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unsigned int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  unsigned int v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  char *v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  id v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;

  v65 = a2;
  v12 = type metadata accessor for Logger(0);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  __chkstk_darwin(v12);
  v64 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v14 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v15 = objc_msgSend(v14, "isApplication"),
        v14,
        !v15))
  {
    v28 = v65;
    sub_10008B930((uint64_t)v65, a3, a4, a5, a6);
    if (v6)
    {
      swift_bridgeObjectRelease();

      return;
    }

    goto LABEL_9;
  }
  v16 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v17 = sub_10001BE7C(&qword_100128750);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v19 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v18 + 32) = v19;
  v68 = (id)v18;
  specialized Array._endMutation()(v19);
  v20 = (uint64_t)v68;
  v21 = objc_allocWithZone((Class)RBSAssertion);
  v22 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v16, v20);
  v68 = 0;
  v23 = objc_msgSend(v22, "acquireWithError:", &v68);
  v24 = v68;
  if (v23)
  {
    v25 = v68;
    v26 = v65;
    sub_10008B930((uint64_t)v65, a3, a4, a5, a6);
    v27 = v6;
    if (v6)
    {
      objc_msgSend(v22, "invalidate");
      goto LABEL_11;
    }
    objc_msgSend(v22, "invalidate");

LABEL_9:
    swift_bridgeObjectRelease();
    return;
  }
  v29 = v68;
  v27 = (void *)_convertNSErrorToError(_:)(v24);

  swift_willThrow(v30);
LABEL_11:
  v68 = v27;
  swift_errorRetain(v27);
  v31 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v32 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v67, &v68, v31, v32, 0))
  {

    goto LABEL_26;
  }
  v61 = v22;
  v33 = v67;
  v34 = objc_msgSend(v67, "domain");
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v35 == v38 && v37 == v39)
  {
    swift_bridgeObjectRelease_n(v37, 2);
  }
  else
  {
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v38, v39, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
    {

LABEL_26:
      swift_errorRelease(v68);
      swift_bridgeObjectRelease();

      return;
    }
  }
  v42 = swift_errorRelease(v27);
  if ((id)getLNLogCategoryMetadata(v42))
  {
    v43 = v64;
    Logger.init(_:)();
    v44 = v33;
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      v69 = v60;
      *(_DWORD *)v47 = 136315138;
      v48 = objc_msgSend(v44, "localizedDescription", v47 + 4);
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v51 = v50;

      v66 = sub_10000FBEC(v49, v51, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to acquire assertions: %s", v47, 0xCu);
      v52 = v60;
      swift_arrayDestroy(v60, 1);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v47, -1, -1);

      (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v63);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v63);
    }
    v53 = v61;
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v56 = v55;
    v57 = objc_allocWithZone((Class)NSError);
    v58 = sub_10008C1AC(v54, v56, 9006, 0);
    swift_willThrow(v58);

    goto LABEL_26;
  }
  __break(1u);
}

id sub_100087728(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  unsigned int v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  unsigned int v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id result;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  int v52;
  uint64_t v53;
  uint8_t *v54;
  id v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  os_log_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  os_log_t v72;
  uint8_t *v73;
  int v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  uint64_t v81;

  v77 = a4;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_requiresAssertion) != 1
    || (v11 = objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"),
        v12 = objc_msgSend(v11, "isApplication"),
        v11,
        !v12))
  {
    swift_retain();
    sub_100036BB4();
    if (v4)
    {
      swift_errorRelease(v4);
      swift_release();
    }
    else
    {
      v33 = v29;
      swift_release();
      if (v33)
      {
        v7 = sub_10008C54C(v33);

        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }
    v7 = type metadata accessor for MetadataError(0);
    sub_100025AFC((unint64_t *)&unk_10012A740, (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError, (uint64_t)&protocol conformance descriptor for MetadataError);
    swift_allocError(v7, v30, 0, 0);
    v32 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v31, enum case for MetadataError.cacheLookupFailed(_:), v7);
    swift_willThrow(v32);
LABEL_10:
    swift_bridgeObjectRelease();

    return (id)v7;
  }
  v13 = objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v14 = sub_10001BE7C(&qword_100128750);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1000EFAF0;
  sub_10000795C(0, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  v16 = sub_1000882A8(0xD000000000000010, 0x80000001000F50A0, 0xD000000000000017, 0x80000001000F50C0);
  *(_QWORD *)(v15 + 32) = v16;
  v80 = (id)v15;
  specialized Array._endMutation()(v16);
  v17 = (uint64_t)v80;
  v18 = objc_allocWithZone((Class)RBSAssertion);
  v19 = sub_10008C324(0xD000000000000010, 0x80000001000F5080, v13, v17);
  v80 = 0;
  v20 = objc_msgSend(v19, "acquireWithError:", &v80);
  v21 = v80;
  if (v20)
  {
    v22 = v80;
    swift_retain();
    sub_100036BB4();
    if (v4)
    {
      swift_errorRelease(v4);
      swift_release();
LABEL_6:
      v24 = type metadata accessor for MetadataError(0);
      sub_100025AFC((unint64_t *)&unk_10012A740, (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError, (uint64_t)&protocol conformance descriptor for MetadataError);
      v26 = (void *)swift_allocError(v24, v25, 0, 0);
      v28 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v27, enum case for MetadataError.cacheLookupFailed(_:), v24);
      swift_willThrow(v28);
      objc_msgSend(v19, "invalidate");
      goto LABEL_16;
    }
    v65 = v23;
    swift_release();
    if (!v65)
      goto LABEL_6;
    v7 = sub_10008C54C(v65);
    swift_bridgeObjectRelease();
    objc_msgSend(v19, "invalidate");

LABEL_13:
    swift_bridgeObjectRelease();
    return (id)v7;
  }
  v35 = v80;
  v26 = (void *)_convertNSErrorToError(_:)(v21);

  swift_willThrow(v36);
LABEL_16:
  v80 = v26;
  swift_errorRetain(v26);
  v37 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v38 = sub_10000795C(0, &qword_10012A728, NSError_ptr);
  if (!swift_dynamicCast(&v79, &v80, v37, v38, 0))
  {

    swift_errorRelease(v80);
    goto LABEL_10;
  }
  v76 = v19;
  v39 = v79;
  v40 = objc_msgSend(v79, "domain");
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  if (v41 == v44 && v43 == v45)
  {
    swift_bridgeObjectRelease_n(v43, 2);
  }
  else
  {
    v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v44, v45, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
    {

      swift_errorRelease(v80);
      goto LABEL_10;
    }
  }
  v48 = swift_errorRelease(v26);
  result = (id)getLNLogCategoryMetadata(v48);
  if (result)
  {
    Logger.init(_:)();
    v49 = v39;
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter();
    v52 = v51;
    if (os_log_type_enabled(v50, v51))
    {
      v53 = swift_slowAlloc(12, -1);
      v74 = v52;
      v54 = (uint8_t *)v53;
      v75 = swift_slowAlloc(32, -1);
      v81 = v75;
      v73 = v54;
      *(_DWORD *)v54 = 136315138;
      v55 = objc_msgSend(v49, "localizedDescription", v54 + 4);
      v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      v72 = v50;
      v57 = v49;
      v58 = v56;
      v60 = v59;

      v61 = v58;
      v49 = v57;
      v78 = sub_10000FBEC(v61, v60, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79);

      swift_bridgeObjectRelease();
      v63 = v72;
      v62 = v73;
      _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v74, "Failed to acquire assertions: %s", v73, 0xCu);
      v64 = v75;
      swift_arrayDestroy(v75, 1);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v62, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v66 = v76;
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v7 = v68;
    v69 = objc_allocWithZone((Class)NSError);
    v70 = sub_10008C1AC(v67, v7, 9006, 0);
    swift_willThrow(v70);

    swift_errorRelease(v80);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_100087E70()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;

  sub_10000C038();
  v4 = v3;
  v6 = v5;
  v43 = sub_100018C54(__stack_chk_guard);
  v7 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  sub_10001B738();
  sub_10001EF54();
  if (!v24
    || (objc_msgSend(objc_msgSend((id)objc_opt_self(RBSProcessHandle), "currentProcess"), "isApplication"), sub_10008C9B4(), !v2))
  {
    sub_100018930();
    if (v0)
    {
LABEL_27:
      swift_bridgeObjectRelease(v4);

      goto LABEL_28;
    }

    goto LABEL_9;
  }
  objc_msgSend((id)objc_opt_self(RBSTarget), "currentProcess");
  v8 = sub_10001BE7C(&qword_100128750);
  v9 = sub_1000100C8(v8, 40);
  *(_OWORD *)(v9 + 16) = xmmword_1000EFAF0;
  sub_1000100D8(v9, (unint64_t *)&unk_10012A718, RBSDomainAttribute_ptr);
  sub_100018A5C();
  sub_100011870();
  *(_QWORD *)(v9 + 32) = sub_100018458(v10, v11, (uint64_t)"FinishTaskInterruptable");
  sub_100019074();
  v12 = objc_allocWithZone((Class)RBSAssertion);
  v13 = sub_10001AE90((uint64_t)"AppIntents Query");
  if (sub_100019D98(v13, "acquireWithError:"))
  {
    v14 = 0;
    sub_100018930();
    v15 = v0;
    if (v0)
    {
      sub_10000DD74(0x100127000);
      goto LABEL_11;
    }
    sub_10000DD74(0x100127000);

LABEL_9:
    swift_bridgeObjectRelease(v4);
LABEL_28:
    sub_10001F188();
    sub_1000117E8();
    return;
  }
  v16 = 0;
  v15 = sub_100016638();

  sub_100013E4C();
LABEL_11:
  sub_1000135B8();
  v17 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v18 = sub_1000100D8(v17, &qword_10012A728, NSError_ptr);
  v19 = sub_10001F790(v18);
  if (!(_DWORD)v19)
  {

    goto LABEL_26;
  }
  v42 = v13;
  v20 = sub_10001A454(v19, "domain");
  v21 = sub_1000190F0((uint64_t)v20);
  sub_10000ECF4();
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(RBSAssertionErrorDomain);
  v24 = v21 == v22 && v0 == v23;
  if (v24)
  {
    sub_10000592C();
  }
  else
  {
    v17 = v23;
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v0, v22, v23, 0);
    sub_100007398();
    swift_bridgeObjectRelease(v17);
    if ((v25 & 1) == 0)
    {

LABEL_26:
      sub_10001AA80();
      goto LABEL_27;
    }
  }
  v26 = sub_100010120();
  if ((id)getLNLogCategoryMetadata(v26))
  {
    sub_10001B5EC();
    v27 = v44;
    sub_10001EFD0();
    v28 = sub_10000BFD4();
    if (sub_10001CE20(v28))
    {
      v41 = v17;
      v29 = (uint8_t *)sub_100011780(12);
      v45 = sub_100011780(32);
      *(_DWORD *)v29 = 136315138;
      v30 = objc_msgSend(v27, "localizedDescription");
      v40 = v15;
      v31 = v27;
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v34 = v33;

      v35 = v32;
      v27 = v31;
      v36 = sub_10000FBEC(v35, v34, &v45);
      v37 = sub_10001B4F0(v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v38);

      sub_10000EC84();
      sub_1000100C0((void *)&_mh_execute_header, v40, v41, "Failed to acquire assertions: %s", v29);
      sub_10001B128();
      sub_1000133FC((uint64_t)(v29 + 12));
      sub_1000133FC((uint64_t)v29);

    }
    else
    {

    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v43);
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    v39 = objc_allocWithZone((Class)NSError);
    sub_10001AC78();
    sub_10000C0E4();

    goto LABEL_26;
  }
  __break(1u);
}

id sub_1000882A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSString v7;
  NSString v8;
  id v9;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "attributeWithDomain:name:", v7, v8);

  return v9;
}

void _LNMetadataProviderDirect.actions()()
{
  sub_100016414();
  sub_10001E238();
  sub_100010294();
}

uint64_t sub_10008835C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13[5];

  swift_retain();
  sub_10004D7B8((uint64_t)v13);
  v3 = sub_100005278(v13);
  sub_10000E87C(v13);
  result = swift_release();
  if (!v1)
  {
    KeyPath = swift_getKeyPath(&unk_1000F1290);
    v6 = swift_getKeyPath(&unk_1000F12B0);
    v7 = swift_getKeyPath(&unk_1000F12D8);
    v13[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
    v8 = *(_QWORD *)(v3 + 16);
    if (v8)
    {
      v9 = *(_QWORD *)(type metadata accessor for LNActionRecord(0) - 8);
      v10 = v3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v11 = *(_QWORD *)(v9 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000815A0(v13, v10, v7, KeyPath, v6);
        v10 += v11;
        --v8;
      }
      while (v8);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v3);
      v12 = (_QWORD *)v13[0];
    }
    else
    {
      swift_release();
      swift_release();
      v12 = &_swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease(v3);
    result = swift_release();
    *a1 = v12;
  }
  return result;
}

void _LNMetadataProviderDirect.actionsConforming(to:logicalType:bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10001CD80(a1, a2, a3, a4);
  v4;
  sub_1000100E0();
  v5 = sub_100017A94();
  sub_1000822D4(v5, v6, v7, v8, v9, v10);
  sub_1000073F4();
}

uint64_t sub_100088538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection);
  swift_retain();
  sub_10004E5E0(a2, a3, a4, a5, v12);
  v14 = v13;
  result = swift_release();
  if (!v6)
  {
    KeyPath = swift_getKeyPath(&unk_1000F1290);
    v17 = swift_getKeyPath(&unk_1000F12B0);
    v18 = swift_getKeyPath(&unk_1000F12D8);
    v24 = &_swiftEmptyDictionarySingleton;
    v19 = *(_QWORD *)(v14 + 16);
    if (v19)
    {
      v20 = *(_QWORD *)(type metadata accessor for LNActionRecord(0) - 8);
      v21 = v14 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      v22 = *(_QWORD *)(v20 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000815A0((uint64_t *)&v24, v21, v18, KeyPath, v17);
        v21 += v22;
        --v19;
      }
      while (v19);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v14);
      v23 = v24;
    }
    else
    {
      swift_release();
      swift_release();
      v23 = &_swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease(v14);
    result = swift_release();
    *a6 = v23;
  }
  return result;
}

id _LNMetadataProviderDirect.actionsAndSystemProtocolDefaults(forBundleIdentifier:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  sub_100016330();
  swift_bridgeObjectRetain();
  v3 = v0;
  return sub_100082E90((uint64_t)v3, v3, v2, v1);
}

uint64_t sub_10008885C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66[3];
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;

  v4 = v3;
  v69 = a1;
  swift_retain();
  sub_10004D7B8((uint64_t)v66);
  v57 = a3;
  if (a2)
  {
    v7 = v67;
    v8 = v68;
    sub_10000E858(v66, (uint64_t)v67);
    if (qword_100127CD8 != -1)
LABEL_29:
      swift_once(&qword_100127CD8, sub_10004D6D4);
    *(_QWORD *)&v63 = v69;
    *((_QWORD *)&v63 + 1) = a2;
    == infix<A>(_:_:)();
    v10 = v9;
    v12 = v11;
    v64 = v7;
    v65 = v8;
    sub_10001795C(&v63);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v10);
    sub_10000E87C(v66);
    sub_100019A48(&v63, (uint64_t)v66);
  }
  v13 = v4;
  v14 = sub_100005278(v66);
  v8 = v13;
  sub_10000E87C(v66);
  result = swift_release();
  if (!v13)
  {
    KeyPath = swift_getKeyPath(&unk_1000F1290);
    v17 = swift_getKeyPath(&unk_1000F12B0);
    v18 = swift_getKeyPath(&unk_1000F12D8);
    v7 = _swiftEmptyDictionarySingleton;
    v66[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    v19 = v14;
    v20 = *(_QWORD *)(v14 + 16);
    if (v20)
    {
      v60 = a2;
      v21 = *(_QWORD *)(type metadata accessor for LNActionRecord(0) - 8);
      v22 = v14 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      v23 = *(_QWORD *)(v21 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000815A0(v66, v22, v18, KeyPath, v17);
        v8 = 0;
        v22 += v23;
        --v20;
      }
      while (v20);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v19);
      v24 = (_QWORD *)v66[0];
      a2 = v60;
    }
    else
    {
      swift_release();
      swift_release();
      v24 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease(v19);
    swift_release();
    swift_retain();
    v25 = sub_10007227C(v69, a2);
    v56 = (uint64_t)v24;
    swift_release();
    v66[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    v26 = *(_QWORD *)(v25 + 16);
    v55 = v25;
    if (v26)
    {
      v27 = (uint64_t *)(v25 + 72);
      v7 = _swiftEmptyDictionarySingleton;
      do
      {
        v28 = *(v27 - 5);
        a2 = *(v27 - 4);
        v4 = *(v27 - 2);
        v29 = *v27;
        v61 = *(v27 - 3);
        v62 = *(v27 - 1);
        swift_bridgeObjectRetain_n(a2, 2);
        swift_bridgeObjectRetain();
        v69 = v29;
        swift_bridgeObjectRetain();
        v31 = sub_100016064(v28);
        v32 = v7[2];
        v33 = (v30 & 1) == 0;
        v34 = v32 + v33;
        if (__OFADD__(v32, v33))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        v35 = v30;
        if (v7[3] < v34)
        {
          sub_1000322EC(v34, 1);
          v7 = (_QWORD *)v66[0];
          v36 = sub_100016064(v28);
          if ((v35 & 1) != (v37 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }
          v31 = v36;
        }
        if ((v35 & 1) != 0)
        {
          v58 = v4;
          swift_bridgeObjectRelease(a2);
          v38 = v7[7];
          v39 = *(_QWORD *)(v38 + 8 * v31);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
          *(_QWORD *)(v38 + 8 * v31) = v39;
          v59 = v26;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100030064();
            v39 = v52;
            *(_QWORD *)(v38 + 8 * v31) = v52;
          }
          v41 = *(_QWORD *)(v39 + 16);
          v42 = v41 + 1;
          if (v41 >= *(_QWORD *)(v39 + 24) >> 1)
          {
            sub_100030064();
            v42 = v41 + 1;
            v39 = v53;
            *(_QWORD *)(v38 + 8 * v31) = v53;
          }
          *(_QWORD *)(v39 + 16) = v42;
          v43 = (_QWORD *)(v39 + 48 * v41);
          v43[4] = v28;
          v43[5] = a2;
          v26 = v59;
          v43[6] = v61;
          v43[7] = v58;
          v44 = v69;
          v43[8] = v62;
          v43[9] = v44;
        }
        else
        {
          v45 = sub_10001BE7C(&qword_10012A770);
          v46 = swift_allocObject(v45, 80, 7);
          *(_OWORD *)(v46 + 16) = xmmword_1000EFAE0;
          *(_QWORD *)(v46 + 32) = v28;
          *(_QWORD *)(v46 + 40) = a2;
          *(_QWORD *)(v46 + 48) = v61;
          *(_QWORD *)(v46 + 56) = v4;
          v47 = v69;
          *(_QWORD *)(v46 + 64) = v62;
          *(_QWORD *)(v46 + 72) = v47;
          v7[(v31 >> 6) + 8] |= 1 << v31;
          v48 = (uint64_t *)(v7[6] + 16 * v31);
          *v48 = v28;
          v48[1] = a2;
          *(_QWORD *)(v7[7] + 8 * v31) = v46;
          v49 = v7[2];
          v50 = __OFADD__(v49, 1);
          v51 = v49 + 1;
          if (v50)
            goto LABEL_28;
          v7[2] = v51;
        }
        v27 += 6;
        --v26;
      }
      while (v26);
    }
    swift_bridgeObjectRelease(v55);
    swift_retain();
    v54 = sub_100080C44(_swiftEmptyDictionarySingleton, v56, (uint64_t)v7);
    swift_release();
    result = swift_bridgeObjectRelease(v56);
    *v57 = v54;
  }
  return result;
}

void _LNMetadataProviderDirect.actionIdentifiers(forBundleIdentifier:)()
{
  sub_10008AAB4();
}

uint64_t _LNMetadataProviderDirect.action(forBundleIdentifier:andActionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10008921C(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_100084504);
}

void sub_100088EF0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v29 = a5;
  v30 = type metadata accessor for LNActionRecord(0);
  __chkstk_darwin(v30);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001BE7C(&qword_10012A768);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - v16;
  swift_retain();
  sub_10004DED8(a1, a2, a3, a4);
  v19 = v18;
  swift_release();
  if (!v5)
  {
    v20 = v29;
    sub_100050A4C();
    swift_bridgeObjectRelease(v19);
    sub_10008C95C((uint64_t)v17, (uint64_t)v14, &qword_10012A768);
    v21 = v30;
    if (sub_10001C93C((uint64_t)v14, 1, v30) == 1)
    {
      sub_1000131E0((uint64_t)v14, &qword_10012A768);
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
      v24 = v23;
      v25 = objc_allocWithZone((Class)NSError);
      v26 = sub_10008C1AC(v22, v24, 9004, 0);
      swift_willThrow(v26);
      sub_1000131E0((uint64_t)v17, &qword_10012A768);
    }
    else
    {
      sub_1000131E0((uint64_t)v17, &qword_10012A768);
      sub_10008C928((uint64_t)v14, (uint64_t)v11, type metadata accessor for LNActionRecord);
      v27 = *(id *)&v11[*(int *)(v21 + 24)];
      sub_10001DBC8((uint64_t)v11, type metadata accessor for LNActionRecord);
      *v20 = v27;
    }
  }
}

uint64_t _LNMetadataProviderDirect.actions(forBundleIdentifier:andActionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10008921C(a1, a2, a3, a4, (uint64_t (*)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))sub_100083448);
}

uint64_t sub_10008921C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))
{
  void *v5;
  id v11;

  v11 = v5;
  sub_1000100E0();
  sub_10000C030();
  return a5(v11, v11, a1, a2, a3, a4);
}

void _LNMetadataProviderDirect.actionsConforming(to:withParametersOfTypes:bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v8;

  swift_bridgeObjectRetain();
  sub_10000C020();
  v8 = v4;
  sub_1000828B8((uint64_t)v8, v8, a3, a4, a2);
  sub_100019B14();
}

uint64_t sub_1000893F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v32 = a4;
  swift_retain();
  sub_10004D7B8((uint64_t)v29);
  if (a2)
  {
    v8 = v30;
    v9 = v31;
    sub_10000E858(v29, v30);
    if (qword_100127CD8 != -1)
      swift_once(&qword_100127CD8, sub_10004D6D4);
    *(_QWORD *)&v26 = a1;
    *((_QWORD *)&v26 + 1) = a2;
    == infix<A>(_:_:)();
    v11 = v10;
    v13 = v12;
    v27 = v8;
    v28 = v9;
    sub_10001795C(&v26);
    QueryType.filter(_:)();
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v11);
    sub_10000E87C(v29);
    sub_100019A48(&v26, (uint64_t)v29);
  }
  v14 = sub_100005278(v29);
  sub_10000E87C(v29);
  result = swift_release();
  if (!v4)
  {
    swift_bridgeObjectRetain();
    sub_100080A20(v14, a3);
    v17 = v16;
    KeyPath = swift_getKeyPath(&unk_1000F1290);
    v19 = swift_getKeyPath(&unk_1000F12B0);
    v20 = swift_getKeyPath(&unk_1000F12D8);
    v29[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    v21 = *(_QWORD *)(v17 + 16);
    if (v21)
    {
      v22 = *(_QWORD *)(type metadata accessor for LNActionRecord(0) - 8);
      v23 = v17 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      v24 = *(_QWORD *)(v22 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000815A0(v29, v23, v20, KeyPath, v19);
        v23 += v24;
        --v21;
      }
      while (v21);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v17);
      v25 = (_QWORD *)v29[0];
    }
    else
    {
      swift_release();
      swift_release();
      v25 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease(v17);
    result = swift_release();
    *v32 = v25;
  }
  return result;
}

uint64_t sub_100089684(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;

  v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a4
                                                             + *(int *)(type metadata accessor for LNActionRecord(0)
                                                                      + 24)), "parameters"));
  sub_10000795C(0, &qword_1001286C8, LNActionParameterMetadata_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7);

  swift_bridgeObjectRetain();
  LOBYTE(v7) = sub_100081370(v8, a1, a2, a3);
  swift_bridgeObjectRelease(v8);
  return v7 & 1;
}

void _LNMetadataProviderDirect.actions(withFullyQualifiedIdentifiers:)()
{
  sub_100016708();
  sub_10001C250();
  sub_10001F5DC();
}

uint64_t sub_1000898D4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  swift_retain();
  v5 = sub_10004E2F4(a1);
  result = swift_release();
  if (!v2)
  {
    KeyPath = swift_getKeyPath(&unk_1000F1290);
    v8 = swift_getKeyPath(&unk_1000F12B0);
    v9 = swift_getKeyPath(&unk_1000F12D8);
    v15 = _swiftEmptyDictionarySingleton;
    v10 = v5[2];
    if (v10)
    {
      v11 = *(_QWORD *)(type metadata accessor for LNActionRecord(0) - 8);
      v12 = (uint64_t)v5 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      v13 = *(_QWORD *)(v11 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1000815A0((uint64_t *)&v15, v12, v9, KeyPath, v8);
        v12 += v13;
        --v10;
      }
      while (v10);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease(v5);
      v14 = v15;
    }
    else
    {
      swift_release();
      swift_release();
      v14 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease(v5);
    result = swift_release();
    *a2 = v14;
  }
  return result;
}

void _LNMetadataProviderDirect.bundles()()
{
  char *v0;

  v0 = (char *)sub_100016414();
  sub_100083AC0((uint64_t)v0, v0);
  sub_100010294();
}

void _LNMetadataProviderDirect.bundleRegistrations()()
{
  sub_100016414();
  sub_10001E238();
  sub_100010294();
}

uint64_t sub_100089C40@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v24[2];
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;

  v3 = type metadata accessor for LNBundleRecord(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (_QWORD *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = swift_retain();
  v8 = sub_1000C32C8(v7);
  result = swift_release();
  if (!v1)
  {
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      v24[1] = 0;
      v25 = a1;
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v10);
      v11 = *(unsigned __int8 *)(v4 + 80);
      v24[0] = v8;
      v12 = v8 + ((v11 + 32) & ~v11);
      v26 = *(_QWORD *)(v4 + 72);
      do
      {
        sub_10008C900(v12, (uint64_t)v6, type metadata accessor for LNBundleRecord);
        v14 = *v6;
        v13 = v6[1];
        v15 = (uint64_t *)((char *)v6 + *(int *)(v3 + 24));
        v17 = *v15;
        v16 = v15[1];
        v18 = objc_allocWithZone((Class)LNRegisteredBundleMetadata);
        swift_bridgeObjectRetain();
        sub_10001EBF8(v17, v16);
        v19 = sub_10008C3C8(v14, v13, v17, v16);
        sub_10001DBC8((uint64_t)v6, type metadata accessor for LNBundleRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        v21 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
        v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
        specialized ContiguousArray._endMutation()(v22);
        v12 += v26;
        --v10;
      }
      while (v10);
      v23 = v27;
      result = swift_bridgeObjectRelease(v24[0]);
      a1 = v25;
    }
    else
    {
      result = swift_bridgeObjectRelease(v8);
      v23 = _swiftEmptyArrayStorage;
    }
    *a1 = v23;
  }
  return result;
}

void _LNMetadataProviderDirect.queries()()
{
  sub_100016414();
  sub_10001E238();
  sub_100010294();
}

uint64_t sub_100089EE8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22[5];
  _QWORD __dst[22];
  _QWORD *v24;

  v2 = v1;
  v4 = qword_100128000;
  swift_retain();
  if (v4 != -1)
    swift_once(&qword_100128000, sub_1000CB0A4);
  memcpy(__dst, &unk_10012BD18, 0xA8uLL);
  v22[3] = (uint64_t)&type metadata for Table;
  v22[4] = (uint64_t)&protocol witness table for Table;
  v22[0] = swift_allocObject(&unk_10011D388, 184, 7);
  memcpy((void *)(v22[0] + 16), &unk_10012BD18, 0xA8uLL);
  sub_1000379AC(__dst);
  Connection.prepareRowIterator(_:)(v22);
  v6 = v5;
  v7 = sub_10000E87C(v22);
  if (v2)
    return swift_release();
  __chkstk_darwin(v7);
  swift_retain();
  RowIterator.compactMap<A>(_:)();
  v10 = v8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v6);
  swift_release();
  KeyPath = swift_getKeyPath(&unk_1000F1228);
  v12 = swift_getKeyPath(&unk_1000F1248);
  v13 = swift_getKeyPath(&unk_1000F1270);
  v22[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  v14 = *(_QWORD *)(v10 + 16);
  if (v14)
  {
    v24 = a1;
    swift_bridgeObjectRetain();
    v21 = v10;
    v15 = (void **)(v10 + 48);
    do
    {
      v17 = (uint64_t)*(v15 - 1);
      v16 = *v15;
      v18 = (uint64_t)*(v15 - 2);
      swift_bridgeObjectRetain();
      v19 = v16;
      sub_100081734(v22, v18, v17, (uint64_t)v19, v13, KeyPath, v12, (unint64_t *)&qword_10012A6F0, LNQueryMetadata_ptr, (void (*)(id, uint64_t, uint64_t, uint64_t))sub_100026394, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000559E8);

      swift_bridgeObjectRelease(v17);
      v15 += 3;
      --v14;
    }
    while (v14);
    swift_release();
    swift_release();
    v10 = v21;
    swift_bridgeObjectRelease(v21);
    v20 = (_QWORD *)v22[0];
    a1 = v24;
  }
  else
  {
    swift_release();
    swift_release();
    v20 = _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRelease(v10);
  result = swift_release();
  *a1 = v20;
  return result;
}

void _LNMetadataProviderDirect.queries(forBundleIdentifier:ofType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10001CD80(a1, a2, a3, a4);
  v4;
  sub_10000C020();
  v5 = sub_100017A94();
  sub_100084F40(v5, v6, v7, v8, v9, v10);
  sub_1000073F4();
}

void _LNMetadataProviderDirect.enums()()
{
  sub_100016414();
  sub_10001E238();
  sub_100010294();
}

uint64_t sub_10008A3C0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22[5];
  _QWORD __dst[22];
  _QWORD *v24;

  v2 = v1;
  v4 = qword_100127FE8;
  swift_retain();
  if (v4 != -1)
    swift_once(&qword_100127FE8, sub_1000CA9F4);
  memcpy(__dst, &unk_10012BC40, 0xA8uLL);
  v22[3] = (uint64_t)&type metadata for Table;
  v22[4] = (uint64_t)&protocol witness table for Table;
  v22[0] = swift_allocObject(&unk_10011D388, 184, 7);
  memcpy((void *)(v22[0] + 16), &unk_10012BC40, 0xA8uLL);
  sub_1000379AC(__dst);
  Connection.prepareRowIterator(_:)(v22);
  v6 = v5;
  v7 = sub_10000E87C(v22);
  if (v2)
    return swift_release();
  __chkstk_darwin(v7);
  swift_retain();
  RowIterator.compactMap<A>(_:)();
  v10 = v8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(v6);
  swift_release();
  KeyPath = swift_getKeyPath(&unk_1000F11C0);
  v12 = swift_getKeyPath(&unk_1000F11E0);
  v13 = swift_getKeyPath(&unk_1000F1208);
  v22[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  v14 = *(_QWORD *)(v10 + 16);
  if (v14)
  {
    v24 = a1;
    swift_bridgeObjectRetain();
    v21 = v10;
    v15 = (void **)(v10 + 48);
    do
    {
      v17 = (uint64_t)*(v15 - 1);
      v16 = *v15;
      v18 = (uint64_t)*(v15 - 2);
      swift_bridgeObjectRetain();
      v19 = v16;
      sub_100081734(v22, v18, v17, (uint64_t)v19, v13, KeyPath, v12, (unint64_t *)&qword_100129F40, LNEnumMetadata_ptr, (void (*)(id, uint64_t, uint64_t, uint64_t))sub_100026438, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000559F4);

      swift_bridgeObjectRelease(v17);
      v15 += 3;
      --v14;
    }
    while (v14);
    swift_release();
    swift_release();
    v10 = v21;
    swift_bridgeObjectRelease(v21);
    v20 = (_QWORD *)v22[0];
    a1 = v24;
  }
  else
  {
    swift_release();
    swift_release();
    v20 = _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRelease(v10);
  result = swift_release();
  *a1 = v20;
  return result;
}

void _LNMetadataProviderDirect.entities()()
{
  sub_100016414();
  sub_10001E238();
  sub_100010294();
}

uint64_t sub_10008A744@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20[5];
  _QWORD __dst[22];
  _QWORD *v22;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10LinkDaemon25_LNMetadataProviderDirect_connection);
  v6 = qword_100127FC8;
  swift_retain();
  if (v6 != -1)
    swift_once(&qword_100127FC8, sub_1000CA300);
  memcpy(__dst, &unk_10012BB50, 0xA8uLL);
  v20[3] = (uint64_t)&type metadata for Table;
  v20[4] = (uint64_t)&protocol witness table for Table;
  v20[0] = swift_allocObject(&unk_10011D388, 184, 7);
  memcpy((void *)(v20[0] + 16), &unk_10012BB50, 0xA8uLL);
  sub_1000379AC(__dst);
  v7 = sub_1000CA43C(v20, v5);
  sub_10000E87C(v20);
  result = swift_release();
  if (!v3)
  {
    KeyPath = swift_getKeyPath(&unk_1000F1150);
    v10 = swift_getKeyPath(&unk_1000F1178);
    v11 = swift_getKeyPath(&unk_1000F11A0);
    v20[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    v12 = *(_QWORD *)(v7 + 16);
    if (v12)
    {
      v22 = a2;
      swift_bridgeObjectRetain();
      v19 = v7;
      v13 = (void **)(v7 + 48);
      do
      {
        v15 = (uint64_t)*(v13 - 1);
        v14 = *v13;
        v16 = (uint64_t)*(v13 - 2);
        swift_bridgeObjectRetain();
        v17 = v14;
        sub_100081734(v20, v16, v15, (uint64_t)v17, v11, KeyPath, v10, (unint64_t *)&qword_100129F50, LNEntityMetadata_ptr, (void (*)(id, uint64_t, uint64_t, uint64_t))sub_100026450, (void (*)(uint64_t, uint64_t, uint64_t))sub_100055A00);

        swift_bridgeObjectRelease(v15);
        v13 += 3;
        --v12;
      }
      while (v12);
      swift_release();
      swift_release();
      v7 = v19;
      swift_bridgeObjectRelease(v19);
      v18 = (_QWORD *)v20[0];
      a2 = v22;
    }
    else
    {
      swift_release();
      swift_release();
      v18 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRelease(v7);
    result = swift_release();
    *a2 = v18;
  }
  return result;
}

id sub_10008A9BC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t *a5)
{
  id v7;

  v7 = a1;
  a4();

  sub_10001BE7C(a5);
  Dictionary._bridgeToObjectiveC()();
  sub_1000137F4();
  return sub_1000133A0(0);
}

void _LNMetadataProviderDirect.entities(forBundleIdentifier:)()
{
  sub_1000044F4();
}

void _LNMetadataProviderDirect.entityIdentifiers(forBundleIdentifier:)()
{
  sub_10008AAB4();
}

void sub_10008AAB4()
{
  void *v0;
  id v1;

  swift_bridgeObjectRetain();
  v1 = v0;
  sub_1000840C4();
  sub_100019B14();
}

id sub_10008AB0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  if (a3)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = a1;
  a5(v7, v9);

  swift_bridgeObjectRelease(v9);
  Array._bridgeToObjectiveC()();
  sub_1000137F4();
  return sub_1000133A0(0);
}

id _LNMetadataProviderDirect.metadataVersion(forBundleIdentifier:error:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v3;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = v3;
  sub_100013E10();
  v6 = sub_10001F0E8();
  return sub_1000855D0(v6, v7, v8, v9, a3);
}

void sub_10008AC78(_QWORD *a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_10001BE7C(&qword_100129FE0);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_1000C373C();
  swift_release();
  if (!v2)
  {
    v8 = type metadata accessor for LNBundleRecord(0);
    if (sub_10001C93C((uint64_t)v7, 1, v8) == 1)
    {
      sub_1000131E0((uint64_t)v7, &qword_100129FE0);
      if (a1)
      {
        v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
        v11 = v10;
        v12 = objc_allocWithZone((Class)NSError);
        v13 = sub_10008C1AC(v9, v11, 9004, 0);
        v14 = v13;
        v15 = 0;
        *a1 = v13;
      }
      else
      {
        v15 = 0;
      }
    }
    else
    {
      v15 = *(_QWORD *)&v7[*(int *)(v8 + 32)];
      sub_10001DBC8((uint64_t)v7, type metadata accessor for LNBundleRecord);
    }
    *a2 = v15;
  }
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _LNMetadataProviderDirect.appShortcutsProviderMangledTypeName(forBundleIdentifier:)(Swift::String forBundleIdentifier)
{
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  Swift::String result;

  sub_100016330();
  v6 = v2;
  sub_10001C250();
  v7 = sub_100085B88((uint64_t)v3, v3, v5, v4);
  if (!v1 && !v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
    sub_10001F1F8();
    v9 = objc_allocWithZone((Class)NSError);
    v10 = sub_10001B314(0, (uint64_t)v2, 9004);
    v7 = (id)swift_willThrow(v10);
  }
  result._object = v8;
  result._countAndFlagsBits = (uint64_t)v7;
  return result;
}

void _LNMetadataProviderDirect.examplePhrases(forBundleIdentifier:)()
{
  sub_10000A824();
}

id _LNMetadataProviderDirect.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void _LNMetadataProviderDirect.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("LinkDaemon._LNMetadataProviderDirect", 36, "init()", 6, 0);
  __break(1u);
}

_QWORD *sub_10008B064(uint64_t a1)
{
  uint64_t v1;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSString v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyDictionarySingleton;
  v30 = (id)objc_opt_self(LNSystemProtocol);
  swift_bridgeObjectRetain();
  v29 = a1;
  for (i = (uint64_t *)(a1 + 72); ; i += 6)
  {
    v5 = *(i - 2);
    v4 = *(i - 1);
    v6 = *i;
    v7 = *(i - 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000100E0();
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v30, "protocolOrNilWithIdentifier:", v8);

    if (!v9)
    {
      sub_10000C028();
      swift_bridgeObjectRelease(v5);
      v21 = v7;
      goto LABEL_14;
    }
    v31 = v5;
    v32 = v7;
    sub_1000100E0();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v11 = sub_1000316E4((uint64_t)v9);
    v13 = _swiftEmptyDictionarySingleton[2];
    v14 = (v12 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      break;
    v16 = v11;
    v17 = v12;
    sub_10001BE7C((uint64_t *)&unk_10012A780);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15))
    {
      v18 = sub_1000316E4((uint64_t)v9);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_19;
      v16 = v18;
    }
    if ((v17 & 1) != 0)
    {
      v20 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v16);
      swift_bridgeObjectRelease(v20[1]);
      *v20 = v4;
      v20[1] = v6;
    }
    else
    {
      _swiftEmptyDictionarySingleton[(v16 >> 6) + 8] |= 1 << v16;
      *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v16) = v9;
      v22 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v16);
      *v22 = v4;
      v22[1] = v6;
      v23 = _swiftEmptyDictionarySingleton[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
        goto LABEL_18;
      _swiftEmptyDictionarySingleton[2] = v25;
      v26 = v9;
    }
    sub_10000C028();
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v32);

    v21 = 0x8000000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v21);
    if (!--v1)
    {
      swift_bridgeObjectRelease(v29);
      return _swiftEmptyDictionarySingleton;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  v28 = sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

void sub_10008B294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(_QWORD, _QWORD, _QWORD))
{
  id v11;
  uint64_t v12;
  NSArray v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v11 = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100086B10((uint64_t)v11, v11, a1, a2, &v16, &v15, a3, a4);
  v12 = v15;
  if (!v16)
  {
    swift_errorRetain(v15);
    v13.super.isa = 0;
    if (v12)
      goto LABEL_3;
LABEL_5:
    v14 = 0;
    goto LABEL_6;
  }
  swift_errorRetain(v15);
  sub_10000795C(0, (unint64_t *)&unk_10012A6E0, LNAutoShortcut_ptr);
  swift_bridgeObjectRetain();
  v13.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (!v12)
    goto LABEL_5;
LABEL_3:
  v14 = (void *)_convertErrorToNSError(_:)(v12);
LABEL_6:
  ((void (**)(_QWORD, Class, void *))a6)[2](a6, v13.super.isa, v14);

  swift_errorRelease(v12);
  swift_bridgeObjectRelease();
  swift_errorRelease(v12);
  swift_bridgeObjectRelease();
  _Block_release(a6);
}

uint64_t _LNMetadataProviderDirect.autoShortcuts(forBundleIdentifier:localeIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v9 = v4;
  sub_10000C020();
  sub_100013E10();
  sub_100086B10((uint64_t)v9, v9, a1, a2, &v13, &v12, a3, a4);
  v10 = v12;
  sub_100013E10();
  swift_errorRetain(v10);
  sub_10008C990();
  sub_10001E944();
  swift_bridgeObjectRelease();
  sub_10001E944();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10008B49C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24[5];
  char v25[8];
  uint64_t v26;

  swift_retain();
  sub_1000C65EC(a2, a3, (uint64_t)v24);
  if (v5)
  {
    swift_release();
    v10 = type metadata accessor for MetadataError(0);
    sub_100025AFC((unint64_t *)&unk_10012A740, (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError, (uint64_t)&protocol conformance descriptor for MetadataError);
    v12 = swift_allocError(v10, v11, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v13, enum case for MetadataError.cacheLookupFailed(_:), v10);
    swift_errorRelease(v5);
    v14 = *a5;
    *a5 = v12;
    return swift_errorRelease(v14);
  }
  swift_release();
  sub_10008C74C(v24);
  sub_10008C7AC((uint64_t)v24, (uint64_t)v25);
  if (v26)
  {
    swift_retain();
    sub_1000365DC();
    v22 = v16;
    swift_release();
    if (!v22)
    {
      v17 = type metadata accessor for MetadataError(0);
      sub_100025AFC((unint64_t *)&unk_10012A740, (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError, (uint64_t)&protocol conformance descriptor for MetadataError);
      v19 = swift_allocError(v17, v18, 0, 0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v20, enum case for MetadataError.cacheLookupFailed(_:), v17);
      v21 = *a5;
      *a5 = v19;
      return swift_errorRelease(v21);
    }
    v23 = sub_1000561AC(1000, v22);
    swift_bridgeObjectRelease();
    *a4 = v23;
  }
  else
  {
    *a4 = _swiftEmptyArrayStorage;
  }
  return swift_bridgeObjectRelease();
}

void sub_10008B764(uint64_t a1, uint64_t a2, void *a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  id v7;
  uint64_t v8;
  NSDictionary v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v7 = a3;
  swift_bridgeObjectRetain();
  sub_100087140((uint64_t)v7, v7, a1, a2, &v11, &v12);
  v8 = v11;
  if (!v12)
  {
    swift_errorRetain(v11);
    v9.super.isa = 0;
    if (v8)
      goto LABEL_3;
LABEL_5:
    v10 = 0;
    goto LABEL_6;
  }
  swift_errorRetain(v11);
  swift_bridgeObjectRetain();
  sub_10001BE7C(&qword_10012AF50);
  v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!v8)
    goto LABEL_5;
LABEL_3:
  v10 = (void *)_convertErrorToNSError(_:)(v8);
LABEL_6:
  ((void (**)(_QWORD, Class, void *))a4)[2](a4, v9.super.isa, v10);

  swift_errorRelease(v8);
  swift_bridgeObjectRelease();
  swift_errorRelease(v8);
  swift_bridgeObjectRelease();
  _Block_release(a4);
}

uint64_t _LNMetadataProviderDirect.autoShortcuts(forLocaleIdentifier:completion:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;

  v1 = v0;
  sub_100013E10();
  v2 = sub_10001F0E8();
  sub_100087140(v2, v3, v4, v5, v6, v7);
  sub_100013E10();
  swift_errorRetain(0);
  sub_10008C990();
  sub_10001E944();
  swift_bridgeObjectRelease();
  sub_10001E944();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10008B930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  swift_retain();
  sub_100036BB4();
  if (v5)
  {
    swift_errorRelease(v5);
    swift_release();
LABEL_3:
    v9 = type metadata accessor for MetadataError(0);
    sub_100025AFC((unint64_t *)&unk_10012A740, (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError, (uint64_t)&protocol conformance descriptor for MetadataError);
    v11 = swift_allocError(v9, v10, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v12, enum case for MetadataError.cacheLookupFailed(_:), v9);
    v13 = *a4;
    *a4 = v11;
    return swift_errorRelease(v13);
  }
  v15 = v8;
  swift_release();
  if (!v15)
    goto LABEL_3;
  v16 = sub_10008C54C(v15);
  swift_bridgeObjectRelease();
  *a5 = v16;
  return swift_bridgeObjectRelease();
}

void _LNMetadataProviderDirect.autoShortcuts(forLocaleIdentifier:)()
{
  sub_10000A824();
}

void _LNMetadataProviderDirect.properties(forIdentifiers:)()
{
  sub_100016708();
  sub_10001C250();
  sub_10001F5DC();
}

uint64_t sub_10008BC00@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  id v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  Swift::Int v38;
  unint64_t v39;
  char v40;
  Swift::Bool v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(unint64_t, char *, uint64_t);
  char *v54;
  id v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v2 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v2 - 8);
  v59 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LNAppShortcutParameterRecord(0);
  __chkstk_darwin(v5);
  v7 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001BE7C(&qword_100128E68);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)v48 - v13;
  swift_retain();
  v15 = (uint64_t)v57;
  sub_1000550E0();
  if (v15)
  {
    swift_errorRelease(v15);
    swift_release();
    v17 = type metadata accessor for MetadataError(0);
    sub_100025AFC((unint64_t *)&unk_10012A740, (uint64_t (*)(uint64_t))&type metadata accessor for MetadataError, (uint64_t)&protocol conformance descriptor for MetadataError);
    swift_allocError(v17, v18, 0, 0);
    v20 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, enum case for MetadataError.cacheLookupFailed(_:), v17);
    return swift_willThrow(v20);
  }
  v22 = v16;
  v57 = v14;
  v51 = v11;
  v52 = v7;
  v48[2] = 0;
  v49 = a1;
  v50 = v5;
  v54 = v4;
  swift_release();
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
    v25 = _swiftEmptyDictionarySingleton;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v49 = v25;
    return result;
  }
  v24 = v22 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v56 = *(_QWORD *)(v9 + 72);
  v48[1] = v22;
  swift_bridgeObjectRetain();
  v25 = _swiftEmptyDictionarySingleton;
  v26 = (uint64_t)v54;
  v27 = v50;
  v28 = (uint64_t)v51;
  v29 = (uint64_t)v52;
  v30 = (uint64_t)v57;
  while (1)
  {
    sub_10008C95C(v24, v30, &qword_100128E68);
    sub_10008C95C(v30, v28, &qword_100128E68);
    if (sub_10001C93C(v28, 1, v27) == 1)
    {
      sub_1000131E0(v28, &qword_100128E68);
      goto LABEL_16;
    }
    sub_10008C928(v28, v29, type metadata accessor for LNAppShortcutParameterRecord);
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
    v31(v26, v29, v59);
    v32 = *(id *)(v29 + *(int *)(v27 + 36));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    v60 = v25;
    v34 = sub_10003162C(v26);
    v36 = v25[2];
    v37 = (v35 & 1) == 0;
    v38 = v36 + v37;
    if (__OFADD__(v36, v37))
      break;
    v39 = v34;
    v40 = v35;
    v55 = v32;
    v53 = (void (*)(unint64_t, char *, uint64_t))v31;
    sub_10001BE7C(&qword_10012AF30);
    v41 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38);
    v28 = (uint64_t)v51;
    v29 = (uint64_t)v52;
    if (v41)
    {
      v42 = sub_10003162C((uint64_t)v54);
      if ((v40 & 1) != (v43 & 1))
        goto LABEL_23;
      v39 = v42;
    }
    v25 = v60;
    if ((v40 & 1) != 0)
    {
      v44 = v60[7];

      *(_QWORD *)(v44 + 8 * v39) = v55;
      v26 = (uint64_t)v54;
    }
    else
    {
      v60[(v39 >> 6) + 8] |= 1 << v39;
      v26 = (uint64_t)v54;
      v53(v25[6] + *(_QWORD *)(v58 + 72) * v39, v54, v59);
      *(_QWORD *)(v25[7] + 8 * v39) = v55;
      v45 = v25[2];
      v46 = __OFADD__(v45, 1);
      v47 = v45 + 1;
      if (v46)
        goto LABEL_22;
      v25[2] = v47;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v26, v59);
    sub_10001DBC8(v29, type metadata accessor for LNAppShortcutParameterRecord);
    v27 = v50;
LABEL_16:
    v30 = (uint64_t)v57;
    sub_1000131E0((uint64_t)v57, &qword_100128E68);
    v24 += v56;
    if (!--v23)
    {
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v59);
  __break(1u);
  return result;
}

void sub_10008C158(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

id sub_10008C1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  NSString v8;
  NSDictionary v9;
  id v10;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v9.super.isa = 0;
  }
  v10 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v8, a3, v9.super.isa);

  return v10;
}

uint64_t sub_10008C258()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C284(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000820CC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10008C28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10008C2EC()
{
  type metadata accessor for URL(0);
  URL.stopAccessingSecurityScopedResource()();
}

id sub_10008C324(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v4;
  NSString v8;
  Class isa;
  id v10;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  sub_10000795C(0, (unint64_t *)&unk_10012A730, RBSAttribute_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  v10 = objc_msgSend(v4, "initWithExplanation:target:attributes:", v8, a3, isa);

  return v10;
}

id sub_10008C3C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v4;
  NSString v8;
  Class isa;
  id v10;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v4, "initWithBundleIdentifier:installIdentifier:", v8, isa);
  sub_10001EA88(a3, a4);

  return v10;
}

id sub_10008C450(uint64_t a1, uint64_t a2)
{
  void *v2;
  Class isa;
  Class v6;
  id v7;

  sub_10000795C(0, &qword_10012A710, LNActionMetadata_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
  sub_10004FE50();
  v6 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  v7 = objc_msgSend(v2, "initWithActions:systemProtocolDefaults:", isa, v6);

  return v7;
}

uint64_t type metadata accessor for _LNMetadataProviderDirect()
{
  return objc_opt_self(_TtC10LinkDaemon25_LNMetadataProviderDirect);
}

uint64_t sub_10008C54C(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  sub_10001BE7C((uint64_t *)&unk_10012A750);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v28 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v26 = v6;
  v27 = (unint64_t)(v8 + 63) >> 6;
  v11 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * i);
    sub_10000C030();
    sub_10000C020();
    v21 = sub_1000561AC(1000, v20);
    result = sub_1000059B0();
    *(_QWORD *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v22 = (_QWORD *)(v3[6] + 16 * i);
    *v22 = v18;
    v22[1] = v19;
    *(_QWORD *)(v3[7] + 8 * i) = v21;
    v23 = v3[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v25;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v14 >= v27)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v26 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v27)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v26 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v27)
          return (uint64_t)v3;
        v15 = *(_QWORD *)(v26 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v27)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v26 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v27)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v26 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t *sub_10008C74C(uint64_t *a1)
{
  sub_10008C77C(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t sub_10008C77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_10008C7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C((uint64_t *)&unk_10012A010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008C7F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

const char *sub_10008C87C()
{
  return "identifier";
}

void sub_10008C888(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10008C158(a1, a2);
}

uint64_t sub_10008C89C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000CAA84(a1, a2, v2);
}

uint64_t sub_10008C8A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000CAC44(*(uint64_t (**)(void))(v1 + 16), a1);
}

void sub_10008C8BC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10008C158(a1, a2);
}

uint64_t sub_10008C8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000CB1E4(a1, a2, v2);
}

void sub_10008C8D8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10008C158(a1, a2);
}

void sub_10008C8EC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10008C158(a1, a2);
}

void sub_10008C900(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_10001B6C0(a1, a2, a3);
  sub_10001DD88(v3);
  sub_10000BFBC();
}

uint64_t sub_10008C920(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_100089684(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_10008C928(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_10001B6C0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_10000BFBC();
}

void sub_10008C95C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10001BE7C(a3);
  sub_10001DD88(v3);
  sub_10000BFBC();
}

uint64_t sub_10008C990()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_10008C9A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v1 + a1));
}

uint64_t sub_10008C9AC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 - 256));
}

void sub_10008C9B4()
{
  void *v0;

}

void sub_10008C9BC()
{
  void *v0;

}

uint64_t sub_10008C9C8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10008C9D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10008C9E8, v0, 0);
}

uint64_t sub_10008C9E8()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  swift_retain();
  v1 = (char *)sub_100005E98();
  *(_QWORD *)(v0 + 24) = v1;
  swift_release();
  v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  *(_QWORD *)(v0 + 32) = v2;
  if (v2)
  {
    v3 = async function pointer to Task<>.value.getter[1];
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc(v3);
    *(_QWORD *)(v0 + 40) = v4;
    *v4 = v0;
    v4[1] = sub_10008CAD4;
    return Task<>.value.getter();
  }
  else
  {

    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_10008CAD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_release();
  return swift_task_switch(sub_10008CB28, v1, 0);
}

uint64_t sub_10008CB28()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t type metadata accessor for UpdateRegistryService()
{
  return objc_opt_self(_TtC10LinkDaemon21UpdateRegistryService);
}

unint64_t sub_10008CB80()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_10008CB9C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10012A844);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10008CBE4;
  return sub_10008C9D0();
}

uint64_t sub_10008CBE4(char a1)
{
  uint64_t v1;
  uint64_t (**v2)(void);

  sub_100017C10(*((_QWORD *)*v2 + 2));
  if (v1)
    return v2[1]();
  else
    return ((uint64_t (*)(_QWORD))v2[1])(a1 & 1);
}

_QWORD *sub_10008CC40(unint64_t a1, unint64_t a2)
{
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  Swift::Int v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  NSString v20;
  id v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  _BOOL8 v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *result;
  _QWORD *v43;
  Swift::Int v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_28;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      sub_10001573C();
      if (v4 < 0)
        break;
      v43 = (_QWORD *)a2;
      v5 = 0;
      v6 = _swiftEmptyArrayStorage;
      v45 = v4;
      v46 = v3 & 0xC000000000000001;
      v44 = v3;
      while (v4 != v5)
      {
        v7 = v3;
        if (v46)
          v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
        else
          v8 = *(id *)(v3 + 8 * v5 + 32);
        v9 = v8;
        v10 = objc_msgSend(v8, "key");
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;

        v14 = *(_QWORD *)a2;
        if (*(_QWORD *)(*(_QWORD *)a2 + 16) && (v15 = sub_100016064(v11), (v16 & 1) != 0))
        {
          v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
          v49 = *v17;
          v18 = v9;
          v19 = v17[1];
          swift_bridgeObjectRetain();

          swift_bridgeObjectRelease();
          v3 = v7;
          v4 = v45;
        }
        else
        {
          v48 = v6;
          v20 = String._bridgeToObjectiveC()();
          v47 = v9;
          v21 = objc_msgSend(v9, "localizedStringForLocaleIdentifier:", v20);

          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          v19 = v22;

          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)a2);
          v24 = *(_QWORD *)a2;
          v50 = *(_QWORD **)a2;
          *(_QWORD *)a2 = 0x8000000000000000;
          v25 = v11;
          v26 = sub_100016064(v11);
          v28 = *(_QWORD *)(v24 + 16);
          v29 = (v27 & 1) == 0;
          v3 = v28 + v29;
          if (__OFADD__(v28, v29))
            goto LABEL_26;
          a2 = v26;
          v30 = v27;
          sub_10001BE7C(&qword_100128220);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v3))
          {
            v31 = sub_100016064(v25);
            if ((v30 & 1) != (v32 & 1))
              goto LABEL_35;
            a2 = v31;
          }
          if ((v30 & 1) != 0)
          {
            v33 = (uint64_t *)(v50[7] + 16 * a2);
            swift_bridgeObjectRelease();
            *v33 = v49;
            v33[1] = v19;
          }
          else
          {
            v50[(a2 >> 6) + 8] |= 1 << a2;
            v34 = (uint64_t *)(v50[6] + 16 * a2);
            *v34 = v25;
            v34[1] = v13;
            v35 = (uint64_t *)(v50[7] + 16 * a2);
            *v35 = v49;
            v35[1] = v19;
            v36 = v50[2];
            v37 = __OFADD__(v36, 1);
            v38 = v36 + 1;
            if (v37)
              goto LABEL_27;
            v50[2] = v38;
            swift_bridgeObjectRetain();
          }
          a2 = (unint64_t)v43;
          *v43 = v50;

          swift_bridgeObjectRelease_n(v13, 2);
          swift_bridgeObjectRelease();
          v3 = v44;
          v4 = v45;
          v6 = v48;
        }
        v39 = v6[2];
        if (v39 >= v6[3] >> 1)
          sub_10001573C();
        ++v5;
        v6[2] = v39 + 1;
        v40 = &v6[2 * v39];
        v40[4] = v49;
        v40[5] = v19;
        if (v4 == v5)
        {
          swift_bridgeObjectRelease();
          return v6;
        }
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      if (v3 < 0)
        v41 = v3;
      else
        v41 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter(v41);
      swift_bridgeObjectRelease();
      if (!v4)
        goto LABEL_32;
    }
    __break(1u);
LABEL_35:
    result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
  }
  else
  {
LABEL_32:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10008CFF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_10001BE7C(&qword_100128A80);
    v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  }
  else
  {
    v4 = _swiftEmptyDictionarySingleton;
  }
  v7 = v4;
  sub_10008E5E0(a1, 1, &v7);
  v5 = v7;
  if (v1)
    swift_release();
  return v5;
}

void sub_10008D07C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char **v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char **v26;
  unint64_t v27;
  id v28;
  BOOL v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  _QWORD *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  void *v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  id v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  void *v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;

  v177 = a4;
  v178 = a8;
  v172 = a7;
  v176 = a3;
  v8 = a2;
  v167 = a1;
  v196 = _swiftEmptyArrayStorage;
  if (a2 >> 62)
    goto LABEL_123;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (2)
  {
    v10 = _swiftEmptyArrayStorage;
    v11 = &off_100126000;
    if (v9)
    {
      v194 = _swiftEmptyArrayStorage;
      sub_1000526A0(0, v9 & ~(v9 >> 63), 0);
      if (v9 < 0)
      {
        __break(1u);
        return;
      }
      v12 = 0;
      v10 = v194;
      do
      {
        if ((v8 & 0xC000000000000001) != 0)
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v8);
        else
          v13 = *(id *)(v8 + 8 * v12 + 32);
        v14 = v13;
        v15 = objc_msgSend(v13, v11[390]);
        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        v194 = v10;
        v20 = v10[2];
        v19 = v10[3];
        if (v20 >= v19 >> 1)
        {
          v22 = sub_10000C0D8(v19);
          sub_1000526A0(v22, v20 + 1, 1);
          v10 = v194;
        }
        ++v12;
        v10[2] = v20 + 1;
        v21 = &v10[3 * v20];
        v21[4] = v16;
        v21[5] = v18;
        v21[6] = v14;
        v11 = &off_100126000;
      }
      while (v9 != v12);
    }
    v23 = sub_10008CFF0((uint64_t)v10);
    v162 = 0;
    if ((unint64_t)v167 >> 62)
    {
      if (v167 < 0)
        v8 = v167;
      else
        v8 = v167 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v24 = sub_10000737C();
      if (v24)
      {
LABEL_14:
        v25 = 0;
        v169 = v167 & 0xC000000000000001;
        v164 = v167 & 0xFFFFFFFFFFFFFF8;
        v163 = v167 + 32;
        v166 = v172 + 80;
        v165 = (void *)LNValueTypeSpecificMetadataKeyLinkEnumerationSupportedValues;
        v175 = (void *)LNValueTypeSpecificMetadataKeyBoolTrueDisplayName;
        v174 = (void *)LNValueTypeSpecificMetadataKeyBoolFalseDisplayName;
        v173 = (char *)&type metadata for Any + 8;
        v26 = &off_100126000;
        v179 = _swiftEmptyArrayStorage;
        v180 = (uint64_t)v23;
        v168 = v24;
        while (1)
        {
          if (v169)
          {
            v27 = v25;
            v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v167);
          }
          else
          {
            if (v25 >= *(_QWORD *)(v164 + 16))
              goto LABEL_121;
            v27 = v25;
            v28 = *(id *)(v163 + 8 * v25);
          }
          v181 = v28;
          v29 = __OFADD__(v27, 1);
          v8 = v27 + 1;
          if (v29)
          {
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }
          v171 = v8;
          v30 = objc_msgSend(v28, "parameters");
          sub_10000795C(0, &qword_1001286C8, LNActionParameterMetadata_ptr);
          v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30);

          if (!(v31 >> 62))
          {
            v8 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v8)
              break;
            goto LABEL_116;
          }
          swift_bridgeObjectRetain();
          v8 = sub_10000737C();
          sub_1000059A8();
          if (v8)
            break;
LABEL_116:

          sub_1000059A8();
          v25 = v171;
          if (v171 == v168)
            goto LABEL_131;
        }
        v32 = 0;
        v186 = v31 & 0xC000000000000001;
        v182 = v31 + 32;
        v183 = v31 & 0xFFFFFFFFFFFFFF8;
        v185 = v31;
        v184 = v8;
        while (1)
        {
          if (v186)
          {
            v33 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v31);
          }
          else
          {
            if (v32 >= *(_QWORD *)(v183 + 16))
              goto LABEL_119;
            v33 = *(id *)(v182 + 8 * v32);
          }
          v34 = v33;
          v29 = __OFADD__(v32, 1);
          v35 = v32 + 1;
          if (v29)
          {
            __break(1u);
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }
          v36 = sub_100004ED8(v33);
          v191 = v35;
          if (v37)
            break;
          v44 = v34;
LABEL_87:

          v32 = v191;
          if (v191 == v8)
            goto LABEL_116;
        }
        v38 = v36;
        v39 = v37;
        v8 = (uint64_t)sub_1000158F8(v36, "valueType");
        v40 = objc_opt_self(LNLinkEnumerationValueType);
        v41 = (void *)sub_10001A0AC(v40);
        v192 = v34;
        if (v41)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(objc_msgSend(v41, v26[509]));
          sub_10001641C();
          if (v23[2])
          {
            v42 = sub_100016064(v31);
            if ((v43 & 1) != 0)
            {
              v44 = *(id *)(v23[7] + 8 * v42);
              sub_1000100D0();
              v45 = sub_1000058B4();
              v46 = sub_10001771C(v45, v11[390]);
              v47 = sub_1000186F8((uint64_t)v46);
              v49 = v48;

              v50 = v179[2];
              if (v50)
              {
                v51 = v179[4];
                v52 = v179[5];
                if (v51 == v47 && v52 == v49)
                {
                  sub_100007398();
                  v23 = (_QWORD *)v180;
LABEL_82:
                  v26 = &off_100126000;
                  goto LABEL_83;
                }
                v26 = &off_100126000;
                if ((sub_10001C800(v51, v52) & 1) != 0)
                {
LABEL_38:
                  swift_bridgeObjectRelease();
                  v23 = (_QWORD *)v180;
LABEL_83:
                  sub_1000059A8();

                  sub_1000059B0();
                  goto LABEL_86;
                }
                v139 = (uint64_t)v179;
                if (v50 != 1)
                {
                  v140 = v179[6];
                  v141 = v179[7];
                  v142 = v140 == v47 && v141 == v49;
                  if (v142 || (sub_10001C800(v140, v141) & 1) != 0)
                    goto LABEL_38;
                  v139 = (uint64_t)v179;
                  if (v50 != 2)
                  {
                    v143 = v179 + 9;
                    v144 = 2;
                    while (1)
                    {
                      v145 = v144 + 1;
                      if (__OFADD__(v144, 1))
                        break;
                      v146 = *(v143 - 1);
                      v147 = *v143;
                      v148 = v146 == v47 && v147 == v49;
                      if (v148 || (sub_10001C800(v146, v147) & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        v11 = &off_100126000;
                        v23 = (_QWORD *)v180;
                        goto LABEL_82;
                      }
                      v143 += 2;
                      ++v144;
                      if (v145 == v50)
                      {
                        sub_100017AB4((uint64_t)v179);
                        v11 = &off_100126000;
                        goto LABEL_74;
                      }
                    }
LABEL_122:
                    __break(1u);
LABEL_123:
                    if (v8 < 0)
                      v158 = v8;
                    else
                      v158 = v8 & 0xFFFFFFFFFFFFFF8;
                    sub_10000EC68();
                    v9 = _CocoaArrayWrapper.endIndex.getter(v158);
                    sub_1000117B4();
                    continue;
                  }
                }
                sub_100017AB4(v139);
              }
              else
              {
                v47 = (uint64_t)v179;
                swift_bridgeObjectRelease();
LABEL_74:
                v26 = &off_100126000;
              }
              v108 = sub_1000059A8();
              v109 = sub_10001771C(v108, v11[390]);
              static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
              sub_10001641C();
              if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) != 0)
              {
                v110 = v179;
              }
              else
              {
                sub_1000073A0();
                sub_10001B71C();
                v110 = v156;
              }
              v112 = v110[2];
              v111 = v110[3];
              if (v112 >= v111 >> 1)
              {
                sub_10000C0D8(v111);
                sub_10001B71C();
                v110 = v157;
              }
              v110[2] = v112 + 1;
              v179 = v110;
              v113 = &v110[2 * v112];
              v113[4] = v49;
              v113[5] = v50;
              if (objc_msgSend(v192, "dynamicOptionsSupport"))
              {

                sub_1000059B0();
LABEL_72:
                v23 = (_QWORD *)v180;
                goto LABEL_86;
              }
              v114 = sub_10001771C(0, "cases");
              sub_10000795C(0, &qword_100129868, LNEnumCaseMetadata_ptr);
              v190 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v114);

              v115 = objc_msgSend(v192, "typeSpecificMetadata");
              type metadata accessor for LNValueTypeSpecificMetadataKey(0);
              v117 = v116;
              v118 = sub_100055AC0();
              v119 = (char *)&type metadata for Any + 8;
              v120 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v115, v117, (char *)&type metadata for Any + 8, v118);

              v121 = v165;
              sub_10002D9CC(v121, v120);

              sub_10000C028();
              if (v195)
              {
                v122 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
                v123 = swift_dynamicCast(&v193, &v194, (char *)&type metadata for Any + 8, v122, 6);
                if ((v123 & 1) != 0)
                {
                  v119 = (char *)v162;
                  v190 = sub_100053D3C((unint64_t)v190, v193);
                  v138 = sub_10001B13C((int)v190, v131, v132, v133, v134, v135, v136, v137, v159, v160, v161, v162, v163, v164, (uint64_t)v165, v166, v167, v168, v169,
                           v170,
                           v171,
                           v172,
                           (uint64_t)v173,
                           (uint64_t)v174,
                           (uint64_t)v175,
                           v176,
                           v177,
                           (uint64_t)v178,
                           (uint64_t)v179,
                           v180,
                           v181);
LABEL_111:
                  v188 = sub_1000186F8((uint64_t)v138);
                  v150 = v149;

                  v152 = sub_10001771C(v151, v11[390]);
                  v153 = sub_1000186F8((uint64_t)v152);
                  v155 = v154;

                  sub_10008DC60(v188, v150, v153, v155, v38, v39, (unint64_t)v190, v176, v177, (unint64_t)v178);
                  sub_10000C028();
                  sub_1000101FC();
                  sub_1000059A8();
                  sub_1000059B0();
                  sub_100059078();

                  v44 = (_QWORD *)v8;
                  goto LABEL_72;
                }
              }
              else
              {
                v123 = sub_10001E028();
              }
              v138 = sub_10001B13C(v123, v124, v125, v126, v127, v128, v129, v130, v159, v160, v161, v162, v163, v164, (uint64_t)v165, v166, v167, v168, v169,
                       v170,
                       v171,
                       v172,
                       (uint64_t)v173,
                       (uint64_t)v174,
                       (uint64_t)v175,
                       v176,
                       v177,
                       (uint64_t)v178,
                       (uint64_t)v179,
                       v180,
                       v181);
              goto LABEL_111;
            }
          }

          v54 = sub_1000100D0();
        }
        else
        {

        }
        v55 = sub_1000158F8(v54, "valueType");
        v56 = sub_1000185F8();
        v57 = sub_10001A0AC(v56);
        if (v57)
        {
          v58 = v57;
          sub_10000795C(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
          v59 = objc_msgSend((id)sub_1000185F8(), "BOOLValueType");
          LOBYTE(v58) = static NSObject.== infix(_:_:)(v58, v59);

          if ((v58 & 1) != 0)
          {
            v60 = objc_msgSend(v34, "typeSpecificMetadata");
            type metadata accessor for LNValueTypeSpecificMetadataKey(0);
            v62 = v61;
            v63 = sub_100055AC0();
            v64 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v60, v62, v173, v63);

            sub_100019B20((uint64_t)v175);
            if (v195)
            {
              v65 = sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
              if (sub_10001D9B0(v65, (uint64_t)&type metadata for Any))
                v44 = v193;
              else
                v44 = 0;
            }
            else
            {
              sub_10001E028();
              v44 = 0;
            }
            sub_100019B20((uint64_t)v174);

            sub_1000059A8();
            if (v195)
            {
              v94 = sub_10000795C(0, (unint64_t *)&qword_100128E50, LNStaticDeferredLocalizedString_ptr);
              v95 = sub_10001D9B0(v94, (uint64_t)&type metadata for Any);
              if (v95)
                v103 = v193;
              else
                v103 = 0;
            }
            else
            {
              v95 = sub_10001E028();
              v103 = 0;
            }
            v104 = objc_retainAutoreleasedReturnValue(sub_10001B13C(v95, v96, v97, v98, v99, v100, v101, v102, v159, v160, v161, v162, v163, v164, (uint64_t)v165, v166, v167, v168,
                       v169,
                       v170,
                       v171,
                       v172,
                       (uint64_t)v173,
                       (uint64_t)v174,
                       (uint64_t)v175,
                       v176,
                       v177,
                       (uint64_t)v178,
                       (uint64_t)v179,
                       v180,
                       v181));
            v105 = sub_10000EB00((uint64_t)v104);
            v107 = v106;

            sub_10008E0D0(v105, v107, v38, v39, v44, v103, v176, v177, v178);
            sub_10000C028();
            sub_1000059B0();
            sub_100059078();

            goto LABEL_72;
          }

          v66 = sub_1000059B0();
        }
        else
        {
          sub_1000059B0();

        }
        v44 = sub_1000158F8(v66, "valueType");
        v67 = sub_1000185F8();
        if (swift_dynamicCastObjCClass(v44, v67))
        {
          v189 = sub_100004ED8(v34);
          if (v68)
          {
            v69 = v68;
            v70 = v44;
            v71 = sub_100080878();

            if ((v71 & 1) != 0)
            {
              v80 = objc_retainAutoreleasedReturnValue(sub_10001B13C(v72, v73, v74, v75, v76, v77, v78, v79, v159, v160, v161, v162, v163, v164, (uint64_t)v165, v166, v167, v168,
                        v169,
                        v170,
                        v171,
                        v172,
                        (uint64_t)v173,
                        (uint64_t)v174,
                        (uint64_t)v175,
                        v176,
                        v177,
                        (uint64_t)v178,
                        (uint64_t)v179,
                        v180,
                        v181));
              v187 = sub_1000186F8((uint64_t)v80);
              v82 = v81;

              v83 = *(_QWORD *)(v172 + 16);
              if (v83)
              {
                v170 = (uint64_t)v70;
                swift_bridgeObjectRetain();
                v84 = (uint64_t *)v166;
                v85 = _swiftEmptyArrayStorage;
                do
                {
                  v87 = *(v84 - 2);
                  v86 = *(v84 - 1);
                  v88 = *v84;
                  swift_bridgeObjectRetain();
                  sub_10000EC68();
                  sub_10000BFF4();
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
                  {
                    sub_1000073A0();
                    sub_10002FD7C();
                    v85 = v92;
                  }
                  v90 = v85[2];
                  v89 = v85[3];
                  if (v90 >= v89 >> 1)
                  {
                    sub_10000C0D8(v89);
                    sub_10002FD7C();
                    v85 = v93;
                  }
                  v85[2] = v90 + 1;
                  v91 = &v85[8 * v90];
                  v91[4] = v187;
                  v91[5] = v82;
                  v91[6] = v189;
                  v91[7] = v69;
                  v91[8] = v87;
                  v91[9] = v86;
                  v91[10] = v88;
                  v84 += 8;
                  *((_WORD *)v91 + 44) = 0;
                  --v83;
                  v44 = v34;
                }
                while (v83);
                sub_1000059A8();
                sub_1000117B4();
                v26 = &off_100126000;
                v70 = (_QWORD *)v170;
              }
              else
              {
                sub_1000059A8();
                v44 = v34;
              }
              sub_1000117B4();
              sub_100059078();

              v11 = &off_100126000;
              v23 = (_QWORD *)v180;
              goto LABEL_86;
            }

            sub_1000117B4();
          }
          else
          {

          }
          v44 = v34;
        }
        else
        {

        }
LABEL_86:
        v31 = v185;
        v8 = v184;
        goto LABEL_87;
      }
    }
    else
    {
      v8 = *(_QWORD *)((v167 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v24 = v8;
      if (v8)
        goto LABEL_14;
    }
    break;
  }
LABEL_131:
  swift_bridgeObjectRelease();
  sub_10000C028();
  swift_bridgeObjectRelease();
}

_QWORD *sub_10008DC60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  id v15;
  void *v16;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  uint64_t inited;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  Swift::String v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  char v84[48];

  v10 = a7;
  if (a7 >> 62)
    goto LABEL_49;
  v11 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_10000BFF4();
  for (; v11; v11 = sub_10000737C())
  {
    v12 = 0;
    v13 = v10 & 0xC000000000000001;
    v71 = v10 + 32;
    v72 = v10 & 0xFFFFFFFFFFFFFF8;
    v14 = _swiftEmptyArrayStorage;
    v81 = _swiftEmptyArrayStorage;
    v73 = v10 & 0xC000000000000001;
    v74 = v11;
    while (1)
    {
      if (v13)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
      }
      else
      {
        if (v12 >= *(_QWORD *)(v72 + 16))
          goto LABEL_47;
        v15 = *(id *)(v71 + 8 * v12);
      }
      v16 = v15;
      if (__OFADD__(v12++, 1))
      {
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      swift_bridgeObjectRetain();
      v19 = sub_10001771C(v18, "identifier");
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      v23 = v14[2];
      if (v23)
      {
        v24 = v14[4];
        v25 = v14[5];
        v26 = v24 == v20 && v25 == v22;
        if (v26 || (sub_10001C800(v24, v25) & 1) != 0)
        {
LABEL_31:
          sub_10000E038();
LABEL_32:
          sub_1000059A8();
          goto LABEL_33;
        }
        if (v23 != 1)
        {
          v58 = v14[6];
          v59 = v14[7];
          v60 = v58 == v20 && v59 == v22;
          if (v60 || (sub_10001C800(v58, v59) & 1) != 0)
            goto LABEL_31;
          if (v23 != 2)
            break;
        }
      }
      sub_10000E038();
LABEL_17:
      v27 = sub_1000059A8();
      v28 = sub_10001771C(v27, "identifier");
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000073A0();
        sub_10001B71C();
        v14 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v34 = v14[2];
      v33 = v14[3];
      if (v34 >= v33 >> 1)
      {
        sub_10000C0D8(v33);
        sub_10001B71C();
        v14 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v14[2] = v34 + 1;
      v35 = &v14[2 * v34];
      v35[4] = v29;
      v35[5] = v31;
      v36 = sub_10001771C(isUniquelyReferenced_nonNull_native, "displayRepresentation");
      sub_100055A50(v36);
      v37 = sub_10001BE7C(&qword_100128750);
      inited = swift_initStackObject(v37, v84);
      *(_OWORD *)(inited + 16) = xmmword_1000EFAF0;
      v39 = sub_10001771C(inited, "displayRepresentation");
      v40 = objc_msgSend(v39, "title");

      *(_QWORD *)(inited + 32) = v40;
      v82 = inited;
      specialized Array._endMutation()(v41);
      sub_10005910C();
      v42 = v82;
      sub_10000EC68();
      v43 = sub_10008CC40(v42, a10);
      sub_1000059A8();
      v82 = a3;
      v83 = a4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10000EC68();
      v44._countAndFlagsBits = 46;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      v46 = sub_10001771C(v45, "identifier");
      v47 = sub_10000EB00((uint64_t)v46);
      v49 = v48;

      v50._countAndFlagsBits = v47;
      v50._object = v49;
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51 = v82;
      v52 = v83;
      v53 = v81;
      if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
      {
        sub_1000073A0();
        sub_10002FD7C();
        v53 = v66;
      }
      v54 = v53;
      v55 = v53[2];
      v81 = v54;
      v56 = v54[3];
      if (v55 >= v56 >> 1)
      {
        sub_10000C0D8(v56);
        sub_10002FD7C();
        v81 = v67;
      }
      v81[2] = v55 + 1;
      v57 = &v81[8 * v55];
      v11 = v74;
      v57[4] = a1;
      v57[5] = a2;
      v57[6] = a5;
      v57[7] = a6;
      v57[8] = v51;
      v57[9] = v52;
      v57[10] = v43;
      *((_WORD *)v57 + 44) = 0;
      v13 = v73;
LABEL_33:

      if (v12 == v11)
      {
        sub_1000101FC();
        v68 = v81;
        goto LABEL_51;
      }
    }
    v70 = v10;
    v61 = v14 + 9;
    v10 = 2;
    while (1)
    {
      v62 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      v63 = *(v61 - 1);
      v64 = *v61;
      v65 = v63 == v20 && v64 == v22;
      if (v65 || (sub_10001C800(v63, v64) & 1) != 0)
      {
        sub_10000E038();
        v10 = v70;
        v13 = v73;
        v11 = v74;
        goto LABEL_32;
      }
      v61 += 2;
      ++v10;
      if (v62 == v23)
      {
        sub_10000E038();
        v10 = v70;
        goto LABEL_17;
      }
    }
LABEL_48:
    __break(1u);
LABEL_49:
    sub_10000BFF4();
  }
  sub_1000101FC();
  v68 = _swiftEmptyArrayStorage;
LABEL_51:
  sub_10000E038();
  return v68;
}

uint64_t sub_10008E0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  NSString v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v61;
  id v62;

  v13 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v13);
  type metadata accessor for URL(0);
  sub_100017EA8();
  v14 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  v15 = sub_10001C0A0(0x64656C62616E65, 0xE700000000000000, 0x64656C62616E65, 0xE700000000000000);
  sub_100017EA8();
  v16 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  v17 = sub_10001C0A0(0x64656C6261736964, 0xE800000000000000, 0x64656C6261736964, 0xE800000000000000);
  if (a5)
    v18 = a5;
  else
    v18 = v15;
  v62 = a6;
  if (!a6)
    v62 = v17;
  v57 = v17;
  v58 = v15;
  v19 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v61 = sub_1000100C8(v19, 48);
  *(_OWORD *)(v61 + 16) = xmmword_1000EFAE0;
  v20 = a5;
  v21 = a6;
  sub_10000BFF4();
  v22 = sub_10000C020();
  v23 = sub_1000158F8(v22, "key");
  sub_10000EB00((uint64_t)v23);

  v24 = *a9;
  v55 = v18;
  if (*(_QWORD *)(*a9 + 16) && (v25 = sub_10001CD9C(), (v26 & 1) != 0))
  {
    v27 = (_QWORD *)(*(_QWORD *)(v24 + 56) + 16 * v25);
    v28 = v27[1];
    *(_QWORD *)(v61 + 32) = *v27;
    *(_QWORD *)(v61 + 40) = v28;
    swift_bridgeObjectRetain();
    v29 = a9;
  }
  else
  {
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v18, "localizedStringForLocaleIdentifier:", v30);
    v29 = a9;
    v32 = a2;
    v33 = a4;
    v34 = v31;

    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    a4 = v33;
    a2 = v32;
    sub_1000058B4();
    sub_10000EC68();
    sub_100055844();
    sub_100007398();
    *(_QWORD *)(v61 + 32) = v35;
    *(_QWORD *)(v61 + 40) = v37;
  }
  sub_100007398();
  v38 = sub_1000100C8(v19, 48);
  *(_OWORD *)(v38 + 16) = xmmword_1000EFAE0;
  v56 = a2;
  sub_10000BFF4();
  v39 = a4;
  sub_10000C020();
  v40 = objc_msgSend(v62, "key");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v40);

  v41 = *v29;
  if (*(_QWORD *)(*v29 + 16) && (v42 = sub_10001CD9C(), (v43 & 1) != 0))
  {
    v44 = (uint64_t *)(*(_QWORD *)(v41 + 56) + 16 * v42);
    v46 = *v44;
    v45 = v44[1];
    sub_10000C020();
    v47 = v55;
    v48 = v62;
  }
  else
  {
    v49 = String._bridgeToObjectiveC()();
    v48 = v62;
    v50 = objc_msgSend(v62, "localizedStringForLocaleIdentifier:", v49);

    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v45 = v51;

    sub_1000058B4();
    sub_10000C020();
    sub_100055844();
    sub_100007398();
    v47 = v55;
  }
  *(_QWORD *)(v38 + 32) = v46;
  *(_QWORD *)(v38 + 40) = v45;
  sub_100007398();
  v52 = sub_10001BE7C(&qword_100128B20);
  v53 = sub_1000100C8(v52, 160);
  *(_OWORD *)(v53 + 16) = xmmword_1000EFD90;
  *(_QWORD *)(v53 + 32) = a1;
  *(_QWORD *)(v53 + 40) = v56;
  *(_QWORD *)(v53 + 48) = a3;
  *(_QWORD *)(v53 + 56) = v39;
  *(_QWORD *)(v53 + 64) = 1163219540;
  *(_QWORD *)(v53 + 72) = 0xE400000000000000;
  *(_QWORD *)(v53 + 80) = v61;
  *(_WORD *)(v53 + 88) = 0;
  *(_QWORD *)(v53 + 96) = a1;
  *(_QWORD *)(v53 + 104) = v56;
  *(_QWORD *)(v53 + 112) = a3;
  *(_QWORD *)(v53 + 120) = v39;
  *(_QWORD *)(v53 + 128) = 0x45534C4146;
  *(_QWORD *)(v53 + 136) = 0xE500000000000000;
  *(_QWORD *)(v53 + 144) = v38;
  *(_WORD *)(v53 + 152) = 0;

  return v53;
}

id sub_10008E4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  NSString v12;
  NSString v13;
  NSString v14;
  uint64_t v15;
  NSURL *v16;
  void *v17;
  void *v18;
  id v19;

  v8 = v7;
  v12 = String._bridgeToObjectiveC()();
  sub_10000E038();
  if (a4)
  {
    v13 = String._bridgeToObjectiveC()();
    sub_10000C028();
    if (a6)
    {
LABEL_3:
      v14 = String._bridgeToObjectiveC()();
      sub_1000059B0();
      goto LABEL_6;
    }
  }
  else
  {
    v13 = 0;
    if (a6)
      goto LABEL_3;
  }
  v14 = 0;
LABEL_6:
  v15 = type metadata accessor for URL(0);
  v17 = 0;
  if (sub_10001C93C(a7, 1, v15) != 1)
  {
    URL._bridgeToObjectiveC()(v16);
    v17 = v18;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a7, v15);
  }
  v19 = objc_msgSend(v8, "initWithKey:defaultValue:table:bundleURL:", v12, v13, v14, v17);

  return v19;
}

uint64_t sub_10008E5E0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void **i;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  for (i = (void **)(a1 + 48); ; i += 3)
  {
    v8 = (uint64_t)*(i - 2);
    v7 = (uint64_t)*(i - 1);
    v9 = *i;
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    v11 = v9;
    v13 = sub_100016064(v8);
    v14 = v10[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      break;
    v17 = v12;
    if (v10[3] >= v16)
    {
      if ((a2 & 1) == 0)
      {
        sub_10001BE7C(&qword_1001282D0);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_1000320A4(v16, a2 & 1);
      v18 = sub_100016064(v8);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_18;
      v13 = v18;
    }
    v20 = (_QWORD *)*a3;
    if ((v17 & 1) != 0)
    {
      v21 = *(id *)(v20[7] + 8 * v13);
      swift_bridgeObjectRelease();

      v22 = v20[7];
      *(_QWORD *)(v22 + 8 * v13) = v21;
    }
    else
    {
      v20[(v13 >> 6) + 8] |= 1 << v13;
      v23 = (uint64_t *)(v20[6] + 16 * v13);
      *v23 = v8;
      v23[1] = v7;
      *(_QWORD *)(v20[7] + 8 * v13) = v11;
      v24 = v20[2];
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        goto LABEL_17;
      v20[2] = v26;
    }
    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
  __break(1u);
  return result;
}

void sub_10008E7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t countAndFlagsBits;
  void *object;
  void *rawValue;
  uint64_t v13;
  _QWORD v14[21];
  _QWORD v15[21];
  _QWORD v16[21];
  SQLite::Delete v17;
  SQLite::Update v18;

  if (qword_100127E38 != -1)
    swift_once(&qword_100127E38, sub_10008F038);
  sub_1000189C4(v15, &unk_10012CF90);
  sub_1000379AC(v15);
  if (qword_100127E40 != -1)
    swift_once(&qword_100127E40, sub_10008F090);
  sub_10001768C((uint64_t)&qword_10012D038);
  v14[0] = a1;
  v14[1] = a2;
  == infix<A>(_:_:)();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_1000189C4(&v13, v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v5, v7, v9, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v14);
  swift_bridgeObjectRelease_n(v9, 2);
  swift_bridgeObjectRelease_n(v7, 2);
  sub_100037A7C(v15);
  sub_1000189C4(v16, v14);
  sub_1000189C4(v14, v16);
  v17 = QueryType.delete()();
  countAndFlagsBits = v17.template._countAndFlagsBits;
  object = v17.template._object;
  rawValue = v17.bindings._rawValue;
  sub_100037A7C(v16);
  v18.template._countAndFlagsBits = countAndFlagsBits;
  v18.template._object = object;
  v18.bindings._rawValue = rawValue;
  Connection.run(_:)(v18);
  swift_bridgeObjectRelease(rawValue);
  swift_bridgeObjectRelease(object);
  sub_1000117E8();
}

void sub_10008E968(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v7 = objc_msgSend(a1, "action");
  v8 = objc_msgSend(v7, "identifier");

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = objc_msgSend(a1, "action");
  v13 = objc_msgSend(v12, "parameters");

  sub_10000795C(0, &qword_1001284E0, LNProperty_ptr);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13);

  v15 = sub_10008EE58();
  if (v4)
  {
    sub_10000C028();
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v14);

  }
  else
  {
    v17 = v15;
    v18 = v16;
    v26 = v11;
    swift_bridgeObjectRelease(v14);
    v24 = sub_1000B9988(a1);
    v25 = v19;
    v20 = objc_msgSend(a1, "context");
    v21 = sub_10008EF64();
    v23 = v22;

    *a4 = a2;
    a4[1] = a3;
    a4[2] = v9;
    a4[3] = v26;
    a4[4] = v17;
    a4[5] = v18;
    a4[6] = v24;
    a4[7] = v25;
    a4[8] = v21;
    a4[9] = v23;
  }
}

void sub_10008EB44(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  __int128 v33;
  _QWORD v34[10];
  _BYTE v35[168];
  _BYTE v36[16];
  _QWORD v37[21];
  _QWORD v38[21];
  SQLite::Insert v39;

  if (qword_100127E38 != -1)
    swift_once(&qword_100127E38, sub_10008F038);
  sub_1000189C4(v37, &unk_10012CF90);
  sub_1000189C4(v35, &unk_10012CF90);
  sub_1000379AC(v37);
  if (qword_100127E40 != -1)
    swift_once(&qword_100127E40, sub_10008F090);
  v2 = sub_10001768C((uint64_t)&qword_10012D038);
  v33 = *a1;
  <- infix<A>(_:_:)(v2, v3, v4, (uint64_t)&v33, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  v5 = sub_10001BE7C(&qword_100128D08);
  v6 = swift_allocObject(v5, 352, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000F05A0;
  if (qword_100127E48 != -1)
    swift_once(&qword_100127E48, sub_10008F0AC);
  v7 = sub_10001768C((uint64_t)&qword_10012D050);
  v33 = a1[1];
  sub_100017EBC(v7, v8, v9, v10, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v11, v12, v33);
  if (qword_100127E50 != -1)
    swift_once(&qword_100127E50, sub_10008F134);
  v13 = sub_10001768C((uint64_t)&qword_10012D068);
  v33 = a1[2];
  sub_100017EBC(v13, v14, v15, v16, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data, v17, v18, v33);
  if (qword_100127E58 != -1)
    swift_once(&qword_100127E58, sub_10008F19C);
  v19 = qword_10012D080;
  v20 = *(_QWORD *)algn_10012D088;
  v21 = qword_10012D090;
  sub_1000904E8((uint64_t)(a1 + 3), (uint64_t)v36);
  sub_1000904E8((uint64_t)v36, (uint64_t)&v33);
  sub_100035CB4((uint64_t)v36);
  <- infix<A>(_:_:)(v19, v20, v21, (uint64_t)&v33, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_10001E408((uint64_t)v36);
  if (qword_100127E60 != -1)
    swift_once(&qword_100127E60, sub_10008F204);
  v22 = sub_10001768C((uint64_t)&qword_10012D098);
  v33 = a1[4];
  sub_100017EBC(v22, v23, v24, v25, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data, v26, v27, v33);
  v28 = QueryType.insert(_:_:)((uint64_t)v34);
  v30 = v29;
  v32 = v31;
  swift_setDeallocating(v6);
  sub_10001CC3C();
  sub_100019F20(v34);
  sub_1000189C4(v38, v35);
  sub_100037A7C(v38);
  v39.template._countAndFlagsBits = v28;
  v39.template._object = v30;
  v39.bindings._rawValue = v32;
  Connection.run(_:)(v39);
  sub_10000C028();
  swift_bridgeObjectRelease(v30);
  sub_1000117E8();
}

void *sub_10008EE58()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v7;

  v0 = (void *)objc_opt_self(NSKeyedArchiver);
  sub_10000795C(0, &qword_1001284E0, LNProperty_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v7 = 0;
  v2 = objc_msgSend(v0, "archivedDataWithRootObject:requiringSecureCoding:error:", isa, 1, &v7);

  v3 = v7;
  if (v2)
  {
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  else
  {
    v4 = v3;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v5);
  }
  return v4;
}

void *sub_10008EF64()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  id v5;

  v5 = 0;
  v1 = objc_msgSend((id)objc_opt_self(NSKeyedArchiver), "archivedDataWithRootObject:requiringSecureCoding:error:", v0, 1, &v5);
  v2 = v5;
  if (v1)
  {
    v3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  }
  else
  {
    v3 = v2;
    _convertNSErrorToError(_:)(v2);

    swift_willThrow();
  }
  return v3;
}

void *sub_10008F038()
{
  _QWORD v1[21];

  Table.init(_:database:)(v1, 0x746E6176656C6572, 0xEF73746E65746E49, 0, 0);
  return sub_1000189C4(&unk_10012CF90, v1);
}

uint64_t sub_10008F090(uint64_t a1)
{
  return sub_10008F0C8(a1, (uint64_t)&qword_10012D038, 0x80000001000F3C30);
}

uint64_t sub_10008F0AC(uint64_t a1)
{
  return sub_10008F0C8(a1, (uint64_t)&qword_10012D050, 0x80000001000F4E10);
}

uint64_t sub_10008F0C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10001BE7C(&qword_100128D00);
  v5 = sub_100090420((unint64_t *)&qword_100129FA0, &qword_100128D00);
  return ExpressionType.init(_:)(0xD000000000000010, a3, v4, v5);
}

uint64_t sub_10008F134()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D10);
  v1 = sub_100090420((unint64_t *)&unk_100129FB0, &qword_100128D10);
  return ExpressionType.init(_:)(0xD000000000000011, 0x80000001000F51A0, v0, v1);
}

uint64_t sub_10008F19C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D30);
  v1 = sub_100090420(&qword_100128D38, &qword_100128D30);
  return ExpressionType.init(_:)(0x694B746567646977, 0xEA0000000000646ELL, v0, v1);
}

uint64_t sub_10008F204()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D10);
  v1 = sub_100090420((unint64_t *)&unk_100129FB0, &qword_100128D10);
  return ExpressionType.init(_:)(0x436465646F636E65, 0xEE00747865746E6FLL, v0, v1);
}

uint64_t sub_10008F274@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  ValueMetadata *v293;
  _UNKNOWN **v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _UNKNOWN **v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316[21];
  _BYTE v317[168];
  _BYTE v318[168];
  _QWORD v319[21];
  _QWORD v320[22];

  if (qword_100127E38 != -1)
    swift_once(&qword_100127E38, sub_10008F038);
  v1 = sub_1000189C4(v316, &unk_10012CF90);
  sub_1000185A8((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v222, v236, a1, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  if (qword_100127CD0 != -1)
    swift_once(&qword_100127CD0, sub_10004D688);
  sub_1000189C4(v317, &unk_10012CBE8);
  sub_1000163BC();
  if (qword_100127F28 != -1)
    swift_once(&qword_100127F28, sub_1000C4370);
  sub_1000189C4(v318, &unk_10012D3D0);
  sub_1000189C4(v319, v316);
  sub_10001029C();
  if (qword_100127E40 != -1)
    swift_once(&qword_100127E40, sub_10008F090);
  v9 = sub_1000189C4(v320, v316);
  sub_1000185A8((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v223, v237, v253, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  v17 = sub_100015994();
  v22 = QueryType.namespace<A>(_:)(v17, v18, v19, v20, v21);
  v24 = v23;
  v26 = v25;
  sub_10001B320(v22, v23, v25, v27, v28, v29, v30, v31, v224, v238, v254, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  v32 = sub_10001BE7C(&qword_100128D00);
  v298 = v32;
  v299 = &protocol witness table for Expression<A>;
  v295 = v22;
  v296 = v24;
  v297 = v26;
  v33 = sub_10001BE7C(&qword_100128D58);
  v34 = swift_allocObject(v33, 272, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000F0F50;
  if (qword_100127E48 != -1)
    swift_once(&qword_100127E48, sub_10008F0AC);
  v35 = sub_1000189C4(v320, v316);
  v43 = sub_1000185A8((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42, v225, v239, v255, v269, v270, v271, v272, v273, v274, v275, v276,
          v277,
          v278,
          v279,
          v280,
          v281,
          v282,
          v283,
          v284,
          v285,
          v286,
          v287,
          v288,
          v289,
          v290,
          v291,
          v292,
          (uint64_t)v293,
          (uint64_t)v294,
          v295,
          v296,
          v297,
          v298,
          (uint64_t)v299,
          v300,
          v301,
          v302,
          v303,
          v304,
          v305,
          v306,
          v307,
          v308,
          v309,
          v310,
          v311,
          v312,
          v313,
          v314,
          v315,
          v316[0]);
  v46 = sub_10001D9C4((uint64_t)v43, v44, v45, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  v48 = v47;
  v50 = v49;
  sub_10001B320(v46, v47, v49, v51, v52, v53, v54, v55, v226, v240, v256, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  *(_QWORD *)(v34 + 56) = v32;
  *(_QWORD *)(v34 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v34 + 32) = v46;
  *(_QWORD *)(v34 + 40) = v48;
  *(_QWORD *)(v34 + 48) = v50;
  if (qword_100127E50 != -1)
    swift_once(&qword_100127E50, sub_10008F134);
  v56 = qword_10012D068;
  v57 = qword_10012D078;
  v58 = sub_1000189C4(v320, v316);
  v66 = sub_1000185A8((uint64_t)v58, v59, v60, v61, v62, v63, v64, v65, v227, v241, v257, v269, v270, v271, v272, v273, v274, v275, v276,
          v277,
          v278,
          v279,
          v280,
          v281,
          v282,
          v283,
          v284,
          v285,
          v286,
          v287,
          v288,
          v289,
          v290,
          v291,
          v292,
          (uint64_t)v293,
          (uint64_t)v294,
          v295,
          v296,
          v297,
          v298,
          (uint64_t)v299,
          v300,
          v301,
          v302,
          v303,
          v304,
          v305,
          v306,
          v307,
          v308,
          v309,
          v310,
          v311,
          v312,
          v313,
          v314,
          v315,
          v316[0]);
  v69 = sub_10001D9C4((uint64_t)v66, v67, v68, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for Data);
  sub_10001846C(v69, v70, v71, v72, v73, v74, v75, v76, v228, v242, v258, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  v77 = sub_10001BE7C(&qword_100128D10);
  *(_QWORD *)(v34 + 96) = v77;
  *(_QWORD *)(v34 + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v34 + 72) = v56;
  *(_QWORD *)(v34 + 80) = v48;
  *(_QWORD *)(v34 + 88) = v57;
  if (qword_100127E58 != -1)
    swift_once(&qword_100127E58, sub_10008F19C);
  v78 = qword_10012D080;
  v79 = *(_QWORD *)algn_10012D088;
  v80 = sub_1000189C4(v320, v316);
  sub_1000185A8((uint64_t)v80, v81, v82, v83, v84, v85, v86, v87, v229, v243, v259, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  v88 = sub_10001BE7C((uint64_t *)&unk_100128780);
  v91 = sub_100017D10(v88, v89, v90, (uint64_t)&type metadata for Table, v88);
  sub_10001846C(v91, v92, v93, v94, v95, v96, v97, v98, v230, v244, v260, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  *(_QWORD *)(v34 + 136) = sub_10001BE7C(&qword_100128D30);
  *(_QWORD *)(v34 + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v34 + 112) = v78;
  *(_QWORD *)(v34 + 120) = v48;
  *(_QWORD *)(v34 + 128) = v79;
  if (qword_100127E60 != -1)
    swift_once(&qword_100127E60, sub_10008F204);
  v99 = qword_10012D098;
  v100 = unk_10012D0A0;
  v101 = sub_1000189C4(v320, v316);
  v109 = sub_1000185A8((uint64_t)v101, v102, v103, v104, v105, v106, v107, v108, v231, v245, v261, v269, v270, v271, v272, v273, v274, v275, v276,
           v277,
           v278,
           v279,
           v280,
           v281,
           v282,
           v283,
           v284,
           v285,
           v286,
           v287,
           v288,
           v289,
           v290,
           v291,
           v292,
           (uint64_t)v293,
           (uint64_t)v294,
           v295,
           v296,
           v297,
           v298,
           (uint64_t)v299,
           v300,
           v301,
           v302,
           v303,
           v304,
           v305,
           v306,
           v307,
           v308,
           v309,
           v310,
           v311,
           v312,
           v313,
           v314,
           v315,
           v316[0]);
  v112 = sub_100017D10((uint64_t)v109, v110, v111, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for Data);
  sub_10001846C(v112, v113, v114, v115, v116, v117, v118, v119, v232, v246, v262, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  *(_QWORD *)(v34 + 176) = v77;
  *(_QWORD *)(v34 + 184) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v34 + 152) = v99;
  *(_QWORD *)(v34 + 160) = v48;
  *(_QWORD *)(v34 + 168) = v100;
  if (qword_100127CE8 != -1)
    swift_once(&qword_100127CE8, sub_10004D798);
  v120 = qword_10012CCC0;
  v121 = *(_QWORD *)algn_10012CCC8;
  v122 = qword_10012CCD0;
  sub_1000189C4(v320, v317);
  sub_1000163BC();
  v124 = sub_10001B800(v120, v121, v122, v123, (uint64_t)&type metadata for String);
  v126 = v125;
  v128 = v127;
  sub_10001E94C();
  *(_QWORD *)(v34 + 216) = v32;
  *(_QWORD *)(v34 + 224) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v34 + 192) = v124;
  *(_QWORD *)(v34 + 200) = v126;
  *(_QWORD *)(v34 + 208) = v128;
  if (qword_100127F50 != -1)
    swift_once(&qword_100127F50, sub_1000C45D8);
  v129 = qword_10012D4A8;
  v130 = unk_10012D4B0;
  v131 = qword_10012D4B8;
  sub_1000189C4(v320, v318);
  sub_10001029C();
  v133 = sub_10001B800(v129, v130, v131, v132, (uint64_t)&type metadata for Int);
  v135 = v134;
  sub_100017AC0();
  *(_QWORD *)(v34 + 256) = sub_10001BE7C(&qword_100129560);
  *(_QWORD *)(v34 + 264) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v34 + 232) = v133;
  *(_QWORD *)(v34 + 240) = v135;
  *(_QWORD *)(v34 + 248) = v130;
  SchemaType.select(_:_:)((uint64_t)&v295, v34, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  swift_setDeallocating(v34);
  sub_10001E778();
  sub_10000E87C(&v295);
  sub_1000189C4(v319, v320);
  v290 = sub_1000058D0((uint64_t)&unk_10011D3E0);
  sub_1000189C4((void *)(v290 + 16), v317);
  v136 = sub_1000189C4(&v295, v316);
  sub_1000185A8((uint64_t)v136, v137, v138, v139, v140, v141, v142, v143, v233, v247, v263, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)&type metadata for Table,
    (uint64_t)&protocol witness table for Table,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  sub_1000163BC();
  v144 = sub_100015994();
  v149 = sub_10001B800(v144, v145, v146, v147, v148);
  sub_10001B320(v149, v150, v151, v152, v153, v154, v155, v156, v234, v248, v264, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  if (qword_100127CD8 != -1)
    swift_once(&qword_100127CD8, sub_10004D6D4);
  v157 = qword_10012CC90;
  v158 = *(_QWORD *)algn_10012CC98;
  v159 = qword_10012CCA0;
  sub_1000189C4(&v295, v317);
  sub_1000163BC();
  sub_10001DDA0(v157, v158, v159, (uint64_t)&type metadata for Table);
  sub_10001E94C();
  == infix<A>(_:_:)();
  v249 = v160;
  v162 = v161;
  v164 = v163;
  sub_100007398();
  sub_1000059C4();
  sub_1000100D0();
  swift_bridgeObjectRelease();
  v165 = qword_10012D050;
  v166 = *(_QWORD *)algn_10012D058;
  v167 = qword_10012D060;
  v168 = sub_1000189C4(&v295, v316);
  sub_1000185A8((uint64_t)v168, v169, v170, v171, v172, v173, v174, v175, (uint64_t)&protocol witness table for String, v249, v265, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  v176 = sub_10001DDA0(v165, v166, v167, (uint64_t)&type metadata for Table);
  sub_10001B320(v176, v177, v178, v179, v180, v181, v182, v183, v235, v250, v266, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  if (qword_100127CE0 != -1)
    swift_once(&qword_100127CE0, sub_10004D6F8);
  v184 = qword_10012CCA8;
  v185 = unk_10012CCB0;
  v186 = qword_10012CCB8;
  sub_1000189C4(&v295, v317);
  QueryType.namespace<A>(_:)(v184, v185, v186, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_10001E94C();
  == infix<A>(_:_:)();
  v188 = v187;
  v190 = v189;
  v192 = v191;
  swift_bridgeObjectRelease();
  sub_100007398();
  swift_bridgeObjectRelease();
  sub_1000100D0();
  && infix(_:_:)(v251, v162, v164, v188, v190, v192);
  v194 = v193;
  v196 = v195;
  v198 = v197;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000059C4();
  swift_bridgeObjectRelease();
  sub_1000189C4(&v269, v319);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)(1, &v290, v194, v196, v198, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)&v295);
  sub_1000117AC(v198);
  sub_1000117AC(v196);
  sub_100037A7C(v319);
  sub_10000E87C(&v290);
  sub_1000189C4(v320, &v295);
  v293 = &type metadata for Table;
  v294 = &protocol witness table for Table;
  v290 = sub_1000058D0((uint64_t)&unk_10011D3E0);
  sub_1000189C4((void *)(v290 + 16), v318);
  sub_1000189C4(&v269, v316);
  sub_10001029C();
  v199 = sub_100015994();
  v202 = QueryType.namespace<A>(_:)(v199, v200, v201, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_10001B320(v202, v203, v204, v205, v206, v207, v208, v209, (uint64_t)&protocol witness table for String, v251, v267, v269, v270, v271, v272, v273, v274, v275, v276,
    v277,
    v278,
    v279,
    v280,
    v281,
    v282,
    v283,
    v284,
    v285,
    v286,
    v287,
    v288,
    v289,
    v290,
    v291,
    v292,
    (uint64_t)v293,
    (uint64_t)v294,
    v295,
    v296,
    v297,
    v298,
    (uint64_t)v299,
    v300,
    v301,
    v302,
    v303,
    v304,
    v305,
    v306,
    v307,
    v308,
    v309,
    v310,
    v311,
    v312,
    v313,
    v314,
    v315,
    v316[0]);
  if (qword_100127F30 != -1)
    swift_once(&qword_100127F30, sub_1000C43C0);
  v210 = qword_10012D478;
  v211 = unk_10012D480;
  v212 = qword_10012D488;
  sub_1000189C4(&v269, v318);
  QueryType.namespace<A>(_:)(v210, v211, v212, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_100017AC0();
  == infix<A>(_:_:)();
  v214 = v213;
  v216 = v215;
  v218 = v217;
  swift_bridgeObjectRelease();
  sub_1000059C4();
  swift_bridgeObjectRelease();
  sub_1000100D0();
  v268[3] = (uint64_t)&type metadata for Table;
  v268[4] = (uint64_t)&protocol witness table for Table;
  v219 = sub_1000058D0((uint64_t)&unk_10011D3E0);
  v220 = v219 + 16;
  *v268 = v219;
  sub_1000189C4(&v269, v320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)(1, &v290, v214, v216, v218, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v220);
  sub_1000117AC(v218);
  sub_1000117AC(v216);
  sub_100037A7C(v320);
  return sub_10000E87C(&v290);
}

uint64_t sub_10008FC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34[2];
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v4);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100127E40 != -1)
    swift_once(&qword_100127E40, sub_10008F090);
  sub_10001768C((uint64_t)&qword_10012D038);
  Row.get<A>(_:)();
  v8 = v35;
  v7 = v36;
  if (qword_100127F50 != -1)
    swift_once(&qword_100127F50, sub_1000C45D8);
  sub_10001768C((uint64_t)&qword_10012D4A8);
  sub_10001AEB0();
  v9 = v35;
  if (qword_100127CE8 != -1)
    swift_once(&qword_100127CE8, sub_10004D798);
  sub_10001768C((uint64_t)&qword_10012CCC0);
  sub_10001AEB0();
  sub_1000100D8(v11, &qword_10012A710, LNActionMetadata_ptr);
  v13 = v35;
  v12 = v36;
  v14 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v6, 1, 1, v14);
  v15 = (void *)static LNActionMetadata.fromJSON(_:bundleMetadataVersion:bundleURL:effectiveBundleIdentifier:)(v13, v12, v9, v6, 0);
  sub_10001316C((uint64_t)v6, &qword_100128740);
  swift_bridgeObjectRelease();
  if (qword_100127E50 != -1)
    swift_once(&qword_100127E50, sub_10008F134);
  sub_10001768C((uint64_t)&qword_10012D068);
  sub_10001AEB0();
  v16 = v35;
  v17 = v36;
  sub_10009013C(v35, v36);
  sub_10001EA88(v16, v17);
  objc_allocWithZone((Class)LNAction);
  swift_bridgeObjectRetain();
  v18 = v15;
  v19 = sub_1000902C0(v18);
  if (qword_100127E58 != -1)
    swift_once(&qword_100127E58, sub_10008F19C);
  v20 = sub_10001768C((uint64_t)&qword_10012D080);
  Row.get<A>(_:)(v20, v21, v22, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v23, v34[0], (_QWORD *)v34[1], v35, v36, v37, v38, v39, v40, v41, v42, v43,
    v44);
  v25 = v35;
  v24 = v36;
  if (qword_100127E60 != -1)
    swift_once(&qword_100127E60, sub_10008F204);
  sub_10001768C((uint64_t)&qword_10012D098);
  sub_10001AEB0();
  v26 = v35;
  v27 = v36;
  v29 = sub_1000100D8(v28, &qword_100128D18, NSKeyedUnarchiver_ptr);
  v30 = sub_1000100D8(v29, qword_10012A848, LNRelevantContext_ptr);
  v31 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v30, v26, v27, v30);
  if (v31)
  {
    sub_10001EA88(v26, v27);
    v32 = objc_allocWithZone((Class)LNRelevantIntent);
    v33 = sub_10009036C(v8, v7, v19, v25, v24, v31);

    return (uint64_t)v33;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001DLL, 0x80000001000F5150, "LinkDaemon/LNRelevantIntentRecord.swift", 39, 2);
    __break(1u);
  }
  return result;
}

uint64_t sub_10009013C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[4];
  uint64_t v10;

  sub_10000795C(0, &qword_100128D18, NSKeyedUnarchiver_ptr);
  v5 = sub_10001BE7C(&qword_100128D20);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000EFD90;
  *(_QWORD *)(v6 + 32) = sub_10000795C(0, (unint64_t *)&qword_100128D28, NSArray_ptr);
  *(_QWORD *)(v6 + 40) = sub_10000795C(0, &qword_1001284E0, LNProperty_ptr);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v9, v6, a1, a2);
  result = swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v9[3])
    {
      v8 = sub_10001BE7C(&qword_100129670);
      if ((swift_dynamicCast(&v10, v9, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
        return v10;
    }
    else
    {
      sub_10001316C((uint64_t)v9, &qword_100128A40);
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000026, 0x80000001000F5170, "LinkDaemon/LNRelevantIntentRecord.swift", 39, 2);
    __break(1u);
  }
  return result;
}

id sub_1000902C0(void *a1)
{
  void *v1;
  NSString v3;
  Class isa;
  id v5;

  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000795C(0, &qword_1001284E0, LNProperty_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v1, "initWithMetadata:bundleIdentifier:parameters:", a1, v3, isa);

  return v5;
}

id sub_10009036C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  void *v6;
  void *v7;
  NSString v12;
  NSString v13;
  id v14;

  v7 = v6;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a5)
  {
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v13 = 0;
  }
  v14 = objc_msgSend(v7, "initWithBundleIdentifier:action:widgetKind:context:", v12, a3, v13, a6);

  return v14;
}

uint64_t sub_100090420(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100025A6C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100090460()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1000904E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C((uint64_t *)&unk_100128780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100090530(uint64_t a1)
{
  return sub_100090580(a1, qword_10012D0B0, &LNLogCategoryExecution);
}

uint64_t sub_100090544(uint64_t a1)
{
  return sub_100090580(a1, qword_10012D0C8, &LNLogCategoryGeneral);
}

uint64_t sub_100090558(uint64_t a1)
{
  return sub_100090580(a1, qword_10012D0E0, &LNLogCategoryMetadata);
}

uint64_t sub_10009056C(uint64_t a1)
{
  return sub_100090580(a1, qword_10012D0F8, &LNLogCategoryVocabulary);
}

uint64_t sub_100090580(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = type metadata accessor for Logger(0);
  sub_1000269D8(v5, a2);
  sub_100012A40(v5, (uint64_t)a2);
  result = *a3;
  if (*a3)
  {
    v8 = String.init(cString:)();
    result = LNLogSubsystem;
    if (LNLogSubsystem)
    {
      v9 = v7;
      v10 = String.init(cString:)();
      return Logger.init(subsystem:category:)(v10, v11, v8, v9);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10009060C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000269D8(v0, qword_10012D110);
  sub_100012A40(v0, (uint64_t)qword_10012D110);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001000F51C0, 0x49656D69746E7552, 0xED00007365757373);
}

uint64_t sub_10009068C(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = &unk_1000F13E8;
  result = type metadata accessor for LazyTask.State(319, a1[10], a1[11], a1[12]);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 13);
    if (!result)
      return 0;
  }
  return result;
}

id *sub_100090728()
{
  id *v0;
  uint64_t *v1;
  char *v2;
  uint64_t v3;

  v1 = (uint64_t *)*v0;

  swift_release();
  v2 = (char *)v0 + *((_QWORD *)*v0 + 16);
  v3 = type metadata accessor for LazyTask.State(0, v1[10], v1[11], v1[12]);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t sub_100090790()
{
  uint64_t v0;

  sub_100090728();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for LazyTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyTask);
}

uint64_t sub_1000907C0(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for Result(319, a1[2], a1[3], a1[4]);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t *sub_10009081C(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 > 1)
    {
      memcpy(__dst, a2, v6 + 1);
    }
    else if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(__dst);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(__dst);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }
  return v3;
}

uint64_t sub_1000908F0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(result + v4);
  if (v6 <= 1)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  return result;
}

unsigned __int8 *sub_10009092C(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = __dst[v9];
  v11 = __src[v9];
  if (v10 > 1)
  {
    if (v11 <= 1)
    {
      if (v11 != 1)
      {
LABEL_30:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(__dst, __src, v5);
        __dst[v9] = 0;
        return __dst;
      }
      goto LABEL_20;
    }
LABEL_28:
    memcpy(__dst, __src, v9 + 1);
    return __dst;
  }
  if (v11 > 1)
  {
    v17 = v10 == 1;
    if (v10 == 1)
      v18 = *(_QWORD *)(v6 - 8);
    else
      v18 = *(_QWORD *)(v5 - 8);
    if (v17)
      v19 = *(_QWORD *)(a3 + 24);
    else
      v19 = *(_QWORD *)(a3 + 16);
    (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(__dst, v19);
    goto LABEL_28;
  }
  if (__dst != __src)
  {
    v12 = v10 == 1;
    if (v10 == 1)
      v13 = *(_QWORD *)(v6 - 8);
    else
      v13 = *(_QWORD *)(v5 - 8);
    if (v12)
      v14 = *(_QWORD *)(a3 + 24);
    else
      v14 = *(_QWORD *)(a3 + 16);
    (*(void (**)(unsigned __int8 *, uint64_t))(v13 + 8))(__dst, v14);
    v15 = __src[v9];
    if (v15 >= 2)
    {
      if (v9 <= 3)
        v16 = v9;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 != 1)
      goto LABEL_30;
LABEL_20:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(__dst, __src, v6);
    __dst[v9] = 1;
  }
  return __dst;
}

void *sub_100090AA8(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = a2[v6];
  if (v7 > 1)
  {
    memcpy(__dst, a2, v6 + 1);
  }
  else if (v7 == 1)
  {
    (*(void (**)(void *))(v5 + 32))(__dst);
    *((_BYTE *)__dst + v6) = 1;
  }
  else
  {
    (*(void (**)(void *))(v4 + 32))(__dst);
    *((_BYTE *)__dst + v6) = 0;
  }
  return __dst;
}

unsigned __int8 *sub_100090B38(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = __dst[v9];
  v11 = __src[v9];
  if (v10 > 1)
  {
    if (v11 <= 1)
    {
      if (v11 != 1)
      {
LABEL_30:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(__dst, __src, v5);
        __dst[v9] = 0;
        return __dst;
      }
      goto LABEL_20;
    }
LABEL_28:
    memcpy(__dst, __src, v9 + 1);
    return __dst;
  }
  if (v11 > 1)
  {
    v17 = v10 == 1;
    if (v10 == 1)
      v18 = *(_QWORD *)(v6 - 8);
    else
      v18 = *(_QWORD *)(v5 - 8);
    if (v17)
      v19 = *(_QWORD *)(a3 + 24);
    else
      v19 = *(_QWORD *)(a3 + 16);
    (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(__dst, v19);
    goto LABEL_28;
  }
  if (__dst != __src)
  {
    v12 = v10 == 1;
    if (v10 == 1)
      v13 = *(_QWORD *)(v6 - 8);
    else
      v13 = *(_QWORD *)(v5 - 8);
    if (v12)
      v14 = *(_QWORD *)(a3 + 24);
    else
      v14 = *(_QWORD *)(a3 + 16);
    (*(void (**)(unsigned __int8 *, uint64_t))(v13 + 8))(__dst, v14);
    v15 = __src[v9];
    if (v15 >= 2)
    {
      if (v9 <= 3)
        v16 = v9;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 != 1)
      goto LABEL_30;
LABEL_20:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(__dst, __src, v6);
    __dst[v9] = 1;
  }
  return __dst;
}

uint64_t sub_100090CB4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) > 3)
    goto LABEL_6;
  v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
  if (HIWORD(v8))
  {
    v6 = *(_DWORD *)(a1 + v4);
    if (v6)
      goto LABEL_14;
LABEL_21:
    v10 = *(unsigned __int8 *)(a1 + v3);
    if (v10 >= 2)
      v11 = (v10 ^ 0xFF) + 1;
    else
      v11 = 0;
    if (v11 >= 2)
      return v11 - 1;
    else
      return 0;
  }
  if (v8 > 0xFF)
  {
    v6 = *(unsigned __int16 *)(a1 + v4);
    if (*(_WORD *)(a1 + v4))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (v8 < 2)
    goto LABEL_21;
LABEL_6:
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100090D7C + 4 * byte_1000F13AA[(v4 - 1)]))();
}

void sub_100090DD4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if (a3 < 0xFE)
  {
    v8 = 0;
  }
  else if (v6 <= 3)
  {
    v10 = ((a3 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = &dword_100000004;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v9 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v11 = v9 & ~(-1 << v7);
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_100090F7C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  v3 = *(unsigned __int8 *)(a1 + v2);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

void *sub_100090FAC(void *result, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  size_t v4;
  int v5;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (a2 > 0xFE)
  {
    v4 = (v3 + 1);
    if ((_DWORD)v4)
    {
      if (v4 <= 3)
        v5 = v4;
      else
        v5 = 4;
      bzero(result, v4);
      __asm { BR              X10 }
    }
  }
  else if (a2)
  {
    *((_BYTE *)result + v3) = -(char)a2;
  }
  return result;
}

uint64_t sub_100091080(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v4 = type metadata accessor for LazyTask.State(0, v2, v3, (uint64_t)&protocol self-conformance witness table for Error);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-v6 - 8];
  v8 = type metadata accessor for Result(0, v2, v3, &protocol self-conformance witness table for Error);
  sub_100014360((uint64_t)v7, 1, 1, v8);
  v9 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 128);
  swift_beginAccess(v9, v12, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v9, v7, v4);
  return swift_endAccess(v12);
}

uint64_t sub_100091178()
{
  uint64_t v0;

  return sub_100091080(v0);
}

void sub_100091190(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[2];
  _QWORD v35[5];
  uint64_t v36;

  sub_10004B988(a3, v35);
  v36 = v35[0];
  v5 = v35[3];
  v6 = v35[4];
  v26 = v35[1];
  v27 = (unint64_t)(v35[2] + 64) >> 6;
  swift_bridgeObjectRetain(a3);
  v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v5 << 6);
      goto LABEL_15;
    }
    v10 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v10 >= v27)
      goto LABEL_29;
    v11 = *(_QWORD *)(v26 + 8 * v10);
    if (!v11)
    {
      v12 = v5 + 2;
      if (v5 + 2 >= v27)
        goto LABEL_29;
      v11 = *(_QWORD *)(v26 + 8 * v12);
      if (v11)
        goto LABEL_13;
      v12 = v5 + 3;
      if (v5 + 3 >= v27)
        goto LABEL_29;
      v11 = *(_QWORD *)(v26 + 8 * v12);
      if (v11)
        goto LABEL_13;
      v12 = v5 + 4;
      if (v5 + 4 >= v27)
        goto LABEL_29;
      v11 = *(_QWORD *)(v26 + 8 * v12);
      if (v11)
      {
LABEL_13:
        v10 = v12;
      }
      else
      {
        v10 = v5 + 5;
        if (v5 + 5 >= v27)
          goto LABEL_29;
        v11 = *(_QWORD *)(v26 + 8 * v10);
        if (!v11)
        {
          v23 = v5 + 6;
          while (v23 < v27)
          {
            v11 = *(_QWORD *)(v26 + 8 * v23++);
            if (v11)
            {
              v10 = v23 - 1;
              goto LABEL_14;
            }
          }
LABEL_29:
          swift_release();
          return;
        }
      }
    }
LABEL_14:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v10 << 6);
    v5 = v10;
LABEL_15:
    v13 = (_QWORD *)(*(_QWORD *)(v36 + 48) + 16 * v9);
    v14 = v13[1];
    v34[0] = *v13;
    v34[1] = v14;
    swift_bridgeObjectRetain(v14);
    a1(&v30, v34);
    if (v3)
    {
      swift_bridgeObjectRelease(v7);
      swift_release();
      swift_bridgeObjectRelease(v14);
      return;
    }
    swift_bridgeObjectRelease(v14);
    v15 = v31;
    if (v31)
    {
      v16 = v5;
      v17 = v30;
      v29 = v32;
      v18 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_10002FB38();
        v7 = v24;
      }
      v19 = v7;
      v20 = v7[2];
      v21 = v19;
      if (v20 >= v19[3] >> 1)
      {
        sub_10002FB38();
        v21 = v25;
      }
      v21[2] = v20 + 1;
      v22 = &v21[5 * v20];
      v7 = v21;
      v22[4] = v17;
      v22[5] = v15;
      *((_OWORD *)v22 + 3) = v29;
      v22[8] = v18;
      v5 = v16;
    }
  }
  __break(1u);
}

uint64_t sub_100091424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  Class v24;
  id v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;
  _QWORD *v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  _QWORD *v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  _BOOL8 v60;
  Swift::Int v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;

  v5 = v4;
  v9 = sub_10001BE7C(&qword_10012A950);
  v76 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v77 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    v16 = a4;
  }
  else
  {
    v17 = static Locale.current.getter(v13);
    a3 = Locale.identifier.getter(v17);
    v16 = v18;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  swift_bridgeObjectRetain(a4);
  isa = (Class)objc_msgSend(v5, "localizations");
  if (!isa)
  {
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v20);
  }
  v21 = (void *)objc_opt_self(NSBundle);
  v22 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v23 = sub_1000100C8(v22, 48);
  *(_OWORD *)(v23 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v23 + 32) = a3;
  *(_QWORD *)(v23 + 40) = v16;
  v24 = Array._bridgeToObjectiveC()().super.isa;
  sub_10000E038();
  v25 = objc_msgSend(v21, "preferredLocalizationsFromArray:forPreferences:", isa, v24);

  v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25);
  if (!*(_QWORD *)(v26 + 16))
  {
    sub_1000117B4();
    v28 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
    return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v28, &protocol witness table for String);
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v26 + 40));
  sub_1000117B4();
  if (a2)
    v27 = String._bridgeToObjectiveC()();
  else
    v27 = 0;
  v30 = String._bridgeToObjectiveC()();
  sub_1000059A8();
  v31 = objc_msgSend(v5, "localizedStringsForTable:localization:", v27, v30);

  v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v31, &type metadata for String, &type metadata for String, &protocol witness table for String);
  v33 = sub_10001BE7C(&qword_10012A958);
  v34 = v77;
  v35 = Regex.init(_regexString:version:)(0xD00000000000002CLL, 0x80000001000F51F0, 1, v33);
  __chkstk_darwin(v35);
  *(&v74 - 2) = (uint64_t)v34;
  swift_bridgeObjectRetain(v32);
  sub_100091190((void (*)(uint64_t *__return_ptr, _QWORD *))sub_100091CB4, (uint64_t)(&v74 - 4), v32);
  v37 = v36;
  sub_1000059A8();
  v80 = v37;
  swift_bridgeObjectRetain(v37);
  sub_100091D84(&v80);
  sub_1000117B4();
  v38 = v80[2];
  if (!v38)
  {
    v29 = &_swiftEmptyDictionarySingleton;
LABEL_36:
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v9);
    swift_release();
    sub_1000059A8();
    return (uint64_t)v29;
  }
  v75 = v9;
  v29 = &_swiftEmptyDictionarySingleton;
  v74 = swift_retain();
  v39 = (uint64_t *)(v74 + 64);
  v78 = v32;
  while (1)
  {
    if (!*(_QWORD *)(v32 + 16))
      goto LABEL_33;
    v40 = *(v39 - 1);
    v41 = *v39;
    v42 = *(v39 - 4);
    v43 = *(v39 - 3);
    swift_bridgeObjectRetain_n(v43, 2);
    sub_100016794();
    v44 = sub_100016064(v42);
    if ((v45 & 1) == 0)
    {
      sub_10000E038();
      swift_bridgeObjectRelease_n(v43, 2);
      goto LABEL_33;
    }
    v46 = (uint64_t *)(*(_QWORD *)(v32 + 56) + 16 * v44);
    v47 = *v46;
    v48 = v46[1];
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRelease(v43);
    v49 = v29[2];
    sub_100016794();
    if (v49)
    {
      v50 = sub_10001E244(v40);
      v51 = _swiftEmptyArrayStorage;
      if ((v52 & 1) != 0)
      {
        v51 = *(_QWORD **)(v29[7] + 8 * v50);
        swift_bridgeObjectRetain(v51);
      }
    }
    else
    {
      v51 = _swiftEmptyArrayStorage;
    }
    sub_10000E038();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
    v79 = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10001AC94();
      v51 = v71;
    }
    v54 = v51[2];
    if (v54 >= v51[3] >> 1)
    {
      sub_10001AC94();
      v51 = v72;
    }
    v51[2] = v54 + 1;
    v55 = &v51[2 * v54];
    v55[4] = v47;
    v55[5] = v48;
    sub_100016794();
    v56 = swift_isUniquelyReferenced_nonNull_native(v29);
    v80 = v29;
    v57 = sub_10001E244(v79);
    v59 = v29[2];
    v60 = (v58 & 1) == 0;
    v61 = v59 + v60;
    if (__OFADD__(v59, v60))
      break;
    v62 = v57;
    v63 = v58;
    sub_10001BE7C(&qword_10012A568);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v56, v61))
    {
      v64 = sub_100016064(v79);
      if ((v63 & 1) != (v65 & 1))
        goto LABEL_40;
      v62 = v64;
    }
    v29 = v80;
    if ((v63 & 1) != 0)
    {
      v66 = v80[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v66 + 8 * v62));
      *(_QWORD *)(v66 + 8 * v62) = v51;
    }
    else
    {
      v80[(v62 >> 6) + 8] |= 1 << v62;
      v67 = (_QWORD *)(v29[6] + 16 * v62);
      *v67 = v79;
      v67[1] = v41;
      *(_QWORD *)(v29[7] + 8 * v62) = v51;
      v68 = v29[2];
      v69 = __OFADD__(v68, 1);
      v70 = v68 + 1;
      if (v69)
        goto LABEL_39;
      v29[2] = v70;
      sub_100016794();
    }
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease_n(v41, 2);
    swift_bridgeObjectRelease(0x8000000000000000);
    v32 = v78;
LABEL_33:
    v39 += 5;
    if (!--v38)
    {
      swift_release();
      v9 = v75;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100091A14@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  uint64_t v35;

  v5 = sub_10001BE7C(&qword_10012A968);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001BE7C(&qword_10012A970);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v12 = a1[1];
  v14 = sub_10001BE7C(&qword_10012A950);
  Regex.wholeMatch(in:)(v13, v12, v14);
  if (v2)
  {
    swift_errorRelease(v2);
    sub_100014360((uint64_t)v7, 1, 1, v8);
LABEL_4:
    result = sub_1000932A8((uint64_t)v7);
LABEL_5:
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  if (sub_10001C93C((uint64_t)v7, 1, v8) == 1)
    goto LABEL_4;
  v30 = v13;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  swift_getKeyPath(&unk_1000F1450);
  Regex.Match.subscript.getter(&v31);
  swift_release();
  v17 = v31;
  v16 = v32;
  if (!((v32 ^ v31) >> 14))
  {
    swift_bridgeObjectRelease(v34);
LABEL_13:
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_5;
  }
  v29 = v33;
  v35 = v34;
  v18 = (unsigned __int8 *)sub_100093338(v31, v32, (unint64_t)v33, v34, 10);
  if ((v19 & 0x100) != 0)
  {
    v22 = v16;
    v23 = v35;
    v29 = sub_100092A68(v17, v22, (uint64_t)v29, v35, 10);
    v20 = v24;
    v21 = v23;
  }
  else
  {
    v20 = v19;
    v29 = v18;
    v21 = v35;
  }
  swift_bridgeObjectRelease(v21);
  if ((v20 & 1) != 0)
    goto LABEL_13;
  swift_getKeyPath(&unk_1000F1470);
  swift_bridgeObjectRetain(v12);
  Regex.Match.subscript.getter(&v31);
  swift_release();
  v25 = v34;
  v26 = static String._fromSubstring(_:)(v31, v32, v33, v34);
  v28 = v27;
  swift_bridgeObjectRelease(v25);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)a2 = v30;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v29;
  *(_QWORD *)(a2 + 24) = v26;
  *(_QWORD *)(a2 + 32) = v28;
  return result;
}

uint64_t sub_100091CB4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100091A14(a1, a2);
}

_QWORD *sub_100091CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10001BE7C(&qword_100128638);
  v5 = (_QWORD *)sub_1000100C8(v4, v2 + 32);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100091D2C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v9 = String.UTF16View.index(_:offsetBy:)(15, v5, a2);
    sub_10001AEC0(v9);
    return v10 | 4;
  }
  else
  {
    v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v5);
    sub_10001AEC0(v6);
    return v7 | 8;
  }
}

void sub_100091D84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_100093294();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_100091DEC(v5);
  *a1 = v2;
}

void sub_100091DEC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  _QWORD *v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  Swift::Int v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1000925A0(0, v3, 1, a1);
      return;
    }
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  v5 = v4;
  v134 = v1;
  sub_1000B78B4(v3 / 2);
  v126 = v6;
  v133 = v7;
  v130 = v3;
  v124 = a1;
  if (v3 > 0)
  {
    v125 = v5;
    v8 = 0;
    v9 = *a1;
    v122 = *a1 + 32;
    v123 = *a1 + 112;
    v10 = (char *)_swiftEmptyArrayStorage;
    v11 = v3;
    v135 = *a1;
    while (1)
    {
      v12 = v8++;
      v128 = v10;
      v129 = v12;
      if (v8 < v11)
      {
        v13 = (_QWORD *)(v9 + 40 * v8);
        v14 = v13[2];
        v15 = v13[3];
        v16 = v13[4];
        v17 = (_QWORD *)(v9 + 40 * v12);
        v18 = v17[2];
        v19 = v17[3];
        v20 = v17[4];
        v21 = v15 == v19 && v16 == v20;
        if (v21 || (v9 = v135, (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17[3], v17[4], 0) & 1) != 0))
        {
          v22 = v14 < v18;
        }
        else
        {
          v9 = v135;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v19, v20, 1);
        }
        v12 = v129;
        v8 = v129 + 2;
        if (v129 + 2 < v130)
        {
          v23 = (_QWORD *)(v123 + 40 * v129);
          while (1)
          {
            v24 = *(v23 - 2);
            v25 = *(v23 - 1);
            v26 = *v23;
            v27 = *(v23 - 7);
            v28 = *(v23 - 6);
            v29 = *(v23 - 5);
            v30 = v25 == v28 && v26 == v29;
            if (v30
              || (v9 = v135,
                  (_stringCompareWithSmolCheck(_:_:expecting:)(*(v23 - 1), *v23, *(v23 - 6), *(v23 - 5), 0) & 1) != 0))
            {
              v31 = v24 < v27;
            }
            else
            {
              v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v28, v29, 1);
              v9 = v135;
            }
            v10 = v128;
            if (((v22 ^ v31) & 1) != 0)
              break;
            ++v8;
            v23 += 5;
            if (v8 >= v130)
            {
              v8 = v130;
              break;
            }
          }
          v12 = v129;
        }
        if ((v22 & 1) != 0)
        {
          if (v8 < v12)
            goto LABEL_152;
          if (v12 < v8)
          {
            v32 = 40 * v8;
            v33 = 40 * v12;
            v34 = v8;
            v35 = v12;
            do
            {
              if (v35 != --v34)
              {
                if (!v9)
                  goto LABEL_158;
                v36 = v9 + v33;
                v37 = v9 + v32;
                v38 = *(_QWORD *)(v9 + v33);
                v39 = *(_QWORD *)(v9 + v33 + 8);
                v40 = *(_QWORD *)(v9 + v33 + 32);
                v41 = *(_OWORD *)(v9 + v33 + 16);
                v42 = *(_QWORD *)(v9 + v32 - 8);
                v43 = *(_OWORD *)(v9 + v32 - 24);
                *(_OWORD *)v36 = *(_OWORD *)(v9 + v32 - 40);
                *(_OWORD *)(v36 + 16) = v43;
                *(_QWORD *)(v36 + 32) = v42;
                *(_QWORD *)(v37 - 40) = v38;
                *(_QWORD *)(v37 - 32) = v39;
                *(_OWORD *)(v37 - 24) = v41;
                *(_QWORD *)(v37 - 8) = v40;
              }
              ++v35;
              v32 -= 40;
              v33 += 40;
            }
            while (v35 < v34);
          }
        }
      }
      if (v8 < v130)
      {
        if (__OFSUB__(v8, v12))
          goto LABEL_149;
        if (v8 - v12 < v125)
        {
          if (__OFADD__(v12, v125))
            goto LABEL_153;
          if (v12 + v125 >= v130)
            v44 = v130;
          else
            v44 = v12 + v125;
          if (v44 < v12)
          {
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
            return;
          }
          if (v8 != v44)
          {
            v45 = (_QWORD *)(v122 + 40 * v8);
            v127 = v44;
            do
            {
              v46 = (_QWORD *)(v9 + 40 * v8);
              v47 = v46[2];
              v48 = v46[3];
              v49 = v46[4];
              v50 = v12;
              v131 = v45;
              do
              {
                v52 = *(v45 - 7);
                v51 = *(v45 - 6);
                v53 = *(v45 - 5);
                v54 = v48 == v51 && v49 == v53;
                if (v54
                  || (v9 = v135,
                      (_stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, *(v45 - 6), *(v45 - 5), 0) & 1) != 0))
                {
                  if (v47 >= v52)
                    break;
                }
                else
                {
                  v9 = v135;
                  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, v51, v53, 1) & 1) == 0)
                    break;
                }
                if (!v9)
                  goto LABEL_156;
                v55 = v45 - 4;
                v49 = *v45;
                v56 = v45 - 9;
                v57 = *(v45 - 5);
                *(v45 - 5) = *v45;
                v45 -= 5;
                v58 = v45[1];
                v59 = v45[2];
                v47 = v45[3];
                v48 = v45[4];
                v60 = v56[1];
                *(_OWORD *)v55 = *v56;
                *((_OWORD *)v55 + 1) = v60;
                v55[4] = v57;
                *(v45 - 4) = v58;
                *(v45 - 3) = v59;
                *(v45 - 2) = v47;
                *(v45 - 1) = v48;
                ++v50;
              }
              while (v8 != v50);
              ++v8;
              v45 = v131 + 5;
              v12 = v129;
            }
            while (v8 != v127);
            v8 = v127;
            v10 = v128;
          }
        }
      }
      if (v8 < v12)
        goto LABEL_148;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        v10 = sub_100092968(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v62 = *((_QWORD *)v10 + 2);
      v61 = *((_QWORD *)v10 + 3);
      v63 = v62 + 1;
      v9 = v135;
      v64 = v129;
      if (v62 >= v61 >> 1)
      {
        v9 = v135;
        v10 = sub_100092968((char *)(v61 > 1), v62 + 1, 1, v10);
        v64 = v129;
      }
      *((_QWORD *)v10 + 2) = v63;
      v65 = v10 + 32;
      v66 = &v10[16 * v62 + 32];
      *(_QWORD *)v66 = v64;
      *((_QWORD *)v66 + 1) = v8;
      if (v62)
      {
        v132 = v8;
        while (1)
        {
          v67 = v63 - 1;
          if (v63 >= 4)
          {
            v72 = &v65[16 * v63];
            v73 = *((_QWORD *)v72 - 8);
            v74 = *((_QWORD *)v72 - 7);
            v78 = __OFSUB__(v74, v73);
            v75 = v74 - v73;
            if (v78)
              goto LABEL_133;
            v77 = *((_QWORD *)v72 - 6);
            v76 = *((_QWORD *)v72 - 5);
            v78 = __OFSUB__(v76, v77);
            v70 = v76 - v77;
            v71 = v78;
            if (v78)
              goto LABEL_134;
            v79 = v63 - 2;
            v80 = &v65[16 * v63 - 32];
            v82 = *(_QWORD *)v80;
            v81 = *((_QWORD *)v80 + 1);
            v78 = __OFSUB__(v81, v82);
            v83 = v81 - v82;
            if (v78)
              goto LABEL_135;
            v78 = __OFADD__(v70, v83);
            v84 = v70 + v83;
            if (v78)
              goto LABEL_137;
            if (v84 >= v75)
            {
              v102 = &v65[16 * v67];
              v104 = *(_QWORD *)v102;
              v103 = *((_QWORD *)v102 + 1);
              v78 = __OFSUB__(v103, v104);
              v105 = v103 - v104;
              if (v78)
                goto LABEL_143;
              v95 = v70 < v105;
              goto LABEL_94;
            }
          }
          else
          {
            if (v63 != 3)
            {
              v96 = *((_QWORD *)v10 + 4);
              v97 = *((_QWORD *)v10 + 5);
              v78 = __OFSUB__(v97, v96);
              v89 = v97 - v96;
              v90 = v78;
              goto LABEL_88;
            }
            v69 = *((_QWORD *)v10 + 4);
            v68 = *((_QWORD *)v10 + 5);
            v78 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            v71 = v78;
          }
          if ((v71 & 1) != 0)
            goto LABEL_136;
          v79 = v63 - 2;
          v85 = &v65[16 * v63 - 32];
          v87 = *(_QWORD *)v85;
          v86 = *((_QWORD *)v85 + 1);
          v88 = __OFSUB__(v86, v87);
          v89 = v86 - v87;
          v90 = v88;
          if (v88)
            goto LABEL_138;
          v91 = &v65[16 * v67];
          v93 = *(_QWORD *)v91;
          v92 = *((_QWORD *)v91 + 1);
          v78 = __OFSUB__(v92, v93);
          v94 = v92 - v93;
          if (v78)
            goto LABEL_140;
          if (__OFADD__(v89, v94))
            goto LABEL_142;
          if (v89 + v94 >= v70)
          {
            v95 = v70 < v94;
LABEL_94:
            if (v95)
              v67 = v79;
            goto LABEL_96;
          }
LABEL_88:
          if ((v90 & 1) != 0)
            goto LABEL_139;
          v98 = &v65[16 * v67];
          v100 = *(_QWORD *)v98;
          v99 = *((_QWORD *)v98 + 1);
          v78 = __OFSUB__(v99, v100);
          v101 = v99 - v100;
          if (v78)
            goto LABEL_141;
          if (v101 < v89)
            goto LABEL_105;
LABEL_96:
          v106 = v67 - 1;
          if (v67 - 1 >= v63)
          {
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
            goto LABEL_144;
          }
          if (!v9)
            goto LABEL_157;
          v107 = v10;
          v108 = v65;
          v109 = &v65[16 * v106];
          v110 = *(_QWORD *)v109;
          v111 = v108;
          v112 = v67;
          v113 = &v108[16 * v67];
          v114 = *((_QWORD *)v113 + 1);
          sub_1000926E0((char *)(v9 + 40 * *(_QWORD *)v109), (char *)(v9 + 40 * *(_QWORD *)v113), v9 + 40 * v114, v133);
          if (v134)
          {
            v10 = v107;
LABEL_111:
            swift_bridgeObjectRelease(v10);
            if (v130 >= -1)
            {
              *(_QWORD *)(v126 + 16) = 0;
              swift_bridgeObjectRelease(v126);
              return;
            }
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
            goto LABEL_154;
          }
          if (v114 < v110)
            goto LABEL_130;
          if (v112 > *((_QWORD *)v107 + 2))
            goto LABEL_131;
          *(_QWORD *)v109 = v110;
          *(_QWORD *)&v111[16 * v106 + 8] = v114;
          v115 = *((_QWORD *)v107 + 2);
          if (v112 >= v115)
            goto LABEL_132;
          v65 = v111;
          v10 = v107;
          v134 = 0;
          v63 = v115 - 1;
          memmove(v113, v113 + 16, 16 * (v115 - 1 - v112));
          *((_QWORD *)v107 + 2) = v115 - 1;
          v9 = v135;
          v8 = v132;
          if (v115 <= 2)
            goto LABEL_105;
        }
      }
      v63 = 1;
LABEL_105:
      v11 = v130;
      if (v8 >= v130)
        goto LABEL_115;
    }
  }
  v10 = (char *)_swiftEmptyArrayStorage;
  v63 = _swiftEmptyArrayStorage[2];
LABEL_115:
  if (v63 >= 2)
  {
    v116 = *v124;
    while (1)
    {
      v117 = v63 - 2;
      if (v63 < 2)
        break;
      if (!v116)
        goto LABEL_159;
      v118 = *(_QWORD *)&v10[16 * v117 + 32];
      v119 = *(_QWORD *)&v10[16 * v63 + 24];
      sub_1000926E0((char *)(v116 + 40 * v118), (char *)(v116 + 40 * *(_QWORD *)&v10[16 * v63 + 16]), v116 + 40 * v119, v133);
      if (v134)
        goto LABEL_111;
      if (v119 < v118)
        goto LABEL_145;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        v10 = sub_100092A54((uint64_t)v10);
      if (v117 >= *((_QWORD *)v10 + 2))
        goto LABEL_146;
      v120 = &v10[16 * v117 + 32];
      *(_QWORD *)v120 = v118;
      *((_QWORD *)v120 + 1) = v119;
      v121 = *((_QWORD *)v10 + 2);
      if (v63 > v121)
        goto LABEL_147;
      memmove(&v10[16 * v63 + 16], &v10[16 * v63 + 32], 16 * (v121 - v63));
      *((_QWORD *)v10 + 2) = v121 - 1;
      v63 = v121 - 1;
      if (v121 <= 2)
        goto LABEL_126;
    }
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
LABEL_126:
  swift_bridgeObjectRelease(v10);
  if (v130 < -1)
    goto LABEL_155;
  *(_QWORD *)(v126 + 16) = 0;
  swift_bridgeObjectRelease(v126);
}

uint64_t sub_1000925A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v22 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v24 = *a4;
    v5 = (_QWORD *)(*a4 + 40 * a3 + 32);
    while (2)
    {
      v6 = (_QWORD *)(v24 + 40 * v4);
      v7 = v6[2];
      v8 = v6[3];
      v9 = v6[4];
      v10 = v22;
      v23 = v5;
      do
      {
        v12 = *(v5 - 7);
        v11 = *(v5 - 6);
        v13 = *(v5 - 5);
        v14 = v8 == v11 && v9 == v13;
        if (v14
          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, *(v5 - 6), *(v5 - 5), 0), (result & 1) != 0))
        {
          if (v7 >= v12)
            break;
        }
        else
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v11, v13, 1);
          if ((result & 1) == 0)
            break;
        }
        if (!v24)
        {
          __break(1u);
          return result;
        }
        v15 = v5 - 4;
        v9 = *v5;
        v16 = v5 - 9;
        v17 = *(v5 - 5);
        *(v5 - 5) = *v5;
        v5 -= 5;
        v18 = v5[1];
        v19 = v5[2];
        v7 = v5[3];
        v8 = v5[4];
        v20 = v16[1];
        *(_OWORD *)v15 = *v16;
        *((_OWORD *)v15 + 1) = v20;
        v15[4] = v17;
        *(v5 - 4) = v18;
        *(v5 - 3) = v19;
        *(v5 - 2) = v7;
        *(v5 - 1) = v8;
        ++v10;
      }
      while (v4 != v10);
      ++v4;
      v5 = v23 + 5;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_1000926E0(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  char v22;
  char *v23;
  char v25;
  __int128 v27;
  __int128 v28;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  char *v40;
  BOOL v41;
  char v42;
  BOOL v43;
  __int128 v44;
  __int128 v45;
  char *v48;
  char *v51;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  v7 = (a2 - a1) / 40;
  v8 = a3 - (_QWORD)a2;
  v9 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  if (v7 >= v9)
  {
    sub_1000311F4(a2, (uint64_t)(a3 - (_QWORD)a2) / 40, a4);
    v11 = a4;
    v12 = &a4[40 * v9];
    if (v5 >= v4 || v8 < 40)
      goto LABEL_54;
    v30 = a3 - 40;
    while (1)
    {
      v31 = (char *)(v30 + 40);
      v32 = *((_QWORD *)v12 - 3);
      v33 = *((_QWORD *)v12 - 2);
      v34 = *((_QWORD *)v12 - 1);
      v35 = *((_QWORD *)v4 - 3);
      v36 = *((_QWORD *)v4 - 2);
      v37 = *((_QWORD *)v4 - 1);
      v38 = v33 == v36 && v34 == v37;
      if (v38
        || (v48 = v12,
            v39 = _stringCompareWithSmolCheck(_:_:expecting:)(*((_QWORD *)v12 - 2), *((_QWORD *)v12 - 1), *((_QWORD *)v4 - 2), *((_QWORD *)v4 - 1), 0), v12 = v48, v31 = (char *)(v30 + 40), v11 = a4, (v39 & 1) != 0))
      {
        if (v32 < v35)
          goto LABEL_38;
      }
      else
      {
        v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v36, v37, 1);
        v12 = v48;
        v31 = (char *)(v30 + 40);
        v11 = a4;
        if ((v42 & 1) != 0)
        {
LABEL_38:
          v40 = v4 - 40;
          v41 = v31 != v4 || v30 >= (unint64_t)v4;
          v4 -= 40;
          if (!v41)
            goto LABEL_50;
          goto LABEL_49;
        }
      }
      v40 = v12 - 40;
      v43 = v31 != v12 || v30 >= (unint64_t)v12;
      v12 -= 40;
      if (!v43)
        goto LABEL_50;
LABEL_49:
      v44 = *(_OWORD *)v40;
      v45 = *((_OWORD *)v40 + 1);
      *(_QWORD *)(v30 + 32) = *((_QWORD *)v40 + 4);
      *(_OWORD *)v30 = v44;
      *(_OWORD *)(v30 + 16) = v45;
LABEL_50:
      v30 -= 40;
      if (v4 <= v5 || v12 <= v11)
        goto LABEL_54;
    }
  }
  sub_1000311F4(a1, (a2 - a1) / 40, a4);
  v11 = a4;
  v12 = &a4[40 * v7];
  if ((unint64_t)v4 < a3 && v6 >= 40)
  {
    v13 = a3;
    do
    {
      v14 = *((_QWORD *)v4 + 2);
      v15 = *((_QWORD *)v4 + 3);
      v16 = *((_QWORD *)v4 + 4);
      v17 = *((_QWORD *)v11 + 2);
      v18 = *((_QWORD *)v11 + 3);
      v19 = *((_QWORD *)v11 + 4);
      v20 = v15 == v18 && v16 == v19;
      if (v20
        || (v51 = v11,
            v21 = v12,
            v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*((_QWORD *)v4 + 3), *((_QWORD *)v4 + 4), *((_QWORD *)v11 + 3), v19, 0), v13 = a3, v12 = v21, v11 = v51, (v22 & 1) != 0))
      {
        if (v14 < v17)
          goto LABEL_11;
      }
      else
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v18, v19, 1);
        v13 = a3;
        v12 = v21;
        v11 = v51;
        if ((v25 & 1) != 0)
        {
LABEL_11:
          v20 = v5 == v4;
          v23 = v4;
          v4 += 40;
          if (v20 && v5 < v4)
            goto LABEL_23;
          goto LABEL_22;
        }
      }
      v20 = v5 == v11;
      v23 = v11;
      v11 += 40;
      if (v20 && v5 < v11)
        goto LABEL_23;
LABEL_22:
      v27 = *(_OWORD *)v23;
      v28 = *((_OWORD *)v23 + 1);
      *((_QWORD *)v5 + 4) = *((_QWORD *)v23 + 4);
      *(_OWORD *)v5 = v27;
      *((_OWORD *)v5 + 1) = v28;
LABEL_23:
      v5 += 40;
    }
    while (v11 < v12 && (unint64_t)v4 < v13);
  }
  v4 = v5;
LABEL_54:
  sub_1000311F4(v11, (v12 - v11) / 40, v4);
  return 1;
}

char *sub_100092968(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001BE7C(&qword_10012A960);
    v11 = (char *)sub_1000100C8(v10, 16 * v9 + 32);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13)
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  sub_1000117B4();
  return v11;
}

char *sub_100092A54(uint64_t a1)
{
  return sub_100092968(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unsigned __int8 *sub_100092A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v7 = sub_100093410();
  swift_bridgeObjectRetain(a4);
  v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  v10 = v8;
  v11 = v9;
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v13 = HIBYTE(v11) & 0xF;
    v18 = v10;
    v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }
  v10 = sub_100092DD4(v8, v9);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  v11 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }
LABEL_7:
  v16 = sub_100092B58(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16;
}

unsigned __int8 *sub_100092B58(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v15 = a2 - 1;
      if (a2 != 1)
      {
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        if (result)
        {
          v9 = 0;
          v19 = result + 1;
          do
          {
            v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                v13 = 0;
                if (v20 < 0x61 || v20 >= v18)
                  return (unsigned __int8 *)v13;
                v21 = -87;
              }
              else
              {
                v21 = -55;
              }
            }
            else
            {
              v21 = -48;
            }
            v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21)))
              return 0;
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v23 = a3 + 48;
        v24 = a3 + 55;
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v23 = 58;
        }
        else
        {
          v25 = 97;
          v24 = 65;
        }
        if (result)
        {
          v26 = 0;
          do
          {
            v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                v13 = 0;
                if (v27 < 0x61 || v27 >= v25)
                  return (unsigned __int8 *)v13;
                v28 = -87;
              }
              else
              {
                v28 = -55;
              }
            }
            else
            {
              v28 = -48;
            }
            v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
              return 0;
            v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28)))
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12)))
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100092DD4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = sub_100092E30((uint64_t)sub_100092E2C, 0, a1, a2);
  v4 = v3;
  v7 = sub_100092E64(v2, v5, v6, v3);
  swift_bridgeObjectRelease(v4);
  return v7;
}

uint64_t sub_100092E30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3;
  v5 = 7;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  return String.subscript.getter(15, v5 | (v4 << 16));
}

uint64_t sub_100092E64(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_100092FA8(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100091CCC(v12, 0);
      v5 = sub_100093094((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release();
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_100092FA8(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_100091D2C(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_100091D2C(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_100093094(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
    goto LABEL_38;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_35:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    result = v12;
    if ((v12 & 0xC) == v15)
      result = sub_100091D2C(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      result = sub_100091D2C(v12, a6, a7);
      v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16)
      goto LABEL_37;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_35;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void sub_100093294()
{
  sub_1000529B8();
}

uint64_t sub_1000932A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001BE7C(&qword_10012A968);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000932E8()
{
  sub_10005299C();
}

void sub_1000932FC()
{
  sub_100052A68();
}

void sub_100093310(uint64_t a1)
{
  sub_100052B20(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_100093324()
{
  sub_100052DC8();
}

uint64_t sub_100093338(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  _QWORD v15[2];
  char v16;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v15;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_10009344C((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v16 = v14 & 1;
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t sub_100093410()
{
  unint64_t result;

  result = qword_10012A978;
  if (!qword_10012A978)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_10012A978);
  }
  return result;
}

uint64_t sub_10009344C(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;

  v11 = a3;
  v12 = result;
  v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v14 = 4 << v13;
  v15 = a3 & 0xC;
  v16 = a3;
  if (v15 == 4 << v13)
  {
    result = sub_100091D2C(a3, a5, a6);
    v16 = result;
  }
  v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0)
      v19 = HIBYTE(a6) & 0xF;
    if (v19 < v16 >> 16)
      goto LABEL_96;
    result = String.UTF8View._foreignDistance(from:to:)(15, v16, a5, a6);
    v18 = result;
    v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    v20 = v17;
    result = sub_100091D2C(v11, a5, a6);
    v17 = v20;
    v11 = result;
  }
  if ((a4 & 0xC) == v14)
  {
    v21 = a4;
    v22 = v17;
    result = sub_100091D2C(v21, a5, a6);
    v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000) == 0)
      goto LABEL_11;
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0)
    v23 = v17;
  if (v23 < v11 >> 16)
    goto LABEL_92;
  if (v23 < a4 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v11, a4, a5, a6);
LABEL_22:
  v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v24 < v18)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12)
    v25 = 0;
  v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v37 = a7 + 48;
        v38 = a7 + 55;
        v39 = a7 + 87;
        if (a7 > 10)
        {
          v37 = 58;
        }
        else
        {
          v39 = 97;
          v38 = 65;
        }
        if (v25)
        {
          v30 = 0;
          v40 = v25 + 1;
          v41 = result - 1;
          do
          {
            v42 = *v40;
            if (v42 < 0x30 || v42 >= v37)
            {
              if (v42 < 0x41 || v42 >= v38)
              {
                v35 = 0;
                if (v42 < 0x61 || v42 >= v39)
                  return v35;
                v43 = -87;
              }
              else
              {
                v43 = -55;
              }
            }
            else
            {
              v43 = -48;
            }
            v44 = v30 * a7;
            if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63)
              return 0;
            v30 = v44 + (v42 + v43);
            if (__OFADD__(v44, (v42 + v43)))
              return 0;
            ++v40;
            --v41;
          }
          while (v41);
          return v30;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v26 != 45)
  {
    if (v24 != v18)
    {
      v45 = a7 + 48;
      v46 = a7 + 55;
      v47 = a7 + 87;
      if (a7 > 10)
      {
        v45 = 58;
      }
      else
      {
        v47 = 97;
        v46 = 65;
      }
      if (v25)
      {
        v48 = 0;
        do
        {
          v49 = *v25;
          if (v49 < 0x30 || v49 >= v45)
          {
            if (v49 < 0x41 || v49 >= v46)
            {
              v35 = 0;
              if (v49 < 0x61 || v49 >= v47)
                return v35;
              v50 = -87;
            }
            else
            {
              v50 = -55;
            }
          }
          else
          {
            v50 = -48;
          }
          v51 = v48 * a7;
          if ((unsigned __int128)(v48 * (__int128)a7) >> 64 != (v48 * a7) >> 63)
            return 0;
          v48 = v51 + (v49 + v50);
          if (__OFADD__(v51, (v49 + v50)))
            return 0;
          ++v25;
          --result;
        }
        while (result);
        return v51 + (v49 + v50);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v27 = a7 + 48;
      v28 = a7 + 55;
      v29 = a7 + 87;
      if (a7 > 10)
      {
        v27 = 58;
      }
      else
      {
        v29 = 97;
        v28 = 65;
      }
      if (v25)
      {
        v30 = 0;
        v31 = v25 + 1;
        v32 = result - 1;
        while (1)
        {
          v33 = *v31;
          if (v33 < 0x30 || v33 >= v27)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              v35 = 0;
              if (v33 < 0x61 || v33 >= v29)
                return v35;
              v34 = -87;
            }
            else
            {
              v34 = -55;
            }
          }
          else
          {
            v34 = -48;
          }
          v36 = v30 * a7;
          if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63)
            return 0;
          v30 = v36 - (v33 + v34);
          if (__OFSUB__(v36, (v33 + v34)))
            return 0;
          ++v31;
          if (!--v32)
            return v30;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

id sub_10009388C()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
  qword_10012D128 = (uint64_t)result;
  return result;
}

_QWORD *sub_1000938C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  void (*v37)(unint64_t, char *, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;

  v45 = a2;
  v44 = type metadata accessor for Notification(0);
  v3 = *(_QWORD *)(v44 - 8);
  v4 = __chkstk_darwin(v44);
  v43 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v42 - v6;
  if (*(_QWORD *)(a1 + 16))
  {
    v8 = (void *)LNTranscriptChangedNotification;
    v50 = 0u;
    v51 = 0u;
    v9 = sub_10001BE7C(&qword_100129618);
    inited = swift_initStackObject(v9, &v49);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptChangedNotificationEventKey);
    v48 = v11;
    v12 = v8;
    sub_100017738();
    *(_QWORD *)(inited + 96) = &type metadata for Int;
    *(_QWORD *)(inited + 72) = 0;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptChangedNotificationStreamsKey);
    v48 = v13;
    sub_100017738();
    v14 = sub_10007FC08();
    swift_bridgeObjectRetain(a1);
    sub_100052268();
    v16 = v15;
    swift_bridgeObjectRelease(a1);
    sub_100050638(v16);
    swift_release();
    v17 = sub_100050F54();
    *(_QWORD *)(inited + 168) = v14;
    *(_QWORD *)(inited + 144) = v17;
    v18 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    Notification.init(name:object:userInfo:)(v12, &v50, v18);
    sub_10002FD68();
    v20 = v19;
    if (v19[2] >= v19[3] >> 1)
    {
      sub_10001AE78();
      v20 = v39;
    }
    v21 = sub_10001C7D0();
    v22(v21, v7, v44);
  }
  else
  {
    v20 = _swiftEmptyArrayStorage;
  }
  if (*(_QWORD *)(v45 + 16))
  {
    v42 = v3;
    v23 = (void *)LNTranscriptChangedNotification;
    v50 = 0u;
    v51 = 0u;
    v24 = v45;
    v25 = sub_10001BE7C(&qword_100129618);
    v26 = swift_initStackObject(v25, &v46);
    *(_OWORD *)(v26 + 16) = xmmword_1000EFD90;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptChangedNotificationEventKey);
    v48 = v27;
    v28 = v23;
    sub_100017724();
    *(_QWORD *)(v26 + 96) = &type metadata for Int;
    *(_QWORD *)(v26 + 72) = 1;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNTranscriptChangedNotificationStreamsKey);
    v48 = v29;
    sub_100017724();
    v30 = sub_10007FC08();
    swift_bridgeObjectRetain(v24);
    sub_100052268();
    v32 = v31;
    swift_bridgeObjectRelease(v24);
    sub_100050638(v32);
    swift_release();
    v33 = sub_100050F54();
    *(_QWORD *)(v26 + 168) = v30;
    *(_QWORD *)(v26 + 144) = v33;
    v34 = Dictionary.init(dictionaryLiteral:)(v26, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v35 = v43;
    Notification.init(name:object:userInfo:)(v28, &v50, v34);
    if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
    {
      sub_10002FD68();
      v20 = v40;
    }
    if (v20[2] >= v20[3] >> 1)
    {
      sub_10001AE78();
      v20 = v41;
    }
    v36 = sub_10001C7D0();
    v37(v36, v35, v44);
  }
  return v20;
}

ValueMetadata *type metadata accessor for NotifyingTranscriptObserver()
{
  return &type metadata for NotifyingTranscriptObserver;
}

_QWORD *sub_100093C98(uint64_t a1, uint64_t a2)
{
  NSString v4;
  char **v5;
  id v6;
  uint64_t v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  id v44;
  unint64_t v45;
  id v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  void *v50;
  void *v51;
  NSString v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  NSString v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  NSString v64;
  char **v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  unint64_t v111;
  int64_t v112;
  _QWORD *v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  _QWORD v118[2];
  _QWORD v119[2];
  void *v120;
  uint64_t v121;

  if (qword_100127E98 != -1)
LABEL_53:
    swift_once(&qword_100127E98, sub_100094480);
  v4 = sub_10001C810();
  v5 = &off_100126000;
  v6 = sub_100017760();

  v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v107 = v7;

  if (qword_100127EA0 != -1)
    swift_once(&qword_100127EA0, sub_1000944B4);
  v8 = sub_10001C810();
  v9 = sub_100017760();

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v120 = (void *)v10;
  v121 = v12;
  v119[0] = 0x69746167656E7B24;
  v119[1] = 0xEB000000007D6576;
  if (qword_100127EB0 != -1)
    swift_once(&qword_100127EB0, sub_100094C04);
  v13 = (void *)qword_10012D148;
  v14 = sub_10001C810();
  v15 = objc_msgSend(v13, "localizedStringForLocaleIdentifier:", v14);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v118[0] = v16;
  v118[1] = v18;
  v95 = sub_100012F00();
  v96 = v95;
  v104 = v95;
  v94 = v95;
  v103 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v119, v118, 0, 0, 0, 1, type metadata for String, type metadata for String);
  v106 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100127EA8 != -1)
    swift_once(&qword_100127EA8, sub_1000945B4);
  if ((qword_10012D140 & 0xC000000000000001) != 0)
  {
    if (qword_10012D140 < 0)
      v20 = qword_10012D140;
    else
      v20 = qword_10012D140 & 0xFFFFFFFFFFFFFF8;
    v99 = 0;
    v21 = 0;
    v22 = 0;
    v23 = __CocoaDictionary.makeIterator()(v20) | 0x8000000000000000;
  }
  else
  {
    v24 = -1 << *(_BYTE *)(qword_10012D140 + 32);
    v21 = ~v24;
    v99 = qword_10012D140 + 64;
    v25 = -v24;
    if (v25 < 64)
      v26 = ~(-1 << v25);
    else
      v26 = -1;
    v22 = v26 & *(_QWORD *)(qword_10012D140 + 64);
    v23 = qword_10012D140;
  }
  swift_bridgeObjectRetain();
  v31 = 0;
  v98 = (unint64_t)(v21 + 64) >> 6;
  v32 = _swiftEmptyArrayStorage;
  v97 = (char *)&type metadata for Swift.AnyObject + 8;
  v101 = a1;
  v102 = v23;
  v100 = a2;
  while (1)
  {
    v114 = v31;
    v116 = v22;
    if ((v23 & 0x8000000000000000) == 0)
      break;
    v37 = v23;
    v38 = __CocoaDictionary.Iterator.next()(v27, v28, v29, v30);
    if (!v38)
      goto LABEL_50;
    v40 = v38;
    v41 = v39;
    v119[0] = v38;
    v42 = v32;
    v43 = sub_100094D80();
    swift_unknownObjectRetain(v40);
    swift_dynamicCast(&v120, v119, v97, v43, 7);
    v44 = v120;
    swift_unknownObjectRelease(v40);
    v119[0] = v41;
    swift_unknownObjectRetain(v41);
    v45 = v43;
    v32 = v42;
    swift_dynamicCast(&v120, v119, v97, v45, 7);
    v46 = v120;
    swift_unknownObjectRelease(v41);
    v36 = v114;
    v34 = v116;
LABEL_38:
    v23 = v37;
    if (!v44)
      goto LABEL_50;
    v111 = v34;
    v112 = v36;
    v113 = v32;
    v52 = sub_10001C810();
    v109 = v46;
    v53 = objc_msgSend(v46, v5[396], v52, type metadata for String, v94, v95, v96);

    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v56 = v55;

    v57 = qword_100127EB8;
    swift_bridgeObjectRetain();
    if (v57 != -1)
      swift_once(&qword_100127EB8, sub_100094CC8);
    v58 = sub_10001C810();
    v59 = sub_100017760();

    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v62 = v61;

    v120 = (void *)v60;
    v121 = v62;
    v63._countAndFlagsBits = v54;
    v63._object = v56;
    String.append(_:)(v63);
    v117 = v56;
    swift_bridgeObjectRelease();
    v108 = v120;
    v115 = v121;
    v64 = sub_10001C810();
    v65 = v5;
    v110 = v44;
    v66 = objc_msgSend(v44, v5[396], v64);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v120 = (void *)v105;
    v121 = v107;
    a1 = 0x7265626D756E7B24;
    v67 = sub_100018480();
    v69 = sub_10001AED8(v67, v68);
    a2 = v70;
    v120 = (void *)v103;
    v121 = v106;
    v71 = sub_100018480();
    v94 = v104;
    v73 = sub_10001AED8(v71, v72);
    v75 = v74;
    swift_bridgeObjectRelease();
    v76 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
    v77 = sub_10001ABD0(v76);
    *(_OWORD *)(v77 + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(v77 + 32) = v69;
    *(_QWORD *)(v77 + 40) = a2;
    v78 = sub_10001ABD0(v76);
    *(_OWORD *)(v78 + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(v78 + 32) = v73;
    *(_QWORD *)(v78 + 40) = v75;
    v79 = v113;
    v80 = v113[2];
    if (__OFADD__(v80, 2))
    {
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v81 = v78;
    if (!swift_isUniquelyReferenced_nonNull_native(v113) || v80 + 2 > v113[3] >> 1)
    {
      sub_10002FD7C();
      v79 = v82;
    }
    a2 = v100;
    a1 = v101;
    v5 = v65;
    v83 = v79[2];
    v84 = v79[3];
    v85 = v79;
    v86 = v83 + 1;
    sub_10001B328();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v83 >= v84 >> 1)
    {
      sub_100018A70();
      v85 = v91;
    }
    v85[2] = v86;
    v87 = &v85[8 * v83];
    v87[4] = 0;
    v87[5] = 0xE000000000000000;
    v87[6] = 0;
    v87[7] = 0xE000000000000000;
    v87[8] = v54;
    v87[9] = v117;
    v87[10] = v77;
    *((_WORD *)v87 + 44) = 0;
    v88 = v83 + 2;
    v89 = v85[3];
    sub_10001B328();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v86 >= v89 >> 1)
    {
      sub_100018A70();
      v85 = v92;
    }
    v85[2] = v88;
    v90 = &v85[8 * v86];
    v32 = v85;
    v90[4] = 0;
    v90[5] = 0xE000000000000000;
    v90[6] = 0;
    v90[7] = 0xE000000000000000;
    v90[8] = v108;
    v90[9] = v115;
    v90[10] = v81;
    *((_WORD *)v90 + 44) = 0;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = swift_bridgeObjectRelease_n(0xE000000000000000, 4);
    v22 = v111;
    v31 = v112;
    v23 = v102;
  }
  if (v22)
  {
    v33 = __clz(__rbit64(v22));
    v34 = (v22 - 1) & v22;
    v35 = v33 | (v31 << 6);
    v36 = v31;
LABEL_37:
    v37 = v23;
    v50 = *(void **)(*(_QWORD *)(v23 + 48) + 8 * v35);
    v51 = *(void **)(*(_QWORD *)(v23 + 56) + 8 * v35);
    v44 = v50;
    v46 = v51;
    goto LABEL_38;
  }
  v47 = v31 + 1;
  if (__OFADD__(v31, 1))
    goto LABEL_52;
  if (v47 >= v98)
    goto LABEL_50;
  v48 = *(_QWORD *)(v99 + 8 * v47);
  v36 = v31 + 1;
  if (v48)
    goto LABEL_36;
  v36 = v31 + 2;
  if (v31 + 2 >= v98)
    goto LABEL_50;
  v48 = *(_QWORD *)(v99 + 8 * v36);
  if (v48)
    goto LABEL_36;
  v36 = v31 + 3;
  if (v31 + 3 >= v98)
    goto LABEL_50;
  v48 = *(_QWORD *)(v99 + 8 * v36);
  if (v48)
    goto LABEL_36;
  v36 = v31 + 4;
  if (v31 + 4 >= v98)
    goto LABEL_50;
  v48 = *(_QWORD *)(v99 + 8 * v36);
  if (v48)
  {
LABEL_36:
    v34 = (v48 - 1) & v48;
    v35 = __clz(__rbit64(v48)) + (v36 << 6);
    goto LABEL_37;
  }
  v49 = v31 + 5;
  while (v49 < v98)
  {
    v48 = *(_QWORD *)(v99 + 8 * v49++);
    if (v48)
    {
      v36 = v49 - 1;
      goto LABEL_36;
    }
  }
LABEL_50:
  sub_1000358EC(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v32;
}

id sub_100094480(uint64_t a1)
{
  return sub_1000944E8(a1, 0x80000001000F5630, 0x7265626D756E7B24, 0xE90000000000007DLL, &qword_10012D130);
}

id sub_1000944B4(uint64_t a1)
{
  return sub_1000944E8(a1, 0x80000001000F55E0, 0xD000000000000015, 0x80000001000F5610, &qword_10012D138);
}

id sub_1000944E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id result;
  uint64_t v15;

  v9 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v11, 1, 1, v12);
  v13 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  result = sub_10008E4CC(0xD000000000000029, a2, a3, a4, 0, 0, (uint64_t)v11);
  *a5 = result;
  return result;
}

uint64_t sub_1000945B4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;
  _BYTE v25[160];

  v0 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v0);
  v2 = &v25[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = sub_10001BE7C(&qword_10012A980);
  inited = swift_initStackObject(v3, v25);
  *(_OWORD *)(inited + 16) = xmmword_1000F14E0;
  v5 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v6 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 32) = sub_10008E4CC(0xD000000000000020, 0x80000001000F5250, 7305076, 0xE300000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v7 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 40) = sub_10008E4CC(0xD000000000000023, 0x80000001000F5280, 50, 0xE100000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v8 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 48) = sub_10008E4CC(0xD000000000000021, 0x80000001000F52B0, 1920298854, 0xE400000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v9 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 56) = sub_10008E4CC(0xD000000000000024, 0x80000001000F52E0, 52, 0xE100000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v10 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 64) = sub_10008E4CC(0xD000000000000025, 0x80000001000F5310, 0x6E65657472696874, 0xE800000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v11 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 72) = sub_10008E4CC(0xD000000000000028, 0x80000001000F5340, 13105, 0xE200000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v12 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 80) = sub_10008E4CC(0xD000000000000026, 0x80000001000F5370, 0x6E6F79746E657774, 0xE900000000000065, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v13 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 88) = sub_10008E4CC(0xD000000000000029, 0x80000001000F53A0, 12594, 0xE200000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v14 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 96) = sub_10008E4CC(0xD000000000000023, 0x80000001000F53D0, 0x797472696874, 0xE600000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v15 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 104) = sub_10008E4CC(0xD000000000000026, 0x80000001000F5400, 12339, 0xE200000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v16 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 112) = sub_10008E4CC(0xD00000000000002ELL, 0x80000001000F5430, 0xD000000000000011, 0x80000001000F5460, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v17 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 120) = sub_10008E4CC(0xD000000000000031, 0x80000001000F5480, 3159345, 0xE300000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v18 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 128) = sub_10008E4CC(0xD00000000000002BLL, 0x80000001000F54C0, 0x6E696F70206F7774, 0xEE00657669662074, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v19 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 136) = sub_10008E4CC(0xD00000000000002ELL, 0x80000001000F54F0, 3485234, 0xE300000000000000, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v20 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 144) = sub_10008E4CC(0xD00000000000002FLL, 0x80000001000F5520, 0xD000000000000012, 0x80000001000F5550, 0, 0, (uint64_t)v2);
  sub_100014360((uint64_t)v2, 1, 1, v5);
  v21 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  *(_QWORD *)(inited + 152) = sub_10008E4CC(0xD000000000000032, 0x80000001000F5570, 875444017, 0xE400000000000000, 0, 0, (uint64_t)v2);
  v22 = sub_100094D80();
  v23 = sub_100094DBC();
  result = Dictionary.init(dictionaryLiteral:)(inited, v22, v22, v23);
  qword_10012D140 = result;
  return result;
}

id sub_100094C04()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  id v4;
  id result;
  uint64_t v6;

  v0 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v2, 1, 1, v3);
  v4 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  result = sub_10008E4CC(0xD000000000000025, 0x80000001000F55B0, 0x657669746167656ELL, 0xE800000000000000, 0, 0, (uint64_t)v2);
  qword_10012D148 = (uint64_t)result;
  return result;
}

id sub_100094CC8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  id v4;
  id result;
  uint64_t v6;

  v0 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v2, 1, 1, v3);
  v4 = objc_allocWithZone((Class)LNStaticDeferredLocalizedString);
  result = sub_10008E4CC(0xD000000000000028, 0x80000001000F5220, 45, 0xE100000000000000, 0, 0, (uint64_t)v2);
  qword_10012D150 = (uint64_t)result;
  return result;
}

unint64_t sub_100094D80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100128E50;
  if (!qword_100128E50)
  {
    v1 = objc_opt_self(LNStaticDeferredLocalizedString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100128E50);
  }
  return result;
}

unint64_t sub_100094DBC()
{
  unint64_t result;
  unint64_t v1;

  result = qword_10012A988;
  if (!qword_10012A988)
  {
    v1 = sub_100094D80();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10012A988);
  }
  return result;
}

uint64_t sub_100094DFC(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = objc_msgSend(a1, "bundleIdentifier");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = sub_10002D8B0(v5, v7, a2);
  swift_bridgeObjectRelease(v7);
  if (v8)
  {
    v9 = objc_msgSend(a1, "actionIdentifier");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    sub_10002ECDC(v10, v12, v8);
    LOBYTE(v9) = v13;
    swift_bridgeObjectRelease(v12);
    sub_1000117B4();
    v14 = v9 ^ 1;
  }
  else
  {
    v14 = 1;
  }
  return v14 & 1;
}

#error "100094F74: call analysis failed (funcsize=78)"

unint64_t sub_100095008()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001286C0;
  if (!qword_1001286C0)
  {
    v1 = objc_opt_self(LNSystemProtocol);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001286C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutDenyList()
{
  return &type metadata for AppShortcutDenyList;
}

void sub_100095054(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  unsigned __int8 v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSString v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD v56[2];
  __int128 v57;
  char *v58;
  _QWORD *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _UNKNOWN **v70;
  _QWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;

  v3 = v2;
  v60 = a2;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for LSLinkBundleRecord(0);
  __chkstk_darwin(v64);
  v63 = (_QWORD *)((char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v59 = (_QWORD *)((char *)v56 - v12);
  v76 = _swiftEmptyArrayStorage;
  v67 = *(_QWORD *)(a1 + 16);
  if (!v67)
  {
LABEL_26:

    swift_bridgeObjectRelease();
    return;
  }
  v58 = v8;
  v61 = v6;
  v62 = v5;
  v13 = 0;
  v14 = a1 + 32;
  *(_QWORD *)&v11 = 136315138;
  v57 = v11;
  v56[1] = (char *)&type metadata for Any + 8;
  v66 = a1;
  while (v13 < *(_QWORD *)(a1 + 16))
  {
    sub_100019A60(v14, (uint64_t)&v74);
    v15 = sub_10000E858(&v74, v75);
    sub_10000DE64(0, &qword_10012ADF0, LSBundleRecord_ptr);
    v16 = *v15;
    v17 = v15[1];
    v18 = v3;
    v19 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(*v15, v17, 1);
    if (v3)
    {
      v3 = 0;
      swift_errorRelease(v18);
      type metadata accessor for DaemonRecord(0, v20);
      v21 = (void *)static DaemonRecord.from(bundleIdentifier:)(v16, v17);

      v22 = (uint64_t)v15;
      v23 = v63;
      sub_1000207A8(v22, (uint64_t)v63, type metadata accessor for LSLinkBundleRecord);
      if (!v21)
      {
        type metadata accessor for FrameworkRecord(0);
        v24 = (void *)static FrameworkRecord.from(bundleIdentifier:)(*v23, v23[1]);
        if (!v24)
          goto LABEL_18;

      }
      sub_10001DBC8((uint64_t)v23, type metadata accessor for LSLinkBundleRecord);
    }
    else
    {
      v33 = v19;
      v34 = objc_msgSend(v19, "swift_isAppIntentsEnabled");
      v35 = (uint64_t)v15;
      v23 = v59;
      sub_1000207A8(v35, (uint64_t)v59, type metadata accessor for LSLinkBundleRecord);
      if ((v34 & 1) == 0)
      {

LABEL_18:
        sub_10001DBC8((uint64_t)v23, type metadata accessor for LSLinkBundleRecord);
LABEL_19:
        v65 = 0;
        v40 = qword_100127EC8;
        v41 = v60;
        if (v40 != -1)
          swift_once(&qword_100127EC8, sub_100099764);
        v42 = v62;
        v43 = sub_100012A40(v62, (uint64_t)qword_10012D1A8);
        v44 = v61;
        v45 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v58, v43, v42);

        sub_100019A60((uint64_t)&v74, (uint64_t)v71);
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v47, v48))
        {
          v49 = swift_slowAlloc(12, -1);
          v50 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v68 = v50;
          *(_DWORD *)v49 = v57;
          v52 = v72;
          v51 = v73;
          sub_10000E858(v71, v72);
          v53 = v52;
          a1 = v66;
          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v51 + 8) + 8))(v53);
          *(_QWORD *)(v49 + 4) = sub_10000FBEC(v54, v55, (uint64_t *)&v68);
          swift_bridgeObjectRelease();
          sub_10000E87C(v71);
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "%s is not link enabled", (uint8_t *)v49, 0xCu);
          swift_arrayDestroy(v50, 1);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v49, -1, -1);

          (*(void (**)(char *, uint64_t))(v61 + 8))(v45, v62);
        }
        else
        {
          sub_10000E87C(v71);

          (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v42);
        }
        sub_10000E87C(&v74);
        v3 = v65;
        goto LABEL_25;
      }
      v36 = (void *)objc_opt_self(APApplication);
      v37 = (uint64_t)v23;
      v38 = String._bridgeToObjectiveC()();
      v39 = objc_msgSend(v36, "applicationWithBundleIdentifier:", v38);

      LOBYTE(v38) = objc_msgSend(v39, "isHidden");
      sub_10001DBC8(v37, type metadata accessor for LSLinkBundleRecord);
      if ((v38 & 1) != 0)
        goto LABEL_19;
    }
    sub_100019A48(&v74, (uint64_t)v71);
    v25 = v76;
    if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) == 0)
    {
      sub_100052580();
      v25 = v76;
    }
    v26 = v25[2];
    if (v26 >= v25[3] >> 1)
    {
      sub_100052580();
      v25 = v76;
    }
    v27 = sub_100016184((uint64_t)v71, v72);
    v28 = __chkstk_darwin(v27);
    v30 = (char *)v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v31 + 16))(v30, v28);
    v69 = v64;
    v70 = &off_10011DFB0;
    v32 = sub_10001795C(&v68);
    sub_1000BB03C((uint64_t)v30, (uint64_t)v32, type metadata accessor for LSLinkBundleRecord);
    v25[2] = v26 + 1;
    sub_100019A48(&v68, (uint64_t)&v25[5 * v26 + 4]);
    sub_10000E87C(v71);
    a1 = v66;
LABEL_25:
    ++v13;
    v14 += 40;
    if (v67 == v13)
      goto LABEL_26;
  }
  __break(1u);
}

void sub_10009563C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  *(_QWORD *)(swift_allocObject(&unk_10011D838, 24, 7) + 16) = a2;
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 40;
    do
    {
      v7 = (uint64_t *)(v6 + 16 * v5);
      v8 = v5;
      while (1)
      {
        if (v8 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v10 = *(v7 - 1);
        v9 = *v7;
        v5 = v8 + 1;
        swift_bridgeObjectRetain();
        sub_10002ECDC(v10, v9, a2);
        if ((v11 & 1) != 0)
          break;
        swift_bridgeObjectRelease();
        v7 += 2;
        ++v8;
        if (v4 == v5)
          goto LABEL_13;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10001573C();
      v12 = _swiftEmptyArrayStorage[2];
      v13 = v12 + 1;
      if (v12 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_10001573C();
        v13 = v12 + 1;
      }
      _swiftEmptyArrayStorage[2] = v13;
      v14 = &_swiftEmptyArrayStorage[2 * v12];
      v14[4] = v10;
      v14[5] = v9;
      v6 = a1 + 40;
    }
    while (v4 - 1 != v8);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_1000957CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  sub_10000C038();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = v0;
    sub_1000BE6B0();
    v3 = (_QWORD *)(v2 + 32);
    do
    {
      v5 = v3[3];
      v4 = v3[4];
      sub_10000E858(v3, v5);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v5);
      v8 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_1000BE63C();
      v9 = _swiftEmptyArrayStorage[2];
      if (v9 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_1000BE63C();
      _swiftEmptyArrayStorage[2] = v9 + 1;
      v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v6;
      v10[5] = v8;
      v3 += 5;
      --v1;
    }
    while (v1);
  }
  sub_1000117E8();
}

void sub_1000958B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  sub_10000C038();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = v0;
    sub_1000BE6B0();
    v3 = *(_QWORD *)(type metadata accessor for LNBundleRecord(0) - 8);
    v4 = *(_QWORD *)(v3 + 72);
    v5 = (uint64_t *)(((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v2 + 8);
    do
    {
      v7 = *(v5 - 1);
      v6 = *v5;
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      sub_10000C030();
      if (v9 >= v8 >> 1)
        sub_1000BE63C();
      v5 = (uint64_t *)((char *)v5 + v4);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v7;
      v10[5] = v6;
      --v1;
    }
    while (v1);
  }
  sub_1000117E8();
}

void sub_100095974(void (*a1)(_QWORD *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v21;
  _QWORD v22[4];
  _QWORD *v23;

  v4 = v3;
  v5 = a3;
  if (a3 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    v23 = _swiftEmptyArrayStorage;
    sub_1000525B4();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    v7 = 0;
    v8 = v23;
    v18 = v5;
    v19 = v5 & 0xC000000000000001;
    v17 = v6;
    while (v6 != v7)
    {
      if (v19)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      else
        v9 = sub_1000137BC(v5 + 8 * v7);
      v10 = v9;
      v21 = v9;
      a1(v22, &v21);
      if (v4)
      {
        swift_release();

        return;
      }

      v12 = v22[0];
      v11 = v22[1];
      v13 = v22[2];
      v14 = v22[3];
      v23 = v8;
      v15 = v8[2];
      if (v15 >= v8[3] >> 1)
      {
        sub_1000525B4();
        v8 = v23;
      }
      ++v7;
      v8[2] = v15 + 1;
      v16 = &v8[4 * v15];
      v16[4] = v12;
      v16[5] = v11;
      v16[6] = v13;
      v16[7] = v14;
      v6 = v17;
      v5 = v18;
      v4 = 0;
      if (v17 == v7)
        return;
    }
    __break(1u);
LABEL_18:
    sub_1000BEFBC();
    sub_10000BFF4();
    v6 = sub_1000058C8();
    swift_bridgeObjectRelease(v5);
  }
}

_QWORD *sub_100095B00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001573C();
    v3 = (_QWORD *)(a1 + 32);
    do
    {
      v4 = v3[3];
      v5 = v3[4];
      sub_10000E858(v3, v4);
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      v8 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10001573C();
      v9 = _swiftEmptyArrayStorage[2];
      if (v9 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_10001573C();
      _swiftEmptyArrayStorage[2] = v9 + 1;
      v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v6;
      v10[5] = v8;
      v3 += 5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_100095C1C(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  id v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    v22 = _swiftEmptyArrayStorage;
    sub_1000528CC(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    v7 = 0;
    v8 = v22;
    while (v6 != v7)
    {
      if ((a3 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a3);
      else
        v9 = *(id *)(a3 + 8 * v7 + 32);
      v10 = v9;
      v19 = v9;
      a1(&v20, &v19);
      if (v4)
      {
        swift_release();

        return;
      }
      v4 = 0;

      v11 = v20;
      v12 = v21;
      v22 = v8;
      v14 = v8[2];
      v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        v17 = v21;
        sub_1000528CC(v13 > 1, v14 + 1, 1);
        v12 = v17;
        v8 = v22;
      }
      ++v7;
      v8[2] = v14 + 1;
      v15 = &v8[3 * v14];
      v15[4] = v11;
      *(_OWORD *)(v15 + 5) = v12;
      if (v6 == v7)
        return;
    }
    __break(1u);
LABEL_18:
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
}

_QWORD *sub_100095DB8(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD v37[4];
  __n128 v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  uint64_t v44;
  _UNKNOWN **v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48[3];
  char *v49;

  v5 = type metadata accessor for Logger(0);
  __chkstk_darwin(v5);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v40 = v7;
    v41 = v6;
    v37[2] = v2;
    v39 = a2;
    v49 = &a2[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource];
    v11 = swift_bridgeObjectRetain();
    v12 = _swiftEmptyArrayStorage;
    v37[1] = a1;
    v13 = (unint64_t *)(a1 + 40);
    v11.n128_u64[0] = 136315138;
    v38 = v11;
    v37[3] = (char *)&type metadata for Any + 8;
    do
    {
      v15 = *(v13 - 1);
      v14 = *v13;
      sub_10000E858(v49, *((_QWORD *)v49 + 3));
      swift_bridgeObjectRetain();
      sub_1000B71CC((uint64_t)&v46);
      if (v47)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v42 = v12;
        v16 = qword_100127EC8;
        v17 = v39;
        if (v16 != -1)
          swift_once(&qword_100127EC8, sub_100099764);
        v18 = v41;
        v19 = sub_100012A40(v41, (uint64_t)qword_10012D1A8);
        v20 = v40;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v9, v19, v18);

        v21 = swift_bridgeObjectRetain_n(v14, 2);
        v22 = Logger.logObject.getter(v21);
        v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = swift_slowAlloc(12, -1);
          v25 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v48[0] = v25;
          *(_DWORD *)v24 = v38.n128_u32[0];
          swift_bridgeObjectRetain();
          *(_QWORD *)(v24 + 4) = sub_10000FBEC(v15, v14, (uint64_t *)v48);
          swift_bridgeObjectRelease_n(v14, 3);
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to map %s", (uint8_t *)v24, 0xCu);
          swift_arrayDestroy(v25, 1);
          swift_slowDealloc(v25, -1, -1);
          swift_slowDealloc(v24, -1, -1);

          (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
        }
        else
        {

          swift_bridgeObjectRelease_n(v14, 2);
          (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v18);
        }
        swift_bridgeObjectRelease();
        v12 = v42;
      }
      if (v47)
      {
        sub_100019A48(&v46, (uint64_t)v48);
        sub_100019A48(v48, (uint64_t)&v46);
        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
        {
          sub_10002FA78();
          v12 = v34;
        }
        v26 = v12[2];
        if (v26 >= v12[3] >> 1)
        {
          sub_10002FA78();
          v27 = v35;
        }
        else
        {
          v27 = v12;
        }
        v28 = sub_100016184((uint64_t)&v46, v47);
        v29 = __chkstk_darwin(v28);
        v31 = (char *)v37 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v32 + 16))(v31, v29);
        v44 = type metadata accessor for LSLinkBundleRecord(0);
        v45 = &off_10011DFB0;
        v33 = sub_10001795C(&v43);
        sub_1000BB03C((uint64_t)v31, (uint64_t)v33, type metadata accessor for LSLinkBundleRecord);
        v12 = v27;
        v27[2] = v26 + 1;
        sub_100019A48(&v43, (uint64_t)&v27[5 * v26 + 4]);
        sub_10000E87C(&v46);
      }
      else
      {
        sub_1000131E0((uint64_t)&v46, &qword_10012ADF8);
      }
      v13 += 2;
      --v10;
    }
    while (v10);

    swift_bridgeObjectRelease();
  }
  else
  {

    return _swiftEmptyArrayStorage;
  }
  return v12;
}

void sub_1000961DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  _QWORD v39[5];
  uint64_t v40;

  v2 = sub_10001BE7C(&qword_100129FE0);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LNBundleRecord(0);
  v40 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v35 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v34 = (uint64_t)&v31 - v8;
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - v13;
  sub_10004B988(a1, v39);
  v15 = v39[0];
  v16 = v39[3];
  v17 = v39[4];
  v37 = v39[1];
  v38 = (unint64_t)(v39[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  v36 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_20;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v20 >= v38)
      goto LABEL_27;
    v21 = *(_QWORD *)(v37 + 8 * v20);
    v22 = v16 + 1;
    if (!v21)
    {
      v22 = v16 + 2;
      if (v16 + 2 >= v38)
        goto LABEL_27;
      v21 = *(_QWORD *)(v37 + 8 * v22);
      if (!v21)
      {
        v22 = v16 + 3;
        if (v16 + 3 >= v38)
          goto LABEL_27;
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          v22 = v16 + 4;
          if (v16 + 4 >= v38)
            goto LABEL_27;
          v21 = *(_QWORD *)(v37 + 8 * v22);
          if (!v21)
          {
            v22 = v16 + 5;
            if (v16 + 5 >= v38)
              goto LABEL_27;
            v21 = *(_QWORD *)(v37 + 8 * v22);
            if (!v21)
            {
              v23 = v16 + 6;
              while (v23 < v38)
              {
                v21 = *(_QWORD *)(v37 + 8 * v23++);
                if (v21)
                {
                  v22 = v23 - 1;
                  goto LABEL_19;
                }
              }
LABEL_27:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_19:
    v17 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v22 << 6);
    v16 = v22;
LABEL_20:
    v24 = *(_QWORD *)(v40 + 72);
    sub_1000207A8(*(_QWORD *)(v15 + 56) + v24 * v19, (uint64_t)v14, type metadata accessor for LNBundleRecord);
    sub_1000BB03C((uint64_t)v14, (uint64_t)v11, type metadata accessor for LNBundleRecord);
    sub_1000207A8((uint64_t)v11, (uint64_t)v4, type metadata accessor for LNBundleRecord);
    sub_100014360((uint64_t)v4, 0, 1, v5);
    sub_10001DBC8((uint64_t)v11, type metadata accessor for LNBundleRecord);
    if (sub_10001C93C((uint64_t)v4, 1, v5) == 1)
    {
      sub_1000131E0((uint64_t)v4, &qword_100129FE0);
    }
    else
    {
      sub_1000BB03C((uint64_t)v4, v34, type metadata accessor for LNBundleRecord);
      sub_1000BB03C(v34, v35, type metadata accessor for LNBundleRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      {
        sub_100030114();
        v36 = v29;
      }
      v25 = v36[2];
      v26 = v25 + 1;
      if (v25 >= v36[3] >> 1)
      {
        v32 = v36[2];
        v33 = v25 + 1;
        sub_100030114();
        v25 = v32;
        v26 = v33;
        v36 = v30;
      }
      v27 = v35;
      v28 = v36;
      v36[2] = v26;
      sub_1000BB03C(v27, (uint64_t)v28+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ v25 * v24, type metadata accessor for LNBundleRecord);
    }
  }
  __break(1u);
}

uint64_t sub_10009656C(uint64_t a1, char *a2)
{
  return sub_100096598(a2);
}

uint64_t sub_100096598(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v2 = v1;
  v4 = *a1;
  v23 = *(_OWORD *)(a1 + 8);
  v5 = *((_QWORD *)a1 + 3);
  v21 = *((_QWORD *)a1 + 4);
  v22 = v5;
  v6 = a1[40];
  v7 = *((_QWORD *)a1 + 6);
  v8 = *((_QWORD *)a1 + 7);
  v9 = sub_10001BE7C(&qword_10012B340);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(v1 + 16) + 16));
  *(_BYTE *)(v1 + 40) = 1;
  v13 = v1 + 32;
  swift_beginAccess(v13, v31, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 32) + 16))
  {
    swift_beginAccess(v13, &v24, 33, 0);
    sub_100096938((uint64_t)v12);
    swift_endAccess(&v24);
    v24 = v4 & 1;
    v25 = v23;
    v26 = v22;
    v27 = v21;
    v28 = v6 & 1;
    v29 = v7;
    v30 = v8;
    sub_1000BC720(a1);
    CheckedContinuation.resume(returning:)(&v24, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    swift_beginAccess(v2 + 24, &v24, 33, 0);
    sub_1000BC720(a1);
    sub_1000B79B8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002FA5C);
    v15 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
    sub_1000B7A10(v15, (uint64_t (*)(BOOL))sub_10002FA5C);
    v16 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v16 + 16) = v15 + 1;
    v17 = (_OWORD *)(v16 + (v15 << 6));
    v18 = *(_OWORD *)a1;
    v19 = *((_OWORD *)a1 + 1);
    v20 = *((_OWORD *)a1 + 3);
    v17[4] = *((_OWORD *)a1 + 2);
    v17[5] = v20;
    v17[2] = v18;
    v17[3] = v19;
    return swift_endAccess(&v24);
  }
}

void sub_100096758(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v4 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
  os_unfair_lock_lock(v4);
  sub_10004B3C4(v5, a2);
  os_unfair_lock_unlock(v4);
}

uint64_t sub_1000967C4(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;

  v4 = a1;
  swift_beginAccess(a1 + 24, v17, 1, 0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  if (v5)
  {
    v15 = a2;
    v16 = v4;
    v18 = v2;
    swift_bridgeObjectRetain();
    v7 = (_QWORD *)(v6 + 48);
    do
    {
      v8 = (void (*)(uint64_t))v7[4];
      if (v8)
      {
        v9 = v7[5];
        v10 = v7[1];
        v11 = v7[2];
        v12 = sub_1000BC9A8();
        v13 = swift_allocError(&type metadata for Registry.IndexingQueue.Change.ChangeError, v12, 0, 0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10006AEA4(v10, v11);
        sub_10005A6C8((uint64_t)v8, v9);
        sub_10005A6C8((uint64_t)v8, v9);
        v8(v13);
        swift_errorRelease(v13);
        sub_10007ECC8((uint64_t)v8, v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100013158(v10, v11);
        sub_10007ECC8((uint64_t)v8, v9);
      }
      v7 += 8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    a2 = v15;
    v4 = v16;
  }
  *(_QWORD *)(v4 + 24) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  return sub_100096598(a2);
}

void sub_100096938(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = sub_10001BE7C(&qword_10012B368);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  if (!*(_QWORD *)(*v1 + 16))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_100050960(*v1);
  v7 = sub_10001BE7C(&qword_10012B340);
  if (sub_10001C93C((uint64_t)v5, 1, v7) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, v5, v7);
    if (*(_QWORD *)(v6 + 16))
    {
      sub_1000B7A50(0, 1);
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void sub_100096A18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[24];

  v2 = v1;
  v4 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v4);
  v5 = (uint64_t *)(v1 + 24);
  swift_beginAccess(v5, v24, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 24) + 16))
  {
    swift_beginAccess(v5, &v20, 33, 0);
    v6 = *v5;
    if (*(_QWORD *)(*v5 + 16))
    {
      v8 = *(_QWORD *)(v6 + 80);
      v7 = *(_QWORD *)(v6 + 88);
      v9 = *(unsigned __int8 *)(v6 + 72);
      v11 = *(_QWORD *)(v6 + 56);
      v10 = *(_QWORD *)(v6 + 64);
      v13 = *(_QWORD *)(v6 + 40);
      v12 = *(_QWORD *)(v6 + 48);
      v14 = *(unsigned __int8 *)(v6 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10006AEA4(v11, v10);
      sub_10005A6C8(v8, v7);
      sub_1000B7B68(0, 1);
      swift_endAccess(&v20);
      os_unfair_lock_unlock(v4);
      *(_QWORD *)&v20 = v14;
      *((_QWORD *)&v20 + 1) = v13;
      *(_QWORD *)&v21 = v12;
      *((_QWORD *)&v21 + 1) = v11;
      *(_QWORD *)&v22 = v10;
      *((_QWORD *)&v22 + 1) = v9;
      *(_QWORD *)&v23 = v8;
      *((_QWORD *)&v23 + 1) = v7;
      v15 = sub_10001BE7C(&qword_10012B340);
      CheckedContinuation.resume(returning:)(&v20, v15);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if ((*(_BYTE *)(v2 + 40) & 1) != 0)
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v16 = sub_10001BE7C(&qword_10012B340);
      CheckedContinuation.resume(returning:)(&v20, v16);
    }
    else
    {
      swift_beginAccess(v2 + 32, &v20, 33, 0);
      sub_1000B79B8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002FA48);
      v17 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16);
      sub_1000B7A10(v17, (uint64_t (*)(BOOL))sub_10002FA48);
      v18 = *(_QWORD *)(v2 + 32);
      *(_QWORD *)(v18 + 16) = v17 + 1;
      v19 = sub_10001BE7C(&qword_10012B340);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18+ ((*(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, a1, v19);
      swift_endAccess(&v20);
    }
    os_unfair_lock_unlock(v4);
  }
}

uint64_t sub_100096C08(uint64_t a1)
{
  swift_retain();
  sub_100096A18(a1);
  return swift_release();
}

uint64_t sub_100096C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_10001BE7C(&qword_10012B3D0);
  v2 = swift_allocObject(v1, 20, 7);
  *(_DWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v0 + 40) = 0;
  return v0;
}

uint64_t sub_100096C80()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;

  sub_1000100A8();
  v1 = v0;
  v3 = v2;
  if (v0 >> 62)
    goto LABEL_19;
  v4 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_10000EC68();
  if (v4)
  {
    while (1)
    {
      v5 = (v1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1)
         : *(id *)(v1 + 32);
      v6 = v5;
      sub_1000BDB9C((uint64_t)v5, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
      v7 = sub_1000BE678();
      v9 = static NSObject.== infix(_:_:)(v7, v8);

      if ((v9 & 1) != 0)
        break;
      if (v4 != 1)
      {
        v12 = 5;
        while (1)
        {
          if ((v1 & 0xC000000000000001) != 0)
          {
            v13 = sub_1000BE684();
            v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v14);
          }
          else
          {
            v15 = *(id *)(v1 + 8 * v12);
          }
          v16 = v15;
          v17 = v12 - 3;
          if (__OFADD__(v12 - 4, 1))
            break;
          v10 = static NSObject.== infix(_:_:)(v15, v3);

          if ((v10 & 1) == 0)
          {
            ++v12;
            if (v17 != v4)
              continue;
          }
          goto LABEL_9;
        }
        __break(1u);
LABEL_19:
        sub_10000EC68();
        v4 = sub_10001E8F8();
        if (v4)
          continue;
      }
      goto LABEL_8;
    }
    v10 = 1;
  }
  else
  {
LABEL_8:
    v10 = 0;
  }
LABEL_9:
  sub_1000117B4();
  return v10 & 1;
}

uint64_t sub_100096DB4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = sub_1000BE938(v7, v8);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (sub_1000BE938(v14, v15) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100096E60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_10001BE7C(&qword_100128A30);
    v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  }
  else
  {
    v4 = _swiftEmptyDictionarySingleton;
  }
  v7 = v4;
  sub_1000B7E74(a1, 1, (uint64_t)&v7);
  v5 = v7;
  if (v1)
    swift_release();
  return v5;
}

void sub_100096EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_signpost_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  os_signpost_id_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1000100A8();
  v5 = v4;
  v7 = v6;
  v21 = sub_10001F614();
  v8 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_10001F61C();
  sub_1000BE308();
  __chkstk_darwin(v9);
  sub_10001F350();
  if (qword_100127FC0 != -1)
    swift_once(&qword_100127FC0, sub_1000C8D98);
  v10 = sub_100012A40(v0, (uint64_t)qword_10012D5F8);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v10, v0);
  v12 = off_10011E070[v5];
  v13 = OSSignposter.logHandle.getter(v11);
  v14 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v15 = v7;
    v16 = (uint8_t *)sub_100011780(2);
    *(_WORD *)v16 = 0;
    v17 = OSSignpostID.rawValue.getter();
    sub_1000BE8D8((void *)&_mh_execute_header, v13, v14, v17, v12, "", v16);
    v18 = (uint64_t)v16;
    v7 = v15;
    sub_1000133FC(v18);
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v7, v21);
  v19 = type metadata accessor for OSSignpostIntervalState(0);
  sub_1000BE558(v19);
  v20 = sub_1000BE3AC();
  OSSignpostIntervalState.init(id:isOpen:)(v20);
  sub_1000BE3A4(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100013308();
}

void sub_10009705C()
{
  sub_100097080();
}

void sub_100097080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  NSObject *v16;
  os_signpost_type_t v17;
  uint8_t *v18;
  os_signpost_id_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;

  sub_1000100A8();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = sub_10001F614();
  __chkstk_darwin(v11);
  sub_1000BE0A0();
  if (*v8 != -1)
    swift_once(v8, v2);
  v12 = type metadata accessor for OSSignposter(0);
  sub_100012A40(v12, v6);
  v13 = v4(v10);
  v15 = v14;
  v16 = OSSignposter.logHandle.getter(v13);
  v17 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    goto LABEL_12;
  if ((v15 & 1) == 0)
  {
    if (v13)
    {
LABEL_11:
      v18 = (uint8_t *)sub_100011780(2);
      v19 = sub_1000110F0(v18);
      sub_1000BE8D8((void *)&_mh_execute_header, v16, v17, v19, (const char *)v13, "", v18);
      sub_1000133FC((uint64_t)v18);
LABEL_12:

      v20 = sub_1000BE1BC();
      v21(v20);
      v22 = type metadata accessor for OSSignpostIntervalState(0);
      sub_1000BE558(v22);
      OSSignpostIntervalState.init(id:isOpen:)(v0);
      sub_100013308();
      return;
    }
    __break(1u);
  }
  if (HIDWORD(v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v13 >> 11 != 27)
  {
    if (WORD1(v13) <= 0x10u)
    {
      v13 = (unint64_t)&v23;
      goto LABEL_11;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
}

void sub_1000971EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _UNKNOWN **v78;
  _BYTE v79[24];
  _QWORD v80[5];
  _QWORD v81[6];
  void *v82;

  v5 = v4;
  v10 = sub_10001BE7C(&qword_10012ADD0);
  __chkstk_darwin(v10);
  v70 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for LSLinkBundleRecord(0);
  __chkstk_darwin(v71);
  v69 = (uint64_t)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 56);
  v72 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v73 = (unint64_t)(v14 + 63) >> 6;
  v64 = (_QWORD *)(a4 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v75 = a1;
  swift_bridgeObjectRetain();
  v17 = 0;
  v63 = (uint64_t *)(a2 + 56);
  v66 = a3;
  v65 = a4;
  v67 = a2;
  if (!v16)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v75 + 48) + 16 * i);
    v24 = *v23;
    v25 = v23[1];
    swift_bridgeObjectRetain_n(a2, 2);
    swift_bridgeObjectRetain_n(a3, 2);
    swift_retain_n(a4, 2);
    swift_bridgeObjectRetain();
    v82 = objc_autoreleasePoolPush();
    sub_10000DE64(0, &qword_10012ADF0, LSBundleRecord_ptr);
    v26 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(v24, v25, 1);
    if (v5)
    {
      swift_errorRelease(v5);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = 0;
      v27 = v82;
      goto LABEL_43;
    }
    v74 = 0;
    v28 = v26;
    v29 = (uint64_t)v70;
    sub_100097F34();
    v30 = v71;
    if (sub_10001C93C(v29, 1, v71) != 1)
    {
      v68 = v28;
      v31 = v29;
      v32 = v69;
      sub_1000BB03C(v31, v69, type metadata accessor for LSLinkBundleRecord);
      v81[3] = v30;
      v81[4] = &off_10011DFB0;
      v33 = sub_10001795C(v81);
      sub_1000207A8(v32, (uint64_t)v33, type metadata accessor for LSLinkBundleRecord);
      v35 = *v33;
      v34 = v33[1];
      if (*(_QWORD *)(a2 + 16))
      {
        v36 = *(_QWORD *)(a2 + 16);
        v37 = *(_QWORD *)(v67 + 32);
        v38 = *(_QWORD *)(v67 + 40);
        v39 = v37 == v35 && v38 == v34;
        if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v35, v34, 0) & 1) != 0)
        {
LABEL_41:
          sub_10001DBC8(v69, type metadata accessor for LSLinkBundleRecord);

          sub_10000E87C(v81);
          a4 = v65;
          swift_release();
          a3 = v66;
          swift_bridgeObjectRelease();
          a2 = v67;
          goto LABEL_42;
        }
        if (v36 != 1)
        {
          v40 = v63;
          v41 = 1;
          do
          {
            v42 = v41 + 1;
            if (__OFADD__(v41, 1))
              goto LABEL_53;
            v43 = *(v40 - 1);
            v44 = *v40;
            v45 = v43 == v35 && v44 == v34;
            if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v35, v34, 0) & 1) != 0)
              goto LABEL_41;
            v40 += 2;
            ++v41;
          }
          while (v42 != v36);
        }
      }
      swift_bridgeObjectRetain();
      sub_10002ECDC(v35, v34, v66);
      v47 = v46;
      swift_bridgeObjectRelease();
      if ((v47 & 1) == 0)
      {
        sub_100019A60((uint64_t)v81, (uint64_t)v80);
        v48 = v64;
        swift_beginAccess(v64, v79, 33, 0);
        v49 = *v48;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
        *v48 = v49;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10002FA78();
          v49 = v61;
          *v64 = v61;
        }
        v51 = *(_QWORD *)(v49 + 16);
        v52 = v71;
        if (v51 >= *(_QWORD *)(v49 + 24) >> 1)
        {
          sub_10002FA78();
          *v64 = v62;
        }
        v53 = sub_100016184((uint64_t)v80, v80[3]);
        v54 = __chkstk_darwin(v53);
        v56 = (char *)&v63 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v57 + 16))(v56, v54);
        v77 = v52;
        v78 = &off_10011DFB0;
        v58 = sub_10001795C(&v76);
        sub_1000BB03C((uint64_t)v56, (uint64_t)v58, type metadata accessor for LSLinkBundleRecord);
        v59 = *v64;
        *(_QWORD *)(v59 + 16) = v51 + 1;
        sub_100019A48(&v76, v59 + 40 * v51 + 32);
        sub_10000E87C(v80);
        swift_endAccess(v79);
      }
      goto LABEL_41;
    }

    sub_1000131E0(v29, &qword_10012ADD0);
    swift_release();
    swift_bridgeObjectRelease();
LABEL_42:
    swift_bridgeObjectRelease();
    v27 = v82;
    v5 = v74;
LABEL_43:
    objc_autoreleasePoolPop(v27);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v17 >= v73)
      goto LABEL_51;
    v21 = *(_QWORD *)(v72 + 8 * v17);
    if (!v21)
    {
      v22 = v17 + 1;
      if (v17 + 1 >= v73)
        goto LABEL_51;
      v21 = *(_QWORD *)(v72 + 8 * v22);
      if (v21)
        goto LABEL_14;
      v22 = v17 + 2;
      if (v17 + 2 >= v73)
        goto LABEL_51;
      v21 = *(_QWORD *)(v72 + 8 * v22);
      if (v21)
        goto LABEL_14;
      v22 = v17 + 3;
      if (v17 + 3 >= v73)
        goto LABEL_51;
      v21 = *(_QWORD *)(v72 + 8 * v22);
      if (v21)
      {
LABEL_14:
        v17 = v22;
        goto LABEL_15;
      }
      v60 = v17 + 4;
      if (v17 + 4 >= v73)
      {
LABEL_51:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release_n(a4, 2);
        swift_bridgeObjectRelease_n(a3, 2);
        return;
      }
      v21 = *(_QWORD *)(v72 + 8 * v60);
      v17 += 4;
      if (!v21)
        break;
    }
LABEL_15:
    v16 = (v21 - 1) & v21;
  }
  while (1)
  {
    v17 = v60 + 1;
    if (__OFADD__(v60, 1))
      break;
    if (v17 >= v73)
      goto LABEL_51;
    v21 = *(_QWORD *)(v72 + 8 * v17);
    ++v60;
    if (v21)
      goto LABEL_15;
  }
LABEL_54:
  __break(1u);
}

void sub_1000978A8(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[5];
  uint64_t v49;

  v10 = sub_10001BE7C(&qword_10012ADD0);
  __chkstk_darwin(v10);
  v42 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for LSLinkBundleRecord(0);
  __chkstk_darwin(v41);
  v39 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 56);
  v43 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v44 = (unint64_t)(v14 + 63) >> 6;
  swift_retain();
  swift_retain();
  swift_retain();
  v47 = a5;
  swift_retain();
  v45 = a1;
  swift_bridgeObjectRetain();
  v17 = 0;
  v40 = a2;
  if (!v16)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v19 = v18 | (v17 << 6);
  v20 = v49;
  while (1)
  {
    v24 = (uint64_t *)(*(_QWORD *)(v45 + 48) + 16 * v19);
    v25 = *v24;
    v26 = v24[1];
    swift_retain_n(a2, 2);
    swift_retain_n(a3, 2);
    swift_retain_n(a4, 2);
    swift_retain_n(v47, 2);
    swift_bridgeObjectRetain();
    v46 = objc_autoreleasePoolPush();
    sub_10000DE64(0, &qword_10012ADF0, LSBundleRecord_ptr);
    v27 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(v25, v26, 1);
    if (v20)
    {
      swift_errorRelease(v20);
      swift_release();
      swift_release();
      swift_release();
      v49 = 0;
    }
    else
    {
      v49 = 0;
      v28 = v27;
      v29 = v41;
      v30 = (uint64_t)v42;
      sub_100097F34();
      if (sub_10001C93C(v30, 1, v29) == 1)
      {

        sub_1000131E0(v30, &qword_10012ADD0);
        swift_release();
        swift_release();
        a2 = v40;
      }
      else
      {
        v31 = v30;
        v32 = v39;
        sub_1000BB03C(v31, v39, type metadata accessor for LSLinkBundleRecord);
        v48[3] = v29;
        v48[4] = &off_10011DFB0;
        v33 = sub_10001795C(v48);
        sub_1000207A8(v32, (uint64_t)v33, type metadata accessor for LSLinkBundleRecord);
        a2 = v40;
        v34 = v49;
        sub_10009C350(v48, v40, a3, a4, v47);
        if (v34)
        {
          sub_10001DBC8(v32, type metadata accessor for LSLinkBundleRecord);

          sub_10000E87C(v48);
          v38 = v47;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          objc_autoreleasePoolPop(v46);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release_n(v38, 3);
          swift_release_n(a4, 3);
          swift_release_n(a3, 3);
          v36 = a2;
          v37 = 3;
          goto LABEL_33;
        }
        v49 = 0;
        sub_10001DBC8(v32, type metadata accessor for LSLinkBundleRecord);

        sub_10000E87C(v48);
        swift_release();
        swift_release();
      }
      swift_release();
    }
    v35 = v46;
    swift_release();
    objc_autoreleasePoolPop(v35);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (v16)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
      break;
    if (v17 >= v44)
      goto LABEL_31;
    v22 = *(_QWORD *)(v43 + 8 * v17);
    v20 = v49;
    if (!v22)
    {
      v23 = v17 + 1;
      if (v17 + 1 >= v44)
        goto LABEL_31;
      v22 = *(_QWORD *)(v43 + 8 * v23);
      if (v22)
        goto LABEL_16;
      v23 = v17 + 2;
      if (v17 + 2 >= v44)
        goto LABEL_31;
      v22 = *(_QWORD *)(v43 + 8 * v23);
      if (v22)
        goto LABEL_16;
      v23 = v17 + 3;
      if (v17 + 3 >= v44)
        goto LABEL_31;
      v22 = *(_QWORD *)(v43 + 8 * v23);
      if (v22)
      {
LABEL_16:
        v17 = v23;
        goto LABEL_17;
      }
      v23 = v17 + 4;
      if (v17 + 4 < v44)
      {
        v22 = *(_QWORD *)(v43 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v17 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_35;
            if (v17 >= v44)
              goto LABEL_31;
            v22 = *(_QWORD *)(v43 + 8 * v17);
            ++v23;
            if (v22)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_31:
      swift_release();
      swift_release_n(a2, 2);
      swift_release_n(v47, 2);
      swift_release_n(a4, 2);
      v36 = (uint64_t)a3;
      v37 = 2;
LABEL_33:
      swift_release_n(v36, v37);
      return;
    }
LABEL_17:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v17 << 6);
  }
  __break(1u);
LABEL_35:
  __break(1u);
}

uint64_t sub_100097DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100018C14((uint64_t)sub_100005FDC);
}

uint64_t sub_100097DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100018C14((uint64_t)sub_100097DD4);
}

uint64_t sub_100097DD4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_opt_self(NSXPCConnection);
  sub_1000BE17C();
  v1 = sub_1000101B0();
  v2 = sub_10001AA38(v1, "currentConnection");
  sub_1000BDF2C((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012B164);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_100003658;
  v4 = sub_10001B334();
  return sub_1000A2974(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100097E58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100018C14((uint64_t)sub_100006060);
}

uint64_t sub_100097E6C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100018C14((uint64_t)sub_100097E7C);
}

uint64_t sub_100097E7C()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_opt_self(NSXPCConnection);
  v1 = sub_100019300();
  v2 = sub_10000FE4C((uint64_t)v1, "currentConnection");
  sub_1000BE434((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012AD3C);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_100097EF0;
  v4 = sub_10001B334();
  return sub_1000A3030(v4, v5, v6, v7, v8);
}

uint64_t sub_100097EF0()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_10001F274();
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {
    sub_1000BE120();
    v2 = sub_1000BDC20();
    return sub_10001C0B0(v2, v3);
  }
}

void sub_100097F34()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  void *v23;
  id v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  sub_1000100A8();
  v4 = v3;
  v6 = v5;
  sub_10001BE7C(&qword_10012AA18);
  sub_1000179E8();
  __chkstk_darwin(v7);
  v66 = sub_1000BE080(v8, v62);
  v64 = *(_QWORD *)(v66 - 8);
  sub_100013E18();
  __chkstk_darwin(v9);
  sub_10001778C();
  v63 = v10;
  v11 = sub_10001DCF0();
  __chkstk_darwin(v11);
  sub_10001BE7C(&qword_10012AD20);
  sub_1000179E8();
  __chkstk_darwin(v12);
  sub_1000BE908();
  v13 = type metadata accessor for URLResourceValues(0);
  v67 = *(_QWORD *)(v13 - 8);
  sub_100013E18();
  __chkstk_darwin(v14);
  v15 = sub_1000BDCA4();
  v16 = (int *)type metadata accessor for LSLinkBundleRecord(v15);
  sub_1000179E8();
  __chkstk_darwin(v17);
  sub_10001B738();
  v18 = sub_1000B9994(v4, (SEL *)&selRef_bundleIdentifier);
  if (!v19)
  {

LABEL_14:
    sub_1000BE160(v6);
    goto LABEL_17;
  }
  v68 = v11;
  *v0 = v18;
  v0[1] = v19;
  v20 = objc_opt_self(LSApplicationRecord);
  v21 = sub_1000BEE78(v20);
  v22 = &off_100126000;
  if (v21
    && (v23 = (void *)v21, v24 = v4, v21 = sub_1000B98CC(v23), v22 = &off_100126000, v25 >> 60 != 15))
  {
    v32 = (uint64_t *)((char *)v0 + v16[6]);
    *v32 = v21;
    v32[1] = v25;
  }
  else
  {
    v26 = sub_10001A8C4(v21, v22[414]);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v27 = sub_10001BE7C(&qword_10012AD28);
    v28 = sub_1000BEE28(v27);
    *(_OWORD *)(v28 + 16) = xmmword_1000EFAE0;
    sub_1000BEE20(v28, NSURLContentModificationDateKey);
    sub_100070F88(v28);
    sub_1000BEF48();
    if (v28)
    {
      sub_10000EC84();
      sub_1000059A0();
      sub_1000BE830();
      sub_1000BE8B4();
      sub_100014360(v29, v30, v31, v13);
LABEL_12:

      sub_1000131E0(v2, &qword_10012AD20);
LABEL_13:
      swift_bridgeObjectRelease(v0[1]);
      goto LABEL_14;
    }
    sub_1000BE830();
    sub_10000EC84();
    sub_1000BE114();
    sub_100014360(v40, v41, v42, v13);
    sub_1000BDF4C(v2, 1, v13);
    if (v53)
      goto LABEL_12;
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v1, v2, v13);
    URLResourceValues.contentModificationDate.getter(v50);
    v51 = sub_1000BE3AC();
    sub_1000BDF4C(v51, v52, v66);
    if (v53)
    {

      v54 = sub_1000BE3A4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8));
      sub_1000BE5E4(v54, &qword_10012AA18);
      goto LABEL_13;
    }
    v55 = sub_1000BE3E8();
    v57 = v56(v55);
    v58 = Date.timeIntervalSinceReferenceDate.getter(v57);
    v65 = sub_1000BE104(v58);
    v60 = v59;
    sub_1000BEE10(v63, *(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
    v21 = sub_1000BE3A4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8));
    v61 = (uint64_t *)((char *)v0 + v16[6]);
    *v61 = v65;
    v61[1] = v60;
  }
  v33 = sub_10001A8C4(v21, "registrationDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v34 = objc_opt_self(LSApplicationRecord);
  v35 = sub_1000BEE78(v34);
  if (v35)
  {
    v36 = v4;
    v37 = sub_10002AC94();

    v38 = v16[8];
    v39 = v37 & 1;
  }
  else
  {
    v38 = v16[8];
    v39 = 1;
  }
  *((_BYTE *)v0 + v38) = v39;
  *((_BYTE *)v0 + v16[9]) = 0;
  v43 = sub_10001A8C4(v35, "URL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v43);

  sub_1000BE114();
  sub_100014360(v44, v45, v46, v68);
  sub_1000207A8((uint64_t)v0, v6, type metadata accessor for LSLinkBundleRecord);
  sub_1000BE114();
  sub_100014360(v47, v48, v49, (uint64_t)v16);
  sub_1000BEF50((uint64_t)v0);
LABEL_17:
  sub_100013308();
}

uint64_t sub_100098354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return sub_100018C14((uint64_t)sub_100098368);
}

uint64_t sub_100098368()
{
  uint64_t *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t **v5;

  v1 = (void *)v0[11];
  objc_opt_self(NSXPCConnection);
  v2 = v1;
  sub_10000EC68();
  v3 = sub_1000101B0();
  v4 = sub_1000158F8(v3, "currentConnection");
  v0[12] = (uint64_t)v4;
  v5 = (uint64_t **)swift_task_alloc(dword_10012B38C);
  v0[13] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = (uint64_t *)sub_100098428;
  return sub_1000A3E68((uint64_t)v5, (uint64_t)v4, 0x7972747369676552, 0xEE00726F72726520, v0[11], v0[11], v0[8], v0[9]);
}

uint64_t sub_100098428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000BDFE8();
  if (!v1)

  sub_1000167A8();
  return sub_100019418(v2, v3, v4);
}

uint64_t sub_10009846C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t (*v13)(void);
  uint64_t v14;

  v1 = v0[8];
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = sub_10000C030();
    if (v2)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease(v0[8]);
    v13 = (uint64_t (*)(void))sub_1000121E0();
    return sub_1000BDD5C(v13);
  }
  sub_10000C030();
  result = sub_10001E8F8();
  v2 = result;
  if (!result)
    goto LABEL_9;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v14 = v0[8] + 32;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v0[8]);
      else
        v5 = *(id *)(v14 + 8 * v4);
      v6 = v5;
      v7 = v0[9];
      v8 = v0[10];
      ++v4;
      v9 = String._bridgeToObjectiveC()();
      v10 = (_QWORD *)sub_1000100C8((uint64_t)&unk_10011DE98, 40);
      v10[2] = v7;
      v10[3] = v8;
      v10[4] = v6;
      v0[6] = sub_1000BCA8C;
      v0[7] = v10;
      v0[2] = _NSConcreteStackBlock;
      v0[3] = 1107296256;
      v0[4] = sub_1000B1474;
      v0[5] = &unk_10011DEB0;
      v11 = _Block_copy(v0 + 2);
      sub_100016794();
      v12 = v6;
      sub_10001EE50();
      AnalyticsSendEventLazy(v9, v11);
      _Block_release(v11);

    }
    while (v2 != v4);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100098604()
{
  uint64_t v0;

  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t *sub_100098630(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return sub_1000B870C(a1, a2);
  sub_1000B8574(a1);
  return (unint64_t *)a2;
}

uint64_t sub_100098680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10001BE7C(&qword_10012B3D8);
  v1 = sub_1000100C8(v0, 72);
  *(_OWORD *)(v1 + 16) = xmmword_1000EFAE0;
  if (qword_100127E28 != -1)
    swift_once(&qword_100127E28, sub_10007F6C8);
  v2 = qword_10012CF78;
  *(_QWORD *)(v1 + 56) = &type metadata for NotifyingRegistryObserver;
  *(_QWORD *)(v1 + 64) = &off_10011D280;
  *(_QWORD *)(v1 + 32) = v2;
  qword_10012D158 = (uint64_t)sub_100098744;
  unk_10012D160 = 0;
  qword_10012D168 = (uint64_t)sub_10009878C;
  unk_10012D170 = 0;
  qword_10012D178 = (uint64_t)sub_1000987BC;
  unk_10012D180 = 0;
  qword_10012D188 = (uint64_t)sub_1000987FC;
  unk_10012D190 = 0;
  qword_10012D198 = v1;
  unk_10012D1A0 = 0x4014000000000000;
  return swift_retain();
}

void sub_100098744(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE __src[136];

  sub_1000CC16C(a1, __src);
  if (!v2)
    memcpy(a2, __src, 0x88uLL);
}

uint64_t sub_10009878C()
{
  type metadata accessor for AssistantPrebuiltLibrary(0);
  return static AssistantPrebuiltLibrary.library.getter();
}

uint64_t sub_1000987BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for LSLinkBundleSource();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_10011D648;
  *a1 = result;
  return result;
}

uint64_t (*sub_1000987FC())(uint64_t a1)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  v1 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - v9;
  v11 = (uint64_t (*)(uint64_t))objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonBundleIdentifier);
  v14 = v13;
  sub_1000568E8(v12, v13);

  swift_bridgeObjectRelease(v14);
  if (!v0)
  {
    type metadata accessor for Registry(0);
    URL.appendingPathComponent(_:isDirectory:)(0x6573616261746164, 0xE800000000000000, 1);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v3, v10, v4);
    sub_100014360((uint64_t)v3, 0, 1, v4);
    v11 = sub_100098A04((uint64_t)v7, (unint64_t)v3);
    sub_1000131E0((uint64_t)v3, &qword_100128740);
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v7, v4);
    v16(v10, v4);
  }
  return v11;
}

uint64_t (*sub_100098A04(uint64_t a1, unint64_t a2))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  unsigned int v26;
  uint64_t (*v27)(uint64_t);
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t (*v30)(uint8_t *, char *, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint8_t *v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint8_t *v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  char **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSString v49;
  id v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  unint64_t v55;
  uint8_t **v56;
  unint64_t v57;
  uint64_t (*v58)(uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v60;
  char *v61;
  uint64_t (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  unint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  NSURL *v74;
  void *v75;
  void *v76;
  uint64_t (*v77)(uint64_t);
  uint64_t (*v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  uint8_t *v84;
  uint64_t (**v85)(uint64_t);
  uint64_t (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t (*v104)(uint64_t);
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v114)(uint64_t);
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint8_t *, char *, uint64_t);
  uint8_t *v120;
  char **v121;
  uint8_t *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  id v130;
  void (*v131)(uint8_t *, uint64_t);
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t);
  uint8_t *v138;

  v129 = a2;
  v2 = type metadata accessor for RegistryError(0);
  __chkstk_darwin(v2);
  v123 = (char *)&v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v125 = (uint64_t)&v115 - v5;
  v6 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v6);
  v127 = (uint64_t)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for URL(0);
  v8 = *(char **)(v133 - 8);
  __chkstk_darwin(v133);
  v120 = (uint8_t *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v126 = (uint8_t *)&v115 - v11;
  __chkstk_darwin(v12);
  v122 = (uint8_t *)&v115 - v13;
  __chkstk_darwin(v14);
  v132 = (char *)&v115 - v15;
  __chkstk_darwin(v16);
  v18 = (uint8_t *)&v115 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v115 - v20;
  v130 = (id)objc_opt_self(NSFileManager);
  v22 = (char **)objc_msgSend(v130, "defaultManager");
  URL.path.getter(v22);
  v24 = v23;
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  v137 = 0;
  v26 = objc_msgSend(v22, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v25, 1, 0, &v137);

  v27 = v137;
  if (!v26)
  {
    v42 = v137;
    _convertNSErrorToError(_:)(v27);

    swift_willThrow(v43);
    return v27;
  }
  v116 = v2;
  v28 = v137;
  v115 = (unint64_t)"staticVocabularyExtraction";
  URL.appendingPathComponent(_:)(0xD00000000000001BLL, 0x80000001000F6150);
  if (qword_100127EC8 != -1)
    goto LABEL_54;
  while (1)
  {
    v117 = type metadata accessor for Logger(0);
    v29 = sub_100012A40(v117, (uint64_t)qword_10012D1A8);
    v30 = (uint64_t (*)(uint8_t *, char *, uint64_t))*((_QWORD *)v8 + 2);
    v31 = v30(v18, v21, v133);
    v118 = v29;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter();
    v34 = os_log_type_enabled(v32, v33);
    v124 = v21;
    v121 = v22;
    v119 = v30;
    if (v34)
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (uint64_t (*)(uint64_t))swift_slowAlloc(32, -1);
      v137 = v36;
      *(_DWORD *)v35 = 136315138;
      v37 = URL.path.getter(v36);
      v39 = v38;
      v134 = sub_10000FBEC(v37, v38, (uint64_t *)&v137);
      v21 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
      swift_bridgeObjectRelease(v39);
      v131 = (void (*)(uint8_t *, uint64_t))*((_QWORD *)v8 + 1);
      v131(v18, v133);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Loading metadata store from %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1);
      v40 = v36;
      v30 = v119;
      swift_slowDealloc(v40, -1, -1);
      v41 = v35;
      v22 = v121;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      v131 = (void (*)(uint8_t *, uint64_t))*((_QWORD *)v8 + 1);
      v131(v18, v133);
    }

    v44 = v127;
    sub_100019FA0(v129, v127, &qword_100128740);
    if (sub_10001C93C(v44, 1, v133) == 1)
    {
      sub_1000131E0(v44, &qword_100128740);
      v45 = v22;
      goto LABEL_38;
    }
    v46 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v8 + 4))(v132, v44, v133);
    URL.path.getter(v46);
    v48 = v47;
    v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v48);
    v137 = 0;
    v45 = v22;
    v50 = objc_msgSend(v22, "contentsOfDirectoryAtPath:error:", v49, &v137);

    v51 = v137;
    if (!v50)
      break;
    v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v51;

    v54 = *(_QWORD *)(v52 + 16);
    v127 = v52;
    if (v54)
    {
      v55 = sub_100012F00();
      v56 = (uint8_t **)(v52 + 40);
      v21 = (char *)_swiftEmptyArrayStorage;
      v57 = v115 | 0x8000000000000000;
      v129 = v115 | 0x8000000000000000;
      do
      {
        v58 = (uint64_t (*)(uint64_t))*(v56 - 1);
        v18 = *v56;
        v137 = v58;
        v138 = v18;
        v134 = 0xD00000000000001BLL;
        v135 = v57;
        swift_bridgeObjectRetain();
        if ((StringProtocol.contains<A>(_:)(&v134, &type metadata for String, &type metadata for String, v55, v55) & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
          v136 = (uint64_t)v21;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10001573C();
            v21 = (char *)v136;
          }
          v60 = *((_QWORD *)v21 + 2);
          if (v60 >= *((_QWORD *)v21 + 3) >> 1)
          {
            sub_10001573C();
            v21 = (char *)v136;
          }
          *((_QWORD *)v21 + 2) = v60 + 1;
          v61 = &v21[16 * v60];
          *((_QWORD *)v61 + 4) = v58;
          *((_QWORD *)v61 + 5) = v18;
          v57 = v129;
        }
        else
        {
          swift_bridgeObjectRelease(v18);
        }
        v56 += 2;
        --v54;
      }
      while (v54);
    }
    else
    {
      v21 = (char *)_swiftEmptyArrayStorage;
    }
    v65 = swift_bridgeObjectRelease(v127);
    v66 = *((_QWORD *)v21 + 2);
    if (!v66)
    {
      v131((uint8_t *)v132, v133);
      swift_release();
LABEL_32:
      v45 = v121;
      v21 = v124;
      v30 = v119;
      goto LABEL_38;
    }
    v67 = Logger.logObject.getter(v65);
    v68 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Found a database at the old location, removing...", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    v69 = 0;
    v8 = v21 + 40;
    v22 = &selRef_synonyms;
    v70 = v122;
    while (v69 < *((_QWORD *)v21 + 2))
    {
      v72 = *((_QWORD *)v8 - 1);
      v71 = *(_QWORD *)v8;
      swift_bridgeObjectRetain();
      URL.appendingPathComponent(_:)(v72, v71);
      swift_bridgeObjectRelease(v71);
      v73 = objc_msgSend(v130, "defaultManager");
      URL._bridgeToObjectiveC()(v74);
      v76 = v75;
      v137 = 0;
      v18 = (uint8_t *)objc_msgSend(v73, "removeItemAtURL:error:", v75, &v137);

      v77 = v137;
      if (!(_DWORD)v18)
      {
        v78 = v77;
        swift_release();
        v63 = _convertNSErrorToError(_:)(v78);

        swift_willThrow(v79);
        v131(v70, v133);
        v45 = v121;
        v30 = v119;
        goto LABEL_34;
      }
      ++v69;
      v131(v70, v133);
      v8 += 16;
      if (v66 == v69)
      {
        swift_release();
        v131((uint8_t *)v132, v133);
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_54:
    swift_once(&qword_100127EC8, sub_100099764);
  }
  v62 = v137;
  v63 = _convertNSErrorToError(_:)(v51);

  swift_willThrow(v64);
LABEL_34:
  swift_errorRetain(v63);
  v80 = swift_errorRetain(v63);
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.error.getter();
  v83 = os_log_type_enabled(v81, v82);
  v128 = 0;
  if (v83)
  {
    v84 = (uint8_t *)swift_slowAlloc(12, -1);
    v85 = (uint64_t (**)(uint64_t))swift_slowAlloc(8, -1);
    *(_DWORD *)v84 = 138412290;
    swift_errorRetain(v63);
    v86 = (uint64_t (*)(uint64_t))_swift_stdlib_bridgeErrorToNSError(v63);
    v137 = v86;
    v45 = v121;
    v30 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);
    *v85 = v86;
    swift_errorRelease(v63);
    swift_errorRelease(v63);
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "Failed to remove old database: %@", v84, 0xCu);
    sub_10001BE7C(&qword_100128160);
    swift_arrayDestroy(v85, 1);
    swift_slowDealloc(v85, -1, -1);
    swift_slowDealloc(v84, -1, -1);

  }
  else
  {

    swift_errorRelease(v63);
    swift_errorRelease(v63);
  }
  swift_errorRelease(v63);
  v131((uint8_t *)v132, v133);
  v21 = v124;
LABEL_38:
  type metadata accessor for MetadataStore(0);
  v87 = (uint64_t)v126;
  v30(v126, v21, v133);
  v88 = v128;
  sub_100063F8C(v87);
  v27 = v89;
  if (!v88)
  {
    v131((uint8_t *)v21, v133);

    return v27;
  }
  v134 = v88;
  swift_errorRetain(v88);
  v90 = sub_10001BE7C((uint64_t *)&unk_100129420);
  if (swift_dynamicCast(&v137, &v134, v90, &type metadata for MetadataStore.CreationError, 0))
  {
    v91 = (uint64_t)v137;
    if (v138 == 2)
    {
      v92 = swift_errorRelease(v88);
      v93 = Logger.logObject.getter(v92);
      v94 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v93, v94))
      {
        v95 = swift_slowAlloc(22, -1);
        *(_DWORD *)v95 = 134218240;
        v136 = v91;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        *(_WORD *)(v95 + 12) = 2048;
        v136 = 101;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "Metadata store version mismatch detected (database: %lld, expected: %ld). Recreating the metadata store database", (uint8_t *)v95, 0x16u);
        swift_slowDealloc(v95, -1, -1);
      }

      v96 = v124;
      sub_1000640C4();
      v97 = (uint64_t)v120;
      v30(v120, v96, v133);
      sub_100063F8C(v97);
      v27 = v114;
      v131((uint8_t *)v96, v133);

      swift_errorRelease(v134);
      return v27;
    }
    sub_10006B028((uint64_t)v137, v138);
  }
  swift_errorRelease(v134);
  v98 = v125;
  sub_10009A194();
  v99 = (uint64_t)v123;
  if (qword_100127E88 != -1)
    swift_once(&qword_100127E88, sub_10009060C);
  sub_100012A40(v117, (uint64_t)qword_10012D110);
  sub_1000207A8(v98, v99, type metadata accessor for RegistryError);
  v101 = Logger.logObject.getter(v100);
  v102 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v101, v102))
  {
    v103 = (uint8_t *)swift_slowAlloc(12, -1);
    v104 = (uint64_t (*)(uint64_t))swift_slowAlloc(32, -1);
    v137 = v104;
    *(_DWORD *)v103 = 136315138;
    sub_10009A328();
    v106 = v105;
    v134 = sub_10000FBEC(v107, v105, (uint64_t *)&v137);
    v45 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
    swift_bridgeObjectRelease(v106);
    sub_10001DBC8(v99, type metadata accessor for RegistryError);
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "Error loading metadata store: %s", v103, 0xCu);
    swift_arrayDestroy(v104, 1);
    swift_slowDealloc(v104, -1, -1);
    swift_slowDealloc(v103, -1, -1);
  }
  else
  {
    sub_10001DBC8(v99, type metadata accessor for RegistryError);
  }

  v108 = v116;
  v27 = type metadata accessor for RegistryError;
  sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
  swift_allocError(v108, v109, 0, 0);
  v110 = v125;
  sub_1000207A8(v125, v111, type metadata accessor for RegistryError);
  swift_willThrow(v112);

  swift_errorRelease(v88);
  sub_10001DBC8(v110, type metadata accessor for RegistryError);
  v131((uint8_t *)v124, v133);
  return v27;
}

uint64_t sub_100099764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for Logger(0);
  sub_1000269D8(v0, qword_10012D1A8);
  sub_100012A40(v0, (uint64_t)qword_10012D1A8);
  v8 = type metadata accessor for Registry(0);
  v1 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v3 = String.init<A>(describing:)(&v8, v1);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v5 = v2;
    v6 = String.init(cString:)();
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10009980C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(__int128 *__return_ptr);
  char *v41;
  uint64_t (*v42)(uint64_t *);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  _QWORD v80[2];
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  objc_class *ObjectType;
  objc_super v88;
  __int128 v89;
  uint64_t v90;
  char **v91;
  __int128 v92;
  uint64_t v93;
  char **v94;

  sub_10000C038();
  a19 = v23;
  a20 = v24;
  v26 = v25;
  ObjectType = (objc_class *)swift_getObjectType(v20);
  sub_10001BE7C(&qword_10012AD50);
  sub_1000179E8();
  __chkstk_darwin(v27);
  sub_10001778C();
  v84 = v28;
  sub_10001BE7C(&qword_10012AA18);
  sub_1000179E8();
  __chkstk_darwin(v29);
  sub_10001F350();
  *(_QWORD *)&v20[OBJC_IVAR____TtC10LinkDaemon8Registry_ready] = 0;
  v30 = &v20[OBJC_IVAR____TtC10LinkDaemon8Registry_lastMetadataAudit];
  v31 = type metadata accessor for Date(0);
  sub_1000143D4(v22, v32, v33, v31);
  *(_DWORD *)v30 = 0;
  v34 = v20;
  v35 = &v30[*(int *)(sub_10001BE7C(&qword_10012AA20) + 28)];
  v36 = sub_10001BE7C(&qword_10012B3B0);
  bzero(v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  v37 = sub_1000BE690();
  sub_100019EB8(v37, v38, &qword_10012AA18);
  v39 = OBJC_IVAR____TtC10LinkDaemon8Registry_appProtectionSubscription;
  *(_QWORD *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_appProtectionSubscription] = 0;
  v40 = (void (*)(__int128 *__return_ptr))v26[4];
  v86 = v26[5];
  v40(&v92);
  v41 = &v34[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource];
  sub_100019A48(&v92, (uint64_t)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource]);
  v42 = (uint64_t (*)(uint64_t *))v26[6];
  v85 = v26[7];
  v43 = v42(v26);
  if (v21)
  {
    swift_release();
    sub_10007ECC8(v26[2], v26[3]);
    swift_release();
    swift_release();
    a10 = v26[8];
    sub_10001E05C(&a10);
    sub_10000E87C(v41);
    swift_release();
    sub_1000131E0((uint64_t)v30, &qword_10012AA20);
    v44 = *(_QWORD *)&v34[v39];

    swift_unknownObjectRelease(v44);
    swift_deallocPartialClassInstance(v34, ObjectType, *(unsigned int *)((swift_isaMask & *(_QWORD *)v34) + 0x30), *(unsigned __int16 *)((swift_isaMask & *(_QWORD *)v34) + 0x34));
  }
  else
  {
    v45 = (void *)v43;
    v83 = OBJC_IVAR____TtC10LinkDaemon8Registry_store;
    *(_QWORD *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_store] = v43;
    v46 = type metadata accessor for MetadataStore(0);
    v93 = v46;
    v94 = (char **)&off_10011B430;
    *(_QWORD *)&v92 = v45;
    v47 = type metadata accessor for AppShortcutInterpolator();
    v48 = sub_1000BEC28(v47, 152);
    v49 = sub_1000BEC58();
    v81 = v80;
    v50 = *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64);
    __chkstk_darwin(v49);
    v51 = (v50 + 15) & 0xFFFFFFFFFFFFFFF0;
    v82 = 0;
    sub_1000BEFB0(v52, v53);
    v54 = *(_QWORD *)((char *)v80 - v51);
    v90 = v46;
    v91 = (char **)&off_10011B430;
    *(_QWORD *)&v89 = v54;
    v55 = v45;
    swift_defaultActor_initialize(v48);
    sub_100019A48(&v89, v48 + 112);
    sub_10000E87C(&v92);

    v81 = (_QWORD *)OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator;
    *(_QWORD *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator] = v48;
    v56 = *(void **)&v34[v83];
    v93 = v46;
    v94 = &off_10011BCA0;
    *(_QWORD *)&v92 = v56;
    v57 = type metadata accessor for AssistantIntentPhraseInterpolator();
    v58 = sub_1000BEC28(v57, 152);
    v59 = sub_1000BEC58();
    v80[1] = v80;
    __chkstk_darwin(v59);
    sub_1000BEFB0(v60, v61);
    v62 = *(_QWORD *)((char *)v80 - v51);
    v90 = v46;
    v91 = &off_10011BCA0;
    *(_QWORD *)&v89 = v62;
    v63 = v56;
    swift_defaultActor_initialize(v58);
    sub_100019A48(&v89, v58 + 112);
    sub_10000E87C(&v92);

    *(_QWORD *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_examplePhraseInterpolator] = v58;
    v64 = v26[8];
    *(_QWORD *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_observers] = v64;
    v65 = *(void **)&v34[v83];
    v66 = *(_QWORD *)((char *)v81 + (_QWORD)v34);
    v67 = v26[1];
    v81 = (_QWORD *)*v26;
    v68 = v26[2];
    v69 = v26[3];
    v70 = type metadata accessor for Registry.IndexingQueue();
    sub_1000BEC28(v70, 200);
    swift_bridgeObjectRetain_n(v64, 2);
    v71 = v65;
    swift_retain();
    sub_1000179D8();
    swift_retain();
    v83 = v68;
    sub_10005A6C8(v68, v69);
    *(_QWORD *)&v34[OBJC_IVAR____TtC10LinkDaemon8Registry_indexingQueue] = sub_10009CCD0((uint64_t)v71, v66, v58, v64, (uint64_t)v81, v67, v68, v69);

    v88.receiver = v34;
    v88.super_class = ObjectType;
    v72 = objc_msgSendSuper2(&v88, "init");
    v73 = type metadata accessor for TaskPriority(0);
    v74 = v84;
    sub_1000143D4(v84, v75, v76, v73);
    v77 = (_QWORD *)swift_allocObject(&unk_10011DEE8, 40, 7);
    v77[2] = 0;
    v77[3] = 0;
    v77[4] = v72;
    v78 = (char *)v72;
    v79 = sub_100029394(v74, (uint64_t)&unk_10012B3C0, (uint64_t)v77);
    swift_release();
    sub_10007ECC8(v83, v69);

    swift_bridgeObjectRelease(v64);
    swift_release();
    swift_release();
    *(_QWORD *)&v78[OBJC_IVAR____TtC10LinkDaemon8Registry_ready] = v79;
    swift_release();
  }
  sub_1000117E8();
}

uint64_t sub_100099CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[2] = a4;
  v5 = type metadata accessor for Logger(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100099D50, 0, 0);
}

uint64_t sub_100099D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((sub_100099F68() & 1) != 0)
  {
    sub_1000BEB5C(*(_QWORD *)(v1 + 16));
    v3 = sub_10001BE7C(&qword_10012AA20);
    sub_1000BE5E4(v3, &qword_10012AA18);
    Date.init()(v4);
    v5 = sub_1000BE20C();
    sub_10001F52C(v5);
    sub_1000158B0();
    return sub_1000188F0(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    v7 = qword_100127EC8;
    v8 = *(id *)(v1 + 16);
    if (v7 == -1)
    {
      v9 = v8;
    }
    else
    {
      swift_once(&qword_100127EC8, sub_100099764);
      v9 = *(void **)(v1 + 16);
    }
    sub_1000BEB28();
    v10 = sub_100012A40(v0, (uint64_t)qword_10012D1A8);
    sub_100005848(v7, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));

    v11 = static os_log_type_t.default.getter();
    v12 = sub_10000DDEC();
    if (os_log_type_enabled(v12, (os_log_type_t)v11))
    {
      v13 = (_WORD *)sub_100011780(2);
      sub_10001F81C(v13);
      sub_10001EF60((void *)&_mh_execute_header, v14, v15, "Starting registry sync");
      sub_1000133FC(v11);
    }
    sub_1000BEB28();

    sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    v16 = (_QWORD *)swift_task_alloc(dword_10012AD7C);
    *(_QWORD *)(v1 + 48) = v16;
    *v16 = v1;
    v16[1] = sub_100099EC8;
    sub_1000167A8();
    return sub_1000BE4F0(v17, v18, v19);
  }
}

uint64_t sub_100099EC8()
{
  uint64_t v0;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v0 + 48));
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_100099EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000BEB5C(*(_QWORD *)(v0 + 16));
  v1 = sub_10001BE7C(&qword_10012AA20);
  sub_1000BE5E4(v1, &qword_10012AA18);
  Date.init()(v2);
  v3 = sub_1000BE20C();
  sub_10001F52C(v3);
  sub_1000158B0();
  return sub_1000BDB54(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100099F68()
{
  uint64_t v0;
  void *v1;
  uint64_t *v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  v2 = sub_1000BE71C((_QWORD *)(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource));
  return sub_1000BB068(*v2, v1);
}

uint64_t sub_100099FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for OSSignpostID(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009A008, 0, 0);
}

uint64_t sub_10009A008()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  static OSSignpostID.exclusive.getter();
  sub_100097080();
  v0[9] = v1;
  v2 = (uint64_t **)swift_task_alloc(dword_10012AD94);
  v0[10] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_10009A090;
  return sub_10009A6E8((uint64_t)v2, v0[5], v0[2], v0[3], v0[4]);
}

uint64_t sub_10009A090()
{
  uint64_t v0;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v0 + 80));
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10009A0D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  sub_1000B3FD4();
  sub_1000073B0();
  sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_100005878();
  return sub_1000188F0(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10009A144()
{
  sub_1000B3FD4();
}

uint64_t sub_10009A194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _BYTE v36[72];
  uint64_t v37;
  uint64_t v38;

  sub_100016714();
  v37 = v2;
  v38 = v3;
  v5 = v4;
  v7 = v6;
  sub_1000BDF14();
  sub_1000179E8();
  __chkstk_darwin(v8);
  sub_10001F350();
  sub_1000BEAB8();
  v9 = sub_10001BE7C((uint64_t *)&unk_100129420);
  if (sub_1000177A0(v1, (uint64_t)v36, v9, v0))
  {
    v10 = sub_1000BE684();
    sub_1000BB03C(v10, v11, v12);
    return sub_1000BE6EC();
  }
  sub_1000BE6EC();
  v14 = sub_1000BEAB8();
  sub_1000BDB9C(v14, &qword_10012A728, NSError_ptr);
  v16 = sub_1000177A0((uint64_t)&v35, (uint64_t)v36, v9, v15);
  if ((_DWORD)v16)
  {
    v17 = v35;
    v18 = sub_10001A8C4(v16, "domain");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(LNConnectionErrorDomain) && v21 == v22)
    {
      v29 = sub_1000117AC(v21);
    }
    else
    {
      v24 = v22;
      v25 = sub_1000BE644();
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v24, 0);
      sub_1000059C4();
      v29 = sub_10000C028();
      if ((v28 & 1) == 0)
      {

        goto LABEL_14;
      }
    }
    v30 = sub_10001A8C4(v29, "code");

    if (v30 == (id)1700)
    {
      v31 = sub_1000BE1BC();
      swift_storeEnumTagMultiPayload(v31, v32, 6);
      return sub_1000BE6EC();
    }
  }
LABEL_14:
  sub_1000BE6EC();
  *v7 = v5;
  v33 = sub_1000BE1BC();
  swift_storeEnumTagMultiPayload(v33, v34, 3);
  return swift_errorRetain(v5);
}

void sub_10009A328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  char *v7;

  sub_100016714();
  v0 = sub_10001AE20();
  __chkstk_darwin(v0);
  sub_1000BE920();
  type metadata accessor for RegistryError(0);
  sub_1000179E8();
  __chkstk_darwin(v1);
  sub_10001F350();
  v2 = sub_1000BE9F4();
  sub_1000207A8(v2, v3, v4);
  v5 = sub_1000BE690();
  v7 = (char *)&loc_10009A3C0 + dword_10009A6CC[swift_getEnumCaseMultiPayload(v5, v6)];
  __asm { BR              X10 }
}

uint64_t sub_10009A3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001E514();
  _StringGuts.grow(_:)(53);
  v2 = *(_QWORD *)(v1 - 96);
  *(_QWORD *)(v1 - 104) = *(_QWORD *)(v1 - 104);
  *(_QWORD *)(v1 - 96) = v2;
  sub_1000BEF60();
  sub_1000101FC();
  return sub_100019430();
}

uint64_t sub_10009A6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  v6 = type metadata accessor for RegistryError(0);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v5[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[18] = v8;
  v5[19] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009A76C, 0, 0);
}

uint64_t sub_10009A76C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_10001A498();
  v42 = v1;
  v43 = v2;
  v41 = v0;
  v3 = qword_100127EC8;
  v4 = *(id *)(v0 + 96);
  if (v3 == -1)
  {
    v5 = v4;
  }
  else
  {
    swift_once(&qword_100127EC8, sub_100099764);
    v5 = *(void **)(v0 + 96);
  }
  v7 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = sub_100012A40(v8, (uint64_t)qword_10012D1A8);
  *(_QWORD *)(v0 + 160) = v9;
  sub_100005848(v6, (uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));

  sub_10000DDEC();
  v10 = sub_1000186A0();
  if (sub_100013670(v10))
  {
    v11 = (_WORD *)sub_100011780(2);
    sub_10001F81C(v11);
    sub_10001EF60((void *)&_mh_execute_header, v12, v13, "Updating the metadata store");
    sub_1000133FC(v8);
  }
  v14 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 104);

  sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  if (v15)
  {
    v38 = (uint64_t *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = (_QWORD *)v18;
    v20 = v16;
    v21 = v17;
  }
  else
  {
    v19 = sub_10009ADD4();
    v20 = v35;
    v21 = v36;
    v38 = (uint64_t *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 104);
  }
  v39 = v0 + 16;
  sub_1000BDAB0();
  sub_1000101EC(v20);
  sub_1000101EC(v21);
  v22 = sub_1000BAF80(v18, v16, v17);
  v23 = v9;
  Logger.logObject.getter(v22);
  v24 = sub_1000186A0();
  if (os_log_type_enabled(v9, v24))
  {
    v25 = (uint8_t *)sub_100011780(12);
    v37 = sub_100011780(32);
    v40 = (_QWORD *)v37;
    *(_DWORD *)v25 = 136315138;
    v26 = sub_10009AE38((uint64_t)v19, v20, v21);
    *v38 = sub_10000FBEC(v26, v27, (uint64_t *)&v40);
    sub_1000BE214((uint64_t)v38, v0 + 96);
    sub_1000059A8();
    sub_1000117AC((uint64_t)v19);
    sub_10001A0B8();
    sub_1000117AC(v21);
    v23 = v9;
    sub_1000100C0((void *)&_mh_execute_header, v9, v24, "Detected changes:\n %s", v25);
    sub_100013320(v37);
    sub_1000133FC(v37);
    sub_1000133FC((uint64_t)v25);
  }
  else
  {
    sub_1000117AC((uint64_t)v19);
    sub_10001A0B8();
    sub_1000117AC(v21);
  }

  v28 = *(_QWORD *)(v0 + 96);
  v40 = v19;
  sub_100016794();
  v29 = sub_10000C020();
  sub_100059504(v29);
  v30 = (uint64_t)v40;
  sub_1000BE71C((_QWORD *)(v28 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource));
  sub_1000100E0();
  v31 = sub_1000B4264();
  sub_10009AFC8(v30, v20, v31, v32, 1, 0, 0, v39);
  sub_10000E038();
  sub_10000C028();
  sub_1000059B0();
  v33 = (_QWORD *)swift_task_alloc(dword_10012AA54);
  *(_QWORD *)(v0 + 168) = v33;
  *v33 = v0;
  v33[1] = sub_10009ABB8;
  return sub_10009CE60(v39);
}

uint64_t sub_10009ABB8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000143EC();
  sub_100072058(v2);
  *(_QWORD *)(v0 + 176) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    sub_1000BAFB8((_QWORD *)(v0 + 16));
  sub_1000167A8();
  return sub_100019418(v4, v5, v6);
}

uint64_t sub_10009AC0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v3 = *(void **)(v2 + 160);
  Logger.logObject.getter(a1);
  v4 = sub_1000186A0();
  if (sub_100013670(v4))
  {
    v5 = (_WORD *)sub_100011780(2);
    sub_10001F81C(v5);
    sub_10001EF60((void *)&_mh_execute_header, v6, v7, "Finished updating the metadata store");
    sub_1000133FC(v1);
  }

  sub_1000BE5F8();
  sub_1000158B0();
  v8 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000BDB54(v8);
}

uint64_t sub_10009AC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);

  sub_1000BE144();
  a21 = v24;
  a22 = v25;
  a20 = v23;
  sub_1000BAFB8((_QWORD *)(v23 + 16));
  sub_10001A84C();
  v26 = sub_10001A84C();
  Logger.logObject.getter(v26);
  v27 = sub_10000DD80();
  if (sub_1000BDC74(v22))
  {
    v28 = (uint8_t *)sub_100011780(12);
    v29 = sub_100011780(32);
    *(_DWORD *)v28 = 136315138;
    a11 = v29;
    sub_10009A194();
    sub_10009A328();
    v31 = v30;
    sub_1000185C8(v30, type metadata accessor for RegistryError);
    *(_QWORD *)(v23 + 80) = sub_1000BEA48(v31, v32, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v23 + 80, v23 + 88);
    sub_100007398();
    sub_100005A04();
    sub_100005A04();
    sub_1000100C0((void *)&_mh_execute_header, v22, v27, "Error updating the metadata store: %s", v28);
    sub_100013320(v29);
    sub_1000133FC(v29);
    sub_1000133FC((uint64_t)v28);

    sub_100005A04();
  }
  else
  {
    sub_100005A04();
    sub_100005A04();
    sub_100005A04();

  }
  sub_1000BE5F8();
  sub_1000158B0();
  v33 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000BDD5C(v33);
}

_QWORD *sub_10009ADD4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[5];

  v2 = *(void **)(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  sub_100019A60(v0 + OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource, (uint64_t)v5);
  result = sub_10009B104(v2, v5);
  if (v1)
    return (_QWORD *)v4;
  return result;
}

unint64_t sub_10009AE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v16 = 0;
    v17 = 0xE000000000000000;
    v7._countAndFlagsBits = 0x646E75622077654ELL;
    v7._object = (void *)0xED00000A3A73656CLL;
    String.append(_:)(v7);
    v8 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_10009C898();
      v8 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_12;
    goto LABEL_9;
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (!v9 && !*(_QWORD *)(a2 + 16))
    return 0xD000000000000013;
  v16 = 0;
  v17 = 0xE000000000000000;
  if (v9)
  {
LABEL_9:
    v10._object = (void *)0x80000001000F5E00;
    v10._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v10);
    v11 = a3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_10009C898();
      v11 += 40;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
LABEL_12:
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
  {
    v13._object = (void *)0x80000001000F5E20;
    v13._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v13);
    v14 = (_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    do
    {
      sub_10009CA80(v14, (uint64_t)&v16);
      v14 += 5;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  return v16;
}

uint64_t sub_10009AFC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  _QWORD *v16;
  uint64_t result;

  swift_bridgeObjectRetain();
  v16 = sub_100095B00(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10001EBF8(a3, a4);
  sub_100013158(0, 0xF000000000000000);
  sub_10005A6C8(a6, a7);
  sub_10007ECC8(0, 0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006AEA4(a3, a4);
  sub_10005A6C8(a6, a7);
  sub_10007ECC8(a6, a7);
  sub_10001EA88(a3, a4);
  swift_bridgeObjectRelease_n(a1, 2);
  swift_bridgeObjectRelease_n(v16, 2);
  sub_100013158(a3, a4);
  result = sub_10007ECC8(a6, a7);
  *(_BYTE *)a8 = a5;
  *(_QWORD *)(a8 + 8) = a1;
  *(_QWORD *)(a8 + 16) = v16;
  *(_QWORD *)(a8 + 24) = a3;
  *(_QWORD *)(a8 + 32) = a4;
  *(_BYTE *)(a8 + 40) = 0;
  *(_QWORD *)(a8 + 48) = a6;
  *(_QWORD *)(a8 + 56) = a7;
  return result;
}

_QWORD *sub_10009B104(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  char v55[24];
  _BYTE v56[24];
  _QWORD *v57;
  uint64_t v58;

  v53 = a1;
  v52 = a2;
  v2 = type metadata accessor for LNBundleRecord(0);
  v47 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = sub_10001BE7C(&qword_100128A38);
  v5 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v7 = (_QWORD *)((char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = swift_allocObject(&unk_10011D798, 24, 7);
  v51 = v8;
  *(_QWORD *)(v8 + 16) = _swiftEmptyArrayStorage;
  v9 = v8 + 16;
  v10 = swift_allocObject(&unk_10011D7C0, 24, 7);
  v50 = v10;
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v11 = v10 + 16;
  v12 = swift_allocObject(&unk_10011D798, 24, 7);
  *(_QWORD *)(v12 + 16) = _swiftEmptyArrayStorage;
  v48 = swift_allocObject(&unk_10011D7E8, 24, 7);
  v13 = v53;
  v14 = v54;
  v15 = v53;
  sub_100065394();
  v49 = v14;
  if (v14)
  {

    swift_deallocUninitializedObject(v48, 24, 7);
    swift_release();
    swift_release();
    v17 = v52;
  }
  else
  {
    v43 = v11;
    v44 = v12 + 16;
    v45 = v9;
    v46 = (char *)v12;
    v18 = *(_QWORD *)(v16 + 16);
    if (v18)
    {
      v57 = _swiftEmptyArrayStorage;
      v19 = v16;
      sub_1000528B0(0, v18, 0);
      v20 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
      v42[1] = v19;
      v21 = v19 + v20;
      v54 = *(_QWORD *)(v47 + 72);
      v13 = v57;
      do
      {
        sub_1000207A8(v21, (uint64_t)v4, type metadata accessor for LNBundleRecord);
        v22 = objc_autoreleasePoolPush();
        v23 = (uint64_t)v7 + *(int *)(v58 + 48);
        v24 = v4[1];
        *v7 = *v4;
        v7[1] = v24;
        sub_1000207A8((uint64_t)v4, v23, type metadata accessor for LNBundleRecord);
        swift_bridgeObjectRetain();
        objc_autoreleasePoolPop(v22);
        sub_10001DBC8((uint64_t)v4, type metadata accessor for LNBundleRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        {
          sub_1000528B0(0, v13[2] + 1, 1);
          v13 = v57;
        }
        v26 = v13[2];
        v25 = v13[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000528B0(v25 > 1, v26 + 1, 1);
          v13 = v57;
        }
        v13[2] = v26 + 1;
        sub_100019EB8((uint64_t)v7, (uint64_t)v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v26, &qword_100128A38);
        v21 += v54;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v13 = _swiftEmptyArrayStorage;
    }
    v17 = v52;
    v27 = v49;
    v28 = sub_100096E60((uint64_t)v13);
    v29 = v27;
    v30 = v48;
    *(_QWORD *)(v48 + 16) = v28;
    v31 = *sub_10000E858(v17, v17[3]);
    swift_retain();
    v32 = v46;
    swift_retain();
    v33 = v50;
    swift_retain();
    v34 = v51;
    swift_retain();
    sub_1000B5ECC(v31, v30, v32, v33, v34);
    v35 = v53;
    if (!v29)
    {
      swift_beginAccess(v30 + 16, &v57, 0, 0);
      swift_bridgeObjectRetain();
      sub_1000961DC(v37);
      v39 = v38;
      swift_bridgeObjectRelease();
      sub_100050820(v39);
      v41 = v40;
      swift_bridgeObjectRelease();
      swift_beginAccess(v43, v56, 33, 0);
      sub_1000594F0(v41);
      swift_endAccess(v56);

      swift_beginAccess(v45, v56, 0, 0);
      v13 = *(_QWORD **)(v34 + 16);
      swift_beginAccess(v44, v55, 0, 0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_10000E87C(v17);
      return v13;
    }
    swift_release();
    swift_release();
    swift_release();

  }
  swift_release();
  sub_10000E87C(v17);
  return v13;
}

uint64_t sub_10009B59C()
{
  uint64_t v0;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v0 + 136));
  sub_1000100D0();
  sub_1000117B4();
  sub_1000059A8();
  sub_1000167A8();
  return sub_100011788();
}

uint64_t sub_10009B5E8()
{
  uint64_t v0;

  swift_release();
  sub_1000BEF58();
  sub_1000158B0();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10009B618(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  id v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void (*v33)(char *);
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  _QWORD v66[2];
  os_log_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;

  v73 = a2;
  v79 = a3;
  v5 = type metadata accessor for Logger(0);
  v75 = *(_QWORD *)(v5 - 8);
  v76 = v5;
  __chkstk_darwin(v5);
  v78 = (char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001BE7C(&qword_10012AA18);
  __chkstk_darwin(v7);
  v72 = (char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v66 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v77 = (char *)v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)v66 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)v66 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)v66 - v22;
  v74 = a1;
  sub_100019FA0(a1, (uint64_t)v11, &qword_10012AA18);
  if (sub_10001C93C((uint64_t)v11, 1, v12) == 1)
  {
    sub_1000131E0((uint64_t)v11, &qword_10012AA18);
    v24 = 0;
  }
  else
  {
    v71 = v3;
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v23, v11, v12);
    Date.init()(v25);
    v26 = Date.timeIntervalSince(_:)(v23);
    v27 = qword_100127EC8;
    v28 = v73;
    v29 = v23;
    if (v27 != -1)
      swift_once(&qword_100127EC8, sub_100099764);
    v30 = v76;
    v31 = (void *)sub_100012A40(v76, (uint64_t)qword_10012D1A8);
    v32 = v75;
    v33 = *(void (**)(char *))(v75 + 16);
    v73 = v31;
    v33(v78);

    v34 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v34(v17, v23, v12);
    v35 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v77, v20, v12);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter();
    v38 = v37;
    v39 = os_log_type_enabled(v36, v37);
    v70 = v20;
    if (v39)
    {
      v40 = swift_slowAlloc(32, -1);
      v69 = swift_slowAlloc(64, -1);
      v82 = *(double *)&v69;
      *(_DWORD *)v40 = 136315650;
      v66[1] = v40 + 4;
      sub_10007EC94((unint64_t *)&unk_100129440, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      v41 = v29;
      v68 = v38;
      v43 = v42;
      v67 = v36;
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v12, v42);
      v80 = sub_10000FBEC(v44, v45, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
      swift_bridgeObjectRelease();
      v46 = *(void (**)(char *, uint64_t))(v13 + 8);
      v46(v17, v12);
      *(_WORD *)(v40 + 12) = 2080;
      v47 = v77;
      v48 = v43;
      v49 = v41;
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v12, v48);
      v80 = sub_10000FBEC(v50, v51, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
      swift_bridgeObjectRelease();
      v46(v47, v12);
      *(_WORD *)(v40 + 22) = 2048;
      v80 = *(_QWORD *)&v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
      v52 = v67;
      _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v68, "Comparing %s to %s for audit: %fs", (uint8_t *)v40, 0x20u);
      v53 = v69;
      swift_arrayDestroy(v69, 2);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      (*(void (**)(char *, uint64_t))(v75 + 8))(v78, v76);
    }
    else
    {
      v49 = v29;
      v46 = *(void (**)(char *, uint64_t))(v13 + 8);
      v46(v17, v12);
      v46(v77, v12);

      (*(void (**)(char *, uint64_t))(v32 + 8))(v78, v30);
    }
    v55 = sub_100012F3C();
    if (v55 >= v26)
    {
      v62 = *(_QWORD *)&v55;
      v63 = Logger.logObject.getter(v54);
      v64 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = swift_slowAlloc(22, -1);
        *(_DWORD *)v65 = 134218240;
        v82 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
        *(_WORD *)(v65 + 12) = 2048;
        v82 = *(double *)&v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Debounce not exceeded %f < %f", (uint8_t *)v65, 0x16u);
        swift_slowDealloc(v65, -1, -1);
      }

      v46(v70, v12);
      v46(v49, v12);
      v24 = 0;
    }
    else
    {
      sub_1000131E0(v74, &qword_10012AA18);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Audit debounce exceeded, proceeding", v59, 2u);
        swift_slowDealloc(v59, -1, -1);
      }

      v60 = (uint64_t)v72;
      Date.init()(v61);
      v46(v70, v12);
      v46(v49, v12);
      v24 = 1;
      sub_100014360(v60, 0, 1, v12);
      sub_100019EB8(v60, v74, &qword_10012AA18);
    }
  }
  *v79 = v24;
}

uint64_t sub_10009BC74(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t inited;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[16];

  if (a1 != 1)
    return 0;
  v14[14] = v4;
  v14[15] = v5;
  v9 = sub_10001BE7C((uint64_t *)&unk_10012ADB8);
  inited = swift_initStackObject(v9, v14);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(inited + 32) = 0x7365676E616863;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v11 = sub_10009AE38(a2, a3, a4);
  *(_QWORD *)(inited + 72) = type metadata for String;
  *(_QWORD *)(inited + 48) = v11;
  *(_QWORD *)(inited + 56) = v12;
  Dictionary.init(dictionaryLiteral:)(inited, type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  return 0x6146207469647541;
}

void sub_10009BD60()
{
  _swift_stdlib_reportUnimplementedInitializer("LinkDaemon.Registry", 19, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_10009BE38()
{
  return type metadata accessor for Registry(0);
}

uint64_t type metadata accessor for Registry(uint64_t a1)
{
  return sub_10000DE98(a1, (uint64_t *)&unk_10012AA00, (uint64_t)&nominal type descriptor for Registry);
}

void sub_10009BE54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_1000F1568;
  sub_10009BF0C(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = &unk_1000F1568;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

void sub_10009BF0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10012AA10)
  {
    v2 = sub_100025A6C(&qword_10012AA18);
    v3 = type metadata accessor for Mutex(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10012AA10);
  }
}

char *sub_10009BF64()
{
  if (&swift_runtimeSupportsNoncopyableTypes)
    return (char *)sub_10001BE7C(&qword_10012AA20);
  else
    return (char *)&type metadata for () + 8;
}

void sub_10009BF8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  os_log_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v50 = type metadata accessor for LNBundleRecord(0);
  __chkstk_darwin(v50);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - v10;
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v42 - v13);
  if (qword_100127E68 != -1)
    swift_once(&qword_100127E68, sub_100090530);
  v15 = type metadata accessor for Logger(0);
  sub_100012A40(v15, (uint64_t)qword_10012D0B0);
  sub_1000207A8(a1, (uint64_t)v14, type metadata accessor for LNBundleRecord);
  sub_1000207A8(a1, (uint64_t)v11, type metadata accessor for LNBundleRecord);
  sub_1000207A8(a2, (uint64_t)v8, type metadata accessor for LNBundleRecord);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.fault.getter();
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc(32, -1);
    v46 = swift_slowAlloc(96, -1);
    v53 = v46;
    *(_DWORD *)v20 = 136315650;
    v49 = v3;
    v47 = a1;
    v21 = *v14;
    v22 = v14[1];
    swift_bridgeObjectRetain();
    v51 = sub_10000FBEC(v21, v22, &v53);
    v43 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    swift_bridgeObjectRelease();
    sub_10001DBC8((uint64_t)v14, type metadata accessor for LNBundleRecord);
    *(_WORD *)(v20 + 12) = 2080;
    v45 = v19;
    v23 = v50;
    v24 = (uint64_t *)&v11[*(int *)(v50 + 24)];
    v25 = *v24;
    v26 = v24[1];
    sub_10001EBF8(*v24, v26);
    v27 = Data.description.getter(v25, v26);
    v48 = a3;
    v28 = v27;
    v44 = v17;
    v30 = v29;
    v31 = v26;
    a1 = v47;
    sub_10001EA88(v25, v31);
    v51 = sub_10000FBEC(v28, v30, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    swift_bridgeObjectRelease();
    sub_10001DBC8((uint64_t)v11, type metadata accessor for LNBundleRecord);
    *(_WORD *)(v20 + 22) = 2080;
    v32 = *(int *)(v23 + 24);
    v33 = (uint64_t)v43;
    v34 = (uint64_t *)&v43[v32];
    v35 = *v34;
    v36 = v34[1];
    sub_10001EBF8(*v34, v36);
    v37 = Data.description.getter(v35, v36);
    v39 = v38;
    sub_10001EA88(v35, v36);
    v40 = v37;
    a3 = v48;
    v51 = sub_10000FBEC(v40, v39, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    swift_bridgeObjectRelease();
    sub_10001DBC8(v33, type metadata accessor for LNBundleRecord);
    v17 = v44;
    _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v45, "Found non-unique bundle %s: %s vs %s", (uint8_t *)v20, 0x20u);
    v41 = v46;
    swift_arrayDestroy(v46, 3);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    sub_10001DBC8((uint64_t)v14, type metadata accessor for LNBundleRecord);
    sub_10001DBC8((uint64_t)v11, type metadata accessor for LNBundleRecord);
    sub_10001DBC8((uint64_t)v8, type metadata accessor for LNBundleRecord);
  }

  sub_1000207A8(a1, a3, type metadata accessor for LNBundleRecord);
}

void sub_10009C350(_QWORD *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  _BYTE v60[24];
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;

  v57 = a3;
  v58 = a4;
  v8 = sub_10001BE7C(&qword_100129FE0);
  __chkstk_darwin(v8);
  v59 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v56 - v11;
  v13 = type metadata accessor for LNBundleRecord(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2 + 16;
  v18 = a1[3];
  v17 = a1[4];
  sub_10000E858(a1, v18);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v17 + 8) + 8))(v18);
  swift_beginAccess(a2 + 16, v61, 32, 0);
  sub_10002DA50(v19, *(_QWORD *)(a2 + 16), (uint64_t)v12);
  swift_bridgeObjectRelease();
  if (sub_10001C93C((uint64_t)v12, 1, v13) == 1)
  {
    sub_1000131E0((uint64_t)v12, &qword_100129FE0);
    swift_endAccess(v61);
    sub_10000E858(a1, a1[3]);
    if ((sub_1000B2604() & 1) != 0)
    {
      sub_100019A60((uint64_t)a1, (uint64_t)v61);
      swift_beginAccess(a5 + 16, v60, 33, 0);
      sub_1000B79B8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002FA78);
      v20 = *(_QWORD *)(*(_QWORD *)(a5 + 16) + 16);
      sub_1000B7A10(v20, (uint64_t (*)(BOOL))sub_10002FA78);
      v21 = sub_100016184((uint64_t)v61, v62);
      v22 = __chkstk_darwin(v21);
      v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v25 + 16))(v24, v22);
      sub_1000B9A1C(v20, (uint64_t)v24, (uint64_t *)(a5 + 16));
      sub_10000E87C(v61);
      swift_endAccess(v60);
    }
  }
  else
  {
    sub_1000BB03C((uint64_t)v12, (uint64_t)v15, type metadata accessor for LNBundleRecord);
    swift_endAccess(v61);
    v26 = (uint64_t *)&v15[*(int *)(v13 + 24)];
    v27 = *v26;
    v28 = v26[1];
    v29 = a1[3];
    v30 = a1[4];
    sub_10000E858(a1, v29);
    v31 = *(_QWORD *)(v30 + 8);
    v32 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 24);
    sub_10001EBF8(v27, v28);
    v33 = v32(v29, v31);
    v35 = v34;
    LOBYTE(v31) = static Data.== infix(_:_:)(v27);
    sub_10001EA88(v33, v35);
    sub_10001EA88(v27, v28);
    if ((v31 & 1) == 0)
    {
      sub_10000E858(a1, a1[3]);
      if ((sub_1000B2604() & 1) != 0)
      {
        v36 = (uint64_t *)(v57 + 16);
        sub_100019A60((uint64_t)a1, (uint64_t)v61);
        swift_beginAccess(v36, v60, 33, 0);
        sub_1000B79B8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002FA78);
        v37 = *(_QWORD *)(*v36 + 16);
        sub_1000B7A10(v37, (uint64_t (*)(BOOL))sub_10002FA78);
        v38 = sub_100016184((uint64_t)v61, v62);
        v39 = __chkstk_darwin(v38);
        v41 = (char *)&v56 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v42 + 16))(v41, v39);
        sub_1000B9A1C(v37, (uint64_t)v41, v36);
      }
      else
      {
        v43 = (uint64_t *)(v58 + 16);
        v44 = a1[3];
        v45 = a1[4];
        v46 = sub_10000E858(a1, v44);
        v62 = v44;
        v58 = *(_QWORD *)(v45 + 8);
        v63 = v58;
        v47 = sub_10001795C(v61);
        v57 = *(char **)(*(_QWORD *)(v44 - 8) + 16);
        ((void (*)(_QWORD *, _QWORD *, uint64_t))v57)(v47, v46, v44);
        swift_beginAccess(v43, v60, 33, 0);
        sub_1000B79B8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100030100);
        v48 = *(_QWORD *)(*v43 + 16);
        v49 = sub_1000B7A10(v48, (uint64_t (*)(BOOL))sub_100030100);
        v56 = (uint64_t)&v56;
        v50 = __chkstk_darwin(v49);
        v52 = (char *)&v56 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, _QWORD *, uint64_t, double))v57)(v52, v47, v44, v50);
        sub_1000BB744(v48, (uint64_t)v52, v43, v44, v58);
      }
      sub_10000E87C(v61);
      swift_endAccess(v60);
    }
    sub_10001DBC8((uint64_t)v15, type metadata accessor for LNBundleRecord);
  }
  v53 = a1[3];
  v54 = a1[4];
  sub_10000E858(a1, v53);
  (*(void (**)(uint64_t))(*(_QWORD *)(v54 + 8) + 8))(v53);
  swift_beginAccess(v16, v61, 33, 0);
  v55 = (uint64_t)v59;
  sub_10004B7C8();
  swift_endAccess(v61);
  swift_bridgeObjectRelease();
  sub_1000131E0(v55, &qword_100129FE0);
}

uint64_t sub_10009C898()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v19;
  char v20;
  char v21;

  sub_10000C038();
  v1 = v0;
  type metadata accessor for Data.Iterator(0);
  sub_100013E18();
  __chkstk_darwin(v2);
  sub_10001B738();
  v3 = v1[4];
  sub_10000E858(v1, v1[3]);
  v4._countAndFlagsBits = sub_1000BF0B8(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8));
  String.append(_:)(v4);
  sub_10000E038();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6 = v1[4];
  sub_10000E858(v1, v1[3]);
  v7 = sub_1000BF0B8(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 24));
  v9 = v8;
  v19 = v7;
  Data.makeIterator()(v7, v8);
  sub_10007EC94(&qword_10012AD98, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
  sub_1000BE544();
  if ((v21 & 1) == 0)
  {
    do
    {
      v10 = sub_10001BE7C(&qword_10012ADA0);
      v11 = swift_allocObject(v10, 72, 7);
      *(_OWORD *)(v11 + 16) = xmmword_1000EFAE0;
      *(_QWORD *)(v11 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v11 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v11 + 32) = v20;
      v12._countAndFlagsBits = String.init(format:_:)(0x786868323025, 0xE600000000000000);
      String.append(_:)(v12);
      sub_1000117B4();
      sub_1000BE544();
    }
    while (v21 != 1);
  }
  v13 = sub_1000BE644();
  v14(v13);
  sub_10001EA88(v19, v9);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.append(_:)(v15);
  sub_1000117B4();
  v16._countAndFlagsBits = 10;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 8237;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  return sub_1000117B4();
}

uint64_t sub_10009CA80(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  Swift::String v27;
  Swift::String v28;
  char v29;
  char v30;

  v25 = a2;
  v3 = type metadata accessor for Data.Iterator(0);
  v24 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28._countAndFlagsBits = 8237;
  v28._object = (void *)0xE200000000000000;
  v6 = a1[3];
  v7 = a1[4];
  sub_10000E858(a1, v6);
  v8._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000E858(a1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  v14 = v13;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  v23 = v12;
  Data.makeIterator()(v12, v13);
  sub_10007EC94(&qword_10012AD98, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
  v16 = v15;
  dispatch thunk of IteratorProtocol.next()(v3, v15);
  if ((v30 & 1) == 0)
  {
    v26 = xmmword_1000EFAE0;
    do
    {
      v17 = v29;
      v18 = sub_10001BE7C(&qword_10012ADA0);
      v19 = swift_allocObject(v18, 72, 7);
      *(_OWORD *)(v19 + 16) = v26;
      *(_QWORD *)(v19 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v19 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v19 + 32) = v17;
      v20._countAndFlagsBits = String.init(format:_:)(0x786868323025, 0xE600000000000000);
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      dispatch thunk of IteratorProtocol.next()(v3, v16);
    }
    while (v30 != 1);
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  sub_10001EA88(v23, v14);
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 10;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  String.append(_:)(v28);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009CCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v17;
  uint64_t v18;

  swift_defaultActor_initialize(v8);
  *(_BYTE *)(v8 + 144) = 1;
  v17 = sub_10001BE7C(&qword_10012B3C8);
  swift_allocObject(v17, 41, 7);
  v18 = sub_100096C3C();
  *(_QWORD *)(v8 + 112) = a5;
  *(_QWORD *)(v8 + 120) = a6;
  *(_QWORD *)(v8 + 152) = a4;
  *(_QWORD *)(v8 + 160) = v18;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 176) = a1;
  *(_QWORD *)(v8 + 184) = a2;
  *(_QWORD *)(v8 + 192) = a3;
  *(_QWORD *)(v8 + 128) = a7;
  *(_QWORD *)(v8 + 136) = a8;
  return v8;
}

uint64_t sub_10009CD74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v2 = v1;
  v4 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100096758(a1, sub_1000BCA54);
  v7 = type metadata accessor for TaskPriority(0);
  sub_100014360((uint64_t)v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject(&unk_10011DE70, 40, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  swift_retain();
  sub_100029394((uint64_t)v6, (uint64_t)&unk_10012B378, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_10009CE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000BDA50, a4, 0);
}

uint64_t sub_10009CE60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_task_switch(sub_10009CE78, 0, 0);
}

uint64_t sub_10009CE78()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(__int128 **)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = v1[3];
  v5 = *v1;
  v4 = v1[1];
  *(_OWORD *)(v0 + 48) = v1[2];
  *(_OWORD *)(v0 + 64) = v3;
  *(_OWORD *)(v0 + 16) = v5;
  *(_OWORD *)(v0 + 32) = v4;
  v6 = sub_1000BE0E8();
  *(_QWORD *)(v0 + 96) = v6;
  *(_QWORD *)(v6 + 16) = v0 + 16;
  *(_QWORD *)(v6 + 24) = v2;
  sub_1000BC720(v1);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 104) = v7;
  *v7 = v0;
  v7[1] = sub_10009CF2C;
  sub_1000167A8();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10009CF2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000BDFE8();
  if (!v1)
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
  sub_1000167A8();
  return sub_100019418(v2, v3, v4);
}

uint64_t sub_10009CF70()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  sub_10000FE70();
  sub_1000BE884();
  sub_1000059A8();
  sub_100013158(v0, v1);
  sub_10007ECC8(v2, v3);
  v4 = (uint64_t (*)(void))sub_1000121E0();
  return sub_10001A480(v4);
}

uint64_t sub_10009CFBC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000FE70();
  swift_task_dealloc(*(_QWORD *)(v2 + 96));
  sub_1000BE884();
  sub_1000059A8();
  sub_100013158(v0, v1);
  sub_10007ECC8(v3, v4);
  return sub_10001A480(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10009D014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD v23[4];

  v6 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001BE7C(&qword_10012B348);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_10011DE20, v14 + v11, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 48) = sub_1000BC8D0;
  *(_QWORD *)(a2 + 56) = v15;
  sub_10007ECC8(v16, v17);
  v18 = *(_OWORD *)(a2 + 16);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v18;
  v19 = *(_OWORD *)(a2 + 48);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v19;
  sub_1000BC720(v23);
  sub_100096758((uint64_t)v23, sub_1000BC990);
  sub_1000BAFB8(v23);
  v20 = type metadata accessor for TaskPriority(0);
  sub_100014360((uint64_t)v8, 1, 1, v20);
  v21 = (_QWORD *)swift_allocObject(&unk_10011DE48, 40, 7);
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = a3;
  swift_retain();
  sub_100029394((uint64_t)v8, (uint64_t)&unk_10012B358, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_10009D1C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v4 = a1;
    swift_errorRetain(a1);
    v1 = sub_10001BE7C(&qword_10012B348);
    return CheckedContinuation.resume(throwing:)(&v4, v1);
  }
  else
  {
    v3 = sub_10001BE7C(&qword_10012B348);
    return CheckedContinuation.resume(returning:)(v3, v3);
  }
}

uint64_t sub_10009D224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_10009D23C, a4, 0);
}

uint64_t sub_10009D23C()
{
  uint64_t v0;

  sub_10009D264();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10009D264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = v0;
  v2 = sub_10001BE7C(&qword_10012AD50);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(v0 + 168))
  {
    if (qword_100127EC8 != -1)
      swift_once(&qword_100127EC8, sub_100099764);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100012A40(v5, (uint64_t)qword_10012D1A8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Starting processing task", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = type metadata accessor for TaskPriority(0);
    sub_100014360((uint64_t)v4, 1, 1, v10);
    sub_10007EC94(&qword_10012B328, (uint64_t (*)(uint64_t))type metadata accessor for Registry.IndexingQueue);
    v12 = v11;
    v13 = (_QWORD *)swift_allocObject(&unk_10011DDF8, 40, 7);
    v13[2] = v1;
    v13[3] = v12;
    v13[4] = v1;
    swift_retain_n(v1, 2);
    *(_QWORD *)(v1 + 168) = sub_100029394((uint64_t)v4, (uint64_t)&unk_10012B330, (uint64_t)v13);
    swift_release();
  }
}

uint64_t sub_10009D40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 248) = a4;
  return swift_task_switch(sub_10009D424, a4, 0);
}

uint64_t sub_10009D424()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v0 + 248) + 160);
  sub_10007EC94(&qword_10012B328, (uint64_t (*)(uint64_t))type metadata accessor for Registry.IndexingQueue);
  sub_1000179D8();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_10009D478()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_1000BE0E8();
  *(_QWORD *)(v0 + 256) = v1;
  *(_QWORD *)(v1 + 16) = v0 + 216;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 264) = v2;
  sub_10001BE7C(&qword_10012B338);
  *v2 = v0;
  v2[1] = sub_10009D518;
  sub_1000167A8();
  return withCheckedContinuation<A>(isolation:function:_:)(v3, v4, v5, 0x29287478656ELL, 0xE600000000000000, v6, v1, v7);
}

uint64_t sub_10009D518()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001DCCC();
  v1 = *(_QWORD *)(v0 + 248);
  sub_100017C10(*(_QWORD *)(v0 + 264));
  sub_1000158B0();
  return sub_100019418((uint64_t)sub_10009D558, v1, 0);
}

uint64_t sub_10009D558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  void *v13;
  os_log_type_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 272) = v2;
  *(_QWORD *)(v1 + 280) = v3;
  v4 = *(_QWORD *)(v1 + 96);
  v5 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 288) = v4;
  *(_QWORD *)(v1 + 296) = v5;
  v6 = *(_QWORD *)(v1 + 112);
  v7 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 304) = v6;
  *(_QWORD *)(v1 + 312) = v7;
  v8 = *(_QWORD *)(v1 + 128);
  v9 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 320) = v8;
  *(_QWORD *)(v1 + 328) = v9;
  if (v3)
  {
    *(_BYTE *)(v1 + 16) = v2 & 1;
    *(_QWORD *)(v1 + 24) = v3;
    *(_QWORD *)(v1 + 32) = v4;
    *(_QWORD *)(v1 + 40) = v5;
    *(_QWORD *)(v1 + 48) = v6;
    *(_BYTE *)(v1 + 56) = v7 & 1;
    *(_QWORD *)(v1 + 64) = v8;
    *(_QWORD *)(v1 + 72) = v9;
    v10 = (_QWORD *)swift_task_alloc(dword_10012AA5C);
    *(_QWORD *)(v1 + 336) = v10;
    *v10 = v1;
    v10[1] = sub_10009D690;
    return sub_10009DA20(v1 + 16, 0);
  }
  else
  {
    swift_release();
    if (qword_100127EC8 != -1)
      swift_once(&qword_100127EC8, sub_100099764);
    v12 = sub_10000C05C();
    v13 = (void *)sub_100012A40(v12, (uint64_t)qword_10012D1A8);
    Logger.logObject.getter(v13);
    v14 = sub_1000186A0();
    if (sub_100013670(v14))
    {
      v15 = (_WORD *)sub_100011780(2);
      sub_10001F81C(v15);
      sub_10001EF60((void *)&_mh_execute_header, v16, v17, "Processing task ending");
      sub_1000133FC(v0);
    }
    v18 = *(_QWORD *)(v1 + 248);

    *(_QWORD *)(v18 + 168) = 0;
    swift_release();
    return sub_1000BDB54(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_10009D690()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  sub_1000143EC();
  sub_100013478();
  v0[43] = v2;
  v0[44] = v3;
  v0[45] = v1;
  sub_10000EB14(v4);
  if (v1)
    v5 = sub_10009D978;
  else
    v5 = sub_10009D6E4;
  return sub_100019418((uint64_t)v5, v0[31], 0);
}

uint64_t sub_10009D6E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v1 = *(_QWORD *)(v0[31] + 152);
  v33 = *(_QWORD *)(v1 + 16);
  if (v33)
  {
    v36 = v0 + 18;
    v2 = v0[44];
    v3 = v0[45];
    v31 = *(_QWORD *)(v2 + 16);
    v30 = v1 + 32;
    result = sub_10001A83C();
    v5 = 0;
    v29 = (uint64_t *)(v2 + 40);
    v32 = v1;
    while (v5 < *(_QWORD *)(v1 + 16))
    {
      v34 = v5;
      sub_100019A60(v30 + 40 * v5, (uint64_t)v36);
      sub_10000E858(v36, v0[21]);
      sub_10000C030();
      sub_1000957CC();
      v7 = v6;
      v35 = v3;
      sub_1000059C4();
      v8 = Set.init(minimumCapacity:)(*(_QWORD *)(v7 + 16), type metadata for String, &protocol witness table for String);
      v0[28] = v8;
      v9 = *(_QWORD *)(v7 + 16);
      if (v9)
      {
        v10 = (uint64_t *)(v7 + 40);
        do
        {
          v11 = *(v10 - 1);
          v12 = *v10;
          sub_10000C030();
          sub_10001161C(v0 + 25, v11, v12);
          swift_bridgeObjectRelease();
          v10 += 2;
          --v9;
        }
        while (v9);
        sub_10000EC84();
        v13 = v0[28];
      }
      else
      {
        v13 = v8;
        sub_10000EC84();
      }
      sub_10006FEA4(v13, (uint64_t)&_swiftEmptySetSingleton);
      sub_1000059C4();
      sub_10000E858(v36, v0[21]);
      sub_10001A83C();
      v0[29] = Set.init(minimumCapacity:)(v31, type metadata for String, &protocol witness table for String);
      v14 = v29;
      for (i = v31; i; --i)
      {
        v16 = *(v14 - 1);
        v17 = *v14;
        sub_10000C030();
        sub_10001161C(v0 + 23, v16, v17);
        swift_bridgeObjectRelease();
        v14 += 2;
      }
      swift_bridgeObjectRelease();
      sub_10006FEA4((uint64_t)&_swiftEmptySetSingleton, v0[29]);
      sub_1000059C4();
      result = sub_10000E87C(v36);
      v5 = v34 + 1;
      v1 = v32;
      v3 = v35;
      if (v34 + 1 == v33)
      {
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    v18 = v0[40];
    v19 = v0[41];
    v21 = v0[38];
    v20 = v0[39];
    v23 = v0[36];
    v22 = v0[37];
    v25 = v0[34];
    v24 = v0[35];
    swift_bridgeObjectRelease();
    sub_10000EC84();
    sub_1000BC808(v25, v24, v23, v22, v21, v20, v18, v19);
    sub_1000167A8();
    return sub_1000BDE58(v26, v27, v28);
  }
  return result;
}

uint64_t sub_10009D978()
{
  uint64_t v0;

  return swift_unexpectedError(*(_QWORD *)(v0 + 360), "LinkDaemon/Registry.swift", 25, 1, 539);
}

_QWORD *sub_10009D994@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[136];
  _QWORD __src[17];

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(v2 + 112))(__src);
  if (!v3)
  {
    memcpy(v8, __src, sizeof(v8));
    if (a1)
    {
      v7 = swift_retain();
      sub_1000CC5C8(v7);
      swift_release();
    }
    return memcpy(a2, v8, 0x88uLL);
  }
  return result;
}

uint64_t sub_10009DA20(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_BYTE *)(v3 + 760) = a2;
  *(_QWORD *)(v3 + 480) = a1;
  *(_QWORD *)(v3 + 488) = v2;
  v4 = type metadata accessor for Schema.RuntimeError(0);
  *(_QWORD *)(v3 + 496) = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 504) = swift_task_alloc(v5);
  *(_QWORD *)(v3 + 512) = swift_task_alloc(v5);
  *(_QWORD *)(v3 + 520) = swift_task_alloc(v5);
  v6 = type metadata accessor for RegistryError(0);
  *(_QWORD *)(v3 + 528) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Data.Iterator(0);
  *(_QWORD *)(v3 + 536) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 544) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 552) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 560) = swift_task_alloc(v9);
  return swift_task_switch(sub_10009DAF4, v2, 0);
}

uint64_t sub_10009DAF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_log_t log, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  _QWORD *v71;
  id v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t result;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;
  NSObject *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(_QWORD);
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  __n128 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t (*v134)(void);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  Swift::String v159;
  Swift::String v160;

  sub_1000BE840();
  v157 = v36;
  v158 = v37;
  v156 = v35;
  v38 = v35 + 748;
  v39 = v35 + 752;
  v40 = v35 + 756;
  if (qword_100127EC8 != -1)
    swift_once(&qword_100127EC8, sub_100099764);
  v41 = (_BYTE *)(v35 + 757);
  v42 = *(_QWORD *)(v35 + 488);
  v43 = sub_10000C05C();
  *(_QWORD *)(v35 + 568) = sub_100012A40(v43, (uint64_t)qword_10012D1A8);
  sub_1000BE980();
  sub_1000BE980();
  sub_1000BE980();
  sub_1000179D8();
  sub_1000BE980();
  sub_1000179D8();
  v44 = sub_100005900();
  v45 = static os_log_type_t.default.getter();
  if (sub_1000BE810(v45))
  {
    LODWORD(v143) = v42;
    v145 = v44;
    v147 = v35 + 752;
    v149 = v35 + 756;
    v151 = v35 + 757;
    v138 = v35 + 424;
    v139 = v35 + 744;
    v46 = *(_QWORD *)(v35 + 480);
    v47 = sub_100011780(24);
    v141 = sub_100011780(32);
    v153 = v141;
    *(_DWORD *)v47 = 136315650;
    sub_1000BEE30(v46 + 24);
    sub_1000BEA00();
    if (*(_QWORD *)(v35 + 384) >> 60 == 15)
    {
      v49 = 1701736302;
    }
    else
    {
      v136 = v35 + 748;
      v50 = *(_QWORD *)(v35 + 536);
      v154 = 0;
      v155 = 0xE000000000000000;
      v51 = sub_1000BF07C();
      sub_10001EBF8(v51, v52);
      v53 = sub_1000BF07C();
      Data.makeIterator()(v53, v54);
      sub_1000BE3E0();
      sub_10007EC94(&qword_10012AD98, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
      dispatch thunk of IteratorProtocol.next()(v50, v55);
      if ((*(_BYTE *)(v35 + 759) & 1) != 0)
      {
        v49 = 0;
      }
      else
      {
        v135 = v47;
        do
        {
          v56 = sub_10001BE7C(&qword_10012ADA0);
          v57 = (__n128 *)sub_1000100C8(v56, 72);
          sub_1000BE2F0(v57, v58, v59, v60, v61, v62, v63, v64, v135, v136, v138, v139, v141, v143, (uint64_t)v145, v147, v149, v151, v65);
          *(_QWORD *)(v66 + 56) = &type metadata for UInt8;
          *(_QWORD *)(v66 + 64) = &protocol witness table for UInt8;
          v159._countAndFlagsBits = sub_1000BDB3C(v66);
          sub_1000BE8C0(v159);
          sub_100007398();
          v67 = sub_1000BF07C();
          dispatch thunk of IteratorProtocol.next()(v67, v68);
        }
        while (*(_BYTE *)(v35 + 759) != 1);
        v49 = v154;
        v47 = v135;
      }
      sub_100011110(*(_QWORD *)(v35 + 544));
      v38 = v136;
    }
    v39 = v147;
    v69 = *(_BYTE **)(v35 + 480);
    v70 = *(_QWORD *)(v35 + 488);
    *(_QWORD *)(v35 + 424) = sub_1000167C4(v49, v48, &v153);
    sub_1000BEEA4(v138, v35 + 432);
    sub_1000059B0();
    sub_1000BE0B8();
    sub_1000BE0B8();
    *(_WORD *)(v47 + 12) = 1024;
    sub_1000BE0B8();
    *(_DWORD *)(v35 + 752) = *v69 & 1;
    v40 = v149;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, v149);
    sub_1000BE0B8();
    *(_WORD *)(v47 + 18) = 1024;
    LODWORD(v69) = *(unsigned __int8 *)(v70 + 144);
    sub_1000073B0();
    *(_DWORD *)(v35 + 744) = (_DWORD)v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v139, v38);
    sub_1000073B0();
    _os_log_impl((void *)&_mh_execute_header, v145, (os_log_type_t)v143, "Applying change to version %s, authoritative=%{BOOL}d, isStoreDirty=%{BOOL}d\")", (uint8_t *)v47, 0x18u);
    sub_100013320(v141);
    sub_1000133FC(v141);
    sub_1000133FC(v47);

    v41 = (_BYTE *)v151;
  }
  else
  {
    sub_1000073B0();
    sub_1000BE0B8();
    sub_1000BE0B8();
    sub_1000BE0B8();
    sub_1000BE0B8();

    sub_1000073B0();
  }
  v71 = *(_QWORD **)(*(_QWORD *)(v35 + 480) + 16);
  v72 = *(id *)(*(_QWORD *)(v35 + 488) + 176);
  v73 = 0;
  sub_1000653B0(v71);

  sub_1000958B4();
  v75 = v74;
  result = sub_1000117B4();
  *(_QWORD *)(v35 + 576) = v75;
  v77 = v75[2];
  *(_QWORD *)(v35 + 584) = v77;
  if (v77)
  {
    v41[4] = 0;
    *(_QWORD *)(v35 + 608) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v35 + 592) = 0u;
    if (v75[2])
    {
      *(_QWORD *)(v35 + 616) = v75[4];
      *(_QWORD *)(v35 + 624) = v75[5];
      sub_10000EC68();
      v78 = (_QWORD *)sub_1000BEF6C();
      *(_QWORD *)(v35 + 632) = v78;
      *v78 = v35;
      v78[1] = sub_10009E318;
      v79 = sub_1000BE650();
      return sub_1000A1504(v79, v80);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v150 = v40;
    *(_QWORD *)(v35 + 648) = _swiftEmptyArrayStorage;
    v81 = *(_QWORD *)(v35 + 488);
    sub_1000059C4();
    v82 = sub_10001BE7C(&qword_10012B308);
    v84 = sub_1000BE970(v82, v83, v82);
    v85 = sub_10001BE7C((uint64_t *)&unk_10012B310);
    v87 = sub_1000BE970(v85, v86, v85);
    v88 = *(uint64_t (**)(void))(v81 + 128);
    if (v88)
      v89 = sub_1000BEDA4(v88);
    else
      v89 = 0;
    sub_10001F83C(v89);
    if (v91)
    {
      v41[5] = *(_BYTE *)(v90 + 40);
      *(_QWORD *)(v35 + 712) = _swiftEmptyArrayStorage;
      v41[6] = 0;
      *(_OWORD *)(v35 + 696) = 0u;
      *(_QWORD *)(v35 + 688) = v84;
      *(_QWORD *)(v35 + 680) = v87;
      swift_bridgeObjectRetain();
      sub_10000DDE0();
      sub_1000BED74();
      v92 = (_QWORD *)swift_task_alloc(dword_10012AA64);
      *(_QWORD *)(v35 + 728) = v92;
      *v92 = v35;
      v92[1] = sub_10009E810;
      v93 = sub_1000BE800();
      return sub_10000E048(v93, v94);
    }
    else
    {
      sub_1000059C4();
      sub_1000059B0();
      sub_1000BE24C();
      v152 = v41;
      if (!v97 & v96)
      {
        sub_100011118();
      }
      else
      {
        v73 = *(_QWORD **)(v95 + 24);
        sub_1000BEC64();
        if ((v98 & 1) != 0 || (type metadata for String[144] & 1) == 0)
        {
          sub_1000BEF8C();
          sub_1000BEFA4();
          sub_1000BEF98();
        }
      }
      sub_1000BE7E0();
      sub_1000166E8();
      sub_1000BC720(v73);
      v99 = sub_1000166E8();
      v100 = Logger.logObject.getter(v99);
      v101 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v100, (os_log_type_t)v101))
      {
        v148 = v39;
        v137 = v38;
        v144 = v35 + 448;
        v102 = *(_QWORD *)(v35 + 480);
        v103 = sub_100011780(18);
        v146 = sub_100011780(32);
        v153 = v146;
        *(_DWORD *)v103 = 136315394;
        sub_1000BEE30(v102 + 24);
        sub_1000BEA00();
        if (*(_QWORD *)(v35 + 400) >> 60 != 15)
        {
          v105 = *(_QWORD *)(v35 + 536);
          v154 = 0;
          v155 = 0xE000000000000000;
          v106 = sub_1000BE9E0();
          sub_10001EBF8(v106, v107);
          v108 = sub_1000BE9E0();
          Data.makeIterator()(v108, v109);
          sub_1000BE3E0();
          sub_10007EC94(&qword_10012AD98, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
          dispatch thunk of IteratorProtocol.next()(v105, v110);
          if ((*v152 & 1) == 0)
          {
            LODWORD(v138) = v101;
            v140 = v103;
            v142 = (uint64_t)v100;
            v111 = v152;
            do
            {
              v112 = sub_10001BE7C(&qword_10012ADA0);
              v113 = (__n128 *)sub_1000100C8(v112, 72);
              sub_1000BE2F0(v113, v114, v115, v116, v117, v118, v119, v120, v135, v137, v138, v140, v142, v144, v146, v148, v150, (uint64_t)v152, v121);
              *(_QWORD *)(v122 + 56) = &type metadata for UInt8;
              *(_QWORD *)(v122 + 64) = &protocol witness table for UInt8;
              v160._countAndFlagsBits = sub_1000BDB3C(v122);
              sub_1000BE8C0(v160);
              sub_10000EC84();
              v123 = sub_1000BE9E0();
              dispatch thunk of IteratorProtocol.next()(v123, v124);
            }
            while (*v111 != 1);
            v103 = v140;
            v100 = v142;
            LOBYTE(v101) = v138;
          }
          sub_1000BDC60();
        }
        v126 = *(_QWORD **)(v35 + 480);
        v125 = *(_QWORD *)(v35 + 488);
        v127 = sub_1000BE644();
        v130 = sub_10000FBEC(v127, v128, v129);
        sub_1000BEC1C(v130);
        sub_10001B364(v144, v131);
        sub_1000059C4();
        sub_1000BAFB8(v126);
        sub_1000BAFB8(v126);
        *(_WORD *)(v103 + 12) = 1024;
        v132 = *(unsigned __int8 *)(v125 + 144);
        sub_10008C9C8();
        *(_DWORD *)(v35 + 748) = v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v137, v148);
        sub_10008C9C8();
        sub_1000BE4C8((void *)&_mh_execute_header, v100, (os_log_type_t)v101, "Finished applying change to version %s, isStoreDirty=%{BOOL}d", (uint8_t *)v103);
        v104 = (void (*)(_QWORD))v146;
        sub_100013320(v146);
        sub_1000133FC(v146);
        sub_1000133FC(v103);

      }
      else
      {
        v104 = *(void (**)(_QWORD))(v35 + 488);
        sub_10001BFF8();
        sub_1000BE458();
        sub_1000BE458();

        sub_10001BFF8();
      }
      sub_1000073B0();
      sub_1000BED8C();
      if (v104)
      {
        swift_errorRetain(0);
        v104(0);
        swift_errorRelease(0);
      }
      sub_1000BE780();
      swift_errorRelease(0);
      sub_1000158B0();
      sub_100005878();
      sub_100010270();
      sub_10001631C();
      sub_10000DD44();
      sub_100010034();
      sub_1000BE774();
      return sub_10001BF84((uint64_t)_swiftEmptyArrayStorage, v133, v134);
    }
  }
  return result;
}

uint64_t sub_10009E318()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)();

  sub_1000143EC();
  sub_100072058(v2);
  *(_QWORD *)(v0 + 640) = v1;
  swift_task_dealloc(v3);
  if (v1)
    v4 = sub_10009F0FC;
  else
    v4 = sub_10009E368;
  return sub_100019418((uint64_t)v4, *(_QWORD *)(v0 + 488), 0);
}

void sub_10009E368()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(void);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  Swift::String v76;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 608));
  v2 = *(_QWORD *)(v0 + 608);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000073A0();
    sub_10001B71C();
    v2 = v67;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 >= *(_QWORD *)(v2 + 24) >> 1)
  {
    sub_10001B71C();
    v2 = v68;
  }
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 616);
  v6 = *(_QWORD *)(v0 + 584);
  v7 = *(_QWORD *)(v0 + 600) + 1;
  *(_QWORD *)(v2 + 16) = v3 + 1;
  v8 = v2 + 16 * v3;
  *(_QWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 40) = v4;
  if (v7 != v6)
  {
    v28 = *(_QWORD *)(v0 + 600) + 1;
    *(_QWORD *)(v0 + 608) = v2;
    sub_1000BEB48(v28);
    if (v30)
    {
      __break(1u);
    }
    else
    {
      sub_1000BE74C(v29);
      sub_10000EC68();
      v31 = (_QWORD *)sub_1000BEF6C();
      *(_QWORD *)(v0 + 632) = v31;
      *v31 = v0;
      v31[1] = sub_10009E318;
      v32 = sub_1000BE684();
      sub_1000BDDC8(v32, v33);
    }
    return;
  }
  v9 = (_BYTE *)(v0 + 757);
  v10 = *(_QWORD *)(v0 + 640);
  v11 = *(_QWORD *)(v0 + 592);
  v12 = *(unsigned __int8 *)(v0 + 761);
  *(_QWORD *)(v0 + 648) = v2;
  v13 = *(_QWORD *)(v0 + 488);
  swift_bridgeObjectRelease();
  v14 = sub_10001BE7C(&qword_10012B308);
  v15 = _swiftEmptyArrayStorage;
  v17 = sub_1000BEA84(v14, v16, v14);
  v18 = sub_10001BE7C((uint64_t *)&unk_10012B310);
  sub_1000BEA84(v18, v19, v18);
  v20 = *(uint64_t (**)(void))(v13 + 128);
  if (v20)
  {
    v21 = sub_1000BEDA4(v20);
    if (!v10)
      goto LABEL_10;
    sub_1000059A0();
  }
  v21 = 0;
LABEL_10:
  v22 = sub_10001F83C(v21);
  if (v24)
  {
    *(_BYTE *)(v0 + 762) = *(_BYTE *)(v23 + 40);
    *(_QWORD *)(v0 + 712) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 704) = 0;
    *(_QWORD *)(v0 + 696) = v11;
    *(_BYTE *)(v0 + 763) = v12;
    sub_1000BE764(v22);
    sub_10000DDE0();
    sub_1000BED74();
    v25 = (_QWORD *)swift_task_alloc(dword_10012AA64);
    *(_QWORD *)(v0 + 728) = v25;
    *v25 = v0;
    v25[1] = sub_10009E810;
    v26 = sub_1000BE800();
    sub_1000111C0(v26, v27);
  }
  else
  {
    sub_1000059B0();
    sub_10000C028();
    if ((v12 & 1) != 0 || (v34 = *(_QWORD *)(v0 + 480), *(_QWORD *)(v34 + 32) >> 60 == 15))
    {
      sub_100011118();
    }
    else
    {
      v15 = *(_QWORD **)(v34 + 24);
      sub_1000BEC64();
      if ((v42 & 1) != 0 || (type metadata for String[144] & 1) == 0)
      {
        v43 = sub_1000BE678();
        sub_10001EBF8(v43, v44);
        v45 = sub_1000BE678();
        sub_1000A1B28(v45, v46);
        v47 = sub_1000BE678();
        sub_100013158(v47, v48);
      }
    }
    sub_1000BE7D0();
    sub_100011038();
    sub_1000BC720(v15);
    v35 = sub_100011038();
    Logger.logObject.getter(v35);
    v36 = sub_1000BE8F8();
    if (sub_10001F550((os_log_type_t)v36))
    {
      v75 = v12;
      sub_1000BEC44();
      v73 = v38;
      v74 = v37;
      v39 = *(_QWORD *)(v0 + 480);
      v40 = sub_100011780(18);
      v72 = sub_100011780(32);
      *(_DWORD *)v40 = 136315394;
      sub_1000BE224(v39 + 24, v36);
      sub_1000BE224(v36, v12);
      sub_1000BE724();
      if (!v41 & v30)
      {
        v49 = 0xE400000000000000;
      }
      else
      {
        v71 = v11;
        sub_1000BEAF4();
        v49 = 0xE000000000000000;
        sub_1000BF04C(v17);
        sub_1000BE6F4();
        sub_1000BE3E0();
        sub_10007EC94(&qword_10012AD98, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
        sub_1000BE260(v50);
        if ((*v9 & 1) == 0)
        {
          v70 = v40;
          do
          {
            v51 = *(_QWORD *)(v0 + 536);
            v52 = sub_10001BE7C(&qword_10012ADA0);
            v53 = sub_1000100C8(v52, 72);
            *(_OWORD *)(v53 + 16) = xmmword_1000EFAE0;
            *(_QWORD *)(v53 + 56) = &type metadata for UInt8;
            *(_QWORD *)(v53 + 64) = &protocol witness table for UInt8;
            v76._countAndFlagsBits = sub_1000BDB3C(v53);
            sub_1000BEE04(v76);
            sub_1000100D0();
            sub_1000BE414(v51);
          }
          while (*v9 != 1);
          v49 = 0xE000000000000000;
        }
        sub_1000BDC60();
      }
      v54 = v72;
      v55 = sub_1000BE7B8();
      v57 = sub_10000FBEC(v55, v49, v56);
      sub_1000BEC1C(v57);
      sub_1000BDBA4(v73, v58);
      sub_1000117B4();
      sub_1000BEA60();
      sub_1000BEA60();
      *(_WORD *)(v40 + 12) = 1024;
      v59 = sub_10001EE50();
      sub_1000BE798(v59, v60, v40 + 14, v40 + 18, v61, v62, v63, v64, v69, v70, v71, v72, v73, v74);
      sub_10001EE50();
      v12 = (uint64_t)v75;
      sub_1000BE4C8((void *)&_mh_execute_header, v75, (os_log_type_t)v36, "Finished applying change to version %s, isStoreDirty=%{BOOL}d", (uint8_t *)v40);
      sub_100013320(v54);
      sub_1000133FC(v54);
      sub_1000133FC(v40);

    }
    else
    {
      sub_100018B6C();
      sub_1000BE458();
      sub_1000BE458();

      sub_100018B6C();
    }
    sub_1000073B0();
    sub_1000BED8C();
    if (v12)
    {
      sub_1000BE300();
      sub_1000BEE64();
      sub_100019DA0();
    }
    sub_1000BE6DC();
    sub_100019DA0();
    sub_1000158B0();
    sub_100010270();
    sub_10001631C();
    sub_10000DD44();
    sub_100010034();
    sub_10001F024();
    sub_1000BE774();
    sub_1000BDDE4((uint64_t)_swiftEmptyArrayStorage, v65, v66);
  }
}

uint64_t sub_10009E810()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_1000143EC();
  sub_100072058(v2);
  *(_QWORD *)(v0 + 736) = v1;
  swift_task_dealloc(v3);
  if (v1)
    v4 = sub_10009F720;
  else
    v4 = sub_10009E860;
  return sub_100019418((uint64_t)v4, *(_QWORD *)(v0 + 488), 0);
}

#error "10009EE28: call analysis failed (funcsize=538)"

void sub_10009F0FC()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  void (*v58)(uint64_t);
  uint64_t v59;
  uint64_t (*v60)(void);
  uint64_t v61;
  NSObject *v62;
  uint64_t v63[3];
  Swift::String v64;

  v1 = (_BYTE *)(v0 + 757);
  v2 = *(_QWORD *)(v0 + 640);
  swift_errorRelease(*(_QWORD *)(v0 + 592));
  sub_10001A84C();
  sub_10001A84C();
  sub_100013E10();
  v3 = sub_10001A84C();
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 624);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 528);
    v9 = sub_100011780(22);
    v10 = sub_100011780(64);
    v63[0] = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = sub_1000101B0();
    *(_QWORD *)(v9 + 4) = sub_1000BEFE0(v11, v12, v63);
    sub_100011800(v7);
    *(_WORD *)(v9 + 12) = 2080;
    sub_10009A194();
    sub_10009A328();
    v14 = v13;
    sub_10001DBC8(v8, type metadata accessor for RegistryError);
    *(_QWORD *)(v9 + 14) = sub_1000BEA48(v14, v15, v63);
    v1 = (_BYTE *)(v0 + 757);
    swift_bridgeObjectRelease();
    sub_100019AF0();
    sub_100019AF0();
    sub_1000190F8((void *)&_mh_execute_header, v4, v5, "Error unregistering \"%s\" from the\nmetadata store: %s", (uint8_t *)v9);
    sub_100007404(v10);
    sub_1000133FC(v10);
    sub_1000133FC(v9);
  }
  else
  {
    sub_1000117AC(*(_QWORD *)(v0 + 624));
    sub_100019AF0();
    sub_100019AF0();
  }

  if (v1[3] == 1)
  {
    v17 = *(_QWORD *)(v0 + 480);
    v16 = *(_QWORD *)(v0 + 488);
    swift_bridgeObjectRelease();
    v18 = sub_1000059A8();
    *(_BYTE *)(v16 + 144) = 1;
    swift_willThrow(v18);
    v19 = *(void (**)(uint64_t))(v17 + 48);
    if (v19)
    {
      sub_1000165C0();
      v19(v2);
      sub_1000059A0();
    }
    sub_1000BE6DC();
    sub_1000059A0();
    sub_1000158B0();
    sub_100005878();
    sub_10001631C();
    sub_10000DD44();
    sub_100010034();
    sub_10001F024();
    v20 = (void (*)(void))sub_100072158();
    v20();
    return;
  }
  v21 = *(_QWORD *)(v0 + 584);
  v22 = *(_QWORD *)(v0 + 600) + 1;
  sub_1000059A0();
  if (v22 != v21)
  {
    v37 = *(_QWORD *)(v0 + 600) + 1;
    *(_QWORD *)(v0 + 592) = v2;
    v1[4] = 1;
    sub_1000BEB48(v37);
    if (v39)
    {
      __break(1u);
    }
    else
    {
      sub_1000BE74C(v38);
      sub_10000EC68();
      v40 = (_QWORD *)sub_1000BEF6C();
      *(_QWORD *)(v0 + 632) = v40;
      *v40 = v0;
      v40[1] = sub_10009E318;
      v41 = sub_1000BE684();
      sub_1000BDDC8(v41, v42);
    }
    return;
  }
  *(_QWORD *)(v0 + 648) = *(_QWORD *)(v0 + 608);
  v23 = *(_QWORD *)(v0 + 488);
  swift_bridgeObjectRelease();
  v24 = sub_10001BE7C(&qword_10012B308);
  v26 = (unsigned __int8 *)sub_1000BEA94(v24, v25, v24);
  v27 = sub_10001BE7C((uint64_t *)&unk_10012B310);
  sub_1000BEA94(v27, v28, v27);
  v29 = *(uint64_t (**)(void))(v23 + 128);
  if (v29)
  {
    v30 = sub_1000BED98(v29);
    if (!&protocol witness table for String)
      goto LABEL_13;
    sub_1000059A0();
  }
  v30 = 0;
LABEL_13:
  v31 = sub_10001F83C(v30);
  if (v33)
  {
    v1[5] = *(_BYTE *)(v32 + 40);
    *(_QWORD *)(v0 + 712) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 704) = 0;
    *(_QWORD *)(v0 + 696) = v2;
    v1[6] = 1;
    sub_1000BE764(v31);
    sub_10000DDE0();
    sub_1000BED74();
    v34 = (_QWORD *)swift_task_alloc(dword_10012AA64);
    *(_QWORD *)(v0 + 728) = v34;
    *v34 = v0;
    v34[1] = sub_10009E810;
    v35 = sub_1000BE800();
    sub_1000111C0(v35, v36);
  }
  else
  {
    sub_1000059B0();
    sub_10000C028();
    sub_100011118();
    sub_1000BE7D0();
    sub_100011038();
    sub_1000BC720(_swiftEmptyArrayStorage);
    v43 = sub_100011038();
    Logger.logObject.getter(v43);
    v44 = sub_1000BEEE0();
    if (sub_1000BE820(v44))
    {
      v62 = v26;
      v45 = *(_QWORD *)(v0 + 480);
      v46 = sub_100011780(18);
      v61 = sub_100011780(32);
      *(_DWORD *)v46 = 136315394;
      sub_1000BE224(v45 + 24, v0 + 344);
      sub_1000BE224(v0 + 344, v0 + 392);
      sub_1000BE724();
      if (!(!v47 & v39))
      {
        sub_1000BEAF4();
        v63[0] = 0;
        v63[1] = 0xE000000000000000;
        sub_1000BF04C((uint64_t)v26);
        sub_1000BE6F4();
        sub_1000BE3E0();
        sub_10007EC94(&qword_10012AD98, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
        sub_1000BE260(v48);
        if ((*v1 & 1) == 0)
        {
          do
          {
            v26 = *(unsigned __int8 **)(v0 + 552);
            v49 = *(_QWORD *)(v0 + 536);
            v50 = sub_10001BE7C(&qword_10012ADA0);
            v51 = sub_1000100C8(v50, 72);
            *(_OWORD *)(v51 + 16) = xmmword_1000EFAE0;
            *(_QWORD *)(v51 + 56) = &type metadata for UInt8;
            *(_QWORD *)(v51 + 64) = &protocol witness table for UInt8;
            v64._countAndFlagsBits = sub_1000BDB3C(v51);
            sub_1000BEE04(v64);
            sub_1000100D0();
            sub_1000BE414(v49);
          }
          while (*v1 != 1);
        }
        sub_1000BDC60();
      }
      v52 = sub_1000BE7B8();
      v55 = sub_100018928(v52, v53, v54);
      sub_1000BEC1C(v55);
      sub_1000BDBA4(v0 + 448, v56);
      sub_10000E038();
      sub_1000BEA60();
      sub_1000BEA60();
      *(_WORD *)(v46 + 12) = 1024;
      v57 = v26[144];
      sub_10001EE50();
      *(_DWORD *)(v0 + 748) = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 748, v0 + 752);
      sub_10001EE50();
      sub_1000BE4C8((void *)&_mh_execute_header, v62, (os_log_type_t)type metadata for String, "Finished applying change to version %s, isStoreDirty=%{BOOL}d", (uint8_t *)v46);
      sub_100013320(v61);
      sub_1000133FC(v61);
      sub_1000133FC(v46);

    }
    else
    {
      sub_100018B6C();
      sub_1000BE458();
      sub_1000BE458();

      sub_100018B6C();
    }
    sub_1000073B0();
    v58 = *(void (**)(uint64_t))(*(_QWORD *)(v0 + 480) + 48);
    if (v58)
    {
      sub_10001A84C();
      v58(v2);
      sub_100005A04();
    }
    sub_1000BE6DC();
    sub_100005A04();
    sub_1000158B0();
    sub_100010270();
    sub_10001631C();
    sub_10000DD44();
    sub_100010034();
    sub_10001F024();
    sub_1000BE774();
    sub_1000BDDE4((uint64_t)_swiftEmptyArrayStorage, v59, v60);
  }
}

#error "10009FC80: call analysis failed (funcsize=639)"

uint64_t sub_1000A0168(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 96) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = type metadata accessor for OSSignpostID(0);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A01CC, v2, 0);
}

uint64_t sub_1000A01CC()
{
  static OSSignpostID.exclusive.getter();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A01FC()
{
  uint64_t v0;
  uint64_t v1;

  sub_100097080();
  *(_QWORD *)(v0 + 56) = v1;
  return sub_1000059B8();
}

uint64_t sub_1000A025C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(void **)(v1 + 176);
  *(_QWORD *)(v0 + 64) = v3;
  v4 = sub_1000BE0E8();
  *(_QWORD *)(v0 + 72) = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  v3;
  v5 = (_QWORD *)sub_10003628C();
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = sub_1000A02E8;
  return sub_100065B64(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 96), (uint64_t)&unk_10012B300, v4);
}

uint64_t sub_1000A02E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  sub_1000143EC();
  sub_100072058(v2);
  *(_QWORD *)(v0 + 88) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v4 = *(_QWORD *)(v0 + 24);
    v5 = sub_1000A03B0;
  }
  else
  {

    sub_1000158B0();
    v5 = sub_1000A0348;
    v4 = 0;
  }
  return sub_100019418((uint64_t)v5, v4, 0);
}

uint64_t sub_1000A0348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = *(_QWORD *)(v0 + 40);
  sub_1000BF018();
  sub_1000073B0();
  sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_100005878();
  v2 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000188F0(v2);
}

uint64_t sub_1000A03B0()
{
  uint64_t v0;

  sub_1000158B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A03E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10000FE70();
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  sub_1000BF018();
  sub_1000073B0();
  sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return sub_1000BDBBC((uint64_t)sub_1000A0450, v2, 0);
}

uint64_t sub_1000A0450()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A047C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[54] = a1;
  v2[55] = a2;
  v3 = sub_10001BE7C(&qword_100128740);
  v2[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A04D8, 0, 0);
}

uint64_t sub_1000A04D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v3;

  v2 = *(uint64_t (**)(void))(v1[54] + 128);
  if (!v2)
    goto LABEL_4;
  v3 = sub_1000BED98(v2);
  if (v0)
  {
    sub_1000059A0();
LABEL_4:
    v3 = 0;
  }
  v1[57] = 0;
  v1[58] = v3;
  return sub_10001B148((uint64_t)sub_1000A052C, v1[54], 0);
}

uint64_t sub_1000A052C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[57];
  sub_10009D994(v0[58], v0 + 2);
  v0[59] = v1;
  if (!v1)
    swift_release();
  sub_1000167A8();
  return sub_10001B148(v2, v3, v4);
}

uint64_t sub_1000A0588()
{
  _QWORD *v0;
  os_log_type_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  sub_1000BE144();
  if (qword_100127EC8 != -1)
    swift_once(&qword_100127EC8, sub_100099764);
  v2 = sub_10000C05C();
  v3 = sub_100012A40(v2, (uint64_t)qword_10012D1A8);
  v0[60] = v3;
  v4 = sub_1000BE3E8();
  sub_100019A60(v4, v5);
  sub_10000DDEC();
  v6 = sub_1000BE8F8();
  if (sub_10001EEEC(v6))
  {
    v7 = (uint8_t *)sub_100011780(12);
    v13 = sub_100011780(32);
    *(_DWORD *)v7 = 136315138;
    v8 = sub_1000BDD2C(v0 + 25);
    v0[53] = sub_1000BEAA4(v8, v9, v10, v11);
    sub_1000BE214((uint64_t)(v0 + 53), (uint64_t)(v0 + 54));
    sub_1000059A8();
    sub_1000BE9A8();
    sub_1000100C0((void *)&_mh_execute_header, v3, v1, "Registering \"%s\" in the metadata store", v7);
    sub_100013320(v13);
    sub_1000133FC(v13);
    sub_1000133FC((uint64_t)v7);
  }
  else
  {
    sub_1000BE9A8();
  }

  return sub_1000BDC2C((uint64_t)sub_1000A06D0, v0[54], 0);
}

uint64_t sub_1000A06D0()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 432) + 176);
  *(_QWORD *)(v0 + 488) = v1;
  v2 = v1;
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A0708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  void *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD **)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 448);
  v4 = sub_10001F984(v3);
  v6 = v5;
  v8 = v3[3];
  v7 = v3[4];
  sub_10000E858(v3, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 16))(v8);
  v10 = v3[3];
  v9 = v3[4];
  sub_10000E858(v3, v10);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 24))(v10);
  v13 = v12;
  v14 = sub_10000E858(v3, v3[3]);
  v15 = sub_1000BE40C();
  v16 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 32);
  v18 = *((_BYTE *)v14 + *(int *)(v15 + 36));
  v19 = *(_OWORD *)(v0 + 40);
  v20 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 496) = v17;
  *(_QWORD *)(v0 + 504) = v21;
  sub_100067398(v4, v6, v2, v11, v13, v18, v16, v17, v19, *((uint64_t *)&v19 + 1), v20, v21, *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136),
    *(_QWORD *)(v0 + 144));
  *(_QWORD *)(v0 + 512) = v1;
  if (v1)
  {
    v22 = *(void **)(v0 + 488);
    v23 = *(_QWORD *)(v0 + 448);
    sub_1000BEFD4();
    sub_1000117B4();

    sub_1000BC62C((_QWORD *)(v0 + 16));
    sub_1000131E0(v23, &qword_100128740);
    sub_1000BE8AC();
    v24 = (uint64_t (*)(void))sub_100072158();
    return v24();
  }
  else
  {
    v26 = *(void **)(v0 + 488);
    v27 = *(_QWORD *)(v0 + 432);
    sub_1000BEFD4();
    sub_1000117B4();

    sub_1000BE9EC(v28, &qword_100128740);
    return sub_1000BDE58((uint64_t)sub_1000A08AC, v27, 0);
  }
}

uint64_t sub_1000A08AC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 520) = *(_QWORD *)(*(_QWORD *)(v0 + 432) + 184);
  swift_retain();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A08E4()
{
  uint64_t v0;
  uint64_t v1;

  objc_opt_self(_INVocabulary);
  v1 = sub_1000179D8();
  *(_QWORD *)(v0 + 528) = sub_1000158F8(v1, "sharedVocabulary");
  *(_QWORD *)(v0 + 536) = sub_10000F574();
  sub_1000073B0();
  return sub_100011788();
}

uint64_t sub_1000A0954()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 432) + 176);
  *(_QWORD *)(v0 + 544) = v1;
  v2 = v1;
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A0A64: call analysis failed (funcsize=122)"

uint64_t sub_1000A0B8C()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 432) + 176);
  *(_QWORD *)(v0 + 576) = v1;
  v2 = v1;
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A0BC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  sub_1000BE128();
  v1 = v0[71];
  v2 = sub_10001F984((_QWORD *)v0[55]);
  v4 = v3;
  sub_1000652DC(v2, v3);
  v0[73] = v5;
  if (v1)
  {
    v6 = (void *)v0[72];
    v7 = v0[70];
    v8 = (void *)v0[66];
    sub_1000117B4();

    sub_10008C9C8();
    sub_10000E038();
    sub_10000C028();
    sub_1000059B0();
    sub_1000BC62C(v0 + 2);
    sub_1000BE894();
    sub_1000165C0();
    v9 = sub_1000165C0();
    Logger.logObject.getter(v9);
    v10 = sub_1000059DC();
    if (sub_10001EEEC(v10))
    {
      v11 = sub_100011780(22);
      v54 = sub_100011780(64);
      *(_DWORD *)v11 = 136315394;
      v12 = sub_1000BDD2C(v0 + 30);
      v17 = sub_1000BE87C(v12, v13, v14, v15, v16);
      sub_1000BE234(v17, v18, v19, v20, v21, v22, v23, v24, (uint64_t)(v0 + 46));
      sub_1000059A8();
      sub_10000E87C(v0 + 30);
      *(_WORD *)(v11 + 12) = 2080;
      v0[47] = v1;
      sub_1000165C0();
      v25 = sub_10001BE7C((uint64_t *)&unk_100129420);
      v26 = sub_1000BEE84(v25);
      v31 = sub_1000BE87C(v26, v27, v28, v29, v30);
      sub_1000BE34C(v31, v32, v33, v34, v35, v36, v37, v38, v51, (uint64_t)(v0 + 48));
      sub_1000059C4();
      sub_1000059A0();
      sub_1000059A0();
      sub_10001187C(v39, v40, v41, v42, v43, v44, v45, v46, v52, v53, v54);
      sub_1000133FC(v11 + 14);
      sub_1000133FC(v11);

      sub_1000059A0();
    }
    else
    {
      sub_1000059A0();
      sub_10000E87C(v0 + 30);
      sub_1000059A0();
      sub_1000059A0();

    }
    v0[76] = 0;
    return sub_100011170();
  }
  else
  {
    v47 = v5;
    v48 = (void *)v0[72];
    sub_1000117B4();

    v49 = (_QWORD *)swift_task_alloc(dword_100128154);
    v0[74] = v49;
    *v49 = v0;
    v49[1] = sub_1000A0DFC;
    return sub_100004C08(v0[55], v0[70], v0[69], v47, v0[62], v0[65], v0[66], v0[67]);
  }
}

uint64_t sub_1000A0DFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000BE01C();
  sub_100072058(v2);
  *(_QWORD *)(v1 + 600) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  if (v0)
  {
    sub_1000117B4();
    sub_1000059A8();
  }
  else
  {
    sub_1000100D0();
    sub_1000117B4();
    sub_1000BC62C((_QWORD *)(v1 + 16));
  }
  sub_1000167A8();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000A0E94()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v14;

  v14 = v0[75];
  if (qword_100127CF0 != -1)
    swift_once(&qword_100127CF0, sub_100050AA8);
  v1 = (void *)v0[66];
  v2 = (_QWORD *)v0[55];
  v3 = v2[3];
  v4 = v2[4];
  sub_10000E858(v2, v3);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  swift_retain();
  v7 = v6(v3, v5);
  v9 = v8;
  v10 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  inited = swift_initStackObject(v10, v0 + 19);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = v9;
  sub_1000100E0();
  sub_1000066A4(inited);
  sub_1000081F4(v12);
  sub_1000059B0();
  sub_10000C028();
  swift_release();
  sub_100018B6C();

  sub_1000117B4();
  v0[76] = v14;
  return swift_task_switch(sub_1000A0FCC, v0[54], 0);
}

uint64_t sub_1000A0FCC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 616) = *(_QWORD *)(*(_QWORD *)(v0 + 432) + 192);
  swift_retain();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A1004()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 624) = sub_1000BDD80(*(_QWORD **)(v0 + 440));
  *(_QWORD *)(v0 + 632) = v1;
  return sub_100011788();
}

uint64_t sub_1000A104C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v3)(void);

  v1 = v0[76];
  sub_100057190(v0[78], v0[79], 0x53555F6E65, 0xE500000000000000);
  v0[80] = v1;
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1000073B0();
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {
    sub_1000059A8();
    sub_10001BFF8();
    sub_1000BE8AC();
    v3 = (uint64_t (*)(void))sub_1000121E0();
    return sub_1000BDB54(v3);
  }
}

uint64_t sub_1000A10D8()
{
  uint64_t v0;

  swift_release();
  sub_1000BE8AC();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A1108()
{
  _QWORD *v0;
  NSObject *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v22;

  sub_1000BE144();
  v1 = v0[55];
  sub_1000BC62C(v0 + 2);
  sub_10000DDE0();
  Logger.logObject.getter(v2);
  v3 = sub_1000059DC();
  if (os_log_type_enabled(v1, v3))
  {
    v4 = (uint8_t *)sub_100011780(12);
    v22 = sub_100011780(32);
    *(_DWORD *)v4 = 136315138;
    v5 = sub_1000BE618(v0 + 40);
    v0[52] = sub_1000BEAA4(v5, v6, v7, v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 52, v0 + 53);
    sub_1000059A8();
    sub_1000BE9A8();
    sub_1000100C0((void *)&_mh_execute_header, v1, v3, "AutoShortcutsDonator failed to donate App Shortcuts to Siri Vocabulary and server for %s", v4);
    sub_100013320(v22);
    sub_1000133FC(v22);
    sub_1000133FC((uint64_t)v4);
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_1000BE9A8();
  }

  if (qword_100127CF0 != -1)
    swift_once(&qword_100127CF0, sub_100050AA8);
  v9 = (void *)v0[66];
  v10 = (_QWORD *)v0[55];
  v11 = v10[3];
  v12 = v10[4];
  sub_10000E858(v10, v11);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
  sub_1000166E8();
  v15 = v14(v11, v13);
  v17 = v16;
  v18 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  inited = swift_initStackObject(v18, v0 + 19);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(inited + 32) = v15;
  *(_QWORD *)(inited + 40) = v17;
  sub_1000100E0();
  sub_1000066A4(inited);
  sub_1000081F4(v20);
  sub_1000059C4();

  sub_100018B6C();
  sub_10001BFF8();
  sub_10000C028();
  sub_1000059B0();
  v0[76] = 0;
  return sub_1000BDC2C((uint64_t)sub_1000A0FCC, v0[54], 0);
}

uint64_t sub_1000A130C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t (*v39)(void);

  sub_1000BE128();
  a23 = v26;
  a24 = v27;
  a22 = v24;
  v28 = v24[80];
  sub_1000BEE18(v24[55]);
  sub_10001A84C();
  v29 = sub_10001A84C();
  Logger.logObject.getter(v29);
  v30 = sub_1000059DC();
  if (sub_10001EEEC(v30))
  {
    v31 = v24[80];
    v32 = sub_100011780(22);
    v33 = sub_100011780(64);
    a13 = v33;
    *(_DWORD *)v32 = 136315394;
    v34 = sub_1000BE618(v24 + 35);
    v24[51] = sub_10000FBEC(v34, v35, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 51, v24 + 52);
    sub_1000059A8();
    sub_10000E87C(v24 + 35);
    *(_WORD *)(v32 + 12) = 2080;
    v24[50] = v31;
    sub_1000165C0();
    v36 = sub_10001BE7C((uint64_t *)&unk_100129420);
    v37 = String.init<A>(describing:)(v24 + 50, v36);
    v24[45] = sub_10000FBEC(v37, v38, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24 + 45, v24 + 46);
    sub_10000E038();
    sub_1000059A0();
    sub_1000059A0();
    sub_100007404(v33);
    sub_1000133FC(v33);
    sub_1000133FC(v32);

    sub_1000059A0();
  }
  else
  {
    sub_100010120();
    sub_10000E87C(v24 + 35);
    sub_100010120();
    sub_100010120();

  }
  sub_1000BE8AC();
  v39 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000BDE74(v39);
}

id sub_1000A14A8@<X0>(void **a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  v4 = *a1;
  sub_10000E858(a2, a2[3]);
  v5 = sub_1000BF0C4();
  *a3 = v6(v5);
  a3[1] = v7;
  a3[2] = v4;
  return v4;
}

uint64_t sub_1000A1504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for OSSignpostID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A1568, v2, 0);
}

uint64_t sub_1000A1568(double a1)
{
  static OSSignpostID.exclusive.getter(a1);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A1598()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  sub_100097080();
  v0[8] = v1;
  v2 = (uint64_t **)swift_task_alloc(dword_10012B2F4);
  v0[9] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_1000A1614;
  return sub_1000A1798((uint64_t)v2, v0[2], v0[3], v0[4]);
}

uint64_t sub_1000A1614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A166C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10000FE70();
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  sub_1000BEFF8();
  sub_1000073B0();
  sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return sub_1000BDBBC((uint64_t)sub_1000A16D8, v2, 0);
}

uint64_t sub_1000A16D8()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  v1 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000107A0(v1);
}

uint64_t sub_1000A1700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10000FE70();
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  sub_1000BEFF8();
  sub_1000073B0();
  sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return sub_1000BDBBC((uint64_t)sub_1000A176C, v2, 0);
}

uint64_t sub_1000A176C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A1798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return swift_task_switch(sub_1000A17B4, a4, 0);
}

uint64_t sub_1000A17B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_1000BE144();
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (qword_100127EC8 != -1)
    swift_once(&qword_100127EC8, sub_100099764);
  v25 = v22[10];
  v26 = sub_10000C05C();
  v27 = sub_100012A40(v26, (uint64_t)qword_10012D1A8);
  sub_1000101EC((uint64_t)v25);
  sub_10000DDEC();
  v28 = sub_1000186A0();
  v29 = sub_100013670(v28);
  v30 = v22[10];
  if (v29)
  {
    v31 = v22[9];
    v32 = (uint8_t *)sub_100011780(12);
    v33 = sub_100011780(32);
    a10 = v33;
    *(_DWORD *)v32 = 136315138;
    sub_10000C030();
    v22[8] = sub_1000BE8A4(v31, v34, &a10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 8, v22 + 9);
    sub_100011800(v30);
    sub_1000100C0((void *)&_mh_execute_header, v25, v27, "Attempting to unregister \"%s\" from the metadata store", v32);
    sub_100013320(v33);
    sub_1000133FC(v33);
    sub_1000133FC((uint64_t)v32);

  }
  else
  {

    sub_1000117AC(v30);
  }
  v35 = *(id *)(v22[11] + 176);
  v36 = sub_1000BEF80();
  sub_1000685C4(v36, v37);
  v22[12] = 0;
  v38 = v22[11];

  v22[13] = *(_QWORD *)(v38 + 184);
  objc_opt_self(_INVocabulary);
  v39 = sub_1000179D8();
  v22[14] = sub_10001AA38(v39, "sharedVocabulary");
  v22[15] = sub_10000F574();
  sub_1000167A8();
  return sub_1000BDC2C(v40, v41, v42);
}

uint64_t sub_1000A1994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 96);
  sub_100021088(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), 8, *(_QWORD *)(v0 + 104), *(void **)(v0 + 112), *(_QWORD *)(v0 + 120));
  if (v1)
  {
    *(_QWORD *)(v0 + 128) = v1;
    v2 = *(_QWORD *)(v0 + 88);
    v3 = sub_1000A1AEC;
  }
  else
  {
    sub_100021088(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), 18, *(_QWORD *)(v0 + 104), *(void **)(v0 + 112), *(_QWORD *)(v0 + 120));
    v5 = *(_QWORD *)(v0 + 88);
    sub_100021314();
    v3 = sub_1000A1A20;
    v2 = v5;
  }
  return sub_10001B148((uint64_t)v3, v2, 0);
}

uint64_t sub_1000A1A20()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_1000BE2D0();
  if (qword_100127CF0 != -1)
    swift_once(&qword_100127CF0, sub_100050AA8);
  v1 = (void *)v0[14];
  v3 = v0[9];
  v2 = v0[10];
  v4 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  inited = swift_initStackObject(v4, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(inited + 32) = v3;
  *(_QWORD *)(inited + 40) = v2;
  sub_10000C030();
  swift_retain();
  sub_1000066A4(inited);
  sub_1000081F4(v6);
  sub_1000059C4();
  sub_10001EE50();
  sub_100018B6C();

  sub_1000117B4();
  v7 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000BDD68(v7);
}

uint64_t sub_1000A1AEC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 112);
  swift_release();

  sub_1000059A8();
  return sub_1000188F0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A1B28(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  unint64_t v10;

  v10 = a2;
  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OSSignpostID.exclusive.getter(v6);
  sub_100097080();
  sub_1000A1C38(v2, a1, v10);
  sub_1000B3FD4();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_1000A1C38(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint8_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint8_t *v43;
  uint64_t v44;
  os_log_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  char v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v7 = type metadata accessor for RegistryError(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Data.Iterator(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(id *)(a1 + 176);
  sub_1000658AC();
  if (v3)
  {

    if (qword_100127EC8 != -1)
      swift_once(&qword_100127EC8, sub_100099764);
    v15 = type metadata accessor for Logger(0);
    sub_100012A40(v15, (uint64_t)qword_10012D1A8);
    swift_errorRetain(v3);
    v16 = swift_errorRetain(v3);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v51 = v20;
      *(_DWORD *)v19 = 136315138;
      *(_QWORD *)&v48 = v19 + 4;
      sub_10009A194();
      sub_10009A328();
      v22 = v21;
      v24 = v23;
      sub_10001DBC8((uint64_t)v9, type metadata accessor for RegistryError);
      v53 = sub_10000FBEC(v22, v24, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease();
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error updating the metadata store last seen version: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
  }
  else
  {

    *(_BYTE *)(a1 + 144) = 0;
    if (qword_100127EC8 != -1)
      swift_once(&qword_100127EC8, sub_100099764);
    v25 = type metadata accessor for Logger(0);
    sub_100012A40(v25, (uint64_t)qword_10012D1A8);
    sub_10001EBF8(a2, a3);
    v26 = sub_10001EBF8(a2, a3);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, (os_log_type_t)v28))
    {
      v42 = v28;
      v44 = v11;
      v45 = v27;
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v53 = v41;
      v43 = v29;
      *(_DWORD *)v29 = 136315138;
      v51 = 0;
      v52 = 0xE000000000000000;
      sub_10001EBF8(a2, a3);
      Data.makeIterator()(a2, a3);
      v46 = a2;
      v47 = a3;
      sub_10001EA88(a2, a3);
      sub_10007EC94(&qword_10012AD98, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
      v31 = v30;
      dispatch thunk of IteratorProtocol.next()(v10, v30);
      if ((v50 & 1) == 0)
      {
        v48 = xmmword_1000EFAE0;
        do
        {
          v32 = v49;
          v33 = sub_10001BE7C(&qword_10012ADA0);
          v34 = swift_allocObject(v33, 72, 7);
          *(_OWORD *)(v34 + 16) = v48;
          *(_QWORD *)(v34 + 56) = &type metadata for UInt8;
          *(_QWORD *)(v34 + 64) = &protocol witness table for UInt8;
          *(_BYTE *)(v34 + 32) = v32;
          v35._countAndFlagsBits = String.init(format:_:)(0x786868323025, 0xE600000000000000);
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          dispatch thunk of IteratorProtocol.next()(v10, v31);
        }
        while (v50 != 1);
      }
      v36 = v43;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v10);
      v51 = sub_10000FBEC(v51, v52, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease();
      v38 = v46;
      v37 = v47;
      sub_10001EA88(v46, v47);
      sub_10001EA88(v38, v37);
      v27 = v45;
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v42, "Updated metadata store last seen version to: %s", v36, 0xCu);
      v39 = v41;
      swift_arrayDestroy(v41, 1);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      sub_10001EA88(a2, a3);
      sub_10001EA88(a2, a3);
    }

  }
}

uint64_t sub_1000A21A0()
{
  uint64_t v0;

  swift_release();
  sub_10007ECC8(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000A21FC()
{
  uint64_t v0;

  v0 = sub_1000A21A0();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Registry.IndexingQueue()
{
  return objc_opt_self(_TtCC10LinkDaemon8RegistryP33_C46A68FC02810268DC26B23770B1528113IndexingQueue);
}

uint64_t sub_1000A2234()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNMetadataProviderErrorDomain);
  qword_10012D1C0 = result;
  *(_QWORD *)algn_10012D1C8 = v1;
  return result;
}

uint64_t *sub_1000A2260()
{
  if (qword_100127ED0 != -1)
    swift_once(&qword_100127ED0, sub_1000A2234);
  return &qword_10012D1C0;
}

void sub_1000A22A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;

  sub_1000BDF14();
  sub_1000179E8();
  __chkstk_darwin(v0);
  sub_1000BE0A0();
  sub_1000BDB90(v1, v2, v3);
  v4 = (char *)sub_1000A22FC + 4 * byte_1000F1510[sub_1000BEF24()];
  __asm { BR              X10 }
}

uint64_t sub_1000A22FC(uint64_t a1)
{
  sub_1000BE364(a1, type metadata accessor for RegistryError);
  return 9001;
}

void sub_1000A236C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;

  sub_100016714();
  v2 = v1;
  sub_1000BDF14();
  sub_1000179E8();
  __chkstk_darwin(v3);
  sub_1000BE0A0();
  v20 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  sub_10009A328();
  v5 = v4;
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  v19 = &type metadata for String;
  v18[0] = v5;
  v18[1] = v7;
  sub_1000BE460(v8, v9, v8, v9);
  sub_1000207A8(v2, (uint64_t)v0, type metadata accessor for RegistryError);
  v10 = sub_1000BEF24();
  if ((_DWORD)v10 == 3)
  {
    v18[0] = *v0;
    v11 = sub_10001BE7C((uint64_t *)&unk_100129420);
    sub_1000BDB9C(v11, &qword_10012A728, NSError_ptr);
    v13 = v12;
    if ((swift_dynamicCast(&v17, v18, v11, v12, 6) & 1) != 0)
    {
      v14 = v17;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
      v19 = v13;
      v18[0] = v14;
      sub_1000BE460(v15, v16, v15, v16);
    }
  }
  else
  {
    sub_1000BE364(v10, type metadata accessor for RegistryError);
  }
  sub_1000110FC();
}

uint64_t sub_1000A24BC()
{
  uint64_t v0;

  sub_1000A2260();
  v0 = qword_10012D1C0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000A24FC(uint64_t a1)
{
  uint64_t v2;

  sub_10007EC94(&qword_10012B538, type metadata accessor for RegistryError);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000A253C(uint64_t a1)
{
  uint64_t v2;

  sub_10007EC94(&qword_10012B538, type metadata accessor for RegistryError);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000A257C()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonRegistryService);
  qword_10012D1D0 = result;
  *(_QWORD *)algn_10012D1D8 = v1;
  return result;
}

uint64_t sub_1000A25A8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10012AD6C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10002AB74;
  return sub_1000090C0();
}

uint64_t sub_1000A25F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 40) = a8;
  *(_QWORD *)(v8 + 16) = a5;
  *(_QWORD *)(v8 + 24) = a6;
  *(_BYTE *)(v8 + 64) = a4;
  return swift_task_switch(sub_1000A2610, 0, 0);
}

uint64_t sub_1000A2610()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 64) == 1
    && (v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10LinkDaemon8Registry_ready),
        (*(_QWORD *)(v0 + 48) = v1) != 0))
  {
    sub_1000179D8();
    v2 = (_QWORD *)sub_10003628C();
    *(_QWORD *)(v0 + 56) = v2;
    *v2 = v0;
    v2[1] = sub_1000A2694;
    sub_1000BE0D8();
    return sub_1000BDD50();
  }
  else
  {
    sub_1000BE7F0();
    return sub_1000188F0(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1000A2694()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 56));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A26D4()
{
  uint64_t v0;

  sub_1000BE7F0();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A26F8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100018C14((uint64_t)sub_1000A2708);
}

uint64_t sub_1000A2708()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_opt_self(NSXPCConnection);
  v1 = sub_100019300();
  v2 = sub_10000FE4C((uint64_t)v1, "currentConnection");
  sub_1000BE434((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012B2D4);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_100097EF0;
  v4 = sub_10001B334();
  return sub_1000A50DC(v4, v5, v6, v7, v8);
}

uint64_t sub_1000A277C()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A2868: call analysis failed (funcsize=99)"

uint64_t sub_1000A2974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RegistryError(0);
  v7[14] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A2A14, 0, 0);
}

#error "1000A2B34: call analysis failed (funcsize=127)"

uint64_t sub_1000A2C40()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A2D2C: call analysis failed (funcsize=99)"

uint64_t sub_1000A2E38()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A2F24: call analysis failed (funcsize=99)"

uint64_t sub_1000A3030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RegistryError(0);
  v5[12] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A30CC, 0, 0);
}

#error "1000A31EC: call analysis failed (funcsize=125)"

uint64_t sub_1000A32F0()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 128));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A33DC: call analysis failed (funcsize=97)"

uint64_t sub_1000A34E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RegistryError(0);
  v7[14] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A3580, 0, 0);
}

#error "1000A36A0: call analysis failed (funcsize=127)"

uint64_t sub_1000A37AC()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A3898: call analysis failed (funcsize=99)"

uint64_t sub_1000A39A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RegistryError(0);
  v7[14] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A3A44, 0, 0);
}

#error "1000A3B64: call analysis failed (funcsize=127)"

uint64_t sub_1000A3C70()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A3D5C: call analysis failed (funcsize=99)"

uint64_t sub_1000A3E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v8[10] = a8;
  v8[11] = v14;
  v8[8] = a6;
  v8[9] = a7;
  v8[6] = a4;
  v8[7] = a5;
  v8[4] = a2;
  v8[5] = a3;
  v9 = type metadata accessor for Logger(0);
  v8[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[13] = v10;
  v8[14] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RegistryError(0);
  v8[15] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[16] = swift_task_alloc(v12);
  v8[17] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A3F0C, 0, 0);
}

#error "1000A4070: call analysis failed (funcsize=148)"

uint64_t sub_1000A418C()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 152));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A42B8: call analysis failed (funcsize=119)"

uint64_t sub_1000A43D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  *(_BYTE *)(v8 + 176) = a8;
  *(_QWORD *)(v8 + 80) = a7;
  *(_QWORD *)(v8 + 88) = v14;
  *(_QWORD *)(v8 + 64) = a5;
  *(_QWORD *)(v8 + 72) = a6;
  *(_QWORD *)(v8 + 48) = a3;
  *(_QWORD *)(v8 + 56) = a4;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 96) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 104) = v10;
  *(_QWORD *)(v8 + 112) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RegistryError(0);
  *(_QWORD *)(v8 + 120) = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 128) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 136) = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A447C, 0, 0);
}

uint64_t sub_1000A447C()
{
  _QWORD *v0;
  void *v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v1 = (void *)v0[5];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_100014430();
    v2 = sub_100016428();
    sub_1000100D0();
    if ((v2 & 1) != 0)
    {
      v3 = *(_QWORD *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v0[18] = v3;
      if (v3)
      {
        sub_1000166E8();
        v4 = (_QWORD *)sub_100013540();
        sub_1000BEC10(v4, (uint64_t)sub_1000A454C);
        sub_10001F368();
        return sub_1000187C8();
      }
    }

  }
  v6 = swift_task_alloc(dword_10012AE94);
  v7 = (_QWORD *)sub_1000BEBBC(v6);
  *v7 = v0;
  v7[1] = sub_1000A45DC;
  v8 = sub_1000BDE00();
  return sub_1000B1780(v8, v9, v10, v11, v12);
}

uint64_t sub_1000A454C()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 152));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A458C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  sub_1000BDF38();
  v1 = swift_task_alloc(dword_10012AE94);
  v2 = (_QWORD *)sub_1000BEBBC(v1);
  *v2 = v0;
  v2[1] = sub_1000A45DC;
  v3 = sub_1000BDE00();
  return sub_1000B1780(v3, v4, v5, v6, v7);
}

uint64_t sub_1000A45DC()
{
  sub_1000BDFC8();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A4618()
{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);

  v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();

  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  v2 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000188F0(v2);
}

#error "1000A4720: call analysis failed (funcsize=109)"

uint64_t sub_1000A4844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v7 = type metadata accessor for Logger(0);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RegistryError(0);
  v6[13] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v10);
  v6[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000A48E0, 0, 0);
}

uint64_t sub_1000A48E0()
{
  _QWORD *v0;
  void *v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (void *)v0[5];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_100014430();
    v2 = sub_100016428();
    sub_1000100D0();
    if ((v2 & 1) != 0)
    {
      v3 = *(_QWORD *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v0[16] = v3;
      if (v3)
      {
        sub_1000166E8();
        v4 = (_QWORD *)sub_100013540();
        v0[17] = v4;
        *v4 = v0;
        v4[1] = sub_1000A49AC;
        sub_10001F368();
        return sub_1000187C8();
      }
    }

  }
  v6 = swift_task_alloc(dword_10012AE6C);
  v7 = (_QWORD *)sub_1000BEBB0(v6);
  *v7 = v0;
  v7[1] = sub_1000A4A34;
  v8 = sub_1000BDE00();
  return sub_1000B2B1C(v8, v9);
}

uint64_t sub_1000A49AC()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 136));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A49EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000BDF38();
  v1 = swift_task_alloc(dword_10012AE6C);
  v2 = (_QWORD *)sub_1000BEBB0(v1);
  *v2 = v0;
  v2[1] = sub_1000A4A34;
  v3 = sub_1000BDE00();
  return sub_1000B2B1C(v3, v4);
}

uint64_t sub_1000A4A34()
{
  sub_100011148();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A4A70()
{
  uint64_t (*v0)(void);

  sub_1000BE4C0();
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  v0 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000BDB54(v0);
}

#error "1000A4B68: call analysis failed (funcsize=104)"

uint64_t sub_1000A4C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a3;
  v8[7] = a4;
  v8[4] = a1;
  v8[5] = a2;
  v9 = type metadata accessor for Logger(0);
  v8[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[13] = v10;
  v8[14] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RegistryError(0);
  v8[15] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[16] = swift_task_alloc(v12);
  v8[17] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A4D18, 0, 0);
}

uint64_t sub_1000A4D18()
{
  _QWORD *v0;
  void *v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (void *)v0[5];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_100014430();
    v2 = sub_100016428();
    sub_1000100D0();
    if ((v2 & 1) != 0)
    {
      v3 = *(_QWORD *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v0[18] = v3;
      if (v3)
      {
        sub_1000166E8();
        v4 = (_QWORD *)sub_100013540();
        sub_1000BEC10(v4, (uint64_t)sub_1000A4DE4);
        sub_10001F368();
        return sub_1000187C8();
      }
    }

  }
  v6 = swift_task_alloc(dword_10012AE24);
  v7 = (_QWORD *)sub_1000BEBBC(v6);
  *v7 = v0;
  v7[1] = sub_1000A4E70;
  v8 = sub_1000BDE00();
  return sub_1000B32C8(v8, v9, v10, v11);
}

uint64_t sub_1000A4DE4()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 152));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A4E24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000BDF38();
  v1 = swift_task_alloc(dword_10012AE24);
  v2 = (_QWORD *)sub_1000BEBBC(v1);
  *v2 = v0;
  v2[1] = sub_1000A4E70;
  v3 = sub_1000BDE00();
  return sub_1000B32C8(v3, v4, v5, v6);
}

uint64_t sub_1000A4E70()
{
  sub_1000BDFC8();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A4EAC()
{
  uint64_t (*v0)(void);

  sub_1000BE4C0();
  sub_1000059C4();
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  v0 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000188F0(v0);
}

#error "1000A4FB4: call analysis failed (funcsize=110)"

uint64_t sub_1000A50DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RegistryError(0);
  v5[12] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A5178, 0, 0);
}

#error "1000A5298: call analysis failed (funcsize=125)"

uint64_t sub_1000A539C()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 128));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A5488: call analysis failed (funcsize=97)"

uint64_t sub_1000A558C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v8[11] = a8;
  v8[12] = v14;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  v9 = type metadata accessor for Logger(0);
  v8[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[14] = v10;
  v8[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RegistryError(0);
  v8[16] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[17] = swift_task_alloc(v12);
  v8[18] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A5634, 0, 0);
}

#error "1000A5794: call analysis failed (funcsize=143)"

uint64_t sub_1000A58A0()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 160));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A59CC: call analysis failed (funcsize=115)"

uint64_t sub_1000A5AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v8[11] = a8;
  v8[12] = v14;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  v9 = type metadata accessor for Logger(0);
  v8[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[14] = v10;
  v8[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RegistryError(0);
  v8[16] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[17] = swift_task_alloc(v12);
  v8[18] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A5B80, 0, 0);
}

#error "1000A5CE0: call analysis failed (funcsize=151)"

uint64_t sub_1000A5E0C()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 160));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A5F38: call analysis failed (funcsize=123)"

uint64_t sub_1000A6064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v7 = type metadata accessor for Logger(0);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RegistryError(0);
  v6[13] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v10);
  v6[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000A6100, 0, 0);
}

#error "1000A622C: call analysis failed (funcsize=132)"

uint64_t sub_1000A6340()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 136));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A6430: call analysis failed (funcsize=102)"

uint64_t sub_1000A6544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RegistryError(0);
  v7[14] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A65E4, 0, 0);
}

#error "1000A6704: call analysis failed (funcsize=127)"

uint64_t sub_1000A6810()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A68FC: call analysis failed (funcsize=99)"

uint64_t sub_1000A6A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RegistryError(0);
  v5[12] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A6AA4, 0, 0);
}

#error "1000A6BC4: call analysis failed (funcsize=125)"

uint64_t sub_1000A6CC8()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 128));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A6DB4: call analysis failed (funcsize=97)"

uint64_t sub_1000A6EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RegistryError(0);
  v5[12] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A6F54, 0, 0);
}

#error "1000A7074: call analysis failed (funcsize=125)"

uint64_t sub_1000A7178()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 128));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A7264: call analysis failed (funcsize=97)"

uint64_t sub_1000A7368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RegistryError(0);
  v5[12] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A7404, 0, 0);
}

#error "1000A7524: call analysis failed (funcsize=125)"

uint64_t sub_1000A7628()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 128));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A7714: call analysis failed (funcsize=97)"

uint64_t sub_1000A7818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RegistryError(0);
  v7[14] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A78B8, 0, 0);
}

#error "1000A79D8: call analysis failed (funcsize=127)"

uint64_t sub_1000A7AE4()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A7BD0: call analysis failed (funcsize=99)"

uint64_t sub_1000A7CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RegistryError(0);
  v5[12] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A7D78, 0, 0);
}

#error "1000A7E98: call analysis failed (funcsize=125)"

uint64_t sub_1000A7F9C()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 128));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A8088: call analysis failed (funcsize=97)"

uint64_t sub_1000A818C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v8[11] = a8;
  v8[12] = v14;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  v9 = type metadata accessor for Logger(0);
  v8[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[14] = v10;
  v8[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RegistryError(0);
  v8[16] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[17] = swift_task_alloc(v12);
  v8[18] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A8234, 0, 0);
}

#error "1000A8394: call analysis failed (funcsize=148)"

uint64_t sub_1000A84B4()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 160));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A85E0: call analysis failed (funcsize=120)"

uint64_t sub_1000A8700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[13] = v9;
  v7[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RegistryError(0);
  v7[15] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[16] = swift_task_alloc(v11);
  v7[17] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A87CC, 0, 0);
}

#error "1000A89E4: call analysis failed (funcsize=211)"

uint64_t sub_1000A8B48()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 152));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000A8D38: call analysis failed (funcsize=178)"

uint64_t sub_1000A8EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v8[12] = a8;
  v8[13] = v14;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  v8[6] = a2;
  v8[7] = a3;
  v8[5] = a1;
  v9 = type metadata accessor for Logger(0);
  v8[14] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[15] = v10;
  v8[16] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RegistryError(0);
  v8[17] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[18] = swift_task_alloc(v12);
  v8[19] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A8F50, 0, 0);
}

uint64_t sub_1000A8F50()
{
  _QWORD *v0;
  void *v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (void *)v0[5];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_100014430();
    v2 = sub_100016428();
    sub_1000100D0();
    if ((v2 & 1) != 0)
    {
      v3 = *(_QWORD *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v0[20] = v3;
      if (v3)
      {
        sub_1000166E8();
        v4 = (_QWORD *)sub_100013540();
        v0[21] = v4;
        *v4 = v0;
        v4[1] = sub_1000A902C;
        sub_10001F368();
        return sub_1000187C8();
      }
    }

  }
  v6 = (_QWORD *)swift_task_alloc(dword_10012B004);
  v0[22] = v6;
  *v6 = v0;
  v6[1] = sub_1000A90BC;
  v7 = sub_100005A68();
  return sub_1000AE10C(v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000A902C()
{
  uint64_t v0;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v0 + 168));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A9064()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000BDF38();
  v1 = (_QWORD *)swift_task_alloc(dword_10012B004);
  *(_QWORD *)(v0 + 176) = v1;
  *v1 = v0;
  v1[1] = sub_1000A90BC;
  v2 = sub_100005A68();
  return sub_1000AE10C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000A90BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_10001DCCC();
  v3 = *(_QWORD *)(v2 + 176);
  *v4 = *v1;
  *(_QWORD *)(v2 + 184) = v0;
  swift_task_dealloc(v3);
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A910C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  sub_1000BDF70();
  v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 16);

  sub_1000059C4();
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  return sub_1000BDF68(v2, *(uint64_t (**)(void))(v0 + 8));
}

#error "1000A9244: call analysis failed (funcsize=119)"

uint64_t sub_1000A9378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  v7 = type metadata accessor for Logger(0);
  v6[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[12] = v8;
  v6[13] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RegistryError(0);
  v6[14] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[15] = swift_task_alloc(v10);
  v6[16] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000A9414, 0, 0);
}

uint64_t sub_1000A9414()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_100014430();
    v2 = sub_100016428();
    sub_1000100D0();
    if ((v2 & 1) != 0)
    {
      sub_1000111A8(*(_QWORD *)(v0 + 80));
      if (v2)
      {
        sub_1000166E8();
        v3 = (_QWORD *)sub_100013540();
        sub_1000BDE10(v3, (uint64_t)sub_1000A94D4);
        sub_10001F368();
        return sub_1000187C8();
      }
    }

  }
  v5 = sub_1000BEE90();
  v10 = v6;
  v7 = swift_task_alloc(v5);
  v8 = (_QWORD *)sub_1000BEBC8(v7);
  v9 = sub_1000BEB88(v8);
  return sub_1000BE2C4(v9, v10);
}

uint64_t sub_1000A94D4()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A9514()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  sub_1000BDF38();
  v0 = sub_1000BEE90();
  v6 = v1;
  v2 = swift_task_alloc(v0);
  v3 = (_QWORD *)sub_1000BEBC8(v2);
  v4 = sub_1000BEB88(v3);
  return sub_1000BE2C4(v4, v6);
}

uint64_t sub_1000A955C()
{
  sub_100011128();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A9598()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  sub_1000158B0();
  sub_100005878();
  return sub_10001C0B0(v1, *(uint64_t (**)(void))(v0 + 8));
}

#error "1000A96A8: call analysis failed (funcsize=109)"

uint64_t sub_1000A97BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v8[11] = a8;
  v8[12] = v14;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  v9 = type metadata accessor for Logger(0);
  v8[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[14] = v10;
  v8[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RegistryError(0);
  v8[16] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[17] = swift_task_alloc(v12);
  v8[18] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A9864, 0, 0);
}

uint64_t sub_1000A9864()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[4];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_100014430();
    v2 = sub_100016428();
    sub_1000100D0();
    if ((v2 & 1) != 0)
    {
      sub_1000BEC70(v0[7]);
      if (v2)
      {
        sub_1000166E8();
        v3 = (_QWORD *)sub_100013540();
        sub_1000BF10C(v3, (uint64_t)sub_1000A991C);
        sub_10001F368();
        return sub_1000187C8();
      }
    }

  }
  v0[21] = *(_QWORD *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  return sub_100011788();
}

uint64_t sub_1000A991C()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 160));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A995C()
{
  uint64_t v0;

  sub_1000BEAB0();
  *(_QWORD *)(v0 + 168) = *(_QWORD *)(*(_QWORD *)(v0 + 64)
                                    + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  return sub_1000059B8();
}

uint64_t sub_1000A999C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0[22] = (uint64_t)sub_100038AC8(v0[9], v0[10], v0[11], v0[12]);
  v0[23] = 0;
  sub_1000167A8();
  return sub_10001B148(v1, v2, v3);
}

uint64_t sub_1000A99F4()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = *(void **)(v0 + 64);
  v2 = sub_1000561AC(1000, *(_QWORD *)(v0 + 176));
  sub_1000059A8();

  sub_10000C028();
  sub_1000059B0();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  return sub_1000BDF68((uint64_t)v2, *(uint64_t (**)(void))(v0 + 8));
}

#error "1000A9B54: call analysis failed (funcsize=121)"

uint64_t sub_1000A9C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RegistryError(0);
  v7[14] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000A9D2C, 0, 0);
}

uint64_t sub_1000A9D2C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[4];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_100014430();
    v2 = sub_100016428();
    sub_1000100D0();
    if ((v2 & 1) != 0)
    {
      sub_1000111A8(v0[7]);
      if (v2)
      {
        sub_1000166E8();
        v3 = (_QWORD *)sub_100013540();
        sub_1000BDE10(v3, (uint64_t)sub_1000A9DE4);
        sub_10001F368();
        return sub_1000187C8();
      }
    }

  }
  v0[19] = *(_QWORD *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  return sub_100011788();
}

uint64_t sub_1000A9DE4()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000A9E24()
{
  uint64_t v0;

  sub_1000BEAB0();
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(*(_QWORD *)(v0 + 64)
                                    + OBJC_IVAR____TtC10LinkDaemon8Registry_appShortcutInterpolator);
  return sub_1000059B8();
}

uint64_t sub_1000A9E64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0[20] = sub_100038D90(v0[9], v0[10]);
  v0[21] = 0;
  sub_1000167A8();
  return sub_10001B148(v1, v2, v3);
}

uint64_t sub_1000A9EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000BE2D0();
  v11 = *(void **)(v10 + 64);
  sub_1000B82F4(*(_QWORD *)(v10 + 160));
  sub_1000059A8();

  sub_10000C028();
  sub_100005878();
  sub_10001631C();
  sub_10000DD44();
  sub_1000BE298();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

#error "1000AA000: call analysis failed (funcsize=117)"

uint64_t sub_1000AA128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6[9] = a5;
  v6[10] = a6;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  v7 = type metadata accessor for Logger(0);
  v6[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[12] = v8;
  v6[13] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RegistryError(0);
  v6[14] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[15] = swift_task_alloc(v10);
  v6[16] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000AA1C4, 0, 0);
}

uint64_t sub_1000AA1C4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_100014430();
    v2 = sub_100016428();
    sub_1000100D0();
    if ((v2 & 1) != 0)
    {
      sub_1000111A8(*(_QWORD *)(v0 + 64));
      if (v2)
      {
        sub_1000166E8();
        v3 = (_QWORD *)sub_100013540();
        sub_1000BDE10(v3, (uint64_t)sub_1000AA288);
        sub_10001F368();
        return sub_1000187C8();
      }
    }

  }
  v5 = swift_task_alloc(dword_10012AF24);
  v6 = (_QWORD *)sub_1000BEBC8(v5);
  v7 = sub_1000BEB9C(v6);
  return sub_1000B0758(v7, v8, v9);
}

uint64_t sub_1000AA288()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000AA2C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000BDF38();
  v0 = swift_task_alloc(dword_10012AF24);
  v1 = (_QWORD *)sub_1000BEBC8(v0);
  v2 = sub_1000BEB9C(v1);
  return sub_1000B0758(v2, v3, v4);
}

uint64_t sub_1000AA310()
{
  sub_100011128();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000AA34C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000FE70();

  v1 = *(_QWORD *)(v0 + 16);
  sub_1000059C4();
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

#error "1000AA474: call analysis failed (funcsize=112)"

uint64_t sub_1000AA598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[12] = v9;
  v7[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RegistryError(0);
  v7[14] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v11);
  v7[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000AA638, 0, 0);
}

#error "1000AA758: call analysis failed (funcsize=127)"

uint64_t sub_1000AA864()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 144));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

#error "1000AA950: call analysis failed (funcsize=99)"

uint64_t sub_1000AAA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[11] = v7;
  v5[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RegistryError(0);
  v5[13] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[14] = swift_task_alloc(v9);
  v5[15] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000AAAF8, 0, 0);
}

uint64_t sub_1000AAAF8()
{
  _QWORD *v0;
  void *v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (void *)v0[5];
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(LNWaitForDatabaseReadyEntitlement);
    sub_100014430();
    v2 = sub_100016428();
    sub_1000100D0();
    if ((v2 & 1) != 0)
    {
      v3 = *(_QWORD *)(v0[8] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
      v0[16] = v3;
      if (v3)
      {
        sub_1000166E8();
        v4 = (_QWORD *)sub_100013540();
        v0[17] = v4;
        *v4 = v0;
        v4[1] = sub_1000AABC8;
        sub_10001F368();
        return sub_1000187C8();
      }
    }

  }
  v6 = swift_task_alloc(dword_10012AECC);
  v7 = (_QWORD *)sub_1000BEBB0(v6);
  *v7 = v0;
  v7[1] = sub_1000AAC54;
  v8 = sub_100005A68();
  return sub_1000B0F04(v8, v9);
}

uint64_t sub_1000AABC8()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 136));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000AAC08()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000BDF38();
  v1 = swift_task_alloc(dword_10012AECC);
  v2 = (_QWORD *)sub_1000BEBB0(v1);
  *v2 = v0;
  v2[1] = sub_1000AAC54;
  v3 = sub_100005A68();
  return sub_1000B0F04(v3, v4);
}

uint64_t sub_1000AAC54()
{
  sub_100011148();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000AAC90()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000BE4C0();
  v1 = *(_QWORD *)(v0 + 16);
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  return sub_1000BDF68(v1, *(uint64_t (**)(void))(v0 + 8));
}

#error "1000AAD9C: call analysis failed (funcsize=104)"

uint64_t sub_1000AAEC0(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012B2CC;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000AAF20;
  return sub_1000A26F8();
}

uint64_t sub_1000AAF20()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v1;
  v2 = *(void **)(v5 + 16);
  v3 = *v1;
  sub_10001010C(*(_QWORD *)(v5 + 32), &v5);

  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    sub_10001BE7C((uint64_t *)&unk_10012A700);
    sub_100011168();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000AAFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100018C14((uint64_t)sub_1000AAFE0);
}

uint64_t sub_1000AAFE0()
{
  uint64_t v0;

  sub_1000688E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AB054(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_10012B2B4;
  a4;
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_1000AB108;
  return sub_1000AAFC8(v8, v10, v11, v13);
}

uint64_t sub_1000AB108()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000BDF70();
  v10 = v2;
  v11 = v3;
  v9 = v1;
  v9 = (_QWORD *)*v1;
  v4 = (void *)v9[4];
  v5 = (void *)v9[2];
  v6 = *v1;
  sub_10001010C(v9[6], &v9);

  sub_1000100D0();
  v7 = sub_1000059C4();
  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    sub_1000BDB9C(v7, &qword_10012A710, LNActionMetadata_ptr);
    sub_100011214();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v6 + 8));
}

uint64_t sub_1000AB1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100018C14((uint64_t)sub_1000AB1CC);
}

uint64_t sub_1000AB1CC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 48);
  v2 = (void *)objc_opt_self(NSXPCConnection);
  sub_1000101B0();
  v3 = v1;
  sub_10000EC68();
  v4 = sub_1000BE2E8(v2);
  sub_1000BEA68((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc(dword_10012B29C);
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = sub_1000AB268;
  v6 = sub_10001B334();
  return sub_1000A558C(v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000AB268()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_1000BDAF8();
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {
    sub_1000BEA50();
    v2 = sub_1000BDC20();
    return sub_10001C0B0(v2, v3);
  }
}

uint64_t sub_1000AB2AC()
{
  uint64_t v0;

  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AB358(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  sub_10000DE64(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
  v11 = v10;
  v12 = sub_10004FE50();
  v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(a1, v11, v12);
  v5[4] = v13;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  v5[5] = v15;
  v16 = dword_10012B294;
  a5;
  v17 = (_QWORD *)swift_task_alloc(v16);
  v5[6] = v17;
  *v17 = v5;
  v17[1] = sub_1000AB444;
  return sub_1000AB1B4(v13, a2, a3, v15);
}

uint64_t sub_1000AB444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  sub_10000FE70();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  v20 = (void *)a14[2];
  v21 = *v17;
  sub_10001010C(a14[6], &a14);

  sub_1000100D0();
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_10001BE7C((uint64_t *)&unk_10012A700);
    sub_100011168();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000AB4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100018C14((uint64_t)sub_1000AB50C);
}

uint64_t sub_1000AB50C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (void *)v0[6];
  v2 = (void *)v0[2];
  v3 = (void *)objc_opt_self(NSXPCConnection);
  sub_1000101B0();
  v4 = v1;
  v5 = v2;
  sub_10000EC68();
  v6 = sub_1000BE2E8(v3);
  sub_1000BEA68((uint64_t)v6);
  v7 = (_QWORD *)swift_task_alloc(dword_10012B27C);
  v0[8] = v7;
  *v7 = v0;
  v7[1] = sub_1000AB268;
  v8 = sub_10001B334();
  return sub_1000A5AD8(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1000AB5C8(void *a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;

  v5[2] = a1;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  sub_10000DE64(0, (unint64_t *)&unk_100129F80, LNValueType_ptr);
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, v10, &protocol witness table for String);
  v5[5] = v11;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v5[6] = v13;
  v14 = dword_10012B274;
  v15 = a1;
  a5;
  v16 = (_QWORD *)swift_task_alloc(v14);
  v5[7] = v16;
  *v16 = v5;
  v16[1] = sub_1000AB6BC;
  return sub_1000AB4F4((uint64_t)v15, v11, a3, v13);
}

uint64_t sub_1000AB6BC()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;

  sub_1000BDF70();
  sub_1000BE01C();
  v4 = (void *)v2[2];
  v3 = (void *)v2[3];
  v5 = *v1;
  sub_10001010C(v2[7], v6);

  sub_1000100D0();
  swift_bridgeObjectRelease();
  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_10001BE7C((uint64_t *)&unk_10012A700);
    sub_100011168();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_1000AB788(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_10012ACFC;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000AB814;
  return sub_100097DAC(v6, v8);
}

uint64_t sub_1000AB814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  sub_10000FE70();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  v20 = (void *)a14[2];
  v21 = *v17;
  sub_10001010C(a14[5], &a14);

  v22 = sub_1000100D0();
  if (v16)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_1000BDB9C(v22, &qword_10012A710, LNActionMetadata_ptr);
    sub_100011214();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000AB8AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_100018C14((uint64_t)sub_1000AB8BC);
}

uint64_t sub_1000AB8BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_opt_self(NSXPCConnection);
  sub_1000BE17C();
  v1 = sub_1000101B0();
  *(_QWORD *)(v0 + 32) = sub_10001AA38(v1, "currentConnection");
  v2 = (_QWORD *)swift_task_alloc(dword_10012B23C);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_1000AB940;
  v3 = sub_10001B334();
  return sub_1000A6064(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000AB940()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10006B194();
  sub_100072058(v2);
  *(_QWORD *)(v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {

    v5 = sub_1000BDC20();
    return sub_10001C0B0(v5, v6);
  }
}

uint64_t sub_1000AB998()
{
  uint64_t v0;

  sub_1000BEAB0();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AB9D4(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  sub_10000DE64(0, (unint64_t *)&unk_100129F70, LNFullyQualifiedActionIdentifier_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v3[4] = v6;
  v7 = dword_10012B22C;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v7);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1000ABA74;
  return sub_1000AB8AC(v6);
}

uint64_t sub_1000ABA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  sub_10000FE70();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  v20 = (void *)a14[2];
  v21 = *v17;
  sub_10001010C(a14[5], &a14);

  sub_1000100D0();
  if (v16)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_10001BE7C((uint64_t *)&unk_10012A700);
    sub_100011168();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000ABB18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100018C14((uint64_t)sub_1000ABB2C);
}

uint64_t sub_1000ABB2C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 32);
  v2 = (void *)objc_opt_self(NSXPCConnection);
  sub_1000101B0();
  v3 = v1;
  v4 = sub_1000BE2E8(v2);
  sub_1000BDF2C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc(dword_10012B20C);
  *(_QWORD *)(v0 + 48) = v5;
  *v5 = v0;
  v5[1] = sub_100003658;
  v6 = sub_10001B334();
  return sub_1000A6544(v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000ABBCC(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v3[4] = v7;
  v8 = dword_10012B1FC;
  a3;
  v9 = (_QWORD *)swift_task_alloc(v8);
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_1000ABC64;
  return sub_1000ABB18(a1, v7);
}

uint64_t sub_1000ABC64()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = *v1;
  v2 = *(void **)(v6 + 16);
  v3 = *v1;
  sub_10001010C(*(_QWORD *)(v6 + 40), &v6);

  v4 = swift_bridgeObjectRelease();
  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    sub_1000BDB9C(v4, &qword_10012B200, LNBundleActionsMetadata_ptr);
    sub_100011168();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000ABD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100018C14((uint64_t)sub_1000ABD30);
}

uint64_t sub_1000ABD30()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 32);
  v2 = (void *)objc_opt_self(NSXPCConnection);
  sub_1000101B0();
  v3 = v1;
  v4 = sub_1000BE2E8(v2);
  sub_1000BDF2C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc(dword_10012B1E4);
  *(_QWORD *)(v0 + 48) = v5;
  *v5 = v0;
  v5[1] = sub_100003658;
  v6 = sub_10001B334();
  return sub_1000A34E0(v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000ABDD0(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v3[4] = v7;
  v8 = dword_10012B1DC;
  a3;
  v9 = (_QWORD *)swift_task_alloc(v8);
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_1000ABE68;
  return sub_1000ABD1C(a1, v7);
}

uint64_t sub_1000ABE68()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v1;
  v2 = *(void **)(v5 + 16);
  v3 = *v1;
  sub_10001010C(*(_QWORD *)(v5 + 40), &v5);

  swift_bridgeObjectRelease();
  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    Array._bridgeToObjectiveC()();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000ABF18(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012AD34;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000ABF78;
  return sub_100097E6C();
}

uint64_t sub_1000ABF78()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v1;
  v2 = *(void **)(v5 + 16);
  v3 = *v1;
  sub_10001010C(*(_QWORD *)(v5 + 32), &v5);

  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    Array._bridgeToObjectiveC()();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000AC00C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100018C14((uint64_t)sub_1000AC01C);
}

uint64_t sub_1000AC01C()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_opt_self(NSXPCConnection);
  v1 = sub_100019300();
  v2 = sub_10000FE4C((uint64_t)v1, "currentConnection");
  sub_1000BE434((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012B1B4);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_100097EF0;
  v4 = sub_10001B334();
  return sub_1000A6A08(v4, v5, v6, v7, v8);
}

uint64_t sub_1000AC0A4(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012B1A4;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000AC104;
  return sub_1000AC00C();
}

uint64_t sub_1000AC104()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = *v1;
  v2 = *(void **)(v6 + 16);
  v3 = *v1;
  sub_10001010C(*(_QWORD *)(v6 + 32), &v6);

  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    sub_1000BDB9C(v4, (unint64_t *)&unk_100129F60, LNRegisteredBundleMetadata_ptr);
    sub_100011214();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000AC1A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100018C14((uint64_t)sub_1000AC1B0);
}

uint64_t sub_1000AC1B0()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_opt_self(NSXPCConnection);
  v1 = sub_100019300();
  v2 = sub_10000FE4C((uint64_t)v1, "currentConnection");
  sub_1000BE434((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012B18C);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_100097EF0;
  v4 = sub_10001B334();
  return sub_1000A6EB8(v4, v5, v6, v7, v8);
}

uint64_t sub_1000AC238(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012B17C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000AC298;
  return sub_1000AC1A0();
}

uint64_t sub_1000AC298()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v1;
  v2 = *(void **)(v5 + 16);
  v3 = *v1;
  sub_10001010C(*(_QWORD *)(v5 + 32), &v5);

  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    sub_10001BE7C(&qword_10012B180);
    sub_100011168();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000AC354(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_10012B154;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000AC3E0;
  return sub_100097DC0(v6, v8);
}

uint64_t sub_1000AC3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  sub_10000FE70();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  v20 = (void *)a14[2];
  v21 = *v17;
  sub_10001010C(a14[5], &a14);

  v22 = sub_1000100D0();
  if (v16)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_1000BDB9C(v22, (unint64_t *)&qword_100129F50, LNEntityMetadata_ptr);
    sub_100011214();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000AC478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100018C14((uint64_t)sub_1000AC48C);
}

uint64_t sub_1000AC48C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 32);
  v2 = (void *)objc_opt_self(NSXPCConnection);
  sub_1000101B0();
  v3 = v1;
  v4 = sub_1000BE2E8(v2);
  sub_1000BDF2C((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc(dword_10012B13C);
  *(_QWORD *)(v0 + 48) = v5;
  *v5 = v0;
  v5[1] = sub_100003658;
  v6 = sub_10001B334();
  return sub_1000A39A4(v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000AC52C(int a1, int a2, int a3, void *a4)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000BE3F4(a1, a2, a3, a4);
  v6 = (_QWORD *)sub_1000100C8(v4, 40);
  sub_1000BEA74(v6);
  v7 = v5;
  v8 = sub_100019430();
  return sub_1000BDCF4(v8, v9);
}

uint64_t sub_1000AC568(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v3[4] = v7;
  v8 = dword_10012B134;
  a3;
  v9 = (_QWORD *)swift_task_alloc(v8);
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_1000BDA98;
  return sub_1000AC478(a1, v7);
}

uint64_t sub_1000AC600()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100018C14((uint64_t)sub_1000AC610);
}

uint64_t sub_1000AC610()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_opt_self(NSXPCConnection);
  v1 = sub_100019300();
  v2 = sub_10000FE4C((uint64_t)v1, "currentConnection");
  sub_1000BE434((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012B11C);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_100097EF0;
  v4 = sub_10001B334();
  return sub_1000A7368(v4, v5, v6, v7, v8);
}

uint64_t sub_1000AC698(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012B10C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000AC6F8;
  return sub_1000AC600();
}

uint64_t sub_1000AC6F8()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v1;
  v2 = *(void **)(v5 + 16);
  v3 = *v1;
  sub_10001010C(*(_QWORD *)(v5 + 32), &v5);

  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    sub_10001BE7C(&qword_10012B110);
    sub_100011168();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000AC7B4(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_10012B0E4;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000AC840;
  return sub_100097E58(v6, v8);
}

uint64_t sub_1000AC840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  sub_10000FE70();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  v20 = (void *)a14[2];
  v21 = *v17;
  sub_10001010C(a14[5], &a14);

  v22 = sub_1000100D0();
  if (v16)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_1000BDB9C(v22, (unint64_t *)&qword_100129F40, LNEnumMetadata_ptr);
    sub_100011214();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000AC8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100018C14((uint64_t)sub_1000AC8EC);
}

uint64_t sub_1000AC8EC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_opt_self(NSXPCConnection);
  sub_1000BE17C();
  v1 = sub_1000101B0();
  v2 = sub_10001AA38(v1, "currentConnection");
  sub_1000BDF2C((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012B0CC);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_1000AC970;
  v4 = sub_10001B334();
  return sub_1000A7818(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000AC970()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_1000167E4();
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {
    sub_1000BDF60();
    v2 = sub_1000BDC20();
    return sub_10001C0B0(v2, v3);
  }
}

uint64_t sub_1000AC9B4()
{
  uint64_t v0;

  sub_1000BDF38();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AC9F0(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_10012B0BC;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000ACA7C;
  return sub_1000AC8D8(v6, v8);
}

uint64_t sub_1000ACA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  sub_10000FE70();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  v20 = (void *)a14[2];
  v21 = *v17;
  sub_10001010C(a14[5], &a14);

  v22 = sub_1000100D0();
  if (v16)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_1000BDB9C(v22, &qword_10012B0C0, LNExamplePhraseDescription_ptr);
    sub_100011214();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000ACB14()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100018C14((uint64_t)sub_1000ACB24);
}

uint64_t sub_1000ACB24()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_opt_self(NSXPCConnection);
  v1 = sub_100019300();
  v2 = sub_10000FE4C((uint64_t)v1, "currentConnection");
  sub_1000BE434((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012B0A4);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_100097EF0;
  v4 = sub_10001B334();
  return sub_1000A7CDC(v4, v5, v6, v7, v8);
}

uint64_t sub_1000ACBAC(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012B094;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000ACC0C;
  return sub_1000ACB14();
}

uint64_t sub_1000ACC0C()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v1;
  v2 = *(void **)(v5 + 16);
  v3 = *v1;
  sub_10001010C(*(_QWORD *)(v5 + 32), &v5);

  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    sub_10001BE7C((uint64_t *)&unk_100129F30);
    sub_100011168();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_1000ACCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100018C14((uint64_t)sub_1000ACCCC);
}

uint64_t sub_1000ACCCC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 48);
  v2 = (void *)objc_opt_self(NSXPCConnection);
  sub_1000101B0();
  v3 = v1;
  sub_10000EC68();
  v4 = sub_1000BE2E8(v2);
  sub_1000BEA68((uint64_t)v4);
  v5 = (_QWORD *)swift_task_alloc(dword_10012B07C);
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = sub_1000ACD68;
  v6 = sub_10001B334();
  return sub_1000A818C(v6, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1000ACD68()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_1000BDAF8();
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {
    sub_1000BEA50();
    v2 = sub_1000BDC20();
    return sub_10001C0B0(v2, v3);
  }
}

uint64_t sub_1000ACE24(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  v4[5] = v12;
  v13 = dword_10012B06C;
  a4;
  v14 = (_QWORD *)swift_task_alloc(v13);
  v4[6] = v14;
  *v14 = v4;
  v14[1] = sub_1000ACEE4;
  return sub_1000ACCB4(v8, v10, a2, v12);
}

uint64_t sub_1000ACEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  sub_10000FE70();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  v20 = (void *)a14[2];
  v21 = *v17;
  sub_10001010C(a14[6], &a14);

  sub_1000100D0();
  v22 = swift_bridgeObjectRelease();
  if (v16)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_1000BDB9C(v22, (unint64_t *)&qword_10012A6F0, LNQueryMetadata_ptr);
    sub_100011214();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000ACF88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100018C14((uint64_t)sub_1000ACF9C);
}

uint64_t sub_1000ACF9C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_opt_self(NSXPCConnection);
  sub_1000BE17C();
  v1 = sub_1000101B0();
  v2 = sub_10001AA38(v1, "currentConnection");
  sub_1000BDF2C((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012B054);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_100003658;
  v4 = sub_10001B334();
  return sub_1000A8700(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000AD034(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_10012B04C;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000AD0C0;
  return sub_1000ACF88(v6, v8);
}

uint64_t sub_1000AD0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD);

  sub_10000FE70();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  v20 = (_QWORD *)*v17;
  a14 = v20;
  v21 = (void *)v20[2];
  v22 = (_QWORD *)*v17;
  sub_10001010C(v20[5], &a14);

  sub_1000100D0();
  v23 = v20[3];
  if (v16)
  {
    v24 = (void *)sub_100072010();
    sub_100010120();
    (*(void (**)(uint64_t))(v23 + 16))(v23);

  }
  else
  {
    v25 = sub_1000BEF80();
    sub_1000BE53C(v25, v26, v27);
  }
  sub_100072198();
  return sub_1000163F4((uint64_t (*)(void))v22[1]);
}

uint64_t sub_1000AD148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v7[69] = v6;
  v7[68] = a6;
  v7[67] = a5;
  v7[66] = a4;
  v7[65] = a3;
  v7[63] = a1;
  v7[64] = a2;
  v8 = sub_10000C05C();
  v7[70] = v8;
  v7[71] = *(_QWORD *)(v8 - 8);
  v7[72] = sub_100013540();
  v7[73] = sub_100013540();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000AD1E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void);
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  id v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  NSString v59;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;

  sub_10000C0F0();
  v73 = v1;
  v74 = v2;
  v72 = v0;
  v3 = sub_10004BF84(v0[65], v0[66]);
  v5 = v4;
  v6 = v0[63];
  v7 = v0[64];
  v0[74] = *(_QWORD *)(v0[69] + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  sub_10006143C(v6, v7, v3, v5);
  v9 = v8;
  v0[75] = v8;
  v0[76] = 0;
  sub_1000059B0();
  v11 = (void *)objc_opt_self(LNConnectionPolicy);
  v12 = sub_1000BE8F0(v11, "policyWithActionMetadata:");
  v0[55] = 0;
  v13 = objc_msgSend(v12, "connectionWithError:", v0 + 55);
  v0[77] = v13;

  v14 = (void *)v0[55];
  v15 = (void *)v0[69];
  if (v13)
  {
    v16 = sub_1000158F8((uint64_t)v14, "bundleIdentifier");
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v0[78] = v17;
    v0[79] = v19;
    v20 = qword_100127EC8;
    v21 = v15;
    if (v20 != -1)
      swift_once(&qword_100127EC8, sub_100099764);
    v22 = v0[73];
    v23 = v0[71];
    v24 = (void *)v0[69];
    v25 = sub_100012A40(v0[70], (uint64_t)qword_10012D1A8);
    v0[80] = v25;
    sub_1000BEA58(v22, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));

    v26 = sub_1000101EC(v19);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter();
    v29 = sub_100010050(v27);
    v30 = v0[73];
    v31 = v0[71];
    v32 = v0[70];
    if (v29)
    {
      v33 = (uint8_t *)sub_100011780(12);
      v68 = v31;
      v34 = sub_100011780(32);
      v71 = v34;
      *(_DWORD *)v33 = 136315138;
      sub_10000EC68();
      v35 = sub_1000BE650();
      v0[62] = sub_10000FBEC(v35, v36, v37);
      sub_1000BE214((uint64_t)(v0 + 62), (uint64_t)(v0 + 63));
      sub_100011800(v19);
      sub_1000100C0((void *)&_mh_execute_header, v27, v28, "Effective bundle identifier for Nessie: %s", v33);
      sub_100013320(v34);
      sub_1000133FC(v34);
      sub_1000133FC((uint64_t)v33);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v30, v32);
    }
    else
    {
      sub_1000117AC(v19);

      v56 = sub_1000BE690();
      v58(v56, v57);
    }
    v59 = String._bridgeToObjectiveC()();
    v0[81] = v59;
    v0[7] = v0 + 54;
    v0[53] = sub_1000BE1E0((uint64_t)sub_1000AD71C);
    v0[49] = _NSConcreteStackBlock;
    v0[50] = 0x40000000;
    v0[51] = sub_1000ADDF4;
    v0[52] = &unk_10011DA88;
    objc_msgSend(v13, "fetchActionForAppShortcutIdentifier:completionHandler:", v59, v0 + 49);
    return swift_continuation_await(v0 + 2);
  }
  else
  {
    v38 = v14;
    _convertNSErrorToError(_:)(v14);

    sub_100013E4C();
    sub_100010120();
    v39 = qword_100127EC8;
    v40 = v15;
    if (v39 != -1)
      v40 = (id)swift_once(&qword_100127EC8, sub_100099764);
    v41 = v0[72];
    v42 = (void *)v0[69];
    v43 = v0[64];
    sub_10001BEE4((uint64_t)v40, (uint64_t)qword_10012D1A8);

    v44 = sub_1000101EC(v43);
    Logger.logObject.getter(v44);
    v45 = sub_10000BFD4();
    v46 = sub_1000BDC74(v41);
    v47 = v0[72];
    v48 = v0[71];
    v49 = v0[64];
    if (v46)
    {
      v50 = v0[63];
      v70 = v0[70];
      v51 = (uint8_t *)sub_100011780(12);
      v69 = v47;
      v52 = sub_100011780(32);
      v71 = v52;
      *(_DWORD *)v51 = 136315138;
      sub_100016794();
      v54 = sub_100018928(v50, v53, &v71);
      sub_1000BEC1C(v54);
      sub_1000BEB08((uint64_t)(v0 + 56), v55);
      sub_100011800(v49);
      sub_1000100C0((void *)&_mh_execute_header, v41, v45, "Could not open connection to app: %s", v51);
      sub_100013320(v52);
      sub_1000133FC(v52);
      sub_1000133FC((uint64_t)v51);

      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v69, v70);
    }
    else
    {
      sub_1000117AC(v0[64]);

      v61 = sub_10000E090();
      v63(v61, v62);
    }
    v65 = v0[63];
    v64 = v0[64];
    sub_1000BDF14();
    sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
    sub_100017D24(v66);
    *v67 = v65;
    v67[1] = v64;
    sub_1000BEF04((uint64_t)v67);
    sub_1000101B0();
    sub_1000BE0F0();

    sub_1000BE5EC();
    sub_1000158B0();
    v10 = (uint64_t (*)(void))sub_1000BEDE4();
    return sub_100010B2C(v10);
  }
}

uint64_t sub_1000AD71C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000111DC();
  *(_QWORD *)(v0 + 656) = v1;
  if (v1)
    swift_bridgeObjectRelease();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000AD7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t (*v41)(void);
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  id v54;
  id v55;
  _QWORD *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  void *v59;
  void *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;

  sub_10000C0F0();
  a27 = v30;
  a28 = v31;
  a26 = v28;
  v32 = *(_QWORD *)(v28 + 544);
  v33 = *(id *)(v28 + 432);

  if (v32)
  {
    v34 = *(_QWORD *)(v28 + 632);
    v35 = *(_QWORD *)(v28 + 624);
    v36 = *(_QWORD *)(v28 + 608);
    v37 = *(_QWORD *)(v28 + 544);
    v38 = *(_QWORD *)(v28 + 536);
    sub_100016794();
    sub_1000651FC(v35, v34, v38, v37);
    if (v36)
    {
      v39 = *(void **)(v28 + 616);
      v40 = *(void **)(v28 + 600);
      sub_10000E038();

      sub_1000059A8();
      sub_1000BE5EC();
      sub_1000158B0();
      v41 = (uint64_t (*)(void))sub_1000BEDE4();
      return sub_100010B2C(v41);
    }
    sub_1000059A8();
    v51 = sub_1000BE678();
    sub_100019EB8(v51, v52, v53);
    v43 = *(NSObject **)(v28 + 640);
    if (*(_QWORD *)(v28 + 192))
    {
      memcpy((void *)(v28 + 80), (const void *)(v28 + 184), 0x68uLL);
      sub_10000E038();
      v54 = sub_1000C51E0(v33, v28 + 80);
      sub_1000BF0D8();
      v55 = v54;
      v56 = sub_1000BF0D8();
      Logger.logObject.getter(v56);
      v57 = sub_1000BEEE0();
      v58 = os_log_type_enabled((os_log_t)sub_1000BBDE4, v57);
      v59 = *(void **)(v28 + 616);
      v60 = *(void **)(v28 + 600);
      if (v58)
      {
        v80 = *(void **)(v28 + 600);
        v61 = sub_100011780(22);
        v78 = sub_100011780(64);
        a16 = v78;
        *(_DWORD *)v61 = 136315394;
        v62 = sub_1000158F8(v78, "description");
        static String._unconditionallyBridgeFromObjectiveC(_:)(v62);

        *(_QWORD *)(v28 + 480) = sub_1000BEFE0(v63, v64, &a16);
        sub_1000BEEA4(v28 + 480, v28 + 488);
        sub_1000059A8();

        *(_WORD *)(v61 + 12) = 2080;
        v65 = *(_QWORD *)(v28 + 152);
        sub_1000058B4();
        *(_QWORD *)(v28 + 488) = sub_1000BEA48(v65, v66, &a16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 488, v28 + 496);
        sub_100007398();
        sub_1000BDDBC();
        sub_1000BDDBC();
        sub_1000190F8((void *)&_mh_execute_header, sub_1000BBDE4, v57, "Found %s for type %s", (uint8_t *)v61);
        sub_100007404(v78);
        sub_1000133FC(v78);
        sub_1000133FC(v61);

        sub_1000BDDBC();
      }
      else
      {
        sub_1000BDDBC();

        sub_1000BDDBC();
        sub_1000BDDBC();

      }
      goto LABEL_11;
    }
    sub_1000101EC(*(_QWORD *)(v28 + 512));
    v70 = sub_100016794();
    Logger.logObject.getter(v70);
    v71 = sub_10000BFD4();
    if (sub_1000101D0(v71))
    {
      v77 = *(_QWORD *)(v28 + 536);
      v72 = *(_QWORD *)(v28 + 512);
      v79 = *(_QWORD *)(v28 + 504);
      v73 = sub_100011780(22);
      v81 = sub_100011780(64);
      a16 = v81;
      *(_DWORD *)v73 = 136315394;
      sub_100016794();
      *(_QWORD *)(v28 + 464) = sub_100018928(v77, v74, &a16);
      sub_1000BEEA4(v28 + 464, v28 + 472);
      sub_100011800(v37);
      *(_WORD *)(v73 + 12) = 2080;
      sub_10001A83C();
      *(_QWORD *)(v28 + 472) = sub_100005A8C(v79, v75, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 472, v28 + 480);
      sub_100011800(v72);
      sub_1000190F8((void *)&_mh_execute_header, v43, (os_log_type_t)(v28 + 32), "Did not find a matching span record for %s for %s", (uint8_t *)v73);
      sub_100007404(v81);
      sub_1000133FC(v81);
      sub_1000133FC(v73);
    }
    else
    {
      v76 = *(_QWORD *)(v28 + 512);
      sub_1000117AC(v37);
      sub_1000117AC(v76);
    }
  }
  else
  {
    v43 = *(NSObject **)(v28 + 640);
    swift_bridgeObjectRelease();
    v33 = v33;
    Logger.logObject.getter(v33);
    v44 = sub_1000186A0();
    if (sub_1000101D0(v44))
    {
      v45 = (uint8_t *)sub_100011780(12);
      v46 = sub_100011780(32);
      a16 = v46;
      *(_DWORD *)v45 = 136315138;
      v47 = sub_10001AA38(v46, "action");
      v48 = objc_msgSend(v47, "description");

      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      *(_QWORD *)(v28 + 456) = sub_100018928(v49, v50, &a16);
      sub_1000BE214(v28 + 456, v28 + 464);
      sub_10000E038();

      sub_1000100C0((void *)&_mh_execute_header, v43, v29, "No parameter identifier given, returning action %s", v45);
      sub_100013320(v46);
      sub_1000133FC(v46);
      sub_1000133FC((uint64_t)v45);
    }
    else
    {

    }
  }

  v67 = *(void **)(v28 + 616);
  v68 = *(void **)(v28 + 600);
  v55 = sub_10001AA38(v69, "action");

LABEL_11:
  sub_1000BE5EC();
  sub_1000158B0();
  return sub_100017770((uint64_t)v55, *(uint64_t (**)(void))(v28 + 8));
}

uint64_t sub_1000ADD5C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(v1 + 648);
  v3 = *(void **)(v1 + 616);
  v4 = *(void **)(v1 + 600);
  swift_willThrow(a1);

  swift_task_dealloc(*(_QWORD *)(v1 + 584));
  sub_100005878();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000ADDF4(uint64_t a1, void *a2, void *a3)
{
  return sub_1000AE608(a1, a2, a3, (uint64_t (*)(_QWORD, void *))sub_1000C267C, (uint64_t (*)(_QWORD, void *))sub_1000C32C4);
}

uint64_t sub_1000ADE1C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  const void *v10;
  void *v11;
  _QWORD *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  sub_100016714();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = _Block_copy(v10);
  v12 = (_QWORD *)sub_1000100C8(v1, 56);
  v12[2] = v7;
  v12[3] = v5;
  v12[4] = v3;
  v12[5] = v11;
  v12[6] = v9;
  v13 = v7;
  v14 = v5;
  v15 = v3;
  v16 = v9;
  v17 = sub_100019430();
  return sub_100004C84(v17, v18);
}

uint64_t sub_1000ADE9C(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v12 = v11;
  v5[4] = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v15 = v14;
  v5[5] = v14;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v17 = v16;
  }
  else
  {
    v17 = 0;
  }
  v5[6] = v17;
  v18 = dword_10012B02C;
  a5;
  v19 = (_QWORD *)swift_task_alloc(v18);
  v5[7] = v19;
  *v19 = v5;
  v19[1] = sub_1000ADF84;
  return sub_1000AD148(v10, v12, v13, v15, a3, v17);
}

uint64_t sub_1000ADF84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000BDF70();
  v13 = v2;
  v14 = v3;
  v12 = v1;
  v4 = v0;
  v6 = v5;
  v7 = (_QWORD *)*v1;
  v12 = v7;
  v8 = (void *)v7[2];
  v9 = (_QWORD *)*v1;
  sub_10001010C(v7[7], &v12);

  sub_1000100D0();
  sub_1000059C4();
  v10 = v7[3];
  swift_bridgeObjectRelease();
  if (v4)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_100018A00(v10, 0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));

    sub_100072038();
  }
  else
  {
    sub_1000BE53C(v10, (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v10 + 16));
    sub_100072038();

  }
  return sub_1000188F0((uint64_t (*)(void))v9[1]);
}

uint64_t sub_1000AE034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_100018C14((uint64_t)sub_1000AE04C);
}

uint64_t sub_1000AE04C()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t **v6;

  v1 = v0[5];
  v2 = (void *)v0[6];
  objc_opt_self(NSXPCConnection);
  sub_10000EC68();
  v3 = v2;
  v4 = sub_1000101B0();
  v5 = sub_1000158F8(v4, "currentConnection");
  sub_1000BEA68((uint64_t)v5);
  v6 = (uint64_t **)swift_task_alloc(dword_10012AFFC);
  v0[8] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (uint64_t *)sub_1000ACD68;
  return sub_1000A8EA8(v1, 0x7972747369676552, 0xEE00726F72726520, v0[6], v0[2], v0[3], v0[6], v0[4]);
}

uint64_t sub_1000AE10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[22] = a5;
  v6[23] = a6;
  v6[20] = a3;
  v6[21] = a4;
  v6[18] = a1;
  v6[19] = a2;
  v7 = type metadata accessor for Logger(0);
  v6[24] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[25] = v8;
  v6[26] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000AE1A0, 0, 0);
}

uint64_t sub_1000AE1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;
  void *v38;
  id v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  os_log_type_t v46;
  _BOOL4 v47;
  unint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  sub_10001A498();
  a25 = v28;
  a26 = v29;
  a24 = v26;
  v30 = (void *)objc_opt_self(LNConnectionPolicy);
  sub_100019430();
  v31 = objc_msgSend(v30, "policyWithBundleIdentifier:", String._bridgeToObjectiveC()());
  sub_1000BF0F0();
  *(_QWORD *)(v26 + 120) = 0;
  v32 = sub_1000BE8F0(v27, "connectionWithError:");
  *(_QWORD *)(v26 + 216) = v32;

  v33 = *(void **)(v26 + 120);
  if (v32)
  {
    v34 = v33;
    *(_QWORD *)(v26 + 224) = sub_1000BF05C();
    *(_QWORD *)(v26 + 56) = v26 + 136;
    v35 = sub_1000BE1E0((uint64_t)sub_1000AE4A0);
    *(_QWORD *)(v26 + 80) = _NSConcreteStackBlock;
    v36 = (_QWORD *)(v26 + 80);
    v36[1] = 0x40000000;
    v36[2] = sub_1000ADDF4;
    v36[3] = &unk_10011DA20;
    v36[4] = v35;
    sub_1000BE9B0(v35, "fetchActionForAutoShortcutPhrase:completionHandler:");
    return sub_1000BDEDC();
  }
  else
  {
    v38 = *(void **)(v26 + 168);
    v39 = v33;
    sub_1000BF094();
    sub_1000BF0F0();
    sub_1000BE0F0();
    sub_1000BDCD8();
    v40 = qword_100127EC8;
    v41 = v38;
    if (v40 != -1)
      v41 = (id)swift_once(&qword_100127EC8, sub_100099764);
    v42 = *(NSObject **)(v26 + 208);
    v43 = *(_QWORD *)(v26 + 160);
    v44 = *(void **)(v26 + 168);
    sub_10001BEE4((uint64_t)v41, (uint64_t)qword_10012D1A8);

    v45 = sub_1000101EC(v43);
    Logger.logObject.getter(v45);
    v46 = sub_10000BFD4();
    v47 = sub_1000BDC74(v42);
    v48 = *(_QWORD *)(v26 + 160);
    if (v47)
    {
      v63 = *(_QWORD *)(v26 + 192);
      v64 = *(_QWORD *)(v26 + 200);
      v49 = *(_QWORD *)(v26 + 152);
      v62 = *(_QWORD *)(v26 + 208);
      v50 = (uint8_t *)sub_100011780(12);
      v51 = sub_100011780(32);
      a14 = v51;
      *(_DWORD *)v50 = 136315138;
      sub_1000100E0();
      *(_QWORD *)(v26 + 128) = sub_10000FBEC(v49, v48, &a14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v26 + 128, v26 + 136);
      sub_1000135C4();
      sub_1000100C0((void *)&_mh_execute_header, v42, v46, "Could not open connection to app: %s", v50);
      sub_100013320(v51);
      sub_1000133FC(v51);
      sub_1000133FC((uint64_t)v50);

      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v63);
    }
    else
    {
      sub_10001A0B8();

      v52 = sub_1000BDCE0();
      v54(v52, v53);
    }
    v56 = *(_QWORD *)(v26 + 152);
    v55 = *(_QWORD *)(v26 + 160);
    sub_1000BDF14();
    sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
    v58 = sub_100017D24(v57);
    v60 = sub_1000BF0A0(v58, v59);
    *v61 = v56;
    v61[1] = v55;
    sub_1000BEF04(v60);
    sub_10000EC68();
    sub_100013E4C();
    swift_task_dealloc(*(_QWORD *)(v26 + 208));
    return sub_1000BDABC(*(uint64_t (**)(void))(v26 + 8));
  }
}

uint64_t sub_1000AE4A0()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000111DC();
  *(_QWORD *)(v0 + 232) = v1;
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000AE520()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = *(void **)(v0 + 224);
  v2 = *(_QWORD **)(v0 + 144);

  *v2 = *(_QWORD *)(v0 + 136);
  sub_1000158B0();
  return sub_1000BDB54(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AE594(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v2 = *(void **)(v1 + 224);
  v3 = *(void **)(v1 + 216);
  swift_willThrow(a1);

  swift_task_dealloc(*(_QWORD *)(v1 + 208));
  return sub_10001A480(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000AE608(uint64_t result, void *a2, void *a3, uint64_t (*a4)(_QWORD, void *), uint64_t (*a5)(_QWORD, void *))
{
  if (a3)
    return a4(*(_QWORD *)(result + 32), a3);
  a3 = a2;
  a4 = a5;
  if (a2)
    return a4(*(_QWORD *)(result + 32), a3);
  __break(1u);
  return result;
}

uint64_t sub_1000AE668(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_10012AFF4;
  a4;
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_1000AE71C;
  return sub_1000AE034(v8, v10, v11, v13);
}

uint64_t sub_1000AE71C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000BDF70();
  v13 = v2;
  v14 = v3;
  v12 = v1;
  v4 = v0;
  v6 = v5;
  v7 = (_QWORD *)*v1;
  v12 = v7;
  v8 = (void *)v7[2];
  v9 = (_QWORD *)*v1;
  sub_10001010C(v7[6], &v12);

  sub_1000100D0();
  sub_1000059C4();
  v10 = v7[3];
  if (v4)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_100018A00(v10, 0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));

    sub_100072038();
  }
  else
  {
    sub_1000BE53C(v7[3], (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v10 + 16));
    sub_100072038();

  }
  return sub_1000188F0((uint64_t (*)(void))v9[1]);
}

uint64_t sub_1000AE7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return sub_100018C14((uint64_t)sub_1000AE7DC);
}

uint64_t sub_1000AE7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10000FE70();
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 64) = v5;
  v6 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v5 + 16) = v1;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v2;
  *(_OWORD *)(v5 + 48) = v6;
  *(_QWORD *)(v0 + 72) = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  v7 = (_QWORD *)swift_task_alloc(dword_10012AFC4);
  *(_QWORD *)(v0 + 80) = v7;
  *v7 = v0;
  v7[1] = sub_1000AE88C;
  v8 = sub_1000BDE90();
  return sub_1000A9378(v8, v9, v10, v11, v12);
}

uint64_t sub_1000AE88C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10006B194();
  sub_100072058(v2);
  *(_QWORD *)(v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {

    sub_1000158B0();
    v5 = sub_1000BE02C();
    return sub_10001C0B0(v5, v6);
  }
}

uint64_t sub_1000AE8E8()
{
  uint64_t v0;

  sub_1000158B0();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AE918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v7[3] = a2;
  v7[4] = a7;
  v7[2] = a1;
  v12 = sub_10001BE7C(&qword_100128E68);
  v7[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LNAppShortcutParameterRecord(0);
  v7[6] = v13;
  v7[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_task_alloc(dword_10012AFF4);
  v7[8] = v14;
  *v14 = v7;
  v14[1] = sub_1000AE9E4;
  return sub_1000AE034(a3, a4, a5, a6);
}

uint64_t sub_1000AE9E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000143EC();
  sub_100013478();
  v0[9] = v3;
  v0[10] = v1;
  sub_10000EB14(v4);
  if (v1)
  {
    swift_task_dealloc(v0[7]);
    sub_100005878();
    return sub_1000188F0(*(uint64_t (**)(void))(v2 + 8));
  }
  else
  {
    sub_1000167A8();
    return sub_100019418(v6, v7, v8);
  }
}

uint64_t sub_1000AEA44()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  id v33;
  unint64_t v34;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = objc_msgSend(*(id *)(v0 + 72), "parameters");
  sub_1000BDB9C((uint64_t)v2, &qword_1001284E0, LNProperty_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2);

  v34 = v3;
  sub_100065144();
  if (!v1)
  {
    sub_1000BDF4C(*(_QWORD *)(v0 + 40), 1, *(_QWORD *)(v0 + 48));
    if (v5)
    {
      v6 = *(void **)(v0 + 72);
      v7 = sub_1000059B0();
      sub_1000BE9EC(v7, &qword_100128E68);
      v8 = type metadata accessor for RegistryError(0);
      sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
      sub_1000176B0(v8, v9);
      sub_10001AE20();
      v10 = sub_1000BEF80();
      v11(v10);
      v12 = sub_10001EEE0();
      swift_storeEnumTagMultiPayload(v12, v13, 2);
      sub_1000BE0F0();

      goto LABEL_6;
    }
    v16 = *(_QWORD *)(v0 + 56);
    v17 = sub_1000BE3E8();
    sub_1000BB03C(v17, v18, v19);
    v20 = sub_1000BE0E8();
    *(_QWORD *)(v20 + 16) = v16;
    v21 = sub_1000B943C(sub_1000BBD40, v20);
    if (v34 >> 62)
    {
      sub_1000101B0();
      v23 = sub_1000185D0();
      sub_1000059A8();
    }
    else
    {
      v22 = v34 & 0xFFFFFFFFFFFFF8;
      v23 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v23 < v21)
    {
      __break(1u);
    }
    else
    {
      v25 = *(_QWORD *)(v0 + 48);
      v24 = *(_QWORD *)(v0 + 56);
      sub_1000BDCE0();
      sub_1000B7C64();
      sub_10000DD44();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(*(id *)(v24 + *(int *)(v25 + 36)));
      v20 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v22 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v20 < v22 >> 1)
      {
LABEL_12:
        v26 = *(void **)(v0 + 72);
        v27 = *(_QWORD *)(v0 + 56);
        v28 = *(_QWORD **)(v0 + 16);
        v29 = sub_1000BE644();
        v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v30);
        specialized Array._endMutation()(v31);
        isa = Array._bridgeToObjectiveC()().super.isa;
        sub_1000059A8();
        v33 = sub_1000BE8F0(v26, "actionWithParameters:");

        sub_10001DBC8(v27, type metadata accessor for LNAppShortcutParameterRecord);
        *v28 = v33;
        sub_10001F024();
        sub_100010270();
        v14 = (uint64_t (*)(void))sub_1000121E0();
        return v14();
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v20 + 1, 1);
    goto LABEL_12;
  }
  v4 = *(void **)(v0 + 72);
  sub_1000059B0();

LABEL_6:
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  sub_1000158B0();
  v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1000AED98(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v5[2] = a5;
  v11 = type metadata accessor for UUID(0);
  v5[3] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[4] = v12;
  v13 = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v13;
  v5[6] = _Block_copy(a4);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v16 = v15;
  v5[7] = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v19 = v18;
  v5[8] = v18;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v20 = dword_10012AFDC;
  a5;
  v21 = (_QWORD *)swift_task_alloc(v20);
  v5[9] = v21;
  *v21 = v5;
  v21[1] = sub_1000AEE98;
  return sub_1000AE7C4(v14, v16, v17, v19, v13);
}

uint64_t sub_1000AEE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  void (**v26)(_QWORD, _QWORD, _QWORD);
  void *v27;
  void *v28;
  uint64_t (*v29)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_1000BE2D0();
  a17 = v20;
  a18 = v21;
  a16 = v19;
  v22 = v18;
  v24 = v23;
  v25 = (_QWORD *)*v19;
  a16 = v25;
  sub_10001010C(v25[9], &a16);
  v26 = (void (**)(_QWORD, _QWORD, _QWORD))v25[6];
  v27 = (void *)v25[2];
  sub_100011110(v25[4]);

  sub_1000059C4();
  sub_1000059B0();
  if (v22)
  {
    v28 = (void *)_convertErrorToNSError(_:)(v22);
    sub_1000059A0();
    ((void (**)(_QWORD, _QWORD, void *))v26)[2](v26, 0, v28);

    _Block_release(v26);
  }
  else
  {
    sub_1000BE53C((uint64_t)v26, (uint64_t)v24, (uint64_t (*)(uint64_t, uint64_t, _QWORD))v26[2]);
    _Block_release(v26);

  }
  swift_task_dealloc(v25[5]);
  sub_1000BE298();
  return v29(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10);
}

uint64_t sub_1000AEF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return sub_100018C14((uint64_t)sub_1000AEF80);
}

uint64_t sub_1000AEF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v13 = *(_OWORD *)(v0 + 16);
  v14 = *(_OWORD *)(v0 + 32);
  v5 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 80) = v5;
  *(_QWORD *)(v5 + 16) = v2;
  *(_OWORD *)(v5 + 24) = v13;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 48) = v3;
  *(_OWORD *)(v5 + 56) = v14;
  *(_QWORD *)(v5 + 72) = v1;
  *(_QWORD *)(v0 + 88) = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  v6 = (_QWORD *)swift_task_alloc(dword_10012AFC4);
  *(_QWORD *)(v0 + 96) = v6;
  *v6 = v0;
  v6[1] = sub_1000AF048;
  v7 = sub_1000BDE90();
  return sub_1000A9378(v7, v8, v9, v10, v11);
}

uint64_t sub_1000AF048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);

  sub_1000BDF84();
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {

    sub_1000158B0();
    v3 = sub_1000BE02C();
    return sub_10001C0B0(v3, v4);
  }
}

uint64_t sub_1000AF094()
{
  uint64_t v0;

  sub_1000158B0();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000AF0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v8[25] = a8;
  v8[26] = v17;
  v8[23] = a6;
  v8[24] = a7;
  v8[21] = a4;
  v8[22] = a5;
  v8[19] = a2;
  v8[20] = a3;
  v8[18] = a1;
  v9 = sub_10001BE7C(&qword_100128E68);
  v8[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LNAppShortcutParameterRecord(0);
  v8[28] = v10;
  v8[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  v8[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v8[31] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[32] = v13;
  v8[33] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v8[34] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[35] = v15;
  v8[36] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000AF1F8, 0, 0);
}

uint64_t sub_1000AF1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;

  sub_10001A498();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  v29 = *(_QWORD *)(v26 + 176);
  v30 = *(void **)(v26 + 184);
  v31 = *(_QWORD *)(v26 + 160);
  v32 = *(_QWORD *)(v26 + 168);
  *(_QWORD *)(v26 + 296) = *(_QWORD *)(*(_QWORD *)(v26 + 152) + OBJC_IVAR____TtC10LinkDaemon8Registry_store);
  sub_10006143C(v31, v32, v29, v30);
  *(_QWORD *)(v26 + 304) = v33;
  *(_QWORD *)(v26 + 312) = 0;
  v34 = v33;
  v35 = (void *)objc_opt_self(LNConnectionPolicy);
  v36 = sub_1000BE8F0(v35, "policyWithActionMetadata:");
  *(_QWORD *)(v26 + 120) = 0;
  v37 = objc_msgSend(v36, "connectionWithError:", v26 + 120);
  *(_QWORD *)(v26 + 320) = v37;

  v38 = *(void **)(v26 + 120);
  if (v37)
  {
    v39 = v38;
    *(_QWORD *)(v26 + 328) = sub_1000BF05C();
    *(_QWORD *)(v26 + 56) = v26 + 136;
    v40 = sub_1000BE1E0((uint64_t)sub_1000AF540);
    *(_QWORD *)(v26 + 80) = _NSConcreteStackBlock;
    v41 = (_QWORD *)(v26 + 80);
    v41[1] = 0x40000000;
    v41[2] = sub_1000ADDF4;
    v41[3] = &unk_10011D9E0;
    v41[4] = v40;
    sub_1000BE9B0(v40, "fetchActionForAutoShortcutPhrase:completionHandler:");
    return sub_1000BDEDC();
  }
  else
  {
    v43 = *(void **)(v26 + 152);
    v44 = v38;
    sub_1000BF094();
    sub_1000BF0F0();
    sub_1000BE0F0();
    sub_1000BDCD8();
    v45 = qword_100127EC8;
    v46 = v43;
    if (v45 != -1)
      v46 = (id)swift_once(&qword_100127EC8, sub_100099764);
    v47 = *(NSObject **)(v26 + 288);
    v48 = *(_QWORD *)(v26 + 168);
    v49 = *(void **)(v26 + 152);
    sub_10001BEE4((uint64_t)v46, (uint64_t)qword_10012D1A8);

    v50 = sub_1000101EC(v48);
    Logger.logObject.getter(v50);
    v51 = sub_10000BFD4();
    v52 = sub_1000BDC74(v47);
    v54 = *(_QWORD *)(v26 + 280);
    v53 = *(_QWORD *)(v26 + 288);
    v55 = *(_QWORD *)(v26 + 168);
    if (v52)
    {
      v56 = *(_QWORD *)(v26 + 160);
      v72 = *(_QWORD *)(v26 + 272);
      v57 = (uint8_t *)sub_100011780(12);
      v71 = v53;
      v58 = sub_100011780(32);
      a14 = v58;
      *(_DWORD *)v57 = 136315138;
      sub_100016794();
      *(_QWORD *)(v26 + 128) = sub_100018928(v56, v59, &a14);
      sub_1000BEB08(v26 + 128, v26 + 136);
      sub_100011800(v55);
      sub_1000100C0((void *)&_mh_execute_header, v47, v51, "Could not open connection to app: %s", v57);
      sub_100013320(v58);
      sub_1000133FC(v58);
      sub_1000133FC((uint64_t)v57);

      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v71, v72);
    }
    else
    {
      sub_1000117AC(*(_QWORD *)(v26 + 168));

      v60 = sub_10000E090();
      v62(v60, v61);
    }
    v64 = *(_QWORD *)(v26 + 160);
    v63 = *(_QWORD *)(v26 + 168);
    v65 = type metadata accessor for RegistryError(0);
    sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
    v67 = sub_1000176B0(v65, v66);
    v69 = sub_1000BF0A0(v67, v68);
    *v70 = v64;
    v70[1] = v63;
    swift_storeEnumTagMultiPayload(v69, v65, 1);
    sub_100013E10();
    sub_100013E4C();

    sub_1000BE514();
    sub_100005878();
    sub_100010270();
    sub_10001631C();
    sub_10000DD44();
    return sub_1000BDABC(*(uint64_t (**)(void))(v26 + 8));
  }
}

uint64_t sub_1000AF540()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000111DC();
  *(_QWORD *)(v0 + 336) = v1;
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000AF5C0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Class isa;
  id v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  sub_1000BE128();
  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(void **)(v0 + 136);

  v3 = sub_1000BE678();
  sub_100019FA0(v3, v4, v5);
  v6 = sub_1000BE3AC();
  sub_1000BDF4C(v6, v7, v1);
  if (!v8)
  {
    v13 = *(_QWORD *)(v0 + 312);
    v14 = *(id *)(v0 + 216);
    v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 32))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
    v16 = sub_10001AA38(v15, "parameters");
    sub_1000BDB9C((uint64_t)v16, &qword_1001284E0, LNProperty_ptr);
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16);

    sub_100065144();
    if (v13)
    {
      v18 = *(void **)(v0 + 304);

      sub_10000C028();
      v19 = sub_1000BE3E8();
LABEL_10:
      v20(v19);
      sub_1000BE528();
      sub_1000158B0();
      sub_100005878();
      sub_100010270();
      sub_10001631C();
      v12 = *(uint64_t (**)(void))(v0 + 8);
      return sub_1000BDE74(v12);
    }
    v21 = *(_QWORD *)(v0 + 216);
    v22 = sub_1000BE3AC();
    sub_1000BDF4C(v22, v23, v24);
    if (v8)
    {
      v25 = *(void **)(v0 + 320);
      v26 = *(void **)(v0 + 304);
      v28 = *(_QWORD *)(v0 + 256);
      v27 = *(_QWORD *)(v0 + 264);
      v29 = sub_10000C028();
      sub_1000BE5E4(v29, &qword_100128E68);
      sub_1000BDF14();
      sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
      sub_100017D24(v30);
      v32 = v31;
      sub_10001F1F0(v31, v27, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
      v33 = swift_storeEnumTagMultiPayload(v32, v21, 2);
      swift_willThrow(v33);

      v19 = sub_1000BE9F4();
      goto LABEL_10;
    }
    v35 = *(_QWORD *)(v0 + 232);
    v36 = sub_10001EEE0();
    sub_1000BB03C(v36, v37, v38);
    v39 = sub_1000BE0E8();
    *(_QWORD *)(v39 + 16) = v35;
    v40 = sub_1000B943C(sub_1000BDA54, v39);
    v41 = v40;
    if ((unint64_t)v17 >> 62)
    {
      if (v17 < 0)
        v54 = v17;
      else
        v54 = v17 & 0xFFFFFFFFFFFFFF8;
      sub_1000101B0();
      v43 = _CocoaArrayWrapper.endIndex.getter(v54);
      v40 = sub_1000059A8();
    }
    else
    {
      v42 = v17 & 0xFFFFFFFFFFFFF8;
      v43 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v43 < v41)
    {
      __break(1u);
    }
    else
    {
      v45 = *(_QWORD *)(v0 + 224);
      v44 = *(_QWORD *)(v0 + 232);
      sub_1000BEF74();
      sub_1000B7C64();
      sub_100010034();
      v14 = *(id *)(v44 + *(int *)(v45 + 36));
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v40 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v42 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v40 < v42 >> 1)
      {
LABEL_16:
        v46 = *(void **)(v0 + 320);
        v47 = *(void **)(v0 + 304);
        v48 = *(_QWORD *)(v0 + 256);
        v49 = *(_QWORD *)(v0 + 264);
        v50 = *(_QWORD *)(v0 + 248);
        v56 = *(_QWORD *)(v0 + 232);
        v57 = *(_QWORD **)(v0 + 144);
        v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v14);
        specialized Array._endMutation()(v51);
        sub_1000BE9F4();
        isa = Array._bridgeToObjectiveC()().super.isa;
        sub_1000059A8();
        v53 = objc_msgSend(v2, "actionWithParameters:", isa);

        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v50);
        sub_10001DBC8(v56, type metadata accessor for LNAppShortcutParameterRecord);
        *v57 = v53;
        goto LABEL_4;
      }
    }
    v55 = v40;
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v40 + 1, 1);
    v40 = v55;
    goto LABEL_16;
  }
  v9 = *(void **)(v0 + 304);
  v10 = *(_QWORD **)(v0 + 144);

  sub_1000BE9EC(v11, (uint64_t *)&unk_1001281C0);
  *v10 = v2;
LABEL_4:
  sub_1000BE528();
  sub_1000158B0();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  v12 = *(uint64_t (**)(void))(v0 + 8);
  return sub_1000BDE74(v12);
}

uint64_t sub_1000AF988(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(v1 + 328);
  v3 = *(void **)(v1 + 320);
  v4 = *(void **)(v1 + 304);
  swift_willThrow(a1);

  sub_1000BE514();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  sub_10000DD44();
  return sub_1000BDD68(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000AFA18(id *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v3 = objc_msgSend(*a1, "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = objc_msgSend(*(id *)(a2 + *(int *)(type metadata accessor for LNAppShortcutParameterRecord(0) + 36)), "identifier");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  if (v4 == v8 && v6 == v10)
    v12 = 1;
  else
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v10, 0);
  sub_1000059A8();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1000AFB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, void *a6)
{
  _QWORD *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v6[2] = a6;
  v13 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  v14 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[3] = v14;
  v6[4] = _Block_copy(a5);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v17 = v16;
  v6[5] = v16;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v20 = v19;
  v6[6] = v19;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v23 = v22;
  v6[7] = v22;
  if (a4)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(a4);
    v24 = 0;
  }
  else
  {
    v24 = 1;
  }
  v25 = type metadata accessor for UUID(0);
  sub_100014360(v14, v24, 1, v25);
  v26 = dword_10012AFAC;
  a6;
  v27 = (_QWORD *)swift_task_alloc(v26);
  v6[8] = v27;
  *v27 = v6;
  v27[1] = sub_1000AFCD4;
  return sub_1000AEF64(v15, v17, v18, v20, v21, v23, v14);
}

uint64_t sub_1000AFCD4(void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (**v7)(uint64_t, uint64_t, uint64_t);
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD);
  _QWORD *v14;

  v3 = v1;
  v5 = (_QWORD *)*v2;
  v14 = v5;
  v6 = (_QWORD *)*v2;
  sub_10001010C(v5[8], &v14);
  v7 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v5[4];
  v8 = (void *)v5[2];
  sub_1000131E0(v5[3], (uint64_t *)&unk_1001281C0);

  sub_1000059C4();
  sub_1000059B0();
  sub_10000C028();
  if (v3)
  {
    v9 = (void *)_convertErrorToNSError(_:)(v3);
    sub_1000059A0();
    sub_100018A00((uint64_t)v7, 0, v7[2]);

    _Block_release(v7);
  }
  else
  {
    v10 = sub_100019430();
    sub_1000BE53C(v10, v11, v12);
    _Block_release(v7);

  }
  swift_task_dealloc(v5[3]);
  return sub_1000188F0((uint64_t (*)(void))v6[1]);
}

uint64_t sub_1000AFDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = sub_10000C05C();
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = sub_1000BDD74(*(_QWORD *)(v7 + 64));
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000AFDFC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = qword_100127EC8;
  v2 = *(id *)(v0 + 56);
  if (v1 == -1)
  {
    v3 = v2;
  }
  else
  {
    swift_once(&qword_100127EC8, sub_100099764);
    v3 = *(NSObject **)(v0 + 56);
  }
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = sub_100012A40(*(_QWORD *)(v0 + 64), (uint64_t)qword_10012D1A8);
  sub_100005848(v4, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));

  sub_1000101EC(v6);
  sub_10000DDEC();
  v8 = sub_1000186A0();
  v9 = sub_1000101D0(v8);
  v11 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 32);
  if (v9)
  {
    v13 = *(_QWORD *)(v0 + 24);
    v33 = *(_QWORD *)(v0 + 64);
    v14 = (uint8_t *)sub_100011780(12);
    v32 = v10;
    v15 = sub_100011780(32);
    v34 = v15;
    *(_DWORD *)v14 = 136315138;
    sub_1000100E0();
    *(_QWORD *)(v0 + 16) = sub_10000FBEC(v13, v12, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    sub_1000135C4();
    sub_1000100C0((void *)&_mh_execute_header, v3, (os_log_type_t)v6, "Handling request for AppShortcut lookup with bundleIdentifier: %s", v14);
    sub_100013320(v15);
    sub_1000133FC(v15);
    sub_1000133FC((uint64_t)v14);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v32, v33);
  }
  else
  {
    sub_10001A0B8();

    v16 = sub_1000BE1BC();
    v18(v16, v17);
  }
  v19 = *(void **)(v0 + 56);
  objc_opt_self(NSXPCConnection);
  v20 = v19;
  sub_10000EC68();
  v21 = sub_1000101B0();
  *(_QWORD *)(v0 + 88) = sub_1000158F8(v21, "currentConnection");
  v22 = (_QWORD *)swift_task_alloc(dword_10012AF8C);
  *(_QWORD *)(v0 + 96) = v22;
  *v22 = v0;
  v22[1] = sub_1000AF048;
  v23 = sub_10001B334();
  return sub_1000A97BC(v23, v24, v25, v26, v27, v28, v29, v30);
}

uint64_t sub_1000B003C(void *a1, int a2, void *a3, void *a4, void *aBlock, uint64_t a6)
{
  void *v10;
  _QWORD *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v10 = _Block_copy(aBlock);
  v11 = (_QWORD *)sub_1000100C8(a6, 48);
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = v10;
  v11[5] = a1;
  v12 = a3;
  v13 = a4;
  v14 = a1;
  v15 = sub_100019430();
  return sub_1000BDCF4(v15, v16);
}

uint64_t sub_1000B00A0(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_10012AF7C;
  a4;
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_1000B0154;
  return sub_1000AFDAC(v8, v10, v11, v13);
}

uint64_t sub_1000B0154()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000BDF70();
  v10 = v2;
  v11 = v3;
  v9 = v1;
  v9 = (_QWORD *)*v1;
  v4 = (void *)v9[4];
  v5 = (void *)v9[2];
  v6 = *v1;
  sub_10001010C(v9[6], &v9);

  sub_1000100D0();
  v7 = sub_1000059C4();
  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    sub_1000BDB9C(v7, (unint64_t *)&unk_10012A6E0, LNAutoShortcut_ptr);
    sub_100011214();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v6 + 8));
}

uint64_t sub_1000B0200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_10000C05C();
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = sub_1000BDD74(*(_QWORD *)(v5 + 64));
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000B024C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_1000BDF70();
  v1 = qword_100127EC8;
  v2 = *(id *)(v0 + 32);
  if (v1 == -1)
  {
    v3 = v2;
  }
  else
  {
    swift_once(&qword_100127EC8, sub_100099764);
    v3 = *(void **)(v0 + 32);
  }
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = sub_100012A40(v6, (uint64_t)qword_10012D1A8);
  sub_100005848(v4, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));

  sub_10000DDEC();
  v8 = sub_1000186A0();
  if (sub_100013670(v8))
  {
    v9 = (_WORD *)sub_100011780(2);
    sub_10001F81C(v9);
    sub_10001EF60((void *)&_mh_execute_header, v10, v11, "Handling request for all AppShortcuts");
    sub_1000133FC(v6);
  }
  v12 = *(_QWORD *)(v0 + 48);
  v13 = *(void **)(v0 + 32);

  sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  objc_opt_self(NSXPCConnection);
  v14 = v13;
  v15 = sub_10000C030();
  *(_QWORD *)(v0 + 64) = sub_10000FE4C(v15, "currentConnection");
  v16 = (_QWORD *)swift_task_alloc(dword_10012AF5C);
  *(_QWORD *)(v0 + 72) = v16;
  *v16 = v0;
  v16[1] = sub_1000B038C;
  v17 = sub_10001B334();
  return sub_1000A9C8C(v17, v18, v19, v20, v21, v22, v23);
}

uint64_t sub_1000B038C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10006B194();
  sub_100072058(v2);
  *(_QWORD *)(v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {

    sub_1000158B0();
    v5 = sub_1000BE02C();
    return sub_10001C0B0(v5, v6);
  }
}

uint64_t sub_1000B03E8()
{
  uint64_t v0;

  sub_1000158B0();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B042C(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_10012AF4C;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000B04B8;
  return sub_1000B0200(v6, v8);
}

uint64_t sub_1000B04B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  sub_10000FE70();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  v20 = (void *)a14[2];
  v21 = *v17;
  sub_10001010C(a14[5], &a14);

  sub_1000100D0();
  if (v16)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_10001BE7C(&qword_10012AF50);
    sub_100011168();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000B055C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10000C05C();
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = sub_1000BDD74(*(_QWORD *)(v4 + 64));
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000B05A4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_1000BDF70();
  v1 = qword_100127EC8;
  v2 = *(id *)(v0 + 24);
  if (v1 == -1)
  {
    v3 = v2;
  }
  else
  {
    swift_once(&qword_100127EC8, sub_100099764);
    v3 = *(void **)(v0 + 24);
  }
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = sub_100012A40(v6, (uint64_t)qword_10012D1A8);
  sub_100005848(v4, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));

  sub_10000DDEC();
  v8 = sub_1000186A0();
  if (sub_100013670(v8))
  {
    v9 = (_WORD *)sub_100011780(2);
    sub_10001F81C(v9);
    sub_10001EF60((void *)&_mh_execute_header, v10, v11, "Handling request for App Shortcut properties");
    sub_1000133FC(v6);
  }
  v12 = *(_QWORD *)(v0 + 40);
  v13 = *(void **)(v0 + 24);

  sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  objc_opt_self(NSXPCConnection);
  v14 = v13;
  v15 = sub_10000C030();
  v16 = sub_10000FE4C(v15, "currentConnection");
  sub_1000BEA68((uint64_t)v16);
  v17 = (_QWORD *)swift_task_alloc(dword_10012AF1C);
  *(_QWORD *)(v0 + 64) = v17;
  *v17 = v0;
  v17[1] = sub_1000B06DC;
  v18 = sub_10001B334();
  return sub_1000AA128(v18, v19, v20, v21, v22, v23);
}

uint64_t sub_1000B06DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);

  sub_1000BDAF8();
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {

    sub_1000158B0();
    v3 = sub_1000BE02C();
    return sub_10001C0B0(v3, v4);
  }
}

uint64_t sub_1000B0728()
{
  uint64_t v0;

  sub_1000158B0();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B0758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LNAppShortcutParameterRecord(0);
  v3[8] = v6;
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(sub_10001BE7C(&qword_100128E68) - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000B0818, 0, 0);
}

unint64_t sub_1000B0818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  id v18;
  char v19;
  unint64_t result;
  char v21;
  uint64_t v22;
  _BOOL8 v23;
  Swift::Int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_10001A498();
  sub_1000651E0(*(_QWORD **)(v0 + 32));
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
LABEL_16:
    v37 = *(_QWORD **)(v0 + 16);
    sub_10000E038();
    *v37 = _swiftEmptyDictionarySingleton;
    sub_100005878();
    sub_100010270();
    sub_10001631C();
    sub_10000DD44();
    v38 = (uint64_t (*)(void))sub_1000121E0();
    return sub_1000BDABC(v38);
  }
  v3 = *(_QWORD *)(v0 + 80);
  v41 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v6 = *(_QWORD *)(v3 + 72);
  sub_100016794();
  v39 = v6;
  v40 = v4;
  while (1)
  {
    v8 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 64);
    v10 = sub_1000BEF80();
    sub_100019FA0(v10, v11, &qword_100128E68);
    sub_100019FA0(v7, v8, &qword_100128E68);
    v12 = sub_10001C93C(v8, 1, v9);
    v13 = *(_QWORD *)(v0 + 88);
    if (v12 == 1)
    {
      sub_1000131E0(v13, &qword_100128E68);
      goto LABEL_14;
    }
    v14 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 56);
    v16 = *(_QWORD *)(v0 + 40);
    sub_1000BB03C(v13, v14, type metadata accessor for LNAppShortcutParameterRecord);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v17(v15, v14, v16);
    v18 = *(id *)(v14 + *(int *)(v41 + 36));
    v19 = sub_100013368();
    result = sub_10003162C(v15);
    v22 = _swiftEmptyDictionarySingleton[2];
    v23 = (v21 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      break;
    v25 = result;
    v26 = v21;
    sub_10001BE7C(&qword_10012AF30);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v19, v24))
    {
      v27 = sub_10003162C(*(_QWORD *)(v0 + 56));
      if ((v26 & 1) != (v28 & 1))
        return sub_1000BDEF8();
      v25 = v27;
    }
    if ((v26 & 1) != 0)
    {
      v29 = _swiftEmptyDictionarySingleton[7];

      *(_QWORD *)(v29 + 8 * v25) = v18;
      v4 = v40;
    }
    else
    {
      v30 = *(_QWORD *)(v0 + 56);
      v31 = *(_QWORD *)(v0 + 40);
      _swiftEmptyDictionarySingleton[(v25 >> 6) + 8] |= 1 << v25;
      v4 = v40;
      result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v17)(_swiftEmptyDictionarySingleton[6] + *(_QWORD *)(v40 + 72) * v25, v30, v31);
      *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v25) = v18;
      v32 = _swiftEmptyDictionarySingleton[2];
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
        goto LABEL_19;
      _swiftEmptyDictionarySingleton[2] = v34;
    }
    v35 = *(_QWORD *)(v0 + 72);
    v36 = *(_QWORD *)(v0 + 56);
    sub_100005A78();
    sub_1000BEE10(v36, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    sub_10001DBC8(v35, type metadata accessor for LNAppShortcutParameterRecord);
    v6 = v39;
LABEL_14:
    sub_1000131E0(*(_QWORD *)(v0 + 96), &qword_100128E68);
    v5 += v6;
    if (!--v2)
    {
      sub_10000E038();
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1000B0AF0(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = type metadata accessor for UUID(0);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v3[5] = v6;
  v7 = dword_10012AF14;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v7);
  v3[6] = v8;
  *v8 = v3;
  v8[1] = sub_1000B0B84;
  return sub_1000B055C(v6);
}

uint64_t sub_1000B0B84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  sub_10000FE70();
  sub_1000BE01C();
  v3 = *(void **)(v2 + 16);
  v4 = *v1;
  sub_10001010C(*(_QWORD *)(v2 + 48), v5);

  v6 = sub_1000100D0();
  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_1000BDB9C(v6, &qword_1001284E0, LNProperty_ptr);
    sub_10007EC94(&qword_1001289E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    sub_1000BEA10();
    Dictionary._bridgeToObjectiveC()();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_1000B0C40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100018C14((uint64_t)sub_1000B0C54);
}

uint64_t sub_1000B0C54()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_opt_self(NSXPCConnection);
  sub_1000BE17C();
  v1 = sub_1000101B0();
  v2 = sub_10001AA38(v1, "currentConnection");
  sub_1000BDF2C((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012AEFC);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_100003658;
  v4 = sub_10001B334();
  return sub_1000AA598(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000B0CEC(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_10012AEEC;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000B0D78;
  return sub_1000B0C40(v6, v8);
}

uint64_t sub_1000B0D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  sub_10000FE70();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  v20 = (void *)a14[2];
  v21 = *v17;
  sub_10001010C(a14[5], &a14);

  v22 = sub_1000100D0();
  if (v16)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE34();
  }
  else
  {
    sub_1000BDB9C(v22, &qword_10012A230, LNRelevantIntent_ptr);
    sub_100011214();
    sub_1000059A8();
    sub_1000BDE28();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000163F4(*(uint64_t (**)(void))(v21 + 8));
}

uint64_t sub_1000B0E10()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100018C14((uint64_t)sub_1000B0E20);
}

uint64_t sub_1000B0E20()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_opt_self(NSXPCConnection);
  v1 = sub_100019300();
  v2 = sub_10000FE4C((uint64_t)v1, "currentConnection");
  sub_1000BE434((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012AEC4);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_1000B0E94;
  v4 = sub_10001B334();
  return sub_1000AAA5C(v4, v5, v6, v7, v8);
}

uint64_t sub_1000B0E94()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_10001F274();
  if (v0)
  {
    sub_1000167A8();
    return sub_100011788();
  }
  else
  {
    sub_1000BE120();
    v2 = sub_1000BDC20();
    return sub_10001C0B0(v2, v3);
  }
}

uint64_t sub_1000B0ED8()
{
  uint64_t v0;

  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B0F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000B0F1C, 0, 0);
}

uint64_t sub_1000B0F1C()
{
  unint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  Swift::Int v18;
  char v19;
  Swift::Bool v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t (*v35)(void);
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  sub_10001A498();
  v1 = (unint64_t)sub_10006A5E4(0, 0);
  if (v1 >> 62)
    goto LABEL_26;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_10000C020();
  while (1)
  {
    v37 = isUniquelyReferenced_nonNull_native;
    if (!v2)
      break;
    v3 = 0;
    v39 = v1 & 0xC000000000000001;
    v4 = _swiftEmptyDictionarySingleton;
    v38 = v1;
    while (1)
    {
      if (v39)
      {
        v5 = sub_1000BE690();
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v6);
      }
      else
      {
        v7 = *(id *)(v1 + 8 * v3 + 32);
      }
      v8 = v7;
      if (__OFADD__(v3, 1))
        break;
      v40 = v3 + 1;
      v9 = sub_10000FE4C((uint64_t)v7, "bundleIdentifier");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = v8;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
      v41 = v4;
      v14 = sub_1000BE8C8();
      v16 = v4[2];
      v17 = (v15 & 1) == 0;
      v18 = v16 + v17;
      if (__OFADD__(v16, v17))
        goto LABEL_24;
      v1 = v14;
      v19 = v15;
      sub_10001BE7C(&qword_10012AED0);
      v20 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18);
      v4 = v41;
      if (v20)
      {
        v21 = sub_1000BE8C8();
        if ((v19 & 1) != (v22 & 1))
          return sub_1000BDEF8();
        v1 = v21;
      }
      v23 = sub_100005A78();
      if ((v19 & 1) == 0)
      {
        v41[(v1 >> 6) + 8] |= 1 << v1;
        v24 = (uint64_t *)(v41[6] + 16 * v1);
        *v24 = v10;
        v24[1] = v12;
        *(_QWORD *)(v41[7] + 8 * v1) = _swiftEmptyArrayStorage;
        v25 = v41[2];
        v26 = __OFADD__(v25, 1);
        v27 = v25 + 1;
        if (v26)
          goto LABEL_25;
        v41[2] = v27;
        v23 = sub_100016794();
      }
      v28 = (_QWORD *)(v41[7] + 8 * v1);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      isUniquelyReferenced_nonNull_native = *(_QWORD *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v29 = *(_QWORD *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (isUniquelyReferenced_nonNull_native >= v29 >> 1)
      {
        v31 = sub_1000BEA38(v29);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31, v32, v33);
      }
      v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(isUniquelyReferenced_nonNull_native, v13);
      specialized Array._endMutation()(v30);
      sub_10000E038();

      ++v3;
      v1 = v38;
      if (v40 == v2)
        goto LABEL_21;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    sub_1000101EC(v1);
    v2 = sub_10001E8F8();
    sub_1000059B0();
  }
  v4 = _swiftEmptyDictionarySingleton;
LABEL_21:
  v34 = *(_QWORD **)(v37 + 16);
  sub_1000117AC(v1);
  *v34 = v4;
  v35 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000BDABC(v35);
}

uint64_t sub_1000B1198(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012AEB4;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000B11F8;
  return sub_1000B0E10();
}

uint64_t sub_1000B11F8()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v1;
  v2 = *(void **)(v5 + 16);
  v3 = *v1;
  sub_10001010C(*(_QWORD *)(v5 + 32), &v5);

  if (v0)
  {
    sub_100005840();
    sub_10001B5F4();
    sub_1000BDE40();
  }
  else
  {
    sub_10001BE7C(&qword_10012AEB8);
    sub_100011168();
    sub_1000059A8();
    sub_1000BDE1C();
  }
  sub_1000107C4();

  sub_100072038();
  return sub_1000188F0(*(uint64_t (**)(void))(v3 + 8));
}

void sub_1000B12A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t inited;
  id v6;
  id v7;
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_10001BE7C(&qword_10012B398);
  inited = swift_initStackObject(v4, &v14);
  *(_OWORD *)(inited + 16) = xmmword_1000F05A0;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x80000001000F3C30;
  *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0xD000000000000010;
  *(_QWORD *)(inited + 64) = 0x80000001000F60B0;
  v6 = objc_msgSend(a3, "action");
  v7 = objc_msgSend(v6, "identifier");

  if (!v7)
  {
    __break(1u);
    goto LABEL_8;
  }
  *(_QWORD *)(inited + 72) = v7;
  strcpy((char *)(inited + 80), "relevanceType");
  *(_WORD *)(inited + 94) = -4864;
  v8 = objc_msgSend(a3, "context");
  v9 = objc_msgSend(v8, "analyticsDescription");

  if (!v9)
  {
LABEL_8:
    __break(1u);
    return;
  }
  *(_QWORD *)(inited + 96) = v9;
  *(_QWORD *)(inited + 104) = 0x694B746567646977;
  *(_QWORD *)(inited + 112) = 0xEA0000000000646ELL;
  sub_1000B9994(a3, (SEL *)&selRef_widgetKind);
  if (v10)
    v11 = v10;
  else
    v11 = 0xE000000000000000;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(inited + 120) = v12;
  sub_10000DE64(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
  Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v13, &protocol witness table for String);
}

Class sub_1000B1474(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  NSDictionary v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_10000DE64(0, (unint64_t *)&qword_10012A760, NSObject_ptr);
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4.super.isa = 0;
  }
  return v4.super.isa;
}

uint64_t sub_1000B14F8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 88) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return sub_100018C14((uint64_t)sub_1000B1510);
}

uint64_t sub_1000B1510()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (char *)v0[4];
  v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC10LinkDaemon8Registry_ready];
  v0[5] = v2;
  if (v2)
  {
    sub_1000179D8();
    v3 = (_QWORD *)sub_10003628C();
    v0[6] = v3;
    *v3 = v0;
    v3[1] = sub_1000B1614;
    sub_1000BE0D8();
    return Task<>.value.getter();
  }
  else
  {
    sub_1000BE474();
    v13 = sub_1000BEDF0(v5, v6, v7, v8, v9, v10, v11, v12, v30, v32, v34);
    sub_10001E538(v13, v14, v15, v16, v17, v18, v19, v20, v31, v33, v35);
    sub_1000BDF40();
    v0[7] = v36;
    objc_opt_self(NSXPCConnection);
    sub_10000EC68();
    v0[8] = sub_10001771C((uint64_t)v1, "currentConnection");
    v21 = (_QWORD *)swift_task_alloc(dword_10012AE8C);
    v0[9] = v21;
    v22 = sub_1000BE03C(v21, (uint64_t)sub_1000B16F4);
    return sub_1000BE008((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29);
  }
}

uint64_t sub_1000B1614()
{
  uint64_t v0;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v0 + 48));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000B164C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = (void *)v0[4];
  sub_1000BE474();
  v10 = sub_1000BEDF0(v2, v3, v4, v5, v6, v7, v8, v9, v28, v30, v32);
  sub_10001E538(v10, v11, v12, v13, v14, v15, v16, v17, v29, v31, v33);
  sub_1000BDF40();
  v0[7] = v34;
  objc_opt_self(NSXPCConnection);
  sub_10000EC68();
  v0[8] = sub_10001771C((uint64_t)v1, "currentConnection");
  v18 = (_QWORD *)swift_task_alloc(dword_10012AE8C);
  v0[9] = v18;
  v19 = sub_1000BE03C(v18, (uint64_t)sub_1000B16F4);
  return sub_1000BE008((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t sub_1000B16F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000143EC();
  sub_100072058(v2);
  *(_QWORD *)(v0 + 80) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {

    sub_1000059A8();
  }
  sub_1000167A8();
  return sub_100019418(v4, v5, v6);
}

uint64_t sub_1000B1750()
{
  uint64_t v0;

  sub_1000059A8();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B1780(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v5 + 96) = a3;
  *(_QWORD *)(v5 + 104) = a5;
  *(_BYTE *)(v5 + 192) = a4;
  *(_QWORD *)(v5 + 88) = a2;
  v6 = type metadata accessor for LSLinkBundleRecord(0);
  *(_QWORD *)(v5 + 112) = v6;
  *(_QWORD *)(v5 + 120) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001BE7C(&qword_10012ADD0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 128) = swift_task_alloc(v7);
  *(_QWORD *)(v5 + 136) = swift_task_alloc(v7);
  *(_QWORD *)(v5 + 144) = swift_task_alloc(v7);
  return swift_task_switch(sub_1000B1824, 0, 0);
}

uint64_t sub_1000B1824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  id v6;
  double v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;

  v2 = *(_QWORD *)(v1 + 144);
  sub_1000BDB9C(a1, &qword_10012ADF0, LSBundleRecord_ptr);
  v3 = sub_100019430();
  v6 = sub_1000B1D7C(v3, v4, v5);
  *(_QWORD *)(v1 + 152) = v6;
  sub_1000BE160(v2);
  if (v6)
  {
    v8 = v6;
    sub_100097F34();
  }
  else
  {
    type metadata accessor for DaemonRecord(0, v7);
    v9 = sub_1000BEE50();
    if (static DaemonRecord.from(bundleIdentifier:)(v9, v10))
    {
      sub_1000B1F44();
    }
    else
    {
      type metadata accessor for FrameworkRecord(0);
      v11 = sub_1000BEE50();
      if (!static FrameworkRecord.from(bundleIdentifier:)(v11, v12))
        goto LABEL_8;
      sub_1000B2298();
    }
  }
  v13 = sub_1000BE9F4();
  sub_1000131E0(v13, v14);
  v15 = sub_10001EEE0();
  sub_100019EB8(v15, v16, &qword_10012ADD0);
LABEL_8:
  v17 = *(_QWORD *)(v1 + 128);
  v18 = *(_QWORD *)(v1 + 112);
  sub_100019FA0(*(_QWORD *)(v1 + 144), v17, &qword_10012ADD0);
  sub_1000BDF4C(v17, 1, v18);
  if (v19)
  {
    v20 = *(_QWORD *)(v1 + 144);
    v22 = *(_QWORD *)(v1 + 88);
    v21 = *(_QWORD *)(v1 + 96);
    sub_1000131E0(*(_QWORD *)(v1 + 128), &qword_10012ADD0);
    v23 = type metadata accessor for RegistryError(0);
    sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
    v25 = sub_1000176B0(v23, v24);
    v27 = sub_1000BF0A0(v25, v26);
    *v28 = v22;
    v28[1] = v21;
    swift_storeEnumTagMultiPayload(v27, v23, 0);
    sub_100013E10();
    sub_100013E4C();

LABEL_14:
    sub_1000131E0(v20, &qword_10012ADD0);
    sub_1000BED80();
    sub_100005878();
    sub_100010270();
    sub_10001631C();
    return sub_1000BDD68(*(uint64_t (**)(void))(v1 + 8));
  }
  v29 = *(unsigned __int8 *)(v1 + 192);
  sub_1000BB03C(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 120), type metadata accessor for LSLinkBundleRecord);
  v30 = sub_1000B2604();
  if ((v30 & 1) == 0 && !(_DWORD)v29)
  {
    v20 = *(_QWORD *)(v1 + 144);
    v31 = *(_QWORD *)(v1 + 120);
    sub_1000BDF14();
    sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
    v33 = sub_100017D24(v32);
    v35 = sub_1000BF0A0(v33, v34);
    swift_storeEnumTagMultiPayload(v35, v29, 4);
    sub_100013E4C();

    sub_10001DBC8(v31, type metadata accessor for LSLinkBundleRecord);
    goto LABEL_14;
  }
  v38 = *(_QWORD *)(v1 + 112);
  v37 = *(_QWORD *)(v1 + 120);
  v39 = *(_BYTE *)(v1 + 192);
  v40 = sub_10001BE7C(&qword_100128A00);
  v41 = sub_1000100C8(v40, 72);
  *(_QWORD *)(v1 + 160) = v41;
  *(_OWORD *)(v41 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v41 + 56) = v38;
  *(_QWORD *)(v41 + 64) = &off_10011DFB0;
  v42 = sub_10001795C((_QWORD *)(v41 + 32));
  sub_1000207A8(v37, (uint64_t)v42, type metadata accessor for LSLinkBundleRecord);
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v41;
  *(_QWORD *)(v1 + 32) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v1 + 40) = xmmword_1000F0B70;
  *(_BYTE *)(v1 + 56) = v39;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  v43 = (_QWORD *)swift_task_alloc(dword_10012AA5C);
  *(_QWORD *)(v1 + 168) = v43;
  *v43 = v1;
  v43[1] = sub_1000B1B20;
  return sub_10009DA20(v1 + 16, 1);
}

uint64_t sub_1000B1B20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  sub_100013478();
  *(_QWORD *)(v2 + 176) = v3;
  *(_QWORD *)(v2 + 184) = v0;
  sub_10000EB14(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000BDFA8();
  if (!v0)
    sub_1000117B4();
  sub_1000167A8();
  return sub_100011788();
}

uint64_t sub_1000B1B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26,uint64_t a27,uint64_t a28)
{
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  uint64_t v47;

  sub_10000C0F0();
  a27 = v29;
  a28 = v30;
  a26 = v28;
  v31 = *(_QWORD *)(v28[13] + OBJC_IVAR____TtC10LinkDaemon8Registry_observers);
  v46 = *(_QWORD *)(v31 + 16);
  if (v46)
  {
    result = sub_1000058B4();
    v33 = 0;
    while (v33 < *(_QWORD *)(v31 + 16))
    {
      sub_1000BE71C((_QWORD *)(v31 + 32 + 40 * v33));
      sub_10000C020();
      sub_1000957CC();
      v35 = v34;
      sub_1000059B0();
      v36 = Set.init(minimumCapacity:)(*(_QWORD *)(v35 + 16), type metadata for String, &protocol witness table for String);
      v47 = v36;
      v37 = *(_QWORD *)(v35 + 16);
      if (v37)
      {
        v38 = (uint64_t *)(v35 + 40);
        do
        {
          v39 = *(v38 - 1);
          v40 = *v38;
          sub_1000100E0();
          sub_10001161C(&a15, v39, v40);
          swift_bridgeObjectRelease();
          v38 += 2;
          --v37;
        }
        while (v37);
        sub_10000EC84();
        v41 = v47;
      }
      else
      {
        v41 = v36;
        sub_10000EC84();
      }
      ++v33;
      sub_10006FEA4(v41, (uint64_t)&_swiftEmptySetSingleton);
      result = sub_1000059B0();
      if (v33 == v46)
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
    sub_1000058B4();
LABEL_12:
    v42 = (void *)v28[19];
    v43 = v28[15];
    sub_100007398();
    sub_1000059A8();

    sub_10001DBC8(v43, type metadata accessor for LSLinkBundleRecord);
    sub_1000BE5E4(v44, &qword_10012ADD0);
    sub_100010270();
    sub_10001631C();
    sub_10000DD44();
    sub_100010034();
    v45 = (uint64_t (*)(void))sub_1000121E0();
    return sub_100010B2C(v45);
  }
  return result;
}

uint64_t sub_1000B1D18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000BE364(v1, type metadata accessor for LSLinkBundleRecord);
  sub_1000BE9EC(v2, &qword_10012ADD0);
  sub_1000BED80();
  sub_100005878();
  sub_100010270();
  sub_10001631C();
  return sub_1000188F0(*(uint64_t (**)(void))(v0 + 8));
}

id sub_1000B1D7C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;

  type metadata accessor for DaemonRecord(0, a3);
  v5 = static DaemonRecord.from(bundleIdentifier:)(a1, a2);
  if (v5)
  {
    v6 = (id)v5;
    v7 = DaemonRecord.attributionBundleIdentifier.getter();
    if (v8)
    {
      v9 = v7;
      v10 = v8;
      sub_10000DE64(0, &qword_10012ADF0, LSBundleRecord_ptr);
      v16 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(v9, v10, 1);
      swift_bridgeObjectRelease();
LABEL_8:

      return v16;
    }

  }
  sub_10000DE64(0, &qword_10012ADF0, LSBundleRecord_ptr);
  v11 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(a1, a2, 1);
  v12 = objc_opt_self(LSApplicationExtensionRecord);
  v13 = swift_dynamicCastObjCClass(v11, v12);
  if (!v13)
    return v11;
  v16 = (void *)v13;
  v6 = v11;
  v14 = LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
  if (v15)
  {
    v16 = (void *)static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:)(v14, v15, 1);
    swift_bridgeObjectRelease();

    goto LABEL_8;
  }
  v17 = objc_msgSend(v16, "containingBundleRecord");

  if (v17)
  {

    return v17;
  }
  return v16;
}

void sub_1000B1F44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_1000100A8();
  v5 = v4;
  v7 = v6;
  sub_10001BE7C(&qword_10012AA18);
  sub_1000179E8();
  __chkstk_darwin(v8);
  v48 = sub_1000BE080(v9, v44);
  v46 = *(_QWORD *)(v48 - 8);
  sub_100013E18();
  __chkstk_darwin(v10);
  sub_10001778C();
  v45 = v11;
  sub_10001BE7C(&qword_100128740);
  sub_1000179E8();
  __chkstk_darwin(v12);
  sub_1000BE908();
  sub_10001BE7C(&qword_10012AD20);
  sub_1000179E8();
  __chkstk_darwin(v13);
  v14 = sub_1000BDCA4();
  v15 = type metadata accessor for URLResourceValues(v14);
  v49 = *(_QWORD *)(v15 - 8);
  sub_100013E18();
  __chkstk_darwin(v16);
  v17 = (int *)sub_1000BE184();
  sub_1000179E8();
  __chkstk_darwin(v18);
  sub_1000BE5A0();
  *v1 = DaemonRecord.bundleIdentifier.getter();
  v1[1] = v19;
  DaemonRecord.metadataURLs.getter();
  sub_1000509AC();
  sub_1000059A8();
  v20 = sub_10001DCF0();
  sub_1000BDF4C(v3, 1, v20);
  if (v21)
  {
    sub_1000131E0(v3, &qword_100128740);
LABEL_6:
    sub_1000BE8B4();
    sub_100014360(v24, v25, v26, v15);
LABEL_7:

    sub_1000131E0(v2, &qword_10012AD20);
    goto LABEL_8;
  }
  v22 = sub_10001BE7C(&qword_10012AD28);
  v23 = sub_1000BEE28(v22);
  *(_OWORD *)(v23 + 16) = xmmword_1000EFAE0;
  sub_1000BEE20(v23, NSURLContentModificationDateKey);
  sub_100070F88(v23);
  sub_1000BEF48();
  if (v7)
  {
    sub_1000059A0();
    sub_1000059C4();
    sub_1000BE4D0();
    goto LABEL_6;
  }
  sub_1000059C4();
  sub_1000BE4D0();
  sub_1000BE114();
  sub_100014360(v27, v28, v29, v15);
  sub_1000BDF4C(v2, 1, v15);
  if (v21)
    goto LABEL_7;
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v0, v2, v15);
  URLResourceValues.contentModificationDate.getter(v30);
  sub_1000BDF4C(v47, 1, v48);
  if (!v21)
  {
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v45, v47, v48);
    v32 = Date.timeIntervalSinceReferenceDate.getter(v31);
    v33 = sub_1000BE104(v32);
    v35 = v34;
    sub_1000BEE10(v45, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
    v36 = sub_1000BEF30(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
    v37 = (_QWORD *)((char *)v1 + v17[6]);
    *v37 = v33;
    v37[1] = v35;
    Date.init()(v36);

    *((_BYTE *)v1 + v17[8]) = 1;
    *((_BYTE *)v1 + v17[9]) = 1;
    sub_1000BE8B4();
    sub_100014360(v38, v39, v40, v20);
    sub_1000BEE3C((uint64_t)v1);
    sub_1000BE114();
    sub_100014360(v41, v42, v43, (uint64_t)v17);
    sub_1000BEF50((uint64_t)v1);
    goto LABEL_9;
  }

  sub_1000BEF30(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
  sub_1000131E0(v47, &qword_10012AA18);
LABEL_8:
  swift_bridgeObjectRelease();
  sub_1000BE160(v7);
LABEL_9:
  sub_100013308();
}

void sub_1000B2298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;

  sub_1000100A8();
  v4 = v3;
  v71 = v5;
  sub_10001BE7C(&qword_10012AA18);
  sub_1000179E8();
  __chkstk_darwin(v6);
  sub_10001778C();
  v67 = v7;
  v8 = sub_1000BE20C();
  v65 = *(_QWORD *)(v8 - 8);
  v66 = v8;
  sub_100013E18();
  __chkstk_darwin(v9);
  sub_10001778C();
  v64 = v10;
  v11 = sub_10001DCF0();
  __chkstk_darwin(v11);
  sub_10001BE7C(&qword_10012AD20);
  sub_1000179E8();
  __chkstk_darwin(v12);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for URLResourceValues(0);
  sub_1000BE7A8();
  __chkstk_darwin(v15);
  v70 = sub_1000BE184();
  sub_1000179E8();
  v17 = __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v19 = FrameworkRecord.bundleIdentifier.getter(v17);
  v19[1] = v20;
  v69 = v4;
  FrameworkRecord.metadataURL.getter();
  v21 = sub_10001BE7C(&qword_10012AD28);
  v22 = sub_1000BEE28(v21);
  *(_OWORD *)(v22 + 16) = xmmword_1000EFAE0;
  sub_1000BEE20(v22, NSURLContentModificationDateKey);
  sub_100070F88(v22);
  sub_1000BEF48();
  if (v1)
  {
    sub_1000059B0();
    sub_1000059A0();
    sub_1000BE734();
    sub_1000BE8B4();
    sub_100014360(v23, v24, v25, v68);
LABEL_5:

    v33 = &qword_10012AD20;
    v34 = (uint64_t)v14;
    goto LABEL_6;
  }
  v26 = v2;
  v28 = v66;
  v27 = v67;
  sub_1000BE734();
  sub_1000059B0();
  sub_1000BE114();
  v29 = v68;
  sub_100014360(v30, v31, v32, v68);
  sub_1000BDF4C((uint64_t)v14, 1, v29);
  if (v43)
    goto LABEL_5;
  v39 = v26;
  v40 = sub_10001F1F0(v0, (uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32));
  URLResourceValues.contentModificationDate.getter(v40);
  v41 = sub_1000BE3AC();
  sub_1000BDF4C(v41, v42, v28);
  if (!v43)
  {
    v46 = sub_1000BEA58(v64, v27, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 32));
    v47 = Date.timeIntervalSinceReferenceDate.getter(v46);
    v48 = sub_1000BE104(v47);
    v50 = v49;
    v51 = sub_1000BE9E0();
    v52(v51);
    v53 = sub_1000BE3A4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
    v54 = v70;
    v55 = (_QWORD *)((char *)v19 + *(int *)(v70 + 24));
    *v55 = v48;
    v55[1] = v50;
    v56 = Date.init()(v53);
    *((_BYTE *)v19 + *(int *)(v54 + 32)) = 1;
    *((_BYTE *)v19 + *(int *)(v54 + 36)) = 2;
    v57 = v69;
    FrameworkRecord.bundleURL.getter(v56);

    sub_1000BE114();
    sub_100014360(v58, v59, v60, v11);
    sub_1000BEE3C((uint64_t)v19);
    sub_1000BE114();
    sub_100014360(v61, v62, v63, v54);
    sub_1000BEF50((uint64_t)v19);
    goto LABEL_7;
  }

  v44 = sub_1000BE9F4();
  v45(v44);
  v33 = &qword_10012AA18;
  v34 = v27;
LABEL_6:
  sub_1000131E0(v34, v33);
  swift_bridgeObjectRelease();
  sub_1000BE8B4();
  sub_100014360(v35, v36, v37, v38);
LABEL_7:
  sub_100013308();
}

uint64_t sub_1000B2604()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  void *v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  sub_100016714();
  sub_1000BE40C();
  sub_1000179E8();
  __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  sub_1000BDB9C(v3, &qword_10012ADF0, LSBundleRecord_ptr);
  v4 = (void *)((uint64_t (*)(_QWORD, _QWORD, uint64_t))static LSBundleRecord.with(bundleIdentifier:allowSystemAppPlaceholder:))(*v0, v0[1], 1);
  v5 = objc_msgSend(v4, "swift_isAppIntentsEnabled");
  v6 = sub_1000BE684();
  sub_1000207A8(v6, v7, v8);
  if (v5)
  {
    v9 = (void *)objc_opt_self(APApplication);
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v9, "applicationWithBundleIdentifier:", v10);

    LODWORD(v10) = objc_msgSend(v11, "isHidden");
    v13 = v10 ^ 1;
  }
  else
  {

    v13 = 0;
  }
  sub_1000BE364(v12, type metadata accessor for LSLinkBundleRecord);
  return v13;
}

uint64_t sub_1000B283C(uint64_t a1, char a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = dword_10012AE84;
  a4;
  v12 = (_QWORD *)swift_task_alloc(v11);
  v4[5] = v12;
  *v12 = v4;
  v12[1] = sub_1000B28D8;
  return sub_1000B14F8(v8, v10, a2);
}

uint64_t sub_1000B28D8()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  sub_1000BE01C();
  v3 = (void *)v2[2];
  v4 = *v1;
  sub_10001010C(v2[5], v5);

  sub_1000117B4();
  v6 = v2[3];
  if (v0)
  {
    v7 = (void *)sub_100072010();
    sub_100010120();
    sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16));

  }
  else
  {
    sub_10001C240();
  }
  sub_100072198();
  return sub_1000188F0(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_1000B294C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return sub_100018C14((uint64_t)sub_1000B295C);
}

uint64_t sub_1000B295C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0[2] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
  v0[3] = v1;
  if (v1)
  {
    sub_1000179D8();
    v2 = (_QWORD *)sub_10003628C();
    v0[4] = v2;
    *v2 = v0;
    v2[1] = sub_1000B2A1C;
    sub_1000BE0D8();
    return sub_1000BDD50();
  }
  else
  {
    objc_opt_self(NSXPCConnection);
    v4 = sub_100019300();
    v5 = sub_10000FE4C((uint64_t)v4, "currentConnection");
    sub_1000BDF2C((uint64_t)v5);
    v6 = (_QWORD *)swift_task_alloc(dword_10012AE64);
    v0[6] = v6;
    *v6 = v0;
    v6[1] = sub_1000B2AC8;
    sub_1000BE278();
    return sub_1000BE2B8(v7, v8, v9, v10, v11, v12);
  }
}

uint64_t sub_1000B2A1C()
{
  uint64_t v0;

  sub_10001DCCC();
  sub_100017C10(*(_QWORD *)(v0 + 32));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000B2A54()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  objc_opt_self(NSXPCConnection);
  v1 = sub_100019300();
  v2 = sub_10000FE4C((uint64_t)v1, "currentConnection");
  sub_1000BDF2C((uint64_t)v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10012AE64);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_1000B2AC8;
  sub_1000BE278();
  return sub_1000BE2B8(v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000B2AC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000143EC();
  sub_100072058(v2);
  *(_QWORD *)(v0 + 56) = v1;
  swift_task_dealloc(v3);
  if (!v1)

  sub_1000167A8();
  return sub_100019418(v4, v5, v6);
}

uint64_t sub_1000B2B1C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a2;
  v3 = type metadata accessor for Logger(0);
  v2[3] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[4] = v4;
  v2[5] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B2B7C, 0, 0);
}

uint64_t sub_1000B2B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10000FE70();
  v3 = qword_100127EC8;
  v4 = *(id *)(v1 + 16);
  if (v3 == -1)
  {
    v5 = v4;
  }
  else
  {
    swift_once(&qword_100127EC8, sub_100099764);
    v5 = *(void **)(v1 + 16);
  }
  sub_1000BEB28();
  v6 = sub_100012A40(v0, (uint64_t)qword_10012D1A8);
  *(_QWORD *)(v1 + 48) = v6;
  sub_100005848(v3, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));

  sub_10000DDEC();
  v7 = sub_1000186A0();
  if (sub_100013670(v7))
  {
    v8 = (_WORD *)sub_100011780(2);
    sub_10001F81C(v8);
    sub_10001EF60((void *)&_mh_execute_header, v9, v10, "Resetting the metadata store");
    sub_1000133FC(v0);
  }
  v11 = *(_QWORD *)(v1 + 32);
  v12 = *(_QWORD *)(v1 + 16);

  sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC10LinkDaemon8Registry_indexingQueue);
  *(_QWORD *)(v1 + 56) = v13;
  return sub_1000BDBBC((uint64_t)sub_1000B2C68, v13, 0);
}

uint64_t sub_1000B2C68()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 56) + 144) = 1;
  return sub_100018C14((uint64_t)sub_1000B2C80);
}

uint64_t sub_1000B2C80()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 16);
  type metadata accessor for MetadataStore(0);
  sub_1000685A4(*(_QWORD *)(v1 + OBJC_IVAR____TtC10LinkDaemon8Registry_store));
  v2 = *(void **)(v0 + 48);
  Logger.logObject.getter(v3);
  v4 = sub_1000186A0();
  if (sub_100013670(v4))
  {
    v5 = (_WORD *)sub_100011780(2);
    sub_10001F81C(v5);
    sub_10001EF60((void *)&_mh_execute_header, v6, v7, "Finished resetting the metadata store");
    sub_1000133FC(0);
  }

  sub_100005878();
  v8 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000BDB54(v8);
}

uint64_t sub_1000B2D38(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012AE5C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000BDA94;
  return sub_1000B294C();
}

uint64_t sub_1000B2D98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = sub_10001F614();
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = sub_1000BDD74(*(_QWORD *)(v3 + 64));
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000B2DE0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0[2] + OBJC_IVAR____TtC10LinkDaemon8Registry_ready);
  v0[6] = v1;
  if (v1)
  {
    sub_1000179D8();
    v2 = (_QWORD *)sub_10003628C();
    v0[7] = v2;
    *v2 = v0;
    v2[1] = sub_1000B2EA8;
    sub_1000BE0D8();
    return sub_1000BDD50();
  }
  else
  {
    sub_1000BEB68();
    sub_1000BF004();
    v0[8] = v4;
    v5 = (_QWORD *)swift_task_alloc(dword_10012AD7C);
    v0[9] = v5;
    *v5 = v0;
    v5[1] = sub_1000B2F64;
    sub_1000167A8();
    return sub_1000BE4F0(v6, v7, v8);
  }
}

uint64_t sub_1000B2EA8()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 56));
  sub_1000073B0();
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000B2EE8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000BEB68();
  sub_1000BF004();
  *(_QWORD *)(v0 + 64) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_10012AD7C);
  *(_QWORD *)(v0 + 72) = v2;
  *v2 = v0;
  v2[1] = sub_1000B2F64;
  sub_1000167A8();
  return sub_100099FA4(v3, v4, v5);
}

uint64_t sub_1000B2F64()
{
  uint64_t v0;

  sub_100017C10(*(_QWORD *)(*(_QWORD *)v0 + 72));
  sub_1000167A8();
  return sub_1000059B8();
}

uint64_t sub_1000B2FA0()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_1000BEB28();
  sub_1000B3FD4();
  sub_1000073B0();
  sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_100005878();
  v1 = (uint64_t (*)(void))sub_1000121E0();
  return sub_1000188F0(v1);
}

uint64_t sub_1000B3024(void *a1, int a2, void *aBlock, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v6 = _Block_copy(aBlock);
  v7 = sub_1000100C8(a4, 32);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = a1;
  v8 = a1;
  v9 = sub_100019430();
  return sub_100004C84(v9, v10);
}

uint64_t sub_1000B3078(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10012AE44;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000B30D8;
  return sub_1000B2D98();
}

uint64_t sub_1000B30D8()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  sub_1000BE01C();
  v3 = (void *)v2[2];
  v4 = *v1;
  sub_10001010C(v2[4], v5);

  v6 = v2[3];
  if (v0)
  {
    v7 = (void *)sub_100072010();
    sub_100010120();
    sub_1000BDB30(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16));

  }
  else
  {
    sub_10001C240();
  }
  sub_100072198();
  return sub_1000188F0(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_1000B3148(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100018C14((uint64_t)sub_1000B315C);
}

uint64_t sub_1000B315C()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t **v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = (void *)v0[4];
  _StringGuts.grow(_:)(25);
  v10 = sub_1000BEDF0(v2, v3, v4, v5, v6, v7, v8, v9, v23, 0, 0xE000000000000000);
  sub_10001E538(v10, v11, v12, v13, v14, v15, v16, v17, v24, v25, v27);
  sub_1000BDF40();
  v0[5] = v28;
  objc_opt_self(NSXPCConnection);
  v18 = v1;
  v19 = sub_10000EC68();
  v20 = sub_10001771C(v19, "currentConnection");
  v0[6] = (uint64_t)v20;
  v21 = (uint64_t **)swift_task_alloc(dword_10012AE1C);
  v0[7] = (uint64_t)v21;
  *v21 = v0;
  v21[1] = (uint64_t *)sub_1000B3240;
  return sub_1000A4C78((uint64_t)v21, (uint64_t)v20, v26, v28, v0[4], v0[4], v0[2], v0[3]);
}

uint64_t sub_1000B3240()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000143EC();
  sub_100072058(v2);
  *(_QWORD *)(v0 + 64) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {

    sub_1000059A8();
  }
  sub_1000167A8();
  return sub_100019418(v4, v5, v6);
}

uint64_t sub_1000B3298()
{
  uint64_t v0;

  sub_1000059A8();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B32C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = a4;
  v4[10] = a2;
  return swift_task_switch(sub_1000B32E4, 0, 0);
}

uint64_t sub_1000B32E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v4 = sub_1000100C8(v3, 48);
  *(_QWORD *)(v0 + 104) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v1;
  *(_BYTE *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 40) = xmmword_1000F0B70;
  *(_BYTE *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  v5 = dword_10012AA5C;
  sub_10000EC68();
  v6 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 112) = v6;
  *v6 = v0;
  v6[1] = sub_1000B33A0;
  v7 = sub_1000BE3AC();
  return sub_10009DA20(v7, v8);
}

uint64_t sub_1000B33A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_10006B194();
  sub_100072058(v2);
  *(_QWORD *)(v1 + 120) = v3;
  *(_QWORD *)(v1 + 128) = v0;
  swift_task_dealloc(v4);
  if (!v0)
  {
    swift_bridgeObjectRelease();
    sub_1000059A8();
    sub_1000BDFA8();
    sub_1000117B4();
  }
  sub_1000167A8();
  return sub_100011788();
}

uint64_t sub_1000B340C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t v42;

  sub_10001A498();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  v29 = *(_QWORD *)(*(_QWORD *)(v26 + 80) + OBJC_IVAR____TtC10LinkDaemon8Registry_observers);
  v30 = *(_QWORD *)(v26 + 120);
  v41 = *(_QWORD *)(v29 + 16);
  if (v41)
  {
    v31 = *(_QWORD *)(v30 + 16);
    result = sub_10000C030();
    v33 = 0;
    while (v33 < *(_QWORD *)(v29 + 16))
    {
      sub_1000BE71C((_QWORD *)(v29 + 32 + 40 * v33));
      sub_1000101B0();
      v34 = Set.init(minimumCapacity:)(v31, type metadata for String, &protocol witness table for String);
      v42 = v34;
      v35 = (uint64_t *)(v30 + 40);
      v36 = v31;
      if (v31)
      {
        do
        {
          v37 = *(v35 - 1);
          v38 = *v35;
          sub_10001A83C();
          sub_10001161C(&a14, v37, v38);
          swift_bridgeObjectRelease();
          v35 += 2;
          --v36;
        }
        while (v36);
        sub_1000BEAD8();
        v39 = v42;
      }
      else
      {
        v39 = v34;
        sub_1000BEAD8();
      }
      ++v33;
      sub_10006FEA4((uint64_t)&_swiftEmptySetSingleton, v39);
      result = sub_100007398();
      if (v33 == v41)
      {
        sub_1000BEAD8();
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    sub_1000059C4();
    v40 = (uint64_t (*)(void))sub_1000121E0();
    return sub_1000BDABC(v40);
  }
  return result;
}

uint64_t sub_1000B353C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1000059A8();
  sub_1000BDFA8();
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000B358C(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_10012AE14;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000BDA44;
  return sub_1000B3148(v6, v8);
}

_UNKNOWN **sub_1000B3618()
{
  _UNKNOWN **result;

  result = sub_1000B3634();
  qword_10012D1E0 = (uint64_t)result;
  return result;
}

_UNKNOWN **sub_1000B3634()
{
  sub_100058E94();
  return &off_10011A180;
}

double sub_1000B3674()
{
  double result;

  if (qword_100127EE0 != -1)
    swift_once(&qword_100127EE0, sub_1000B3618);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void sub_1000B36B4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[4];
  char v48;
  void (*v49)();
  uint64_t v50;

  sub_1000100A8();
  v43 = v5;
  v44 = v4;
  v7 = v6;
  v9 = v8;
  v10 = sub_10000C05C();
  sub_1000BE7A8();
  __chkstk_darwin(v11);
  sub_1000BE1A0();
  sub_1000BE308();
  __chkstk_darwin(v12);
  sub_1000090A4();
  sub_1000BE3AC();
  sub_100097080();
  v14 = v13;
  sub_1000BE3A4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v15 = qword_100127EC8;
  v16 = v0;
  if (v15 != -1)
    swift_once(&qword_100127EC8, sub_100099764);
  v17 = sub_100012A40(v10, (uint64_t)qword_10012D1A8);
  sub_1000BE58C(v17);

  v18 = sub_1000101EC(v9);
  Logger.logObject.getter(v18);
  v19 = sub_1000BE8F8();
  if (sub_10001F550(v19))
  {
    v37 = v19;
    v39 = v15;
    v40 = v0;
    v41 = v3;
    v42 = v10;
    v20 = (uint8_t *)sub_100011780(12);
    v36 = sub_100011780(32);
    v45 = v36;
    v38 = v20;
    *(_DWORD *)v20 = 136315138;
    v21 = *(_QWORD *)(v9 + 16);
    if (v21)
    {
      sub_1000BE490();
      v22 = v9 + 40;
      do
      {
        v46 = 34;
        v47[0] = 0xE100000000000000;
        sub_10000C020();
        v23._countAndFlagsBits = sub_1000BE9E0();
        String.append(_:)(v23);
        sub_1000BDF40();
        sub_1000059B0();
        v24 = _swiftEmptyArrayStorage[2];
        if (v24 >= _swiftEmptyArrayStorage[3] >> 1)
          sub_1000BE63C();
        v22 += 16;
        _swiftEmptyArrayStorage[2] = v24 + 1;
        v25 = &_swiftEmptyArrayStorage[2 * v24];
        v25[4] = 34;
        v25[5] = 0xE100000000000000;
        --v21;
      }
      while (v21);
      v27 = v43;
      v26 = v44;
    }
    else
    {
      v27 = v43;
      v26 = v44;
    }
    v46 = (uint64_t)_swiftEmptyArrayStorage;
    v28 = sub_1000BF010();
    sub_1000BEE48((unint64_t *)&qword_100129568);
    v30 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v28, v29);
    sub_1000100D0();
    v46 = sub_1000BEA48(v30, v31, &v45);
    sub_10001B364((uint64_t)&v46, (uint64_t)v47);
    sub_10001A0B8();
    sub_100007398();
    sub_1000100C0((void *)&_mh_execute_header, v39, v37, "Detected uninstalled bundle(s): %s", v38);
    sub_100013320(v36);
    sub_1000133FC(v36);
    sub_1000133FC((uint64_t)v38);

    (*(void (**)(void *, uint64_t))(v41 + 8))(v40, v42);
  }
  else
  {

    sub_10001A0B8();
    sub_1000BE998();
    v27 = v43;
    v26 = v44;
  }
  if (v27)
    os_transaction_needs_more_time(v27);
  LOBYTE(v46) = 0;
  v47[0] = _swiftEmptyArrayStorage;
  v47[1] = v9;
  v47[2] = v7;
  v47[3] = v26;
  v48 = 0;
  v49 = sub_1000BB864;
  v50 = v14;
  sub_1000100E0();
  swift_retain();
  v32 = sub_1000BE644();
  sub_10001EBF8(v32, v33);
  sub_10009CD74((uint64_t)&v46);
  sub_10000C028();
  sub_1000117B4();
  v34 = sub_1000BE644();
  sub_1000BE85C(v34, v35);
  sub_100013308();
}

void sub_1000B3A20()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  Swift::String v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  NSObject *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[2];
  uint64_t v43;
  unint64_t v44;
  char v45;
  void (*v46)();
  uint64_t v47;

  sub_1000100A8();
  v39 = v4;
  v40 = v5;
  v7 = v6;
  v9 = v8;
  v10 = sub_10000C05C();
  sub_1000BE7A8();
  __chkstk_darwin(v11);
  sub_1000BE1A0();
  sub_1000BE308();
  __chkstk_darwin(v12);
  sub_1000090A4();
  sub_100097080();
  v14 = v13;
  sub_1000BE3A4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v15 = qword_100127EC8;
  v16 = v0;
  if (v15 != -1)
    swift_once(&qword_100127EC8, sub_100099764);
  v17 = sub_100012A40(v10, (uint64_t)qword_10012D1A8);
  sub_1000BE58C(v17);

  v18 = sub_1000101EC(v9);
  Logger.logObject.getter(v18);
  v19 = sub_1000BE8F8();
  if (sub_10001F550(v19))
  {
    v35 = v19;
    v37 = v15;
    v38 = v3;
    v20 = (uint8_t *)sub_100011780(12);
    v34 = sub_100011780(32);
    v36 = v20;
    *(_DWORD *)v20 = 136315138;
    v21 = *(_QWORD *)(v9 + 16);
    if (v21)
    {
      sub_1000BE490();
      v22 = v9 + 32;
      do
      {
        sub_100019A60(v22, (uint64_t)&v41);
        sub_10000E858(&v41, v43);
        v23 = sub_1000BF0C4();
        v25._countAndFlagsBits = v24(v23);
        String.append(_:)(v25);
        sub_1000059C4();
        sub_1000BDF40();
        sub_10000E87C(&v41);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_1000BE63C();
        v26 = _swiftEmptyArrayStorage[2];
        if (v26 >= _swiftEmptyArrayStorage[3] >> 1)
          sub_1000BE63C();
        _swiftEmptyArrayStorage[2] = v26 + 1;
        v27 = &_swiftEmptyArrayStorage[2 * v26];
        v27[4] = 34;
        v27[5] = 0xE100000000000000;
        v22 += 40;
        --v21;
      }
      while (v21);
      v28 = v39;
    }
    else
    {
      v28 = v39;
    }
    v41 = _swiftEmptyArrayStorage;
    v29 = sub_1000BF010();
    sub_1000BEE48((unint64_t *)&qword_100129568);
    BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v29, v30);
    sub_100007398();
    v31 = sub_1000BE3E8();
    v41 = (_QWORD *)sub_10000FBEC(v31, v32, v33);
    sub_10001B364((uint64_t)&v41, (uint64_t)v42);
    sub_10001A0B8();
    sub_1000100D0();
    sub_1000100C0((void *)&_mh_execute_header, v37, v35, "App Intents enabled bundle(s) installed: %s", v36);
    sub_100013320(v34);
    sub_1000133FC(v34);
    sub_1000133FC((uint64_t)v36);

    (*(void (**)(void *, uint64_t))(v38 + 8))(v0, v10);
  }
  else
  {

    sub_10001A0B8();
    sub_1000BE998();
    v28 = v39;
  }
  if (v40)
    os_transaction_needs_more_time(v40);
  LOBYTE(v41) = 0;
  v42[0] = v9;
  v42[1] = _swiftEmptyArrayStorage;
  v43 = v7;
  v44 = v28;
  v45 = 0;
  v46 = sub_1000BB828;
  v47 = v14;
  sub_1000100E0();
  swift_retain();
  sub_10001EBF8(v7, v28);
  sub_10009CD74((uint64_t)&v41);
  sub_1000117B4();
  sub_10000C028();
  sub_1000BE85C(v7, v28);
  sub_100013308();
}

void sub_1000B3DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  os_signpost_id_t v18;
  os_signpost_type_t v19;
  const char *v20;
  uint64_t v21;

  sub_1000100A8();
  v5 = v4;
  v6 = type metadata accessor for OSSignpostError(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = sub_1000BDCA4();
  v21 = *(_QWORD *)(type metadata accessor for OSSignpostID(v8) - 8);
  sub_100013E18();
  __chkstk_darwin(v9);
  sub_10001F61C();
  sub_1000BEECC();
  __chkstk_darwin(v10);
  sub_10001F350();
  if (qword_100127FC0 != -1)
    swift_once(&qword_100127FC0, sub_1000C8D98);
  v11 = sub_100012A40(v1, (uint64_t)qword_10012D5F8);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v2, v11, v1);
  v20 = off_10011E070[v5];
  v13 = OSSignposter.logHandle.getter(v12);
  v14 = OSSignpostIntervalState.signpostID.getter();
  v19 = static os_signpost_type_t.end.getter(v14);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v15 = swift_retain();
    checkForErrorAndConsumeState(state:)(v15);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v3, v6) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v16 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
      v16 = "";
    }
    v17 = (uint8_t *)sub_100011780(2);
    v18 = sub_1000110F0(v17);
    sub_1000BE8D8((void *)&_mh_execute_header, v13, v19, v18, v20, v16, v17);
    sub_1000133FC((uint64_t)v17);
  }

  sub_1000BEDF8(v21);
  sub_1000BE6C4();
  sub_100013308();
}

void sub_1000B3FB0()
{
  sub_1000B3FD4();
}

void sub_1000B3FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  NSObject *v19;
  uint64_t v20;
  os_signpost_type_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  os_signpost_id_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_1000100A8();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  type metadata accessor for OSSignpostError(0);
  sub_1000BEECC();
  __chkstk_darwin(v13);
  sub_10001F350();
  v26 = *(_QWORD *)(sub_10001F614() - 8);
  sub_100013E18();
  __chkstk_darwin(v14);
  if (*v10 != -1)
    swift_once(v10, v4);
  v15 = type metadata accessor for OSSignposter(0);
  sub_100012A40(v15, v8);
  v16 = v6(v12);
  v18 = v17;
  v19 = OSSignposter.logHandle.getter(v16);
  v20 = OSSignpostIntervalState.signpostID.getter();
  v21 = static os_signpost_type_t.end.getter(v20);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    goto LABEL_15;
  if ((v18 & 1) == 0)
  {
    if (v16)
    {
LABEL_11:
      v22 = swift_retain();
      checkForErrorAndConsumeState(state:)(v22);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v0 + 88))(v2, v1) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v23 = "[Error] Interval already ended";
      }
      else
      {
        sub_1000BE6C4();
        v23 = "";
      }
      v24 = (uint8_t *)sub_100011780(2);
      v25 = sub_1000110F0(v24);
      sub_1000BE8D8((void *)&_mh_execute_header, v19, v21, v25, (const char *)v16, v23, v24);
      sub_1000133FC((uint64_t)v24);
LABEL_15:

      sub_1000BEDF8(v26);
      sub_100013308();
      return;
    }
    __break(1u);
  }
  if (HIDWORD(v16))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v16 >> 11 != 27)
  {
    if (WORD1(v16) <= 0x10u)
    {
      v16 = (unint64_t)&v27;
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
}

double sub_1000B41A0()
{
  return sub_1000B3674();
}

uint64_t sub_1000B41B4(_QWORD *a1, uint64_t a2)
{
  void **v2;
  void *v4;
  _QWORD *v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;

  v4 = *v2;
  v5 = sub_10000E858(a1, a1[3]);
  v6 = *((_OWORD *)v5 + 1);
  v8[0] = *(_OWORD *)v5;
  v8[1] = v6;
  v9 = v5[4];
  return sub_1000BA518((uint64_t *)v8, a2, v4);
}

void sub_1000B4204(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100019FA0(v2 + *(int *)(a1 + 20), a2, &qword_100128740);
}

uint64_t sub_1000B422C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 24);
  v3 = *(_QWORD *)v2;
  sub_10001EBF8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t sub_1000B4264()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v16;
  _QWORD v17[2];

  v0 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (!v0)
    __break(1u);
  v1 = v0;
  v16 = 0;
  v17[0] = 0;
  objc_msgSend(v0, "getKnowledgeUUID:andSequenceNumber:", v17, &v16);

  v2 = v16;
  v3 = (void *)v17[0];
  if (v17[0])
  {
    v4 = v16;
    v5 = v3;
    v6 = sub_1000B43B0();
    v8 = v7;

  }
  else
  {
    v10 = type metadata accessor for __DataStorage(0);
    sub_1000BE558(v10);
    sub_100019300();
    v9 = __DataStorage.init(length:)(16);
    v8 = v9 | 0x4000000000000000;
    v6 = 0x1000000000;
  }
  v17[0] = v6;
  v17[1] = v8;
  if (v2)
    v11 = sub_10001AA38(v9, "unsignedLongLongValue");
  else
    v11 = 0;
  v16 = v11;
  v12 = sub_1000B77F0((uint64_t)&v16, (uint64_t)v17);
  v14 = v13;
  Data.append(_:)();
  sub_10001EA88(v12, v14);

  return v17[0];
}

uint64_t sub_1000B43B0()
{
  void *v0;
  _QWORD *v1;

  v1 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(16, &type metadata for UInt8);
  v1[2] = 16;
  v1[5] = 0;
  v1[4] = 0;
  objc_msgSend(v0, "getUUIDBytes:", v1 + 4);
  return sub_1000B7750((uint64_t)v1);
}

void sub_1000B440C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  char v79;
  char v80;
  _QWORD *v81;
  uint64_t v82;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t i;
  id v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t j;
  id v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  id v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  void *v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  char v170;
  char v171;
  _QWORD *v172;
  uint64_t v173;
  char v174;
  unint64_t v175;
  uint64_t v176;
  double v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  id v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  BOOL v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  BOOL v206;
  char v207;
  char v208;
  _QWORD *v209;
  uint64_t v210;
  char v211;
  unint64_t v212;
  uint64_t v213;
  double v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  id v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  id v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  BOOL v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  BOOL v261;
  char v262;
  char v263;
  _QWORD *v264;
  uint64_t v265;
  char v266;
  unint64_t v267;
  uint64_t v268;
  double v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  _QWORD *v298;
  id v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  _UNKNOWN **v305;
  _BYTE v306[24];
  _QWORD v307[3];
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _UNKNOWN **v311;
  uint64_t v312;

  v296 = a4;
  v290 = a3;
  v6 = sub_10001BE7C(&qword_10012ADC8);
  __chkstk_darwin(v6);
  v293 = (char *)&v282 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v297 = (char *)&v282 - v9;
  v10 = sub_10001BE7C(&qword_10012ADD0);
  __chkstk_darwin(v10);
  v287 = (char *)&v282 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v285 = (char *)&v282 - v13;
  __chkstk_darwin(v14);
  v292 = (char *)&v282 - v15;
  __chkstk_darwin(v16);
  v295 = (uint64_t)&v282 - v17;
  v302 = type metadata accessor for LSLinkBundleRecord(0);
  __chkstk_darwin(v302);
  v286 = (uint64_t)&v282 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v284 = (uint64_t)&v282 - v20;
  __chkstk_darwin(v21);
  v291 = (uint64_t)&v282 - v22;
  v24 = __chkstk_darwin(v23);
  v294 = (uint64_t)&v282 - v25;
  type metadata accessor for DaemonRecord(0, v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = swift_retain();
  v27 = static DaemonRecord.enumerated.getter(v26);
  sub_10000DE64(0, &qword_10012ADD8, LSApplicationExtensionRecord_ptr);
  v28 = static LSApplicationExtensionRecord.enumeratedStandaloneAppIntentsExtensions.getter();
  v299 = objc_msgSend((id)objc_opt_self(LSApplicationRecord), "enumeratorWithOptions:", 0);
  v289 = (_QWORD *)(a4 + 16);
  v298 = a2;
  v282 = (uint64_t)(a2 + 7);
  do
  {
    v29 = objc_autoreleasePoolPush();
    v30 = objc_msgSend(v299, "nextObject");
    v31 = v30;
    if (!v30)
      goto LABEL_72;
    v312 = v28;
    v309 = (uint64_t)_swiftEmptyArrayStorage;
    v301 = (uint64_t)v29;
    v32 = v30;
    if ((unint64_t)v27 >> 62)
    {
      if (v27 < 0)
        v92 = v27;
      else
        v92 = v27 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v28 = _CocoaArrayWrapper.endIndex.getter(v92);
      if (v28)
      {
LABEL_5:
        if (v28 < 1)
        {
          __break(1u);
          goto LABEL_264;
        }
        v33 = 0;
        v34 = v27 & 0xC000000000000001;
        v35 = v27;
        while (2)
        {
          if (v34)
            v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v27);
          else
            v36 = *(id *)(v27 + 8 * v33 + 32);
          v37 = v36;
          v38 = DaemonRecord.attributionBundleIdentifier.getter();
          v40 = v39;
          v41 = sub_1000B9994(v32, (SEL *)&selRef_bundleIdentifier);
          if (v40)
          {
            if (v42)
            {
              if (v38 == v41 && v40 == v42)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_23:
                ++v33;
                v27 = v35;
                if (v28 == v33)
                  goto LABEL_24;
                continue;
              }
              v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, v41, v42, 0);
              swift_bridgeObjectRelease();
              v45 = swift_bridgeObjectRelease();
              if ((v44 & 1) == 0)
              {
LABEL_21:
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v45);
                v46 = *(_QWORD *)(v309 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
                v47 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v37);
                specialized ContiguousArray._endMutation()(v47);
                goto LABEL_23;
              }
LABEL_19:

              goto LABEL_23;
            }
          }
          else if (!v42)
          {
            goto LABEL_19;
          }
          break;
        }
        v45 = swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    else
    {
      v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v28)
        goto LABEL_5;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    v300 = (_QWORD *)v309;
    swift_bridgeObjectRelease();
    v309 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v312 >> 62)
    {
      if (v312 < 0)
        v93 = v312;
      else
        v93 = v312 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v28 = _CocoaArrayWrapper.endIndex.getter(v93);
    }
    else
    {
      v28 = *(_QWORD *)((v312 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v31 = v32;
    v48 = v312;
    if (v28)
    {
      if (v28 >= 1)
      {
        v49 = 0;
        while (1)
        {
          if ((v48 & 0xC000000000000001) != 0)
            v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v49, v48);
          else
            v50 = *(id *)(v48 + 8 * v49 + 32);
          v51 = v50;
          v52 = LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
          v54 = v53;
          v55 = sub_1000B9994(v31, (SEL *)&selRef_bundleIdentifier);
          if (v54)
          {
            if (!v56)
              goto LABEL_42;
            if (v52 == v55 && v54 == v56)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_45;
            }
            v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v54, v55, v56, 0);
            swift_bridgeObjectRelease();
            v59 = swift_bridgeObjectRelease();
            if ((v58 & 1) == 0)
              goto LABEL_43;
          }
          else if (v56)
          {
LABEL_42:
            v59 = swift_bridgeObjectRelease();
LABEL_43:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v59);
            v60 = *(_QWORD *)(v309 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v60);
            v61 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v51);
            specialized ContiguousArray._endMutation()(v61);
            goto LABEL_45;
          }

LABEL_45:
          if (v28 == ++v49)
            goto LABEL_46;
        }
      }
LABEL_264:
      __break(1u);
LABEL_265:
      __break(1u);
      goto LABEL_266;
    }
LABEL_46:
    v27 = (uint64_t)v300;
    swift_bridgeObjectRelease();
    v28 = v309;
    swift_bridgeObjectRelease();
    v62 = v31;
    v63 = v295;
    sub_100097F34();
    v64 = v302;
    if (sub_10001C93C(v63, 1, v302) != 1)
    {
      v65 = v31;
      v66 = v28;
      v312 = v27;
      v67 = v294;
      sub_1000BB03C(v63, v294, type metadata accessor for LSLinkBundleRecord);
      v310 = v64;
      v311 = &off_10011DFB0;
      v68 = sub_10001795C(&v309);
      sub_1000207A8(v67, (uint64_t)v68, type metadata accessor for LSLinkBundleRecord);
      v70 = *v68;
      v69 = v68[1];
      v71 = v298[2];
      if (v71)
      {
        v72 = v298[4];
        v73 = v298[5];
        v74 = v72 == v70 && v73 == v69;
        if (v74 || (_stringCompareWithSmolCheck(_:_:expecting:)(v72, v73, v70, v69, 0) & 1) != 0)
          goto LABEL_64;
        if (v71 != 1)
        {
          v27 = v282;
          v75 = 1;
          do
          {
            v28 = v75 + 1;
            if (__OFADD__(v75, 1))
              goto LABEL_265;
            v76 = *(_QWORD *)(v27 - 8);
            v77 = *(_QWORD *)v27;
            v78 = v76 == v70 && v77 == v69;
            if (v78 || (_stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, v70, v69, 0) & 1) != 0)
              goto LABEL_64;
            v27 += 16;
            ++v75;
          }
          while (v28 != v71);
        }
      }
      swift_bridgeObjectRetain();
      sub_10002ECDC(v70, v69, v290);
      v80 = v79;
      swift_bridgeObjectRelease();
      if ((v80 & 1) == 0)
      {
        sub_100019A60((uint64_t)&v309, (uint64_t)v307);
        v81 = v289;
        swift_beginAccess(v289, v306, 33, 0);
        v82 = *v81;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v81);
        *v81 = v82;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10002FA78();
          v82 = v94;
          *v289 = v94;
        }
        v28 = v66;
        v84 = *(_QWORD *)(v82 + 16);
        v31 = v65;
        if (v84 >= *(_QWORD *)(v82 + 24) >> 1)
        {
          sub_10002FA78();
          *v289 = v95;
        }
        v85 = sub_100016184((uint64_t)v307, v308);
        v86 = __chkstk_darwin(v85);
        v88 = (char *)&v282 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v89 + 16))(v88, v86);
        v304 = v302;
        v305 = &off_10011DFB0;
        v90 = sub_10001795C(&v303);
        sub_1000BB03C((uint64_t)v88, (uint64_t)v90, type metadata accessor for LSLinkBundleRecord);
        v91 = *v289;
        *(_QWORD *)(v91 + 16) = v84 + 1;
        sub_100019A48(&v303, v91 + 40 * v84 + 32);
        sub_10000E87C(v307);
        swift_endAccess(v306);

        goto LABEL_70;
      }
LABEL_64:

      v28 = v66;
      v31 = v65;
LABEL_70:
      sub_10001DBC8(v294, type metadata accessor for LSLinkBundleRecord);
      sub_10000E87C(&v309);
      v27 = v312;
      goto LABEL_71;
    }

    sub_1000131E0(v63, &qword_10012ADD0);
LABEL_71:
    v29 = (void *)v301;
LABEL_72:
    objc_autoreleasePoolPop(v29);
  }
  while (v31);
  v309 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v28 >> 62)
    goto LABEL_272;
  v96 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v301 = v96;
    if (v96)
      break;
LABEL_95:
    swift_bridgeObjectRelease();
    v105 = v309;
    if (v309 < 0 || (v309 & 0x4000000000000000) != 0)
    {
      v279 = swift_retain();
      v106 = _CocoaArrayWrapper.endIndex.getter(v279);
    }
    else
    {
      v106 = *(_QWORD *)(v309 + 16);
      swift_retain();
    }
    v107 = _swiftEmptyArrayStorage;
    v312 = v27;
    v288 = v28;
    if (v106)
    {
      if (v106 < 1)
        goto LABEL_283;
      for (i = 0; i != v106; ++i)
      {
        if ((v105 & 0xC000000000000001) != 0)
          v109 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v105);
        else
          v109 = *(id *)(v105 + 8 * i + 32);
        v110 = v109;
        v111 = LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
        v113 = v112;

        if (v113)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0)
          {
            sub_10001B71C();
            v107 = v116;
          }
          v114 = v107[2];
          if (v114 >= v107[3] >> 1)
          {
            sub_10001B71C();
            v107 = v117;
          }
          v107[2] = v114 + 1;
          v115 = &v107[2 * v114];
          v115[4] = v111;
          v115[5] = v113;
        }
        v27 = v312;
      }
    }
    swift_release_n(v105, 2);
    v118 = sub_100011574((uint64_t)v107);
    v309 = (uint64_t)_swiftEmptyArrayStorage;
    v295 = v118;
    if ((unint64_t)v27 >> 62)
    {
      if (v27 < 0)
        v280 = v27;
      else
        v280 = v27 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v119 = _CocoaArrayWrapper.endIndex.getter(v280);
    }
    else
    {
      v119 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v28 = v296;
    if (v119)
    {
      if (v119 < 1)
        goto LABEL_284;
      for (j = 0; j != v119; ++j)
      {
        if ((v27 & 0xC000000000000001) != 0)
          v121 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v27);
        else
          v121 = *(id *)(v27 + 8 * j + 32);
        v122 = v121;
        DaemonRecord.attributionBundleIdentifier.getter();
        v124 = v123;
        v125 = swift_bridgeObjectRelease();
        if (v124)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v125);
          v126 = *(_QWORD *)(v309 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v126);
          v127 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v126, v122);
          specialized ContiguousArray._endMutation()(v127);
        }
        else
        {

        }
      }
    }
    swift_bridgeObjectRelease();
    v128 = v309;
    if (v309 < 0 || (v309 & 0x4000000000000000) != 0)
    {
      v281 = swift_retain();
      v129 = _CocoaArrayWrapper.endIndex.getter(v281);
    }
    else
    {
      v129 = *(_QWORD *)(v309 + 16);
      swift_retain();
    }
    v300 = (_QWORD *)v119;
    if (v129)
    {
      if (v129 < 1)
        goto LABEL_285;
      v130 = 0;
      v131 = _swiftEmptyArrayStorage;
      do
      {
        if ((v128 & 0xC000000000000001) != 0)
          v132 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v130, v128);
        else
          v132 = *(id *)(v128 + 8 * v130 + 32);
        v133 = v132;
        v134 = DaemonRecord.attributionBundleIdentifier.getter();
        v136 = v135;

        if (v136)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v131) & 1) == 0)
          {
            sub_10001B71C();
            v131 = v139;
          }
          v137 = v131[2];
          if (v137 >= v131[3] >> 1)
          {
            sub_10001B71C();
            v131 = v140;
          }
          v131[2] = v137 + 1;
          v138 = &v131[2 * v137];
          v138[4] = v134;
          v138[5] = v136;
          v28 = v296;
        }
        ++v130;
      }
      while (v129 != v130);
    }
    else
    {
      v131 = _swiftEmptyArrayStorage;
    }
    swift_release_n(v128, 2);
    v141 = sub_100011574((uint64_t)v131);
    v142 = sub_10006B9B8(v141, v295);
    v143 = (uint64_t)v298;
    swift_bridgeObjectRetain();
    v144 = v290;
    swift_bridgeObjectRetain();
    swift_retain();
    v145 = v283;
    sub_1000971EC(v142, v143, v144, v28);
    if (v145)
    {
      swift_release_n(v28, 2);
      swift_bridgeObjectRelease_n(v144, 2);
      swift_bridgeObjectRelease_n(v143, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v283 = 0;
    swift_bridgeObjectRelease();
    v146 = (uint64_t)v297;
    v27 = v312;
    if (v301)
    {
      v147 = v288 & 0xC000000000000001;
      v148 = v288 + 32;
      swift_bridgeObjectRetain();
      v149 = 0;
      v294 = v143 + 56;
      v295 = v148;
      while (1)
      {
        if (v147)
          v150 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v149, v288);
        else
          v150 = *(id *)(v148 + 8 * v149);
        v151 = v150;
        v152 = __OFADD__(v149++, 1);
        if (v152)
        {
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
          goto LABEL_270;
        }
        LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
        v154 = v153;
        swift_bridgeObjectRelease();
        if (v154)
        {

        }
        else
        {
          v155 = v151;
          v156 = (uint64_t)v287;
          sub_100097F34();
          v157 = v302;
          if (sub_10001C93C(v156, 1, v302) != 1)
          {
            v158 = v286;
            sub_1000BB03C(v156, v286, type metadata accessor for LSLinkBundleRecord);
            v310 = v157;
            v311 = &off_10011DFB0;
            v159 = sub_10001795C(&v309);
            sub_1000207A8(v158, (uint64_t)v159, type metadata accessor for LSLinkBundleRecord);
            v160 = *v159;
            v27 = v159[1];
            v161 = *(_QWORD *)(v143 + 16);
            if (!v161)
              goto LABEL_168;
            v162 = v298[4];
            v163 = v298[5];
            v164 = v162 == v160 && v163 == v27;
            if (!v164 && (_stringCompareWithSmolCheck(_:_:expecting:)(v162, v163, v160, v27, 0) & 1) == 0)
            {
              if (v161 != 1)
              {
                v28 = v294;
                v165 = 1;
                while (1)
                {
                  v166 = v165 + 1;
                  if (__OFADD__(v165, 1))
                    break;
                  v167 = *(_QWORD *)(v28 - 8);
                  v168 = *(_QWORD *)v28;
                  v169 = v167 == v160 && v168 == v27;
                  if (v169 || (_stringCompareWithSmolCheck(_:_:expecting:)(v167, v168, v160, v27, 0) & 1) != 0)
                    goto LABEL_174;
                  v28 += 16;
                  ++v165;
                  if (v166 == v161)
                    goto LABEL_168;
                }
LABEL_270:
                __break(1u);
                goto LABEL_271;
              }
LABEL_168:
              swift_bridgeObjectRetain();
              sub_10002ECDC(v160, v27, v290);
              v171 = v170;
              swift_bridgeObjectRelease();
              if ((v171 & 1) == 0)
              {
                sub_100019A60((uint64_t)&v309, (uint64_t)v307);
                v172 = v289;
                swift_beginAccess(v289, v306, 33, 0);
                v173 = *v172;
                v174 = swift_isUniquelyReferenced_nonNull_native(*v172);
                *v172 = v173;
                if ((v174 & 1) == 0)
                {
                  sub_10002FA78();
                  v173 = v183;
                  *v289 = v183;
                }
                v175 = *(_QWORD *)(v173 + 16);
                if (v175 >= *(_QWORD *)(v173 + 24) >> 1)
                {
                  sub_10002FA78();
                  *v289 = v184;
                }
                v176 = sub_100016184((uint64_t)v307, v308);
                v177 = __chkstk_darwin(v176);
                v179 = (char *)&v282 - ((v178 + 15) & 0xFFFFFFFFFFFFFFF0);
                (*(void (**)(char *, double))(v180 + 16))(v179, v177);
                v304 = v302;
                v305 = &off_10011DFB0;
                v181 = sub_10001795C(&v303);
                sub_1000BB03C((uint64_t)v179, (uint64_t)v181, type metadata accessor for LSLinkBundleRecord);
                v182 = *v289;
                *(_QWORD *)(v182 + 16) = v175 + 1;
                sub_100019A48(&v303, v182 + 40 * v175 + 32);
                sub_10000E87C(v307);
                swift_endAccess(v306);
              }
            }
LABEL_174:
            sub_10001DBC8(v286, type metadata accessor for LSLinkBundleRecord);

            sub_10000E87C(&v309);
            v143 = (uint64_t)v298;
            v28 = v296;
            v27 = v312;
            v148 = v295;
            goto LABEL_175;
          }

          sub_1000131E0(v156, &qword_10012ADD0);
        }
LABEL_175:
        v146 = (uint64_t)v297;
        if (v149 == v301)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    v185 = v300;
    if (!v300)
    {
LABEL_212:
      type metadata accessor for FrameworkRecord(0);
      v222 = static FrameworkRecord.enumerated.getter();
      v301 = 0;
      v223 = *(_QWORD *)(v222 + 64);
      v294 = v222 + 64;
      v300 = (_QWORD *)v222;
      v224 = 1 << *(_BYTE *)(v222 + 32);
      v225 = -1;
      if (v224 < 64)
        v225 = ~(-1 << v224);
      v27 = v225 & v223;
      v295 = (unint64_t)(v224 + 63) >> 6;
      v286 = v295 - 1;
      v226 = &qword_10012ADC8;
      v287 = (char *)(v143 + 56);
      v227 = (uint64_t)v293;
      if ((v225 & v223) != 0)
      {
LABEL_215:
        v228 = __clz(__rbit64(v27));
        v27 &= v27 - 1;
        v229 = v228 | (v301 << 6);
        goto LABEL_216;
      }
      while (2)
      {
        v238 = v301 + 1;
        if (__OFADD__(v301, 1))
          goto LABEL_269;
        if (v238 < v295)
        {
          v239 = *(_QWORD *)(v294 + 8 * v238);
          if (v239)
            goto LABEL_220;
          v240 = v301 + 2;
          ++v301;
          if (v238 + 1 < v295)
          {
            v239 = *(_QWORD *)(v294 + 8 * v240);
            if (v239)
              goto LABEL_223;
            v301 = v238 + 1;
            if (v238 + 2 < v295)
            {
              v239 = *(_QWORD *)(v294 + 8 * (v238 + 2));
              if (v239)
              {
                v238 += 2;
                goto LABEL_220;
              }
              v240 = v238 + 3;
              v301 = v238 + 2;
              if (v238 + 3 < v295)
              {
                v239 = *(_QWORD *)(v294 + 8 * v240);
                if (!v239)
                {
                  while (1)
                  {
                    v238 = v240 + 1;
                    if (__OFADD__(v240, 1))
                      goto LABEL_286;
                    if (v238 >= v295)
                    {
                      v301 = v286;
                      goto LABEL_234;
                    }
                    v239 = *(_QWORD *)(v294 + 8 * v238);
                    ++v240;
                    if (v239)
                      goto LABEL_220;
                  }
                }
LABEL_223:
                v238 = v240;
LABEL_220:
                v27 = (v239 - 1) & v239;
                v229 = __clz(__rbit64(v239)) + (v238 << 6);
                v301 = v238;
LABEL_216:
                v230 = v300;
                v231 = v300[6];
                v232 = type metadata accessor for URL(0);
                v233 = (uint64_t)v293;
                (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v232 - 8) + 16))(v293, v231 + *(_QWORD *)(*(_QWORD *)(v232 - 8) + 72) * v229, v232);
                v234 = v230[7];
                v235 = sub_10001BE7C((uint64_t *)&unk_10012ADE0);
                v236 = *(void **)(v234 + 8 * v229);
                *(_QWORD *)(v233 + *(int *)(v235 + 48)) = v236;
                sub_100014360(v233, 0, 1, v235);
                v237 = v236;
                v227 = v233;
                v146 = (uint64_t)v297;
                goto LABEL_235;
              }
            }
          }
        }
LABEL_234:
        v241 = sub_10001BE7C((uint64_t *)&unk_10012ADE0);
        sub_100014360(v227, 1, 1, v241);
        v27 = 0;
LABEL_235:
        sub_100019EB8(v227, v146, v226);
        v242 = v146;
        v243 = sub_10001BE7C((uint64_t *)&unk_10012ADE0);
        if (sub_10001C93C(v242, 1, v243) == 1)
        {
          swift_release_n(v28, 2);
          swift_bridgeObjectRelease_n(v290, 2);
          swift_bridgeObjectRelease_n(v143, 2);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          return;
        }
        v244 = *(id *)(v242 + *(int *)(v243 + 48));
        v245 = (uint64_t)v292;
        sub_1000B2298();
        v246 = v302;
        if (sub_10001C93C(v245, 1, v302) == 1)
        {

          sub_1000131E0(v245, &qword_10012ADD0);
          goto LABEL_260;
        }
        v247 = v226;
        v248 = v291;
        sub_1000BB03C(v245, v291, type metadata accessor for LSLinkBundleRecord);
        v310 = v246;
        v311 = &off_10011DFB0;
        v249 = sub_10001795C(&v309);
        sub_1000207A8(v248, (uint64_t)v249, type metadata accessor for LSLinkBundleRecord);
        v250 = v143;
        v251 = *v249;
        v252 = v249[1];
        v28 = *(_QWORD *)(v250 + 16);
        if (v28)
        {
          v253 = v298[4];
          v254 = v298[5];
          v255 = v253 == v251 && v254 == v252;
          if (!v255 && (_stringCompareWithSmolCheck(_:_:expecting:)(v253, v254, v251, v252, 0) & 1) == 0)
          {
            if (v28 != 1)
            {
              v256 = (uint64_t *)v287;
              v257 = 1;
              while (1)
              {
                v258 = v257 + 1;
                if (__OFADD__(v257, 1))
                  goto LABEL_268;
                v259 = *(v256 - 1);
                v260 = *v256;
                v261 = v259 == v251 && v260 == v252;
                if (v261 || (_stringCompareWithSmolCheck(_:_:expecting:)(v259, v260, v251, v252, 0) & 1) != 0)
                  goto LABEL_259;
                v256 += 2;
                ++v257;
                if (v258 == v28)
                  goto LABEL_253;
              }
            }
            goto LABEL_253;
          }
        }
        else
        {
LABEL_253:
          swift_bridgeObjectRetain();
          sub_10002ECDC(v251, v252, v290);
          v263 = v262;
          swift_bridgeObjectRelease();
          if ((v263 & 1) == 0)
          {
            sub_100019A60((uint64_t)&v309, (uint64_t)v307);
            v264 = v289;
            swift_beginAccess(v289, v306, 33, 0);
            v265 = *v264;
            v266 = swift_isUniquelyReferenced_nonNull_native(*v264);
            *v264 = v265;
            if ((v266 & 1) == 0)
            {
              sub_10002FA78();
              v265 = v276;
              *v289 = v276;
            }
            v267 = *(_QWORD *)(v265 + 16);
            if (v267 >= *(_QWORD *)(v265 + 24) >> 1)
            {
              sub_10002FA78();
              *v289 = v277;
            }
            v268 = sub_100016184((uint64_t)v307, v308);
            v269 = __chkstk_darwin(v268);
            v271 = (char *)&v282 - ((v270 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, double))(v272 + 16))(v271, v269);
            v304 = v302;
            v305 = &off_10011DFB0;
            v273 = sub_10001795C(&v303);
            sub_1000BB03C((uint64_t)v271, (uint64_t)v273, type metadata accessor for LSLinkBundleRecord);
            v274 = *v289;
            *(_QWORD *)(v274 + 16) = v267 + 1;
            sub_100019A48(&v303, v274 + 40 * v267 + 32);
            sub_10000E87C(v307);
            swift_endAccess(v306);
          }
        }
LABEL_259:
        sub_10001DBC8(v291, type metadata accessor for LSLinkBundleRecord);

        sub_10000E87C(&v309);
        v143 = (uint64_t)v298;
        v28 = v296;
        v227 = (uint64_t)v293;
        v226 = v247;
LABEL_260:
        v275 = type metadata accessor for URL(0);
        v146 = (uint64_t)v297;
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v275 - 8) + 8))(v297, v275);
        if (v27)
          goto LABEL_215;
        continue;
      }
    }
    v186 = v27 & 0xC000000000000001;
    v301 = v27 + 32;
    swift_bridgeObjectRetain();
    v187 = 0;
    v295 = v143 + 56;
    while (1)
    {
      if (v186)
        v188 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v187, v27);
      else
        v188 = *(id *)(v301 + 8 * v187);
      v189 = v188;
      v152 = __OFADD__(v187++, 1);
      if (v152)
        goto LABEL_267;
      DaemonRecord.attributionBundleIdentifier.getter();
      v191 = v190;
      swift_bridgeObjectRelease();
      if (!v191)
        break;

LABEL_210:
      if ((_QWORD *)v187 == v185)
      {
        swift_bridgeObjectRelease();
        goto LABEL_212;
      }
    }
    v192 = v189;
    v193 = (uint64_t)v285;
    sub_1000B1F44();
    v194 = v302;
    if (sub_10001C93C(v193, 1, v302) == 1)
    {

      sub_1000131E0(v193, &qword_10012ADD0);
      goto LABEL_209;
    }
    v195 = v284;
    sub_1000BB03C(v193, v284, type metadata accessor for LSLinkBundleRecord);
    v310 = v194;
    v311 = &off_10011DFB0;
    v196 = sub_10001795C(&v309);
    sub_1000207A8(v195, (uint64_t)v196, type metadata accessor for LSLinkBundleRecord);
    v197 = *v196;
    v27 = v196[1];
    v198 = *(_QWORD *)(v143 + 16);
    if (!v198)
      goto LABEL_202;
    v199 = v298[4];
    v200 = v298[5];
    v201 = v199 == v197 && v200 == v27;
    if (v201 || (_stringCompareWithSmolCheck(_:_:expecting:)(v199, v200, v197, v27, 0) & 1) != 0)
      goto LABEL_208;
    if (v198 == 1)
    {
LABEL_202:
      swift_bridgeObjectRetain();
      sub_10002ECDC(v197, v27, v290);
      v208 = v207;
      swift_bridgeObjectRelease();
      if ((v208 & 1) == 0)
      {
        sub_100019A60((uint64_t)&v309, (uint64_t)v307);
        v209 = v289;
        swift_beginAccess(v289, v306, 33, 0);
        v210 = *v209;
        v211 = swift_isUniquelyReferenced_nonNull_native(*v209);
        *v209 = v210;
        if ((v211 & 1) == 0)
        {
          sub_10002FA78();
          v210 = v220;
          *v289 = v220;
        }
        v212 = *(_QWORD *)(v210 + 16);
        if (v212 >= *(_QWORD *)(v210 + 24) >> 1)
        {
          sub_10002FA78();
          *v289 = v221;
        }
        v213 = sub_100016184((uint64_t)v307, v308);
        v214 = __chkstk_darwin(v213);
        v216 = (char *)&v282 - ((v215 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v217 + 16))(v216, v214);
        v304 = v302;
        v305 = &off_10011DFB0;
        v218 = sub_10001795C(&v303);
        sub_1000BB03C((uint64_t)v216, (uint64_t)v218, type metadata accessor for LSLinkBundleRecord);
        v219 = *v289;
        *(_QWORD *)(v219 + 16) = v212 + 1;
        sub_100019A48(&v303, v219 + 40 * v212 + 32);
        sub_10000E87C(v307);
        swift_endAccess(v306);
      }
LABEL_208:
      sub_10001DBC8(v284, type metadata accessor for LSLinkBundleRecord);

      sub_10000E87C(&v309);
      v143 = (uint64_t)v298;
      v28 = v296;
      v146 = (uint64_t)v297;
      v27 = v312;
LABEL_209:
      v185 = v300;
      goto LABEL_210;
    }
    v28 = v295;
    v202 = 1;
    while (1)
    {
      v203 = v202 + 1;
      if (__OFADD__(v202, 1))
        break;
      v204 = *(_QWORD *)(v28 - 8);
      v205 = *(_QWORD *)v28;
      v206 = v204 == v197 && v205 == v27;
      if (v206 || (_stringCompareWithSmolCheck(_:_:expecting:)(v204, v205, v197, v27, 0) & 1) != 0)
        goto LABEL_208;
      v28 += 16;
      ++v202;
      if (v203 == v198)
        goto LABEL_202;
    }
LABEL_271:
    __break(1u);
LABEL_272:
    if (v28 < 0)
      v278 = v28;
    else
      v278 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v96 = _CocoaArrayWrapper.endIndex.getter(v278);
  }
  if (v96 >= 1)
  {
    v97 = 0;
    do
    {
      if ((v28 & 0xC000000000000001) != 0)
        v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v97, v28);
      else
        v98 = *(id *)(v28 + 8 * v97 + 32);
      v99 = v98;
      LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
      v101 = v100;
      v102 = swift_bridgeObjectRelease();
      if (v101)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v102);
        v103 = *(_QWORD *)(v309 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v103);
        v104 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v103, v99);
        specialized ContiguousArray._endMutation()(v104);
      }
      else
      {

      }
      ++v97;
    }
    while (v301 != v97);
    goto LABEL_95;
  }
  __break(1u);
LABEL_283:
  __break(1u);
LABEL_284:
  __break(1u);
LABEL_285:
  __break(1u);
LABEL_286:
  __break(1u);
}

void sub_1000B5ECC(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t i;
  id v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t j;
  id v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  id v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  id v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  id v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  id v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  id v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD v210[3];
  uint64_t v211;
  _UNKNOWN **v212;
  uint64_t v213;

  v10 = sub_10001BE7C(&qword_10012ADC8);
  __chkstk_darwin(v10);
  v197 = (char *)&v190 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v199 = (char *)&v190 - v13;
  v14 = sub_10001BE7C(&qword_10012ADD0);
  __chkstk_darwin(v14);
  v194 = (char *)&v190 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v193 = (char *)&v190 - v17;
  __chkstk_darwin(v18);
  v196 = (char *)&v190 - v19;
  __chkstk_darwin(v20);
  v204 = (char *)&v190 - v21;
  v207 = type metadata accessor for LSLinkBundleRecord(0);
  __chkstk_darwin(v207);
  v192 = (uint64_t)&v190 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v191 = (uint64_t)&v190 - v24;
  __chkstk_darwin(v25);
  v195 = (uint64_t)&v190 - v26;
  v28 = __chkstk_darwin(v27);
  v198 = (uint64_t)&v190 - v29;
  type metadata accessor for DaemonRecord(0, v28);
  v202 = a2;
  swift_retain();
  v201 = a3;
  swift_retain();
  v200 = a4;
  swift_retain();
  v203 = a5;
  v30 = swift_retain();
  v31 = static DaemonRecord.enumerated.getter(v30);
  sub_10000DE64(0, &qword_10012ADD8, LSApplicationExtensionRecord_ptr);
  v213 = static LSApplicationExtensionRecord.enumeratedStandaloneAppIntentsExtensions.getter();
  v206 = objc_msgSend((id)objc_opt_self(LSApplicationRecord), "enumeratorWithOptions:", 0);
  do
  {
    v32 = objc_autoreleasePoolPush();
    v33 = objc_msgSend(v206, "nextObject");
    if (v33)
    {
      v210[0] = _swiftEmptyArrayStorage;
      if ((unint64_t)v31 >> 62)
      {
        if (v31 < 0)
          v5 = v31;
        else
          v5 = v31 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v34 = _CocoaArrayWrapper.endIndex.getter(v5);
      }
      else
      {
        v34 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      v209 = (uint64_t)v32;
      if (v34)
      {
        if (v34 >= 1)
        {
          v35 = 0;
          v36 = v31 & 0xC000000000000001;
          v37 = v31;
          while (1)
          {
            if (v36)
              v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v31);
            else
              v38 = *(id *)(v31 + 8 * v35 + 32);
            v39 = v38;
            v40 = DaemonRecord.attributionBundleIdentifier.getter();
            v42 = v41;
            v43 = sub_1000B9994(v33, (SEL *)&selRef_bundleIdentifier);
            if (v42)
            {
              if (!v44)
                goto LABEL_21;
              v45 = v40 == v43 && v42 == v44;
              if (v45)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_24;
              }
              v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v43, v44, 0);
              swift_bridgeObjectRelease();
              v47 = swift_bridgeObjectRelease();
              if ((v46 & 1) == 0)
                goto LABEL_22;
            }
            else if (v44)
            {
LABEL_21:
              v47 = swift_bridgeObjectRelease();
LABEL_22:
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v47);
              v48 = *(_QWORD *)(v210[0] + 16);
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v48);
              v49 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v39);
              specialized ContiguousArray._endMutation()(v49);
              goto LABEL_24;
            }

LABEL_24:
            ++v35;
            v31 = v37;
            if (v34 == v35)
              goto LABEL_25;
          }
        }
        __break(1u);
LABEL_185:
        __break(1u);
        goto LABEL_186;
      }
LABEL_25:
      swift_bridgeObjectRelease();
      v50 = v210[0];
      swift_bridgeObjectRelease();
      v210[0] = _swiftEmptyArrayStorage;
      v5 = v213;
      if ((unint64_t)v213 >> 62)
      {
        if (v213 < 0)
          v73 = v213;
        else
          v73 = v213 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v74 = _CocoaArrayWrapper.endIndex.getter(v73);
        v5 = v213;
        v51 = v74;
      }
      else
      {
        v51 = *(_QWORD *)((v213 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      v208 = v50;
      if (v51)
      {
        if (v51 < 1)
          goto LABEL_185;
        v52 = 0;
        v53 = v5 & 0xC000000000000001;
        while (2)
        {
          if (v53)
            v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v52, v5);
          else
            v54 = *(id *)(v5 + 8 * v52 + 32);
          v55 = v54;
          v56 = LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
          v58 = v57;
          v59 = sub_1000B9994(v33, (SEL *)&selRef_bundleIdentifier);
          if (v58)
          {
            if (v60)
            {
              if (v56 == v59 && v58 == v60)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_46:
                ++v52;
                v5 = v213;
                if (v51 == v52)
                  goto LABEL_47;
                continue;
              }
              v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v59, v60, 0);
              swift_bridgeObjectRelease();
              v63 = swift_bridgeObjectRelease();
              if ((v62 & 1) == 0)
              {
LABEL_44:
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v63);
                v64 = *(_QWORD *)(v210[0] + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v64);
                v65 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v55);
                specialized ContiguousArray._endMutation()(v65);
                goto LABEL_46;
              }
LABEL_42:

              goto LABEL_46;
            }
          }
          else if (!v60)
          {
            goto LABEL_42;
          }
          break;
        }
        v63 = swift_bridgeObjectRelease();
        goto LABEL_44;
      }
LABEL_47:
      swift_bridgeObjectRelease();
      v66 = v210[0];
      swift_bridgeObjectRelease();
      v67 = v33;
      v68 = (uint64_t)v204;
      sub_100097F34();
      v69 = v207;
      if (sub_10001C93C(v68, 1, v207) == 1)
      {

        sub_1000131E0(v68, &qword_10012ADD0);
      }
      else
      {
        v70 = v68;
        v71 = v198;
        sub_1000BB03C(v70, v198, type metadata accessor for LSLinkBundleRecord);
        v211 = v69;
        v212 = &off_10011DFB0;
        v72 = sub_10001795C(v210);
        sub_1000207A8(v71, (uint64_t)v72, type metadata accessor for LSLinkBundleRecord);
        v5 = v205;
        sub_10009C350(v210, v202, v201, v200, v203);
        v205 = v5;
        if (v5)
        {

          sub_10001DBC8(v71, type metadata accessor for LSLinkBundleRecord);
          sub_10000E87C(v210);
          objc_autoreleasePoolPop((void *)v209);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          goto LABEL_183;
        }

        sub_10001DBC8(v71, type metadata accessor for LSLinkBundleRecord);
        sub_10000E87C(v210);
      }
      v213 = v66;
      v31 = v208;
      v32 = (void *)v209;
    }
    objc_autoreleasePoolPop(v32);
  }
  while (v33);
  v210[0] = _swiftEmptyArrayStorage;
  v5 = v213;
  if ((unint64_t)v213 >> 62)
    goto LABEL_189;
  v75 = *(_QWORD *)((v213 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v75)
    goto LABEL_73;
LABEL_64:
  if (v75 < 1)
  {
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
    goto LABEL_205;
  }
  v76 = 0;
  v77 = v5 & 0xC000000000000001;
  do
  {
    if (v77)
      v78 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v76, v5);
    else
      v78 = *(id *)(v5 + 8 * v76 + 32);
    v79 = v78;
    LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
    v81 = v80;
    v82 = swift_bridgeObjectRelease();
    if (v81)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v82);
      v83 = *(_QWORD *)(v210[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v83);
      v84 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v83, v79);
      specialized ContiguousArray._endMutation()(v84);
    }
    else
    {

    }
    ++v76;
    v5 = v213;
  }
  while (v75 != v76);
  while (1)
  {
LABEL_73:
    swift_bridgeObjectRelease();
    v85 = v210[0];
    v209 = v31;
    if ((v210[0] & 0x8000000000000000) != 0 || (v210[0] & 0x4000000000000000) != 0)
    {
      v187 = swift_retain();
      v86 = _CocoaArrayWrapper.endIndex.getter(v187);
    }
    else
    {
      v86 = *(_QWORD *)(v210[0] + 16);
      swift_retain();
    }
    v87 = _swiftEmptyArrayStorage;
    v204 = (char *)v75;
    if (v86)
    {
      if (v86 < 1)
        goto LABEL_202;
      for (i = 0; i != v86; ++i)
      {
        if ((v85 & 0xC000000000000001) != 0)
          v89 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v85);
        else
          v89 = *(id *)(v85 + 8 * i + 32);
        v90 = v89;
        v91 = LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
        v93 = v92;

        if (v93)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) == 0)
          {
            sub_10001B71C();
            v87 = v96;
          }
          v94 = v87[2];
          if (v94 >= v87[3] >> 1)
          {
            sub_10001B71C();
            v87 = v97;
          }
          v87[2] = v94 + 1;
          v95 = &v87[2 * v94];
          v95[4] = v91;
          v95[5] = v93;
        }
      }
    }
    swift_release_n(v85, 2);
    v98 = sub_100011574((uint64_t)v87);
    v210[0] = _swiftEmptyArrayStorage;
    v99 = v209;
    if ((unint64_t)v209 >> 62)
    {
      if (v209 < 0)
        v188 = v209;
      else
        v188 = v209 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v100 = _CocoaArrayWrapper.endIndex.getter(v188);
      if (!v100)
        goto LABEL_100;
    }
    else
    {
      v100 = *(_QWORD *)((v209 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v100)
        goto LABEL_100;
    }
    if (v100 < 1)
      goto LABEL_203;
    for (j = 0; j != v100; ++j)
    {
      if ((v99 & 0xC000000000000001) != 0)
        v102 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v99);
      else
        v102 = *(id *)(v99 + 8 * j + 32);
      v103 = v102;
      DaemonRecord.attributionBundleIdentifier.getter();
      v105 = v104;
      v106 = swift_bridgeObjectRelease();
      if (v105)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v106);
        v107 = *(_QWORD *)(v210[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v107);
        v108 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v107, v103);
        specialized ContiguousArray._endMutation()(v108);
      }
      else
      {

      }
    }
LABEL_100:
    swift_bridgeObjectRelease();
    v109 = v210[0];
    if ((v210[0] & 0x8000000000000000) != 0 || (v210[0] & 0x4000000000000000) != 0)
    {
      v189 = swift_retain();
      v110 = _CocoaArrayWrapper.endIndex.getter(v189);
    }
    else
    {
      v110 = *(_QWORD *)(v210[0] + 16);
      swift_retain();
    }
    v198 = v100;
    v208 = v98;
    if (v110)
    {
      if (v110 < 1)
        goto LABEL_204;
      v111 = 0;
      v112 = _swiftEmptyArrayStorage;
      do
      {
        if ((v109 & 0xC000000000000001) != 0)
          v113 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v111, v109);
        else
          v113 = *(id *)(v109 + 8 * v111 + 32);
        v114 = v113;
        v115 = DaemonRecord.attributionBundleIdentifier.getter();
        v117 = v116;

        if (v117)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0)
          {
            sub_10001B71C();
            v112 = v120;
          }
          v118 = v112[2];
          if (v118 >= v112[3] >> 1)
          {
            sub_10001B71C();
            v112 = v121;
          }
          v112[2] = v118 + 1;
          v119 = &v112[2 * v118];
          v119[4] = v115;
          v119[5] = v117;
        }
        ++v111;
      }
      while (v110 != v111);
    }
    else
    {
      v112 = _swiftEmptyArrayStorage;
    }
    swift_release_n(v109, 2);
    v122 = sub_100011574((uint64_t)v112);
    v123 = sub_10006B9B8(v122, v208);
    v124 = v202;
    swift_retain();
    v125 = v201;
    swift_retain();
    v126 = v200;
    swift_retain();
    v127 = v203;
    swift_retain();
    v128 = v127;
    v5 = v205;
    sub_1000978A8(v123, v124, v125, v126, v128);
    v31 = v5;
    if (v5)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_183:
      swift_release();
      swift_release();
      swift_release();
      swift_release_n(v203, 2);
      return;
    }
    swift_bridgeObjectRelease();
    v129 = v204;
    if (!v204)
      break;
    v5 = v213;
    v130 = v213 & 0xC000000000000001;
    swift_bridgeObjectRetain();
    v131 = 4;
    while (1)
    {
      v132 = v130
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v131 - 4, v5)
           : *(id *)(v5 + 8 * v131);
      v133 = v132;
      v134 = v131 - 3;
      if (__OFADD__(v131 - 4, 1))
        break;
      LSApplicationExtensionRecord.attributionBundleIdentifier.getter();
      v136 = v135;
      swift_bridgeObjectRelease();
      if (v136)
      {

      }
      else
      {
        v137 = v133;
        v138 = (uint64_t)v194;
        sub_100097F34();
        v139 = v207;
        if (sub_10001C93C(v138, 1, v207) == 1)
        {

          sub_1000131E0(v138, &qword_10012ADD0);
        }
        else
        {
          v140 = v138;
          v141 = v192;
          sub_1000BB03C(v140, v192, type metadata accessor for LSLinkBundleRecord);
          v211 = v139;
          v212 = &off_10011DFB0;
          v142 = sub_10001795C(v210);
          sub_1000207A8(v141, (uint64_t)v142, type metadata accessor for LSLinkBundleRecord);
          sub_10009C350(v210, v202, v201, v200, v203);
          sub_10001DBC8(v141, type metadata accessor for LSLinkBundleRecord);

          sub_10000E87C(v210);
        }
      }
      ++v131;
      v45 = v134 == (_QWORD)v129;
      v5 = v213;
      v143 = v207;
      if (v45)
      {
        swift_bridgeObjectRelease();
        goto LABEL_136;
      }
    }
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    if (v5 < 0)
      v185 = v213;
    else
      v185 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v186 = _CocoaArrayWrapper.endIndex.getter(v185);
    v5 = v213;
    v75 = v186;
    if (v186)
      goto LABEL_64;
  }
  v143 = v207;
LABEL_136:
  v144 = v198;
  if (v198)
  {
    v145 = v209 & 0xC000000000000001;
    swift_bridgeObjectRetain();
    v146 = 4;
    do
    {
      if (v145)
        v147 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v146 - 4, v209);
      else
        v147 = *(id *)(v209 + 8 * v146);
      v148 = v147;
      v149 = v146 - 3;
      if (__OFADD__(v146 - 4, 1))
        goto LABEL_187;
      DaemonRecord.attributionBundleIdentifier.getter();
      v151 = v150;
      swift_bridgeObjectRelease();
      if (v151)
      {

      }
      else
      {
        v152 = v148;
        v153 = (uint64_t)v193;
        sub_1000B1F44();
        if (sub_10001C93C(v153, 1, v143) == 1)
        {

          sub_1000131E0(v153, &qword_10012ADD0);
        }
        else
        {
          v154 = v153;
          v155 = v191;
          sub_1000BB03C(v154, v191, type metadata accessor for LSLinkBundleRecord);
          v211 = v143;
          v212 = &off_10011DFB0;
          v156 = sub_10001795C(v210);
          sub_1000207A8(v155, (uint64_t)v156, type metadata accessor for LSLinkBundleRecord);
          v5 = 0;
          sub_10009C350(v210, v202, v201, v200, v203);
          sub_10001DBC8(v155, type metadata accessor for LSLinkBundleRecord);

          sub_10000E87C(v210);
        }
      }
      ++v146;
    }
    while (v149 != v144);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for FrameworkRecord(0);
  v157 = static FrameworkRecord.enumerated.getter();
  v158 = 0;
  v159 = *(_QWORD *)(v157 + 64);
  v205 = v157 + 64;
  v160 = 1 << *(_BYTE *)(v157 + 32);
  v161 = -1;
  if (v160 < 64)
    v161 = ~(-1 << v160);
  v162 = v161 & v159;
  v208 = (unint64_t)(v160 + 63) >> 6;
  v204 = (char *)(v208 - 1);
  v163 = (uint64_t)v199;
  if ((v161 & v159) != 0)
  {
LABEL_152:
    v164 = __clz(__rbit64(v162));
    v162 &= v162 - 1;
    v165 = v164 | (v158 << 6);
    goto LABEL_153;
  }
  while (2)
  {
    v173 = v158 + 1;
    if (__OFADD__(v158, 1))
      goto LABEL_188;
    if (v173 >= v208)
    {
      v168 = (uint64_t)v197;
      goto LABEL_159;
    }
    v174 = *(_QWORD *)(v205 + 8 * v173);
    v168 = (uint64_t)v197;
    if (v174)
      goto LABEL_157;
    v158 += 2;
    if (v173 + 1 >= v208)
    {
      v158 = v173;
      goto LABEL_159;
    }
    v174 = *(_QWORD *)(v205 + 8 * v158);
    if (v174)
    {
      ++v173;
      goto LABEL_157;
    }
    if (v173 + 2 >= v208)
      goto LABEL_159;
    v174 = *(_QWORD *)(v205 + 8 * (v173 + 2));
    if (v174)
    {
      v173 += 2;
      goto LABEL_157;
    }
    v184 = v173 + 3;
    if (v173 + 3 >= v208)
    {
      v158 = v173 + 2;
LABEL_159:
      v175 = sub_10001BE7C((uint64_t *)&unk_10012ADE0);
      sub_100014360(v168, 1, 1, v175);
      v162 = 0;
LABEL_160:
      sub_100019EB8(v168, v163, &qword_10012ADC8);
      v176 = sub_10001BE7C((uint64_t *)&unk_10012ADE0);
      if (sub_10001C93C(v163, 1, v176) == 1)
      {
        swift_release_n(v203, 2);
        swift_release_n(v200, 2);
        swift_release_n(v201, 2);
        swift_release_n(v202, 2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        return;
      }
      v177 = *(id *)(v163 + *(int *)(v176 + 48));
      v178 = (uint64_t)v196;
      sub_1000B2298();
      v179 = v207;
      if (sub_10001C93C(v178, 1, v207) == 1)
      {

        sub_1000131E0(v178, &qword_10012ADD0);
      }
      else
      {
        v180 = v178;
        v181 = v195;
        sub_1000BB03C(v180, v195, type metadata accessor for LSLinkBundleRecord);
        v211 = v179;
        v212 = &off_10011DFB0;
        v182 = sub_10001795C(v210);
        sub_1000207A8(v181, (uint64_t)v182, type metadata accessor for LSLinkBundleRecord);
        v5 = 0;
        sub_10009C350(v210, v202, v201, v200, v203);
        sub_10001DBC8(v181, type metadata accessor for LSLinkBundleRecord);

        sub_10000E87C(v210);
      }
      v183 = type metadata accessor for URL(0);
      v163 = (uint64_t)v199;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v183 - 8) + 8))(v199, v183);
      if (v162)
        goto LABEL_152;
      continue;
    }
    break;
  }
  v174 = *(_QWORD *)(v205 + 8 * v184);
  if (v174)
  {
    v173 += 3;
LABEL_157:
    v162 = (v174 - 1) & v174;
    v165 = __clz(__rbit64(v174)) + (v173 << 6);
    v158 = v173;
LABEL_153:
    v166 = *(_QWORD *)(v157 + 48);
    v167 = type metadata accessor for URL(0);
    v168 = (uint64_t)v197;
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 16))(v197, v166 + *(_QWORD *)(*(_QWORD *)(v167 - 8) + 72) * v165, v167);
    v169 = *(_QWORD *)(v157 + 56);
    v170 = sub_10001BE7C((uint64_t *)&unk_10012ADE0);
    v171 = *(void **)(v169 + 8 * v165);
    *(_QWORD *)(v168 + *(int *)(v170 + 48)) = v171;
    sub_100014360(v168, 0, 1, v170);
    v172 = v171;
    v163 = (uint64_t)v199;
    goto LABEL_160;
  }
  while (1)
  {
    v173 = v184 + 1;
    if (__OFADD__(v184, 1))
      break;
    if (v173 >= v208)
    {
      v158 = (uint64_t)v204;
      goto LABEL_159;
    }
    v174 = *(_QWORD *)(v205 + 8 * v173);
    ++v184;
    if (v174)
      goto LABEL_157;
  }
LABEL_205:
  __break(1u);
}

void sub_1000B71CC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  sub_10001BE7C(&qword_10012ADD0);
  sub_1000179E8();
  __chkstk_darwin(v3);
  sub_1000BE920();
  objc_allocWithZone((Class)LSApplicationRecord);
  sub_1000101B0();
  v4 = sub_10001EEE0();
  v6 = sub_100070EC8(v4, v5, 0);
  if (v6)
  {
    v7 = v6;
    sub_100097F34();
    v8 = sub_1000BE40C();
    sub_1000BDF4C(v1, 1, v8);
    if (v9)
    {

      sub_1000131E0(v1, &qword_10012ADD0);
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = &off_10011DFB0;
      v10 = sub_10001795C((_QWORD *)a1);
      sub_1000BB03C(v1, (uint64_t)v10, type metadata accessor for LSLinkBundleRecord);

    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

uint64_t DateFunctions.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for LSLinkBundleSource()
{
  return objc_opt_self(_TtC10LinkDaemon18LSLinkBundleSource);
}

uint64_t destroy for Registry.IndexingQueue.Change(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = a1[4];
  if (v3 >> 60 != 15)
    result = sub_10001EA88(a1[3], v3);
  if (a1[6])
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = (uint64_t *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }
  else
  {
    v7 = *v5;
    sub_10001EBF8(*v5, v6);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
  }
  v8 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (uint64_t *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v5 >> 60 != 15)
    {
      v6 = *v4;
      sub_10001EBF8(*v4, *(_QWORD *)(a2 + 32));
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v5;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
    sub_1000B7574(a1 + 24);
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v7 = *v4;
  sub_10001EBF8(*v4, *(_QWORD *)(a2 + 32));
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v5;
  sub_10001EA88(v8, v9);
LABEL_8:
  v10 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  if (!v10)
  {
    if (v11)
    {
      v13 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v11;
      *(_QWORD *)(a1 + 56) = v13;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000B7574(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

__n128 initializeWithTake for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Registry.IndexingQueue.Change(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 >> 60 == 15)
    goto LABEL_4;
  v6 = *(_QWORD *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    sub_1000B7574(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *v4;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)v4;
  *(_QWORD *)(a1 + 32) = v6;
  sub_10001EA88(v7, v5);
LABEL_6:
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  if (!v9)
  {
    if (v8)
    {
      v11 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 56) = v11;
      return a1;
    }
LABEL_12:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v10;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Registry.IndexingQueue.Change(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Registry.IndexingQueue.Change(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Registry.IndexingQueue.Change()
{
  return &type metadata for Registry.IndexingQueue.Change;
}

uint64_t sub_1000B7750(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v8 = sub_1000BF010();
  sub_1000BEE48(&qword_10012ADB0);
  v9 = v2;
  v7[0] = a1;
  sub_10000E858(v7, v8);
  sub_10000EC68();
  v3 = sub_1000BE3E8();
  sub_1000B984C(v3, v4, v5);
  sub_1000117B4();
  sub_10000E87C(v7);
  return sub_100019430();
}

uint64_t sub_1000B77F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  v2 = sub_10000E858(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v3 = *v2;
  if (*v2 && (v4 = v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = Data.InlineData.init(_:)();
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = Data.LargeSlice.init(_:)();
    }
    else
    {
      v6 = Data.InlineSlice.init(_:)();
    }
  }
  else
  {
    v6 = 0;
  }
  sub_10000E87C(v8);
  return v6;
}

void sub_1000B78A8(uint64_t a1)
{
  sub_1000B78CC(a1, (uint64_t)&type metadata for String);
}

void sub_1000B78B4(uint64_t a1)
{
  sub_1000B793C(a1, (uint64_t *)&unk_10012B3A0);
}

void sub_1000B78C0(uint64_t a1)
{
  sub_1000B78CC(a1, (uint64_t)&type metadata for Substring);
}

void sub_1000B78CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 < 0)
  {
    sub_1000BEA20();
    sub_1000BE3B8((uint64_t)"Fatal error", v2, v3, (uint64_t)"Can't construct Array with count < 0", v4, v5, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    if (a1)
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2) + 16) = a1;
    sub_100017EE4();
  }
}

void sub_1000B7930(uint64_t a1)
{
  sub_1000B793C(a1, &qword_1001296A0);
}

void sub_1000B793C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 < 0)
  {
    sub_1000BEA20();
    sub_1000BE3B8((uint64_t)"Fatal error", v4, v5, (uint64_t)"Can't construct Array with count < 0", v6, v7, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v3 = sub_10001BE7C(a2);
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v3) + 16) = a1;
    }
    sub_100017EE4();
  }
}

void sub_1000B79AC()
{
  sub_1000B79B8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002F870);
}

void sub_1000B79B8(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    *v1 = a1(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v3 + 16) + 1, 1, v3);
  sub_10001000C();
}

uint64_t sub_1000B7A04(uint64_t a1)
{
  return sub_1000B7A10(a1, (uint64_t (*)(BOOL))sub_10002F870);
}

uint64_t sub_1000B7A10(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

void sub_1000B7A50(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v2) || v5 - v7 > *(_QWORD *)(v4 + 24) >> 1)
  {
    sub_10002FA48();
    v4 = v9;
  }
  v10 = *(_QWORD *)(sub_10001BE7C(&qword_10012B340) - 8);
  v11 = v4 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v12 = *(_QWORD *)(v10 + 72);
  swift_arrayDestroy(v11 + v12 * a1, v7);
  if (!v7)
    goto LABEL_13;
  v13 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v13, a2))
    goto LABEL_19;
  sub_10003118C(v11 + v12 * a2, v13 - a2);
  v14 = *(_QWORD *)(v4 + 16);
  v15 = __OFADD__(v14, v8);
  v16 = v14 - v7;
  if (!v15)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_13:
    *v2 = v4;
    return;
  }
LABEL_20:
  __break(1u);
}

char *sub_1000B7B68(char *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  v7 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = &result[-a2];
  if (__OFSUB__(0, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v2) || v5 - v7 > *(_QWORD *)(v4 + 24) >> 1)
  {
    sub_10002FA5C();
    v4 = v9;
  }
  v10 = (char *)(v4 + 32 + ((_QWORD)v6 << 6));
  result = (char *)swift_arrayDestroy(v10, v7);
  if (!v7)
    goto LABEL_13;
  v11 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v11, a2))
    goto LABEL_19;
  result = sub_100031198((char *)(v4 + 32 + (a2 << 6)), v11 - a2, v10);
  v12 = *(_QWORD *)(v4 + 16);
  v13 = __OFADD__(v12, v8);
  v14 = v12 - v7;
  if (!v13)
  {
    *(_QWORD *)(v4 + 16) = v14;
LABEL_13:
    *v2 = v4;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000B7C64()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  sub_1000100A8();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    v0 = v6;
    v2 = v5;
    v3 = *v1;
    if (!(*v1 >> 62))
    {
      v7 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  sub_1000BEFBC();
  sub_10000BFF4();
  v7 = sub_1000185D0();
  sub_1000101FC();
LABEL_4:
  if (v7 < v0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (__OFSUB__(v0, v2))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v4 = v2 - v0;
  if (__OFSUB__(0, v0 - v2))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v3 = *v1;
  if (!(*v1 >> 62))
  {
    v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_34:
  sub_1000BEFBC();
  if (v20 != v21)
    v22 = v3;
  else
    v22 = v19;
  sub_10000BFF4();
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  sub_1000101FC();
LABEL_9:
  v9 = v8 + v4;
  if (__OFADD__(v8, v4))
  {
    __break(1u);
LABEL_39:
    sub_1000BEFBC();
    if (v20 != v21)
      v24 = v3;
    else
      v24 = v23;
    sub_10000BFF4();
    v12 = _CocoaArrayWrapper.endIndex.getter(v24);
    sub_1000101FC();
    goto LABEL_17;
  }
  v3 = *v1;
  v10 = ((uint64_t (*)(unint64_t))swift_isUniquelyReferenced_nonNull_bridgeObject)(*v1);
  *v1 = v3;
  v8 = 0;
  if ((_DWORD)v10 && (v3 & 0x8000000000000000) == 0 && (v3 & 0x4000000000000000) == 0)
  {
    v11 = v3 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_20;
    v8 = 1;
  }
  if (v3 >> 62)
    goto LABEL_39;
  v12 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  if (v12 <= v9)
    v12 = v9;
  sub_10000BFF4();
  v3 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:))(v8, v12, 1, v3);
  v10 = swift_bridgeObjectRelease();
  *v1 = v3;
  v11 = v3 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
  v13 = (char *)(v11 + 32 + 8 * v2);
  sub_1000BDB9C(v10, &qword_1001284E0, LNProperty_ptr);
  v14 = sub_1000BDCE0();
  result = swift_arrayDestroy(v14, v15);
  if (!v4)
    return specialized Array._endMutation()(result);
  if (v3 >> 62)
  {
    sub_10000BFF4();
    v17 = sub_1000185D0();
    sub_1000101FC();
  }
  else
  {
    v17 = *(_QWORD *)(v11 + 16);
  }
  if (__OFSUB__(v17, v0))
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t)sub_100031320((char *)(v11 + 32 + 8 * v0), v17 - v0, v13);
    if (!(v3 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      goto LABEL_26;
    }
  }
  if ((v3 & 0x8000000000000000) != 0)
    v25 = v3;
  else
    v25 = v11;
  sub_10000BFF4();
  v18 = _CocoaArrayWrapper.endIndex.getter(v25);
  result = sub_1000101FC();
LABEL_26:
  if (!__OFADD__(v18, v4))
  {
    *(_QWORD *)(v11 + 16) = v18 + v4;
    return specialized Array._endMutation()(result);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B7E74(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  _QWORD *v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD v63[2];
  uint64_t v64;

  v60 = a3;
  v6 = type metadata accessor for LNBundleRecord(0);
  v57 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - v12;
  v14 = sub_10001BE7C(&qword_100128A38);
  __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
    return swift_bridgeObjectRelease();
  v58 = v3;
  v56 = (uint64_t)v18 + *(int *)(v15 + 48);
  v20 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v54 = *(_QWORD *)(v16 + 72);
  v51 = a1;
  swift_bridgeObjectRetain();
  v21 = type metadata accessor for LNBundleRecord;
  v55 = v18;
  v52 = v10;
  while (1)
  {
    v59 = v20;
    sub_100019FA0(v20, (uint64_t)v18, &qword_100128A38);
    v23 = v18[1];
    v63[0] = *v18;
    v22 = v63[0];
    v63[1] = v23;
    v24 = (uint64_t)v13;
    v25 = v21;
    sub_1000BB03C(v56, (uint64_t)v13, v21);
    v26 = *(_QWORD **)v60;
    v28 = sub_100016064(v22);
    v29 = v26[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_22;
    }
    v32 = v27;
    if (v26[3] >= v31)
    {
      if ((a2 & 1) == 0)
      {
        sub_10001BE7C((uint64_t *)&unk_100129400);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_1000324E0(v31, a2 & 1);
      v33 = sub_100016064(v22);
      if ((v32 & 1) != (v34 & 1))
        goto LABEL_21;
      v28 = v33;
    }
    v35 = *(_QWORD **)v60;
    if ((v32 & 1) != 0)
      break;
    v35[(v28 >> 6) + 8] |= 1 << v28;
    v42 = (uint64_t *)(v35[6] + 16 * v28);
    *v42 = v22;
    v42[1] = v23;
    v43 = v35[7] + *(_QWORD *)(v57 + 72) * v28;
    v13 = (char *)v24;
    v21 = v25;
    sub_1000BB03C(v24, v43, v25);
    v44 = v35[2];
    v45 = __OFADD__(v44, 1);
    v46 = v44 + 1;
    if (v45)
      goto LABEL_20;
    v35[2] = v46;
LABEL_14:
    v18 = v55;
    v20 = v59 + v54;
    a2 = 1;
    if (!--v19)
      return swift_bridgeObjectRelease_n(v51, 2);
  }
  v36 = v19;
  v37 = *(_QWORD *)(v57 + 72) * v28;
  v38 = v35[7] + v37;
  v39 = v53;
  v21 = v25;
  sub_1000207A8(v38, v53, v25);
  v40 = (uint64_t)v52;
  v13 = (char *)v24;
  v41 = v58;
  sub_10009BF8C(v39, v24, (uint64_t)v52);
  v58 = v41;
  if (!v41)
  {
    sub_10001DBC8(v39, v21);
    sub_10001DBC8(v24, v21);
    swift_bridgeObjectRelease();
    sub_1000BB7BC(v40, *(_QWORD *)(*(_QWORD *)v60 + 56) + v37);
    v19 = v36;
    goto LABEL_14;
  }
  sub_10001DBC8(v39, type metadata accessor for LNBundleRecord);
  v64 = v58;
  swift_errorRetain(v58);
  v48 = sub_10001BE7C((uint64_t *)&unk_100129420);
  if ((swift_dynamicCast(v48, &v64, v48, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_10001DBC8(v24, type metadata accessor for LNBundleRecord);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_errorRelease(v64);
  }
LABEL_22:
  v61 = 0;
  v62 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v49._object = (void *)0x80000001000F4EF0;
  v49._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v49);
  _print_unlocked<A, B>(_:_:)(v63, &v61, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v50._countAndFlagsBits = 39;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v61, v62, "Swift/NativeDictionary.swift", 28, 2);
  __break(1u);
  return result;
}

uint64_t sub_1000B82F4(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  sub_10001BE7C((uint64_t *)&unk_10012A750);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v28 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v26 = v6;
  v27 = (unint64_t)(v8 + 63) >> 6;
  v11 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = sub_1000561AC(1000, v20);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v22 = (_QWORD *)(v3[6] + 16 * i);
    *v22 = v18;
    v22[1] = v19;
    *(_QWORD *)(v3[7] + 8 * i) = v21;
    v23 = v3[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v25;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v14 >= v27)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v26 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v27)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v26 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v27)
          return (uint64_t)v3;
        v15 = *(_QWORD *)(v26 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v27)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v26 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v27)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v26 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1000B8500()
{
  sub_10002FF20();
}

uint64_t sub_1000B8518(unint64_t a1)
{
  uint64_t v2;

  if (a1 >> 62)
  {
    sub_10000EC68();
    v2 = sub_10001E8F8();
    sub_1000117B4();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

void sub_1000B8574(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_1000B8B7C(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_24;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_24;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_24;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
}

unint64_t *sub_1000B870C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v41 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v40 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain();
    v9 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
    while (1)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v42, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain();
      String.hash(into:)(v42, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7)
        goto LABEL_6;
LABEL_7:
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v40)
        goto LABEL_48;
      v13 = *(_QWORD *)(v41 + 8 * v12);
      v14 = v9 + 1;
      if (!v13)
      {
        v14 = v9 + 2;
        if (v9 + 2 >= v40)
          goto LABEL_48;
        v13 = *(_QWORD *)(v41 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 3;
          if (v9 + 3 >= v40)
            goto LABEL_48;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 4;
            if (v9 + 4 >= v40)
              goto LABEL_48;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v15 = v9 + 5;
              if (v9 + 5 >= v40)
              {
LABEL_48:
                sub_1000358EC(a1);
                return (unint64_t *)v2;
              }
              v13 = *(_QWORD *)(v41 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  v14 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v14 >= v40)
                    goto LABEL_48;
                  v13 = *(_QWORD *)(v41 + 8 * v14);
                  ++v15;
                  if (v13)
                    goto LABEL_22;
                }
LABEL_50:
                __break(1u);
              }
              v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      v7 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
      v9 = v14;
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease();
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_37;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      v36 = sub_1000B8D08((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v43);
      swift_release();
      sub_1000358EC(v43);
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, (const void *)(v2 + 56), v35);
      v36 = sub_1000B8D08((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release();
      sub_1000358EC(v43);
      swift_slowDealloc(v37, -1, -1);
    }
    return v36;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_1000B8B7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v21[9];

  v5 = *v2;
  Hasher.init(_seed:)(v21, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain();
  String.hash(into:)(v21, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v16 = ~v7;
    do
    {
      v8 = (v8 + 1) & v16;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v17 = (_QWORD *)(v9 + 16 * v8);
      v18 = v17[1];
      v19 = *v17 == a1 && v18 == a2;
    }
    while (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v21[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000345C4();
    v14 = v21[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_1000B9284(v8);
  *v2 = v21[0];
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t *sub_1000B8D08(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  int64_t v38;
  uint64_t v40;
  unint64_t *v41;
  _QWORD v42[9];
  uint64_t v43;

  v7 = *(_QWORD *)(a3 + 16);
  v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v43 = a3 + 56;
  while (2)
  {
    v40 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_46;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_46;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_46;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_14;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_46;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_46;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v38 = v9 + 6;
                while (v38 < v14)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    v13 = v38 - 1;
                    goto LABEL_14;
                  }
                }
                v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return (unint64_t *)sub_1000B8FF8(v41, a2, v40, a3);
              }
              goto LABEL_14;
            }
          }
          v13 = v18;
        }
LABEL_14:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_15:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42, *(_QWORD *)(a3 + 40));
        swift_bridgeObjectRetain();
        String.hash(into:)(v42, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v43 + 8 * (v24 >> 6))) == 0)
          goto LABEL_32;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = v28[1];
        v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) != 0)
          break;
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v43 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease();
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_22;
          }
        }
LABEL_32:
        result = (unint64_t *)swift_bridgeObjectRelease();
      }
      result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_22:
      v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v40 - 1;
    if (__OFSUB__(v40, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v40 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

Swift::Int sub_1000B8FF8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release();
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10001BE7C((uint64_t *)&unk_100128960);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_35;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_35;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_35;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain();
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_35;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_35;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_1000B9284(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v24, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            v17 = *(_QWORD *)(v3 + 48);
            v18 = (_OWORD *)(v17 + 16 * v2);
            v19 = (_OWORD *)(v17 + 16 * v6);
            v20 = v2 != v6 || v18 >= v19 + 1;
            v2 = v6;
            if (v20)
            {
              *v18 = *v19;
              v2 = v6;
            }
          }
        }
        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000B943C(uint64_t (*a1)(id *), uint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  char v16;
  unint64_t v17;
  id v18;
  id v19;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  id v34;

  v4 = v2;
  sub_100016794();
  sub_1000BF07C();
  v7 = sub_1000B9750();
  v9 = v8;
  sub_10000E038();
  if (v3)
    return v7;
  if ((v9 & 1) == 0)
  {
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_56;
    if (*v4 >> 62)
    {
LABEL_57:
      sub_1000101B0();
      v11 = sub_1000058C8();
      sub_1000059A8();
    }
    else
    {
      v11 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v10 != v11)
    {
      v10 = v7 + 5;
      v33 = a2;
      while (1)
      {
        v12 = v10 - 4;
        v13 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v13);
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }
          if (v12 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_47;
          v14 = *(id *)(v13 + 8 * v10);
        }
        v15 = v14;
        v34 = v14;
        v16 = a1(&v34);

        if ((v16 & 1) == 0)
        {
          if (v12 != v7)
          {
            v17 = *v4;
            if ((*v4 & 0xC000000000000001) != 0)
            {
              v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *v4);
              v17 = *v4;
            }
            else
            {
              if ((v7 & 0x8000000000000000) != 0)
                goto LABEL_50;
              if (v7 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_51;
              v18 = sub_1000137BC(v17 + 8 * v7);
            }
            if ((v17 & 0xC000000000000001) != 0)
            {
              v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v17);
              v17 = *v4;
            }
            else
            {
              if ((v12 & 0x8000000000000000) != 0)
                goto LABEL_52;
              if (v12 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_53;
              v19 = *(id *)(v17 + 8 * v10);
            }
            isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v17);
            *v4 = v17;
            if (!isUniquelyReferenced_nonNull_bridgeObject
              || (v17 & 0x8000000000000000) != 0
              || (v17 & 0x4000000000000000) != 0)
            {
              v17 = sub_1000B8518(v17);
              *v4 = v17;
            }
            v21 = *(void **)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
            *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v19;

            specialized Array._endMutation()(v22);
            v23 = *v4;
            v24 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
            *v4 = v23;
            if (!v24 || (v23 & 0x8000000000000000) != 0 || (v23 & 0x4000000000000000) != 0)
            {
              v23 = sub_1000B8518(v23);
              *v4 = v23;
            }
            a2 = v33;
            if ((v12 & 0x8000000000000000) != 0)
              goto LABEL_54;
            v25 = v23 & 0xFFFFFFFFFFFFFF8;
            if (v12 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_55;
            v26 = *(void **)(v25 + 8 * v10);
            *(_QWORD *)(v25 + 8 * v10) = v18;

            specialized Array._endMutation()(v27);
          }
          if (__OFADD__(v7++, 1))
            goto LABEL_49;
        }
        v29 = v10 - 3;
        if (__OFADD__(v12, 1))
          goto LABEL_48;
        if (*v4 >> 62)
        {
          sub_1000101B0();
          v30 = sub_1000058C8();
          sub_1000059A8();
        }
        else
        {
          v30 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        ++v10;
        if (v29 == v30)
          return v7;
      }
    }
    return v7;
  }
  if (!(*v4 >> 62))
    return *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1000101B0();
  v32 = sub_1000058C8();
  sub_1000059A8();
  return v32;
}

uint64_t sub_1000B9750()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t (*v5)(id *);
  uint64_t (*v6)(id *);
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  char v11;
  uint64_t v12;
  id v14;
  uint64_t v15;
  uint64_t v16;

  sub_10000C038();
  v15 = v1;
  v16 = v3;
  v4 = v2;
  v6 = v5;
  if (v2 >> 62)
  {
LABEL_14:
    sub_10000C030();
    v7 = sub_1000058C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v8 = 0;
  if (v7)
  {
    while (1)
    {
      v9 = (v4 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4)
         : sub_1000137BC(v4 + 8 * v8);
      v10 = v9;
      v14 = v9;
      v11 = v6(&v14);

      if (v0 || (v11 & 1) != 0)
        break;
      v12 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_14;
      }
      ++v8;
      if (v12 == v7)
        return 0;
    }
  }
  return v8;
}

uint64_t sub_1000B984C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = Data.InlineData.init(_:)();
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = Data.LargeSlice.init(_:)();
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = Data.InlineSlice.init(_:)();
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1000B98C0(void *a1)
{
  return sub_1000B9994(a1, (SEL *)&selRef_bundleIdentifier);
}

uint64_t sub_1000B98CC(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "uniqueInstallIdentifier");

  if (!v2)
    return 0;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_1000B993C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_1000BE070();
  v0 = swift_task_alloc(dword_10012AD5C);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  sub_10001A8CC(v1);
  return sub_1000A25A8();
}

uint64_t sub_1000B9988(void *a1)
{
  return sub_1000B9994(a1, (SEL *)&selRef_widgetKind);
}

uint64_t sub_1000B9994(void *a1, SEL *a2)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(a1, *a2);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  return sub_100019430();
}

uint64_t sub_1000B99EC(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[4];

  v2 = a2[1];
  v5[0] = *a2;
  v5[1] = v2;
  v3 = a2[3];
  v5[2] = a2[2];
  v5[3] = v3;
  return sub_10009656C(a1, (char *)v5);
}

uint64_t sub_1000B9A1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  _UNKNOWN **v11;

  v10 = type metadata accessor for LSLinkBundleRecord(0);
  v11 = &off_10011DFB0;
  v6 = sub_10001795C(&v9);
  sub_1000BB03C(a2, (uint64_t)v6, type metadata accessor for LSLinkBundleRecord);
  v7 = *a3;
  *(_QWORD *)(v7 + 16) = a1 + 1;
  return sub_100019A48(&v9, v7 + 40 * a1 + 32);
}

uint64_t sub_1000B9AA4(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  char *v86;
  NSObject *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[3];
  void *v93;
  _UNKNOWN **v94;
  __int128 v95;
  _OWORD v96[3];
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v88 = a2;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v82 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v82 - v13;
  v93 = &unk_10011B278;
  v94 = &off_10011B298;
  v15 = swift_allocObject(&unk_10011D810, 56, 7);
  v92[0] = v15;
  v16 = *a1;
  v17 = *(_OWORD *)(a1 + 1);
  v95 = *(_OWORD *)(a1 + 3);
  v96[0] = v17;
  v18 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v15 + 32) = v18;
  *(_QWORD *)(v15 + 48) = a1[4];
  v19 = sub_10000E858(v92, (uint64_t)&unk_10011B278);
  v20 = *((_OWORD *)v19 + 1);
  v98 = *(_OWORD *)v19;
  v99 = v20;
  v100 = v19[4];
  swift_unknownObjectRetain(v16);
  sub_100035CB4((uint64_t)v96);
  sub_100035CB4((uint64_t)&v95);
  v21 = sub_10002DB68();
  if (!v22)
    goto LABEL_19;
  v23 = v21;
  v24 = v22;
  v25 = sub_10000E858(v92, (uint64_t)v93);
  v26 = *((_OWORD *)v25 + 1);
  v96[1] = *(_OWORD *)v25;
  v96[2] = v26;
  v97 = v25[4];
  v27 = sub_10002DC08();
  if (!v27)
    goto LABEL_18;
  v28 = v27;
  sub_10002D8B4(0x4449656C646E7562, v27, &v89);
  if (v90)
  {
    v29 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
    if ((swift_dynamicCast(&v91, &v89, (char *)&type metadata for Any + 8, v29, 6) & 1) != 0)
    {
      v30 = v91;
      if (*(_QWORD *)(v91 + 16))
      {
        sub_10002D8B4(0x686563616C507369, v28, &v89);
        swift_bridgeObjectRelease();
        if (v90)
        {
          if ((swift_dynamicCast(&v91, &v89, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
            && (v91 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v31 = qword_100127EC8;
            v32 = a3;
            if (v31 != -1)
              swift_once(&qword_100127EC8, sub_100099764);
            v33 = sub_100012A40(v5, (uint64_t)qword_10012D1A8);
            v34 = v6;
            (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v33, v5);

            v36 = Logger.logObject.getter(v35);
            v37 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v36, v37))
            {
              v38 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v38 = 0;
              _os_log_impl((void *)&_mh_execute_header, v36, v37, "Event ignored: application is placeholder", v38, 2u);
              swift_slowDealloc(v38, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v5);
            return sub_10000E87C(v92);
          }
        }
        else
        {
          sub_1000131E0((uint64_t)&v89, &qword_100128A40);
        }
        v49 = qword_100127EC8;
        v50 = a3;
        if (v49 != -1)
          swift_once(&qword_100127EC8, sub_100099764);
        v51 = sub_100012A40(v5, (uint64_t)qword_10012D1A8);
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v51, v5);

        swift_bridgeObjectRetain_n(v24, 2);
        v52 = swift_bridgeObjectRetain_n(v30, 2);
        v53 = Logger.logObject.getter(v52);
        v54 = static os_log_type_t.default.getter();
        v55 = v54;
        v87 = v53;
        if (os_log_type_enabled(v53, v54))
        {
          v56 = swift_slowAlloc(22, -1);
          v85 = v55;
          v57 = v56;
          v83 = swift_slowAlloc(64, -1);
          *(_QWORD *)&v89 = v83;
          *(_DWORD *)v57 = 136315394;
          v86 = v50;
          swift_bridgeObjectRetain();
          v91 = sub_10000FBEC(v23, v24, (uint64_t *)&v89);
          v84 = v6;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
          swift_bridgeObjectRelease_n(v24, 3);
          *(_WORD *)(v57 + 12) = 2080;
          v82 = v57 + 14;
          v58 = swift_bridgeObjectRetain();
          v59 = Array.description.getter(v58);
          v61 = v60;
          swift_bridgeObjectRelease();
          v62 = v59;
          v50 = v86;
          v91 = sub_10000FBEC(v62, v61, (uint64_t *)&v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
          swift_bridgeObjectRelease_n(v30, 2);
          swift_bridgeObjectRelease();
          v63 = v87;
          _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v85, "%s => %s", (uint8_t *)v57, 0x16u);
          v64 = v83;
          swift_arrayDestroy(v83, 2);
          swift_slowDealloc(v64, -1, -1);
          swift_slowDealloc(v57, -1, -1);

          (*(void (**)(char *, uint64_t))(v84 + 8))(v8, v5);
        }
        else
        {

          swift_bridgeObjectRelease_n(v30, 2);
          swift_bridgeObjectRelease_n(v24, 2);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        }
        if (v23 == 0xD00000000000002ELL && v24 == 0x80000001000F5EB0
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ELL, 0x80000001000F5EB0, v23, v24, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v65 = v50;
          v66 = sub_100095DB8(v30, v65);
          swift_bridgeObjectRelease();
          v67 = v65;
          sub_100095054((uint64_t)v66, v67);
          if (!*(_QWORD *)(v68 + 16))
          {
            swift_bridgeObjectRelease();
            return sub_10000E87C(v92);
          }
          sub_10000E858(&v67[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource], *(_QWORD *)&v67[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource + 24]);
          v69 = sub_1000B4264();
          v71 = v70;
          sub_1000B3A20();
          swift_bridgeObjectRelease();
          v72 = v69;
          v73 = v71;
        }
        else
        {
          if ((v23 != 0xD000000000000030 || v24 != 0x80000001000F5EE0)
            && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000030, 0x80000001000F5EE0, v23, v24, 0) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v78 = Logger.logObject.getter(v77);
            v79 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v78, v79))
            {
              v80 = (uint8_t *)swift_slowAlloc(12, -1);
              v81 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v89 = v81;
              *(_DWORD *)v80 = 136315138;
              swift_bridgeObjectRetain();
              v91 = sub_10000FBEC(v23, v24, (uint64_t *)&v89);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
              swift_bridgeObjectRelease_n(v24, 3);
              _os_log_impl((void *)&_mh_execute_header, v78, v79, "Event ignored: unknown event name - %s", v80, 0xCu);
              swift_arrayDestroy(v81, 1);
              swift_slowDealloc(v81, -1, -1);
              swift_slowDealloc(v80, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v24, 2);
            }
            return sub_10000E87C(v92);
          }
          swift_bridgeObjectRelease();
          sub_10000E858(&v50[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource], *(_QWORD *)&v50[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource + 24]);
          v74 = sub_1000B4264();
          v76 = v75;
          sub_1000B36B4();
          swift_bridgeObjectRelease();
          v72 = v74;
          v73 = v76;
        }
        sub_10001EA88(v72, v73);
        return sub_10000E87C(v92);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000131E0((uint64_t)&v89, &qword_100128A40);
LABEL_19:
  v39 = qword_100127EC8;
  v40 = a3;
  if (v39 != -1)
    swift_once(&qword_100127EC8, sub_100099764);
  v41 = sub_100012A40(v5, (uint64_t)qword_10012D1A8);
  v42 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v14, v41, v5);

  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v89 = v47;
    *(_DWORD *)v46 = 136315138;
    v91 = sub_10000FBEC(0x4449656C646E7562, 0xE900000000000073, (uint64_t *)&v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Event ignored: empty name, userInfo or %s", v46, 0xCu);
    swift_arrayDestroy(v47, 1);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v5);
  return sub_10000E87C(v92);
}

uint64_t sub_1000BA518(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD v72[4];
  __n128 v73;
  char *v74;
  uint64_t v75;
  char v76[24];
  _QWORD v77[3];
  void *v78;
  _UNKNOWN **v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = &unk_10011B278;
  v79 = &off_10011B298;
  v10 = swift_allocObject(&unk_10011D810, 56, 7);
  v77[0] = v10;
  v11 = *a1;
  v81 = *(_OWORD *)(a1 + 1);
  v80 = *(_OWORD *)(a1 + 3);
  v12 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 48) = a1[4];
  v13 = sub_10000E858(v77, (uint64_t)&unk_10011B278);
  v14 = *((_OWORD *)v13 + 1);
  v85 = *(_OWORD *)v13;
  v86 = v14;
  v87 = v13[4];
  swift_unknownObjectRetain(v11);
  sub_100035CB4((uint64_t)&v81);
  sub_100035CB4((uint64_t)&v80);
  v15 = sub_10002DC08();
  if (v15)
  {
    sub_10002D8B4(0x4449656C646E7562, v15, &v82);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v83 + 1))
    {
      sub_1000131E0((uint64_t)&v82, &qword_100128A40);
      v16 = sub_10000E858(v77, (uint64_t)v78);
      v82 = *(_OWORD *)v16;
      v83 = *((_OWORD *)v16 + 1);
      v84 = v16[4];
      sub_1000B9AA4((uint64_t *)&v82, a2, a3);
      return sub_10000E87C(v77);
    }
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  sub_1000131E0((uint64_t)&v82, &qword_100128A40);
  v17 = sub_10000E858(v77, (uint64_t)v78);
  v19 = v17[3];
  v18 = v17[4];
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(APHiddenAppsChangedNotification);
  if (v19 == v20 && v18 == v21)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v18, v20, v21, 0);
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
      return sub_10000E87C(v77);
  }
  v24 = qword_100127EC8;
  v25 = a3;
  if (v24 != -1)
    swift_once(&qword_100127EC8, sub_100099764);
  v26 = sub_100012A40(v6, (uint64_t)qword_10012D1A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v26, v6);

  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Handling hidden app updates", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v31 = objc_msgSend((id)objc_opt_self(APApplication), "hiddenAppBundleIdentifiers");
  v32 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v31, type metadata for String, &protocol witness table for String);

  sub_100065394();
  sub_1000958B4();
  v34 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10009563C(v35, v32);
  v37 = v36;
  v38 = swift_allocObject(&unk_10011D798, 24, 7);
  *(_QWORD *)(v38 + 16) = _swiftEmptyArrayStorage;
  v39 = v38 + 16;
  v40 = &v25[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource];
  v41 = *sub_10000E858(&v25[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource], *(_QWORD *)&v25[OBJC_IVAR____TtC10LinkDaemon8Registry_applicationSource + 24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000B440C(v41, v34, v32, v38);
  v72[1] = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = *(_QWORD *)(v37 + 16);
  v74 = v40;
  v72[3] = v38;
  v72[2] = v37;
  if (v42)
  {
    v72[0] = v38 + 16;
    v43 = swift_bridgeObjectRetain();
    v44 = (unint64_t *)(v37 + 40);
    v43.n128_u64[0] = 136315138;
    v73 = v43;
    do
    {
      v45 = *(v44 - 1);
      v46 = *v44;
      v47 = swift_bridgeObjectRetain_n(*v44, 2);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc(12, -1);
        v51 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v82 = v51;
        *(_DWORD *)v50 = v73.n128_u32[0];
        swift_bridgeObjectRetain();
        *(_QWORD *)(v50 + 4) = sub_10000FBEC(v45, v46, (uint64_t *)&v82);
        swift_bridgeObjectRelease_n(v46, 3);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Will hide application %s", (uint8_t *)v50, 0xCu);
        swift_arrayDestroy(v51, 1);
        swift_slowDealloc(v51, -1, -1);
        swift_slowDealloc(v50, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v46, 2);
      }
      v44 += 2;
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease();
    v40 = v74;
    v39 = v72[0];
  }
  swift_beginAccess(v39, v76, 0, 0);
  v52 = *(_QWORD *)(*(_QWORD *)v39 + 16);
  if (v52)
  {
    v53 = *(_QWORD *)v39 + 32;
    v72[0] = *(_QWORD *)v39;
    v54 = swift_bridgeObjectRetain();
    v54.n128_u64[0] = 136315138;
    v73 = v54;
    do
    {
      sub_100019A60(v53, (uint64_t)&v82);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = swift_slowAlloc(12, -1);
        v59 = swift_slowAlloc(32, -1);
        v75 = v59;
        *(_DWORD *)v58 = v73.n128_u32[0];
        v61 = *((_QWORD *)&v83 + 1);
        v60 = v84;
        sub_10000E858(&v82, *((uint64_t *)&v83 + 1));
        v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v60 + 8) + 8))(v61);
        *(_QWORD *)(v58 + 4) = sub_10000FBEC(v62, v63, &v75);
        swift_bridgeObjectRelease();
        sub_10000E87C(&v82);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Will unhide application %s", (uint8_t *)v58, 0xCu);
        swift_arrayDestroy(v59, 1);
        v64 = v59;
        v40 = v74;
        swift_slowDealloc(v64, -1, -1);
        swift_slowDealloc(v58, -1, -1);

      }
      else
      {

        sub_10000E87C(&v82);
      }
      v53 += 40;
      --v52;
    }
    while (v52);
    swift_bridgeObjectRelease();
  }
  sub_10000E858(v40, *((_QWORD *)v40 + 3));
  v65 = sub_1000B4264();
  v67 = v66;
  sub_1000B36B4();
  swift_bridgeObjectRelease();
  sub_10001EA88(v65, v67);
  sub_10000E858(v40, *((_QWORD *)v40 + 3));
  swift_bridgeObjectRetain();
  v68 = sub_1000B4264();
  v70 = v69;
  sub_1000B3A20();
  swift_bridgeObjectRelease();
  sub_10001EA88(v68, v70);
  swift_release();
  return sub_10000E87C(v77);
}

int64_t sub_1000BAE64(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000BAF48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0 = sub_1000BE0C8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000BAF74(char a1)
{
  uint64_t *v1;

  return sub_10009BC74(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000BAF80(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

_QWORD *sub_1000BAFB8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013158(v2, v3);
  sub_10007ECC8(v4, v5);
  return a1;
}

uint64_t sub_1000BB018()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000BB03C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_10001B6C0(a1, a2, a3);
  sub_1000137A0(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_10000BFBC();
}

uint64_t sub_1000BB068(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  BOOL v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint8_t *v44;
  uint64_t v45;
  os_log_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  os_log_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint8_t *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  char v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70[2];
  _QWORD v71[3];
  uint64_t v72;
  _UNKNOWN **v73;

  v4 = type metadata accessor for Data.Iterator(0);
  v56 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v64 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v51 - v7;
  v9 = type metadata accessor for Logger(0);
  v63 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v61 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for LSLinkBundleSource();
  v73 = &off_10011D648;
  v71[0] = a1;
  sub_10000E858(v71, v72);
  swift_retain();
  v11 = sub_1000B4264();
  v13 = v12;
  v14 = sub_10006550C();
  v16 = v15;
  v17 = qword_100127D80;
  v18 = a2;
  v19 = v61;
  if (v17 != -1)
    swift_once(&qword_100127D80, sub_100063EF0);
  v20 = sub_100012A40(v9, (uint64_t)qword_10012CD38);
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v19, v20, v9);

  sub_10001EBF8(v11, v13);
  sub_10006AEA4(v14, v16);
  sub_10001EBF8(v11, v13);
  v21 = sub_10006AEA4(v14, v16);
  v22 = v9;
  v23 = Logger.logObject.getter(v21);
  v57 = static os_log_type_t.default.getter();
  v24 = os_log_type_enabled(v23, (os_log_type_t)v57);
  v25 = v16 >> 60;
  v62 = v14;
  if (v24)
  {
    v53 = v23;
    v59 = v16 >> 60;
    v54 = v22;
    v26 = (uint8_t *)swift_slowAlloc(22, -1);
    v27 = swift_slowAlloc(64, -1);
    v52 = v27;
    v58 = v26;
    *(_DWORD *)v26 = 136315394;
    v68 = 0;
    v69 = 0xE000000000000000;
    v70[0] = v27;
    sub_10001EBF8(v11, v13);
    Data.makeIterator()(v11, v13);
    v60 = v11;
    v55 = v13;
    sub_10001EA88(v11, v13);
    sub_10007EC94(&qword_10012AD98, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator);
    v29 = v28;
    dispatch thunk of IteratorProtocol.next()(v4, v28);
    if ((v67 & 1) == 0)
    {
      v65 = xmmword_1000EFAE0;
      do
      {
        v30 = v66;
        v31 = sub_10001BE7C(&qword_10012ADA0);
        v32 = swift_allocObject(v31, 72, 7);
        *(_OWORD *)(v32 + 16) = v65;
        *(_QWORD *)(v32 + 56) = &type metadata for UInt8;
        *(_QWORD *)(v32 + 64) = &protocol witness table for UInt8;
        *(_BYTE *)(v32 + 32) = v30;
        v33._countAndFlagsBits = String.init(format:_:)(0x786868323025, 0xE600000000000000);
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        dispatch thunk of IteratorProtocol.next()(v4, v29);
      }
      while (v67 != 1);
    }
    v34 = v58;
    v56 = *(_QWORD *)(v56 + 8);
    ((void (*)(char *, uint64_t))v56)(v8, v4);
    v68 = sub_10000FBEC(v68, v69, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
    swift_bridgeObjectRelease();
    v35 = v60;
    v13 = v55;
    sub_10001EA88(v60, v55);
    sub_10001EA88(v35, v13);
    *((_WORD *)v34 + 6) = 2080;
    if (v59 <= 0xE)
    {
      v68 = 0;
      v69 = 0xE000000000000000;
      v38 = v62;
      sub_10001EBF8(v62, v16);
      v39 = v64;
      Data.makeIterator()(v38, v16);
      sub_100013158(v38, v16);
      dispatch thunk of IteratorProtocol.next()(v4, v29);
      if ((v67 & 1) == 0)
      {
        v65 = xmmword_1000EFAE0;
        do
        {
          v40 = v66;
          v41 = sub_10001BE7C(&qword_10012ADA0);
          v42 = swift_allocObject(v41, 72, 7);
          *(_OWORD *)(v42 + 16) = v65;
          *(_QWORD *)(v42 + 56) = &type metadata for UInt8;
          *(_QWORD *)(v42 + 64) = &protocol witness table for UInt8;
          *(_BYTE *)(v42 + 32) = v40;
          v43._countAndFlagsBits = String.init(format:_:)(0x786868323025, 0xE600000000000000);
          String.append(_:)(v43);
          v39 = v64;
          swift_bridgeObjectRelease();
          dispatch thunk of IteratorProtocol.next()(v4, v29);
        }
        while (v67 != 1);
      }
      ((void (*)(char *, uint64_t))v56)(v39, v4);
      v37 = v68;
      v36 = v69;
      v13 = v55;
    }
    else
    {
      v36 = 0xE400000000000000;
      v37 = 1701736302;
    }
    v44 = v58;
    v68 = sub_10000FBEC(v37, v36, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
    swift_bridgeObjectRelease();
    v45 = v62;
    sub_100013158(v62, v16);
    sub_100013158(v45, v16);
    v46 = v53;
    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v57, "Application source version: %s\nMetadata store version: %s", v44, 0x16u);
    v47 = v52;
    swift_arrayDestroy(v52, 2);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v44, -1, -1);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v54);
    v25 = v59;
    v11 = v60;
  }
  else
  {
    sub_10001EA88(v11, v13);
    sub_10001EA88(v11, v13);
    sub_100013158(v14, v16);
    sub_100013158(v14, v16);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v19, v22);
  }
  if (v25 <= 0xE)
  {
    sub_10001EBF8(v11, v13);
    v49 = v62;
    sub_10006AEA4(v62, v16);
    v48 = static Data.== infix(_:_:)(v11);
    sub_100013158(v49, v16);
    sub_100013158(v49, v16);
    sub_10001EA88(v11, v13);
    sub_10001EA88(v11, v13);
  }
  else
  {
    sub_100013158(v11, v13);
    sub_100013158(v62, v16);
    v48 = 0;
  }
  sub_10000E87C(v71);
  return v48 & 1;
}

uint64_t sub_1000BB744(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v9 = sub_10001795C(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_100019A48(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1000BB7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LNBundleRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BB800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000362E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0 = sub_1000BE3D0();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1000BB828()
{
  sub_1000B3FD4();
}

void sub_1000BB864()
{
  sub_1000B3FD4();
}

uint64_t sub_1000BB8A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BB8E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10002AB74);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_1000BB92C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10002AB74);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_1000BB96C()
{
  uint64_t v0;

  sub_100072170();
  _Block_release(*(const void **)(v0 + 32));
  sub_1000BE900();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000BB998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  sub_10000FE70();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(void **)(v0 + 32);
  v4 = *(void **)(v0 + 40);
  v6 = (_QWORD *)sub_100010B24();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10002AB74;
  return ((uint64_t (*)(uint64_t, char, void *, void *))((char *)&dword_10012AE70 + dword_10012AE70))(v2, v3, v5, v4);
}

uint64_t sub_1000BBA10()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10002AB74);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_1000BBA54()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BBA98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10000EC34);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BBADC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BBB20()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10000FE70();
  sub_1000BEEAC();
  v1 = (_QWORD *)sub_100010B24();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1000192C4(v1, (uint64_t)sub_10002AB74);
  return sub_100011078(v2, v3, v4, v5, v6);
}

uint64_t sub_1000BBB60()
{
  uint64_t v0;

  sub_100072170();
  sub_10000E040();
  sub_1000BE22C();
  sub_1000BE900();
  _Block_release(*(const void **)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000BBB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  sub_1000BE2D0();
  v11 = (_QWORD *)swift_task_alloc(dword_10012AF94);
  *(_QWORD *)(v10 + 16) = v11;
  *v11 = v10;
  v11[1] = sub_10002AB74;
  sub_1000BE298();
  return v18(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t sub_1000BBC18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = swift_task_alloc(dword_10012AFB4);
  v5 = (_QWORD *)sub_10001BFC0(v4);
  *v5 = v1;
  v5[1] = sub_10002AB74;
  v6 = sub_1000BE36C();
  return sub_1000AF0C4(v6, v7, v8, v9, v10, v11, v2, v3);
}

uint64_t sub_1000BBCA0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_1000BDF70();
  sub_1000BE31C();
  v1 = (_QWORD *)sub_1000BE8E0();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1000121EC(v1, (uint64_t)sub_10002AB74);
  return sub_1000BDBD0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000BBCE0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000BE2D0();
  v1 = swift_task_alloc(dword_10012AFE4);
  v2 = (_QWORD *)sub_10001BFC0(v1);
  *v2 = v0;
  v2[1] = sub_10002AB74;
  sub_1000BE36C();
  sub_1000BE298();
  return sub_1000AE918(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000BBD40(id *a1)
{
  uint64_t v1;

  return sub_1000AFA18(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1000BBD60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10000FE70();
  sub_1000BEEAC();
  v1 = (_QWORD *)sub_100010B24();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1000192C4(v1, (uint64_t)sub_10002AB74);
  return sub_100011078(v2, v3, v4, v5, v6);
}

uint64_t sub_1000BBDA4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_1000BDF70();
  sub_1000BE31C();
  v1 = (_QWORD *)sub_1000BE8E0();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1000121EC(v1, (uint64_t)sub_10002AB74);
  return sub_1000BDBD0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000BBDE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  id v16;
  id v17;
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    v16 = a5;
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a11);
    v17 = a12;
    return swift_bridgeObjectRetain(a13);
  }
  return result;
}

_QWORD *sub_1000BBE68(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return a1;
}

uint64_t sub_1000BBEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);

    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);

    return swift_bridgeObjectRelease(a13);
  }
  return result;
}

uint64_t sub_1000BBF44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BBF88()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10000FE70();
  sub_1000BEEAC();
  v1 = (_QWORD *)sub_100010B24();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1000192C4(v1, (uint64_t)sub_10002AB74);
  return sub_100011078(v2, v3, v4, v5, v6);
}

uint64_t sub_1000BBFCC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10002AB74);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_1000BC010()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BC054()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BC098()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10002AB74);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_1000BC0DC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BC120()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BC164()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10002AB74);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_1000BC1A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10002AB74);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_1000BC1EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10002AB74);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_1000BC230()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BC274()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BC2B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BC2FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100072170();
  _Block_release(*(const void **)(v0 + 24));
  sub_1000BE22C();
  v1 = sub_1000BE0C8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000BC320()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_1000BDD0C();
  v1 = (_QWORD *)sub_1000BDCEC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100016640(v1, (uint64_t)sub_10002AB74);
  return sub_100013E00(v2, v3, v4, v5);
}

uint64_t sub_1000BC364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100072170();
  sub_10000E040();
  sub_1000BE22C();
  _Block_release(*(const void **)(v0 + 40));

  v1 = sub_1000BE3D0();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000BC394()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_1000BDF70();
  sub_1000BE31C();
  v1 = (_QWORD *)sub_1000BE8E0();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1000121EC(v1, (uint64_t)sub_10002AB74);
  return sub_1000BDBD0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000BC3D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100072170();
  sub_1000BE22C();
  _Block_release(*(const void **)(v0 + 40));

  v1 = sub_1000BE3D0();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000BC400()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_1000BDF70();
  sub_1000BE31C();
  v1 = (_QWORD *)sub_1000BE8E0();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1000121EC(v1, (uint64_t)sub_10002AB74);
  return sub_1000BDBD0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000BC444()
{
  uint64_t v0;

  sub_100072170();
  sub_10000E040();
  _Block_release(*(const void **)(v0 + 32));
  sub_1000BE900();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000BC474()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10000FE70();
  sub_1000BEEAC();
  v1 = (_QWORD *)sub_100010B24();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1000192C4(v1, (uint64_t)sub_10002AB74);
  return sub_100011078(v2, v3, v4, v5, v6);
}

uint64_t sub_1000BC4B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_10001A928();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10001F774(v1, (uint64_t)sub_10002AB74);
  return sub_10001898C(v2, v3, v4);
}

uint64_t sub_1000BC4F8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BC51C()
{
  uint64_t v0;

  sub_1000362E8();
  sub_1000BE900();
  swift_release();

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000BC550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v11 = swift_task_alloc(dword_10012B2DC);
  v12 = (_QWORD *)sub_10001BFC0(v11);
  *v12 = v2;
  v12[1] = sub_10002AB74;
  return sub_1000A25F0(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1000BC5E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc(dword_10012B2FC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000EC34;
  v2 = sub_100019430();
  return sub_1000A047C(v2, v3);
}

_QWORD *sub_1000BC62C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a1[2];
  v13 = a1[1];
  v14 = a1[4];
  v2 = a1[6];
  v3 = a1[7];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[10];
  v8 = a1[12];
  v7 = a1[13];
  v9 = a1[14];
  v10 = a1[15];
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

id sub_1000BC704@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000A14A8(a1, *(_QWORD **)(v2 + 16), a2);
}

_QWORD *sub_1000BC720(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006AEA4(v2, v3);
  sub_10005A6C8(v4, v5);
  return a1;
}

uint64_t sub_1000BC784(uint64_t a1)
{
  sub_100013158(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000BC7B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000BE070();
  v0 = swift_task_alloc(dword_10012B324);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_10001A8CC(v1);
  return sub_10009D40C(v2, v3, v4, v5);
}

uint64_t sub_1000BC800(uint64_t a1)
{
  return sub_100096C08(a1);
}

uint64_t sub_1000BC808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100013158(a4, a5);
    return sub_10007ECC8(a7, a8);
  }
  return result;
}

uint64_t sub_1000BC870(uint64_t a1)
{
  uint64_t v1;

  return sub_10009D014(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000BC878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_10001BE7C(&qword_10012B348);
  sub_100011110(*(_QWORD *)(v0 - 8));
  v1 = sub_1000BEA10();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000BC8D0(uint64_t a1)
{
  sub_10001BE7C(&qword_10012B348);
  return sub_10009D1C4(a1);
}

uint64_t sub_1000BC914()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000BE070();
  v0 = swift_task_alloc(dword_10012B354);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_10001A8CC(v1);
  return sub_10009D224(v2, v3, v4, v5);
}

uint64_t sub_1000BC960(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[4];

  v2 = a2[1];
  v5[0] = *a2;
  v5[1] = v2;
  v3 = a2[3];
  v5[2] = a2[2];
  v5[3] = v3;
  return sub_1000967C4(a1, (char *)v5);
}

uint64_t sub_1000BC990()
{
  uint64_t v0;

  return sub_1000BC960(*(_QWORD *)(v0 + 16), *(_OWORD **)(v0 + 24));
}

unint64_t sub_1000BC9A8()
{
  unint64_t result;

  result = qword_10012B360;
  if (!qword_10012B360)
  {
    result = swift_getWitnessTable(&unk_1000F1918, &type metadata for Registry.IndexingQueue.Change.ChangeError);
    atomic_store(result, (unint64_t *)&qword_10012B360);
  }
  return result;
}

uint64_t sub_1000BC9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000362E8();
  swift_release();
  v0 = sub_1000BE0C8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000BCA08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000BE070();
  v0 = swift_task_alloc(dword_10012B374);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_10001A8CC(v1);
  return sub_10009CE48(v2, v3, v4, v5);
}

uint64_t sub_1000BCA54()
{
  uint64_t v0;

  return sub_1000B99EC(*(_QWORD *)(v0 + 16), *(_OWORD **)(v0 + 24));
}

uint64_t sub_1000BCA6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1000BE22C();
  v0 = sub_1000BE0C8();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1000BCA8C()
{
  uint64_t v0;

  sub_1000B12A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000BCA9C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000BE070();
  v0 = swift_task_alloc(dword_10012B3BC);
  v1 = (_QWORD *)sub_10001BFC0(v0);
  v2 = sub_10001A8CC(v1);
  return sub_100099CF0(v2, v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for Registry.IndexingQueue.Change.ChangeError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000BCB28 + 4 * byte_1000F1517[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000BCB48 + 4 * byte_1000F151C[v4]))();
}

_BYTE *sub_1000BCB28(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000BCB48(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000BCB50(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000BCB58(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000BCB60(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000BCB68(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Registry.IndexingQueue.Change.ChangeError()
{
  return &type metadata for Registry.IndexingQueue.Change.ChangeError;
}

uint64_t *sub_1000BCB84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v12);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain(v8);
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_9;
      case 1u:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        swift_bridgeObjectRetain(v13);
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_9;
      case 2u:
        v14 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_9;
      case 3u:
        v15 = *a2;
        swift_errorRetain(v15);
        *a1 = v15;
        v9 = a1;
        v10 = a3;
        v11 = 3;
LABEL_9:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000BCCAC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
      result = swift_bridgeObjectRelease(a1[1]);
      break;
    case 2:
      v4 = type metadata accessor for UUID(0);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 3:
      result = swift_errorRelease(*a1);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_1000BCD34(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_7;
    case 1u:
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_7;
    case 2u:
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_7;
    case 3u:
      v12 = *a2;
      swift_errorRetain(v12);
      *a1 = v12;
      v7 = a1;
      v8 = a3;
      v9 = 3;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_1000BCE34(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_10001DBC8((uint64_t)a1, type metadata accessor for RegistryError);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v6 = a1;
        v7 = a3;
        v8 = 0;
        goto LABEL_8;
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v6 = a1;
        v7 = a3;
        v8 = 1;
        goto LABEL_8;
      case 2u:
        v9 = type metadata accessor for UUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v6 = a1;
        v7 = a3;
        v8 = 2;
        goto LABEL_8;
      case 3u:
        v10 = *a2;
        swift_errorRetain();
        *a1 = v10;
        v6 = a1;
        v7 = a3;
        v8 = 3;
LABEL_8:
        swift_storeEnumTagMultiPayload(v6, v7, v8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_1000BCF5C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1000BCFE8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10001DBC8((uint64_t)a1, type metadata accessor for RegistryError);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000BD098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000BD0A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1000F1710;
  v4[1] = &unk_1000F1710;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1000F1728;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v4);
    return 0;
  }
  return result;
}

_QWORD *sub_1000BD120(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    if (sub_10001C93C((uint64_t)v10, 1, v11))
    {
      v12 = sub_10001BE7C(&qword_100128740);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      sub_100014360((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[6];
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = *v16;
    v18 = v16[1];
    sub_10001EBF8(*v16, v18);
    *v15 = v17;
    v15[1] = v18;
    v19 = a3[7];
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)v4 + v23) = *((_BYTE *)a2 + v23);
  }
  return v4;
}

_QWORD *sub_1000BD278(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = sub_10001C93C((uint64_t)v7, 1, v9);
  v11 = sub_10001C93C((uint64_t)v8, 1, v9);
  if (!v10)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = sub_10001BE7C(&qword_100128740);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  sub_100014360((uint64_t)v7, 0, 1, v9);
LABEL_7:
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_10001EBF8(*v16, v18);
  v19 = *v15;
  v20 = v15[1];
  *v15 = v17;
  v15[1] = v18;
  sub_10001EA88(v19, v20);
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_1000BD408(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  if (sub_10001C93C((uint64_t)v8, 1, v9))
  {
    v10 = sub_10001BE7C(&qword_100128740);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    sub_100014360((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  return a1;
}

_QWORD *sub_1000BD50C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = sub_10001C93C((uint64_t)v8, 1, v10);
  v12 = sub_10001C93C((uint64_t)v9, 1, v10);
  if (!v11)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = sub_10001BE7C(&qword_100128740);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  sub_100014360((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = a3[6];
  v16 = *(_QWORD *)((char *)a1 + v15);
  v17 = *(_QWORD *)((char *)a1 + v15 + 8);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  sub_10001EA88(v16, v17);
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
  return a1;
}

void sub_1000BD678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10001000C();
  }
  else
  {
    v6 = sub_10001BE7C(&qword_100128740);
    if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v6;
      v8 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = sub_1000BE20C();
      v8 = *(int *)(a3 + 28);
    }
    sub_10001C93C(a1 + v8, a2, v7);
  }
}

void sub_1000BD708(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_10001000C();
  }
  else
  {
    v8 = sub_10001BE7C(&qword_100128740);
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = sub_1000BE20C();
      v10 = *(int *)(a4 + 28);
    }
    sub_100014360(a1 + v10, a2, a2, v9);
  }
}

void sub_1000BD794(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = &unk_1000F1710;
  sub_100050454(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_1000F1758;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1000F1770;
      v6[5] = &unk_1000F1788;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

void sub_1000BD840()
{
  sub_10007EC94(&qword_10012AD08, type metadata accessor for RegistryError);
}

unint64_t sub_1000BD874()
{
  unint64_t result;

  result = qword_10012B530;
  if (!qword_10012B530)
  {
    result = swift_getWitnessTable(&unk_1000F18F0, &type metadata for Registry.IndexingQueue.Change.ChangeError);
    atomic_store(result, (unint64_t *)&qword_10012B530);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LSLinkBundleRecord.RecordType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LSLinkBundleRecord.RecordType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000BD984 + 4 * byte_1000F1536[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000BD9B8 + 4 * byte_1000F1531[v4]))();
}

uint64_t sub_1000BD9B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BD9C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BD9C8);
  return result;
}

uint64_t sub_1000BD9D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BD9DCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000BD9E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BD9E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LSLinkBundleRecord.RecordType()
{
  return &type metadata for LSLinkBundleRecord.RecordType;
}

unint64_t sub_1000BDA08()
{
  unint64_t result;

  result = qword_10012B540;
  if (!qword_10012B540)
  {
    result = swift_getWitnessTable(&unk_1000F19F4, &type metadata for LSLinkBundleRecord.RecordType);
    atomic_store(result, (unint64_t *)&qword_10012B540);
  }
  return result;
}

uint64_t sub_1000BDA54(id *a1)
{
  return sub_1000BBD40(a1) & 1;
}

id sub_1000BDA70@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000BC704(a1, a2);
}

uint64_t sub_1000BDAA0()
{
  return sub_10009A194();
}

uint64_t sub_1000BDAB0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_1000BDABC(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000BDAD8()
{
  uint64_t v0;

}

uint64_t sub_1000BDAF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 64);
  *v4 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  return swift_task_dealloc(v5);
}

void sub_1000BDB1C()
{
  uint64_t v0;

}

uint64_t sub_1000BDB30@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000BDB3C(uint64_t a1)
{
  char v1;

  *(_BYTE *)(a1 + 32) = v1;
  return String.init(format:_:)(0x786868323025, 0xE600000000000000);
}

uint64_t sub_1000BDB54(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000BDB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v10);
}

uint64_t sub_1000BDB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  unint64_t v6;
  va_list va;

  va_start(va, a5);
  return sub_10000FBEC(v5, v6, (uint64_t *)va);
}

void sub_1000BDB84()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_10001DBC8(v0, v1);
}

void sub_1000BDB90(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_1000207A8(v4, v3, a3);
}

void sub_1000BDB9C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  sub_10000DE64(0, a2, a3);
}

uint64_t sub_1000BDBA4(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_1000BDBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000BDBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

void sub_1000BDBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_1000207A8(v2, a2, v3);
}

uint64_t sub_1000BDBF4()
{
  return swift_willThrow();
}

void sub_1000BDBFC(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_10007EC94(a1, v1);
}

uint64_t sub_1000BDC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a11;
}

uint64_t sub_1000BDC14()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000BDC20()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BDC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000BDC54(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  return sub_10000FBEC(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000BDC60()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[68] + 8))(v0[69], v0[67]);
}

BOOL sub_1000BDC74(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000BDCA4()
{
  return 0;
}

uint64_t sub_1000BDCC0()
{
  return sub_10009A194();
}

void sub_1000BDCCC()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_10001DBC8(v0, v1);
}

uint64_t sub_1000BDCD8()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000BDCE0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BDCEC()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_1000BDCF4(uint64_t a1, uint64_t a2)
{
  return sub_100004C84(a1, a2);
}

uint64_t sub_1000BDD04()
{
  return swift_willThrow();
}

void sub_1000BDD18(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_10007EC94(a1, v1);
}

uint64_t sub_1000BDD20()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000BDD2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E858(a1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v2);
}

uint64_t sub_1000BDD50()
{
  return ((uint64_t (*)(void))Task<>.value.getter)();
}

uint64_t sub_1000BDD5C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000BDD68(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000BDD74@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000BDD80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E858(a1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v2);
}

void sub_1000BDDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_1000207A8(v2, a2, v3);
}

void sub_1000BDDB0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_10001DBC8(v0, v1);
}

_QWORD *sub_1000BDDBC()
{
  void (*v0)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v1;

  return sub_1000BBE68(v1, v0);
}

uint64_t sub_1000BDDC8(uint64_t a1, uint64_t a2)
{
  return sub_1000A1504(a1, a2);
}

uint64_t sub_1000BDDE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1000BDE00()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

_QWORD *sub_1000BDE10@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 144) = result;
  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000BDE4C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t sub_1000BDE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000BDE74(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000BDE90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BDEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100099FA4(a1, a2, a3);
}

uint64_t sub_1000BDEDC()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_1000BDEF8()
{
  return ((uint64_t (*)(void))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:))();
}

uint64_t sub_1000BDF14()
{
  return type metadata accessor for RegistryError(0);
}

uint64_t sub_1000BDF2C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

void sub_1000BDF38()
{
  uint64_t v0;

}

void sub_1000BDF40()
{
  Swift::String v0;

  v0._countAndFlagsBits = 34;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000BDF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001C93C(a1, a2, a3);
}

void sub_1000BDF60()
{
  uint64_t v0;

}

uint64_t sub_1000BDF68(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000BDF84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 96);
  *v4 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000BDFA8()
{
  sub_100013158(0, 0xF000000000000000);
  return sub_10007ECC8(0, 0);
}

uint64_t sub_1000BDFC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 160);
  *v4 = *v1;
  *(_QWORD *)(v3 + 168) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000BDFE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 104);
  *v4 = *v1;
  *(_QWORD *)(v3 + 112) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000BE008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return sub_1000A43D4(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1000BE01C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1000BE02C()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_1000BE03C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *result = v2;
  result[1] = a2;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 32);
  return result;
}

uint64_t sub_1000BE080@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Date(0);
}

_QWORD *sub_1000BE0B8()
{
  _QWORD *v0;

  return sub_1000BAFB8(v0);
}

uint64_t sub_1000BE0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_errorRelease(a15);
}

uint64_t sub_1000BE0C8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE0E8()
{
  return swift_task_alloc(32);
}

uint64_t sub_1000BE0F0()
{
  return swift_willThrow();
}

uint64_t sub_1000BE0F8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000BE104(double a1)
{
  uint64_t v1;

  *(double *)(v1 - 144) = a1;
  return Data.init(bytes:count:)(v1 - 144, 8);
}

void sub_1000BE120()
{
  uint64_t v0;

}

uint64_t sub_1000BE160(uint64_t a1)
{
  uint64_t v1;

  return sub_100014360(a1, 1, 1, v1);
}

id sub_1000BE17C()
{
  void *v0;

  return v0;
}

uint64_t sub_1000BE184()
{
  return type metadata accessor for LSLinkBundleRecord(0);
}

uint64_t sub_1000BE1A0()
{
  return type metadata accessor for OSSignpostID(0);
}

uint64_t sub_1000BE1BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE1E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1);
}

uint64_t sub_1000BE20C()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1000BE214(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_1000BE21C()
{
  return sub_10009A194();
}

void sub_1000BE224(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100019EB8(a1, a2, v2);
}

void sub_1000BE22C()
{
  uint64_t v0;

}

uint64_t sub_1000BE234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 368) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v10);
}

uint64_t sub_1000BE260(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of IteratorProtocol.next()(v1, a1);
}

void sub_1000BE2B0(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_10007EC94(a1, v1);
}

uint64_t sub_1000BE2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000A4844(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000BE2C4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

id sub_1000BE2E8(void *a1)
{
  const char *v1;

  return objc_msgSend(a1, v1);
}

__n128 sub_1000BE2F0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  __n128 result;

  result = a19;
  a1[1] = a19;
  return result;
}

uint64_t sub_1000BE300()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1000BE32C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a6 + 16) = a1;
  v10 = a6 + 16 * v6;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = v9;
  return v7;
}

uint64_t sub_1000BE34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 + 384) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, v10 + 392);
}

void sub_1000BE364(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_10001DBC8(v2, a2);
}

uint64_t sub_1000BE36C()
{
  uint64_t v0;

  return v0;
}

void sub_1000BE38C()
{
  sub_10001573C();
}

uint64_t sub_1000BE3A4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1000BE3AC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, 36, 2, a7, 17);
}

uint64_t sub_1000BE3D0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE3E0()
{
  uint64_t v0;

  return sub_1000BC784(v0);
}

uint64_t sub_1000BE3E8()
{
  uint64_t v0;

  return v0;
}

void *sub_1000BE3F4(int a1, int a2, int a3, void *aBlock)
{
  return _Block_copy(aBlock);
}

uint64_t sub_1000BE40C()
{
  return type metadata accessor for LSLinkBundleRecord(0);
}

uint64_t sub_1000BE414(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of IteratorProtocol.next()(a1, v1);
}

void sub_1000BE41C()
{
  uint64_t v0;

}

uint64_t sub_1000BE434(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

void sub_1000BE440()
{
  uint64_t v0;

}

_QWORD *sub_1000BE458()
{
  _QWORD *v0;

  return sub_1000BAFB8(v0);
}

void sub_1000BE460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_100053F70(v4 - 104, a3, a4);
}

void sub_1000BE474()
{
  _StringGuts.grow(_:)(23);
}

uint64_t sub_1000BE488()
{
  uint64_t v0;

  return swift_errorRelease(*(_QWORD *)(v0 + 696));
}

void sub_1000BE490()
{
  sub_10001573C();
}

void sub_1000BE4C0()
{
  uint64_t v0;

}

void sub_1000BE4C8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x12u);
}

uint64_t sub_1000BE4D0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_1000BE4E4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = *(_QWORD *)(a1 + v1);
}

uint64_t sub_1000BE4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100099FA4(a1, a2, a3);
}

uint64_t sub_1000BE4F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t sub_1000BE514()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 288));
}

uint64_t sub_1000BE528()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 288));
}

uint64_t sub_1000BE53C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  return a3(a1, a2, 0);
}

uint64_t sub_1000BE544()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of IteratorProtocol.next()(v0, v1);
}

uint64_t sub_1000BE558(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_1000BE564(uint64_t a1)
{
  uint64_t v1;

  return BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v1, a1);
}

uint64_t sub_1000BE578(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, a1, v1);
}

uint64_t sub_1000BE58C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, a1, v3);
}

void sub_1000BE5E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000131E0(v2, a2);
}

uint64_t sub_1000BE5EC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 584));
}

uint64_t sub_1000BE5F8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 152));
}

void sub_1000BE604()
{
  sub_10001573C();
}

uint64_t sub_1000BE618(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E858(a1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v2);
}

void sub_1000BE63C()
{
  sub_10001573C();
}

uint64_t sub_1000BE644()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE650()
{
  uint64_t v0;

  return v0;
}

void sub_1000BE65C()
{
  uint64_t v0;

}

uint64_t sub_1000BE670()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1000BE678()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE684()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE690()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BE69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;

  return sub_10004C85C(0, v4, a3, v3);
}

void sub_1000BE6B0()
{
  sub_10001573C();
}

uint64_t sub_1000BE6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000BE6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_bridgeObjectRelease(a18);
}

uint64_t sub_1000BE6EC()
{
  uint64_t v0;

  return swift_errorRelease(*(_QWORD *)(v0 - 72));
}

uint64_t sub_1000BE6F4()
{
  uint64_t v0;
  uint64_t v1;

  return Data.makeIterator()(v0, v1);
}

_QWORD *sub_1000BE71C(_QWORD *a1)
{
  return sub_10000E858(a1, a1[3]);
}

uint64_t sub_1000BE734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000BE744()
{
  return swift_willThrow();
}

void sub_1000BE74C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v1 + 16 * a1;
  *(_QWORD *)(v2 + 616) = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v2 + 624) = *(_QWORD *)(v3 + 40);
}

uint64_t sub_1000BE764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 688) = v2;
  *(_QWORD *)(v1 + 680) = v3;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000BE798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;

  *(_DWORD *)(v15 + 748) = v14;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a14, v15 + 752);
}

uint64_t sub_1000BE7B8()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_1000BE7D0()
{
  uint64_t v0;

  return sub_1000BC720(*(_QWORD **)(v0 + 480));
}

_QWORD *sub_1000BE7E0()
{
  uint64_t v0;

  return sub_1000BC720(*(_QWORD **)(v0 + 480));
}

uint64_t sub_1000BE7F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 24))(*(_QWORD *)(v0 + 40), 0);
}

uint64_t sub_1000BE800()
{
  uint64_t v0;

  return v0;
}

BOOL sub_1000BE810(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL sub_1000BE820(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000BE830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 152));
}

uint64_t sub_1000BE85C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_100013158(a1, a2);
  sub_10007ECC8(v2, v3);
  return swift_release();
}

uint64_t sub_1000BE87C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_10000FBEC(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000BE884()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
}

void sub_1000BE894()
{
  uint64_t v0;
  uint64_t v1;

  sub_100019A60(*(_QWORD *)(v0 + 440), v1);
}

uint64_t sub_1000BE8A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10000FBEC(a1, v3, a3);
}

uint64_t sub_1000BE8AC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 448));
}

void sub_1000BE8C0(Swift::String a1)
{
  String.append(_:)(a1);
}

unint64_t sub_1000BE8C8()
{
  uint64_t v0;

  return sub_100016064(v0);
}

void sub_1000BE8D8(void *a1, NSObject *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, a3, a4, a5, a6, a7, 2u);
}

uint64_t sub_1000BE8E0()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_1000BE8E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

id sub_1000BE8F0(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000BE8F8()
{
  return static os_log_type_t.default.getter();
}

void sub_1000BE900()
{
  uint64_t v0;

}

uint64_t sub_1000BE938(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

void sub_1000BE948(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;
  Swift::String v17;

  v17._countAndFlagsBits = v16;
  v17._object = v15;
  String.append(_:)(v17);
}

uint64_t sub_1000BE970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return Dictionary.init(dictionaryLiteral:)(v3, v4, a3, v5);
}

_QWORD *sub_1000BE980()
{
  _QWORD *v0;

  return sub_1000BC720(v0);
}

uint64_t sub_1000BE988()
{
  uint64_t v0;

  return sub_100053B08(v0);
}

uint64_t sub_1000BE998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000BE9A8()
{
  _QWORD *v0;

  return sub_10000E87C(v0);
}

id sub_1000BE9B0(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  return objc_msgSend(v3, a2, v2, v4);
}

_QWORD *sub_1000BE9C0()
{
  _QWORD *v0;

  return sub_1000BAFB8(v0);
}

_QWORD *sub_1000BE9C8()
{
  _QWORD *v0;

  return sub_1000BAFB8(v0);
}

void sub_1000BE9D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  sub_1000207A8(v2, a2, v3);
}

uint64_t sub_1000BE9E0()
{
  uint64_t v0;

  return v0;
}

void sub_1000BE9EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1000131E0(v2, a2);
}

uint64_t sub_1000BE9F4()
{
  uint64_t v0;

  return v0;
}

void sub_1000BEA00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_100019EB8(v0, v1, v2);
}

uint64_t sub_1000BEA10()
{
  uint64_t v0;

  return v0;
}

BOOL sub_1000BEA38@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000BEA48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10000FBEC(a1, v3, a3);
}

void sub_1000BEA50()
{
  uint64_t v0;

}

uint64_t sub_1000BEA58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

_QWORD *sub_1000BEA60()
{
  _QWORD *v0;

  return sub_1000BAFB8(v0);
}

uint64_t sub_1000BEA68(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

id sub_1000BEA74(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  a1[2] = v1;
  a1[3] = v3;
  a1[4] = v2;
  return v1;
}

uint64_t sub_1000BEA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return Dictionary.init(dictionaryLiteral:)(v4, v3, a3, v5);
}

uint64_t sub_1000BEA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return Dictionary.init(dictionaryLiteral:)(v5, v3, a3, v4);
}

uint64_t sub_1000BEAA4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return sub_10000FBEC(a1, a2, (uint64_t *)va);
}

void sub_1000BEAB0()
{
  uint64_t v0;

}

uint64_t sub_1000BEAB8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_1000BEAD8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
}

uint64_t sub_1000BEB08(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

void sub_1000BEB48(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 600) = a1;
}

void sub_1000BEB5C(uint64_t a1@<X8>)
{
  uint64_t v1;

  os_unfair_lock_lock((os_unfair_lock_t)(a1 + v1));
}

uint64_t sub_1000BEB68()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t sub_1000BEB88(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000BEB9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000BEBB0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = result;
  return result;
}

uint64_t sub_1000BEBBC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = result;
  return result;
}

uint64_t sub_1000BEBC8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = result;
  return result;
}

_QWORD *sub_1000BEC10@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 152) = result;
  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000BEC1C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 448) = result;
  return result;
}

uint64_t sub_1000BEC28(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 15);
}

uint64_t sub_1000BEC58()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100016184(v1 - 128, v0);
}

void sub_1000BEC70(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 152) = *(_QWORD *)(a1 + v1);
}

uint64_t sub_1000BEC7C(uint64_t a1)
{
  uint64_t v1;

  return v1 + *(int *)(a1 + 28);
}

void sub_1000BEC90()
{
  sub_100068880();
}

uint64_t sub_1000BEC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A82C(a1, a2, a3);
}

_QWORD *sub_1000BECA8(uint64_t a1, uint64_t a2)
{
  return sub_10006A5E4(a1, a2);
}

void sub_1000BECB4(uint64_t a1, uint64_t a2)
{
  sub_10006A000(a1, a2);
}

void sub_1000BECC0(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4)
{
  sub_100068F58(a1, a2, a3, a4);
}

void sub_1000BECCC()
{
  sub_100069A5C();
}

void sub_1000BECD8(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4)
{
  sub_100063B7C(a1, a2, a3, a4);
}

void sub_1000BECE4(NSString a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100068C1C(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1000BECF0()
{
  sub_1000696A8();
}

void sub_1000BECFC(uint64_t a1, uint64_t a2)
{
  sub_100063308(a1, a2);
}

void sub_1000BED08(uint64_t a1, uint64_t a2)
{
  sub_100068E20(a1, a2);
}

void sub_1000BED14(uint64_t a1, uint64_t a2)
{
  sub_1000207D4(a1, a2);
}

void sub_1000BED20()
{
  sub_1000699D8();
}

void sub_1000BED2C(void *a1)
{
  sub_1000691E8(a1);
}

void sub_1000BED38()
{
  sub_1000693D4();
}

void sub_1000BED44()
{
  sub_100069530();
}

void sub_1000BED50(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4)
{
  sub_1000697C0(a1, a2, a3, a4);
}

void sub_1000BED5C(uint64_t a1, uint64_t a2)
{
  sub_100020830(a1, a2);
}

void sub_1000BED68(uint64_t a1, uint64_t a2)
{
  sub_100069BAC(a1, a2);
}

void sub_1000BED74()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 720) = 3;
}

uint64_t sub_1000BED80()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 144));
}

uint64_t sub_1000BED98@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_1000BEDA4@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_1000BEDD8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000BEDE4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000BEDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_bridgeObjectRelease(a11);
}

uint64_t sub_1000BEDF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void sub_1000BEE04(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_1000BEE10@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_1000BEE18(uint64_t a1)
{
  uint64_t v1;

  sub_100019A60(a1, v1);
}

id sub_1000BEE20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(_QWORD *)(a1 + 32) = a2;
  return a2;
}

uint64_t sub_1000BEE28(uint64_t a1)
{
  uint64_t v1;

  return swift_initStackObject(a1, v1 - 128);
}

void sub_1000BEE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_100019EB8(a1, v1, v2);
}

void sub_1000BEE3C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_1000207A8(a1, v2, v1);
}

void sub_1000BEE48(unint64_t *a1)
{
  uint64_t *v1;

  sub_10007EC60(a1, v1);
}

uint64_t sub_1000BEE50()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BEE64()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;

  return v0(v1);
}

_QWORD *sub_1000BEE6C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_10009D994(a1, a2);
}

uint64_t sub_1000BEE78(uint64_t a1)
{
  uint64_t v1;

  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_1000BEE84(uint64_t a1)
{
  uint64_t v1;

  return String.init<A>(describing:)(v1, a1);
}

uint64_t sub_1000BEE90()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)(v0 + 64) + 4);
}

uint64_t sub_1000BEEA4(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

void sub_1000BEEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 16) = a13;
}

uint64_t sub_1000BEEE0()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000BEEFC()
{
  return swift_willThrow();
}

uint64_t sub_1000BEF04(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, v1, 1);
}

uint64_t sub_1000BEF24()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

uint64_t sub_1000BEF30@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void sub_1000BEF3C()
{
  void *v0;

}

uint64_t sub_1000BEF48()
{
  return URL.resourceValues(forKeys:)();
}

void sub_1000BEF50(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_10001DBC8(a1, v1);
}

uint64_t sub_1000BEF58()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

void sub_1000BEF60()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1000BEF6C()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_1000BEF74()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BEF80()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000BEF8C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10001EBF8(v1, v0);
}

uint64_t sub_1000BEF98()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100013158(v1, v0);
}

uint64_t sub_1000BEFA4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1000A1B28(v1, v0);
}

uint64_t sub_1000BEFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

void sub_1000BEFC8(uint64_t a1@<X8>)
{
  uint64_t v1;

  os_unfair_lock_lock((os_unfair_lock_t)(v1 + a1));
}

uint64_t sub_1000BEFD4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10001EA88(v1, v0);
}

uint64_t sub_1000BEFE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_10000FBEC(v4, v3, a3);
}

unint64_t *sub_1000BEFEC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100098630(v0, v1);
}

void sub_1000BEFF8()
{
  sub_1000B3FD4();
}

void sub_1000BF004()
{
  sub_100097080();
}

uint64_t sub_1000BF010()
{
  uint64_t *v0;

  return sub_10001BE7C(v0);
}

void sub_1000BF018()
{
  sub_1000B3FD4();
}

uint64_t sub_1000BF04C(uint64_t a1)
{
  unint64_t v1;

  return sub_10001EBF8(a1, v1);
}

uint64_t sub_1000BF054()
{
  _QWORD *v0;

  return sub_10000E87C(v0);
}

NSString sub_1000BF05C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000BF07C()
{
  uint64_t v0;

  return v0;
}

void sub_1000BF088()
{
  sub_1000958B4();
}

uint64_t sub_1000BF094()
{
  uint64_t v0;

  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_1000BF0A0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000BF0AC()
{
  return type metadata accessor for OSStateHandler();
}

uint64_t sub_1000BF0B8@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  uint64_t v1;

  return a1(v1);
}

uint64_t sub_1000BF0C4()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_1000BF0D8()
{
  _QWORD *v0;
  void (*v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  return sub_1000BBE68(v0, v1);
}

void sub_1000BF0E4()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_10001DBC8(v0, v1);
}

void sub_1000BF0F0()
{
  void *v0;

}

_QWORD *sub_1000BF10C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 160) = result;
  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000BF118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;

  sub_1000BF6D8((uint64_t)v53);
  if (a2)
  {
    sub_10000E858(v53, v54);
    if (qword_100127EF0 != -1)
      swift_once(&qword_100127EF0, sub_1000BF668);
    sub_10001768C((uint64_t)&qword_10012D2A0);
    == infix<A>(_:_:)();
    sub_1000189E0(v8, v9, v10, v11, v12, v13, v14, v15, a1, a2, v44, v47, v50);
    sub_1000183A8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = sub_10000E87C(v53);
    sub_10001B2C4(v16, v17, v18, v19, v20, v21, v22, v23, v42, v45, v48, v51, v53[0]);
  }
  if (a4)
  {
    sub_10000E858(v53, v54);
    if (qword_100127EF8 != -1)
      swift_once(&qword_100127EF8, sub_1000BF68C);
    sub_10001768C((uint64_t)&qword_10012D2B8);
    == infix<A>(_:_:)();
    sub_1000189E0(v24, v25, v26, v27, v28, v29, v30, v31, a3, a4, v44, v47, v50);
    sub_1000183A8();
    swift_bridgeObjectRelease();
    sub_1000059C4();
    v32 = sub_10000E87C(v53);
    sub_10001B2C4(v32, v33, v34, v35, v36, v37, v38, v39, v43, v46, v49, v52, v53[0]);
  }
  v40 = sub_1000BFC30(v53);
  sub_10000E87C(v53);
  return v40;
}

uint64_t sub_1000BF300(uint64_t a1, void *a2)
{
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[112];
  Swift::String v34;
  _QWORD v35[10];
  _QWORD v36[2];
  int v37;
  uint64_t v38;
  _QWORD v39[21];
  _QWORD v40[21];
  SQLite::Insert v41;

  v5 = LNExamplePhraseDescription.asJson()();
  result = v5._countAndFlagsBits;
  if (!v6)
  {
    if (qword_100127EE8 != -1)
      swift_once(&qword_100127EE8, sub_1000BF60C);
    sub_1000189C4(v39, &unk_10012D1F8);
    sub_1000189C4(v36, &unk_10012D1F8);
    sub_1000379AC(v39);
    if (qword_100127EF0 != -1)
      swift_once(&qword_100127EF0, sub_1000BF668);
    v7 = sub_10001768C((uint64_t)&qword_10012D2A0);
    v34._countAndFlagsBits = a1;
    v34._object = a2;
    <- infix<A>(_:_:)(v7, v8, v9, (uint64_t)&v34, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
    v10 = sub_10001BE7C(&qword_100128D08);
    inited = swift_initStackObject(v10, v33);
    *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
    if (qword_100127F00 != -1)
      swift_once(&qword_100127F00, sub_1000BF6B0);
    v12 = sub_10001768C((uint64_t)&qword_10012D2D0);
    v34 = v5;
    <- infix<A>(_:_:)(v12, v13, v14, (uint64_t)&v34, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease();
    v15 = QueryType.insert(_:_:)((uint64_t)v35);
    v17 = v16;
    v19 = v18;
    swift_setDeallocating(inited);
    sub_10001CC3C();
    sub_100019F20(v35);
    sub_1000189C4(v40, v36);
    sub_100037A7C(v40);
    v41.template._countAndFlagsBits = v15;
    v41.template._object = v17;
    v41.bindings._rawValue = v19;
    Connection.run(_:)(v41);
    if (v20)
    {
      swift_bridgeObjectRelease();
      sub_1000059C4();
      v35[0] = v20;
      swift_errorRetain(v20);
      v21 = sub_10001BE7C((uint64_t *)&unk_100129420);
      if (swift_dynamicCast(v36, v35, v21, &type metadata for Result, 0))
      {
        swift_errorRelease(v20);
        v22 = v36[1];
        v23 = v37;
        v24 = v38;
        if (v37 == 19)
        {
          v25 = type metadata accessor for Schema.RuntimeError(0);
          v26 = sub_10004FC7C();
          sub_1000176B0(v25, v26);
          *v27 = 0xD0000000000000FALL;
          v27[1] = 0x80000001000F4190;
          v28 = swift_storeEnumTagMultiPayload(v27, v25, 0);
          swift_willThrow(v28);
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          v29 = v36[0];
          v30 = sub_10004FC40();
          v31 = sub_1000176B0((uint64_t)&type metadata for Result, v30);
          *(_QWORD *)v32 = v29;
          *(_QWORD *)(v32 + 8) = v22;
          *(_DWORD *)(v32 + 16) = v23;
          *(_QWORD *)(v32 + 24) = v24;
          swift_willThrow(v31);
        }
      }
      return swift_errorRelease(v35[0]);
    }
    else
    {
      swift_bridgeObjectRelease();
      return sub_1000059C4();
    }
  }
  return result;
}

void *sub_1000BF60C()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0x50656C706D617865, 0xEE00736573617268, 0, 0);
  return memcpy(&unk_10012D1F8, __src, 0xA8uLL);
}

uint64_t sub_1000BF668(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012D2A0, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_1000BF68C(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012D2B8, 0xD000000000000010, 0x80000001000F44D0);
}

uint64_t sub_1000BF6B0(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012D2D0, 0x7470697263736564, 0xEB000000006E6F69);
}

uint64_t sub_1000BF6D8@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _UNKNOWN **v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  ValueMetadata *v143;
  _UNKNOWN **v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166[21];
  _QWORD v167[21];
  _QWORD v168[22];

  if (qword_100127EE8 != -1)
    swift_once(&qword_100127EE8, sub_1000BF60C);
  v1 = sub_1000189C4(v166, &unk_10012D1F8);
  sub_1000185A8((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v100, v106, a1, (uint64_t)v119, v120, v121, v122, (uint64_t)v123, v124, v125, v126,
    v127,
    v128,
    v129,
    v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142,
    (uint64_t)v143,
    (uint64_t)v144,
    v145,
    v146,
    v147,
    v148,
    v149,
    v150,
    v151,
    v152,
    v153,
    v154,
    v155,
    v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  if (qword_100127F28 != -1)
    swift_once(&qword_100127F28, sub_1000C4370);
  sub_1000189C4(v167, &unk_10012D3D0);
  sub_1000189C4(v168, v166);
  sub_1000163BC();
  if (qword_100127EF0 != -1)
    swift_once(&qword_100127EF0, sub_1000BF668);
  v9 = qword_10012D2A0;
  v10 = *(_QWORD *)algn_10012D2A8;
  v11 = qword_10012D2B0;
  v12 = sub_1000189C4(&v145, v166);
  sub_1000185A8((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v101, v107, v113, (uint64_t)v119, v120, v121, v122, (uint64_t)v123, v124, v125, v126,
    v127,
    v128,
    v129,
    v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142,
    (uint64_t)v143,
    (uint64_t)v144,
    v145,
    v146,
    v147,
    v148,
    v149,
    v150,
    v151,
    v152,
    v153,
    v154,
    v155,
    v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  v20 = QueryType.namespace<A>(_:)(v9, v10, v11, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_10001AEF4(v20, v21, v22, v23, v24, v25, v26, v27, v102, v108, v114, (uint64_t)v119, v120, v121, v122, (uint64_t)v123, v124, v125, v126,
    v127,
    v128,
    v129,
    v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142,
    (uint64_t)v143,
    (uint64_t)v144,
    v145,
    v146,
    v147,
    v148,
    v149,
    v150,
    v151,
    v152,
    v153,
    v154,
    v155,
    v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  v28 = sub_10001BE7C(&qword_100128D00);
  v122 = v28;
  v123 = &protocol witness table for Expression<A>;
  v119 = &v145;
  v120 = v9;
  v121 = v10;
  v29 = sub_10001BE7C(&qword_100128D58);
  v30 = swift_allocObject(v29, 152, 7);
  *(_OWORD *)(v30 + 16) = xmmword_1000EFDA0;
  if (qword_100127EF8 != -1)
    swift_once(&qword_100127EF8, sub_1000BF68C);
  v31 = qword_10012D2B8;
  v32 = unk_10012D2C0;
  v33 = qword_10012D2C8;
  v34 = sub_1000189C4(&v145, v166);
  sub_1000185A8((uint64_t)v34, v35, v36, v37, v38, v39, v40, v41, v103, v109, v115, (uint64_t)v119, v120, v121, v122, (uint64_t)v123, v124, v125, v126,
    v127,
    v128,
    v129,
    v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142,
    (uint64_t)v143,
    (uint64_t)v144,
    v145,
    v146,
    v147,
    v148,
    v149,
    v150,
    v151,
    v152,
    v153,
    v154,
    v155,
    v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  v42 = QueryType.namespace<A>(_:)(v31, v32, v33, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  sub_10001AEF4(v42, v43, v44, v45, v46, v47, v48, v49, v104, v110, v116, (uint64_t)v119, v120, v121, v122, (uint64_t)v123, v124, v125, v126,
    v127,
    v128,
    v129,
    v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142,
    (uint64_t)v143,
    (uint64_t)v144,
    v145,
    v146,
    v147,
    v148,
    v149,
    v150,
    v151,
    v152,
    v153,
    v154,
    v155,
    v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  *(_QWORD *)(v30 + 56) = v28;
  *(_QWORD *)(v30 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v30 + 32) = &v145;
  *(_QWORD *)(v30 + 40) = v31;
  *(_QWORD *)(v30 + 48) = v32;
  if (qword_100127F00 != -1)
    swift_once(&qword_100127F00, sub_1000BF6B0);
  v50 = qword_10012D2D0;
  v51 = *(_QWORD *)algn_10012D2D8;
  v52 = qword_10012D2E0;
  v53 = sub_1000189C4(&v145, v166);
  sub_1000185A8((uint64_t)v53, v54, v55, v56, v57, v58, v59, v60, v105, v111, v117, (uint64_t)v119, v120, v121, v122, (uint64_t)v123, v124, v125, v126,
    v127,
    v128,
    v129,
    v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    v136,
    v137,
    v138,
    v139,
    v140,
    v141,
    v142,
    (uint64_t)v143,
    (uint64_t)v144,
    v145,
    v146,
    v147,
    v148,
    v149,
    v150,
    v151,
    v152,
    v153,
    v154,
    v155,
    v156,
    v157,
    v158,
    v159,
    v160,
    v161,
    v162,
    v163,
    v164,
    v165,
    v166[0]);
  v62 = sub_1000177A8(v50, v51, v52, v61, (uint64_t)&type metadata for String);
  v64 = v63;
  v66 = v65;
  sub_100037A7C(v166);
  *(_QWORD *)(v30 + 96) = v28;
  *(_QWORD *)(v30 + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v30 + 72) = v62;
  *(_QWORD *)(v30 + 80) = v64;
  *(_QWORD *)(v30 + 88) = v66;
  if (qword_100127F50 != -1)
    swift_once(&qword_100127F50, sub_1000C45D8);
  v67 = qword_10012D4A8;
  v68 = unk_10012D4B0;
  v69 = qword_10012D4B8;
  sub_1000189C4(&v145, v167);
  sub_1000163BC();
  v71 = sub_1000177A8(v67, v68, v69, v70, (uint64_t)&type metadata for Int);
  v73 = v72;
  v75 = v74;
  sub_100037A7C(v167);
  *(_QWORD *)(v30 + 136) = sub_10001BE7C(&qword_100129560);
  *(_QWORD *)(v30 + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v30 + 112) = v71;
  *(_QWORD *)(v30 + 120) = v73;
  *(_QWORD *)(v30 + 128) = v75;
  SchemaType.select(_:_:)((uint64_t)&v119, v30, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  swift_setDeallocating(v30);
  sub_10001E778();
  sub_10000E87C(&v119);
  sub_1000189C4(v168, &v145);
  v143 = &type metadata for Table;
  v144 = &protocol witness table for Table;
  v140 = sub_1000058D0((uint64_t)&unk_10011E1A8);
  sub_1000189C4((void *)(v140 + 16), v167);
  v76 = qword_10012D2A0;
  v77 = *(_QWORD *)algn_10012D2A8;
  v78 = qword_10012D2B0;
  sub_1000189C4(&v119, v166);
  sub_1000163BC();
  sub_1000177A8(v76, v77, v78, v79, (uint64_t)&type metadata for String);
  v81 = v80;
  v83 = v82;
  sub_100037A7C(v166);
  if (qword_100127F30 != -1)
    swift_once(&qword_100127F30, sub_1000C43C0);
  v84 = qword_10012D478;
  v85 = unk_10012D480;
  v86 = qword_10012D488;
  sub_1000189C4(&v119, v167);
  QueryType.namespace<A>(_:)(v84, v85, v86, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  v88 = v87;
  v90 = v89;
  sub_100037A7C(v167);
  == infix<A>(_:_:)();
  v92 = v91;
  v94 = v93;
  v96 = v95;
  swift_bridgeObjectRelease(v83);
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v90);
  swift_bridgeObjectRelease(v88);
  v118[3] = (uint64_t)&type metadata for Table;
  v118[4] = (uint64_t)&protocol witness table for Table;
  v97 = sub_1000058D0((uint64_t)&unk_10011E1A8);
  v98 = v97 + 16;
  *v118 = v97;
  sub_1000189C4(&v119, v168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.join(_:_:on:)(1, &v140, v92, v94, v96, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, v98);
  swift_bridgeObjectRelease_n(v96, 2);
  swift_bridgeObjectRelease_n(v94, 2);
  sub_100037A7C(v168);
  return sub_10000E87C(&v140);
}

uint64_t sub_1000BFC30(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = Connection.prepareRowIterator(_:)(a1);
  if (!v1)
  {
    __chkstk_darwin(v3);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    v2 = v5;
    swift_release();
    sub_10001E250();
    swift_release();
  }
  return v2;
}

uint64_t sub_1000BFD10()
{
  uint64_t v1;

  if (qword_100127EF0 != -1)
    swift_once(&qword_100127EF0, sub_1000BF668);
  Row.get<A>(_:)();
  if (qword_100127F00 != -1)
    swift_once(&qword_100127F00, sub_1000BF6B0);
  Row.get<A>(_:)();
  sub_1000BFE98();
  static LNExamplePhraseDescription.fromJSON(_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000BFE60()
{
  return sub_1000BFD10();
}

uint64_t sub_1000BFE68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
  }
  return result;
}

unint64_t sub_1000BFE98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10012B0C0;
  if (!qword_10012B0C0)
  {
    v1 = objc_opt_self(LNExamplePhraseDescription);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_10012B0C0);
  }
  return result;
}

uint64_t sub_1000BFED4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

ValueMetadata *type metadata accessor for LNExamplePhraseRecord()
{
  return &type metadata for LNExamplePhraseRecord;
}

void *sub_1000BFF6C()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0xD00000000000001ELL, 0x80000001000F47F0, 0, 0);
  return memcpy(&unk_10012D2E8, __src, 0xA8uLL);
}

uint64_t sub_1000BFFC0(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012D390, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_1000BFFE4(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012D3A8, 0x657669746167656ELL, 0xEF73657361726850);
}

ValueMetadata *type metadata accessor for LNAssistantIntentNegativePhraseRecord()
{
  return &type metadata for LNAssistantIntentNegativePhraseRecord;
}

uint64_t sub_1000C0020(uint64_t a1)
{
  _QWORD v2[3];

  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 96);
}

void sub_1000C007C(void *a1)
{
  sub_1000C0098(a1);
  sub_10000BFBC();
}

void sub_1000C0098(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v4;
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD aBlock[3];
  _QWORD *v20;
  void (*v21)();
  uint64_t v22;

  v2 = v1;
  swift_getObjectType(v1);
  v4 = objc_msgSend(a1, "processIdentifier");
  v5 = sub_100042738();
  objc_msgSend(a1, "setExportedInterface:", v5);

  sub_100042ADC(aBlock);
  v6 = v20;
  if (v20)
  {
    v7 = sub_10000E858(aBlock, (uint64_t)v20);
    v8 = *(v6 - 1);
    v9 = __chkstk_darwin(v7);
    v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v8 + 16))(v11, v9);
    v12 = _bridgeAnythingToObjectiveC<A>(_:)(v11, v6);
    (*(void (**)(char *, _QWORD *))(v8 + 8))(v11, v6);
    sub_10000E87C(aBlock);
  }
  else
  {
    v12 = 0;
  }
  objc_msgSend(a1, "setExportedObject:", v12);
  swift_unknownObjectRelease(v12);
  sub_100042A98((uint64_t)a1);
  if (v13)
  {
    v14 = v13;
    objc_msgSend(a1, "setRemoteObjectInterface:", v13);

  }
  v15 = swift_allocObject(&unk_10011E458, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v2);
  v16 = swift_allocObject(&unk_10011E480, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, a1);
  v17 = swift_allocObject(&unk_10011E4A8, 40, 7);
  *(_DWORD *)(v17 + 16) = v4;
  *(_QWORD *)(v17 + 24) = v15;
  *(_QWORD *)(v17 + 32) = v16;
  v21 = sub_1000C165C;
  v22 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001FF18;
  v20 = &unk_10011E4C0;
  v18 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a1, "setInvalidationHandler:", v18);
  _Block_release(v18);
}

void sub_1000C02D8(void *a1)
{
  uint64_t v1;
  unsigned int v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD aBlock[3];
  _QWORD *v17;
  void (*v18)();
  uint64_t v19;

  v3 = objc_msgSend(a1, "processIdentifier");
  v4 = (id)LNDaemonSuggestionsXPCInterface();
  objc_msgSend(a1, "setExportedInterface:", v4);

  sub_100042ADC(aBlock);
  v5 = v17;
  if (v17)
  {
    v6 = sub_10000E858(aBlock, (uint64_t)v17);
    v7 = *(v5 - 1);
    v8 = __chkstk_darwin(v6);
    v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v5);
    (*(void (**)(char *, _QWORD *))(v7 + 8))(v10, v5);
    sub_10000E87C(aBlock);
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(a1, "setExportedObject:", v11);
  swift_unknownObjectRelease(v11);
  v12 = swift_allocObject(&unk_10011E4F8, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v1);
  v13 = swift_allocObject(&unk_10011E480, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, a1);
  v14 = swift_allocObject(&unk_10011E520, 40, 7);
  *(_DWORD *)(v14 + 16) = v3;
  *(_QWORD *)(v14 + 24) = v12;
  *(_QWORD *)(v14 + 32) = v13;
  v18 = sub_1000C16C4;
  v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001FF18;
  v17 = &unk_10011E538;
  v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a1, "setInvalidationHandler:", v15);
  _Block_release(v15);
}

void sub_1000C04CC(void *a1)
{
  uint64_t v1;
  unsigned int v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD aBlock[3];
  _QWORD *v17;
  void (*v18)();
  uint64_t v19;

  v3 = objc_msgSend(a1, "processIdentifier");
  v4 = (id)LNDaemonExtensionXPCInterface();
  objc_msgSend(a1, "setExportedInterface:", v4);

  sub_100042ADC(aBlock);
  v5 = v17;
  if (v17)
  {
    v6 = sub_10000E858(aBlock, (uint64_t)v17);
    v7 = *(v5 - 1);
    v8 = __chkstk_darwin(v6);
    v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v5);
    (*(void (**)(char *, _QWORD *))(v7 + 8))(v10, v5);
    sub_10000E87C(aBlock);
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(a1, "setExportedObject:", v11);
  swift_unknownObjectRelease(v11);
  v12 = swift_allocObject(&unk_10011E5E8, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v1);
  v13 = swift_allocObject(&unk_10011E480, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, a1);
  v14 = swift_allocObject(&unk_10011E610, 40, 7);
  *(_DWORD *)(v14 + 16) = v3;
  *(_QWORD *)(v14 + 24) = v12;
  *(_QWORD *)(v14 + 32) = v13;
  v18 = sub_1000C1710;
  v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001FF18;
  v17 = &unk_10011E628;
  v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a1, "setInvalidationHandler:", v15);
  _Block_release(v15);
}

uint64_t sub_1000C06C0(void *a1)
{
  return sub_100020550(a1) & 1;
}

uint64_t sub_1000C06E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  v1 = (_QWORD *)sub_100011798((uint64_t)&unk_10012B6E8);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t (*)(void))sub_100018A9C(v1, (uint64_t)sub_1000C0720, v4);
  return sub_1000107A0(v2);
}

uint64_t sub_1000C0720()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return sub_1000107A0(*(uint64_t (**)(void))(v2 + 8));
}

void sub_1000C0760(void *a1)
{
  sub_1000C02D8(a1);
  sub_10000BFBC();
}

uint64_t sub_1000C077C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  v1 = (_QWORD *)sub_100011798((uint64_t)&unk_10012B700);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t (*)(void))sub_100018A9C(v1, (uint64_t)sub_1000C171C, v4);
  return sub_1000107A0(v2);
}

uint64_t sub_1000C07B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  v1 = (_QWORD *)sub_100011798((uint64_t)&unk_10012B710);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t (*)(void))sub_100018A9C(v1, (uint64_t)sub_1000C171C, v4);
  return sub_1000107A0(v2);
}

uint64_t sub_1000C07F4()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = v0;
  v2 = *v0;
  v3 = swift_isaMask;
  v1[3] = *v0;
  v1[4] = v3;
  v4 = *(_QWORD *)((v3 & v2) + 0x50);
  v1[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[6] = v5;
  v1[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C0868, v0, 0);
}

uint64_t sub_1000C0868()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int *v6;

  v1 = v0[7];
  objc_msgSend(*(id *)(v0[2] + 112), "invalidate");
  sub_10000E1AC(v1);
  v2 = *(_QWORD *)((v0[3] & v0[4]) + 0x58);
  v3 = *(int **)(v2 + 32);
  v6 = (int *)((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[8] = v4;
  *v4 = v0;
  v4[1] = sub_1000C0928;
  return ((uint64_t (*)(_QWORD, uint64_t))v6)(v0[5], v2);
}

uint64_t sub_1000C0928()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 56);
  v2 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = *(_QWORD *)(*v1 + 48);
  v6 = *v1;
  *(_QWORD *)(v6 + 72) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_1000C09C0, *(_QWORD *)(v6 + 16), 0);
  swift_task_dealloc(*(_QWORD *)(v6 + 56));
  return sub_10001A480(*(uint64_t (**)(void))(v6 + 8));
}

uint64_t sub_1000C09C0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return sub_1000107A0(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000C09EC()
{
  uint64_t v0;

  swift_defaultActor_initialize(v0);
  _swift_stdlib_reportUnimplementedInitializer("LinkDaemon.XPCListenerEntryPoint", 32, "init()", 6, 0);
  __break(1u);
}

void sub_1000C0A20()
{
  sub_1000C09EC();
}

uint64_t sub_1000C0A34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 120));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000C0A60()
{
  uint64_t v0;

  sub_1000C0A34();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for XPCListenerEntryPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCListenerEntryPoint);
}

uint64_t sub_1000C0A84(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v4, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000C0AF4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10012B6DC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000C171C;
  return sub_1000C07F4();
}

void sub_1000C0B3C(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[0] = type metadata accessor for Transcript();
  v10 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v12 = String.init<A>(describing:)(v33, v10);
  if (LNLogSubsystem)
  {
    v13 = v11;
    v14 = a2 + 16;
    v15 = String.init(cString:)(LNLogSubsystem);
    v17 = Logger.init(subsystem:category:)(v15, v16, v12, v13);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v29 = v6;
      v30 = a3;
      v20 = swift_slowAlloc(18, -1);
      v21 = swift_slowAlloc(32, -1);
      v33[0] = v21;
      *(_DWORD *)v20 = 67109378;
      LODWORD(v31) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 4);
      *(_WORD *)(v20 + 8) = 2080;
      if (qword_100127CC0 != -1)
        swift_once(&qword_100127CC0, sub_100042568);
      v23 = qword_10012CBC8;
      v22 = unk_10012CBD0;
      swift_bridgeObjectRetain();
      v31 = sub_10000FBEC(v23, v22, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v20, 0x12u);
      swift_arrayDestroy(v21, 1);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v29);
      a3 = v30;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    swift_beginAccess(v14, v33, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      v25 = (void *)Strong;
      v26 = a3 + 16;
      swift_beginAccess(v26, &v31, 0, 0);
      v27 = (void *)swift_unknownObjectWeakLoadStrong(v26);
      if (v27)
      {
        v28 = v27;
        sub_100041ED4(v27);

        v25 = v28;
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000C0DEC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[0] = type metadata accessor for SuggestedActionsService();
  v10 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v12 = String.init<A>(describing:)(v32, v10);
  if (LNLogSubsystem)
  {
    v13 = v11;
    v14 = a2 + 16;
    v15 = String.init(cString:)(LNLogSubsystem);
    v17 = Logger.init(subsystem:category:)(v15, v16, v12, v13);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v28 = v6;
      v29 = a3;
      v20 = swift_slowAlloc(18, -1);
      v21 = swift_slowAlloc(32, -1);
      v32[0] = v21;
      *(_DWORD *)v20 = 67109378;
      LODWORD(v30) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4);
      *(_WORD *)(v20 + 8) = 2080;
      if (qword_100127D78 != -1)
        swift_once(&qword_100127D78, sub_10005BD70);
      v23 = qword_10012CD20;
      v22 = *(_QWORD *)algn_10012CD28;
      swift_bridgeObjectRetain();
      v30 = sub_10000FBEC(v23, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v20, 0x12u);
      swift_arrayDestroy(v21, 1);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v28);
      a3 = v29;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    swift_beginAccess(v14, v32, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      v25 = (void *)Strong;
      v26 = a3 + 16;
      swift_beginAccess(v26, &v30, 0, 0);
      v27 = (void *)swift_unknownObjectWeakLoadStrong(v26);

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000C1090(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[0] = type metadata accessor for Registry(0);
  v10 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v12 = String.init<A>(describing:)(v32, v10);
  if (LNLogSubsystem)
  {
    v13 = v11;
    v14 = a2 + 16;
    v15 = String.init(cString:)(LNLogSubsystem);
    v17 = Logger.init(subsystem:category:)(v15, v16, v12, v13);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v28 = v6;
      v29 = a3;
      v20 = swift_slowAlloc(18, -1);
      v21 = swift_slowAlloc(32, -1);
      v32[0] = v21;
      *(_DWORD *)v20 = 67109378;
      LODWORD(v30) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4);
      *(_WORD *)(v20 + 8) = 2080;
      if (qword_100127ED8 != -1)
        swift_once(&qword_100127ED8, sub_1000A257C);
      v23 = qword_10012D1D0;
      v22 = *(_QWORD *)algn_10012D1D8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10012D1D8);
      v30 = sub_10000FBEC(v23, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v20, 0x12u);
      swift_arrayDestroy(v21, 1);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v28);
      a3 = v29;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    swift_beginAccess(v14, v32, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      v25 = (void *)Strong;
      v26 = a3 + 16;
      swift_beginAccess(v26, &v30, 0, 0);
      v27 = (void *)swift_unknownObjectWeakLoadStrong(v26);

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000C1334(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[0] = type metadata accessor for ExtensionService();
  v10 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v12 = String.init<A>(describing:)(v32, v10);
  if (LNLogSubsystem)
  {
    v13 = v11;
    v14 = a2 + 16;
    v15 = String.init(cString:)(LNLogSubsystem);
    v17 = Logger.init(subsystem:category:)(v15, v16, v12, v13);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v28 = v6;
      v29 = a3;
      v20 = swift_slowAlloc(18, -1);
      v21 = swift_slowAlloc(32, -1);
      v32[0] = v21;
      *(_DWORD *)v20 = 67109378;
      LODWORD(v30) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4);
      *(_WORD *)(v20 + 8) = 2080;
      if (qword_100127F20 != -1)
        swift_once(&qword_100127F20, sub_1000C26F4);
      v23 = qword_10012D3C0;
      v22 = *(_QWORD *)algn_10012D3C8;
      swift_bridgeObjectRetain();
      v30 = sub_10000FBEC(v23, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Invalidated XPC connection from PID %d for service \"%s\"", (uint8_t *)v20, 0x12u);
      swift_arrayDestroy(v21, 1);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v28);
      a3 = v29;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    swift_beginAccess(v14, v32, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (Strong)
    {
      v25 = (void *)Strong;
      v26 = a3 + 16;
      swift_beginAccess(v26, &v30, 0, 0);
      v27 = (void *)swift_unknownObjectWeakLoadStrong(v26);

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000C15D8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return v0;
}

uint64_t sub_1000C1604()
{
  uint64_t v0;

  sub_1000C15D8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for UncheckedConcurrentValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UncheckedConcurrentValue);
}

uint64_t sub_1000C1634()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000C165C()
{
  uint64_t v0;

  sub_1000C0B3C(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1000C1668(void *a1)
{
  sub_1000C04CC(a1);
  sub_10000BFBC();
}

uint64_t sub_1000C1684()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  v1 = (_QWORD *)sub_100011798((uint64_t)&unk_10012B720);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t (*)(void))sub_100018A9C(v1, (uint64_t)sub_1000C171C, v4);
  return sub_1000107A0(v2);
}

void sub_1000C16C4()
{
  uint64_t v0;

  sub_1000C0DEC(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1000C16D4()
{
  uint64_t v0;

  sub_1000C1090(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C16E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000C1710()
{
  uint64_t v0;

  sub_1000C1334(*(_DWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000C174C(void *a1)
{
  return sub_1000C06C0(a1) & 1;
}

void sub_1000C1764()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  id v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;

  sub_100017D38();
  v2 = v1;
  v4 = v3;
  v5 = _swiftEmptyArrayStorage;
  if (!(v1 >> 62))
  {
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_10000BFF4();
    if (v6)
      goto LABEL_3;
LABEL_14:
    sub_1000101FC();
    v10 = _swiftEmptyArrayStorage;
LABEL_15:
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
      goto LABEL_32;
    v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      v13 = __OFSUB__(v4, v12);
      v4 -= v12;
      if (v13)
        break;
      v18 = v5;
      if (!v6)
      {
LABEL_27:
        sub_100018C60();
        goto LABEL_30;
      }
      v17 = v10;
      sub_10000BFF4();
      v14 = 4;
      while (1)
      {
        v5 = (_QWORD *)(v14 - 4);
        v15 = (v2 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v2)
            : sub_100017ADC();
        v16 = v15;
        v10 = (_QWORD *)(v14 - 3);
        if (__OFADD__(v5, 1))
          break;
        sub_1000C2498(v4);
        if (v0)
        {
          sub_1000101FC();

          swift_bridgeObjectRelease(v17);
          v11 = v18;
          goto LABEL_29;
        }

        sub_100018C60();
        ++v14;
        if (v10 == (_QWORD *)v6)
        {
          sub_1000101FC();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_32:
      swift_bridgeObjectRetain(v10);
      v12 = sub_1000058C8();
      swift_bridgeObjectRelease(v10);
    }
    __break(1u);
    return;
  }
LABEL_13:
  sub_10000BFF4();
  v6 = sub_1000058C8();
  if (!v6)
    goto LABEL_14;
LABEL_3:
  v7 = 4;
  while (1)
  {
    if ((v2 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v2);
    else
      v8 = sub_100017ADC();
    v9 = v8;
    v5 = (_QWORD *)(v7 - 3);
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    sub_1000C2344(v4);
    if (v0)
      break;

    sub_100058E4C();
    ++v7;
    if (v5 == (_QWORD *)v6)
    {
      sub_1000101FC();
      v10 = _swiftEmptyArrayStorage;
      v5 = _swiftEmptyArrayStorage;
      goto LABEL_15;
    }
  }
  sub_1000101FC();

  v11 = _swiftEmptyArrayStorage;
LABEL_29:
  swift_bridgeObjectRelease(v11);
LABEL_30:
  sub_100018A40();
}

void sub_1000C1954(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int64_t v9;
  int64_t v11;
  int64_t v12;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a4 >> 1;
  v9 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_19;
  if (v9)
  {
    specialized ContiguousArray.reserveCapacity(_:)((a4 >> 1) - a3);
    if (v9 < 0)
    {
LABEL_20:
      __break(1u);
      return;
    }
    v11 = 0;
    while (1)
    {
      v12 = v11 + 1;
      if (__OFADD__(v11, 1))
        break;
      if (a3 + v11 >= v33 || v11 >= v9)
        goto LABEL_18;
      v14 = sub_100017ADC();
      v15 = sub_1000C1C80(v14);

      if (v8)
      {
        sub_10001C0D0(v16, v17, v18, v19, v20, v21, v22, v23, v33, a5);
        swift_release();
        goto LABEL_16;
      }
      sub_100019B48();
      v24 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v15);
      v25 = sub_10000C10C();
      ++v11;
      if (v12 == v9)
      {
        sub_10001C0D0(v25, v26, v27, v28, v29, v30, v31, v32, v33, a5);
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_10001C0D0(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8, v33, a5);
LABEL_16:
  sub_100018A40();
}

uint64_t sub_1000C1A7C(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1000C2630(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000C1AE8(uint64_t a1, unint64_t a2)
{
  return sub_1000C1AFC(a1, a2, (unint64_t *)&unk_100129F00, LNAutoShortcutMetadata_ptr);
}

uint64_t sub_1000C1AFC(uint64_t a1, unint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = a4;
    v6 = a3;
    v4 = a2;
    v7 = a1;
    v8 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  sub_100018AAC();
  v9 = sub_1000185D0();
  sub_1000117B4();
LABEL_4:
  result = sub_1000C2630(0, v7, v9);
  if ((v11 & 1) != 0)
    v12 = v9;
  else
    v12 = result;
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v8)
  {
    sub_100018AAC();
    v14 = sub_1000185D0();
    result = sub_1000117B4();
    if (v14 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain(v4);
    v13 = sub_1000185D0();
    result = sub_1000117B4();
  }
  else
  {
    v13 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 < v12)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((v4 & 0xC000000000000001) != 0 && v12)
  {
    sub_10000795C(0, v6, v5);
    v15 = 0;
    do
    {
      v16 = v15 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v15);
      v15 = v16;
    }
    while (v12 != v16);
  }
  if (!v8)
    return v4 & 0xFFFFFFFFFFFFFF8;
  if (v4 < 0)
    v18 = v4;
  else
    v18 = v4 & 0xFFFFFFFFFFFFFF8;
  v19 = swift_bridgeObjectRetain(v4);
  v17 = _CocoaArrayWrapper.subscript.getter(0, v12, v18, v19);
  swift_bridgeObjectRelease_n(v4, 2);
  return v17;
}

id sub_1000C1C80(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void (*v24)(char *, char *, uint64_t);
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  void *object;
  Swift::String v33;
  unint64_t v34;
  Swift::String v35;
  void *v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  void *v45;
  NSString v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  void *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;

  v2 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  v3 = __chkstk_darwin(v2);
  v83 = (uint64_t)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v81 - v5;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v82 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v81 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v81 - v14;
  v87 = objc_msgSend(objc_allocWithZone((Class)KVItemBuilder), "init");
  v16 = objc_msgSend(a1, "localizedPhrase");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  v89 = v17;
  v90 = v19;
  v20 = sub_100012F00();
  v21 = StringProtocol.hash.getter(&type metadata for String, v20);
  swift_bridgeObjectRelease(v19);
  v86 = a1;
  v22 = objc_msgSend(a1, "parameterIdentifier");
  v84 = v8;
  if (v22)
  {
    v23 = v22;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v24 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v24(v6, v13, v7);
    sub_100014360((uint64_t)v6, 0, 1, v7);
    if (sub_10001C93C((uint64_t)v6, 1, v7) != 1)
    {
      v24(v15, v6, v7);
      v89 = 0x726F68736F747561;
      v90 = 0xEF2F2F3A74756374;
      v25 = objc_msgSend(v85, "actionIdentifier");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v29._countAndFlagsBits = v26;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(v28);
      v30._countAndFlagsBits = 35;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      v88 = v21;
      v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v31._object;
      String.append(_:)(v31);
      swift_bridgeObjectRelease(object);
      v33._countAndFlagsBits = 35;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      v34 = sub_1000C25EC();
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v34);
      v36 = v35._object;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v36);
      v37 = v90;
      (*(void (**)(char *, uint64_t))(v84 + 8))(v15, v7);
      goto LABEL_6;
    }
  }
  else
  {
    sub_100014360((uint64_t)v6, 1, 1, v7);
  }
  sub_10002691C((uint64_t)v6);
  v89 = 0x726F68736F747561;
  v90 = 0xEF2F2F3A74756374;
  v38 = objc_msgSend(v85, "actionIdentifier");
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  v42._countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v41);
  v43._countAndFlagsBits = 35;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  v88 = v21;
  v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v45 = v44._object;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v45);
  v37 = v90;
LABEL_6:
  v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  v89 = 0;
  v47 = v87;
  v48 = objc_msgSend(v87, "setItemType:itemId:error:", 8, v46, &v89);

  v49 = (id)v89;
  v50 = v86;
  if (!v48)
  {
LABEL_19:
    v62 = v49;
    v57 = v49;
    goto LABEL_20;
  }
  v51 = (id)v89;

  v52 = objc_msgSend(v50, "basePhraseTemplate");
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  v55 = v54;

  v89 = 0;
  v56 = sub_1000266F4(301, v53, v55, (uint64_t)&v89, v47);
  v57 = (id)v89;
  if (!v56)
  {
    v62 = v57;
LABEL_20:
    _convertNSErrorToError(_:)(v57);

    goto LABEL_21;
  }

  v58 = objc_msgSend(v50, "localizedPhrase");
  v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
  v61 = v60;

  v89 = 0;
  v62 = sub_1000266F4(300, v59, v61, (uint64_t)&v89, v47);
  v63 = (id)v89;
  if (!v62)
  {
    v75 = v63;
    _convertNSErrorToError(_:)(v63);

LABEL_21:
    swift_willThrow(v76);

    return v62;
  }

  v64 = objc_msgSend(v50, "parameterIdentifier");
  if (!v64)
  {
    v68 = v83;
    sub_100014360(v83, 1, 1, v7);
    goto LABEL_16;
  }
  v65 = v64;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v66 = v84;
  v67 = *(void (**)(uint64_t, char *, uint64_t))(v84 + 32);
  v68 = v83;
  v67(v83, v13, v7);
  sub_100014360(v68, 0, 1, v7);
  if (sub_10001C93C(v68, 1, v7) == 1)
  {
LABEL_16:
    sub_10002691C(v68);
    goto LABEL_17;
  }
  v69 = v82;
  v70 = ((uint64_t (*)(char *, uint64_t, uint64_t))v67)(v82, v68, v7);
  v71 = UUID.uuidString.getter(v70);
  v89 = 0;
  v73 = sub_1000266F4(302, v71, v72, (uint64_t)&v89, v47);
  v74 = (id)v89;
  if (!v73)
  {
    v62 = v74;
    _convertNSErrorToError(_:)(v74);

    swift_willThrow(v80);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v69, v7);
    return v62;
  }

  (*(void (**)(char *, uint64_t))(v66 + 8))(v69, v7);
LABEL_17:
  v89 = 0;
  v77 = objc_msgSend(v47, "buildItemWithError:", &v89);
  v49 = (id)v89;
  if (!v77)
    goto LABEL_19;
  v62 = v77;
  v78 = (id)v89;

  return v62;
}

#error "1000C23F0: call analysis failed (funcsize=81)"

#error "1000C254C: call analysis failed (funcsize=81)"

unint64_t sub_1000C25EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10012AD10;
  if (!qword_10012AD10)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10012AD10);
  }
  return result;
}

uint64_t sub_1000C2630(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

uint64_t sub_1000C2680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = sub_10001BE7C((uint64_t *)&unk_100129420);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t sub_1000C26D0(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_1000C26E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 40);
  *v4 = a2;
  v4[1] = a3;
  v4[2] = a4;
  return swift_continuation_throwingResume();
}

uint64_t sub_1000C26F4()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(LNDaemonExtensionMachServiceName);
  qword_10012D3C0 = result;
  *(_QWORD *)algn_10012D3C8 = v1;
  return result;
}

uint64_t sub_1000C2720()
{
  uint64_t v0;

  if (qword_100127F20 != -1)
    swift_once(&qword_100127F20, sub_1000C26F4);
  v0 = qword_10012D3C0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000C277C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  return swift_task_switch(sub_1000C2798, 0, 0);
}

uint64_t sub_1000C2798()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  _QWORD *v3;
  NSString v4;
  void *v5;

  v2 = v0 + 23;
  if (sub_1000C2A14(v0[26], v0[27]))
  {
    v3 = v0 + 2;
    objc_opt_self(LNExtensionMediator);
    v4 = sub_100018AC0();
    v0[31] = v4;
    v0[7] = v2;
    v0[2] = v0;
    v0[3] = sub_1000C2938;
    v0[22] = sub_100017F0C();
    v0[18] = _NSConcreteStackBlock;
    v0[19] = 0x40000000;
    v5 = &unk_10011E780;
  }
  else
  {
    v3 = v0 + 10;
    objc_opt_self(LNDaemonMediator);
    v4 = sub_100018AC0();
    v0[29] = v4;
    v0[15] = v2;
    v0[10] = v0;
    v0[11] = sub_1000C28C4;
    v0[22] = sub_100017F0C();
    v0[18] = _NSConcreteStackBlock;
    v0[19] = 0x40000000;
    v5 = &unk_10011E798;
  }
  v0[20] = sub_1000C2A70;
  v0[21] = v5;
  objc_msgSend(v1, "getConnectionHostInterfaceForBundleIdentifier:completionHandler:", v4, v0 + 18);
  return swift_continuation_await(v3);
}

uint64_t sub_1000C28C4()
{
  uint64_t v0;

  sub_10001E270();
  *(_QWORD *)(v0 + 240) = *(_QWORD *)(v0 + 112);
  return sub_1000059B8();
}

uint64_t sub_1000C290C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  sub_10001B16C(*(void **)(v0 + 232));
  v1 = sub_10001B38C();
  return sub_10001AF28(v1, v2, v3, v4);
}

uint64_t sub_1000C2938()
{
  uint64_t v0;

  sub_10001E270();
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v0 + 48);
  return sub_1000059B8();
}

uint64_t sub_1000C2980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  sub_10001B16C(*(void **)(v0 + 248));
  v1 = sub_10001B38C();
  return sub_10001AF28(v1, v2, v3, v4);
}

uint64_t sub_1000C29AC(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 232);
  swift_willThrow(a1);

  return sub_1000177B4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000C29E0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 248);
  swift_willThrow(a1);

  return sub_1000177B4(*(uint64_t (**)(void))(v1 + 8));
}

BOOL sub_1000C2A14(uint64_t a1, uint64_t a2)
{
  id v4;

  sub_1000C3288();
  swift_bridgeObjectRetain();
  v4 = sub_1000C2CF0(a1, a2);

  return v4 == 0;
}

uint64_t sub_1000C2A70(uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(result + 32);
  if (a4)
    return sub_1000C2680(v4, (uint64_t)a4);
  if (a2)
  {
    v6 = a2;
    v7 = a3;
    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v10 = v9;

    return sub_1000C26E0(v4, (uint64_t)v6, v8, v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C2B60(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_10012B80C;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000C2BEC;
  return sub_1000C277C(v6, v8);
}

uint64_t sub_1000C2BEC(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void (**v12)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v13;
  Class isa;

  v5 = v3;
  v9 = *(_QWORD *)(*v4 + 40);
  v10 = *(void **)(*v4 + 16);
  v11 = *v4;
  swift_task_dealloc(v9);

  swift_bridgeObjectRelease();
  v12 = *(void (***)(_QWORD, _QWORD, _QWORD, _QWORD))(v11 + 24);
  if (v5)
  {
    v13 = (void *)_convertErrorToNSError(_:)(v5);
    swift_errorRelease();
    ((void (**)(_QWORD, _QWORD, _QWORD, void *))v12)[2](v12, 0, 0, v13);

    _Block_release(v12);
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, void *, Class, _QWORD))v12)[2](v12, a1, isa, 0);

    _Block_release(v12);
    sub_10001EA88(a2, a3);
  }
  return (*(uint64_t (**)(void))(v11 + 8))();
}

id sub_1000C2CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSString v4;
  id v5;

  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "daemonRecordWithBundleIdentifier:", v4);

  return v5;
}

id sub_1000C2D50()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for ExtensionService()
{
  return objc_opt_self(_TtC10LinkDaemon16ExtensionService);
}

uint64_t sub_1000C2DC8()
{
  return sub_1000C2720();
}

uint64_t sub_1000C2DDC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C2E10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10012B7C4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100060348;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10012B7C0 + dword_10012B7C0))(v2, v3, v4);
}

uint64_t sub_1000C2E7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100060528;
  return v6();
}

uint64_t sub_1000C2ED4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10012B7DC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100060528;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10012B7D8 + dword_10012B7D8))(v2, v3, v4);
}

uint64_t sub_1000C2F4C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100060528;
  return v7();
}

uint64_t sub_1000C2FA4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C2FD0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10012B7EC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100060528;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10012B7E8 + dword_10012B7E8))(a1, v4, v5, v6);
}

uint64_t sub_1000C3054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  if (sub_10001C93C(a1, 1, v6) == 1)
  {
    sub_10000A7E4(a1);
    v7 = 7168;
  }
  else
  {
    v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v7 = v8 | 0x1C00;
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    v14 = v13;
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = swift_allocObject(&unk_10011E768, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_10012B800, v15);
}

uint64_t sub_1000C3190(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100028A70;
  return v6(a1);
}

uint64_t sub_1000C31F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C3218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10012B7FC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10002E6E8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10012B7F8 + dword_10012B7F8))(a1, v4);
}

unint64_t sub_1000C3288()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10012B818;
  if (!qword_10012B818)
  {
    v1 = objc_opt_self(LNDaemonRecord);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10012B818);
  }
  return result;
}

#error "1000C3304: call analysis failed (funcsize=79)"

#error "1000C3474: call analysis failed (funcsize=87)"

#error "1000C35FC: call analysis failed (funcsize=84)"

void sub_1000C373C()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[21];
  _QWORD v26[21];
  _BYTE v27[168];
  _QWORD v28[22];
  _QWORD *v29;

  sub_10000C038();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v29 = v7;
  if (qword_100127F28 != -1)
    swift_once(&qword_100127F28, sub_1000C4370);
  sub_1000189C4(v28, &unk_10012D3D0);
  sub_1000379AC(v28);
  if (qword_100127F30 != -1)
    swift_once(&qword_100127F30, sub_1000C43C0);
  sub_10001768C((uint64_t)&qword_10012D478);
  v26[0] = v6;
  v26[1] = v4;
  == infix<A>(_:_:)();
  v9 = v8;
  v11 = v10;
  v13 = v12;
  sub_1000189C4(v26, v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v9, v11, v13, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v27);
  sub_1000117AC(v13);
  sub_1000117AC(v11);
  sub_100037A7C(v28);
  if ((v2 & 1) != 0)
  {
    sub_1000189C4(v26, v27);
    if (qword_100127F48 != -1)
      swift_once(&qword_100127F48, sub_1000C44E0);
    sub_10001768C((uint64_t)&qword_10012B838);
    v25[0] = 0;
    == infix<A>(_:_:)();
    v15 = v14;
    v17 = v16;
    v19 = v18;
    sub_1000189C4(&v24, v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10001E954(v15, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v25);
    sub_1000117AC(v19);
    sub_1000117AC(v17);
    sub_100037A7C(v26);
    sub_1000189C4(v27, v25);
  }
  v26[3] = &type metadata for Table;
  v26[4] = &protocol witness table for Table;
  v26[0] = sub_1000058D0((uint64_t)&unk_10011E7D8);
  sub_1000189C4((void *)(v26[0] + 16), v27);
  v20 = Connection.pluck(_:)(v26);
  v22 = v21;
  sub_10000E87C(v26);
  if (!v0)
  {
    if (v20)
    {
      sub_1000C4640(v20, v22, v29);
      sub_1000059B0();
      sub_1000059C4();
    }
    else
    {
      v23 = sub_1000117E0();
      sub_100014360((uint64_t)v29, 1, 1, v23);
    }
  }
  sub_1000117E8();
}

void sub_1000C39E0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::OpaquePointer v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t countAndFlagsBits;
  void *object;
  void *rawValue;
  _OWORD v21[11];
  _QWORD v22[21];
  _QWORD v23[21];
  _QWORD v24[22];
  SQLite::Update v25;
  SQLite::Update v26;

  sub_10000C038();
  v1 = v0;
  if (qword_100127F28 != -1)
    swift_once(&qword_100127F28, sub_1000C4370);
  sub_1000189C4(v23, &unk_10012D3D0);
  sub_1000379AC(v23);
  if (qword_100127F30 != -1)
    swift_once(&qword_100127F30, sub_1000C43C0);
  v2 = v1[1];
  v22[0] = *v1;
  v22[1] = v2;
  sub_1000100E0();
  == infix<A>(_:_:)();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease(v2);
  sub_1000189C4(v21, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001E954(v4, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v22);
  sub_1000117AC(v8);
  sub_1000117AC(v6);
  sub_100037A7C(v23);
  sub_1000189C4(v24, v22);
  v9 = sub_10001BE7C(&qword_100128D08);
  v10._rawValue = (void *)swift_allocObject(v9, 192, 7);
  *((_OWORD *)v10._rawValue + 1) = xmmword_1000EFD90;
  if (qword_100127F40 != -1)
    swift_once(&qword_100127F40, sub_1000C4470);
  v11 = qword_10012B820;
  v12 = *(_QWORD *)algn_10012B828;
  v13 = qword_10012B830;
  v14 = sub_1000117E0();
  v21[0] = *(_OWORD *)((char *)v1 + *(int *)(v14 + 24));
  <- infix<A>(_:_:)(v11, v12, v13, (uint64_t)v21, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
  if (qword_100127F48 != -1)
    swift_once(&qword_100127F48, sub_1000C44E0);
  v15 = sub_10001768C((uint64_t)&qword_10012B838);
  *(_QWORD *)&v21[0] = *(_QWORD *)((char *)v1 + *(int *)(v14 + 28));
  <- infix<A>(_:_:)(v15, v16, v17, (uint64_t)v21, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  sub_1000189C4(v21, v24);
  v25 = QueryType.update(_:)(v10);
  countAndFlagsBits = v25.template._countAndFlagsBits;
  object = v25.template._object;
  rawValue = v25.bindings._rawValue;
  sub_1000059B0();
  sub_100037A7C(v24);
  v26.template._countAndFlagsBits = countAndFlagsBits;
  v26.template._object = object;
  v26.bindings._rawValue = rawValue;
  Connection.run(_:)(v26);
  swift_bridgeObjectRelease(rawValue);
  sub_1000059C4();
  sub_1000117E8();
}

void sub_1000C3CA0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _QWORD v40[21];
  uint64_t v41;
  _QWORD v42[10];
  _BYTE v43[168];
  _QWORD v44[22];
  SQLite::Insert v45;

  sub_10000C038();
  v38 = v0;
  v2 = v1;
  v3 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100127F28 != -1)
    swift_once(&qword_100127F28, sub_1000C4370);
  sub_1000189C4(v44, &unk_10012D3D0);
  sub_1000189C4(v43, &unk_10012D3D0);
  sub_1000379AC(v44);
  if (qword_100127F30 != -1)
    swift_once(&qword_100127F30, sub_1000C43C0);
  v6 = sub_10001768C((uint64_t)&qword_10012D478);
  v7 = v2[1];
  v40[0] = *v2;
  v40[1] = v7;
  <- infix<A>(_:_:)(v6, v8, v9, (uint64_t)v40, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  v10 = sub_10001BE7C(&qword_100128D08);
  inited = swift_initStackObject(v10, &v41);
  *(_OWORD *)(inited + 16) = xmmword_1000F05A0;
  v37 = inited + 32;
  if (qword_100127F38 != -1)
    swift_once(&qword_100127F38, sub_1000C441C);
  v12 = qword_10012D4A0;
  v35 = qword_10012D498;
  v36 = qword_10012D490;
  v13 = (int *)sub_1000117E0();
  sub_10006AD8C((uint64_t)v2 + v13[5], (uint64_t)v5);
  v14 = type metadata accessor for URL(0);
  if (sub_10001C93C((uint64_t)v5, 1, v14) == 1)
  {
    sub_1000131A8((uint64_t)v5, &qword_100128740);
    countAndFlagsBits = 0;
    object = 0;
  }
  else
  {
    v17 = URL.path(percentEncoded:)(0);
    countAndFlagsBits = v17._countAndFlagsBits;
    object = v17._object;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v5, v14);
  }
  *(_QWORD *)&v39 = countAndFlagsBits;
  *((_QWORD *)&v39 + 1) = object;
  <- infix<A>(_:_:)(v36, v35, v12, (uint64_t)&v39, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease(object);
  if (qword_100127F40 != -1)
    swift_once(&qword_100127F40, sub_1000C4470);
  v18 = sub_10001768C((uint64_t)&qword_10012B820);
  v39 = *(_OWORD *)((char *)v2 + v13[6]);
  sub_100019B50(v18, v19, v20, v21, (uint64_t)&type metadata for Data, (uint64_t)&protocol witness table for Data);
  if (qword_100127F48 != -1)
    swift_once(&qword_100127F48, sub_1000C44E0);
  v22 = sub_10001768C((uint64_t)&qword_10012B838);
  *(_QWORD *)&v39 = *(_QWORD *)((char *)v2 + v13[7]);
  sub_100019B50(v22, v23, v24, v25, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  if (qword_100127F50 != -1)
    swift_once(&qword_100127F50, sub_1000C45D8);
  v26 = sub_10001768C((uint64_t)&qword_10012D4A8);
  *(_QWORD *)&v39 = *(_QWORD *)((char *)v2 + v13[8]);
  sub_100019B50(v26, v27, v28, v29, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  v30 = QueryType.insert(_:_:)((uint64_t)v42);
  v32 = v31;
  v34 = v33;
  swift_setDeallocating(inited);
  sub_10001CC3C();
  sub_100019F20(v42);
  sub_1000189C4(v40, v43);
  sub_100037A7C(v40);
  v45.template._countAndFlagsBits = v30;
  v45.template._object = v32;
  v45.bindings._rawValue = v34;
  Connection.run(_:)(v45);
  sub_1000059C4();
  swift_bridgeObjectRelease(v32);
  sub_1000117E8();
}

void sub_1000C4054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t countAndFlagsBits;
  void *object;
  void *rawValue;
  uint64_t v11;
  _QWORD v12[21];
  _QWORD v13[21];
  _QWORD v14[21];
  SQLite::Delete v15;
  SQLite::Update v16;

  sub_10000C038();
  v1 = v0;
  if (qword_100127F28 != -1)
    swift_once(&qword_100127F28, sub_1000C4370);
  sub_1000189C4(v13, &unk_10012D3D0);
  v12[0] = v1;
  sub_1000379AC(v13);
  if (qword_100127F30 != -1)
    swift_once(&qword_100127F30, sub_1000C43C0);
  v2 = unk_10012D480;
  v3 = qword_10012D488;
  sub_10001BE7C((uint64_t *)&unk_10012AD80);
  sub_10001C2C0(&qword_10012B858, (uint64_t *)&unk_10012AD80, (uint64_t)&protocol conformance descriptor for [A]);
  sub_1000159C4(v4, v5, v6, v7, v4);
  sub_100017D54();
  sub_1000189C4(&v11, v13);
  sub_10000C020();
  sub_1000100E0();
  sub_1000177C4((uint64_t)v12);
  sub_1000117AC(v3);
  sub_1000117AC(v2);
  sub_100037A7C(v13);
  sub_1000189C4(v14, v12);
  sub_1000189C4(v12, v14);
  v15 = QueryType.delete()();
  countAndFlagsBits = v15.template._countAndFlagsBits;
  object = v15.template._object;
  rawValue = v15.bindings._rawValue;
  sub_100037A7C(v14);
  v16.template._countAndFlagsBits = countAndFlagsBits;
  v16.template._object = object;
  v16.bindings._rawValue = rawValue;
  Connection.run(_:)(v16);
  sub_1000059B0();
  sub_1000059C4();
  sub_1000117E8();
}

uint64_t sub_1000C41F0()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1000C49E8((uint64_t)v5, (uint64_t)v6, &qword_100128A40);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
      return v4;
  }
  else
  {
    sub_1000131A8((uint64_t)v6, &qword_100128A40);
  }
  return 3;
}

uint64_t sub_1000C4308()
{
  swift_bridgeObjectRetain();
  return sub_100019430();
}

uint64_t sub_1000C4330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10006AD8C(v2 + *(int *)(a1 + 20), a2);
}

uint64_t sub_1000C4340()
{
  uint64_t v0;
  unint64_t v1;

  v0 = sub_100019430();
  sub_10001EBF8(v0, v1);
  return sub_100019430();
}

void *sub_1000C4370()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0x73656C646E7562, 0xE700000000000000, 0, 0);
  return memcpy(&unk_10012D3D0, __src, 0xA8uLL);
}

void sub_1000C43C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001A0C4();
  sub_100018600((unint64_t *)&qword_100129FA0, v0, (uint64_t)&protocol conformance descriptor for Expression<A>);
  sub_10001643C(0x4449656C646E7562, 0xE800000000000000, v2, v1);
  sub_10000BFBC();
}

void sub_1000C441C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001A0C4();
  sub_100018600(&qword_100128D38, v0, (uint64_t)&protocol conformance descriptor for Expression<A>);
  sub_10001643C(7107189, 0xE300000000000000, v2, v1);
  sub_10000BFBC();
}

uint64_t sub_1000C4470()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D10);
  sub_10001C2C0((unint64_t *)&unk_100129FB0, &qword_100128D10, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000011, 0x80000001000F62B0, v0, v1);
}

uint64_t sub_1000C44E0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100129560);
  sub_10001C2C0((unint64_t *)&qword_10012B850, &qword_100129560, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000013, 0x80000001000F62F0, v0, v1);
}

uint64_t sub_1000C4550()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

void sub_1000C45D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001A0C4();
  sub_100018600((unint64_t *)&qword_10012B850, v0, (uint64_t)&protocol conformance descriptor for Expression<A>);
  sub_10001643C(0x617461646174656DLL, 0xEF6E6F6973726556, v2, v1);
  sub_10000BFBC();
}

uint64_t sub_1000C4640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100127F30 != -1)
    swift_once(&qword_100127F30, sub_1000C43C0);
  Row.get<A>(_:)();
  v11 = v27;
  v10 = v28;
  if (qword_100127F38 != -1)
    swift_once(&qword_100127F38, sub_1000C441C);
  Row.get<A>(_:)(qword_10012D490, qword_10012D498, qword_10012D4A0, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v9, v23, v24, v25, v26, (uint64_t)v27, v28, v29, v30, v31, v32, v33,
    v34);
  v13 = v27;
  v12 = v28;
  if (qword_100127F40 != -1)
    swift_once(&qword_100127F40, sub_1000C4470);
  Row.get<A>(_:)();
  v14 = v27;
  v25 = v28;
  if (qword_100127F48 != -1)
    swift_once(&qword_100127F48, sub_1000C44E0);
  Row.get<A>(_:)();
  v24 = v27;
  if (qword_100127F50 != -1)
    swift_once(&qword_100127F50, sub_1000C45D8);
  Row.get<A>(_:)();
  v16 = v27;
  if (v12)
  {
    URL.init(fileURLWithPath:)(v13, v12);
    v17 = type metadata accessor for URL(0);
    sub_100014360((uint64_t)v8, 0, 1, v17);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v18 = type metadata accessor for URL(0);
    sub_100014360((uint64_t)v8, 1, 1, v18);
  }
  v19 = v24;
  *a3 = v11;
  a3[1] = v10;
  v20 = (int *)type metadata accessor for LNBundleRecord(0);
  sub_1000C49E8((uint64_t)v8, (uint64_t)a3 + v20[5], &qword_100128740);
  v21 = (_QWORD *)((char *)a3 + v20[6]);
  v22 = v25;
  *v21 = v14;
  v21[1] = v22;
  *(_QWORD *)((char *)a3 + v20[7]) = v19;
  *(_QWORD *)((char *)a3 + v20[8]) = v16;
  return sub_100014360((uint64_t)a3, 0, 1, (uint64_t)v20);
}

uint64_t type metadata accessor for LNBundleRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_10012B8B8;
  if (!qword_10012B8B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LNBundleRecord);
  return result;
}

void sub_1000C49E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  sub_10001BE7C(a3);
  v3 = sub_100019430();
  v4(v3);
  sub_10000BFBC();
}

uint64_t sub_1000C4A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1000C4640(a1, a2, a3);
}

uint64_t *sub_1000C4A2C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain();
    if (sub_10001C93C((uint64_t)v10, 1, v11))
    {
      v12 = sub_10001BE7C(&qword_100128740);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      sub_100014360((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[6];
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = *v16;
    v18 = v16[1];
    sub_10001EBF8(*v16, v18);
    *v15 = v17;
    v15[1] = v18;
    v19 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
  }
  return v4;
}

uint64_t sub_1000C4B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL(0);
  if (!sub_10001C93C(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return sub_10001EA88(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_1000C4BD0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  swift_bridgeObjectRetain();
  if (sub_10001C93C((uint64_t)v9, 1, v10))
  {
    v11 = sub_10001BE7C(&qword_100128740);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    sub_100014360((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  sub_10001EBF8(*v14, v16);
  *v13 = v15;
  v13[1] = v16;
  v17 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  return a1;
}

_QWORD *sub_1000C4CD0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = sub_10001C93C((uint64_t)v7, 1, v9);
  v11 = sub_10001C93C((uint64_t)v8, 1, v9);
  if (!v10)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = sub_10001BE7C(&qword_100128740);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  sub_100014360((uint64_t)v7, 0, 1, v9);
LABEL_7:
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_10001EBF8(*v16, v18);
  v19 = *v15;
  v20 = v15[1];
  *v15 = v17;
  v15[1] = v18;
  sub_10001EA88(v19, v20);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_1000C4E34(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  if (sub_10001C93C((uint64_t)v8, 1, v9))
  {
    v10 = sub_10001BE7C(&qword_100128740);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    sub_100014360((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_1000C4F10(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = sub_10001C93C((uint64_t)v8, 1, v10);
  v12 = sub_10001C93C((uint64_t)v9, 1, v10);
  if (!v11)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = sub_10001BE7C(&qword_100128740);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  sub_100014360((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = a3[6];
  v16 = *(_QWORD *)((char *)a1 + v15);
  v17 = *(_QWORD *)((char *)a1 + v15 + 8);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  sub_10001EA88(v16, v17);
  v18 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  return a1;
}

uint64_t sub_1000C5050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C505C);
}

uint64_t sub_1000C505C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001BE7C(&qword_100128740);
    return sub_10001C93C(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1000C50D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C50E0);
}

uint64_t sub_1000C50E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_10001BE7C(&qword_100128740);
    return sub_100014360(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1000C5150(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1000F1C20;
  sub_100050454(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1000F1C38;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

id sub_1000C51E0(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t i;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  char v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v75;
  void *v76;
  id v77;
  id v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  id v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int64_t v100;
  uint64_t v101;
  char v102[16];
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106[2];
  unint64_t v107;

  v4 = objc_msgSend(a1, "action");
  v5 = objc_msgSend(v4, "parameters");

  sub_1000100D8(v6, &qword_1001284E0, LNProperty_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5);

  v107 = v7;
  v8 = sub_1000177DC();
  v9 = objc_msgSend(v8, "identifier");

  v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v11 = v10;

  v12 = sub_1000177DC();
  v91 = objc_msgSend(v12, "openAppWhenRun");

  v13 = sub_1000177DC();
  v90 = sub_1000C6578(v13);
  v15 = v14;
  v17 = *(_QWORD *)(a2 + 72);
  v16 = *(_QWORD *)(a2 + 80);
  v98 = a2;
  sub_1000100E0();
  v18 = objc_msgSend(a1, "identifiersByTypeMap");
  v19 = (id)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String, &type metadata for String, &protocol witness table for String);

  v103 = v17;
  v104 = v16;
  v20 = sub_1000C5CC4((uint64_t)v19, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1000C65E4, (uint64_t)v102);
  sub_1000101FC();
  v21 = *(_QWORD *)(v20 + 16);
  if (v21 >= 2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_10000C028();
    sub_1000059A8();
    swift_bridgeObjectRelease();
    if (qword_100127E68 != -1)
      goto LABEL_122;
    goto LABEL_3;
  }
  v97 = v15;
  v95 = v11;
  if (!v21)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000059A8();
    swift_bridgeObjectRelease();
    if (qword_100127E68 != -1)
      swift_once(&qword_100127E68, sub_100090530);
    v82 = type metadata accessor for Logger(0);
    sub_100012A40(v82, (uint64_t)qword_10012D0B0);
    v83 = sub_1000100E0();
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      v86 = (uint8_t *)sub_100011780(12);
      v87 = sub_100011780(32);
      v106[0] = v87;
      *(_DWORD *)v86 = 136315138;
      sub_1000100E0();
      v105 = sub_10000FBEC(v17, v16, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
      swift_bridgeObjectRelease_n(v16, 3);
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Cannot find parameter of type %s to bind value", v86, 0xCu);
      swift_arrayDestroy(v87, 1);
      sub_1000133FC(v87);
      sub_1000133FC((uint64_t)v86);

    }
    else
    {

      swift_bridgeObjectRelease_n(v16, 2);
    }
    v27 = sub_1000177DC();
    return v27;
  }
  v96 = v20;
  sub_10000C028();
  v29 = v11;
  v28 = v20;
  v30 = 0;
  v93 = v20 + 64;
  v31 = 1 << *(_BYTE *)(v20 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & *(_QWORD *)(v20 + 64);
  v94 = (unint64_t)(v31 + 63) >> 6;
  v34 = v15;
  if (!v33)
    goto LABEL_11;
LABEL_10:
  v35 = __clz(__rbit64(v33));
  v36 = (v33 - 1) & v33;
  for (i = v35 | (v30 << 6); ; i = __clz(__rbit64(v39)) + (v30 << 6))
  {
    v99 = v36;
    v100 = v30;
    v41 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * i);
    v42 = v41[1];
    v101 = *v41;
    v43 = v107;
    if (v107 >> 62)
    {
      if ((v107 & 0x8000000000000000) != 0)
        v19 = (id)v107;
      else
        v19 = (id)(v107 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44 = _CocoaArrayWrapper.endIndex.getter(v19);
      if (!v44)
      {
LABEL_86:
        sub_1000059A8();
LABEL_87:
        if (v43 >> 62)
        {
          sub_10001C81C();
          v45 = sub_10000737C();
          sub_1000059A8();
        }
        else
        {
          v45 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        goto LABEL_89;
      }
    }
    else
    {
      v44 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v44)
        goto LABEL_86;
    }
    v45 = 0;
    v46 = 5;
    while (1)
    {
      v47 = (v43 & 0xC000000000000001) != 0 ? (id)sub_10001E29C(v45) : sub_10001D9E4();
      v48 = v47;
      static String._unconditionallyBridgeFromObjectiveC(_:)(objc_msgSend(v47, "identifier"));
      sub_100017D64();
      if (v11 == v101 && v19 == (id)v42)
        break;
      v52 = sub_10001AD10(v49, v50, v101);

      sub_1000101FC();
      if ((v52 & 1) != 0)
        goto LABEL_40;
      v53 = v45 + 1;
      if (__OFADD__(v45, 1))
      {
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      ++v45;
      ++v46;
      if (v53 == v44)
      {
        sub_1000059A8();
        v43 = v107;
        v29 = v95;
        goto LABEL_87;
      }
    }
    sub_1000059A8();

LABEL_40:
    sub_1000059A8();
    v11 = v45 + 1;
    v29 = v95;
    if (__OFADD__(v45, 1))
      goto LABEL_119;
    v43 = v107;
    if (v107 >> 62)
    {
      sub_10001C81C();
      v54 = sub_10000737C();
      sub_1000059A8();
    }
    else
    {
      v54 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    while (v11 != v54)
    {
      v55 = v46 - 4;
      if ((v43 & 0xC000000000000001) != 0)
      {
        v56 = (id)sub_10001E29C(v46 - 4);
      }
      else
      {
        if ((v55 & 0x8000000000000000) != 0)
          goto LABEL_108;
        if (v55 >= *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_109;
        v56 = *(id *)(v43 + 8 * v46);
      }
      v57 = v56;
      static String._unconditionallyBridgeFromObjectiveC(_:)(objc_msgSend(v56, "identifier"));
      sub_100017D64();
      if (v11 == v101 && v54 == v42)
      {

        swift_bridgeObjectRelease();
      }
      else
      {
        v61 = sub_10001AD10(v58, v59, v101);

        sub_1000101FC();
        if ((v61 & 1) == 0)
        {
          if (v55 != v45)
          {
            v62 = v107;
            if ((v107 & 0xC000000000000001) != 0)
            {
              v65 = sub_10001E29C(v45);
              v66 = (id)sub_10001E29C(v46 - 4);
            }
            else
            {
              if (v45 < 0)
                goto LABEL_113;
              v63 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (v45 >= v63)
                goto LABEL_114;
              v64 = sub_10001D9E4();
              if ((v55 & 0x8000000000000000) != 0)
                goto LABEL_115;
              if (v55 >= v63)
                goto LABEL_116;
              v65 = (uint64_t)v64;
              v66 = *(id *)(v62 + 8 * v46);
            }
            v67 = v66;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v62)
              || v62 < 0
              || (v62 & 0x4000000000000000) != 0)
            {
              v62 = sub_1000B8514(v62);
              v107 = v62;
            }
            v68 = *(void **)((v62 & 0xFFFFFFFFFFFFFF8) + 8 * v45 + 0x20);
            *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 8 * v45 + 0x20) = v67;

            specialized Array._endMutation()(v69);
            v70 = v107;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v107)
              || v70 < 0
              || (v70 & 0x4000000000000000) != 0)
            {
              v70 = sub_1000B8514(v70);
              v107 = v70;
            }
            if ((v55 & 0x8000000000000000) != 0)
              goto LABEL_117;
            v71 = v70 & 0xFFFFFFFFFFFFFF8;
            if (v55 >= *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_118;
            v72 = *(void **)(v71 + 8 * v46);
            *(_QWORD *)(v71 + 8 * v46) = v65;

            specialized Array._endMutation()(v73);
          }
          if (__OFADD__(v45++, 1))
            goto LABEL_111;
        }
      }
      v11 = v46 - 3;
      if (__OFADD__(v55, 1))
        goto LABEL_110;
      v43 = v107;
      if (v107 >> 62)
      {
        sub_10001C81C();
        v54 = sub_10000737C();
        sub_1000059A8();
      }
      else
      {
        v54 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      ++v46;
    }
LABEL_89:
    if (v43 >> 62)
    {
      sub_10001C81C();
      v75 = sub_10000737C();
      sub_1000059A8();
    }
    else
    {
      v75 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v75 < v45)
    {
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    sub_1000B7C64();
    v76 = *(void **)(v98 + 88);
    v77 = objc_allocWithZone((Class)LNProperty);
    v78 = v76;
    v19 = sub_100016F00(v101, v42, v76);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v80 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v79 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v80 >= v79 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
    v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v19);
    specialized Array._endMutation()(v81);

    v28 = v96;
    v34 = v97;
    v33 = v99;
    v30 = v100;
    if (v99)
      goto LABEL_10;
LABEL_11:
    v38 = v30 + 1;
    if (__OFADD__(v30, 1))
      goto LABEL_120;
    if (v38 >= v94)
      goto LABEL_103;
    v39 = *(_QWORD *)(v93 + 8 * v38);
    ++v30;
    if (!v39)
    {
      v30 = v38 + 1;
      if (v38 + 1 >= v94)
        goto LABEL_103;
      v39 = *(_QWORD *)(v93 + 8 * v30);
      if (!v39)
      {
        v30 = v38 + 2;
        if (v38 + 2 >= v94)
          goto LABEL_103;
        v39 = *(_QWORD *)(v93 + 8 * v30);
        if (!v39)
          break;
      }
    }
LABEL_24:
    v36 = (v39 - 1) & v39;
  }
  v40 = v38 + 3;
  if (v40 >= v94)
  {
LABEL_103:
    swift_release();
    v88 = objc_allocWithZone((Class)LNAction);
    return sub_1000C5B8C(v92, v29, v90, v34, v91, 0, 0, (uint64_t)_swiftEmptyArrayStorage);
  }
  v39 = *(_QWORD *)(v93 + 8 * v40);
  if (v39)
  {
    v30 = v40;
    goto LABEL_24;
  }
  while (1)
  {
    v30 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v30 >= v94)
      goto LABEL_103;
    v39 = *(_QWORD *)(v93 + 8 * v30);
    ++v40;
    if (v39)
      goto LABEL_24;
  }
LABEL_121:
  __break(1u);
LABEL_122:
  swift_once(&qword_100127E68, sub_100090530);
LABEL_3:
  v22 = type metadata accessor for Logger(0);
  v23 = sub_100012A40(v22, (uint64_t)qword_10012D0B0);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)sub_100011780(2);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Cannot support matching of the same parameter type more than once", v26, 2u);
    sub_1000133FC((uint64_t)v26);
  }

  v27 = sub_1000177DC();
  return v27;
}

uint64_t sub_1000C5B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 == a5 && a4 == a6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a5, a6, 0);
}

id sub_1000C5B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7, uint64_t a8)
{
  void *v8;
  void *v9;
  NSString v16;
  uint64_t v17;
  NSString v18;
  Class isa;
  uint64_t v20;
  Class v21;
  id v22;

  v9 = v8;
  v16 = String._bridgeToObjectiveC()();
  v17 = swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v18 = String._bridgeToObjectiveC()();
    v17 = swift_bridgeObjectRelease(a4);
  }
  else
  {
    v18 = 0;
  }
  sub_1000100D8(v17, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v20 = swift_bridgeObjectRelease(a8);
  sub_1000100D8(v20, &qword_1001284E0, LNProperty_ptr);
  v21 = Array._bridgeToObjectiveC()().super.isa;
  sub_10000C028();
  v22 = objc_msgSend(v9, "initWithIdentifier:mangledTypeName:openAppWhenRun:outputFlags:outputType:systemProtocols:parameters:", v16, v18, a5 & 1, a6, a7, isa, v21);

  return v22;
}

uint64_t sub_1000C5CC4(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, __n128), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v6 = isStackAllocationSafe;
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10003286C(0, v10, v12);
    v13 = sub_1000C5E40((uint64_t)v12, v10, v6, a2);
    if (v3)
      swift_willThrow(v13);
    else
      return v13;
  }
  else
  {
    v14 = (_QWORD *)swift_slowAlloc(v11, -1);
    sub_10003286C(0, v10, v14);
    a3 = sub_1000C5E40((uint64_t)v14, v10, v6, a2);
    swift_slowDealloc(v14, -1, -1);
  }
  return a3;
}

uint64_t sub_1000C5E40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;

  v24 = (unint64_t *)result;
  v25 = 0;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v27 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_20;
    }
    v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v27)
      return sub_1000C62CC(v24, a2, v25, a3);
    v13 = *(_QWORD *)(v26 + 8 * v12);
    ++v6;
    if (!v13)
    {
      v6 = v12 + 1;
      if (v12 + 1 >= v27)
        return sub_1000C62CC(v24, a2, v25, a3);
      v13 = *(_QWORD *)(v26 + 8 * v6);
      if (!v13)
      {
        v6 = v12 + 2;
        if (v12 + 2 >= v27)
          return sub_1000C62CC(v24, a2, v25, a3);
        v13 = *(_QWORD *)(v26 + 8 * v6);
        if (!v13)
          break;
      }
    }
LABEL_19:
    v9 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v6 << 6);
LABEL_20:
    v15 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v11);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    v21 = swift_bridgeObjectRetain();
    LOBYTE(v20) = a4(v16, v17, v20, v19, v21);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      *(unint64_t *)((char *)v24 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
        return sub_1000C62CC(v24, a2, v25, a3);
      }
    }
  }
  v14 = v12 + 3;
  if (v14 >= v27)
    return sub_1000C62CC(v24, a2, v25, a3);
  v13 = *(_QWORD *)(v26 + 8 * v14);
  if (v13)
  {
    v6 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    v6 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v6 >= v27)
      return sub_1000C62CC(v24, a2, v25, a3);
    v13 = *(_QWORD *)(v26 + 8 * v6);
    ++v14;
    if (v13)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_1000C6040(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v33;
  uint64_t v34;
  _QWORD v35[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10001BE7C(&qword_10012B900);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v33 = a1;
  v34 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v34)
        return v9;
      v16 = v33[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v34)
          return v9;
        v16 = v33[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v34)
            return v9;
          v16 = v33[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v34)
              return v9;
            v16 = v33[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v34)
                  return v9;
                v16 = v33[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v35, *(_QWORD *)(v9 + 40));
    sub_1000100E0();
    v22 = v21;
    String.hash(into:)(v35, v20, v19);
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v9 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) == 0)
      break;
    v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    v31 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v26);
    *v31 = v20;
    v31[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v26) = v22;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_39;
    if (!v5)
      return v9;
  }
  v27 = 0;
  v28 = (unint64_t)(63 - v23) >> 6;
  while (++v25 != v28 || (v27 & 1) == 0)
  {
    v29 = v25 == v28;
    if (v25 == v28)
      v25 = 0;
    v27 |= v29;
    v30 = *(_QWORD *)(v12 + 8 * v25);
    if (v30 != -1)
    {
      v26 = __clz(__rbit64(~v30)) + (v25 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_1000C62CC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  if (!a3)
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10001BE7C(&qword_10012A3E8);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v37 = a1;
  v38 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v39 = v11;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v38)
        return v9;
      v16 = v37[v15];
      v17 = v11 + 1;
      if (!v16)
      {
        v17 = v11 + 2;
        if (v11 + 2 >= v38)
          return v9;
        v16 = v37[v17];
        if (!v16)
        {
          v17 = v11 + 3;
          if (v11 + 3 >= v38)
            return v9;
          v16 = v37[v17];
          if (!v16)
          {
            v18 = v11 + 4;
            if (v11 + 4 >= v38)
              return v9;
            v16 = v37[v18];
            if (!v16)
            {
              while (1)
              {
                v17 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_41;
                if (v17 >= v38)
                  return v9;
                v16 = v37[v17];
                ++v18;
                if (v16)
                  goto LABEL_24;
              }
            }
            v17 = v11 + 4;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v39 = v17;
      v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    v19 = v4;
    v20 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v22 = *v20;
    v21 = v20[1];
    v23 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v14);
    v24 = *v23;
    v25 = v23[1];
    Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)(v40, v22, v21);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v9 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) == 0)
      break;
    v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    v34 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v29);
    *v34 = v22;
    v34[1] = v21;
    v35 = (_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v29);
    *v35 = v24;
    v35[1] = v25;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_39;
    v4 = v19;
    v11 = v39;
    if (!v5)
      return v9;
  }
  v30 = 0;
  v31 = (unint64_t)(63 - v26) >> 6;
  while (++v28 != v31 || (v30 & 1) == 0)
  {
    v32 = v28 == v31;
    if (v28 == v31)
      v28 = 0;
    v30 |= v32;
    v33 = *(_QWORD *)(v12 + 8 * v28);
    if (v33 != -1)
    {
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000C6578(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "mangledTypeName");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_1000C65E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000C5B60(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

void sub_1000C65EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[168];
  _QWORD v22[21];
  _OWORD v23[2];
  uint64_t v24;
  _QWORD v25[21];
  _BYTE v26[176];

  if (qword_100127F58 != -1)
    swift_once(&qword_100127F58, sub_1000C6A74);
  sub_1000189C4(v25, &unk_10012D4C0);
  sub_1000379AC(v25);
  if (qword_100127F60 != -1)
    swift_once(&qword_100127F60, sub_1000C6AC8);
  v22[0] = a1;
  v22[1] = a2;
  == infix<A>(_:_:)();
  v8 = v7;
  v10 = v9;
  v12 = v11;
  sub_1000189C4(v21, v25);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  QueryType.filter(_:)(v8, v10, v12, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v22);
  swift_bridgeObjectRelease_n(v12, 2);
  swift_bridgeObjectRelease_n(v10, 2);
  sub_100037A7C(v25);
  sub_1000189C4(v26, v22);
  v22[3] = &type metadata for Table;
  v22[4] = &protocol witness table for Table;
  v22[0] = swift_allocObject(&unk_10011E800, 184, 7);
  sub_1000189C4((void *)(v22[0] + 16), v26);
  v13 = Connection.pluck(_:)(v22);
  v15 = v14;
  sub_10000E87C(v22);
  if (!v3)
  {
    if (v13)
    {
      sub_1000C6C00(v13, v15, (uint64_t *)v23);
      v19 = v23[1];
      v20 = v23[0];
      v16 = v24;
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v13);
      v18 = v19;
      v17 = v20;
    }
    else
    {
      v16 = 0;
      v17 = 0uLL;
      v18 = 0uLL;
    }
    *(_OWORD *)a3 = v17;
    *(_OWORD *)(a3 + 16) = v18;
    *(_QWORD *)(a3 + 32) = v16;
  }
  sub_1000117E8();
}

void sub_1000C67F8(__int128 *a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[10];
  _BYTE v15[168];
  _BYTE v16[16];
  _QWORD v17[21];
  _QWORD v18[21];
  SQLite::Insert v19;

  if (qword_100127F58 != -1)
    swift_once(&qword_100127F58, sub_1000C6A74);
  sub_1000189C4(v17, &unk_10012D4C0);
  sub_1000189C4(v15, &unk_10012D4C0);
  sub_1000379AC(v17);
  if (qword_100127F60 != -1)
    swift_once(&qword_100127F60, sub_1000C6AC8);
  v13 = *a1;
  <- infix<A>(_:_:)(qword_10012D568, unk_10012D570, qword_10012D578, (uint64_t)&v13, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
  v2 = sub_10001BE7C(&qword_100128D08);
  inited = swift_initStackObject(v2, &v12);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  if (qword_100127F68 != -1)
    swift_once(&qword_100127F68, sub_1000C6B30);
  v4 = qword_10012D580;
  v5 = *(_QWORD *)algn_10012D588;
  v6 = qword_10012D590;
  sub_1000904E8((uint64_t)(a1 + 1), (uint64_t)v16);
  sub_1000904E8((uint64_t)v16, (uint64_t)&v13);
  sub_100035CB4((uint64_t)v16);
  <- infix<A>(_:_:)(v4, v5, v6, (uint64_t)&v13, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
  sub_10001E408((uint64_t)v16);
  if (qword_100127F70 != -1)
    swift_once(&qword_100127F70, sub_1000C6B98);
  *(_QWORD *)&v13 = *((_QWORD *)a1 + 4);
  <- infix<A>(_:_:)(qword_10012D598, unk_10012D5A0, qword_10012D5A8, (uint64_t)&v13, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  v7 = QueryType.insert(_:_:)((uint64_t)v14);
  v9 = v8;
  v11 = v10;
  swift_setDeallocating(inited);
  sub_10001CC3C();
  sub_100019F20(v14);
  sub_1000189C4(v18, v15);
  sub_100037A7C(v18);
  v19.template._countAndFlagsBits = v7;
  v19.template._object = v9;
  v19.bindings._rawValue = v11;
  Connection.run(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000117E8();
}

void *sub_1000C6A74()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0xD000000000000019, 0x80000001000F4830, 0, 0);
  return memcpy(&unk_10012D4C0, __src, 0xA8uLL);
}

uint64_t sub_1000C6AC8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D00);
  v1 = sub_100090420((unint64_t *)&qword_100129FA0, &qword_100128D00);
  return ExpressionType.init(_:)(0xD000000000000010, 0x80000001000F3C30, v0, v1);
}

uint64_t sub_1000C6B30()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100128D30);
  v1 = sub_100090420(&qword_100128D38, &qword_100128D30);
  return ExpressionType.init(_:)(0xD00000000000001ELL, 0x80000001000F6330, v0, v1);
}

uint64_t sub_1000C6B98()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100129560);
  v1 = sub_100090420((unint64_t *)&qword_10012B850, &qword_100129560);
  return ExpressionType.init(_:)(0xD000000000000011, 0x80000001000F6310, v0, v1);
}

void sub_1000C6C00(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_100127F60 != -1)
    swift_once(&qword_100127F60, sub_1000C6AC8);
  Row.get<A>(_:)();
  v8 = v11;
  v7 = v13;
  if (qword_100127F68 != -1)
    swift_once(&qword_100127F68, sub_1000C6B30);
  Row.get<A>(_:)(qword_10012D580, *(uint64_t *)algn_10012D588, qword_10012D590, a1, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v6, v9, v10, v11, v13, v15, v16, v17, v18, v19, v20, v21,
    v22);
  if (qword_100127F70 != -1)
    swift_once(&qword_100127F70, sub_1000C6B98);
  Row.get<A>(_:)();
  *a3 = v8;
  a3[1] = v7;
  a3[2] = v12;
  a3[3] = v14;
  a3[4] = v12;
}

uint64_t sub_1000C6DAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

_QWORD *initializeWithCopy for LNAppShortcutBundleMetadataRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for LNAppShortcutBundleMetadataRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for LNAppShortcutBundleMetadataRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for LNAppShortcutBundleMetadataRecord()
{
  return &type metadata for LNAppShortcutBundleMetadataRecord;
}

void sub_1000C6F48()
{
  sqlite3 *v0;
  sqlite3 *v1;
  Swift::String v2;
  uint64_t v3;

  v0 = (sqlite3 *)Connection.handle.getter();
  sqlite3_extended_result_codes(v0, 1);
  v3 = 1;
  v1 = (sqlite3 *)Connection.handle.getter();
  sqlite3_file_control(v1, 0, 10, &v3);
  sub_100011870();
  v2._countAndFlagsBits = 0xD000000000000018;
  Connection.execute(_:)(v2);
}

void sub_1000C6FDC()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  void *v56;
  Swift::String v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  void *v69;
  void *v70;
  uint64_t countAndFlagsBits;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *object;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  Swift::String v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  Swift::String v86;
  Swift::String v87;

  _StringGuts.grow(_:)(3673);
  v86._object = (void *)0xD000000000000025;
  sub_10001B824(0xD000000000000025, (uint64_t)"PRAGMA foreign_keys=0;\n\nCREATE TABLE ");
  v0._countAndFlagsBits = 0x6769666E6F63;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
  sub_1000177E8();
  v1._countAndFlagsBits = 7955819;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  sub_10001F6DC(0xD000000000000020);
  sub_10000C114();
  v2._object = (void *)0x80000001000F63B0;
  v2._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v2);
  sub_100018498();
  sub_1000177E8();
  sub_10001AD24();
  sub_10001F6DC(0xD000000000000020);
  v3._countAndFlagsBits = 7107189;
  v3._object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  sub_10001C0D8();
  sub_100016444((uint64_t)"installIdentifier");
  v4._object = (void *)0x80000001000F63E0;
  v4._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v4);
  sub_100011870();
  v5._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  sub_100011870();
  object = v6._object;
  v6._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x617461646174656DLL;
  v7._object = (void *)0xEF6E6F6973726556;
  String.append(_:)(v7);
  sub_10001B824(0xD00000000000001FLL, (uint64_t)" INT NOT NULL\n);\n\nCREATE TABLE ");
  sub_100018AD0(0x736E6F69746361);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_100017D70();
  sub_100011870();
  v69 = v8._object;
  countAndFlagsBits = v8._countAndFlagsBits;
  String.append(_:)(v8);
  sub_100017F28();
  sub_100011870();
  v82 = v9;
  String.append(_:)(v9);
  sub_10001C830();
  sub_10001A844(44);
  sub_100017D70();
  sub_10001DDD4(0xD000000000000013);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  sub_10001B824(0xD000000000000038, (uint64_t)") ON DELETE CASCADE\n);\nCREATE INDEX actionIdentifier ON ");
  sub_100018AD0(0x736E6F69746361);
  sub_10001E2A4();
  sub_10001C830();
  sub_10001A844(44);
  sub_100017D70();
  v10._object = (void *)0x80000001000F6540;
  v10._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v10);
  v86._countAndFlagsBits = 0xD00000000000001ELL;
  sub_10001B824(0xD00000000000001ELL, (uint64_t)"defaultActionForSystemProtocol");
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_10001CDA8();
  sub_10001B3BC();
  sub_100011870();
  v74 = v11;
  sub_10001B520(v12, v11);
  sub_100011870();
  v13._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v13);
  sub_10001C830();
  sub_10001A844(44);
  sub_10001CDA8();
  sub_10001DDD4(0xD000000000000013);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  sub_100011870();
  v80 = v14._object;
  v14._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v14);
  sub_10001D9F0(0x7365697469746E65);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_10001D9F0(0x656D614E65707974);
  sub_10001B824(0xD000000000000057, (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(metadata, '$.typeName')) VIRTUAL NOT NULL,\n    ");
  sub_100017F28();
  sub_1000C7D98(v15, (uint64_t)v82._object);
  sub_10001C830();
  sub_10001A844(44);
  sub_10001D9F0(0x656D614E65707974);
  sub_10001F7B0(0xD000000000000013);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  sub_10001B824(0xD000000000000032, (uint64_t)") ON DELETE CASCADE\n);\nCREATE INDEX entityType ON ");
  sub_10001D9F0(0x7365697469746E65);
  sub_10001E2A4();
  sub_10001C830();
  sub_10001A844(44);
  sub_10001D9F0(0x656D614E65707974);
  v16._countAndFlagsBits = 0xD000000000000011;
  v16._object = (void *)0x80000001000F6540;
  String.append(_:)(v16);
  sub_100018AD0(0x73656972657571);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_100017F28();
  sub_10001B3BC();
  sub_100018728();
  sub_10001B824(0xD00000000000005FLL, (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(metadata, '$.queryType')) VIRTUAL NOT NULL,\n    UNIQUE(");
  sub_10001C830();
  sub_10001A844(44);
  sub_100018728();
  sub_10001F7B0(0xD000000000000013);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  sub_10001B824(0xD000000000000031, (uint64_t)") ON DELETE CASCADE\n);\nCREATE INDEX queryType ON ");
  sub_100018AD0(0x73656972657571);
  sub_10001E2A4();
  sub_10001C830();
  sub_10001A844(44);
  sub_100018728();
  sub_10001E960(0xD000000000000011);
  v17._countAndFlagsBits = 0x736D756E65;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_100017D70();
  v18._object = v69;
  v18._countAndFlagsBits = countAndFlagsBits;
  String.append(_:)(v18);
  sub_100017F28();
  String.append(_:)(v82);
  sub_10001C830();
  sub_10001A844(44);
  sub_100017D70();
  sub_10001F7B0(0xD000000000000013);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  v19 = v80;
  sub_10001F7B0(0xD000000000000025);
  sub_10001B824(0xD000000000000019, (uint64_t)"appShortcutBundleMetadata");
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_100018608((uint64_t)"appShortcutProviderMangledName", v64, v66, 0xD000000000000013, 0x80000001000F64E0, (uint64_t)v69, countAndFlagsBits, 0xD00000000000001FLL, v74, 0x80000001000F6540, (uint64_t)object, 0x80000001000F63E0, (uint64_t)v80, v82._countAndFlagsBits, (uint64_t)v82._object, 0xD000000000000011, v86);
  sub_10001C0D8();
  sub_1000102C0((uint64_t)"shortcutTileColor");
  sub_100011870();
  v20._countAndFlagsBits = v72;
  String.append(_:)(v20);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  sub_10001F7B0(0xD000000000000025);
  v21._countAndFlagsBits = 0x74726F6853707061;
  v21._object = (void *)0xEC00000073747563;
  String.append(_:)(v21);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_100017F28();
  sub_100011870();
  v73 = v22._object;
  v22._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v22);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  sub_10001F7B0(0xD000000000000025);
  sub_10001B824(0xD000000000000015, (uint64_t)"appShortcutParameters");
  sub_1000177E8();
  sub_1000102C0((uint64_t)"appShortcutParameterId");
  sub_10001B3BC();
  sub_10001C830();
  sub_10001B3BC();
  sub_100011870();
  sub_10001E030(v23, v24);
  sub_10001B3BC();
  sub_100018C78();
  sub_10001B3BC();
  sub_100011870();
  v70 = (void *)v25;
  sub_10001B520(v26, v25);
  sub_10001B3BC();
  sub_10001D9F0(0x79747265706F7270);
  sub_10001B3BC();
  sub_1000102C0((uint64_t)"optionsCollectionTitle");
  sub_10001C0D8();
  sub_100016444((uint64_t)"optionsCollectionSystemImageName");
  sub_10001B824(0xD000000000000017, (uint64_t)" TEXT,\n    FOREIGN KEY(");
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  sub_10001F7B0(0xD000000000000025);
  sub_10001B520(v27, 0x80000001000F3C50);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_10001F6DC(0xD000000000000010);
  sub_10001B3BC();
  v28._countAndFlagsBits = 0x446465646F636E65;
  v28._object = (void *)0xEB00000000617461;
  String.append(_:)(v28);
  sub_100011870();
  v29._countAndFlagsBits = v83;
  String.append(_:)(v29);
  sub_10001C830();
  sub_10001A844(44);
  sub_10001F6DC(0xD000000000000010);
  sub_100011870();
  v84 = (void *)v30;
  sub_10001E030(v31, v30);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  v32._countAndFlagsBits = 0xD000000000000025;
  v32._object = v19;
  String.append(_:)(v32);
  sub_10001B520(v33, 0x80000001000F4850);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_10001E960(0xD000000000000010);
  sub_10001B3BC();
  sub_10000C114();
  v34._countAndFlagsBits = v68._countAndFlagsBits;
  v34._object = v78;
  String.append(_:)(v34);
  sub_100017AE4(0x746169636F737361, 0x617461446465);
  sub_100011870();
  v35._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v35);
  sub_10001C830();
  sub_10001A844(44);
  sub_10001E960(0xD000000000000010);
  String.append(_:)(v68);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  sub_10001DDD4(0xD000000000000025);
  v36._countAndFlagsBits = 0x746E6176656C6572;
  v36._object = (void *)0xEF73746E65746E49;
  String.append(_:)(v36);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_10001E960(0xD000000000000010);
  sub_10001B3BC();
  sub_100011870();
  sub_1000C7D98(v37, v38);
  v39._countAndFlagsBits = 0xD000000000000014;
  v39._object = v79;
  String.append(_:)(v39);
  v40._object = (void *)0xEA0000000000646ELL;
  v40._countAndFlagsBits = 0x694B746567646977;
  String.append(_:)(v40);
  sub_10001C0D8();
  sub_100017AE4(0x436465646F636E65, 0x747865746E6FLL);
  sub_100011870();
  v41._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v41);
  sub_10001C830();
  sub_10001A844(44);
  sub_10001E960(0xD000000000000010);
  sub_10001AF38();
  sub_100018AD0(0x736E6F69746361);
  sub_10001E2A4();
  sub_10001C830();
  sub_10001A844(44);
  sub_100017D70();
  v42._countAndFlagsBits = 0xD000000000000025;
  v42._object = v19;
  String.append(_:)(v42);
  sub_10001B520(v43, 0x80000001000F4870);
  sub_1000177E8();
  sub_1000159D8();
  sub_10001B3BC();
  sub_10001C830();
  sub_10001B3BC();
  sub_100018C78();
  sub_10001B3BC();
  v44._countAndFlagsBits = 0xD000000000000010;
  v44._object = v70;
  String.append(_:)(v44);
  sub_10001B3BC();
  sub_100011870();
  sub_1000C7D98(v45, v46);
  sub_10001B3BC();
  sub_100011870();
  sub_10001E030(v47, v48);
  sub_10001B3BC();
  sub_10000C114();
  sub_10001B824(0xD000000000000021, (uint64_t)" TEXT NOT NULL,\n    PRIMARY KEY (");
  sub_1000159D8();
  sub_10001A0CC();
  sub_10001C830();
  v49._countAndFlagsBits = 0xD000000000000012;
  v49._object = v84;
  String.append(_:)(v49);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  v50._countAndFlagsBits = 0xD000000000000025;
  v50._object = v19;
  String.append(_:)(v50);
  sub_10001E960(0xD000000000000017);
  sub_1000177E8();
  sub_100019B5C();
  sub_10001B3BC();
  sub_100018AD0(0x6D796E6F6E7973);
  sub_10001B3BC();
  sub_10001C830();
  sub_10001DDD4(0xD000000000000020);
  sub_100019B5C();
  sub_10001A844(44);
  sub_10001C830();
  sub_10001F6DC(0xD000000000000015);
  v51._countAndFlagsBits = 0xD000000000000010;
  v51._object = (void *)0x80000001000F4870;
  String.append(_:)(v51);
  sub_10001E2A4();
  sub_1000159D8();
  sub_10001A844(44);
  sub_10001C830();
  sub_10001B824(0xD000000000000046, (uint64_t)")\n        ON DELETE CASCADE\n);\n\nCREATE INDEX idx_parentId_bundleId ON ");
  sub_10001E960(0xD000000000000017);
  sub_10001E2A4();
  sub_100019B5C();
  sub_10001A0CC();
  sub_10001C830();
  v52._countAndFlagsBits = v85;
  v52._object = v76;
  String.append(_:)(v52);
  sub_100017AE4(0x50656C706D617865, 0x736573617268);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_100019B5C();
  sub_10001B824(0xD000000000000062, (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(description, '$.parentIdentifier')) VIRTUAL NOT NULL,\n    ");
  v53._countAndFlagsBits = 1684957547;
  v53._object = (void *)0xE400000000000000;
  String.append(_:)(v53);
  sub_10001B824(0xD000000000000056, (uint64_t)" TEXT GENERATED ALWAYS AS (json_extract(description, '$.kind')) VIRTUAL NOT NULL,\n    ");
  v54._countAndFlagsBits = 0x7470697263736564;
  v54._object = (void *)0xEB000000006E6F69;
  String.append(_:)(v54);
  sub_10001DDD4(0xD000000000000020);
  sub_10001C830();
  sub_10001F6DC(0xD000000000000015);
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  sub_10001B824(0xD00000000000002DLL, (uint64_t)")\n        ON DELETE CASCADE\n);\n\nCREATE TABLE ");
  v55._countAndFlagsBits = 0x6E61747369737361;
  v55._object = (void *)0xEF746E65746E4974;
  String.append(_:)(v55);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_100017F28();
  sub_10001DDD4(0xD000000000000020);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  v56 = v87._object;
  v57._countAndFlagsBits = (uint64_t)v87._object;
  v58 = v81;
  v57._object = v81;
  String.append(_:)(v57);
  sub_100018608((uint64_t)"assistantIntentNegativePhrases", v65, 0xD000000000000012, v68._countAndFlagsBits, (uint64_t)v68._object, (uint64_t)v70, 0xD000000000000015, (uint64_t)v73, v75, (uint64_t)v76, (uint64_t)v78, 0x80000001000F4870, (uint64_t)v81, (uint64_t)v84, 0xD000000000000017, v85, v87);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  v59._countAndFlagsBits = 0x657669746167656ELL;
  v59._object = (void *)0xEF73657361726850;
  String.append(_:)(v59);
  sub_10001DDD4(0xD000000000000020);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  v60._countAndFlagsBits = (uint64_t)v56;
  v60._object = v58;
  String.append(_:)(v60);
  sub_100011870();
  v61._countAndFlagsBits = v67;
  String.append(_:)(v61);
  sub_1000177E8();
  sub_10001C830();
  sub_10001B3BC();
  sub_100017F28();
  sub_10001DDD4(0xD000000000000020);
  sub_10001C830();
  sub_10001AF38();
  sub_100018498();
  sub_10001E2A4();
  sub_10001AD24();
  sub_10001B824(0xD000000000000045, (uint64_t)") ON DELETE CASCADE\n);\n\nPRAGMA foreign_keys=1;\nPRAGMA user_version = ");
  v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v63 = v62._object;
  String.append(_:)(v62);
  swift_bridgeObjectRelease(v63);
  sub_10001A844(59);
  qword_10012D5B0 = 0;
  *(_QWORD *)algn_10012D5B8 = 0xE000000000000000;
}

void sub_1000C7D98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_1000C7DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[21];
  _QWORD v16[21];
  _BYTE v17[176];

  if (qword_100127F80 != -1)
    swift_once(&qword_100127F80, sub_1000C82D4);
  sub_1000189C4(v16, &unk_10012B908);
  sub_1000379AC(v16);
  if (qword_100127F88 != -1)
    swift_once(&qword_100127F88, sub_1000C8328);
  sub_10001768C((uint64_t)&qword_10012B9B0);
  v15[0] = a1;
  v15[1] = a2;
  == infix<A>(_:_:)();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  sub_1000189C4(&v14, v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryType.filter(_:)(v6, v8, v10, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v15);
  swift_bridgeObjectRelease_n(v10, 2);
  swift_bridgeObjectRelease_n(v8, 2);
  sub_100037A7C(v16);
  sub_1000189C4(v17, v15);
  v15[3] = &type metadata for Table;
  v15[4] = &protocol witness table for Table;
  v15[0] = swift_allocObject(&unk_10011E8B0, 184, 7);
  sub_1000189C4((void *)(v15[0] + 16), v17);
  Connection.prepareRowIterator(_:)(v15);
  v11 = sub_10000E87C(v15);
  if (!v2)
  {
    __chkstk_darwin(v11);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    v8 = v13;
    swift_release();
    sub_1000059B0();
    swift_release();
  }
  return v8;
}

uint64_t sub_1000C8004(uint64_t a1)
{
  uint64_t v2;
  Swift::OpaquePointer v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t countAndFlagsBits;
  void *object;
  void *rawValue;
  uint64_t v33[22];
  _BYTE v34[352];
  _QWORD v35[22];
  SQLite::Insert v36;
  SQLite::Insert v37;

  if (qword_100127F80 != -1)
    swift_once(&qword_100127F80, sub_1000C82D4);
  sub_1000189C4(v35, &unk_10012B908);
  v2 = sub_10001BE7C(&qword_100128D08);
  v3._rawValue = (void *)swift_initStackObject(v2, v34);
  *((_OWORD *)v3._rawValue + 1) = xmmword_1000F05A0;
  sub_1000379AC(v35);
  if (qword_100127F88 != -1)
    swift_once(&qword_100127F88, sub_1000C8328);
  v4 = sub_10001768C((uint64_t)&qword_10012B9B0);
  *(_OWORD *)v33 = *(_OWORD *)a1;
  sub_100017EBC(v4, v5, v6, v7, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v8, v9, v33[0]);
  if (qword_100127F90 != -1)
    swift_once(&qword_100127F90, sub_1000C8344);
  v10 = sub_10001768C((uint64_t)&qword_10012B9C8);
  *(_OWORD *)v33 = *(_OWORD *)(a1 + 16);
  sub_100017EBC(v10, v11, v12, v13, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v14, v15, v33[0]);
  if (qword_100127F98 != -1)
    swift_once(&qword_100127F98, sub_1000C8360);
  v16 = sub_10001768C((uint64_t)&qword_10012B9E0);
  sub_100017EBC(v16, v17, v18, v19, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, v20, v21, *(_QWORD *)(a1 + 32));
  if (qword_100127FA0 != -1)
    swift_once(&qword_100127FA0, sub_1000C83C0);
  v22 = qword_10012B9F8;
  v23 = unk_10012BA00;
  v24 = qword_10012BA08;
  v25 = *(_QWORD *)(a1 + 48);
  if (v25 >> 60 == 15)
  {
    v26 = 0;
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 40);
    sub_10001EBF8(v27, *(_QWORD *)(a1 + 48));
    sub_1000C86D8(v27, v25);
    v26 = v28;
    sub_100013158(v27, v25);
  }
  v33[0] = v26;
  <- infix<A>(_:_:)(v22, v23, v24, (uint64_t)v33, (uint64_t)&type metadata for Blob, (uint64_t)&protocol witness table for Blob);
  swift_bridgeObjectRelease(v26);
  sub_1000189C4(v33, v35);
  v36 = QueryType.insert(or:_:)(SQLite_OnConflict_replace, v3);
  countAndFlagsBits = v36.template._countAndFlagsBits;
  object = v36.template._object;
  rawValue = v36.bindings._rawValue;
  swift_bridgeObjectRelease(v3._rawValue);
  sub_100037A7C(v35);
  v37.template._countAndFlagsBits = countAndFlagsBits;
  v37.template._object = object;
  v37.bindings._rawValue = rawValue;
  Connection.run(_:)(v37);
  swift_bridgeObjectRelease(rawValue);
  return sub_1000059B0();
}

void *sub_1000C82D4()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0xD000000000000010, 0x80000001000F4850, 0, 0);
  return memcpy(&unk_10012B908, __src, 0xA8uLL);
}

uint64_t sub_1000C8328(uint64_t a1)
{
  return sub_10008F0C8(a1, (uint64_t)&qword_10012B9B0, 0x80000001000F3C30);
}

uint64_t sub_1000C8344(uint64_t a1)
{
  return sub_10008F0C8(a1, (uint64_t)&qword_10012B9C8, 0x80000001000F4E10);
}

uint64_t sub_1000C8360()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_100129560);
  v1 = sub_100090420((unint64_t *)&qword_10012B850, &qword_100129560);
  return ExpressionType.init(_:)(0x65756C6176, 0xE500000000000000, v0, v1);
}

uint64_t sub_1000C83C0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001BE7C(&qword_10012BA10);
  v1 = sub_100090420(&qword_10012BA18, &qword_10012BA10);
  return ExpressionType.init(_:)(0x746169636F737361, 0xEE00617461446465, v0, v1);
}

uint64_t sub_1000C8430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_100127F88 != -1)
    swift_once(&qword_100127F88, sub_1000C8328);
  Row.get<A>(_:)();
  v7 = v16;
  v6 = v18;
  if (qword_100127F90 != -1)
    swift_once(&qword_100127F90, sub_1000C8344);
  Row.get<A>(_:)();
  v9 = v16;
  v8 = v18;
  if (qword_100127F98 != -1)
    swift_once(&qword_100127F98, sub_1000C8360);
  Row.get<A>(_:)();
  v11 = v16;
  if (qword_100127FA0 != -1)
    swift_once(&qword_100127FA0, sub_1000C83C0);
  Row.get<A>(_:)(qword_10012B9F8, unk_10012BA00, qword_10012BA08, a1, a2, (uint64_t)&type metadata for Blob, (uint64_t)&protocol witness table for Blob, v10, v14, v15, v16, v18, v19, v20, v21, v22, v23, v24, v25,
    v26);
  result = v17;
  if (v17)
    result = sub_1000B7750(v17);
  else
    v13 = 0xF000000000000000;
  *a3 = v7;
  a3[1] = v6;
  a3[2] = v9;
  a3[3] = v8;
  a3[4] = v11;
  a3[5] = result;
  a3[6] = v13;
  return result;
}

_QWORD *sub_1000C8658@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  _QWORD v5[7];

  result = a1(v5);
  if (!v2)
    return (_QWORD *)sub_1000C88E8((uint64_t)v5, a2);
  return result;
}

uint64_t sub_1000C86A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5[7];

  sub_1000C8430(a1, a2, v5);
  return sub_1000C88E8((uint64_t)v5, a3);
}

void sub_1000C86D8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

_QWORD *sub_1000C8754()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_10001BE7C(&qword_100128638);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_10001EBF8(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_10001EA88(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1000C8828);
    }
  }
  return v4;
}

uint64_t sub_1000C8840()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1000C88C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000C86A0(a1, a2, a3);
}

_QWORD *sub_1000C88D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C8658(*(_QWORD *(**)(_QWORD *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1000C88E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(qword_10012BA20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for LNIntentEnablementRecord(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >> 60 != 15)
    return sub_10001EA88(*(_QWORD *)(a1 + 40), v3);
  return result;
}

uint64_t initializeWithCopy for LNIntentEnablementRecord(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = a2[4];
  v5 = a2 + 5;
  v6 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  }
  else
  {
    v7 = *v5;
    sub_10001EBF8(*v5, v6);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v6;
  }
  return a1;
}

_QWORD *assignWithCopy for LNIntentEnablementRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v4 = a2 + 5;
  v5 = a2[6];
  if (a1[6] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_10001EBF8(*v4, v5);
      v8 = a1[5];
      v9 = a1[6];
      a1[5] = v7;
      a1[6] = v5;
      sub_10001EA88(v8, v9);
      return a1;
    }
    sub_1000B7574((uint64_t)(a1 + 5));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  sub_10001EBF8(*v4, v5);
  a1[5] = v6;
  a1[6] = v5;
  return a1;
}

_QWORD *assignWithTake for LNIntentEnablementRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = a2 + 5;
  v7 = a1[6];
  if (v7 >> 60 != 15)
  {
    v8 = a2[6];
    if (v8 >> 60 != 15)
    {
      v9 = a1[5];
      a1[5] = *v6;
      a1[6] = v8;
      sub_10001EA88(v9, v7);
      return a1;
    }
    sub_1000B7574((uint64_t)(a1 + 5));
  }
  *(_OWORD *)(a1 + 5) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for LNIntentEnablementRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LNIntentEnablementRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LNIntentEnablementRecord()
{
  return &type metadata for LNIntentEnablementRecord;
}

uint64_t sub_1000C8C2C(uint64_t a1)
{
  return sub_1000C8DBC(a1, qword_10012D5C0, &qword_100127E68, (uint64_t)qword_10012D0B0, (uint64_t)sub_100090530);
}

id sub_1000C8C50()
{
  id result;

  result = (id)getLNLogCategoryExecution();
  if (result)
    qword_10012D5D8 = (uint64_t)result;
  else
    __break(1u);
  return result;
}

uint64_t sub_1000C8C7C(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1000C8CA8 + 4 * byte_1000F1CA0[a1]))("connecting", 10);
}

void sub_1000C8CA8()
{
  sub_10001AF5C();
}

uint64_t sub_1000C8CE8(uint64_t a1)
{
  return sub_1000C8DBC(a1, qword_10012D5E0, &qword_100127E78, (uint64_t)qword_10012D0E0, (uint64_t)sub_100090558);
}

uint64_t sub_1000C8D0C(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1000C8D38 + 4 * byte_1000F1CA5[a1]))("onInstall", 9);
}

void sub_1000C8D38()
{
  sub_10001AF5C();
}

uint64_t sub_1000C8D98(uint64_t a1)
{
  return sub_1000C8DBC(a1, qword_10012D5F8, &qword_100127E80, (uint64_t)qword_10012D0F8, (uint64_t)sub_10009056C);
}

uint64_t sub_1000C8DBC(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v20;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - v14;
  v16 = type metadata accessor for OSSignposter(0);
  sub_1000269D8(v16, a2);
  sub_100012A40(v16, (uint64_t)a2);
  if (*a3 != -1)
    swift_once(a3, a5);
  v17 = sub_100012A40(v9, a4);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18(v15, v17, v9);
  v18(v13, (uint64_t)v15, v9);
  OSSignposter.init(logger:)(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t sub_1000C8EE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = "\b";
      result = swift_initClassMetadata2(a1, 0, 6, v5, a1 + 96);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t *sub_1000C8F98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;

  v2 = type metadata accessor for Logger(0);
  sub_10001A46C(v2);

  v3 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 80));
  sub_10001A46C(v3);
  swift_release();
  return v0;
}

uint64_t sub_1000C901C()
{
  uint64_t v0;

  sub_1000C8F98();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for NotificationDebouncer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NotificationDebouncer);
}

uint64_t _s14ParameterValueVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t _s14ParameterValueVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t _s14ParameterValueVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

__n128 _s14ParameterValueVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s14ParameterValueVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v8 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t _s14ParameterValueVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 58))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14ParameterValueVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s14ParameterValueVMa()
{
  return &_s14ParameterValueVN;
}

uint64_t sub_1000C92D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  char v22;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7 || (v8 = sub_100017E14(v4, v5, *(_QWORD *)a2, v6), v9 = 0, (v8 & 1) != 0))
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v10 == v12 && v11 == v13;
    if (v14 || (v15 = sub_100017E14(v10, v11, v12, v13), v9 = 0, (v15 & 1) != 0))
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      v18 = *(_QWORD *)(a2 + 32);
      v19 = *(_QWORD *)(a2 + 40);
      v20 = v16 == v18 && v17 == v19;
      if (v20 || (v21 = sub_100017E14(v16, v17, v18, v19), v9 = 0, (v21 & 1) != 0))
      {
        sub_10002F630(*(_QWORD **)(a1 + 48), *(_QWORD **)(a2 + 48));
        if ((v22 & 1) != 0 && ((*(unsigned __int8 *)(a1 + 56) ^ *(unsigned __int8 *)(a2 + 56)) & 1) == 0)
          v9 = ((*(_BYTE *)(a1 + 57) & 1) == 0) ^ *(_BYTE *)(a2 + 57);
        else
          v9 = 0;
      }
    }
  }
  return v9 & 1;
}

uint64_t sub_1000C939C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  int v27;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for Schema.RuntimeError(0);
  v5 = __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)&v26[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v26[-1] - v8;
  v10 = type metadata accessor for MetadataError(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10001765C();
  v14 = v13 - v12;
  v26[0] = a1;
  sub_1000165C0();
  v15 = sub_10001BE7C((uint64_t *)&unk_100129420);
  if (sub_1000177A0(v14, (uint64_t)v26, v15, v10))
  {
    sub_1000059A0();
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 32))(a2, v14, v10);
    swift_storeEnumTagMultiPayload(a2, v4, 1);
LABEL_5:
    v16 = v26[0];
    return swift_errorRelease(v16);
  }
  swift_errorRelease(v26[0]);
  v26[0] = a1;
  sub_1000165C0();
  if (sub_1000177A0((uint64_t)v9, (uint64_t)v26, v15, v4))
  {
    sub_1000059A0();
    sub_1000C95EC((uint64_t)v9, (uint64_t)a2);
    goto LABEL_5;
  }
  swift_errorRelease(v26[0]);
  v29 = a1;
  sub_1000165C0();
  if (!sub_1000177A0((uint64_t)v26, (uint64_t)&v29, v15, (uint64_t)&type metadata for Result))
  {
    swift_errorRelease(v29);
    *a2 = a1;
    return swift_storeEnumTagMultiPayload(a2, v4, 3);
  }
  v18 = v26[0];
  v19 = v26[1];
  v20 = v27;
  v21 = v28;
  v22 = sub_10004FC40();
  v23 = swift_allocError(&type metadata for Result, v22, 0, 0);
  *(_QWORD *)v24 = v18;
  *(_QWORD *)(v24 + 8) = v19;
  *(_DWORD *)(v24 + 16) = v20;
  *(_QWORD *)(v24 + 24) = v21;
  sub_1000059A0();
  *v7 = v23;
  swift_storeEnumTagMultiPayload(v7, v4, 2);
  sub_1000C95EC((uint64_t)v7, (uint64_t)a2);
  v16 = v29;
  return swift_errorRelease(v16);
}

uint64_t type metadata accessor for Schema.RuntimeError(uint64_t a1)
{
  uint64_t result;

  result = qword_10012BB18;
  if (!qword_10012BB18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Schema.RuntimeError);
  return result;
}

uint64_t sub_1000C95EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Schema.RuntimeError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C9630(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1000C9680 + 4 * byte_1000F1D90[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t sub_1000C975C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 4:
      result = swift_bridgeObjectRelease(a1[1]);
      break;
    case 1:
      v4 = type metadata accessor for MetadataError(0);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 2:
    case 3:
      result = swift_errorRelease(*a1);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000C97E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_1000C9828 + 4 * byte_1000F1D9A[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

_QWORD *sub_1000C9828()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v3 = v2[1];
  *v0 = *v2;
  v0[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t sub_1000C98E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_1000C9A04(result);
    v5 = (char *)&loc_1000C9938 + 4 * byte_1000F1D9F[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1000C9A04(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Schema.RuntimeError(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1000C9A40(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for MetadataError(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1000C9ACC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000C9A04((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for MetadataError(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000C9B68(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1000F1DB8;
  result = type metadata accessor for MetadataError(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1000F1DD0;
    v4[3] = &unk_1000F1DD0;
    v4[4] = &unk_1000F1DB8;
    swift_initEnumMetadataMultiPayload(a1, 256, 5, v4);
    return 0;
  }
  return result;
}

void sub_1000C9BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = type metadata accessor for MetadataError(0);
  __chkstk_darwin(v1);
  sub_10001765C();
  v2 = type metadata accessor for Schema.RuntimeError(0);
  __chkstk_darwin(v2);
  sub_10001765C();
  v5 = v4 - v3;
  sub_1000C9E30(v0, v4 - v3);
  v6 = (char *)sub_1000C9C98 + 4 * byte_1000F1DA4[swift_getEnumCaseMultiPayload(v5, v2)];
  __asm { BR              X10 }
}

uint64_t sub_1000C9C98()
{
  uint64_t v0;

  sub_10001C840();
  _StringGuts.grow(_:)(31);
  sub_100018AD8();
  *(_QWORD *)(v0 - 64) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 - 56) = 0x80000001000F6B80;
  sub_10001E2B0();
  sub_1000100D0();
  return *(_QWORD *)(v0 - 64);
}

uint64_t sub_1000C9E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Schema.RuntimeError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000C9E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[21];
  _QWORD v14[21];
  _QWORD v15[21];

  if (qword_100127FC8 != -1)
    swift_once(&qword_100127FC8, sub_1000CA300);
  sub_1000189C4(v15, &unk_10012BB50);
  if (a2)
  {
    sub_1000379AC(v15);
    if (qword_100127FD0 != -1)
      swift_once(&qword_100127FD0, sub_1000CA350);
    v14[0] = a1;
    v14[1] = a2;
    == infix<A>(_:_:)();
    v7 = v6;
    v9 = v8;
    v11 = v10;
    sub_1000189C4(v14, v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v7, v9, v11, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v13);
    sub_1000117AC(v11);
    sub_1000117AC(v9);
    sub_100037A7C(v15);
    v12 = v13;
  }
  else
  {
    sub_1000379AC(v15);
    v12 = v15;
  }
  sub_1000189C4(v14, v12);
  v13[3] = &type metadata for Table;
  v13[4] = &protocol witness table for Table;
  v13[0] = sub_1000058D0((uint64_t)&unk_10011EB28);
  sub_1000189C4((void *)(v13[0] + 16), v14);
  sub_1000CA43C(v13, a3);
  sub_10000E87C(v13);
  sub_1000117E8();
}

void sub_1000CA030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _UNKNOWN **v24;
  _QWORD v25[21];
  _BYTE v26[168];
  _QWORD v27[24];

  if (qword_100127FC8 != -1)
    swift_once(&qword_100127FC8, sub_1000CA300);
  sub_1000189C4(v27, &unk_10012BB50);
  sub_1000189C4(v25, &unk_10012BB50);
  if (qword_100127FD8 != -1)
    swift_once(&qword_100127FD8, sub_1000CA374);
  v4 = qword_10012BC10;
  v5 = *(_QWORD *)algn_10012BC18;
  v6 = qword_10012BC20;
  sub_1000189C4(&v20, v27);
  sub_1000379AC(v27);
  v7 = QueryType.namespace<A>(_:)(v4, v5, v6, (uint64_t)&type metadata for Table, (uint64_t)&type metadata for String);
  v9 = v8;
  v11 = v10;
  sub_100037A7C(v27);
  v23 = sub_10001BE7C(&qword_100128D00);
  v24 = &protocol witness table for Expression<A>;
  v20 = v7;
  v21 = v9;
  v22 = v11;
  SchemaType.select(_:_:)((uint64_t)&v20, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table);
  sub_10000E87C(&v20);
  if (a2)
  {
    sub_1000189C4(v25, v26);
    if (qword_100127FD0 != -1)
      swift_once(&qword_100127FD0, sub_1000CA350);
    v20 = a1;
    v21 = a2;
    == infix<A>(_:_:)();
    v13 = v12;
    v15 = v14;
    v17 = v16;
    sub_1000189C4(&v19, v25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v13, v15, v17, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)&v20);
    sub_1000117AC(v17);
    sub_1000117AC(v15);
    sub_100037A7C(v25);
    sub_1000189C4(v26, &v20);
  }
  v25[3] = &type metadata for Table;
  v25[4] = &protocol witness table for Table;
  v25[0] = sub_1000058D0((uint64_t)&unk_10011EB28);
  sub_1000189C4((void *)(v25[0] + 16), v26);
  v18 = v27[23];
  Connection.prepareRowIterator(_:)(v25);
  sub_10000E87C(v25);
  if (!v18)
  {
    sub_100017800();
    sub_1000101FC();
    sub_1000073B0();
  }
  sub_1000117E8();
}

void *sub_1000CA300()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0x7365697469746E65, 0xE800000000000000, 0, 0);
  return memcpy(&unk_10012BB50, __src, 0xA8uLL);
}

uint64_t sub_1000CA350(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012BBF8, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_1000CA374(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012BC10, 0x656D614E65707974, 0xE800000000000000);
}

uint64_t sub_1000CA394(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012BC28, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_1000CA3B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1000CA43C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v5 = Connection.prepareRowIterator(_:)(a1);
  if (!v2)
  {
    __chkstk_darwin(v5);
    v8[2] = sub_1000CA5CC;
    v8[3] = a2;
    swift_retain();
    sub_100017800();
    if (!v8)
      v3 = v6;
    swift_release();
    sub_1000101FC();
    sub_1000073B0();
  }
  return v3;
}

void sub_1000CA510(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_100127FD8 != -1)
    swift_once(&qword_100127FD8, sub_1000CA374);
  Row.get<A>(_:)();
  if (v1)
  {
    swift_errorRelease(v1);
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v3 = v5;
    v4 = v6;
  }
  *a1 = v3;
  a1[1] = v4;
}

uint64_t sub_1000CA5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000CA5C8(a1, a2, v2);
}

uint64_t sub_1000CA5D4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100127FD0 != -1)
    swift_once(&qword_100127FD0, sub_1000CA350);
  Row.get<A>(_:)();
  v3 = v9;
  if (qword_100127FE0 != -1)
    swift_once(&qword_100127FE0, sub_1000CA394);
  Row.get<A>(_:)();
  v4 = v9;
  v5 = v10;
  sub_1000CA790();
  v6 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v2, 1, 1, v6);
  static LNEntityMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v4, v5, v2, 0);
  sub_100020D24((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_1000CA790()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100129F50;
  if (!qword_100129F50)
  {
    v1 = objc_opt_self(LNEntityMetadata);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100129F50);
  }
  return result;
}

ValueMetadata *type metadata accessor for LNEntityRecord()
{
  return &type metadata for LNEntityRecord;
}

uint64_t sub_1000CA7DC(uint64_t a1, void *a2)
{
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _BYTE v14[112];
  Swift::String v15;
  _QWORD v16[10];
  _BYTE v17[168];
  _QWORD v18[21];
  _QWORD v19[21];
  SQLite::Insert v20;

  v5 = LNEnumMetadata.asJson(prettyPrinted:)(0);
  result = v5._countAndFlagsBits;
  if (!v6)
  {
    if (qword_100127FE8 != -1)
      swift_once(&qword_100127FE8, sub_1000CA9F4);
    sub_1000189C4(v18, &unk_10012BC40);
    sub_1000189C4(v17, &unk_10012BC40);
    sub_1000379AC(v18);
    if (qword_100127FF0 != -1)
      swift_once(&qword_100127FF0, sub_1000CAA40);
    v15._countAndFlagsBits = a1;
    v15._object = a2;
    <- infix<A>(_:_:)(qword_10012BCE8, unk_10012BCF0, qword_10012BCF8, (uint64_t)&v15, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
    v7 = sub_10001BE7C(&qword_100128D08);
    inited = swift_initStackObject(v7, v14);
    *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
    if (qword_100127FF8 != -1)
      swift_once(&qword_100127FF8, sub_1000CAA64);
    v15 = v5;
    <- infix<A>(_:_:)(qword_10012BD00, *(uint64_t *)algn_10012BD08, qword_10012BD10, (uint64_t)&v15, (uint64_t)type metadata for String, (uint64_t)&protocol witness table for String);
    swift_bridgeObjectRelease();
    v9 = QueryType.insert(_:_:)((uint64_t)v16);
    v11 = v10;
    v13 = v12;
    swift_setDeallocating(inited);
    sub_10001CC3C();
    sub_100019F20(v16);
    sub_1000189C4(v19, v17);
    sub_100037A7C(v19);
    v20.template._countAndFlagsBits = v9;
    v20.template._object = v11;
    v20.bindings._rawValue = v13;
    Connection.run(_:)(v20);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1000CA9F4()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0x736D756E65, 0xE500000000000000, 0, 0);
  return memcpy(&unk_10012BC40, __src, 0xA8uLL);
}

uint64_t sub_1000CAA40(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012BCE8, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_1000CAA64(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012BD00, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_1000CAA88()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100127FF0 != -1)
    swift_once(&qword_100127FF0, sub_1000CAA40);
  Row.get<A>(_:)();
  v3 = v9;
  if (qword_100127FF8 != -1)
    swift_once(&qword_100127FF8, sub_1000CAA64);
  Row.get<A>(_:)();
  v4 = v9;
  v5 = v10;
  sub_1000CACFC();
  v6 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v2, 1, 1, v6);
  static LNEnumMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v4, v5, v2, 0);
  sub_100020D24((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000CAC44@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1000CAC74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

unint64_t sub_1000CACFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100129F40;
  if (!qword_100129F40)
  {
    v1 = objc_opt_self(LNEnumMetadata);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100129F40);
  }
  return result;
}

ValueMetadata *type metadata accessor for LNEnumRecord()
{
  return &type metadata for LNEnumRecord;
}

uint64_t sub_1000CAD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[21];
  _QWORD v27[21];
  _QWORD v28[21];
  _QWORD v29[22];

  if (qword_100128000 != -1)
    swift_once(&qword_100128000, sub_1000CB0A4);
  sub_1000189C4(v29, &unk_10012BD18);
  if (a2)
  {
    sub_1000379AC(v29);
    if (qword_100128008 != -1)
      swift_once(&qword_100128008, sub_1000CB0F4);
    v27[0] = a1;
    v27[1] = a2;
    == infix<A>(_:_:)();
    v10 = v9;
    v12 = v11;
    v14 = v13;
    sub_1000189C4(v26, v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v10, v12, v14, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v27);
    sub_1000117AC(v14);
    sub_1000117AC(v12);
    sub_100037A7C(v29);
    v15 = v27;
  }
  else
  {
    sub_1000379AC(v29);
    v15 = v29;
  }
  sub_1000189C4(v28, v15);
  if (a4)
  {
    if (qword_100128018 != -1)
      swift_once(&qword_100128018, sub_1000CB1C0);
    v26[0] = a3;
    v26[1] = a4;
    == infix<A>(_:_:)();
    v17 = v16;
    a3 = v18;
    v20 = v19;
    sub_1000189C4(&v25, v28);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    QueryType.filter(_:)(v17, a3, v20, (uint64_t)&type metadata for Table, (uint64_t)&protocol witness table for Table, (uint64_t)v26);
    sub_1000117AC(v20);
    sub_1000117AC(a3);
    sub_100037A7C(v28);
    v21 = v26;
  }
  else
  {
    v21 = v28;
  }
  sub_1000189C4(v27, v21);
  v26[3] = &type metadata for Table;
  v26[4] = &protocol witness table for Table;
  v26[0] = swift_allocObject(&unk_10011EC78, 184, 7);
  sub_1000189C4((void *)(v26[0] + 16), v27);
  Connection.prepareRowIterator(_:)(v26);
  v22 = sub_10000E87C(v26);
  if (!v4)
  {
    __chkstk_darwin(v22);
    swift_retain();
    RowIterator.compactMap<A>(_:)();
    a3 = v24;
    swift_release();
    sub_100017810();
    swift_release();
  }
  return a3;
}

void *sub_1000CB0A4()
{
  _QWORD __src[21];

  Table.init(_:database:)(__src, 0x73656972657571, 0xE700000000000000, 0, 0);
  return memcpy(&unk_10012BD18, __src, 0xA8uLL);
}

uint64_t sub_1000CB0F4(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012BDC0, 0xD000000000000010, 0x80000001000F3C30);
}

uint64_t sub_1000CB118(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012BDD8, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_1000CB138()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  v1 = v0[12];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[13]);
  }
  v2 = v0[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    v3 = v0[16];
    if (v3)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v0[17]);
    }
  }
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1000CB1C0(uint64_t a1)
{
  return sub_100041220(a1, (uint64_t)&qword_10012BDF0, 0x7079547972657571, 0xE900000000000065);
}

uint64_t sub_1000CB1E8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_10001BE7C(&qword_100128740);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100128008 != -1)
    swift_once(&qword_100128008, sub_1000CB0F4);
  Row.get<A>(_:)();
  v3 = v9;
  if (qword_100128010 != -1)
    swift_once(&qword_100128010, sub_1000CB118);
  Row.get<A>(_:)();
  v4 = v9;
  v5 = v10;
  sub_1000CB3A4();
  v6 = type metadata accessor for URL(0);
  sub_100014360((uint64_t)v2, 1, 1, v6);
  static LNQueryMetadata.fromJSON(_:bundleURL:effectiveBundleIdentifier:)(v4, v5, v2, 0);
  sub_100020D24((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_1000CB3A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10012A6F0;
  if (!qword_10012A6F0)
  {
    v1 = objc_opt_self(LNQueryMetadata);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10012A6F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for LNQueryRecord()
{
  return &type metadata for LNQueryRecord;
}

void sub_1000CB3F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;

  v4 = &unk_1000F1EE8;
  sub_100050454(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = &unk_1000F1F00;
    v7 = v5;
    v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v9 = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initClassMetadata2(a1, 0, 6, &v4, a1 + 88);
  }
}

uint64_t sub_1000CB490()
{
  uint64_t v0;

  sub_100020D24(v0 + qword_10012D620);
  swift_bridgeObjectRelease();
  sub_100020D24(v0 + qword_10012BE18);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1000CB4F8()
{
  uint64_t v0;

  sub_1000CB490();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for StreamManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StreamManager);
}

uint64_t Expression.template.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t sub_1000CB558(uint64_t a1)
{
  swift_bridgeObjectRetain();
  sub_10001AF64(a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CB598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v8;

  v8 = a1 == a4 && a2 == a5;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0) & 1) == 0)
    return 0;
  sub_10000E114();
  return static NSObject.== infix(_:_:)(a3, a6) & 1;
}

void sub_1000CB600(uint64_t a1)
{
  _BYTE v1[72];

  sub_100016660(a1);
  swift_bridgeObjectRetain();
  sub_10001AF64((uint64_t)v1);
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  sub_100018C30();
}

uint64_t sub_1000CB644()
{
  uint64_t *v0;

  return Expression.template.getter(*v0, v0[1]);
}

ValueMetadata *type metadata accessor for StreamReference()
{
  return &type metadata for StreamReference;
}

uint64_t storeEnumTagSinglePayload for StreamManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000CB6A8 + 4 * byte_1000F1EB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000CB6DC + 4 * asc_1000F1EB0[v4]))();
}

uint64_t sub_1000CB6DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CB6E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CB6ECLL);
  return result;
}

uint64_t sub_1000CB6F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CB700);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000CB704(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CB70C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StreamManagerError()
{
  return &type metadata for StreamManagerError;
}

unint64_t sub_1000CB72C()
{
  unint64_t result;

  result = qword_10012BEB0;
  if (!qword_10012BEB0)
  {
    result = swift_getWitnessTable(&unk_1000F1FB4, &type metadata for StreamManagerError);
    atomic_store(result, (unint64_t *)&qword_10012BEB0);
  }
  return result;
}

void sub_1000CB768()
{
  uint64_t *v0;

  sub_1000CB600(*v0);
}

uint64_t sub_1000CB770(uint64_t a1)
{
  return sub_1000CB558(a1);
}

Swift::Int sub_1000CB778(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000CB7CC(uint64_t *a1, uint64_t *a2)
{
  return sub_1000CB598(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

void sub_1000CB7E8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = a1;
  sub_100016660(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_100018C30();
}

void sub_1000CB81C()
{
  unsigned __int8 *v0;

  sub_1000CB7E8(*v0);
}

unint64_t sub_1000CB828()
{
  unint64_t result;

  result = qword_10012BEB8;
  if (!qword_10012BEB8)
  {
    result = swift_getWitnessTable(&unk_1000F1FDC, &type metadata for StreamReference);
    atomic_store(result, (unint64_t *)&qword_10012BEB8);
  }
  return result;
}

uint64_t sub_1000CB864(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[15]);
  return swift_bridgeObjectRelease(a1[16]);
}

_QWORD *sub_1000CB8E4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v7 = a2[4];
  v6 = a2[5];
  a1[4] = v7;
  a1[5] = v6;
  v8 = a2[6];
  v9 = a2[7];
  a1[6] = v8;
  a1[7] = v9;
  v10 = a2[8];
  v11 = a2[9];
  a1[8] = v10;
  a1[9] = v11;
  v13 = a2[10];
  v12 = a2[11];
  a1[10] = v13;
  a1[11] = v12;
  v14 = a2[12];
  v15 = a2[13];
  a1[12] = v14;
  a1[13] = v15;
  v17 = a2[14];
  v18 = a2[15];
  a1[14] = v17;
  a1[15] = v18;
  v19 = a2[16];
  a1[16] = v19;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  return a1;
}

_QWORD *sub_1000CB9E0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a2[9];
  v17 = a1[9];
  a1[9] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a2[10];
  v19 = a1[10];
  a1[10] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[11] = a2[11];
  v20 = a2[12];
  v21 = a1[12];
  a1[12] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a2[13];
  v23 = a1[13];
  a1[13] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a2[14];
  v25 = a1[14];
  a1[14] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a2[15];
  v27 = a1[15];
  a1[15] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = a2[16];
  v29 = a1[16];
  a1[16] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  return a1;
}

void *sub_1000CBB64(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x88uLL);
}

_QWORD *sub_1000CBB6C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = a1[4];
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = v5;
  swift_bridgeObjectRelease(v6);
  a1[5] = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(a1[6]);
  v7 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(a1[8]);
  v8 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v8);
  v9 = a1[10];
  a1[10] = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v9);
  a1[11] = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(a1[12]);
  v10 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(a1[14]);
  v11 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v11);
  v12 = a1[16];
  a1[16] = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000CBC50(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 136))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000CBC90(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ApplicationMetadata()
{
  sub_1000059CC();
}

uint64_t sub_1000CBCFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  result = (uint64_t)_swiftEmptyArrayStorage;
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    result = a3(v3);
    if (result < 0 || (v8 = result, result >= 1 << *(_BYTE *)(v3 + 32)))
    {
LABEL_13:
      __break(1u);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    else
    {
      v9 = v7;
      v10 = v3 + 64;
      v16 = v3;
      while ((*(_QWORD *)(v10 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
      {
        if (v9 != *(_DWORD *)(v3 + 36))
          goto LABEL_17;
        v11 = *(id *)(*(_QWORD *)(v3 + 56) + 8 * v8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v12 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
        v13 = v11;
        v3 = v16;
        v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v13);
        result = specialized ContiguousArray._endMutation()(v14);
        v15 = -1 << *(_BYTE *)(v16 + 32);
        if ((uint64_t)v8 >= -v15)
          goto LABEL_18;
        if ((*(_QWORD *)(v10 + 8 * (v8 >> 6)) & (1 << v8)) == 0)
          goto LABEL_19;
        if (v9 != *(_DWORD *)(v16 + 36))
          goto LABEL_20;
        result = _HashTable.occupiedBucket(after:)(v8, v10, ~v15);
        if (!--v4)
          return (uint64_t)_swiftEmptyArrayStorage;
        v8 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v9 = *(_DWORD *)(v16 + 36);
          if (result < 1 << *(_BYTE *)(v16 + 32))
            continue;
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000CBE94(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v35;
  int64_t v36;
  _QWORD v37[5];
  _QWORD *v38;

  v38 = _swiftEmptyArrayStorage;
  result = sub_10004B988(a1, v37);
  v3 = v37[0];
  v4 = v37[1];
  v36 = v37[3];
  v5 = v37[4];
  v6 = (unint64_t)(v37[2] + 64) >> 6;
  v35 = (void *)LNSystemEntityProtocolIdentifierUniqueEntity;
  while (1)
  {
    if (v5)
    {
      v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v8 = v7 | (v36 << 6);
      goto LABEL_20;
    }
    v9 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v9 >= v6)
      goto LABEL_30;
    v10 = *(_QWORD *)(v4 + 8 * v9);
    v11 = v36 + 1;
    if (!v10)
    {
      v11 = v36 + 2;
      if (v36 + 2 >= v6)
        goto LABEL_30;
      v10 = *(_QWORD *)(v4 + 8 * v11);
      if (!v10)
      {
        v11 = v36 + 3;
        if (v36 + 3 >= v6)
          goto LABEL_30;
        v10 = *(_QWORD *)(v4 + 8 * v11);
        if (!v10)
        {
          v11 = v36 + 4;
          if (v36 + 4 >= v6)
            goto LABEL_30;
          v10 = *(_QWORD *)(v4 + 8 * v11);
          if (!v10)
          {
            v11 = v36 + 5;
            if (v36 + 5 >= v6)
              goto LABEL_30;
            v10 = *(_QWORD *)(v4 + 8 * v11);
            if (!v10)
            {
              v12 = v36 + 6;
              while (v12 < v6)
              {
                v10 = *(_QWORD *)(v4 + 8 * v12++);
                if (v10)
                {
                  v11 = v12 - 1;
                  goto LABEL_19;
                }
              }
LABEL_30:
              swift_release();
              v33 = v38;
              swift_bridgeObjectRelease(a2);
              return (uint64_t)v33;
            }
          }
        }
      }
    }
LABEL_19:
    v5 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
    v36 = v11;
LABEL_20:
    v13 = *(id *)(*(_QWORD *)(v3 + 56) + 8 * v8);
    v14 = objc_msgSend(v13, "systemProtocolMetadata");
    type metadata accessor for LNSystemEntityProtocolIdentifier(0);
    v16 = v15;
    v17 = sub_10001BE7C(&qword_100128730);
    v18 = sub_10002D80C(&qword_100128408, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemEntityProtocolIdentifier, (uint64_t)&unk_1000EF744);
    v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14, v16, v17, v18);

    if (!*(_QWORD *)(v19 + 16))
    {

      goto LABEL_27;
    }
    v20 = v35;
    sub_10003149C();
    if ((v21 & 1) != 0)
    {
      v22 = v3;
      v23 = v6;
      v24 = v4;

      swift_bridgeObjectRelease(v19);
      v25 = objc_msgSend(v13, "identifier");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      if (*(_QWORD *)(a2 + 16) && (sub_100016064(v26), (v29 & 1) != 0))
      {

        result = swift_bridgeObjectRelease(v28);
      }
      else
      {
        v30 = swift_bridgeObjectRelease(v28);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v30);
        v31 = v38[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
        v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v13);
        result = specialized ContiguousArray._endMutation()(v32);
      }
      v4 = v24;
      v6 = v23;
      v3 = v22;
    }
    else
    {

LABEL_27:
      result = swift_bridgeObjectRelease(v19);
    }
  }
  __break(1u);
  return result;
}

void sub_1000CC16C(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v77;
  _QWORD v78[3];
  uint64_t v79;
  uint64_t v80;
  _QWORD __src[18];
  uint64_t v82;

  v3 = v2;
  if (qword_100128020 != -1)
    swift_once(&qword_100128020, sub_1000CDD5C);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100012A40(v5, (uint64_t)qword_10012D628);
  sub_100013E74(v6, (uint64_t)v78);
  v7 = sub_10001F4F4();
  v8 = static os_log_type_t.info.getter();
  v9 = os_log_type_enabled(v7, v8);
  if (v9)
  {
    v14 = (uint8_t *)sub_10001E2BC();
    v15 = sub_100011780(32);
    v82 = v15;
    *(_DWORD *)v14 = 136315138;
    v17 = v79;
    v16 = v80;
    sub_10000E858(v78, v79);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v16 + 8) + 8))(v17);
    sub_100017AEC(v18, v19);
    sub_100010148();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v21);
    v22 = sub_1000059A8();
    sub_100017D8C(v22, v23, v24, v25, v26);
    sub_1000100C0((void *)&_mh_execute_header, v7, v8, "Loading combined static metadata for bundle %s", v14);
    sub_100013320(v15);
    v27 = v15;
    v3 = v2;
    sub_1000133FC(v27);
    sub_1000133FC((uint64_t)v14);
  }
  else
  {
    sub_100017D8C(v9, v10, v11, v12, v13);
  }

  sub_10000795C(0, &qword_10012BEE8, LNBundleMetadata_ptr);
  v29 = a1[3];
  v28 = a1[4];
  sub_10000E858(a1, v29);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v28 + 8) + 8))(v29);
  v31 = (void *)LNBundleMetadata.init(bundleIdentifier:)(v30);
  if (!v3)
  {
    v32 = v31;
    v33 = objc_msgSend(v31, "generator");

    if (v33)
    {
      sub_100013E74(v34, (uint64_t)v78);
      v35 = sub_10001F4F4();
      v36 = static os_log_type_t.info.getter();
      v37 = os_log_type_enabled(v35, v36);
      if (v37)
      {
        v42 = (uint8_t *)sub_10001E2BC();
        v75 = sub_100011780(32);
        v82 = v75;
        *(_DWORD *)v42 = 136315138;
        v43 = sub_1000186B0(v78);
        sub_100017AEC(v43, v44);
        sub_100010148();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v46);
        v47 = sub_1000059A8();
        sub_100017D8C(v47, v48, v49, v50, v51);
        sub_1000100C0((void *)&_mh_execute_header, v35, v36, "Ingesting static metadata for %s", v42);
        sub_100013320(v75);
        sub_1000133FC(v75);
        sub_1000133FC((uint64_t)v42);
      }
      else
      {
        sub_100017D8C(v37, v38, v39, v40, v41);
      }

      v68 = sub_10000795C(0, (unint64_t *)&qword_1001286C0, LNSystemProtocol_ptr);
      v69 = sub_10004FE50();
      v70 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v68, &type metadata for String, v69);
      v71 = sub_10000E858(a1, a1[3]);
      sub_1000CEC04((uint64_t)v71, v70, v32, __src);

      swift_bridgeObjectRelease(v70);
      memcpy(a2, __src, 0x88uLL);
    }
    else
    {
      sub_100013E74(v34, (uint64_t)v78);
      v52 = sub_10001F4F4();
      v53 = static os_log_type_t.error.getter();
      v54 = os_log_type_enabled(v52, v53);
      if (v54)
      {
        v59 = (uint8_t *)sub_10001E2BC();
        v60 = sub_100011780(32);
        v82 = v60;
        *(_DWORD *)v59 = 136315138;
        v61 = sub_1000186B0(v78);
        v77 = sub_100017AEC(v61, v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78);
        v63 = sub_1000059A8();
        sub_100017D8C(v63, v64, v65, v66, v67);
        sub_1000100C0((void *)&_mh_execute_header, v52, v53, "Undefined compile time metadata generator for %s", v59);
        sub_100013320(v60);
        sub_1000133FC(v60);
        sub_1000133FC((uint64_t)v59);
      }
      else
      {
        sub_100017D8C(v54, v55, v56, v57, v58);
      }

      v72 = sub_1000CE9B8();
      v73 = swift_allocError(&unk_10011F0A0, v72, 0, 0);
      *v74 = 2;
      swift_willThrow(v73);

    }
  }
}

uint64_t sub_1000CC5C8(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  unint64_t v20;
  char **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void (*v46)(char **);
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, _QWORD);
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSString v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char **v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  char v109;
  void (*v110)(uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  char **v119;
  os_log_type_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t, _QWORD);
  uint64_t v136;
  uint64_t v137;
  id v138;
  char **v139;
  NSObject *v140;
  os_log_type_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  NSString v157;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  NSObject *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  void (*v170)(uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  NSObject *v178;
  id v179;
  os_log_type_t v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  unint64_t v190;
  uint64_t (*v191)(uint64_t, _QWORD);
  uint64_t v192;
  uint64_t v193;
  id v194;
  NSObject *v195;
  NSObject *v196;
  os_log_type_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  id v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  NSString v214;
  int v215;
  uint64_t v216;
  _QWORD v218[2];
  __int128 v219;
  __int128 v220;
  os_log_type_t v221;
  uint64_t v222;
  void **v223;
  void *v224;
  NSObject *v225;
  unint64_t v226;
  __int128 v227;
  __int128 v228;
  char **v229;
  unint64_t v230;
  uint64_t v231;
  char *v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  uint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  void *v239;
  void **v240;
  char **v241;
  unint64_t v242;
  uint64_t v243;
  char **v244;
  uint64_t v245;
  unint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;

  v2 = v1;
  v247 = a1;
  sub_10001BE7C(&qword_10012BEC0);
  sub_100013E18();
  __chkstk_darwin(v3);
  sub_10001778C();
  v5 = sub_1000135D0(v4);
  v6 = type metadata accessor for AssistantPrebuiltEntity(v5);
  v234 = *(_QWORD *)(v6 - 8);
  sub_100013E18();
  __chkstk_darwin(v7);
  sub_10001778C();
  v238 = v8;
  sub_10001BE7C(&qword_10012BEC8);
  sub_100013E18();
  __chkstk_darwin(v9);
  sub_10001778C();
  v11 = sub_1000135D0(v10);
  v12 = type metadata accessor for AssistantPrebuiltEnum(v11);
  *(_QWORD *)&v235 = *(_QWORD *)(v12 - 8);
  sub_100013E18();
  __chkstk_darwin(v13);
  sub_10001778C();
  v239 = (void *)v14;
  sub_10001BE7C((uint64_t *)&unk_10012BED0);
  sub_100013E18();
  __chkstk_darwin(v15);
  sub_10001778C();
  v17 = sub_1000135D0(v16);
  *(_QWORD *)&v228 = type metadata accessor for AssistantPrebuiltIntent(v17);
  v236 = *(uint64_t **)(v228 - 8);
  sub_100013E18();
  __chkstk_darwin(v18);
  sub_10001778C();
  v240 = v19;
  v20 = type metadata accessor for Logger(0);
  v21 = *(char ***)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (unint64_t)v218 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = ((char *)v218 - v25);
  __chkstk_darwin(v27);
  v29 = (unint64_t)v218 - v28;
  __chkstk_darwin(v30);
  v32 = (char **)((char *)v218 - v31);
  if (qword_100127E78 != -1)
    goto LABEL_136;
LABEL_2:
  v33 = sub_100012A40(v20, (uint64_t)qword_10012D0E0);
  ((void (*)(char **, uint64_t, unint64_t))v21[2])(v32, v33, v20);
  v34 = v2[1];
  v226 = *v2;
  v35 = v2[2];
  *(_QWORD *)&v233 = v2 + 2;
  v237 = v6;
  v224 = (void *)v23;
  v243 = v34;
  v245 = v12;
  v225 = v26;
  *(_QWORD *)&v227 = v29;
  v241 = v21;
  v242 = v20;
  v244 = v32;
  if (!((unint64_t)v35 >> 62))
  {
    v20 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    sub_10001F378();
    goto LABEL_4;
  }
  if (v35 < 0)
    v23 = v35;
  else
    v23 = v35 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  sub_1000101B0();
  v6 = _CocoaArrayWrapper.endIndex.getter(v23);
  sub_1000059A8();
  if (v6 < 0)
  {
    __break(1u);
LABEL_142:
    if (v35 < 0)
      v23 = v35;
    else
      v23 = v35 & 0xFFFFFFFFFFFFFF8;
    sub_1000101B0();
    v32 = (char **)_CocoaArrayWrapper.endIndex.getter(v23);
    sub_1000059A8();
    if (((unint64_t)v32 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_147;
    }
    v23 = (unint64_t)v236;
    goto LABEL_45;
  }
  while (1)
  {
    sub_10001F378();
    v20 = v6;
LABEL_4:
    v246 = v2;
    v21 = v229;
    v12 = v233;
    if (v20)
    {
      v29 = 0;
      v32 = &selRef_assistantDefinedSchemas;
      v223 = &v249;
      *(_QWORD *)&v36 = 136315394;
      v219 = v36;
      v218[1] = (char *)&type metadata for Any + 8;
      *(_QWORD *)&v36 = 136315650;
      v220 = v36;
      v230 = v20;
      do
      {
        if (v20 == v29)
        {
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          swift_once(&qword_100127E78, sub_100090558);
          goto LABEL_2;
        }
        v37 = *(_QWORD *)v12;
        if ((*(_QWORD *)v12 & 0xC000000000000001) != 0)
        {
          v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v37);
        }
        else
        {
          if (v29 >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_125;
          v38 = sub_1000137BC(v37 + 8 * v29);
        }
        v23 = (unint64_t)v38;
        if (sub_10003FFA8(v38, (SEL *)&selRef_assistantDefinedSchemas, &qword_10012BEE0, LNAssistantDefinedSchemaConformance_ptr))
        {
          sub_100018944();
          if (v39)
          {
            if (!sub_1000102D0())
            {
LABEL_39:

              sub_1000059A8();
              goto LABEL_40;
            }
          }
          else if (!*(_QWORD *)(v6 + 16))
          {
            goto LABEL_39;
          }
          if ((v35 & 0xC000000000000001) != 0)
          {
            v40 = sub_10001D9F8();
          }
          else
          {
            if (!*(_QWORD *)(v6 + 16))
              goto LABEL_130;
            v40 = (uint64_t)sub_100005948();
          }
          v41 = (void *)v40;
          v42 = sub_1000059A8();
          v43 = AssistantPrebuiltLibrary.intents.getter(v42);
          v44 = sub_1000CDB88();
          if (*(_QWORD *)(v43 + 16) && (sub_100016064(v44), (v45 & 1) != 0))
          {
            sub_1000CF0AC();
            v46(v21);
            v47 = 0;
          }
          else
          {
            v47 = 1;
          }
          sub_100014360((uint64_t)v21, v47, 1, (uint64_t)v26);
          sub_10000C028();
          sub_1000059B0();
          if (sub_10001C93C((uint64_t)v21, 1, (uint64_t)v26) == 1)
          {
            sub_10001316C((uint64_t)v21, (uint64_t *)&unk_10012BED0);
            v249 = &unk_10011F0C0;
            v48 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
            v35 = sub_10001C0F8(v48);
            if (!LNLogSubsystem)
              goto LABEL_152;
            v50 = v49;
            v51 = String.init(cString:)(LNLogSubsystem);
            v52 = (void *)v227;
            Logger.init(subsystem:category:)(v51, v53, v35, v50);
            v6 = v41;
            v54 = (id)v23;
            sub_100019300();
            v23 = (unint64_t)sub_100019444();
            v35 = (uint64_t)v52;
            Logger.logObject.getter(v23);
            v55 = sub_10000BFD4();
            if (sub_100013670(v55))
            {
              v56 = sub_100011780(22);
              v57 = sub_100011780(64);
              sub_10001443C(v57, (uint64_t)&v248);
              sub_10001A0D8((uint64_t)&v243);
              v59 = sub_10000EC70(v58, "name");
              v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
              v62 = v61;

              v63 = sub_10000FBEC(v60, v62, (uint64_t *)&v249);
              v64 = sub_10001A9B4(v63);
              v66 = *(_QWORD *)(v65 - 256);
              sub_10001B364(v64, v66);

              sub_10000E038();
              *(_WORD *)(v56 + 12) = 2080;
              v67 = objc_msgSend((id)v23, "identifier");
              v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
              v69 = v68;

              v21 = v229;
              sub_10001F378();
              v72 = sub_10000FBEC(v70, v69, v71);
              v73 = sub_1000107F0(v72);
              sub_10001B364(v73, v66);

              v2 = v246;
              swift_bridgeObjectRelease();
              v6 = v222;
              sub_100016808(v222, 2);
              sub_1000133FC(v6);
              sub_1000133FC(v56);

              sub_1000118AC();
              v75 = v227;
            }
            else
            {

              sub_1000118AC();
              v75 = (uint64_t)v52;
            }
            sub_10001B600(v75, v74);
            v12 = v233;
          }
          else
          {
            ((void (*)(void **, char **, NSObject *))v236[4])(v240, v21, v26);
            v76 = v243;
            sub_1000101EC(v243);
            v77 = v41;
            v78 = (id)v23;
            v23 = (unint64_t)v77;
            v32 = (char **)v78;
            v26 = sub_10001666C();
            v79 = static os_log_type_t.info.getter();
            if (sub_100013800(v79))
            {
              v80 = sub_100011780(32);
              v81 = sub_100011780(96);
              sub_10001443C(v81, (uint64_t)&v248);
              sub_10001A0D8((uint64_t)&v245);
              v82 = sub_1000CDB88();
              v84 = sub_10001DDBC(v82, v83);
              v85 = sub_10001A9B4(v84);
              sub_10001B364(v85, *(_QWORD *)(v86 - 256));

              sub_1000059A8();
              *(_WORD *)(v80 + 12) = 2080;
              sub_10000C030();
              v87 = sub_10001E038();
              v89 = sub_10000FBEC(v87, v76, v88);
              sub_1000184B0(v89);
              v90 = sub_100011800(v76);
              *(_WORD *)(v80 + 22) = 2080;
              v91 = sub_10000EC70(v90, "identifier");
              v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
              v94 = v93;

              v95 = sub_10000FBEC(v92, v94, (uint64_t *)&v249);
              sub_1000184B0(v95);

              sub_10000C028();
              sub_1000CF0BC((void *)&_mh_execute_header, v26, v221, "Applying %s to %s:%s", (uint8_t *)v80);
              v96 = v222;
              sub_10001B52C();
              sub_1000133FC(v96);
              sub_1000133FC(v80);
            }
            else
            {

              sub_1000117AC(v76);
            }

            v2 = v246;
            v12 = v233;
            v6 = AssistantPrebuiltIntent.metadata.getter();
            sub_1000CDB88();
            v97 = sub_10001109C();
            sub_1000059A8();
            sub_100005A0C(v32, "copyWithDescriptiveMetadataFromAction:usingLibraryKey:");
            sub_100017E30();

            v20 = *(_QWORD *)v12;
            swift_isUniquelyReferenced_nonNull_bridgeObject(*(_QWORD *)v12);
            *(_QWORD *)v12 = v20;
            v21 = v229;
            sub_10001F378();
            if (!v98 || (v20 & 0x8000000000000000) != 0 || (v20 & 0x4000000000000000) != 0)
            {
              v20 = sub_1000B8514(v20);
              *(_QWORD *)v12 = v20;
            }
            if (v29 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_133;
            sub_10001F7B8((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v29);
            v35 = v12;
            specialized Array._endMutation()(v99);

            ((void (*)(void **, NSObject *))v236[1])(v240, v26);
          }
          v20 = v230;
          v32 = &selRef_assistantDefinedSchemas;
        }
        else
        {

        }
LABEL_40:
        ++v29;
      }
      while (v20 != v29);
    }
    v23 = (unint64_t)(v2 + 9);
    v35 = v2[9];
    v236 = (uint64_t *)(v2 + 9);
    if ((unint64_t)v35 >> 62)
      goto LABEL_142;
    v32 = *(char ***)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_45:
    v29 = v237;
    if (v32)
    {
      v20 = 0;
      v12 = (uint64_t)&selRef_assistantDefinedSchemas;
      v26 = &qword_10012BEE0;
      *(_QWORD *)&v233 = &v249;
      *(_QWORD *)&v36 = 136315394;
      v227 = v36;
      v223 = (void **)((char *)&type metadata for Any + 8);
      *(_QWORD *)&v36 = 136315650;
      v228 = v36;
      v240 = (void **)v32;
      do
      {
        if (v32 == (char **)v20)
          goto LABEL_126;
        v100 = *(_QWORD *)v23;
        if ((*(_QWORD *)v23 & 0xC000000000000001) != 0)
        {
          v101 = (char **)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v100);
        }
        else
        {
          if (v20 >= *(_QWORD *)((v100 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_127;
          v101 = (char **)sub_1000137BC(v100 + 8 * v20);
        }
        v21 = v101;
        if (sub_10003FFA8(v101, (SEL *)&selRef_assistantDefinedSchemas, &qword_10012BEE0, LNAssistantDefinedSchemaConformance_ptr))
        {
          sub_100018944();
          if (v102)
          {
            if (!sub_1000102D0())
            {
LABEL_79:

              sub_1000059A8();
              goto LABEL_80;
            }
          }
          else if (!*(_QWORD *)(v6 + 16))
          {
            goto LABEL_79;
          }
          if ((v35 & 0xC000000000000001) != 0)
          {
            v103 = sub_10001D9F8();
          }
          else
          {
            if (!*(_QWORD *)(v6 + 16))
              goto LABEL_131;
            v103 = (uint64_t)sub_100005948();
          }
          v104 = (void *)v103;
          v105 = sub_1000059A8();
          v106 = AssistantPrebuiltLibrary.enums.getter(v105);
          v107 = sub_1000CDB88();
          v26 = v108;
          v6 = (uint64_t)v232;
          if (*(_QWORD *)(v106 + 16) && (sub_100016064(v107), (v109 & 1) != 0))
          {
            sub_1000CF0AC();
            v110(v6);
            v111 = 0;
          }
          else
          {
            v111 = 1;
          }
          v112 = v245;
          sub_100014360(v6, v111, 1, v245);
          sub_10000E038();
          sub_10000C028();
          if (sub_10001C93C(v6, 1, v112) == 1)
          {
            sub_10001316C(v6, &qword_10012BEC8);
            v249 = &unk_10011F0C0;
            v113 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
            v35 = sub_10001C0F8(v113);
            if (!LNLogSubsystem)
              goto LABEL_153;
            v115 = v114;
            v116 = String.init(cString:)(LNLogSubsystem);
            v117 = v225;
            Logger.init(subsystem:category:)(v116, v118, v35, v115);
            v6 = v104;
            v119 = v21;
            sub_100019300();
            v21 = (char **)sub_100019444();
            v35 = (uint64_t)v117;
            Logger.logObject.getter(v21);
            v120 = sub_10000BFD4();
            if (sub_100013670(v120))
            {
              v121 = sub_100011780(22);
              v122 = sub_100011780(64);
              sub_10001443C(v122, (uint64_t)&v252);
              sub_1000CF094((uint64_t)&v250);
              v124 = sub_10000EC70(v123, "name");
              v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
              v127 = v126;

              v128 = sub_10000FBEC(v125, v127, (uint64_t *)&v249);
              v129 = sub_1000107F0(v128);
              v130 = v233;
              sub_10001B364(v129, v233);

              swift_bridgeObjectRelease();
              *(_WORD *)(v121 + 12) = 2080;
              v131 = objc_msgSend(v21, "identifier");
              v2 = (unint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
              v29 = v132;

              v23 = (unint64_t)v236;
              v133 = sub_10001CDCC();
              v134 = sub_1000107F0(v133);
              sub_10001B364(v134, v130);

              sub_100019B6C();
              v6 = v230;
              sub_100016808(v230, 2);
              sub_1000133FC(v6);
              sub_1000133FC(v121);

              sub_1000118AC();
              v136 = (uint64_t)v225;
            }
            else
            {

              sub_1000118AC();
              v136 = (uint64_t)v117;
            }
            sub_10001B600(v136, v135);
            v32 = (char **)v240;
            v12 = (uint64_t)&selRef_assistantDefinedSchemas;
            v26 = &qword_10012BEE0;
          }
          else
          {
            (*(void (**)(void *, uint64_t, uint64_t))(v235 + 32))(v239, v6, v112);
            v137 = v243;
            sub_1000101EC(v243);
            v138 = v104;
            v139 = v21;
            v21 = (char **)sub_100019444();
            v32 = v104;
            v140 = sub_10001666C();
            v141 = static os_log_type_t.info.getter();
            if (sub_100013800(v141))
            {
              v142 = sub_100011780(32);
              v143 = sub_100011780(96);
              sub_10001443C(v143, (uint64_t)&v252);
              sub_1000CF094((uint64_t)&v251);
              v144 = sub_1000CDB88();
              v146 = sub_10001DDBC(v144, v145);
              v147 = sub_1000107F0(v146);
              sub_10001B364(v147, v233);

              sub_1000059A8();
              *(_WORD *)(v142 + 12) = 2080;
              swift_bridgeObjectRetain();
              v148 = sub_10001E038();
              v150 = sub_10000FBEC(v148, v137, v149);
              sub_1000184B0(v150);
              v151 = sub_100011800(v137);
              *(_WORD *)(v142 + 22) = 2080;
              v152 = sub_10000EC70(v151, "identifier");
              v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
              v29 = v154;

              v155 = sub_10000FBEC(v153, v29, (uint64_t *)&v249);
              sub_1000184B0(v155);

              sub_100019B6C();
              sub_1000CF0BC((void *)&_mh_execute_header, v140, (os_log_type_t)v229, "Applying %s to %s:%s", (uint8_t *)v142);
              v156 = v230;
              sub_10001B52C();
              sub_1000133FC(v156);
              sub_1000133FC(v142);
            }
            else
            {

              sub_1000117AC(v137);
            }

            v2 = v246;
            v6 = AssistantPrebuiltEnum.metadata.getter();
            sub_1000CDB88();
            v157 = sub_10001109C();
            sub_1000059A8();
            objc_msgSend(v32, "copyWithDescriptiveMetadataFromEnum:usingLibraryKey:", v6, v157);
            sub_100017E30();

            v23 = (unint64_t)v236;
            v12 = *v236;
            isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v236);
            *(_QWORD *)v23 = v12;
            v26 = &qword_10012BEE0;
            if (!isUniquelyReferenced_nonNull_bridgeObject || v12 < 0 || (v12 & 0x4000000000000000) != 0)
            {
              v12 = sub_1000B8514(v12);
              *(_QWORD *)v23 = v12;
            }
            if (v20 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_134;
            sub_10001F7B8((v12 & 0xFFFFFFFFFFFFFF8) + 8 * v20);
            v35 = v23;
            specialized Array._endMutation()(v159);

            (*(void (**)(void *, uint64_t))(v235 + 8))(v239, v245);
            v32 = (char **)v240;
            v12 = (uint64_t)&selRef_assistantDefinedSchemas;
          }
        }
        else
        {

        }
LABEL_80:
        ++v20;
      }
      while (v32 != (char **)v20);
    }
    v160 = v2[8];
    v2 += 8;
    v35 = v160;
    if (!(v160 >> 62))
      break;
LABEL_147:
    if (v35 < 0)
      v6 = v35;
    else
      v6 = v35 & 0xFFFFFFFFFFFFFF8;
    sub_1000101B0();
    v20 = sub_10000737C();
    sub_1000059A8();
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_85;
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
  }
  v20 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_85:
  if (v20)
  {
    v23 = 0;
    v21 = &selRef_assistantDefinedSchemas;
    v32 = (char **)&qword_10012BEE0;
    v12 = (uint64_t)LNAssistantDefinedSchemaConformance_ptr;
    v240 = &v249;
    *(_QWORD *)&v36 = 136315394;
    v233 = v36;
    v232 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v36 = 136315650;
    v235 = v36;
    v245 = v20;
    v246 = v2;
    do
    {
      if (v20 == v23)
        goto LABEL_128;
      v161 = *v2;
      if ((*v2 & 0xC000000000000001) != 0)
      {
        v162 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v161);
      }
      else
      {
        if (v23 >= *(_QWORD *)((v161 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_129;
        v162 = sub_1000137BC(v161 + 8 * v23);
      }
      v26 = v162;
      if (sub_10003FFA8(v162, (SEL *)&selRef_assistantDefinedSchemas, &qword_10012BEE0, LNAssistantDefinedSchemaConformance_ptr))
      {
        sub_100018944();
        if (v163)
        {
          if (!sub_1000102D0())
          {
LABEL_119:

            sub_1000059A8();
            goto LABEL_120;
          }
        }
        else if (!*(_QWORD *)(v6 + 16))
        {
          goto LABEL_119;
        }
        if ((v35 & 0xC000000000000001) != 0)
        {
          v164 = sub_10001D9F8();
        }
        else
        {
          if (!*(_QWORD *)(v6 + 16))
            goto LABEL_132;
          v164 = (uint64_t)sub_100005948();
        }
        v165 = (void *)v164;
        v166 = sub_1000059A8();
        v167 = AssistantPrebuiltLibrary.entities.getter(v166);
        v168 = sub_1000CDB88();
        if (*(_QWORD *)(v167 + 16) && (sub_100016064(v168), (v169 & 1) != 0))
        {
          sub_1000CF0AC();
          v6 = v231;
          v170(v231);
          v171 = 0;
        }
        else
        {
          v171 = 1;
          v6 = v231;
        }
        sub_100014360(v6, v171, 1, v29);
        sub_1000059B0();
        sub_1000059C4();
        if (sub_10001C93C(v6, 1, v29) == 1)
        {
          sub_10001316C(v6, &qword_10012BEC0);
          v249 = &unk_10011F0C0;
          v172 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
          v35 = sub_10001C0F8(v172);
          if (!LNLogSubsystem)
            goto LABEL_154;
          v174 = v173;
          v175 = String.init(cString:)(LNLogSubsystem);
          v176 = v224;
          Logger.init(subsystem:category:)(v175, v177, v35, v174);
          v6 = v165;
          v178 = v26;
          v26 = sub_100019300();
          v179 = (id)v35;
          v35 = (uint64_t)v176;
          Logger.logObject.getter(v179);
          v180 = sub_10000BFD4();
          if (sub_100013670(v180))
          {
            v181 = sub_100011780(22);
            v239 = (void *)sub_100011780(64);
            v249 = v239;
            *(_DWORD *)v181 = v233;
            LODWORD(v236) = v6;
            v182 = -[NSObject name](v26, "name");
            v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
            v185 = v184;

            v186 = sub_10000FBEC(v183, v185, (uint64_t *)&v249);
            v187 = sub_100018618(v186);
            sub_10001B364(v187, v188);

            sub_1000059B0();
            *(_WORD *)(v181 + 12) = 2080;
            v189 = objc_msgSend(v179, "identifier");
            v2 = (unint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
            v29 = v190;

            v248 = sub_10001CDCC();
            sub_10001B364((uint64_t)&v248, v174);

            sub_100019B6C();
            v6 = (uint64_t)v239;
            sub_100016808((uint64_t)v239, 2);
            sub_1000133FC(v6);
            sub_1000133FC(v181);

            sub_1000118AC();
            v192 = (uint64_t)v224;
          }
          else
          {

            sub_1000118AC();
            v192 = (uint64_t)v176;
          }
          sub_10001B600(v192, v191);
          v20 = v245;
          v21 = &selRef_assistantDefinedSchemas;
          v32 = (char **)&qword_10012BEE0;
          v12 = (uint64_t)LNAssistantDefinedSchemaConformance_ptr;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(v234 + 32))(v238, v6, v29);
          v193 = v243;
          sub_1000101EC(v243);
          v194 = v165;
          v195 = v26;
          v26 = v194;
          v29 = v195;
          v196 = sub_10001666C();
          v197 = static os_log_type_t.info.getter();
          v198 = v197;
          if (os_log_type_enabled(v196, v197))
          {
            v199 = sub_100011780(32);
            v239 = (void *)sub_100011780(96);
            v249 = v239;
            *(_DWORD *)v199 = v235;
            LODWORD(v236) = v198;
            v200 = sub_1000CDB88();
            v202 = sub_10001DDBC(v200, v201);
            v203 = sub_100018618(v202);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v203, v204);

            sub_1000059A8();
            *(_WORD *)(v199 + 12) = 2080;
            swift_bridgeObjectRetain();
            v205 = sub_10001E038();
            v207 = sub_10000FBEC(v205, v193, v206);
            sub_100018C9C(v207);
            sub_100011800(v193);
            *(_WORD *)(v199 + 22) = 2080;
            v208 = objc_msgSend((id)v29, "identifier");
            v209 = static String._unconditionallyBridgeFromObjectiveC(_:)(v208);
            v211 = v210;

            v2 = v246;
            v212 = sub_10000FBEC(v209, v211, (uint64_t *)&v249);
            sub_100018C9C(v212);

            sub_1000059B0();
            sub_1000CF0BC((void *)&_mh_execute_header, v196, (os_log_type_t)v236, "Applying %s to %s:%s", (uint8_t *)v199);
            v213 = (uint64_t)v239;
            sub_10001B52C();
            sub_1000133FC(v213);
            sub_1000133FC(v199);
          }
          else
          {

            sub_1000117AC(v193);
          }

          v21 = &selRef_assistantDefinedSchemas;
          v32 = (char **)&qword_10012BEE0;
          v6 = AssistantPrebuiltEntity.metadata.getter();
          sub_1000CDB88();
          v214 = sub_10001109C();
          sub_1000059A8();
          sub_100005A0C((id)v29, "copyWithDescriptiveMetadataFromEntity:usingLibraryKey:");
          sub_100017E30();

          v20 = *v2;
          v215 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
          *v2 = v20;
          v12 = (uint64_t)LNAssistantDefinedSchemaConformance_ptr;
          if (!v215 || (v20 & 0x8000000000000000) != 0 || (v20 & 0x4000000000000000) != 0)
          {
            v20 = sub_1000B8514(v20);
            *v2 = v20;
          }
          if (v23 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_135;
          sub_10001F7B8((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v23);
          v35 = (uint64_t)v2;
          specialized Array._endMutation()(v216);

          v29 = v237;
          (*(void (**)(uint64_t, unint64_t))(v234 + 8))(v238, v237);
          v20 = v245;
        }
      }
      else
      {

      }
LABEL_120:
      ++v23;
    }
    while (v20 != v23);
  }
  ((void (*)(char **, unint64_t))v241[1])(v244, v242);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CDB88()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  id v8;
  uint64_t v9;
  Swift::String v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  id v17;
  uint64_t v19;

  v1 = v0;
  v2 = objc_msgSend(v0, "version");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  if (v3 == 0x302E302E31 && v5 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    goto LABEL_8;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x302E302E31, 0xE500000000000000, v3, v5, 0);
  swift_bridgeObjectRelease(v5);
  if ((v7 & 1) != 0)
  {
LABEL_8:
    v17 = objc_msgSend(v1, "name");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

    return v16;
  }
  v8 = objc_msgSend(v1, "name");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  v19 = v9;
  v10._countAndFlagsBits = 45;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11 = objc_msgSend(v1, "version");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  return v19;
}

unint64_t sub_1000CDCF8(char a1)
{
  if (!a1)
    return 0xD000000000000033;
  if (a1 == 1)
    return 0xD00000000000003CLL;
  return 0xD000000000000028;
}

unint64_t sub_1000CDD54()
{
  char *v0;

  return sub_1000CDCF8(*v0);
}

uint64_t sub_1000CDD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v0 = type metadata accessor for Logger(0);
  sub_1000269D8(v0, qword_10012D628);
  sub_100012A40(v0, (uint64_t)qword_10012D628);
  v8 = &unk_10011F0C0;
  v1 = sub_10001BE7C((uint64_t *)&unk_1001281E0);
  v3 = String.init<A>(describing:)(&v8, v1);
  result = LNLogSubsystem;
  if (LNLogSubsystem)
  {
    v5 = v2;
    v6 = String.init(cString:)(LNLogSubsystem);
    return Logger.init(subsystem:category:)(v6, v7, v3, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CDE04()
{
  unint64_t *v0;
  uint64_t isUniquelyReferenced_nonNull_native;
  id v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  int64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  Swift::Int v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char v62;
  unint64_t v63;
  char v64;
  _QWORD *v65;
  _BOOL8 v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t result;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  id v79;
  uint64_t v80;
  int64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD v90[5];

  v2 = objc_msgSend(v0, "queries");
  v76 = sub_10000795C(0, (unint64_t *)&qword_10012A6F0, LNQueryMetadata_ptr);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, v76, &protocol witness table for String);
  sub_100017E30();
  sub_10004B988((uint64_t)v0, v90);
  v83 = v90[0];
  v85 = v90[3];
  v3 = v90[4];
  v80 = v90[1];
  v81 = (unint64_t)(v90[2] + 64) >> 6;
  v78 = v0;
  sub_1000101B0();
  v4 = &_swiftEmptyDictionarySingleton;
  if (!v3)
    goto LABEL_3;
LABEL_2:
  v5 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  v6 = v5 | (v85 << 6);
  while (1)
  {
    v14 = *(id *)(*(_QWORD *)(v83 + 56) + 8 * v6);
    v15 = objc_msgSend(v14, "entityType", v76, v78);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = v4[2];
    swift_bridgeObjectRetain(v18);
    if (v19)
    {
      v20 = sub_10001C25C();
      v21 = _swiftEmptyArrayStorage;
      if ((v22 & 1) != 0)
      {
        v21 = *(_QWORD **)(v4[7] + 8 * v20);
        swift_bridgeObjectRetain(v21);
      }
    }
    else
    {
      v21 = _swiftEmptyArrayStorage;
    }
    sub_10000E038();
    v89 = (unint64_t)v21;
    v23 = v14;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v25 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v24 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v25 >= v24 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
    v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
    v0 = &v89;
    specialized Array._endMutation()(v26);
    v27 = v89;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    v89 = (unint64_t)v4;
    v28 = sub_10001C25C();
    v30 = v4[2];
    v31 = (v29 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v33 = v28;
    v34 = v29;
    sub_10001BE7C((uint64_t *)&unk_10012BF30);
    v0 = &v89;
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32))
    {
      v0 = (unint64_t *)v89;
      v35 = sub_100016064(v16);
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_81;
      v33 = v35;
    }
    v4 = (_QWORD *)v89;
    if ((v34 & 1) != 0)
    {
      v37 = *(_QWORD *)(v89 + 56);
      swift_bridgeObjectRelease(*(_QWORD *)(v37 + 8 * v33));
      *(_QWORD *)(v37 + 8 * v33) = v27;
    }
    else
    {
      *(_QWORD *)(v89 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      v38 = (uint64_t *)(v4[6] + 16 * v33);
      *v38 = v16;
      v38[1] = v18;
      *(_QWORD *)(v4[7] + 8 * v33) = v27;
      v39 = v4[2];
      v11 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v11)
        goto LABEL_53;
      v4[2] = v40;
      swift_bridgeObjectRetain(v18);
    }

    sub_10000E038();
    swift_bridgeObjectRelease(0x8000000000000000);
    if (v3)
      goto LABEL_2;
LABEL_3:
    v7 = v85 + 1;
    if (__OFADD__(v85, 1))
      goto LABEL_54;
    if (v7 >= v81)
      break;
    v8 = *(_QWORD *)(v80 + 8 * v7);
    v9 = v85 + 1;
    if (!v8)
    {
      sub_10000ECCC();
      if (v10 == v11)
        break;
      sub_100018F68();
      if (!v8)
      {
        sub_10000ECCC();
        if (v10 == v11)
          break;
        sub_100018F68();
        if (!v8)
        {
          sub_10000ECCC();
          if (v10 == v11)
            break;
          sub_100018F68();
          if (!v8)
          {
            sub_10000ECCC();
            if (v10 == v11)
              break;
            sub_100018F68();
            if (!v8)
            {
              v9 = v12 + 5;
              if (v12 + 5 >= v81)
                break;
              v8 = *(_QWORD *)(v80 + 8 * v9);
              if (!v8)
              {
                v13 = v85 + 7;
                do
                {
                  if (v13 >= v81)
                    goto LABEL_41;
                  v8 = *(_QWORD *)(v80 + 8 * v13++);
                }
                while (!v8);
                v9 = v13 - 1;
              }
            }
          }
        }
      }
    }
    v3 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v9 << 6);
    v85 = v9;
  }
LABEL_41:
  swift_release();
  swift_bridgeObjectRelease(v78);
  v41 = objc_msgSend(v79, "entities");
  v42 = sub_10000795C(0, (unint64_t *)&qword_100129F50, LNEntityMetadata_ptr);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v41, &type metadata for String, v42, &protocol witness table for String);
  sub_100017E30();
  isUniquelyReferenced_nonNull_native = 0;
  v3 = sub_1000CBE94((uint64_t)v0, (uint64_t)v4);
  if (v3 >> 62)
    goto LABEL_56;
  v43 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v43)
  {
    while (1)
    {
      v89 = (unint64_t)_swiftEmptyArrayStorage;
      v0 = &v89;
      specialized ContiguousArray.reserveCapacity(_:)(v43);
      if (v43 < 0)
        break;
      v44 = 0;
      while (v43 != v44)
      {
        if ((v3 & 0xC000000000000001) != 0)
          v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v3);
        else
          v45 = sub_1000137BC(v3 + 8 * v44);
        v46 = v45;
        v87 = v45;
        sub_1000CE538(&v87, &v88);

        if (isUniquelyReferenced_nonNull_native)
          goto LABEL_82;
        ++v44;
        v48 = v88;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v47);
        v49 = *(_QWORD *)(v89 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v49);
        v50 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v48);
        v0 = &v89;
        specialized ContiguousArray._endMutation()(v50);
        if (v43 == v44)
        {
          v51 = v89;
          sub_1000059C4();
          goto LABEL_58;
        }
      }
LABEL_55:
      __break(1u);
LABEL_56:
      sub_10000C030();
      v43 = sub_10000737C();
      sub_1000059C4();
      if (!v43)
        goto LABEL_57;
    }
    __break(1u);
LABEL_81:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
LABEL_82:
    result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_57:
    sub_1000059C4();
    v51 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_58:
    v52 = objc_msgSend(v79, "queries", v76);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v52, &type metadata for String, v77, &protocol witness table for String);
    sub_100017E30();
    if (v51 >> 62)
      goto LABEL_78;
    v53 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v53)
    {
      v82 = v51;
      v84 = v51 & 0xC000000000000001;
      v54 = 4;
      while (1)
      {
        v55 = v84
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54 - 4, v51)
            : *(id *)(v51 + 8 * v54);
        v56 = v55;
        if (__OFADD__(v54 - 4, 1))
          break;
        v86 = v54 - 3;
        v57 = sub_10000EC70((uint64_t)v55, "identifier");
        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
        v60 = v59;

        v61 = v56;
        v62 = swift_isUniquelyReferenced_nonNull_native(v0);
        v89 = (unint64_t)v0;
        v63 = sub_100016340();
        v65 = (_QWORD *)v0[2];
        v66 = (v64 & 1) == 0;
        v51 = (unint64_t)v65 + v66;
        if (__OFADD__(v65, v66))
          goto LABEL_76;
        v67 = v63;
        v68 = v64;
        sub_10001BE7C(&qword_1001282E0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v62, v51))
        {
          v69 = sub_100016340();
          if ((v68 & 1) != (v70 & 1))
            goto LABEL_81;
          v67 = v69;
        }
        v0 = (unint64_t *)v89;
        if ((v68 & 1) != 0)
        {
          v71 = *(_QWORD *)(v89 + 56);

          *(_QWORD *)(v71 + 8 * v67) = v61;
        }
        else
        {
          *(_QWORD *)(v89 + 8 * (v67 >> 6) + 64) |= 1 << v67;
          v72 = (uint64_t *)(v0[6] + 16 * v67);
          *v72 = v58;
          v72[1] = v60;
          *(_QWORD *)(v0[7] + 8 * v67) = v61;
          v73 = (_QWORD *)v0[2];
          v11 = __OFADD__(v73, 1);
          v74 = (_QWORD *)((char *)v73 + 1);
          if (v11)
            goto LABEL_77;
          v0[2] = (unint64_t)v74;
          sub_10000C030();
        }

        sub_1000059C4();
        swift_bridgeObjectRelease(0x8000000000000000);
        ++v54;
        v51 = v82;
        if (v86 == v53)
          goto LABEL_74;
      }
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      swift_bridgeObjectRetain(v51);
      v53 = sub_10000737C();
      swift_bridgeObjectRelease(v51);
    }
LABEL_74:
    swift_bridgeObjectRelease(v51);
    return (uint64_t)v0;
  }
  return result;
}

id sub_1000CE538@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id result;

  v2 = *a1;
  _StringGuts.grow(_:)(23);
  v3 = objc_msgSend(v2, "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000);

  v7._object = (void *)0x80000001000F6BF0;
  v7._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  v8 = v4;
  v9 = v6;
  v10 = objc_msgSend(v2, "identifier");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String, &protocol witness table for String);
  v15 = objc_msgSend(v2, "effectiveBundleIdentifiers");
  v16 = sub_1000CE9F4(v2);
  v17 = objc_msgSend(v2, "visibilityMetadata");
  v18 = objc_allocWithZone((Class)LNQueryMetadata);
  result = sub_1000CE6E8(v8, v9, v11, v13, 0, 0xE000000000000000, v14, v15, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v16, 1, 0, v17, 0, 0, 0);
  *a2 = result;
  return result;
}

id sub_1000CE6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17)
{
  NSArray v21;
  NSDictionary v22;
  NSString v23;
  id v24;
  uint64_t v26;
  NSArray v27;
  NSDictionary v28;
  NSString v29;
  NSString v30;
  NSString v31;
  void *v32;

  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  v28.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a7);
  sub_10000795C(0, &qword_10012BF40, LNQueryParameterMetadata_ptr);
  v27.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a9);
  sub_10000795C(0, &qword_10012BF48, LNQuerySortingOptionMetadata_ptr);
  v21.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a10);
  if (a11)
  {
    type metadata accessor for LNPlatformName(0);
    sub_10000795C(0, &qword_10012BF50, LNAvailabilityAnnotation_ptr);
    sub_10002D80C(&qword_100128418, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName, (uint64_t)&unk_1000EF788);
    v22.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a11);
  }
  else
  {
    v22.super.isa = 0;
  }
  if (a17)
  {
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a17);
  }
  else
  {
    v23 = 0;
  }
  LOBYTE(v26) = a15 & 1;
  v24 = objc_msgSend(v32, "initWithIdentifier:entityType:mangledTypeName:mangledTypeNameByBundleIdentifier:effectiveBundleIdentifiers:parameters:sortingOptions:availabilityAnnotations:capabilities:descriptionMetadata:visibilityMetadata:defaultQueryForEntity:fullyQualifiedIdentifier:", v31, v30, v29, v28.super.isa, a8, v27.super.isa, v21.super.isa, v22.super.isa, a12, a13, a14, v26, v23);

  return v24;
}

uint64_t sub_1000CE958(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "autoShortcutProviderMangledName");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t sub_1000CE9B8()
{
  unint64_t result;

  result = qword_10012BEF0;
  if (!qword_10012BEF0)
  {
    result = swift_getWitnessTable(&unk_1000F21D0, &unk_10011F0A0);
    atomic_store(result, (unint64_t *)&qword_10012BEF0);
  }
  return result;
}

uint64_t sub_1000CE9F4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = objc_msgSend(a1, "availabilityAnnotations");
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for LNPlatformName(0);
  v4 = v3;
  v5 = sub_10000795C(0, &qword_10012BF50, LNAvailabilityAnnotation_ptr);
  v6 = sub_10002D80C(&qword_100128418, (uint64_t (*)(uint64_t))type metadata accessor for LNPlatformName, (uint64_t)&unk_1000EF788);
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, v4, v5, v6);

  return v7;
}

_QWORD *sub_1000CEAA0(uint64_t a1, void *a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  id v7;
  _QWORD *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[5];
  _QWORD v17[5];

  v4 = type metadata accessor for LSLinkBundleRecord(0);
  v17[3] = v4;
  v17[4] = &off_10011DFB0;
  v5 = sub_10001795C(v17);
  sub_100020444(a1, (uint64_t)v5);
  LODWORD(a1) = objc_msgSend((id)objc_opt_self(LNFeatureFlags), "isAppShortcutsOmittingAppNameEnabled");
  sub_1000132C4((uint64_t)v17, (uint64_t)v16);
  if (!(_DWORD)a1)
  {
    sub_10000E87C(v16);
    goto LABEL_5;
  }
  v6 = *((_BYTE *)sub_10000E858(v16, v16[3]) + *(int *)(v4 + 32));
  sub_10000E87C(v16);
  if ((v6 & 1) == 0)
  {
LABEL_5:
    v9 = objc_msgSend(a2, "autoShortcuts");
    sub_10000795C(0, (unint64_t *)&unk_100129F00, LNAutoShortcutMetadata_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9);

    v11 = sub_1000C1AE8(10, v10);
    v8 = sub_1000560BC(v11, v12, v13, v14);
    goto LABEL_6;
  }
  v7 = objc_msgSend(a2, "autoShortcuts");
  sub_10000795C(0, (unint64_t *)&unk_100129F00, LNAutoShortcutMetadata_ptr);
  v8 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v7);

LABEL_6:
  sub_10000E87C(v17);
  return v8;
}

uint64_t sub_1000CEC04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t result;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v45[8];
  _BYTE v46[8];
  _BYTE v47[16];
  _QWORD v48[3];
  uint64_t v49;
  _UNKNOWN **v50;

  v49 = type metadata accessor for LSLinkBundleRecord(0);
  v50 = &off_10011DFB0;
  v7 = sub_10001795C(v48);
  sub_100020444(a1, (uint64_t)v7);
  v42 = v7[1];
  v43 = *v7;
  v8 = objc_msgSend(a3, "actions", swift_bridgeObjectRetain(v42).n128_f64[0]);
  v9 = sub_10000795C(0, &qword_10012A710, LNActionMetadata_ptr);
  v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String, v9, &protocol witness table for String);

  v41 = sub_1000CBCFC(v10, (uint64_t)v47, sub_1000719A8);
  swift_bridgeObjectRelease(v10);
  v11 = sub_1000CE958(a3);
  v39 = v12;
  v40 = v11;
  v38 = objc_msgSend(a3, "shortcutTileColor");
  v13 = sub_10000E858(v48, v49);
  v37 = sub_1000CEAA0((uint64_t)v13, a3);
  v14 = objc_msgSend(a3, "entities");
  v15 = sub_10000795C(0, (unint64_t *)&qword_100129F50, LNEntityMetadata_ptr);
  v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String, v15, &protocol witness table for String);

  v36 = sub_1000CBCFC(v16, (uint64_t)v46, sub_1000719A8);
  swift_bridgeObjectRelease(v16);
  v17 = objc_msgSend(a3, "enums");
  v18 = sub_10000795C(0, (unint64_t *)&qword_100129F40, LNEnumMetadata_ptr);
  v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String, v18, &protocol witness table for String);

  sub_1000522F8();
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  v22 = sub_1000CDE04();
  v23 = sub_1000CBCFC(v22, (uint64_t)v45, sub_1000719A8);
  swift_bridgeObjectRelease(v22);
  v24 = objc_msgSend(a3, "version");
  v25 = sub_10003FFA8(a3, (SEL *)&selRef_negativePhrases, (unint64_t *)&unk_10012BF20, LNAppShortcutNegativePhrase_ptr);
  if (v25)
    v26 = (_QWORD *)v25;
  else
    v26 = _swiftEmptyArrayStorage;
  v27 = sub_10003FFA8(a3, (SEL *)&selRef_examplePhrases, &qword_10012B0C0, LNExamplePhraseDescription_ptr);
  if (v27)
    v28 = (_QWORD *)v27;
  else
    v28 = _swiftEmptyArrayStorage;
  v29 = sub_10003FFA8(a3, (SEL *)&selRef_assistantIntents, (unint64_t *)&unk_10012BF10, LNAssistantIntentMetadata_ptr);
  if (v29)
    v30 = (_QWORD *)v29;
  else
    v30 = _swiftEmptyArrayStorage;
  v31 = sub_10003FFA8(a3, (SEL *)&selRef_assistantIntentNegativePhrases, (unint64_t *)&unk_10012A000, LNAssistantIntentNegativePhrases_ptr);
  if (v31)
    v32 = (_QWORD *)v31;
  else
    v32 = _swiftEmptyArrayStorage;
  v33 = sub_10003FFA8(a3, (SEL *)&selRef_assistantEntities, (unint64_t *)&unk_10012BF00, LNAssistantAppEntityMetadata_ptr);
  if (v33)
    v34 = (_QWORD *)v33;
  else
    v34 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a2);
  result = sub_10000E87C(v48);
  *a4 = v43;
  a4[1] = v42;
  a4[2] = v41;
  a4[3] = v40;
  a4[4] = v39;
  a4[5] = v38;
  a4[6] = v37;
  a4[7] = a2;
  a4[8] = v36;
  a4[9] = v21;
  a4[10] = v23;
  a4[11] = v24;
  a4[12] = v26;
  a4[13] = v28;
  a4[14] = v30;
  a4[15] = v32;
  a4[16] = v34;
  return result;
}

uint64_t sub_1000CEF7C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000CEFC8 + 4 * byte_1000F20B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000CEFFC + 4 * byte_1000F20B0[v4]))();
}

uint64_t sub_1000CEFFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CF004(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CF00CLL);
  return result;
}

uint64_t sub_1000CF018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CF020);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000CF024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CF02C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ApplicationMetadataExtractor.Errors()
{
  sub_1000059CC();
}

void type metadata accessor for ApplicationMetadataExtractor()
{
  sub_1000059CC();
}

unint64_t sub_1000CF058()
{
  unint64_t result;

  result = qword_10012BF58;
  if (!qword_10012BF58)
  {
    result = swift_getWitnessTable(&unk_1000F21A8, &unk_10011F0A0);
    atomic_store(result, (unint64_t *)&qword_10012BF58);
  }
  return result;
}

__n128 sub_1000CF094@<Q0>(uint64_t a1@<X8>)
{
  int v1;
  _DWORD *v2;
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(a1 - 256);
  *v2 = result.n128_u32[0];
  *(_DWORD *)(v3 - 288) = v1;
  return result;
}

void sub_1000CF0BC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x20u);
}

const char *Double.declaredDatatype.unsafeMutableAddressor()
{
  return "REAL";
}

void static Double.declaredDatatype.getter()
{
  sub_10001C104();
}

uint64_t sub_1000CF0DC()
{
  return 1279346002;
}

double sub_1000CF0EC@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_1000CF0F8@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

const char *Int64.declaredDatatype.unsafeMutableAddressor()
{
  return "INTEGER";
}

uint64_t static Int64.declaredDatatype.getter()
{
  return 0x52454745544E49;
}

const char *String.declaredDatatype.unsafeMutableAddressor()
{
  return "TEXT";
}

void static String.declaredDatatype.getter()
{
  sub_10001C104();
}

void sub_1000CF140(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  static String.fromDatatypeValue(_:)(*v1, v1[1]);
  *a1 = v3;
  a1[1] = v4;
  sub_10000BFBC();
}

const char *Blob.declaredDatatype.unsafeMutableAddressor()
{
  return "BLOB";
}

void static Blob.declaredDatatype.getter()
{
  sub_10001C104();
}

uint64_t static Data.declaredDatatype.getter()
{
  return 1112493122;
}

uint64_t sub_1000CF190@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = Blob.bytes.getter(*a1);
  *a2 = result;
  return result;
}

void sub_1000CF1B8(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = Blob.bytes.getter(*v1);
  sub_10000BFBC();
}

char *Bool.declaredDatatype.unsafeMutableAddressor()
{
  return static Bool.declaredDatatype;
}

void static Bool.declaredDatatype.getter()
{
  sub_10001AF70((uint64_t)static Bool.declaredDatatype);
}

uint64_t static Bool.declaredDatatype.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000184C4(a1, a2, static Bool.declaredDatatype);
}

void static Bool.declaredDatatype.modify(uint64_t a1)
{
  sub_100017758((uint64_t)static Bool.declaredDatatype, a1, 33);
  sub_10000BFBC();
}

BOOL static Bool.fromDatatypeValue(_:)(uint64_t a1)
{
  return a1 != 0;
}

uint64_t Bool.datatypeValue.getter(char a1)
{
  return a1 & 1;
}

void sub_1000CF250(uint64_t a1, uint64_t a2)
{
  sub_1000CF3A4(a1, a2, (uint64_t)static Bool.declaredDatatype);
}

void sub_1000CF260(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = static Bool.fromDatatypeValue(_:)(*a1);
  sub_10000BFBC();
}

void sub_1000CF288(uint64_t *a1@<X8>)
{
  char *v1;

  *a1 = Bool.datatypeValue.getter(*v1);
  sub_10000BFBC();
}

char *Int.declaredDatatype.unsafeMutableAddressor()
{
  return static Int.declaredDatatype;
}

void static Int.declaredDatatype.getter()
{
  sub_10001AF70((uint64_t)static Int.declaredDatatype);
}

void sub_1000CF2C4(uint64_t a1)
{
  _BYTE v1[24];

  sub_100017758(a1, (uint64_t)v1, 0);
  sub_10001B3C8();
  sub_10001B840();
  sub_100017EE4();
}

uint64_t static Int.declaredDatatype.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000184C4(a1, a2, static Int.declaredDatatype);
}

uint64_t sub_1000CF304(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _BYTE v9[24];

  sub_100017758((uint64_t)a3, (uint64_t)v9, 1);
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease();
}

void static Int.declaredDatatype.modify(uint64_t a1)
{
  sub_100017758((uint64_t)static Int.declaredDatatype, a1, 33);
  sub_10000BFBC();
}

void sub_1000CF394(uint64_t a1, uint64_t a2)
{
  sub_1000CF3A4(a1, a2, (uint64_t)static Int.declaredDatatype);
}

void sub_1000CF3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[24];

  sub_100017758(a3, (uint64_t)v3, 0);
  sub_10001B3C8();
  sub_10001B840();
  sub_100017EE4();
}

void sub_1000CF3DC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *variable initialization expression of TableBuilder.definitions()
{
  return _swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of QueryClauses.select()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10001BE7C(&qword_100128D58);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000EFAE0;
  v2 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(v1 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v1 + 32) = 42;
  *(_QWORD *)(v1 + 40) = 0xE100000000000000;
  *(_QWORD *)(v1 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 56) = v2;
  return 0;
}

uint64_t variable initialization expression of QueryClauses.filters()
{
  return 0;
}

uint64_t variable initialization expression of QueryClauses.group()
{
  return 0;
}

uint64_t variable initialization expression of QueryClauses.limit()
{
  return 0;
}

double variable initialization expression of Connection.busyTimeout()
{
  return 0.0;
}

void *variable initialization expression of Connection.functions()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of Connection.queue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10001765C();
  v4 = v3 - v2;
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  sub_10001765C();
  v8 = v7 - v6;
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  sub_10001765C();
  v12 = v11 - v10;
  sub_10001D33C();
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_100053B8C();
  v14 = sub_10001BE7C((uint64_t *)&unk_1001289C0);
  v15 = sub_100035D2C();
  v16 = dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v9, v13);
  static DispatchQoS.unspecified.getter(v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x442E6574694C5153, 0xEF65736162617461, v8, v12, v4, 0);
}

_UNKNOWN **sub_1000CF640()
{
  return &protocol witness table for Double;
}

_UNKNOWN **sub_1000CF64C()
{
  return &protocol witness table for Int64;
}

_UNKNOWN **sub_1000CF658()
{
  return &protocol witness table for String;
}

_UNKNOWN **sub_1000CF664()
{
  return &protocol witness table for Blob;
}

void type metadata accessor for ComparisonResult()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10012C130)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_10011F4F0);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10012C130);
  }
}

Swift::String __swiftcall SchemaType.drop(ifExists:)(Swift::Bool ifExists)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String result;
  _QWORD v8[5];

  sub_1000180D0();
  v2 = static Table.identifier.getter();
  sub_1000CF91C(v2, v3, v4, ifExists);
  v5 = sub_100017DA0(v8);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t sub_1000CF734()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  Swift::String v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  _UNKNOWN **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  _QWORD *v44;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[5];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_10001AD4C();
  v56 = v0;
  v57 = v1;
  v3 = v2;
  v5 = v4;
  v6 = sub_10001BE7C(&qword_10012C138);
  inited = swift_initStackObject(v6, &v55);
  *(_OWORD *)(inited + 16) = xmmword_1000EFDA0;
  v54[0] = 0x20504F5244;
  v54[1] = 0xE500000000000000;
  v8._countAndFlagsBits = sub_1000BE644();
  String.append(_:)(v8);
  v9 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = 0x20504F5244;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v9;
  if ((v3 & 1) != 0)
  {
    v10 = xmmword_1000F2420;
    v11 = _swiftEmptyArrayStorage;
    v12 = &protocol witness table for Expression<A>;
  }
  else
  {
    *(double *)&v10 = sub_10001F8F8();
  }
  *(_QWORD *)(inited + 96) = v9;
  *(_QWORD *)(inited + 104) = v12;
  *(_OWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 88) = v11;
  sub_100019A60(v5, inited + 112);
  v20 = _swiftEmptyArrayStorage;
  for (i = 32; i != 152; i += 40)
  {
    sub_1000D6AB4(inited + i, v13, v14, v15, v16, v17, v18, v19, v46, *((uint64_t *)&v46 + 1), v47);
    sub_1000D6A88(v22, v23, v24, v25, v26, v27, v28, v29, v46, *((uint64_t *)&v46 + 1), v47, v48, v49, v50, *((uint64_t *)&v50 + 1), v51, v52, v53, v54[0]);
    if (v48)
    {
      v30 = sub_100019A48(&v46, (uint64_t)&v50);
      sub_1000D6A70(v30, v31, v32, v33, v34, v35, v36, v37, v46, *((uint64_t *)&v46 + 1), v47, v48, v49, v50);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      {
        v40 = sub_1000073A0();
        sub_10000740C(v40, v41, v42, v20);
        v20 = v43;
      }
      v39 = v20[2];
      v38 = v20[3];
      if (v39 >= v38 >> 1)
      {
        sub_10000740C(v38 > 1, v39 + 1, 1, v20);
        v20 = v44;
      }
      v20[2] = v39 + 1;
      sub_1000D6A64((uint64_t)&v20[5 * v39], v46);
    }
    else
    {
      sub_1000D68D4((uint64_t)&v46);
    }
  }
  sub_1000117B4();
  sub_100018F74((uint64_t)v20, v54);
  sub_1000059A8();
  sub_100019B78(v54);
  return sub_100017DA0(v54);
}

uint64_t sub_1000CF91C(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t inited;
  Swift::String v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _UNKNOWN **v14;
  _QWORD *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t countAndFlagsBits;
  __int128 v23;
  uint64_t v24;
  __int128 v25[2];
  uint64_t v26[4];
  _BYTE v27[152];

  v8 = sub_10001BE7C(&qword_10012C138);
  inited = swift_initStackObject(v8, v27);
  *(_OWORD *)(inited + 16) = xmmword_1000EFDA0;
  v26[0] = 0x20504F5244;
  v26[1] = 0xE500000000000000;
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  String.append(_:)(v10);
  v11 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = 0x20504F5244;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v11;
  if ((a4 & 1) != 0)
  {
    v12 = xmmword_1000F2420;
    v13 = _swiftEmptyArrayStorage;
    v14 = &protocol witness table for Expression<A>;
  }
  else
  {
    v11 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0uLL;
  }
  *(_QWORD *)(inited + 96) = v11;
  *(_QWORD *)(inited + 104) = v14;
  *(_OWORD *)(inited + 72) = v12;
  *(_QWORD *)(inited + 88) = v13;
  sub_100019A60(a3, inited + 112);
  v15 = _swiftEmptyArrayStorage;
  for (i = 32; i != 152; i += 40)
  {
    sub_100019FCC(inited + i, (uint64_t)v26, &qword_10012C140);
    sub_1000D5EFC((uint64_t)v26, (uint64_t)&v23);
    if (v24)
    {
      sub_100019A48(&v23, (uint64_t)v25);
      sub_100019A48(v25, (uint64_t)&v23);
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      {
        sub_10001A720(0, v15[2] + 1, 1, v15, &qword_100128D58, &qword_100129F18);
        v15 = v19;
      }
      v18 = v15[2];
      v17 = v15[3];
      if (v18 >= v17 >> 1)
      {
        sub_10001A720(v17 > 1, v18 + 1, 1, v15, &qword_100128D58, &qword_100129F18);
        v15 = v20;
      }
      v15[2] = v18 + 1;
      sub_100019A48(&v23, (uint64_t)&v15[5 * v18 + 4]);
    }
    else
    {
      sub_1000131A8((uint64_t)&v23, &qword_10012C140);
    }
  }
  swift_bridgeObjectRelease(inited);
  sub_10001A118((uint64_t)v15, 32, 0xE100000000000000, v26);
  swift_bridgeObjectRelease(v15);
  sub_10000E858(v26, v26[3]);
  countAndFlagsBits = Expressible.asSQL()()._countAndFlagsBits;
  sub_10000E87C(v26);
  return countAndFlagsBits;
}

void Table.create(temporary:ifNotExists:withoutRowid:block:)()
{
  _QWORD *v0;
  void (*v1)(void);
  void (*v2)(void);
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _UNKNOWN **v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  _UNKNOWN **v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  char v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  _BYTE v55[112];
  __int128 v56;
  uint64_t v57;
  __int128 v58[2];
  uint64_t v59[3];
  uint64_t v60;
  _UNKNOWN **v61;

  sub_1000100A8();
  v2 = v1;
  v4 = v3;
  v5 = type metadata accessor for TableBuilder();
  *(_QWORD *)(sub_1000100C8(v5, 24) + 16) = _swiftEmptyArrayStorage;
  v2();
  v6 = sub_10001BE7C(&qword_10012C138);
  v7 = sub_1000D6A3C(v6);
  *(_OWORD *)(v7 + 16) = xmmword_1000EFDA0;
  v8 = v0[6];
  v9 = v0[7];
  if (v0[5])
  {
    v10 = v0[4];
    v11 = v0[5];
  }
  else
  {
    v10 = v0[2];
    v11 = v0[3];
    sub_1000058B4();
  }
  sub_1000058B4();
  sub_10000C020();
  v12 = sub_1000D6A28();
  v54 = sub_100019350(v12, v13, v10, v11);
  v15 = v14;
  sub_100007398();
  if (v9)
  {
    v16 = sub_10001BE7C(&qword_100128D58);
    inited = swift_initStackObject(v16, v55);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v53 = v4;
    v18 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(inited + 56) = v18;
    *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
    sub_1000100E0();
    v19 = sub_1000D6A28();
    v21 = sub_100019350(v19, v20, v8, v9);
    v23 = v22;
    sub_10000C028();
    *(_QWORD *)(inited + 32) = v21;
    *(_QWORD *)(inited + 40) = v23;
    *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(inited + 96) = v18;
    *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 72) = v54;
    *(_QWORD *)(inited + 80) = v15;
    v4 = v53;
    *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_10001B3D8(inited, 46, v59);
    sub_100019D18();
    sub_1000D5D08(&qword_100129F18);
    sub_100007398();
  }
  else
  {
    v60 = sub_10001BE7C(&qword_10012BFA8);
    v61 = &protocol witness table for Expression<A>;
    sub_100007398();
    v59[0] = v54;
    v59[1] = v15;
    v59[2] = (uint64_t)_swiftEmptyArrayStorage;
  }
  v24 = static Table.identifier.getter();
  sub_1000CFF20(v24, v25, v26, v27, v28, v29);
  sub_10000E87C(v59);
  v30 = sub_10000EC68();
  sub_100005A18(v30, v59);
  v31 = v60;
  v32 = v61;
  v33 = sub_10000E858(v59, v60);
  v34 = sub_10001C528(v33, 0, 0xE000000000000000, v31, v32);
  v36 = v35;
  v38 = v37;
  sub_10000E87C(v59);
  sub_1000117B4();
  v39 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(v7 + 96) = v39;
  *(_QWORD *)(v7 + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v7 + 72) = v34;
  *(_QWORD *)(v7 + 80) = v36;
  *(_QWORD *)(v7 + 88) = v38;
  if ((v4 & 1) != 0)
  {
    v40 = xmmword_1000F2430;
    v41 = _swiftEmptyArrayStorage;
    v42 = &protocol witness table for Expression<A>;
  }
  else
  {
    *(double *)&v40 = sub_10001F8F8();
  }
  *(_QWORD *)(v7 + 136) = v39;
  *(_QWORD *)(v7 + 144) = v42;
  *(_OWORD *)(v7 + 112) = v40;
  v43 = 32;
  *(_QWORD *)(v7 + 128) = v41;
  v44 = _swiftEmptyArrayStorage;
  do
  {
    sub_1000D6B28(v7 + v43, (uint64_t)v59);
    sub_1000D5EFC((uint64_t)v59, (uint64_t)&v56);
    if (v57)
    {
      sub_100019A48(&v56, (uint64_t)v58);
      sub_100019A48(v58, (uint64_t)&v56);
      if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
      {
        v47 = sub_1000073A0();
        sub_10001F384(v47, v48, v49, v44);
        v44 = v50;
      }
      v46 = v44[2];
      v45 = v44[3];
      if (v46 >= v45 >> 1)
      {
        v51 = sub_10000C0D8(v45);
        sub_10001F384(v51, v46 + 1, 1, v44);
        v44 = v52;
      }
      v44[2] = v46 + 1;
      sub_100019A48(&v56, (uint64_t)&v44[5 * v46 + 4]);
    }
    else
    {
      sub_1000D6888((uint64_t)&v56);
    }
    v43 += 40;
  }
  while (v43 != 152);
  sub_1000100D0();
  sub_100018F74((uint64_t)v44, v59);
  sub_1000101FC();
  sub_100019B78(v59);
  sub_10001F1F8();
  swift_release();
  sub_100017DA0(v59);
  sub_100013308();
}

uint64_t sub_1000CFF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  int v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _UNKNOWN **v19;
  __int128 v20;
  _QWORD *v21;
  _UNKNOWN **v22;
  _QWORD *v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  __int128 v30;
  uint64_t v31;
  __int128 v32[2];
  _BYTE v33[40];
  _BYTE v34[240];

  v11 = a4;
  v12 = sub_10001BE7C(&qword_10012C138);
  inited = swift_initStackObject(v12, v34);
  *(_OWORD *)(inited + 16) = xmmword_1000F08A0;
  v14 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = 0x455441455243;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v14;
  if (v11 == 2)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v15 = 0x5241524F504D4554;
    if ((v11 & 1) == 0)
      v15 = 0x455551494E55;
    v16 = 0xE900000000000059;
    if ((v11 & 1) == 0)
      v16 = 0xE600000000000000;
    v19 = &protocol witness table for Expression<A>;
    v17 = _swiftEmptyArrayStorage;
    v18 = v14;
  }
  *(_QWORD *)(inited + 72) = v15;
  *(_QWORD *)(inited + 80) = v16;
  *(_QWORD *)(inited + 88) = v17;
  *(_QWORD *)(inited + 96) = v18;
  *(_QWORD *)(inited + 136) = v14;
  *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 104) = v19;
  *(_QWORD *)(inited + 112) = a1;
  *(_QWORD *)(inited + 120) = a2;
  *(_QWORD *)(inited + 128) = _swiftEmptyArrayStorage;
  if ((a5 & 1) != 0)
  {
    v20 = xmmword_1000F2440;
    v21 = _swiftEmptyArrayStorage;
    v22 = &protocol witness table for Expression<A>;
  }
  else
  {
    *(double *)&v20 = sub_10001F8F8();
  }
  *(_QWORD *)(inited + 176) = v14;
  *(_QWORD *)(inited + 184) = v22;
  *(_OWORD *)(inited + 152) = v20;
  *(_QWORD *)(inited + 168) = v21;
  sub_100019A60(a3, inited + 192);
  sub_100013E10();
  v23 = _swiftEmptyArrayStorage;
  for (i = 32; i != 232; i += 40)
  {
    sub_100019FCC(inited + i, (uint64_t)v33, &qword_10012C140);
    sub_1000D5EFC((uint64_t)v33, (uint64_t)&v30);
    if (v31)
    {
      sub_100019A48(&v30, (uint64_t)v32);
      sub_100019A48(v32, (uint64_t)&v30);
      if ((sub_1000D6A34() & 1) == 0)
      {
        sub_10001F384(0, v23[2] + 1, 1, v23);
        v23 = v27;
      }
      v26 = v23[2];
      v25 = v23[3];
      if (v26 >= v25 >> 1)
      {
        sub_10001F384(v25 > 1, v26 + 1, 1, v23);
        v23 = v28;
      }
      v23[2] = v26 + 1;
      sub_100019A48(&v30, (uint64_t)&v23[5 * v26 + 4]);
    }
    else
    {
      sub_1000131A8((uint64_t)&v30, &qword_10012C140);
    }
  }
  sub_100019D18();
  sub_1000D5D08(&qword_10012C140);
  sub_100018F74((uint64_t)v23, a6);
  return sub_1000100D0();
}

void Table.create(_:temporary:ifNotExists:)()
{
  sub_1000D23F0();
}

#error "1000D0244: call analysis failed (funcsize=64)"

uint64_t sub_1000D02C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, unint64_t a12)
{
  int v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _UNKNOWN **v34;
  __int128 v35;
  _QWORD *v36;
  _UNKNOWN **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t i;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _BYTE v48[112];
  __int128 v49;
  uint64_t v50;
  __int128 v51[2];
  __int128 v52;
  uint64_t v53;
  _BYTE v54[400];

  v20 = a4;
  v21 = sub_10001BE7C(&qword_10012C138);
  inited = swift_initStackObject(v21, v54);
  *(_OWORD *)(inited + 16) = xmmword_1000F07E0;
  sub_100019A60(a1, inited + 32);
  v23 = sub_10001BE7C(&qword_10012BFA8);
  v24 = v23;
  *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 72) = a2;
  *(_QWORD *)(inited + 80) = a3;
  *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 96) = v23;
  if (v20 == 2)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v25 = 0xD000000000000019;
    if ((v20 & 1) == 0)
      v25 = 0x205952414D495250;
    v26 = 0x80000001000F6D70;
    if ((v20 & 1) == 0)
      v26 = 0xEB0000000059454BLL;
    v29 = &protocol witness table for Expression<A>;
    v27 = _swiftEmptyArrayStorage;
    v28 = v23;
  }
  *(_QWORD *)(inited + 112) = v25;
  *(_QWORD *)(inited + 120) = v26;
  *(_QWORD *)(inited + 128) = v27;
  *(_QWORD *)(inited + 136) = v28;
  *(_QWORD *)(inited + 144) = v29;
  if ((a5 & 1) != 0)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
  }
  else
  {
    v31 = 0xE800000000000000;
    v30 = 0x4C4C554E20544F4ELL;
    v32 = _swiftEmptyArrayStorage;
    v33 = v23;
    v34 = &protocol witness table for Expression<A>;
  }
  *(_QWORD *)(inited + 152) = v30;
  *(_QWORD *)(inited + 160) = v31;
  *(_QWORD *)(inited + 168) = v32;
  *(_QWORD *)(inited + 176) = v33;
  *(_QWORD *)(inited + 184) = v34;
  if ((a6 & 1) != 0)
  {
    v35 = xmmword_1000F2450;
    v36 = _swiftEmptyArrayStorage;
    v37 = &protocol witness table for Expression<A>;
    v38 = v23;
  }
  else
  {
    v38 = 0;
    v37 = 0;
    v36 = 0;
    v35 = 0uLL;
  }
  *(_QWORD *)(inited + 216) = v38;
  *(_QWORD *)(inited + 224) = v37;
  *(_OWORD *)(inited + 192) = v35;
  *(_QWORD *)(inited + 208) = v36;
  sub_100019FCC(a7, (uint64_t)&v52, &qword_10012C140);
  if (v53)
  {
    sub_100019A48(&v52, (uint64_t)v51);
    swift_bridgeObjectRetain();
    sub_1000D5C3C((uint64_t)v51, (uint64_t *)(inited + 232));
    sub_10000E87C(v51);
  }
  else
  {
    *(_QWORD *)(inited + 264) = 0;
    *(_OWORD *)(inited + 232) = 0u;
    *(_OWORD *)(inited + 248) = 0u;
    swift_bridgeObjectRetain();
  }
  sub_100019FCC(a8, (uint64_t)&v52, &qword_10012C140);
  if (v53)
  {
    sub_100019A48(&v52, (uint64_t)v51);
    sub_1000D720C(v51, 0x544C5541464544, 0xE700000000000000, (uint64_t *)(inited + 272));
    sub_10000E87C(v51);
  }
  else
  {
    *(_QWORD *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  sub_1000D5A9C(a10, inited + 312);
  if (a12 == 3)
  {
    *(_QWORD *)(inited + 384) = 0;
    *(_OWORD *)(inited + 352) = 0u;
    *(_OWORD *)(inited + 368) = 0u;
  }
  else
  {
    v39 = sub_10001BE7C(&qword_100128D58);
    v40 = swift_initStackObject(v39, v48);
    *(_OWORD *)(v40 + 16) = xmmword_1000EFD90;
    *(_QWORD *)(v40 + 32) = 0x4554414C4C4F43;
    *(_QWORD *)(v40 + 40) = 0xE700000000000000;
    *(_QWORD *)(v40 + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v40 + 56) = v24;
    *(_QWORD *)(v40 + 96) = &type metadata for Collation;
    *(_QWORD *)(v40 + 104) = &protocol witness table for Collation;
    *(_QWORD *)(v40 + 64) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v40 + 72) = a11;
    *(_QWORD *)(v40 + 80) = a12;
    sub_1000D6784(a11, a12);
    sub_10001A118(v40, 32, 0xE100000000000000, (uint64_t *)(inited + 352));
    swift_setDeallocating(v40);
    sub_1000D5D08(&qword_100129F18);
  }
  v41 = _swiftEmptyArrayStorage;
  for (i = 32; i != 392; i += 40)
  {
    sub_100019FCC(inited + i, (uint64_t)&v52, &qword_10012C140);
    sub_1000D5EFC((uint64_t)&v52, (uint64_t)&v49);
    if (v50)
    {
      sub_100019A48(&v49, (uint64_t)v51);
      sub_100019A48(v51, (uint64_t)&v49);
      if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
      {
        sub_10001A720(0, v41[2] + 1, 1, v41, &qword_100128D58, &qword_100129F18);
        v41 = v45;
      }
      v44 = v41[2];
      v43 = v41[3];
      if (v44 >= v43 >> 1)
      {
        sub_10001A720(v43 > 1, v44 + 1, 1, v41, &qword_100128D58, &qword_100129F18);
        v41 = v46;
      }
      v41[2] = v44 + 1;
      sub_100019A48(&v49, (uint64_t)&v41[5 * v44 + 4]);
    }
    else
    {
      sub_1000131A8((uint64_t)&v49, &qword_10012C140);
    }
  }
  swift_setDeallocating(inited);
  sub_1000D5D08(&qword_10012C140);
  sub_10001A118((uint64_t)v41, 32, 0xE100000000000000, a9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D0768(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t countAndFlagsBits;
  _BYTE v22[112];
  _BYTE v23[192];
  uint64_t v24[4];

  v3 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v3, v23);
  *(_OWORD *)(inited + 16) = xmmword_1000F05A0;
  v5 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = 0x4154205245544C41;
  *(_QWORD *)(inited + 40) = 0xEB00000000454C42;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v5;
  v7 = v1[5];
  v6 = v1[6];
  v8 = v1[7];
  if (v7)
  {
    v9 = v1[4];
    v10 = v7;
  }
  else
  {
    v11 = v1 + 2;
    v9 = v1[2];
    v10 = v11[1];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = sub_100019350(34, 0xE100000000000000, v9, v10);
  v14 = v13;
  swift_bridgeObjectRelease();
  if (v8)
  {
    v15 = swift_initStackObject(v3, v22);
    *(_OWORD *)(v15 + 16) = xmmword_1000EFD90;
    *(_QWORD *)(v15 + 56) = v5;
    *(_QWORD *)(v15 + 64) = &protocol witness table for Expression<A>;
    swift_bridgeObjectRetain();
    v16 = sub_100019350(34, 0xE100000000000000, v6, v8);
    v17 = a1;
    v19 = v18;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v15 + 32) = v16;
    *(_QWORD *)(v15 + 40) = v19;
    a1 = v17;
    *(_QWORD *)(v15 + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v15 + 96) = v5;
    *(_QWORD *)(v15 + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v15 + 72) = v12;
    *(_QWORD *)(v15 + 80) = v14;
    *(_QWORD *)(v15 + 88) = _swiftEmptyArrayStorage;
    sub_10001A118(v15, 46, 0xE100000000000000, (uint64_t *)(inited + 72));
    swift_setDeallocating(v15);
    sub_1000D5D08(&qword_100129F18);
  }
  else
  {
    *(_QWORD *)(inited + 96) = v5;
    *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 72) = v12;
    *(_QWORD *)(inited + 80) = v14;
    *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 136) = v5;
  *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 112) = 0x554C4F4320444441;
  *(_QWORD *)(inited + 120) = 0xEA00000000004E4DLL;
  *(_QWORD *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_100019A60(a1, inited + 152);
  sub_10001A118(inited, 32, 0xE100000000000000, v24);
  swift_setDeallocating(inited);
  sub_1000D5D08(&qword_100129F18);
  sub_10000E858(v24, v24[3]);
  countAndFlagsBits = Expressible.asSQL()()._countAndFlagsBits;
  sub_10000E87C(v24);
  return countAndFlagsBits;
}

#error "1000D0A84: call analysis failed (funcsize=61)"

void Table.addColumn<A>(_:check:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[80];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  _UNKNOWN **v68;
  _QWORD v69[5];
  _QWORD v70[6];

  sub_1000100A8();
  v58 = v21;
  v59 = v22;
  v24 = v23;
  v60 = v25;
  v61 = v26;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = sub_1000D6AF4(v33, v31, v29, v27, v22, v25, v26, v23);
  v36 = *(_QWORD *)(v35 - 8);
  sub_10001907C();
  __chkstk_darwin(v37);
  v39 = (char *)v57 - v38;
  v69[3] = sub_100005850(v40, v41, v42, v43);
  v69[4] = &protocol witness table for Expression<A>;
  v69[0] = v34;
  v69[1] = v32;
  v69[2] = v30;
  v44 = *(uint64_t (**)(uint64_t, uint64_t))(a21 + 40);
  sub_10000BFF4();
  sub_1000101B0();
  v45 = v44(v24, a21);
  v46 = v59;
  v57[1] = v45;
  v48 = v47;
  if (v59)
  {
    *((_QWORD *)&v67 + 1) = sub_10001BE7C(&qword_10012C150);
    v68 = &protocol witness table for Expression<A>;
    v49 = v28;
    *(_QWORD *)&v66 = v28;
    *((_QWORD *)&v66 + 1) = v46;
    *(_QWORD *)&v67 = v60;
  }
  else
  {
    v49 = v28;
    v68 = 0;
    v66 = 0u;
    v67 = 0u;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v39, v61, v35);
  if (sub_10001C93C((uint64_t)v39, 1, v24) == 1)
  {
    v50 = sub_100014448(v49, v46);
    (*(void (**)(char *, uint64_t, double))(v36 + 8))(v39, v35, v50);
    v65 = 0;
    v63 = 0u;
    v64 = 0u;
  }
  else
  {
    v51 = *(_QWORD *)(a21 + 8);
    *((_QWORD *)&v64 + 1) = v24;
    v65 = v51;
    v52 = sub_10001795C(&v63);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v52, v39, v24);
    sub_100014448(v49, v46);
  }
  memset(v62, 0, sizeof(v62));
  v53 = sub_1000D6998();
  sub_100019308(v53, v54, v48, (uint64_t)&v66, (uint64_t)&v63, v55, v56, 0, 3uLL);
  sub_1000101FC();
  sub_1000131A8((uint64_t)v62, &qword_10012C148);
  sub_1000D68D4((uint64_t)&v63);
  sub_1000D68D4((uint64_t)&v66);
  sub_10000E87C(v69);
  sub_1000D0768((uint64_t)v70);
  sub_10000E87C(v70);
  sub_100013308();
}

{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _QWORD v57[5];
  _QWORD v58[5];
  _QWORD v59[6];

  sub_1000100A8();
  v52 = v21;
  v23 = v22;
  v51 = v24;
  v50 = v25;
  v27 = v26;
  v49 = v28;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = sub_1000D6AF4(v33, v31, v29, v28, v26, v25, v24, v22);
  v36 = *(_QWORD *)(v35 - 8);
  sub_10001907C();
  __chkstk_darwin(v37);
  v39 = (char *)&v49 - v38;
  v58[3] = sub_100019318(v40, v41, v42, v43);
  v58[4] = &protocol witness table for Expression<A>;
  v58[0] = v34;
  v58[1] = v32;
  v58[2] = v30;
  sub_10000BFF4();
  sub_1000101B0();
  sub_1000D69E0();
  sub_100013810();
  v57[3] = sub_10001BE7C(&qword_10012C158);
  v57[4] = &protocol witness table for Expression<A>;
  v57[0] = v49;
  v57[1] = v27;
  v57[2] = v50;
  (*(void (**)(char *, unint64_t, uint64_t))(v36 + 16))(v39, v51, v35);
  if (sub_10001C93C((uint64_t)v39, 1, v23) == 1)
  {
    v44 = *(void (**)(char *, uint64_t))(v36 + 8);
    sub_10001A83C();
    sub_10000C030();
    v44(v39, v35);
    v56 = 0;
    v54 = 0u;
    v55 = 0u;
  }
  else
  {
    v45 = *(_QWORD *)(a21 + 8);
    *((_QWORD *)&v55 + 1) = v23;
    v56 = v45;
    v46 = sub_10001795C(&v54);
    sub_1000BEA58((uint64_t)v46, (uint64_t)v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32));
    sub_10001A83C();
    sub_10000C030();
  }
  sub_10001F42C();
  v50 = 0;
  v51 = 3;
  v47 = sub_1000D6998();
  sub_100019308(v47, v32, v30, (uint64_t)v57, (uint64_t)&v54, v48, v49, v50, v51);
  sub_1000059A8();
  sub_1000131A8((uint64_t)&v53, &qword_10012C148);
  sub_10001AF78((uint64_t)&v54);
  sub_10001AF78((uint64_t)v57);
  sub_10000E87C(v58);
  sub_1000D6988();
  sub_10000E87C(v59);
  sub_100013308();
}

#error "1000D0FE4: call analysis failed (funcsize=73)"

#error "1000D1114: call analysis failed (funcsize=71)"

#error "1000D1240: call analysis failed (funcsize=71)"

#error "1000D1368: call analysis failed (funcsize=70)"

void Table.addColumn<A>(_:check:defaultValue:collate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v41[5];
  __int128 v42;
  __int128 v43;
  _UNKNOWN **v44;
  _QWORD v45[11];

  v45[3] = sub_1000187D8(a1, a2, a3, a4);
  v45[4] = &protocol witness table for Expression<A>;
  v45[0] = a1;
  v45[1] = a2;
  v45[2] = a3;
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(a11 + 40);
  sub_100016794();
  sub_1000101B0();
  v19 = v18(a10, a11);
  v21 = v20;
  if (a5)
  {
    *((_QWORD *)&v43 + 1) = sub_10001BE7C(&qword_10012C150);
    v44 = &protocol witness table for Expression<A>;
    *(_QWORD *)&v42 = a4;
    *((_QWORD *)&v42 + 1) = a5;
    *(_QWORD *)&v43 = a6;
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
  }
  v22 = *(_QWORD *)(a11 + 8);
  v41[3] = a10;
  v41[4] = v22;
  v23 = sub_10001795C(v41);
  sub_1000D6A44((uint64_t)v23, a7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 16));
  sub_1000D68AC();
  v24 = sub_1000BE644();
  sub_1000D6068(v24, v25);
  v26 = sub_10001A4B4();
  sub_1000187E4(v26, v19, v21, v27, v28, v29, v38, v39, v40);
  v30 = sub_1000059A8();
  sub_1000D69F0(v30, &qword_10012C148, v31, v32, v33, v34, v35, v36);
  sub_10001AF78((uint64_t)v41);
  sub_10001AF78((uint64_t)&v42);
  sub_10000E87C(v45);
  v37 = sub_1000D6A58();
  sub_10001E2CC(v37);
  sub_100010160();
}

{
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[5];
  _QWORD v40[5];
  _QWORD v41[11];

  v41[3] = sub_1000134D0(a1, a2, a3, a4);
  v41[4] = &protocol witness table for Expression<A>;
  v41[0] = a1;
  v41[1] = a2;
  v41[2] = a3;
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(a11 + 40);
  sub_1000100E0();
  sub_10000EC68();
  v19 = v18(a10, a11);
  v21 = v20;
  v40[3] = sub_10001BE7C(&qword_10012C158);
  v40[4] = &protocol witness table for Expression<A>;
  v40[0] = a4;
  v40[1] = a5;
  v40[2] = a6;
  v22 = *(_QWORD *)(a11 + 8);
  v39[3] = a10;
  v39[4] = v22;
  v23 = sub_10001795C(v39);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 16))(v23, a7, a10);
  sub_1000D68AC();
  sub_10000C030();
  sub_10000BFF4();
  v24 = sub_10001A4B4();
  sub_1000187E4(v24, v19, v21, v25, v26, v27, v36, v37, v38);
  v28 = sub_100007398();
  sub_1000D69F0(v28, &qword_10012C148, v29, v30, v31, v32, v33, v34);
  sub_10001AF78((uint64_t)v39);
  sub_10001AF78((uint64_t)v40);
  sub_10000E87C(v41);
  v35 = sub_1000D6A58();
  sub_10001E2CC(v35);
  sub_100010160();
}

void Table.addColumn<A>(_:check:defaultValue:collate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[80];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  _UNKNOWN **v72;
  _QWORD v73[5];
  _QWORD v74[6];

  sub_1000100A8();
  v61 = v24;
  v62 = v23;
  v64 = v25;
  v65 = v26;
  v63 = v27;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v36 = type metadata accessor for Optional(0, a22);
  v37 = *(_QWORD *)(v36 - 8);
  sub_10001907C();
  __chkstk_darwin(v38);
  v40 = (char *)&v58 - v39;
  v73[3] = sub_1000D6814(v41, v42, v43, v44);
  v73[4] = &protocol witness table for Expression<A>;
  v73[0] = v35;
  v73[1] = v33;
  v73[2] = v31;
  v45 = *(uint64_t (**)(uint64_t, uint64_t))(a23 + 40);
  sub_10000C030();
  sub_1000101B0();
  v46 = v45(a22, a23);
  v47 = v63;
  v59 = v48;
  v60 = v46;
  if (v63)
  {
    *((_QWORD *)&v71 + 1) = sub_10001BE7C(&qword_10012C150);
    v72 = &protocol witness table for Expression<A>;
    *(_QWORD *)&v70 = v29;
    *((_QWORD *)&v70 + 1) = v47;
    *(_QWORD *)&v71 = v64;
  }
  else
  {
    v72 = 0;
    v70 = 0u;
    v71 = 0u;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v40, v65, v36);
  if (sub_10001C93C((uint64_t)v40, 1, a22) == 1)
  {
    v49 = sub_1000D69A8();
    (*(void (**)(char *, uint64_t, double))(v37 + 8))(v40, v36, v49);
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
  }
  else
  {
    v50 = *(_QWORD *)(a23 + 8);
    *((_QWORD *)&v68 + 1) = a22;
    v69 = v50;
    v51 = sub_10001795C(&v67);
    sub_1000D6A44((uint64_t)v51, (uint64_t)v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a22 - 8) + 32));
    sub_1000D69A8();
  }
  v52 = v59;
  memset(v66, 0, sizeof(v66));
  v57 = v61;
  v53 = sub_1000D6998();
  sub_100019308(v53, v54, v52, (uint64_t)&v70, (uint64_t)&v67, v55, v56, v57, a21);
  sub_1000100D0();
  sub_1000131A8((uint64_t)v66, &qword_10012C148);
  sub_1000D68D4((uint64_t)&v67);
  sub_1000D68D4((uint64_t)&v70);
  sub_10000E87C(v73);
  sub_1000D0768((uint64_t)v74);
  sub_10000E87C(v74);
  sub_100013308();
}

{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[80];
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[5];
  _QWORD v63[5];
  uint64_t v64[6];

  sub_1000100A8();
  v57 = v23;
  v56 = v24;
  v54 = v25;
  v53 = v26;
  v52 = v27;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v55 = a21;
  v36 = type metadata accessor for Optional(0, a22);
  v37 = *(_QWORD *)(v36 - 8);
  sub_10001907C();
  __chkstk_darwin(v38);
  v40 = (char *)&v52 - v39;
  v63[3] = sub_1000187D8(v41, v42, v43, v44);
  v63[4] = &protocol witness table for Expression<A>;
  v63[0] = v35;
  v63[1] = v33;
  v63[2] = v31;
  v45 = *(uint64_t (**)(uint64_t, uint64_t))(a23 + 40);
  sub_10000C020();
  sub_1000101B0();
  v46 = v45(a22, a23);
  v48 = v47;
  v62[3] = sub_10001BE7C(&qword_10012C158);
  v62[4] = &protocol witness table for Expression<A>;
  v62[0] = v29;
  v62[1] = v52;
  v62[2] = v53;
  sub_1000D6A44((uint64_t)v40, v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16));
  if (sub_10001C93C((uint64_t)v40, 1, a22) == 1)
  {
    v49 = *(void (**)(char *, uint64_t))(v37 + 8);
    sub_10000C030();
    sub_100013E10();
    v49(v40, v36);
    v61 = 0;
    v59 = 0u;
    v60 = 0u;
  }
  else
  {
    v50 = *(_QWORD *)(a23 + 8);
    *((_QWORD *)&v60 + 1) = a22;
    v61 = v50;
    v51 = sub_10001795C(&v59);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(a22 - 8) + 32))(v51, v40, a22);
    sub_10000C030();
    sub_100013E10();
  }
  sub_10001F42C();
  sub_100019308((uint64_t)v63, v46, v48, (uint64_t)v62, (uint64_t)&v59, v64, (uint64_t)v58, v56, v55);
  sub_1000059A8();
  sub_1000131A8((uint64_t)v58, &qword_10012C148);
  sub_10001AF78((uint64_t)&v59);
  sub_10001AF78((uint64_t)v62);
  sub_10000E87C(v63);
  sub_1000D6988();
  sub_10000E87C(v64);
  sub_100013308();
}

uint64_t sub_1000D1A18(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[112];
  _BYTE v26[192];
  uint64_t v27[3];

  v3 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v3, v26);
  *(_OWORD *)(inited + 16) = xmmword_1000F05A0;
  v5 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = 0x4154205245544C41;
  *(_QWORD *)(inited + 40) = 0xEB00000000454C42;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v5;
  v6 = v1[6];
  v7 = v1[7];
  if (!v1[5])
    sub_10000C030();
  sub_10000C030();
  sub_100016794();
  v8 = sub_100012214();
  v10 = v9;
  sub_1000059C4();
  if (v7)
  {
    v11 = swift_initStackObject(v3, v25);
    *(_OWORD *)(v11 + 16) = xmmword_1000EFD90;
    *(_QWORD *)(v11 + 56) = v5;
    *(_QWORD *)(v11 + 64) = &protocol witness table for Expression<A>;
    sub_10000C020();
    v12 = sub_1000D6A28();
    v14 = sub_100019350(v12, v13, v6, v7);
    v15 = a1;
    v17 = v16;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + 32) = v14;
    *(_QWORD *)(v11 + 40) = v17;
    a1 = v15;
    *(_QWORD *)(v11 + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v11 + 96) = v5;
    *(_QWORD *)(v11 + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v11 + 72) = v8;
    *(_QWORD *)(v11 + 80) = v10;
    *(_QWORD *)(v11 + 88) = _swiftEmptyArrayStorage;
    sub_10001B3D8(v11, 46, (uint64_t *)(inited + 72));
    sub_1000D6B44();
    sub_1000D6B3C(&qword_100129F18);
  }
  else
  {
    *(_QWORD *)(inited + 96) = v5;
    *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 72) = v8;
    *(_QWORD *)(inited + 80) = v10;
    *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
  }
  sub_1000059C4();
  *(_QWORD *)(inited + 136) = v5;
  *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 112) = 0x5420454D414E4552;
  *(_QWORD *)(inited + 120) = 0xE90000000000004FLL;
  *(_QWORD *)(inited + 128) = _swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(inited + 176) = v5;
  *(_QWORD *)(inited + 184) = &protocol witness table for Expression<A>;
  sub_100013E10();
  v20 = sub_100019350(34, 0xE100000000000000, v18, v19);
  v22 = v21;
  sub_1000100D0();
  *(_QWORD *)(inited + 152) = v20;
  *(_QWORD *)(inited + 160) = v22;
  *(_QWORD *)(inited + 168) = _swiftEmptyArrayStorage;
  sub_100018F74(inited, v27);
  swift_setDeallocating(inited);
  sub_1000D5D08(&qword_100129F18);
  v23 = sub_100019B78(v27);
  return sub_10001E2CC(v23);
}

#error "1000D1DC4: call analysis failed (funcsize=135)"

uint64_t sub_1000D1E94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String_optional v23;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  Swift::String_optional v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  char v50[112];
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v5 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
  v6 = swift_allocObject(v5, 80, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000EFDA0;
  *(_QWORD *)(v6 + 32) = 0x7865646E69;
  *(_QWORD *)(v6 + 40) = 0xE500000000000000;
  v7 = v2[3];
  v8 = v2[6];
  v9 = v2[7];
  *(_QWORD *)(v6 + 48) = v2[2];
  *(_QWORD *)(v6 + 56) = v7;
  *(_QWORD *)(v6 + 64) = 28271;
  *(_QWORD *)(v6 + 72) = 0xE200000000000000;
  v10 = *(_QWORD *)(a1 + 16);
  v46 = v8;
  v47 = a2;
  if (v10)
  {
    swift_bridgeObjectRetain();
    sub_10001573C();
    v11 = a1 + 32;
    do
    {
      sub_100019A60(v11, (uint64_t)&v51);
      v12 = v53;
      v13 = v54;
      sub_10000E858(&v51, v53);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
      v16 = v15;
      swift_bridgeObjectRelease();
      sub_10000E87C(&v51);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10001573C();
      v17 = _swiftEmptyArrayStorage[2];
      if (v17 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_10001573C();
      _swiftEmptyArrayStorage[2] = v17 + 1;
      v18 = &_swiftEmptyArrayStorage[2 * v17];
      v18[4] = v14;
      v18[5] = v16;
      v11 += 40;
      --v10;
    }
    while (v10);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v51._countAndFlagsBits = v6;
  sub_100058FC0();
  v19 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
  v20 = sub_1000D6740();
  BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v19, v20);
  swift_bridgeObjectRelease();
  v21 = String.lowercased()();
  swift_bridgeObjectRelease();
  v22 = ((unint64_t)v21._object >> 56) & 0xF;
  v51 = v21;
  if (((uint64_t)v21._object & 0x2000000000000000) == 0)
    v22 = v21._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  v52 = 0;
  v53 = v22;
  swift_bridgeObjectRetain();
  v23 = String.Iterator.next()();
  if (!v23.value._object)
  {
    v26 = 0;
    v27 = 0xE000000000000000;
LABEL_48:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v37 = sub_100019350(34, 0xE100000000000000, v26, v27);
    v39 = v38;
    swift_bridgeObjectRelease();
    if (v9)
    {
      v40 = sub_10001BE7C(&qword_100128D58);
      inited = swift_initStackObject(v40, v50);
      *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
      v42 = sub_10001BE7C(&qword_10012BFA8);
      *(_QWORD *)(inited + 56) = v42;
      *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
      swift_bridgeObjectRetain();
      v43 = sub_100019350(34, 0xE100000000000000, v46, v9);
      v45 = v44;
      swift_bridgeObjectRelease();
      *(_QWORD *)(inited + 32) = v43;
      *(_QWORD *)(inited + 40) = v45;
      *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
      *(_QWORD *)(inited + 96) = v42;
      *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
      *(_QWORD *)(inited + 72) = v37;
      *(_QWORD *)(inited + 80) = v39;
      *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
      sub_10001A118(inited, 46, 0xE100000000000000, v47);
      swift_setDeallocating(inited);
      sub_1000D5D08(&qword_100129F18);
      return swift_bridgeObjectRelease();
    }
    else
    {
      v47[3] = sub_10001BE7C(&qword_10012BFA8);
      v47[4] = (uint64_t)&protocol witness table for Expression<A>;
      result = swift_bridgeObjectRelease();
      *v47 = v37;
      v47[1] = v39;
      v47[2] = (uint64_t)_swiftEmptyArrayStorage;
    }
    return result;
  }
  countAndFlagsBits = v23.value._countAndFlagsBits;
  object = v23.value._object;
  v26 = 0;
  v27 = 0xE000000000000000;
  while (1)
  {
    v28 = countAndFlagsBits == 34 && object == (void *)0xE100000000000000;
    if (!v28
      && (_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 34, 0xE100000000000000, 0) & 1) == 0)
    {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_45:
    v36 = String.Iterator.next()();
    countAndFlagsBits = v36.value._countAndFlagsBits;
    object = v36.value._object;
    if (!v36.value._object)
      goto LABEL_48;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)(122, 0xE100000000000000, 97, 0xE100000000000000, 1);
  if ((result & 1) == 0)
  {
    if (countAndFlagsBits != 97 || object != (void *)0xE100000000000000)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 97, 0xE100000000000000, 1) & 1) != 0)
      {
LABEL_31:
        result = _stringCompareWithSmolCheck(_:_:expecting:)(57, 0xE100000000000000, 48, 0xE100000000000000, 1);
        if ((result & 1) != 0)
          goto LABEL_52;
        if (countAndFlagsBits == 48 && object == (void *)0xE100000000000000)
          goto LABEL_41;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 48, 0xE100000000000000, 1) & 1) != 0)
        {
LABEL_42:
          v48 = v26;
          v49 = v27;
          swift_bridgeObjectRetain();
          v34 = 95;
          v35 = 0xE100000000000000;
LABEL_44:
          String.append(_:)(*(Swift::String *)&v34);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v26 = v48;
          v27 = v49;
          goto LABEL_45;
        }
        if (countAndFlagsBits != 57 || object != (void *)0xE100000000000000)
        {
LABEL_41:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(57, 0xE100000000000000, countAndFlagsBits, object, 1) & 1) != 0)
            goto LABEL_42;
        }
LABEL_43:
        v48 = v26;
        v49 = v27;
        swift_bridgeObjectRetain();
        v34 = countAndFlagsBits;
        v35 = (unint64_t)object;
        goto LABEL_44;
      }
      if (countAndFlagsBits == 122 && object == (void *)0xE100000000000000)
        goto LABEL_43;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(122, 0xE100000000000000, countAndFlagsBits, object, 1) & 1) == 0)
      goto LABEL_43;
    goto LABEL_31;
  }
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t Table.dropIndex(_:ifExists:)(uint64_t a1)
{
  uint64_t v2[5];

  sub_1000D1E94(a1, v2);
  sub_1000D6B00();
  sub_1000CF734();
  return sub_100017DA0(v2);
}

void View.create(_:temporary:ifNotExists:)()
{
  sub_1000D23F0();
}

void sub_1000D23F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t i;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE v39[112];
  __int128 v40;
  uint64_t v41;
  __int128 v42[2];
  uint64_t v43[25];

  sub_1000100A8();
  v36 = v1;
  v37 = v2;
  v33 = v3;
  v5 = v4;
  v7 = v6;
  v8 = sub_10001BE7C(&qword_10012C138);
  v9 = sub_1000D6A3C(v8);
  *(_OWORD *)(v9 + 16) = xmmword_1000EFDA0;
  v32 = v0[6];
  v10 = v0[7];
  if (v0[5])
  {
    v11 = v0[4];
    v38 = v0[5];
  }
  else
  {
    v11 = v0[2];
    v38 = v0[3];
    swift_bridgeObjectRetain();
  }
  sub_10000BFF4();
  sub_100016794();
  v34 = sub_100019350(34, 0xE100000000000000, v11, v38);
  v35 = v12;
  sub_1000101FC();
  v13 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v14 = sub_10001BE7C(&qword_100128D58);
    inited = swift_initStackObject(v14, v39);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v16 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(inited + 56) = v16;
    *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
    sub_1000058B4();
    v17 = sub_1000D6A28();
    v19 = sub_100019350(v17, v18, v32, v10);
    v21 = v20;
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 32) = v19;
    *(_QWORD *)(inited + 40) = v21;
    *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(inited + 96) = v16;
    *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 72) = v34;
    *(_QWORD *)(inited + 80) = v35;
    *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_10001B3D8(inited, 46, v43);
    sub_100019D18();
    sub_1000D5D08(&qword_100129F18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v43[3] = sub_10001BE7C(&qword_10012BFA8);
    v43[4] = (uint64_t)&protocol witness table for Expression<A>;
    swift_bridgeObjectRelease();
    v43[0] = v34;
    v43[1] = v35;
    v43[2] = (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
    v22 = 1;
  else
    v22 = 2;
  sub_1000CFF20(v36, v37, (uint64_t)v43, v22, v33 & 1, (uint64_t *)(v9 + 32));
  sub_10000E87C(v43);
  *(_QWORD *)(v9 + 96) = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(v9 + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v9 + 72) = 21313;
  *(_QWORD *)(v9 + 80) = 0xE200000000000000;
  *(_QWORD *)(v9 + 88) = _swiftEmptyArrayStorage;
  v23 = v7[3];
  v24 = v7[4];
  v25 = sub_10000E858(v7, v23);
  *(_QWORD *)(v9 + 136) = v23;
  *(_QWORD *)(v9 + 144) = *(_QWORD *)(v24 + 8);
  v26 = sub_10001795C((_QWORD *)(v9 + 112));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v26, v25, v23);
  for (i = 32; i != 152; i += 40)
  {
    sub_1000D6B28(v9 + i, (uint64_t)v43);
    sub_1000D5EFC((uint64_t)v43, (uint64_t)&v40);
    if (v41)
    {
      sub_100019A48(&v40, (uint64_t)v42);
      sub_100019A48(v42, (uint64_t)&v40);
      if ((sub_1000D6A34() & 1) == 0)
      {
        sub_100013E7C(0, v13[2] + 1);
        v13 = v30;
      }
      v29 = v13[2];
      v28 = v13[3];
      if (v29 >= v28 >> 1)
      {
        sub_100013E7C(v28 > 1, v29 + 1);
        v13 = v31;
      }
      v13[2] = v29 + 1;
      sub_100019A48(&v40, (uint64_t)&v13[5 * v29 + 4]);
    }
    else
    {
      sub_1000D6888((uint64_t)&v40);
    }
  }
  sub_1000117B4();
  sub_100018F74((uint64_t)v13, v43);
  sub_1000100D0();
  sub_100019B78(v43);
  sub_10001F1F8();
  sub_100017DA0(v43);
  sub_100013308();
}

Swift::String __swiftcall View.drop(ifExists:)(Swift::Bool ifExists)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  Swift::String result;
  uint64_t v17;
  uint64_t v18[6];

  v3 = v1[5];
  v2 = v1[6];
  v4 = v1[7];
  if (!v3)
    sub_10000BFF4();
  sub_10000BFF4();
  sub_1000100E0();
  v5 = sub_1000D6928();
  v7 = v6;
  sub_1000101FC();
  if (v4)
  {
    v8 = sub_10001BE7C(&qword_100128D58);
    inited = swift_initStackObject(v8, &v17);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v10 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(inited + 56) = v10;
    *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
    sub_1000101B0();
    v11 = sub_100019350(34, 0xE100000000000000, v2, v4);
    v13 = v12;
    sub_1000059A8();
    *(_QWORD *)(inited + 32) = v11;
    *(_QWORD *)(inited + 40) = v13;
    *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(inited + 96) = v10;
    *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 72) = v5;
    *(_QWORD *)(inited + 80) = v7;
    *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_10001B3D8(inited, 46, v18);
    swift_setDeallocating(inited);
    sub_1000D5D08(&qword_100129F18);
    sub_1000101FC();
  }
  else
  {
    v18[3] = sub_10001BE7C(&qword_10012BFA8);
    v18[4] = (uint64_t)&protocol witness table for Expression<A>;
    sub_1000101FC();
    v18[0] = v5;
    v18[1] = v7;
    v18[2] = (uint64_t)_swiftEmptyArrayStorage;
  }
  sub_1000CF734();
  sub_10001F1F8();
  v14 = sub_100017DA0(v18);
  result._object = v15;
  result._countAndFlagsBits = v14;
  return result;
}

void VirtualTable.create(_:ifNotExists:)()
{
  _QWORD *v0;
  _QWORD *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[112];
  __int128 v36;
  uint64_t v37;
  __int128 v38[2];
  uint64_t v39[25];

  sub_1000100A8();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v34 = v8;
  v9 = sub_10001BE7C(&qword_10012C138);
  v10 = sub_1000D6A3C(v9);
  *(_OWORD *)(v10 + 16) = xmmword_1000EFDA0;
  v11 = v1[7];
  if (v1[5])
  {
    v12 = v1[4];
    v13 = v1[5];
  }
  else
  {
    v12 = v1[2];
    v13 = v1[3];
    sub_10001A83C();
  }
  sub_10001A83C();
  sub_100016794();
  v32 = sub_100019350(34, 0xE100000000000000, v12, v13);
  v33 = v14;
  sub_10000EC84();
  v15 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v16 = sub_10001BE7C(&qword_100128D58);
    v30 = v3;
    inited = swift_initStackObject(v16, v35);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v31 = v7;
    v18 = v5;
    v19 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(inited + 56) = v19;
    *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
    sub_10000BFF4();
    v20 = sub_1000D6928();
    v22 = v21;
    sub_1000101FC();
    *(_QWORD *)(inited + 32) = v20;
    *(_QWORD *)(inited + 40) = v22;
    *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(inited + 96) = v19;
    *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 72) = v32;
    *(_QWORD *)(inited + 80) = v33;
    v5 = v18;
    v7 = v31;
    *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
    sub_10001B3D8(inited, 46, v39);
    sub_100019D18();
    sub_1000D5D08(&qword_100129F18);
    v3 = v30;
    sub_10000EC84();
  }
  else
  {
    v39[3] = sub_10001BE7C(&qword_10012BFA8);
    v39[4] = (uint64_t)&protocol witness table for Expression<A>;
    sub_10000EC84();
    v39[0] = v32;
    v39[1] = v33;
    v39[2] = (uint64_t)_swiftEmptyArrayStorage;
  }
  sub_1000CFF20(0x204C415554524956, 0xED0000454C424154, (uint64_t)v39, 2u, v3 & 1, (uint64_t *)(v10 + 32));
  sub_10000E87C(v39);
  v23 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(v10 + 72) = 0x474E495355;
  *(_QWORD *)(v10 + 80) = 0xE500000000000000;
  *(_QWORD *)(v10 + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v10 + 96) = v23;
  *(_QWORD *)(v10 + 136) = &type metadata for Module;
  *(_QWORD *)(v10 + 144) = &protocol witness table for Module;
  *(_QWORD *)(v10 + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v10 + 112) = v34;
  *(_QWORD *)(v10 + 120) = v7;
  *(_QWORD *)(v10 + 128) = v5;
  sub_1000058B4();
  sub_10000C030();
  for (i = 32; i != 152; i += 40)
  {
    sub_1000D6B28(v10 + i, (uint64_t)v39);
    sub_1000D5EFC((uint64_t)v39, (uint64_t)&v36);
    if (v37)
    {
      sub_100019A48(&v36, (uint64_t)v38);
      sub_100019A48(v38, (uint64_t)&v36);
      if ((sub_1000D6A34() & 1) == 0)
      {
        sub_100013E7C(0, v15[2] + 1);
        v15 = v27;
      }
      v26 = v15[2];
      v25 = v15[3];
      if (v26 >= v25 >> 1)
      {
        v28 = sub_10000C0D8(v25);
        sub_100013E7C(v28, v26 + 1);
        v15 = v29;
      }
      v15[2] = v26 + 1;
      sub_100019A48(&v36, (uint64_t)&v15[5 * v26 + 4]);
    }
    else
    {
      sub_1000D6888((uint64_t)&v36);
    }
  }
  sub_1000117B4();
  sub_100018F74((uint64_t)v15, v39);
  sub_1000100D0();
  sub_100019B78(v39);
  sub_10001F1F8();
  sub_100017DA0(v39);
  sub_100013308();
}

uint64_t VirtualTable.rename(_:)(uint64_t a1)
{
  return sub_1000D1A18(a1);
}

#error "1000D2C90: call analysis failed (funcsize=59)"

#error "1000D2D44: call analysis failed (funcsize=59)"

#error "1000D2E88: call analysis failed (funcsize=59)"

#error "1000D2F28: call analysis failed (funcsize=45)"

#error "1000D3050: call analysis failed (funcsize=61)"

#error "1000D3178: call analysis failed (funcsize=70)"

#error "1000D322C: call analysis failed (funcsize=61)"

#error "1000D3380: call analysis failed (funcsize=61)"

#error "1000D3498: call analysis failed (funcsize=66)"

#error "1000D3538: call analysis failed (funcsize=46)"

#error "1000D3650: call analysis failed (funcsize=56)"

#error "1000D3740: call analysis failed (funcsize=56)"

void TableBuilder.column<A>(_:primaryKey:check:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _UNKNOWN **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a1;
  v41 = a2;
  v42 = a3;
  v15 = *(void (**)(uint64_t, uint64_t))(a9 + 40);
  sub_1000133E0(a1, a2);
  sub_1000101B0();
  v15(a8, a9);
  sub_100013810();
  if (a6)
  {
    *((_QWORD *)&v38 + 1) = sub_10001BE7C(&qword_10012C150);
    v39 = &protocol witness table for Expression<A>;
    *(_QWORD *)&v37 = a5;
    *((_QWORD *)&v37 + 1) = a6;
    *(_QWORD *)&v38 = a7;
  }
  else
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
  }
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  sub_1000D68AC();
  sub_100014448(a5, a6);
  v34 = sub_1000D6814(v16, v17, v18, v19);
  v20 = sub_1000D6970();
  sub_10001A874(v20, a9, a8, a4 & 1, v21, v22, v23, v24, v32, v33, 3uLL, v9, v34, (uint64_t)&protocol witness table for Expression<A>);
  v25 = sub_1000059A8();
  sub_1000D69F0(v25, &qword_10012C148, v26, v27, v28, v29, v30, v31);
  sub_10001AF78((uint64_t)v35);
  sub_10001AF78((uint64_t)&v37);
  sub_100017F40();
  swift_bridgeObjectRelease();
  sub_10001AF80();
}

{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _QWORD v40[8];

  v10 = v9;
  v15 = a4 & 1;
  v40[5] = a1;
  v40[6] = a2;
  v40[7] = a3;
  v16 = *(void (**)(uint64_t))(a9 + 40);
  sub_1000133E0(a1, a2);
  sub_1000101B0();
  v17 = a8;
  v18 = sub_1000BE644();
  v16(v18);
  sub_1000111FC();
  v40[3] = sub_10001BE7C(&qword_10012C158);
  v40[4] = &protocol witness table for Expression<A>;
  v40[0] = a5;
  v40[1] = a6;
  v40[2] = a7;
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_1000D68AC();
  v23 = sub_10001C10C(v19, v20, v21, v22);
  sub_1000100E0();
  sub_10000BFF4();
  v24 = sub_1000D6970();
  sub_10001A874(v24, a9, v17, v15, v25, v26, v27, v28, v36, v37, 3uLL, v10, v23, (uint64_t)&protocol witness table for Expression<A>);
  v29 = sub_1000059A8();
  sub_1000D69F0(v29, &qword_10012C148, v30, v31, v32, v33, v34, v35);
  sub_10001AF78((uint64_t)v38);
  sub_10001AF78((uint64_t)v40);
  sub_100017F40();
  swift_bridgeObjectRelease();
  sub_10001AF80();
}

#error "1000D3A20: call analysis failed (funcsize=59)"

#error "1000D3AE8: call analysis failed (funcsize=50)"

#error "1000D3BFC: call analysis failed (funcsize=66)"

#error "1000D3CDC: call analysis failed (funcsize=52)"

#error "1000D3DEC: call analysis failed (funcsize=62)"

#error "1000D3EC0: call analysis failed (funcsize=47)"

#error "1000D3FC8: call analysis failed (funcsize=69)"

#error "1000D40B4: call analysis failed (funcsize=51)"

#error "1000D4224: call analysis failed (funcsize=70)"

#error "1000D42E0: call analysis failed (funcsize=58)"

#error "1000D4424: call analysis failed (funcsize=62)"

#error "1000D44D4: call analysis failed (funcsize=49)"

#error "1000D4620: call analysis failed (funcsize=70)"

#error "1000D4740: call analysis failed (funcsize=68)"

#error "1000D47FC: call analysis failed (funcsize=60)"

#error "1000D4948: call analysis failed (funcsize=62)"

#error "1000D4A58: call analysis failed (funcsize=64)"

#error "1000D4B08: call analysis failed (funcsize=50)"

void TableBuilder.primaryKey<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[72];

  v6 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v6, v11);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(inited + 56) = sub_100005950(inited, v8, v9, v10);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 48) = a3;
  sub_10000BFF4();
  sub_100013E10();
  sub_1000D4C00(inited);
  swift_setDeallocating(inited);
  sub_1000D5D08(&qword_100129F18);
  sub_10001BF40();
}

uint64_t sub_1000D4C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5[2];

  sub_1000D7144(a1, 0x205952414D495250, 0xEB0000000059454BLL, (uint64_t *)v5);
  sub_1000D5D64(&qword_100128D58, &qword_100129F18);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  sub_1000D5E38(v2);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v3 + 16) = v2 + 1;
  return sub_100019A48(v5, v3 + 40 * v2 + 32);
}

uint64_t TableBuilder.primaryKey<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v12 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v12, &v22);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  v17 = sub_10001E554(inited, v14, v15, v16);
  *(_QWORD *)(inited + 56) = v17;
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 48) = a3;
  *(_QWORD *)(inited + 96) = sub_1000D6814(v17, v18, v19, v20);
  *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 72) = a4;
  *(_QWORD *)(inited + 80) = a5;
  *(_QWORD *)(inited + 88) = a6;
  sub_100016794();
  sub_1000100E0();
  sub_10000C030();
  sub_10000EC68();
  sub_1000D4C00(inited);
  sub_1000D6B44();
  return sub_1000D6B3C(&qword_100129F18);
}

uint64_t TableBuilder.primaryKey<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v32[160];

  v18 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v18, v32);
  *(_OWORD *)(inited + 16) = xmmword_1000EFDA0;
  v23 = sub_1000134D0(inited, v20, v21, v22);
  *(_QWORD *)(inited + 56) = v23;
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 48) = a3;
  *(_QWORD *)(inited + 96) = sub_100005950(v23, v24, v25, v26);
  *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 72) = a4;
  *(_QWORD *)(inited + 80) = a5;
  *(_QWORD *)(inited + 88) = a6;
  *(_QWORD *)(inited + 136) = type metadata accessor for Expression(0, a12, v27, v28);
  *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 112) = a7;
  *(_QWORD *)(inited + 120) = a8;
  *(_QWORD *)(inited + 128) = a9;
  sub_10001A83C();
  sub_1000100E0();
  sub_10000C020();
  sub_100013E10();
  sub_10000EC68();
  sub_10000C030();
  sub_1000D4C00(inited);
  swift_setDeallocating(inited);
  return sub_1000D5D08(&qword_100129F18);
}

void TableBuilder.primaryKey<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t inited;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  sub_10001AD4C();
  a53 = v62;
  a54 = v63;
  v95 = v64;
  v96 = v65;
  v67 = v66;
  v69 = v68;
  v71 = v70;
  v73 = v72;
  v75 = v74;
  v77 = v76;
  v99 = a58;
  v98 = a57;
  v97 = a56;
  v93 = a55;
  v94 = a62;
  v78 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v78, &a18);
  *(_OWORD *)(inited + 16) = xmmword_1000F05A0;
  v83 = sub_10001C10C(inited, v80, v81, v82);
  *(_QWORD *)(inited + 56) = v83;
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = v77;
  *(_QWORD *)(inited + 40) = v75;
  *(_QWORD *)(inited + 48) = v73;
  v87 = sub_10001E554(v83, v84, v85, v86);
  *(_QWORD *)(inited + 96) = v87;
  *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 72) = v71;
  *(_QWORD *)(inited + 80) = v69;
  *(_QWORD *)(inited + 88) = v67;
  *(_QWORD *)(inited + 136) = sub_1000D6814(v87, v88, v89, v90);
  *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 112) = v95;
  *(_QWORD *)(inited + 120) = v96;
  *(_QWORD *)(inited + 128) = v93;
  *(_QWORD *)(inited + 176) = type metadata accessor for Expression(0, v94, v91, v92);
  *(_QWORD *)(inited + 184) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 152) = v97;
  *(_QWORD *)(inited + 160) = v98;
  *(_QWORD *)(inited + 168) = v99;
  sub_10001A83C();
  sub_1000058B4();
  sub_100016794();
  sub_1000100E0();
  sub_1000101B0();
  sub_10000BFF4();
  sub_100013E10();
  sub_10000EC68();
  sub_1000D4C00(inited);
  swift_setDeallocating(inited);
  sub_1000D5D08(&qword_100129F18);
  sub_10001C868();
}

Swift::Void __swiftcall TableBuilder.unique(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  __int128 v2[2];

  sub_1000D7144((uint64_t)a1._rawValue, 0x455551494E55, 0xE600000000000000, (uint64_t *)v2);
  sub_1000D6B4C();
  sub_1000D68BC();
  sub_1000D68F0();
  sub_100019A48(v2, v1);
}

uint64_t TableBuilder.check(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000133E0(a1, a2);
  sub_10000EC68();
  TableBuilder.check(_:)(a1, a2, a3);
  sub_1000117B4();
  return swift_bridgeObjectRelease();
}

void TableBuilder.check(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[5];
  __int128 v8[2];

  v7[3] = sub_10001BE7C(&qword_10012C158);
  v7[4] = &protocol witness table for Expression<A>;
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  sub_100013E10();
  sub_1000101B0();
  sub_1000D720C(v7, 0x4B43454843, 0xE500000000000000, (uint64_t *)v8);
  sub_10000E87C(v7);
  sub_1000D6B4C();
  sub_1000D68BC();
  sub_1000D68F0();
  sub_100019A48(v8, v6);
  sub_10001BF40();
}

SQLite::TableBuilder::Dependency_optional __swiftcall TableBuilder.Dependency.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10011F1B0, v2);
  sub_1000117B4();
  if (v3 >= 5)
    return (SQLite::TableBuilder::Dependency_optional)5;
  else
    return (SQLite::TableBuilder::Dependency_optional)v3;
}

uint64_t TableBuilder.Dependency.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D51AC + 4 * byte_1000F2460[a1]))(0x4F49544341204F4ELL, 0xE90000000000004ELL);
}

uint64_t sub_1000D51AC()
{
  return 0x5443495254534552;
}

uint64_t sub_1000D51C4()
{
  return 0x4C4C554E20544553;
}

uint64_t sub_1000D51DC()
{
  return 0x4146454420544553;
}

uint64_t sub_1000D51FC()
{
  return 0x45444143534143;
}

void sub_1000D5214(char *a1)
{
  sub_1000E11FC(*a1);
}

void sub_1000D5220()
{
  unsigned __int8 *v0;

  sub_1000E15B8(*v0);
}

void sub_1000D5228(uint64_t a1)
{
  char *v1;

  sub_1000E168C(a1, *v1);
}

void sub_1000D5230(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1000E1910(a1, *v1);
}

SQLite::TableBuilder::Dependency_optional sub_1000D5238@<W0>(Swift::String *a1@<X0>, SQLite::TableBuilder::Dependency_optional *a2@<X8>)
{
  SQLite::TableBuilder::Dependency_optional result;

  result.value = TableBuilder.Dependency.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1000D5264@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = TableBuilder.Dependency.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void TableBuilder.foreignKey<A>(_:references:_:update:delete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD v15[3];

  v15[0] = a1;
  v15[1] = a2;
  v15[2] = a3;
  v14[0] = a5;
  v14[1] = a6;
  v14[2] = a7;
  v13 = type metadata accessor for Expression(0, a10, a3, a4);
  sub_1000100E0();
  sub_10000C020();
  sub_10000EC68();
  sub_1000101B0();
  sub_1000D6094((uint64_t)v15, a4, (uint64_t)v14, a8, a9, v10, v13, v13, (uint64_t)&protocol witness table for Expression<A>, (uint64_t)&protocol witness table for Expression<A>);
  swift_bridgeObjectRelease();
  sub_10000C028();
  sub_1000059A8();
  sub_1000117B4();
  sub_1000D686C();
}

{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD v23[3];

  v23[0] = a1;
  v23[1] = a2;
  v23[2] = a3;
  v22[0] = a5;
  v22[1] = a6;
  v22[2] = a7;
  v13 = type metadata accessor for Optional(255, a10);
  v17 = sub_100017AF8(v13, v14, v15, v16);
  v21 = sub_1000187D8(v17, v18, v19, v20);
  sub_100013E10();
  sub_10000BFF4();
  sub_10000EC68();
  sub_1000101B0();
  sub_1000D6094((uint64_t)v23, a4, (uint64_t)v22, a8, a9, v10, v17, v21, (uint64_t)&protocol witness table for Expression<A>, (uint64_t)&protocol witness table for Expression<A>);
  sub_1000101FC();
  sub_1000100D0();
  sub_1000059A8();
  sub_1000117B4();
  sub_1000D686C();
}

void TableBuilder.foreignKey<A, B>(_:references:_:update:delete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned __int8 a26,unsigned __int8 a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t inited;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[5];
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[112];
  _BYTE v68[40];
  uint64_t v69[19];
  uint64_t v70[3];
  uint64_t v71;
  uint64_t v72;

  sub_1000100A8();
  v62 = v29;
  v61 = v30;
  v60 = v31;
  v33 = v32;
  v35 = v34;
  v59 = v36;
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v43 = sub_10001BE7C(&qword_100128D58);
  v44 = sub_1000D6A3C(v43);
  *(_OWORD *)(v44 + 16) = xmmword_1000EFD90;
  v48 = sub_1000D6814(v44, v45, v46, v47);
  *(_QWORD *)(v44 + 56) = v48;
  *(_QWORD *)(v44 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v44 + 32) = v42;
  *(_QWORD *)(v44 + 40) = v40;
  *(_QWORD *)(v44 + 48) = v38;
  v51 = type metadata accessor for Expression(0, a29, v49, v50);
  *(_QWORD *)(v44 + 96) = v51;
  *(_QWORD *)(v44 + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v44 + 72) = v59;
  *(_QWORD *)(v44 + 80) = v35;
  *(_QWORD *)(v44 + 88) = v33;
  sub_100016794();
  sub_10000C020();
  sub_10000BFF4();
  sub_10001A83C();
  sub_100005A18(v44, v70);
  sub_100019D18();
  sub_1000D5D08(&qword_100129F18);
  sub_100019A60(v60, (uint64_t)v68);
  inited = swift_initStackObject(v43, v67);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  *(_QWORD *)(inited + 32) = v61;
  *(_QWORD *)(inited + 56) = v48;
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 40) = a21;
  *(_QWORD *)(inited + 48) = a22;
  *(_QWORD *)(inited + 96) = v51;
  *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 72) = a23;
  *(_QWORD *)(inited + 80) = a24;
  *(_QWORD *)(inited + 88) = a25;
  swift_bridgeObjectRetain();
  sub_10000C030();
  sub_100013E10();
  sub_10000EC68();
  sub_100005A18(inited, v69);
  sub_100019D18();
  sub_1000D5D08(&qword_100129F18);
  sub_100019A60((uint64_t)v68, (uint64_t)v63);
  sub_100019A60((uint64_t)v69, (uint64_t)v64);
  v53 = v71;
  v54 = v72;
  v55 = sub_10000E858(v70, v71);
  v56 = v65;
  v57 = v66;
  v58 = sub_10000E858(v64, v65);
  sub_1000D6094((uint64_t)v55, (uint64_t)v63, (uint64_t)v58, a26, a27, v62, v53, v56, v54, v57);
  sub_1000131A8((uint64_t)v68, &qword_10012C160);
  sub_10000E87C(v70);
  sub_10000E87C(v64);
  sub_10000E87C(v63);
  sub_100013308();
}

void TableBuilder.foreignKey<A, B, C>(_:references:_:update:delete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned __int8 a32,unsigned __int8 a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t inited;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[5];
  _QWORD v75[3];
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[152];
  _BYTE v79[40];
  uint64_t v80[5];
  _BYTE v81[152];
  uint64_t v82[3];
  uint64_t v83;
  uint64_t v84;

  sub_1000100A8();
  v73 = v36;
  v69 = v37;
  v71 = v38;
  v40 = v39;
  v42 = v41;
  v68 = v43;
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v72 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v72, v81);
  *(_OWORD *)(inited + 16) = xmmword_1000EFDA0;
  sub_10000BFF4();
  sub_100013E10();
  sub_10000C030();
  v51 = swift_bridgeObjectRelease();
  v70 = sub_1000187D8(v51, v52, v53, v54);
  *(_QWORD *)(inited + 56) = v70;
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = v49;
  *(_QWORD *)(inited + 40) = v47;
  *(_QWORD *)(inited + 48) = v45;
  sub_10000BFF4();
  sub_100013E10();
  sub_10000C030();
  sub_10000EC68();
  sub_1000100D0();
  sub_1000101FC();
  v57 = type metadata accessor for Expression(0, a35, v55, v56);
  *(_QWORD *)(inited + 96) = v57;
  *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 72) = v68;
  *(_QWORD *)(inited + 80) = v42;
  *(_QWORD *)(inited + 88) = v40;
  sub_10000BFF4();
  sub_100013E10();
  sub_10000EC68();
  sub_10000C030();
  sub_1000100D0();
  sub_1000101FC();
  v60 = type metadata accessor for Expression(0, a36, v58, v59);
  *(_QWORD *)(inited + 136) = v60;
  *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 112) = v71;
  *(_QWORD *)(inited + 120) = v69;
  *(_QWORD *)(inited + 128) = a21;
  sub_100005A18(inited, v82);
  sub_100019D18();
  sub_1000D5D08(&qword_100129F18);
  sub_100019A60(a22, (uint64_t)v79);
  v61 = swift_initStackObject(v72, v78);
  *(_OWORD *)(v61 + 16) = xmmword_1000EFDA0;
  sub_1000100E0();
  sub_100016794();
  sub_10001A83C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v61 + 32) = a23;
  *(_QWORD *)(v61 + 40) = a24;
  *(_QWORD *)(v61 + 56) = v70;
  *(_QWORD *)(v61 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v61 + 48) = a25;
  sub_1000100E0();
  sub_100016794();
  sub_10001A83C();
  sub_10000C030();
  swift_bridgeObjectRelease();
  sub_10000C028();
  *(_QWORD *)(v61 + 96) = v57;
  *(_QWORD *)(v61 + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v61 + 72) = a26;
  *(_QWORD *)(v61 + 80) = a27;
  *(_QWORD *)(v61 + 88) = a28;
  sub_1000100E0();
  sub_100016794();
  sub_10000C020();
  sub_10000C030();
  swift_bridgeObjectRelease();
  sub_10000C028();
  *(_QWORD *)(v61 + 136) = v60;
  *(_QWORD *)(v61 + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v61 + 112) = a29;
  *(_QWORD *)(v61 + 120) = a30;
  *(_QWORD *)(v61 + 128) = a31;
  sub_100005A18(v61, v80);
  sub_100019D18();
  sub_1000D5D08(&qword_100129F18);
  sub_100019A60((uint64_t)v79, (uint64_t)v74);
  sub_100019A60((uint64_t)v80, (uint64_t)v75);
  v62 = v83;
  v63 = v84;
  v64 = sub_10000E858(v82, v83);
  v65 = v76;
  v66 = v77;
  v67 = sub_10000E858(v75, v76);
  sub_1000D6094((uint64_t)v64, (uint64_t)v74, (uint64_t)v67, a32, a33, v73, v62, v65, v63, v66);
  sub_1000131A8((uint64_t)v79, &qword_10012C160);
  sub_10000E87C(v82);
  sub_10000E87C(v75);
  sub_10000E87C(v74);
  sub_100013308();
}

void sub_1000D5934(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[152];
  _QWORD v15[4];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  sub_100019A60(a1, (uint64_t)v15);
  sub_100019A60(a2, (uint64_t)v16);
  v5 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v5, v14);
  *(_OWORD *)(inited + 16) = xmmword_1000EFDA0;
  v7 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = 0x434E455245464552;
  *(_QWORD *)(inited + 40) = 0xEA00000000005345;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v7;
  sub_10000E858(v15, v15[3]);
  sub_1000DB870();
  v8 = v17;
  v9 = v18;
  v10 = sub_10000E858(v16, v17);
  v11 = sub_10001C528(v10, 0, 0xE000000000000000, v8, v9);
  *(_QWORD *)(inited + 136) = v7;
  *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 112) = v11;
  *(_QWORD *)(inited + 120) = v12;
  *(_QWORD *)(inited + 128) = v13;
  sub_10001A118(inited, 32, 0xE100000000000000, a3);
  swift_setDeallocating(inited);
  sub_1000D5D08(&qword_100129F18);
  sub_1000131A8((uint64_t)v15, &qword_10012C160);
}

double sub_1000D5A9C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  _BYTE v4[80];
  _QWORD __src[10];

  sub_100019FCC(a1, (uint64_t)__src, &qword_10012C148);
  if (__src[3])
  {
    memcpy(v4, __src, sizeof(v4));
    sub_1000D5934((uint64_t)v4, (uint64_t)&v4[40], (uint64_t *)a2);
    sub_1000131A8((uint64_t)v4, &qword_10012C160);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t TableBuilder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t TableBuilder.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t Module.init(_:_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_1000D6A28();
  v6 = sub_100019350(v3, v4, v5, a2);
  sub_1000059A8();
  return v6;
}

uint64_t Module.expression.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  sub_100005A18(a3, v9);
  v5 = v10;
  v6 = v11;
  v7 = sub_10000E858(v9, v10);
  sub_10001C528(v7, a1, a2, v5, v6);
  sub_10001F1F8();
  return sub_100017DA0(v9);
}

uint64_t sub_1000D5C30()
{
  uint64_t *v0;

  return Module.expression.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_1000D5C3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v8;

  v4 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v4, &v8);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  v6 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = 0x4B43454843;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v6;
  sub_100019A60(a1, inited + 72);
  sub_10001A118(inited, 32, 0xE100000000000000, a2);
  swift_setDeallocating(inited);
  return sub_1000D5D08(&qword_100129F18);
}

uint64_t sub_1000D5D08(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  sub_10001BE7C(a1);
  swift_arrayDestroy(v1 + 32, v2);
  return swift_deallocClassInstance(v1, 32, 7);
}

void sub_1000D5D50()
{
  sub_1000D5D64(&qword_10012C218, &qword_10012C220);
}

void sub_1000D5D64(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;

  v5 = (_QWORD *)*v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  *v2 = v5;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10001A720(0, v5[2] + 1, 1, v5, a1, a2);
    *v2 = v7;
  }
  sub_10001000C();
}

void sub_1000D5DBC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = sub_1000D6A34();
  *v1 = v3;
  if (!(_DWORD)v4)
    *v1 = a1(v4, *(_QWORD *)(v3 + 16) + 1, 1, v3);
  sub_10001000C();
}

uint64_t type metadata accessor for TableBuilder()
{
  return objc_opt_self(_TtC6SQLite12TableBuilder);
}

void sub_1000D5E24(uint64_t a1)
{
  sub_1000D5E38(a1);
}

void sub_1000D5E38(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (a1 + 1 > (uint64_t)(v2 >> 1))
  {
    v3 = sub_10000C0D8(v2);
    sub_10001A720(v3, v4, 1, v5, v6, v7);
    *(_QWORD *)v1 = v8;
  }
}

void sub_1000D5E78(char a1, uint64_t a2, char a3, _QWORD *a4)
{
  sub_10001A720(a1, a2, a3, a4, &qword_10012C218, &qword_10012C220);
}

char *sub_1000D5E8C(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[40 * a2] <= a3)
    return (char *)sub_10001B41C(a3, result);
  return result;
}

char *sub_1000D5EB4(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[80 * a2] <= a3)
    return (char *)sub_10001B41C(a3, result);
  return result;
}

char *sub_1000D5EDC(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[8 * a2] <= a3)
    return (char *)sub_10001B41C(a3, result);
  return result;
}

uint64_t sub_1000D5EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001BE7C(&qword_10012C140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D5F44(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v26[2];
  _QWORD v27[6];

  v27[3] = a13;
  v27[4] = a14;
  v21 = sub_10001795C(v27);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a13 - 8) + 16))(v21, a1, a13);
  sub_1000D02C0((uint64_t)v27, a2, a3, a4, a5, a6, a7, a8, (uint64_t *)v26, a9, a10, a11);
  sub_1000D5D64(&qword_100128D58, &qword_100129F18);
  v22 = *(_QWORD *)(*(_QWORD *)(a12 + 16) + 16);
  sub_1000D5E38(v22);
  v23 = *(_QWORD *)(a12 + 16);
  *(_QWORD *)(v23 + 16) = v22 + 1;
  sub_100019A48(v26, v23 + 40 * v22 + 32);
  return sub_10000E87C(v27);
}

double sub_1000D6068(uint64_t a1, uint64_t a2)
{
  double result;

  if (a2)
  {
    sub_1000133E0(a1, a2);
    *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  }
  return result;
}

uint64_t sub_1000D6094(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _UNKNOWN **v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _UNKNOWN **v33;
  Swift::String v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v44;
  uint64_t v45;
  __int128 v46[2];
  __int128 v47[2];
  _QWORD v48[5];
  _BYTE v49[192];
  _BYTE v50[40];
  _BYTE v51[40];
  _QWORD v52[5];
  _QWORD v53[6];

  v18 = a4;
  v53[3] = a7;
  v53[4] = a9;
  v19 = sub_10001795C(v53);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v19, a1, a7);
  v52[3] = a8;
  v52[4] = a10;
  v20 = sub_10001795C(v52);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 16))(v20, a3, a8);
  sub_100019A60(a2, (uint64_t)v50);
  sub_100019A60((uint64_t)v52, (uint64_t)v51);
  v21 = sub_10001BE7C(&qword_10012C138);
  inited = swift_initStackObject(v21, v49);
  *(_OWORD *)(inited + 16) = xmmword_1000F05A0;
  sub_1000D720C(v53, 0x204E474945524F46, 0xEB0000000059454BLL, (uint64_t *)(inited + 32));
  sub_100019A60((uint64_t)v50, (uint64_t)v47);
  sub_100019A60((uint64_t)v51, (uint64_t)v48);
  sub_1000D5934((uint64_t)v47, (uint64_t)v48, (uint64_t *)(inited + 72));
  sub_10000E87C(v48);
  sub_10000E87C(v47);
  if (v18 == 5)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    *(_QWORD *)&v47[0] = 0x5441445055204E4FLL;
    *((_QWORD *)&v47[0] + 1) = 0xEA00000000002045;
    v28._countAndFlagsBits = TableBuilder.Dependency.rawValue.getter(a4);
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v24 = *((_QWORD *)&v47[0] + 1);
    v23 = *(_QWORD *)&v47[0];
    v26 = sub_10001BE7C(&qword_10012BFA8);
    v27 = &protocol witness table for Expression<A>;
    v25 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)(inited + 112) = v23;
  *(_QWORD *)(inited + 120) = v24;
  *(_QWORD *)(inited + 128) = v25;
  *(_QWORD *)(inited + 136) = v26;
  *(_QWORD *)(inited + 144) = v27;
  if (a5 == 5)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    *(_QWORD *)&v47[0] = 0x54454C4544204E4FLL;
    *((_QWORD *)&v47[0] + 1) = 0xEA00000000002045;
    v34._countAndFlagsBits = TableBuilder.Dependency.rawValue.getter(a5);
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v30 = *((_QWORD *)&v47[0] + 1);
    v29 = *(_QWORD *)&v47[0];
    v32 = sub_10001BE7C(&qword_10012BFA8);
    v33 = &protocol witness table for Expression<A>;
    v31 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)(inited + 152) = v29;
  *(_QWORD *)(inited + 160) = v30;
  v35 = 32;
  *(_QWORD *)(inited + 168) = v31;
  *(_QWORD *)(inited + 176) = v32;
  *(_QWORD *)(inited + 184) = v33;
  v36 = _swiftEmptyArrayStorage;
  do
  {
    sub_100019FCC(inited + v35, (uint64_t)v47, &qword_10012C140);
    sub_1000D5EFC((uint64_t)v47, (uint64_t)&v44);
    if (v45)
    {
      sub_100019A48(&v44, (uint64_t)v46);
      sub_100019A48(v46, (uint64_t)&v44);
      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      {
        sub_10001A720(0, v36[2] + 1, 1, v36, &qword_100128D58, &qword_100129F18);
        v36 = v39;
      }
      v38 = v36[2];
      v37 = v36[3];
      if (v38 >= v37 >> 1)
      {
        sub_10001A720(v37 > 1, v38 + 1, 1, v36, &qword_100128D58, &qword_100129F18);
        v36 = v40;
      }
      v36[2] = v38 + 1;
      sub_100019A48(&v44, (uint64_t)&v36[5 * v38 + 4]);
    }
    else
    {
      sub_1000131A8((uint64_t)&v44, &qword_10012C140);
    }
    v35 += 40;
  }
  while (v35 != 192);
  swift_bridgeObjectRelease();
  sub_10001A118((uint64_t)v36, 32, 0xE100000000000000, (uint64_t *)v47);
  swift_bridgeObjectRelease();
  sub_1000D5D64(&qword_100128D58, &qword_100129F18);
  v41 = *(_QWORD *)(*(_QWORD *)(a6 + 16) + 16);
  sub_1000D5E38(v41);
  v42 = *(_QWORD *)(a6 + 16);
  *(_QWORD *)(v42 + 16) = v41 + 1;
  sub_100019A48(v47, v42 + 40 * v41 + 32);
  sub_1000131A8((uint64_t)v50, &qword_10012C160);
  sub_10000E87C(v53);
  return sub_10000E87C(v52);
}

unint64_t sub_1000D64A0()
{
  unint64_t result;

  result = qword_10012C168;
  if (!qword_10012C168)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TableBuilder.Dependency, &type metadata for TableBuilder.Dependency);
    atomic_store(result, (unint64_t *)&qword_10012C168);
  }
  return result;
}

unint64_t sub_1000D64E0()
{
  unint64_t result;

  result = qword_10012C170;
  if (!qword_10012C170)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PrimaryKey, &type metadata for PrimaryKey);
    atomic_store(result, (unint64_t *)&qword_10012C170);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TableBuilder.Dependency(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TableBuilder.Dependency(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000D65F0 + 4 * byte_1000F246A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000D6624 + 4 * byte_1000F2465[v4]))();
}

uint64_t sub_1000D6624(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D662C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D6634);
  return result;
}

uint64_t sub_1000D6640(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D6648);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000D664C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D6654(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for TableBuilder.Dependency()
{
  sub_1000059CC();
}

uint64_t storeEnumTagSinglePayload for PrimaryKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000D66B8 + 4 * byte_1000F2474[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D66EC + 4 * byte_1000F246F[v4]))();
}

uint64_t sub_1000D66EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D66F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D66FCLL);
  return result;
}

uint64_t sub_1000D6708(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D6710);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000D6714(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D671C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PrimaryKey()
{
  sub_1000059CC();
}

void type metadata accessor for Module()
{
  sub_1000059CC();
}

unint64_t sub_1000D6740()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100129568;
  if (!qword_100129568)
  {
    v1 = sub_100025A6C((uint64_t *)&unk_10012AD80);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100129568);
  }
  return result;
}

uint64_t sub_1000D6784(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1000D67A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1000D5F44(a1, a2, a3, 2u, 1, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

double sub_1000D67AC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000D6068(v1, v0);
}

double sub_1000D67CC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000D6068(v0, v1);
}

uint64_t sub_1000D67DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for Expression(0, v4, a3, a4);
}

uint64_t sub_1000D67E8()
{
  uint64_t v0;

  return v0 - 168;
}

uint64_t sub_1000D6814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for Expression(0, v4, a3, a4);
}

uint64_t sub_1000D6820()
{
  uint64_t v0;

  return type metadata accessor for Optional(255, v0);
}

_QWORD *sub_1000D682C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v37 - 128) = a1;
  *(_QWORD *)(v37 - 120) = v31;
  *(_QWORD *)(v37 - 152) = v35;
  *(_QWORD *)(v37 - 144) = v33;
  *(_QWORD *)(v37 - 136) = v32;
  v38 = *(_QWORD *)(v36 + 8);
  a30 = v34;
  a31 = v38;
  return sub_10001795C(&a27);
}

void sub_1000D6888(uint64_t a1)
{
  uint64_t *v1;

  sub_1000131A8(a1, v1);
}

uint64_t sub_1000D6890()
{
  uint64_t v0;

  return type metadata accessor for Optional(255, v0);
}

void sub_1000D68BC()
{
  uint64_t v0;

  sub_1000D5E38(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16));
}

void sub_1000D68D4(uint64_t a1)
{
  uint64_t *v1;

  sub_1000131A8(a1, v1);
}

double sub_1000D68DC()
{
  return 0.0;
}

void sub_1000D68F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16) = v1 + 1;
}

uint64_t sub_1000D690C()
{
  uint64_t v0;

  return v0 - 112;
}

uint64_t sub_1000D6928()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100019350(34, 0xE100000000000000, v1, v0);
}

uint64_t sub_1000D693C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100019350(34, 0xE100000000000000, v1, v0);
}

_QWORD *sub_1000D6950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *(_QWORD *)(v35 + 8);
  a33 = v34;
  a34 = v36;
  return sub_10001795C(&a30);
}

_QWORD *sub_1000D6960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *(_QWORD *)(v33 + 8);
  a31 = v32;
  a32 = v34;
  return sub_10001795C(&a28);
}

uint64_t sub_1000D6970()
{
  uint64_t v0;

  return v0 - 104;
}

uint64_t sub_1000D6988()
{
  uint64_t v0;

  return sub_1000D0768(v0 - 128);
}

uint64_t sub_1000D6998()
{
  uint64_t v0;

  return v0 - 168;
}

double sub_1000D69A8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000D6068(v1, v0);
}

double sub_1000D69B8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000D6068(v0, v1);
}

uint64_t sub_1000D69C8(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_1000D69D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 128) = result;
  *(_QWORD *)(v5 - 120) = v2;
  *(_QWORD *)(v5 - 152) = v1;
  *(_QWORD *)(v5 - 144) = v4;
  *(_QWORD *)(v5 - 136) = v3;
  return result;
}

uint64_t sub_1000D69E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void sub_1000D69F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1000131A8((uint64_t)va, a2);
}

uint64_t sub_1000D69F8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  return sub_1000D5F44(a1, a2, v14, a4, 1, 0, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1000D6A18()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_1000D6A28()
{
  return 34;
}

uint64_t sub_1000D6A34()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000D6A3C(uint64_t a1)
{
  uint64_t v1;

  return swift_initStackObject(a1, v1 - 240);
}

uint64_t sub_1000D6A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000D6A4C()
{
  uint64_t v0;

  return sub_1000D0768(v0 - 128);
}

uint64_t sub_1000D6A58()
{
  uint64_t v0;

  return sub_1000D0768(v0 - 128);
}

uint64_t sub_1000D6A64@<X0>(uint64_t a1@<X8>, __int128 a2)
{
  return sub_100019A48(&a2, a1 + 32);
}

uint64_t sub_1000D6A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int128 a14)
{
  return sub_100019A48(&a14, (uint64_t)&a9);
}

_QWORD *sub_1000D6A7C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  a20 = v21;
  a21 = a1;
  return sub_10001795C(&a17);
}

uint64_t sub_1000D6A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  return sub_1000D5EFC((uint64_t)&a19, (uint64_t)&a9);
}

uint64_t sub_1000D6AA8()
{
  uint64_t v0;

  return type metadata accessor for Optional(255, v0);
}

void sub_1000D6AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t *v11;
  va_list va;

  va_start(va, a11);
  sub_100019FCC(a1, (uint64_t)va, v11);
}

double sub_1000D6AC0()
{
  return 0.0;
}

double sub_1000D6AD4()
{
  return 0.0;
}

uint64_t sub_1000D6AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return type metadata accessor for Expression(0, a8, a3, a4);
}

uint64_t sub_1000D6AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return type metadata accessor for Optional(0, a8);
}

uint64_t sub_1000D6B00()
{
  return 0x5845444E49;
}

void sub_1000D6B28(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100019FCC(a1, a2, v2);
}

uint64_t sub_1000D6B30()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_1000D6B3C(uint64_t *a1)
{
  return sub_1000D5D08(a1);
}

uint64_t sub_1000D6B44()
{
  uint64_t v0;

  return swift_setDeallocating(v0);
}

void sub_1000D6B4C()
{
  uint64_t *v0;
  uint64_t *v1;

  sub_1000D5D64(v0, v1);
}

uint64_t static Table.identifier.getter()
{
  return 0x454C424154;
}

Swift::String __swiftcall Blob.toHex()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  Swift::String result;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v3 = v0;
    v27 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10001573C();
    v2 = _swiftEmptyArrayStorage;
    v4 = sub_1000D70F8();
    v5 = 0;
    do
    {
      v6 = *(unsigned __int8 *)(v3 + v5 + 32);
      if (v6 >= 0x10)
        v7 = 0;
      else
        v7 = 48;
      if (v6 >= 0x10)
        v8 = 0xE000000000000000;
      else
        v8 = 0xE100000000000000;
      LOBYTE(v25) = *(_BYTE *)(v3 + v5 + 32);
      v9 = String.init<A>(_:radix:uppercase:)(&v25, 16, 0, &type metadata for UInt8, v4);
      v11 = v10;
      v25 = (_QWORD *)v7;
      v26 = v8;
      swift_bridgeObjectRetain();
      v12._countAndFlagsBits = v9;
      v12._object = v11;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v11);
      v13 = v25;
      v14 = v26;
      v27 = v2;
      v15 = v2[2];
      if (v15 >= v2[3] >> 1)
      {
        sub_10001573C();
        v2 = v27;
      }
      ++v5;
      v2[2] = v15 + 1;
      v16 = &v2[2 * v15];
      v16[4] = v13;
      v16[5] = v14;
    }
    while (v1 != v5);
    swift_bridgeObjectRelease(v3);
  }
  v25 = v2;
  v17 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
  v18 = sub_1000D6740();
  v19 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v17, v18);
  v21 = v20;
  swift_bridgeObjectRelease(v2);
  v22 = v19;
  v23 = v21;
  result._object = v23;
  result._countAndFlagsBits = v22;
  return result;
}

uint64_t Blob.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0 = Blob.toHex()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 39;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 10104;
}

uint64_t sub_1000D6DA8()
{
  return Blob.description.getter();
}

uint64_t sub_1000D6DB0(_QWORD *a1, _QWORD *a2)
{
  return == infix(_:_:)(*a1, *a2);
}

BOOL sub_1000D6DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (unsigned __int8 *)(a1 + 33);
  v6 = (unsigned __int8 *)(a2 + 33);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

void sub_1000D6E34()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000D6FB4();
  *v0 = v1;
}

char *sub_1000D6E68(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_1000D6EB8(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_1000D6E84()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10000577C();
  *v0 = v1;
}

char *sub_1000D6EB8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001BE7C(&qword_100128D08);
    v11 = (char *)swift_allocObject(v10, 80 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    sub_1000D5EB4((char *)(a4 + 32), v8, v11 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v11 + 32);
  }
  swift_release();
  return v11;
}

void sub_1000D6FB4()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;

  sub_1000189B0();
  if ((v5 & 1) != 0)
  {
    sub_100018654();
    if (v7 != v8)
    {
      if (v6 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      sub_1000158CC();
    }
  }
  else
  {
    v6 = v3;
  }
  v9 = *(_QWORD *)(v0 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(v0 + 16);
  else
    v10 = v6;
  if (v10)
  {
    v11 = sub_10001BE7C(v4);
    v12 = (_QWORD *)sub_1000100C8(v11, 8 * v10 + 32);
    v13 = j__malloc_size(v12);
    v12[2] = v9;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 8);
  }
  if ((v2 & 1) != 0)
  {
    sub_10001AD68();
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10001BE7C(v1);
    sub_10001AF9C();
  }
  sub_10001BFF8();
  sub_1000110FC();
}

void _s6SQLite4BlobV5bytes6lengthACSV_SitcfC_0(const void *a1, int64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2)
  {
    if (a2 <= 0)
    {
      v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      v4 = sub_10001BE7C(&qword_100128638);
      v5 = (_QWORD *)sub_1000100C8(v4, a2 + 32);
      v6 = j__malloc_size(v5);
      v5[2] = a2;
      v5[3] = 2 * v6 - 64;
    }
    memcpy(v5 + 4, a1, a2);
  }
  sub_10001000C();
}

unint64_t sub_1000D70F8()
{
  unint64_t result;

  result = qword_10012C238;
  if (!qword_10012C238)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_10012C238);
  }
  return result;
}

ValueMetadata *type metadata accessor for Blob()
{
  return &type metadata for Blob;
}

uint64_t sub_1000D7144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = a2;
  v18 = a3;
  swift_bridgeObjectRetain();
  sub_10001A844(32);
  v6 = v17;
  v7 = v18;
  sub_10001A118(a1, 8236, 0xE200000000000000, &v17);
  v8 = v19;
  v9 = v20;
  v10 = sub_10000E858(&v17, v19);
  v11 = sub_10001C430((uint64_t)v10, v6, v7, v8, v9);
  v13 = v12;
  v15 = v14;
  sub_10000E87C(&v17);
  swift_bridgeObjectRelease();
  result = sub_10001BE7C(&qword_10012BFA8);
  a4[3] = result;
  a4[4] = (uint64_t)&protocol witness table for Expression<A>;
  *a4 = v11;
  a4[1] = v13;
  a4[2] = v15;
  return result;
}

uint64_t sub_1000D720C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  uint64_t v16;

  sub_100018AE0((uint64_t)a1, a2, a3);
  sub_10001A844(32);
  v6 = a1[3];
  v7 = a1[4];
  v8 = sub_10000E858(a1, v6);
  v9 = sub_10001C430((uint64_t)v8, v15, v16, v6, v7);
  v11 = v10;
  v13 = v12;
  swift_bridgeObjectRelease();
  result = sub_10001BE7C(&qword_10012BFA8);
  a4[3] = result;
  a4[4] = (uint64_t)&protocol witness table for Expression<A>;
  *a4 = v9;
  a4[1] = v11;
  a4[2] = v13;
  return result;
}

uint64_t sub_1000D72B0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;

  sub_100018AE0((uint64_t)a1, a2, a3);
  sub_10001A844(40);
  sub_10000E858(a1, a1[3]);
  v4 = sub_100017830();
  v6 = v5;
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_10001A844(41);
  v8 = sub_100017830();
  sub_10001E2F0(v8, v9);
  return Int64.datatypeValue.getter();
}

uint64_t * infix(_:_:)()
{
  return 42;
}

void sub_1000D7388()
{
  qword_10012D640 = -1;
}

uint64_t sub_1000D7398(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v16;

  v12 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v12, &v16);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  sub_1000132C4(a1, inited + 32);
  sub_1000132C4(a2, inited + 72);
  v14 = sub_1000D7464(inited, a3, a4, a5, a6);
  swift_setDeallocating(inited);
  sub_10001E778();
  return v14;
}

uint64_t sub_1000D7464(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _UNKNOWN **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v9 = type metadata accessor for Expression(0, a5, a3, (uint64_t)a4);
  v21 = 32;
  v22 = 0xE100000000000000;
  v10._countAndFlagsBits = a3;
  v10._object = a4;
  String.append(_:)(v10);
  sub_10001A844(32);
  sub_10001A118(a1, 32, 0xE100000000000000, &v21);
  swift_bridgeObjectRelease();
  v11 = v24;
  v12 = v25;
  sub_10000E858(&v21, v24);
  v20[0] = ((uint64_t (*)(uint64_t, _UNKNOWN **))v12[1])(v11, v12);
  v20[1] = v13;
  v20[2] = v14;
  v15 = sub_10001BE7C(&qword_10012BFA8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v9);
  v17 = sub_10001C2FC(&qword_10012C260, &qword_10012BFA8, (uint64_t)&protocol conformance descriptor for Expression<A>);
  ExpressionType.init<A>(_:)((uint64_t)v20, v9, v15, WitnessTable, v17);
  sub_10000E87C(&v21);
  v18 = v26;
  if ((a2 & 1) != 0)
  {
    v24 = v9;
    v25 = &protocol witness table for Expression<A>;
    v21 = v26;
    v22 = v27;
    v23 = v28;
    v18 = sub_1000D72B0(&v21, 0, 0xE000000000000000);
    sub_10000E87C(&v21);
  }
  return v18;
}

uint64_t sub_1000D75EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[5];

  sub_10001BE34(a1, (uint64_t)&v25);
  if (v26)
  {
    sub_100019A48(&v25, (uint64_t)v27);
    sub_1000132C4((uint64_t)v27, (uint64_t)&v25);
    v1 = sub_10001BE7C((uint64_t *)&unk_10012A020);
    if (sub_10001AD78((uint64_t)&v21, v2, v3, (uint64_t)&type metadata for Blob, v4, v5, v6, v7, v19, v21, v22, v23))
    {
      v14 = v21;
      v23 = 10104;
      v24 = 0xE200000000000000;
      v15 = Blob.toHex()();
      String.append(_:)(v15);
      sub_1000100D0();
      sub_10001A844(39);
      swift_bridgeObjectRelease(v14);
      v16 = v23;
    }
    else
    {
      if (!sub_10001AD78((uint64_t)&v23, v8, v9, (uint64_t)&type metadata for String, v10, v11, v12, v13, v20, v21, v22, v23))
      {
        sub_100019A48(&v25, (uint64_t)&v23);
        v21 = 0;
        v22 = 0xE000000000000000;
        _print_unlocked<A, B>(_:_:)(&v23, &v21, v1, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v16 = v21;
        sub_10000E87C(&v23);
        v17 = (__int128 *)v27;
        goto LABEL_9;
      }
      v16 = sub_100019350(39, 0xE100000000000000, v23, v24);
      sub_1000100D0();
    }
    sub_10000E87C(v27);
    v17 = &v25;
LABEL_9:
    sub_10000E87C(v17);
    return v16;
  }
  sub_1000D78FC((uint64_t)&v25);
  return 1280070990;
}

uint64_t sub_1000D7750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE v18[40];

  v8 = sub_10001B18C(0, a3);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v18[-v10 - 8];
  v12 = sub_10001B18C(0, a3);
  __chkstk_darwin(v12);
  v14 = &v18[-v13 - 8];
  sub_1000132C4(a1, (uint64_t)v18);
  v15 = sub_10001BE7C((uint64_t *)&unk_10012A020);
  swift_dynamicCast(v11, v18, v15, v8, 7);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(a3 + 48))(v11, a2, a3);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return swift_dynamicCast(a4, v14, v12, a2, 7);
}

uint64_t sub_1000D7898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD v8[5];

  result = sub_10001BE34(a1, (uint64_t)v8);
  if (v8[3])
  {
    sub_1000D7750((uint64_t)v8, a2, a3, a4);
    return sub_10000E87C(v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D78FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001BE7C(&qword_100129578);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D793C(uint64_t a1, uint64_t a2, char a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v9 = sub_1000D79BC(a4);
  v11 = sub_1000D7398(a1, a2, a3, v9, v10, a5);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000D79BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D79E4 + 4 * byte_1000F266A[a1]))(43, 0xE100000000000000);
}

uint64_t sub_1000D79E4()
{
  return 45;
}

uint64_t sub_1000D79EC()
{
  return 21071;
}

uint64_t sub_1000D79F8()
{
  return 4476481;
}

uint64_t sub_1000D7A08()
{
  return 542396238;
}

uint64_t sub_1000D7A18()
{
  return 42;
}

uint64_t sub_1000D7A20()
{
  return 47;
}

uint64_t sub_1000D7A28()
{
  return 37;
}

uint64_t sub_1000D7A30()
{
  return 15420;
}

uint64_t sub_1000D7A3C()
{
  return 15934;
}

uint64_t sub_1000D7A48()
{
  return 38;
}

uint64_t sub_1000D7A50()
{
  return 124;
}

uint64_t sub_1000D7A58()
{
  return 126;
}

uint64_t sub_1000D7A60()
{
  return 61;
}

uint64_t sub_1000D7A68()
{
  return 15649;
}

uint64_t sub_1000D7A74()
{
  return 62;
}

uint64_t sub_1000D7A7C()
{
  return 60;
}

uint64_t sub_1000D7A84()
{
  return 15678;
}

uint64_t sub_1000D7A90()
{
  return 15676;
}

uint64_t sub_1000D7A9C()
{
  return 31868;
}

uint64_t sub_1000D7AA8(_QWORD *a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000D79BC(a2);
  v5 = sub_1000D72B0(a1, v3, v4);
  swift_bridgeObjectRelease();
  return v5;
}

void + infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DB844();
  sub_1000DB838(v0, v1, v2, v3, v4, v5, (uint64_t)&qword_100128D00);
  sub_100017714();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DB844();
  sub_1000DB838(v0, v1, v2, v3, v4, v5, (uint64_t)&qword_100128D30);
  sub_100017714();
}

#error "1000D7B60: call analysis failed (funcsize=10)"

#error "1000D7B94: call analysis failed (funcsize=10)"

void sub_1000D7BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_UNKNOWN **a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,_UNKNOWN **a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 *v75;

  sub_100017F48();
  a49 = v51;
  a50 = v52;
  v54 = v53;
  v56 = v55;
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v64 = v63;
  v66 = v65;
  v67 = a51;
  a36 = sub_1000DB810(v65, v63, v61, v59, v57, v55, v68);
  a37 = &protocol witness table for Expression<A>;
  a33 = v66;
  a34 = v64;
  a35 = v62;
  a31 = sub_10001BE7C(v54);
  a32 = &protocol witness table for Expression<A>;
  a28 = v60;
  a29 = v58;
  a30 = v56;
  v69 = sub_10001BE7C(&qword_100128D58);
  v75 = (__n128 *)sub_1000DB73C(v69, v70, v71, v72, v73, v74);
  sub_100019B9C(v75, (__n128)xmmword_1000EFD90);
  sub_1000132C4((uint64_t)&a28, (uint64_t)&v75[4].n128_i64[1]);
  swift_bridgeObjectRetain();
  sub_10000C020();
  sub_10000C030();
  sub_10000BFF4();
  sub_10001A118((uint64_t)v75, v67, 0xE400000000000000, &a9);
  sub_10001B198(&a9);
  sub_1000DB7C0();
  sub_10001DA10(&a9);
  sub_100019324();
  sub_1000101FC();
  sub_100018640();
  sub_10000585C();
  sub_10000E87C(&a28);
  sub_10000E87C(&a33);
  sub_10001E050();
  sub_10001AF80();
}

#error "1000D7D40: call analysis failed (funcsize=60)"

void + infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_BYTE *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_1000D7DD4(a1, a2, a3, a4, a5, (uint64_t)&qword_100128D00, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_1000D7DD4(a1, a2, a3, a4, a5, (uint64_t)&qword_100128D30, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_1000D7DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_BYTE *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 *v68;
  uint64_t v69;

  sub_10001F1B0();
  a47 = v53;
  a48 = v54;
  sub_10001F214();
  a37 = sub_1000DB7A4(v55, v56, v57, v58, v59, v60);
  a38 = &protocol witness table for Expression<A>;
  a34 = v52;
  a35 = v51;
  a36 = v50;
  a32 = type metadata for String;
  a33 = &protocol witness table for String;
  a29 = v49;
  a30 = v48;
  v61 = sub_10001BE7C(&qword_100128D58);
  v68 = (__n128 *)sub_10001F124(v61, v62, v63, v64, v65, v66, v67);
  sub_100018630(v68, (__n128)xmmword_1000EFD90);
  sub_10001008C();
  sub_10000C030();
  sub_10000BFF4();
  v69 = sub_1000101B0();
  sub_1000DB670(v69);
  sub_10001B198(&a10);
  sub_10001DA10(&a10);
  sub_100019324();
  sub_1000101FC();
  sub_100018640();
  sub_10000585C();
  sub_10000E87C(&a29);
  sub_10000E87C(&a34);
  sub_10001E050();
  sub_1000134DC();
}

void + infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,_BYTE *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_1000D7EB8(a1, a2, a3, a4, a5, (uint64_t)&qword_100128D00, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_1000D7EB8(a1, a2, a3, a4, a5, (uint64_t)&qword_100128D30, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_1000D7EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,_BYTE *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 *v66;
  uint64_t v67;

  sub_10001F1B0();
  a47 = v48;
  a48 = v49;
  v51 = v50;
  v53 = v52;
  v55 = v54;
  a37 = type metadata for String;
  a38 = &protocol witness table for String;
  a34 = v56;
  a35 = v57;
  a32 = sub_1000DB7A4(v56, v57, v54, v52, v50, v58);
  a33 = &protocol witness table for Expression<A>;
  a29 = v55;
  a30 = v53;
  a31 = v51;
  v59 = sub_10001BE7C(&qword_100128D58);
  v66 = (__n128 *)sub_10001F124(v59, v60, v61, v62, v63, v64, v65);
  sub_100018630(v66, (__n128)xmmword_1000EFD90);
  sub_10001008C();
  sub_10000C030();
  sub_10000BFF4();
  v67 = sub_1000101B0();
  sub_1000DB670(v67);
  sub_10001B198(&a10);
  sub_10001DA10(&a10);
  sub_100019324();
  sub_1000101FC();
  sub_100018640();
  sub_10000585C();
  sub_10000E87C(&a29);
  sub_10000E87C(&a34);
  sub_10001E050();
  sub_1000134DC();
}

void + infix<A>(_:_:)()
{
  sub_1000DB6EC();
  sub_1000D8160();
  sub_100017714();
}

{
  sub_1000DB6EC();
  sub_1000D820C();
  sub_100017714();
}

{
  sub_1000DB6EC();
  sub_1000D82C4();
  sub_100017714();
}

{
  sub_1000DB6EC();
  sub_1000D837C();
  sub_100017714();
}

uint64_t + infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D8404(a1, a2, a3, a4, a5, a6, a7, 0);
}

{
  return sub_1000D8468(a1, a2, a3, a4, a5, a6, a7, 0);
}

void + infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1000D84D4(a1, a2, a3, a4, a5, a6, a7, 0);
}

{
  sub_1000D8548(a1, a2, a3, a4, a5, a6, a7, 0);
}

void - infix<A>(_:_:)()
{
  sub_100019DD0();
  sub_1000D8160();
  sub_100017714();
}

{
  sub_100019DD0();
  sub_1000D820C();
  sub_100017714();
}

{
  sub_100019DD0();
  sub_1000D82C4();
  sub_100017714();
}

{
  sub_100019DD0();
  sub_1000D837C();
  sub_100017714();
}

uint64_t - infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D8404(a1, a2, a3, a4, a5, a6, a7, 1);
}

{
  return sub_1000D8468(a1, a2, a3, a4, a5, a6, a7, 1);
}

void - infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1000D84D4(a1, a2, a3, a4, a5, a6, a7, 1);
}

{
  sub_1000D8548(a1, a2, a3, a4, a5, a6, a7, 1);
}

void * infix<A>(_:_:)()
{
  sub_100019088();
  sub_1000D8160();
  sub_100017714();
}

{
  sub_100019088();
  sub_1000D820C();
  sub_100017714();
}

{
  sub_100019088();
  sub_1000D82C4();
  sub_100017714();
}

{
  sub_100019088();
  sub_1000D837C();
  sub_100017714();
}

uint64_t * infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D8404(a1, a2, a3, a4, a5, a6, a7, 5);
}

{
  return sub_1000D8468(a1, a2, a3, a4, a5, a6, a7, 5);
}

void * infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1000D84D4(a1, a2, a3, a4, a5, a6, a7, 5);
}

{
  sub_1000D8548(a1, a2, a3, a4, a5, a6, a7, 5);
}

void / infix<A>(_:_:)()
{
  sub_10001F044();
  sub_1000D8160();
  sub_100017714();
}

{
  sub_10001F044();
  sub_1000D820C();
  sub_100017714();
}

{
  sub_10001F044();
  sub_1000D82C4();
  sub_100017714();
}

{
  sub_10001F044();
  sub_1000D837C();
  sub_100017714();
}

#error "1000D81C8: call analysis failed (funcsize=35)"

#error "1000D8280: call analysis failed (funcsize=38)"

#error "1000D8338: call analysis failed (funcsize=38)"

#error "1000D83D4: call analysis failed (funcsize=31)"

uint64_t / infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D8404(a1, a2, a3, a4, a5, a6, a7, 6);
}

{
  return sub_1000D8468(a1, a2, a3, a4, a5, a6, a7, 6);
}

#error "1000D8428: call analysis failed (funcsize=22)"

#error "1000D8494: call analysis failed (funcsize=24)"

void / infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1000D84D4(a1, a2, a3, a4, a5, a6, a7, 6);
}

{
  sub_1000D8548(a1, a2, a3, a4, a5, a6, a7, 6);
}

void sub_1000D84D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[5];

  v11 = sub_10001B538(a1, a2, a3, a4, a5, a6, a7, a8, v24[0], v24[1], v24[2], v25, v26, v27[0], v27[1], v27[2], v27[3], v27[4]);
  v12 = sub_1000DB50C((uint64_t)v11);
  v25 = sub_1000134D0(v12, v13, v14, v15);
  sub_10000BFF4();
  v16 = sub_100013E10();
  sub_10001C26C(v16, v17, v18, v19, v20, v21, v22, v23, v10, v9, v8, v25, (uint64_t)&protocol witness table for Expression<A>, v27[0]);
  sub_10000E87C(v24);
  sub_10001AD88(v27);
  sub_10001BF40();
}

void sub_1000D8548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[5];

  v11 = sub_10001B538(a1, a2, a3, a4, a5, a6, a7, a8, v24[0], v24[1], v24[2], v25, v26, v27[0], v27[1], v27[2], v27[3], v27[4]);
  sub_1000DB50C((uint64_t)v11);
  v12 = sub_100011220();
  v25 = sub_1000134D0(v12, v13, v14, v15);
  sub_10000BFF4();
  v16 = sub_100013E10();
  sub_10001C26C(v16, v17, v18, v19, v20, v21, v22, v23, v10, v9, v8, v25, (uint64_t)&protocol witness table for Expression<A>, v27[0]);
  sub_10000E87C(v24);
  sub_10001AD88(v27);
  sub_10001BF40();
}

void - prefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _UNKNOWN **v11;

  v10 = sub_1000DB630(a1, a2, a3, a4);
  v11 = &protocol witness table for Expression<A>;
  v7 = v6;
  v8 = v5;
  v9 = v4;
  sub_100013E10();
  sub_1000101B0();
  sub_1000D7AA8(&v7, 1u);
  sub_10001AD88(&v7);
  sub_100013618();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _UNKNOWN **v15;

  v7 = sub_1000DB6AC(a1, a2, a3, a4);
  v14 = sub_1000DB784(v7, v8, v9, v10);
  v15 = &protocol witness table for Expression<A>;
  v11 = v6;
  v12 = v5;
  v13 = v4;
  sub_1000101B0();
  sub_10000EC68();
  sub_1000D7AA8(&v11, 1u);
  sub_10001AD88(&v11);
  sub_100013618();
}

void % infix<A>(_:_:)()
{
  sub_10000FE9C();
  sub_100017714();
}

{
  sub_1000DB72C();
  sub_100017714();
}

{
  sub_1000DB734();
  sub_100017714();
}

{
  sub_1000DB724();
  sub_100017714();
}

uint64_t % infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D8B80(a1, a2, a3, a4, a5, a6, 7);
}

{
  return sub_1000D8BE4(a1, a2, a3, a4, a5, a6, 7);
}

void % infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000D8C50(a1, a2, a3, a4, a5, a6, 7, a8);
}

{
  sub_1000D8CC4(a1, a2, a3, a4, a5, a6, 7, a8);
}

void << infix<A>(_:_:)()
{
  sub_10000FE9C();
  sub_100017714();
}

{
  sub_1000DB72C();
  sub_100017714();
}

{
  sub_1000DB734();
  sub_100017714();
}

{
  sub_1000DB724();
  sub_100017714();
}

uint64_t << infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D8B80(a1, a2, a3, a4, a5, a6, 8);
}

{
  return sub_1000D8BE4(a1, a2, a3, a4, a5, a6, 8);
}

void << infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000D8C50(a1, a2, a3, a4, a5, a6, 8, a8);
}

{
  sub_1000D8CC4(a1, a2, a3, a4, a5, a6, 8, a8);
}

void >> infix<A>(_:_:)()
{
  sub_10000FE9C();
  sub_100017714();
}

{
  sub_1000DB72C();
  sub_100017714();
}

{
  sub_1000DB734();
  sub_100017714();
}

{
  sub_1000DB724();
  sub_100017714();
}

uint64_t >> infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D8B80(a1, a2, a3, a4, a5, a6, 9);
}

{
  return sub_1000D8BE4(a1, a2, a3, a4, a5, a6, 9);
}

void >> infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000D8C50(a1, a2, a3, a4, a5, a6, 9, a8);
}

{
  sub_1000D8CC4(a1, a2, a3, a4, a5, a6, 9, a8);
}

void & infix<A>(_:_:)()
{
  sub_10000FE9C();
  sub_100017714();
}

{
  sub_1000DB72C();
  sub_100017714();
}

{
  sub_1000DB734();
  sub_100017714();
}

{
  sub_1000DB724();
  sub_100017714();
}

uint64_t & infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D8B80(a1, a2, a3, a4, a5, a6, 10);
}

{
  return sub_1000D8BE4(a1, a2, a3, a4, a5, a6, 10);
}

void & infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000D8C50(a1, a2, a3, a4, a5, a6, 10, a8);
}

{
  sub_1000D8CC4(a1, a2, a3, a4, a5, a6, 10, a8);
}

void | infix<A>(_:_:)()
{
  sub_10000FE9C();
  sub_100017714();
}

{
  sub_1000DB72C();
  sub_100017714();
}

{
  sub_1000DB734();
  sub_100017714();
}

{
  sub_1000DB724();
  sub_100017714();
}

#error "1000D8944: call analysis failed (funcsize=35)"

#error "1000D89FC: call analysis failed (funcsize=38)"

#error "1000D8AB4: call analysis failed (funcsize=38)"

#error "1000D8B50: call analysis failed (funcsize=31)"

uint64_t | infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000D8B80(a1, a2, a3, a4, a5, a6, 11);
}

{
  return sub_1000D8BE4(a1, a2, a3, a4, a5, a6, 11);
}

#error "1000D8BA4: call analysis failed (funcsize=22)"

#error "1000D8C10: call analysis failed (funcsize=24)"

void | infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000D8C50(a1, a2, a3, a4, a5, a6, 11, a8);
}

{
  sub_1000D8CC4(a1, a2, a3, a4, a5, a6, 11, a8);
}

void sub_1000D8C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[5];

  v11 = sub_10001B538(a1, a2, a3, a4, a5, a6, a7, a8, v24[0], v24[1], v24[2], v25, v26, v27[0], v27[1], v27[2], v27[3], v27[4]);
  v12 = sub_1000DB50C((uint64_t)v11);
  v25 = sub_1000134D0(v12, v13, v14, v15);
  sub_10000BFF4();
  v16 = sub_100013E10();
  sub_10001C26C(v16, v17, v18, v19, v20, v21, v22, v23, v10, v9, v8, v25, (uint64_t)&protocol witness table for Expression<A>, v27[0]);
  sub_10000E87C(v24);
  sub_10001AD88(v27);
  sub_10001BF40();
}

void sub_1000D8CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[5];

  v11 = sub_10001B538(a1, a2, a3, a4, a5, a6, a7, a8, v24[0], v24[1], v24[2], v25, v26, v27[0], v27[1], v27[2], v27[3], v27[4]);
  sub_1000DB50C((uint64_t)v11);
  v12 = sub_100011220();
  v25 = sub_1000134D0(v12, v13, v14, v15);
  sub_10000BFF4();
  v16 = sub_100013E10();
  sub_10001C26C(v16, v17, v18, v19, v20, v21, v22, v23, v10, v9, v8, v25, (uint64_t)&protocol witness table for Expression<A>, v27[0]);
  sub_10000E87C(v24);
  sub_10001AD88(v27);
  sub_10001BF40();
}

#error "1000D8D64: call analysis failed (funcsize=11)"

void ~ prefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _UNKNOWN **v11;

  v10 = sub_1000DB630(a1, a2, a3, a4);
  v11 = &protocol witness table for Expression<A>;
  v7 = v6;
  v8 = v5;
  v9 = v4;
  sub_100013E10();
  sub_1000101B0();
  sub_1000D7AA8(&v7, 0xCu);
  sub_10001AD88(&v7);
  sub_100013618();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _UNKNOWN **v15;

  v7 = sub_1000DB6AC(a1, a2, a3, a4);
  v14 = sub_1000DB784(v7, v8, v9, v10);
  v15 = &protocol witness table for Expression<A>;
  v11 = v6;
  v12 = v5;
  v13 = v4;
  sub_1000101B0();
  sub_10000EC68();
  sub_1000D7AA8(&v11, 0xCu);
  sub_10001AD88(&v11);
  sub_100013618();
}

#error "1000D8E04: call analysis failed (funcsize=12)"

void sub_1000D8E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t (*a25)(void),uint64_t (*a26)(uint64_t),uint64_t (*a27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),void (*a28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  sub_1000DB768();
  v32 = v31;
  v47 = v33;
  v35 = v34;
  v37 = v36;
  sub_10006B24C();
  v38 = a25();
  v46 = a26(v38);
  v40 = v39;
  v42 = v41;
  sub_100007398();
  sub_10000E038();
  v43 = a27(v30, v29, v28, v37, v35, v47, v32);
  a28(v46, v40, v42, v43, v44, v45, v32);
  sub_1000059A8();
  sub_10000EC84();
  sub_1000101FC();
  sub_1000100D0();
  sub_1000DB6A0();
  sub_10001080C();
}

#error "1000D8F84: call analysis failed (funcsize=12)"

#error "1000D8FBC: call analysis failed (funcsize=11)"

void ^ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1000D9040(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
  sub_100017714();
}

{
  sub_1000D9040(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
  sub_100017714();
}

{
  sub_1000D9040(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
  sub_100017714();
}

{
  sub_1000D9040(a1, a2, a3, a4, a5, a6, & infix<A>(_:_:), ~ prefix<A>(_:), | infix<A>(_:_:), & infix<A>(_:_:));
  sub_100017714();
}

#error "1000D9070: call analysis failed (funcsize=25)"

#error "1000D9180: call analysis failed (funcsize=7)"

#error "1000D919C: call analysis failed (funcsize=7)"

#error "1000D91B8: call analysis failed (funcsize=7)"

void === infix<A>(_:_:)()
{
  sub_1000134F4();
  sub_100008744();
  sub_10001B3F4();
}

{
  sub_1000134F4();
  sub_1000D92DC();
  sub_10001B3F4();
}

{
  sub_1000134F4();
  sub_1000D93D0();
  sub_10001B3F4();
}

{
  sub_1000134F4();
  sub_1000D94C4();
  sub_10001B3F4();
}

{
  sub_10001EF98();
  sub_100013224();
  sub_100017714();
}

#error "1000D9260: call analysis failed (funcsize=7)"

#error "1000D927C: call analysis failed (funcsize=7)"

#error "1000D9298: call analysis failed (funcsize=7)"

void != infix<A>(_:_:)()
{
  sub_100016690();
  sub_100008744();
  sub_10001B3F4();
}

{
  sub_100016690();
  sub_1000D92DC();
  sub_10001B3F4();
}

{
  sub_100016690();
  sub_1000D93D0();
  sub_10001B3F4();
}

{
  sub_100016690();
  sub_1000D94C4();
  sub_10001B3F4();
}

{
  sub_1000DB850();
  sub_100013224();
  sub_100017714();
}

#error "1000D9354: call analysis failed (funcsize=51)"

#error "1000D9448: call analysis failed (funcsize=51)"

#error "1000D9528: call analysis failed (funcsize=46)"

#error "1000D95B4: call analysis failed (funcsize=7)"

void sub_1000D95C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t WitnessTable;
  uint64_t v54;
  uint64_t v55;
  __n128 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _UNKNOWN **v69;
  _QWORD *v70;
  uint64_t v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[19];
  _QWORD v86[3];
  uint64_t v87;
  _UNKNOWN **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _UNKNOWN **v93;

  sub_1000100A8();
  v81 = v25;
  v82 = v24;
  v27 = v26;
  v29 = v28;
  v83 = v30;
  v84 = v31;
  v33 = v32;
  v34 = sub_1000DB594(0, v30, v31, v28, v26);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_10001DFB8();
  __chkstk_darwin(v36);
  v38 = (char *)&v79 - v37;
  v39 = *(_QWORD *)(v27 - 8);
  sub_100013E18();
  __chkstk_darwin(v40);
  sub_10001765C();
  v43 = v42 - v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v29, v34);
  if (sub_10001C93C((uint64_t)v38, 1, v27) == 1)
  {
    v81 = a23;
    v44 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, v34);
    v48 = sub_100019318(v44, v45, v46, v47);
    v92 = v48;
    v93 = &protocol witness table for Expression<A>;
    v89 = v33;
    v90 = v83;
    v91 = v84;
    sub_100011848();
    sub_100014360(v49, v50, v51, v52);
    v87 = v48;
    v88 = &protocol witness table for Expression<A>;
    sub_10000BFF4();
    sub_1000100E0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v48);
    v54 = swift_getWitnessTable(",g", v34);
    ExpressionType<>.init(value:)(v23, v48, WitnessTable, v54, v82, (uint64_t)v86);
    v55 = sub_10001BE7C(&qword_100128D58);
    v56 = (__n128 *)sub_1000DB79C(v55);
    v57 = sub_100019B9C(v56, (__n128)xmmword_1000EFD90);
    sub_10000EB78(v57, (uint64_t)&v56[4].n128_i64[1]);
    sub_10001A118((uint64_t)v56, a22, v81, v85);
    sub_10001B198(v85);
    sub_10001EE20();
    sub_1000DB6A0();
    sub_100018AEC(v58, v59, v60, v61, v62, v63);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100018640();
    sub_10000585C();
  }
  else
  {
    v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 32);
    v80 = v39;
    v65 = sub_100005848(v43, (uint64_t)v38, v64);
    v92 = sub_100019318(v65, v66, v67, v68);
    v93 = &protocol witness table for Expression<A>;
    v89 = v33;
    v90 = v83;
    v91 = v84;
    v69 = *(_UNKNOWN ***)(v82 + 8);
    v87 = v27;
    v88 = v69;
    v70 = sub_10001795C(v86);
    sub_100005848((uint64_t)v70, v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16));
    v71 = sub_10001BE7C(&qword_100128D58);
    v72 = (__n128 *)sub_1000DB794(v71);
    v73 = sub_100019B9C(v72, (__n128)xmmword_1000EFD90);
    sub_10000EB78(v73, (uint64_t)&v72[4].n128_i64[1]);
    sub_10000BFF4();
    sub_1000101B0();
    sub_1000DB818((uint64_t)v72, v85);
    v74 = v85[3];
    v75 = v85[4];
    v76 = sub_10001E560();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v75);
    sub_100019D20();
    sub_100018AEC((uint64_t)v76, v33, a21, v77, v78, &qword_10012C158);
    sub_10000EC84();
    sub_100007398();
    swift_setDeallocating(v72);
    sub_10001E778();
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v43, v27);
  }
  sub_10000E87C(v86);
  sub_10000E87C(&v89);
  sub_100013308();
}

#error "1000D98EC: call analysis failed (funcsize=7)"

void sub_1000D98F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  sub_10001F1B0();
  a47 = v48;
  a48 = v49;
  v56 = sub_1000110AC(v50, v51, v52, v53, v54, v55);
  v57 = sub_10000E0AC((uint64_t)v56);
  v61 = sub_100005950(v57, v58, v59, v60);
  sub_100010B48(v61, (uint64_t)&protocol witness table for Expression<A>);
  v62 = sub_10001BE7C(&qword_100128D58);
  v69 = (__n128 *)sub_10001F124(v62, v63, v64, v65, v66, v67, v68);
  sub_100018630(v69, (__n128)xmmword_1000EFD90);
  sub_1000DB7F8();
  sub_10000C030();
  sub_10000BFF4();
  sub_1000118D4(&a10);
  v70 = sub_100010068(&a10);
  v71 = sub_1000159FC(v70);
  sub_1000184F8(v71, v72, v73, v74, v75, &qword_10012C150);
  sub_10001B3E0();
  sub_1000100D0();
  sub_1000110A4();
  sub_10001A880();
  sub_10000E87C(&a29);
  sub_10001C118(&a34);
  sub_1000134DC();
}

#error "1000D99AC: call analysis failed (funcsize=7)"

void sub_1000D99B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t WitnessTable;
  uint64_t v50;
  uint64_t v51;
  __n128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  void (*v60)(uint64_t, char *, uint64_t);
  _UNKNOWN **v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[19];
  _QWORD v79[3];
  uint64_t v80;
  _UNKNOWN **v81;
  _QWORD v82[3];
  uint64_t v83;
  _UNKNOWN **v84;

  sub_1000100A8();
  v74 = v25;
  v75 = v24;
  v27 = v26;
  v29 = v28;
  v76 = v30;
  v77 = v31;
  v33 = v32;
  v34 = sub_1000DB594(0, v24, v30, v31, v28);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_10001DFB8();
  __chkstk_darwin(v36);
  v38 = (char *)&v72 - v37;
  v39 = *(_QWORD *)(v29 - 8);
  sub_100013E18();
  __chkstk_darwin(v40);
  sub_10001765C();
  v43 = v42 - v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v33, v34);
  if (sub_10001C93C((uint64_t)v38, 1, v29) == 1)
  {
    v44 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, v34);
    v48 = sub_1000187D8(v44, v45, v46, v47);
    sub_100014360(v23, 1, 1, v29);
    v83 = v48;
    v84 = &protocol witness table for Expression<A>;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v48);
    v50 = swift_getWitnessTable(",g", v34);
    ExpressionType<>.init(value:)(v23, v48, WitnessTable, v50, v27, (uint64_t)v82);
    v80 = v48;
    v81 = &protocol witness table for Expression<A>;
    sub_1000DB7CC();
    v51 = sub_10001BE7C(&qword_100128D58);
    v52 = (__n128 *)sub_1000DB79C(v51);
    v53 = sub_100019B9C(v52, (__n128)xmmword_1000EFD90);
    sub_10000EB78(v53, (uint64_t)&v52[4].n128_i64[1]);
    sub_100013E10();
    sub_1000101B0();
    sub_10001A118((uint64_t)v52, a22, a23, v78);
    sub_1000DB604();
    sub_10001EE20();
    sub_10001E050();
    sub_100018AEC(v54, v55, v56, v57, v58, v59);
    sub_10000C028();
    swift_bridgeObjectRelease();
    swift_setDeallocating(v52);
    sub_10001E778();
  }
  else
  {
    v60 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 32);
    v73 = v39;
    v60(v43, v38, v29);
    v61 = *(_UNKNOWN ***)(v27 + 8);
    v83 = v29;
    v84 = v61;
    v62 = sub_10001795C(v82);
    v63 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v39 + 16))(v62, v43, v29);
    v80 = sub_1000187D8(v63, v64, v65, v66);
    v81 = &protocol witness table for Expression<A>;
    sub_1000DB7CC();
    v67 = sub_10001BE7C(&qword_100128D58);
    v68 = (__n128 *)sub_1000DB794(v67);
    v69 = sub_100019B9C(v68, (__n128)xmmword_1000EFD90);
    sub_10000EB78(v69, (uint64_t)&v68[4].n128_i64[1]);
    sub_100013E10();
    sub_1000101B0();
    sub_1000DB818((uint64_t)v68, v78);
    sub_1000DB604();
    sub_100019D20();
    sub_100018AEC((uint64_t)v38, v34, a21, v70, v71, &qword_10012C158);
    sub_10000EC84();
    sub_100007398();
    swift_setDeallocating(v68);
    sub_10001E778();
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v43, v29);
  }
  sub_10000E87C(v79);
  sub_10000E87C(v82);
  sub_100013308();
}

void !== infix<A>(_:_:)()
{
  sub_10001E968();
  sub_100008744();
  sub_10001B3F4();
}

{
  sub_10001E968();
  sub_1000D92DC();
  sub_10001B3F4();
}

{
  sub_10001E968();
  sub_1000D93D0();
  sub_10001B3F4();
}

{
  sub_10001E968();
  sub_1000D94C4();
  sub_10001B3F4();
}

{
  sub_1000DB4D4();
  sub_100013224();
  sub_100017714();
}

#error "1000D9D3C: call analysis failed (funcsize=7)"

void sub_1000D9D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t WitnessTable;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _UNKNOWN **v64;
  _QWORD *v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[19];
  _QWORD v81[3];
  uint64_t v82;
  _UNKNOWN **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _UNKNOWN **v88;

  sub_1000100A8();
  v79 = v22;
  v75 = v24;
  v76 = v23;
  v26 = v25;
  v28 = v27;
  v77 = v29;
  v31 = v30;
  v78 = a21;
  v32 = sub_1000DB594(0, v23, v29, v27, v25);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_10001F8BC();
  __chkstk_darwin(v34);
  v36 = (char *)&v74 - v35;
  v37 = *(_QWORD *)(v26 - 8);
  sub_100013E18();
  __chkstk_darwin(v38);
  sub_10001765C();
  v41 = v40 - v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v28, v32);
  if (sub_10001C93C((uint64_t)v36, 1, v26) == 1)
  {
    v42 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v36, v32);
    v46 = sub_1000187D8(v42, v43, v44, v45);
    v87 = v46;
    v88 = &protocol witness table for Expression<A>;
    v84 = v31;
    v85 = v76;
    v86 = v77;
    sub_100014360(v21, 1, 1, v26);
    v82 = v46;
    v83 = &protocol witness table for Expression<A>;
    sub_10000C020();
    sub_1000100E0();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v46);
    v48 = swift_getWitnessTable(",g", v32);
    ExpressionType<>.init(value:)(v21, v46, WitnessTable, v48, v75, (uint64_t)v81);
    v49 = sub_10001BE7C(&qword_100128D58);
    v50 = (__n128 *)sub_1000DB79C(v49);
    v51 = sub_100019B9C(v50, (__n128)xmmword_1000EFD90);
    sub_10000EB78(v51, (uint64_t)&v50[4].n128_i64[1]);
    sub_10001A8F8((uint64_t)v50, v80);
    v52 = sub_10001B198(v80);
    v54 = v53;
    v56 = v55;
    sub_10001EE20();
    sub_100018AEC(v52, v54, v56, v57, v58, &qword_10012C158);
    sub_10000C028();
    swift_bridgeObjectRelease();
    sub_100018640();
    sub_10000585C();
  }
  else
  {
    v74 = v37;
    sub_1000DB7E0();
    v60 = v59();
    v87 = sub_1000187D8(v60, v61, v62, v63);
    v88 = &protocol witness table for Expression<A>;
    v84 = v31;
    v85 = v76;
    v86 = v77;
    v64 = *(_UNKNOWN ***)(v75 + 8);
    v82 = v26;
    v83 = v64;
    v65 = sub_10001795C(v81);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v37 + 16))(v65, v41, v26);
    v66 = sub_10001BE7C(&qword_100128D58);
    v67 = (__n128 *)sub_1000DB794(v66);
    v68 = sub_100019B9C(v67, (__n128)xmmword_1000EFD90);
    sub_10000EB78(v68, (uint64_t)&v67[4].n128_i64[1]);
    sub_10000BFF4();
    sub_1000101B0();
    sub_10001A8F8((uint64_t)v67, v80);
    v69 = v80[3];
    v70 = v80[4];
    v71 = sub_10001E560();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v70);
    sub_100019D20();
    sub_100018AEC((uint64_t)v71, v32, v31, v72, v73, &qword_10012C158);
    sub_10000EC84();
    sub_100007398();
    sub_100018640();
    sub_10000585C();
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v41, v26);
  }
  sub_10000E87C(v81);
  sub_10000E87C(&v84);
  sub_100013308();
}

#error "1000DA064: call analysis failed (funcsize=7)"

#error "1000DA080: call analysis failed (funcsize=7)"

void sub_1000DA08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t WitnessTable;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, char *, uint64_t);
  _UNKNOWN **v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[20];
  uint64_t v77[19];
  _QWORD v78[3];
  uint64_t v79;
  _UNKNOWN **v80;
  _QWORD v81[3];
  uint64_t v82;
  _UNKNOWN **v83;

  sub_1000100A8();
  v76[5] = v22;
  v24 = v23;
  v26 = v25;
  v76[2] = v27;
  v76[3] = v28;
  v76[1] = v29;
  v31 = v30;
  v76[4] = a21;
  v32 = sub_1000DB594(0, v29, v27, v28, v25);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_10001F8BC();
  __chkstk_darwin(v34);
  v36 = (char *)v76 - v35;
  v37 = *(_QWORD *)(v26 - 8);
  sub_100013E18();
  __chkstk_darwin(v38);
  sub_10001765C();
  v41 = v40 - v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v31, v32);
  if (sub_10001C93C((uint64_t)v36, 1, v26) == 1)
  {
    v42 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v36, v32);
    v46 = sub_100005850(v42, v43, v44, v45);
    sub_100014360(v21, 1, 1, v26);
    v82 = v46;
    v83 = &protocol witness table for Expression<A>;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v46);
    v48 = swift_getWitnessTable(",g", v32);
    ExpressionType<>.init(value:)(v21, v46, WitnessTable, v48, v24, (uint64_t)v81);
    v79 = v46;
    v80 = &protocol witness table for Expression<A>;
    sub_100005864();
    v49 = sub_10001BE7C(&qword_100128D58);
    v50 = (__n128 *)sub_1000DB79C(v49);
    v51 = sub_100019B9C(v50, (__n128)xmmword_1000EFD90);
    sub_10000EB78(v51, (uint64_t)&v50[4].n128_i64[1]);
    sub_100013E10();
    sub_1000101B0();
    sub_10001A8F8((uint64_t)v50, v77);
    v52 = sub_100010068(v77);
    v54 = v53;
    v56 = v55;
    sub_10001EE20();
    sub_100018AEC(v52, v54, v56, v57, v58, &qword_10012C158);
    sub_1000DB7C0();
    sub_10000E038();
    sub_10000C028();
    swift_setDeallocating(v50);
    sub_10001E778();
  }
  else
  {
    v59 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 32);
    v76[0] = v37;
    v59(v41, v36, v26);
    v60 = *(_UNKNOWN ***)(v24 + 8);
    v82 = v26;
    v83 = v60;
    v61 = sub_10001795C(v81);
    v62 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v37 + 16))(v61, v41, v26);
    v79 = sub_100005850(v62, v63, v64, v65);
    v80 = &protocol witness table for Expression<A>;
    sub_100005864();
    v66 = sub_10001BE7C(&qword_100128D58);
    v67 = (__n128 *)sub_1000DB794(v66);
    v68 = sub_100019B9C(v67, (__n128)xmmword_1000EFD90);
    sub_10000EB78(v68, (uint64_t)&v67[4].n128_i64[1]);
    sub_100013E10();
    sub_1000101B0();
    sub_10001A8F8((uint64_t)v67, v77);
    v69 = sub_100010068(v77);
    v71 = v70;
    v73 = v72;
    sub_10001EE20();
    sub_100018AEC(v69, v71, v73, v74, v75, &qword_10012C158);
    sub_1000DB7C0();
    sub_10000EC84();
    sub_10000C028();
    swift_setDeallocating(v67);
    sub_10001E778();
    (*(void (**)(uint64_t, uint64_t))(v76[0] + 8))(v41, v26);
  }
  sub_10000E87C(v78);
  sub_10000E87C(v81);
  sub_1000DB7E0();
  sub_100013308();
}

void > infix<A>(_:_:)()
{
  sub_100013E90();
  sub_100008744();
  sub_10001B3F4();
}

{
  sub_100013E90();
  sub_1000D92DC();
  sub_10001B3F4();
}

{
  sub_100013E90();
  sub_1000D93D0();
  sub_10001B3F4();
}

{
  sub_100013E90();
  sub_1000D94C4();
  sub_10001B3F4();
}

{
  sub_1000DB54C();
  sub_100013224();
  sub_100017714();
}

{
  sub_1000DB54C();
  sub_1000DA50C();
  sub_100017714();
}

#error "1000DA43C: call analysis failed (funcsize=7)"

#error "1000DA458: call analysis failed (funcsize=7)"

void >= infix<A>(_:_:)()
{
  sub_10001CE80();
  sub_100008744();
  sub_10001B3F4();
}

{
  sub_10001CE80();
  sub_1000D92DC();
  sub_10001B3F4();
}

{
  sub_10001CE80();
  sub_1000D93D0();
  sub_10001B3F4();
}

{
  sub_10001CE80();
  sub_1000D94C4();
  sub_10001B3F4();
}

{
  sub_10001EFE4();
  sub_100013224();
  sub_100017714();
}

{
  sub_10001EFE4();
  sub_1000DA50C();
  sub_100017714();
}

#error "1000DA594: call analysis failed (funcsize=67)"

#error "1000DA634: call analysis failed (funcsize=7)"

#error "1000DA650: call analysis failed (funcsize=7)"

void sub_1000DA65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  sub_10001F1B0();
  a47 = v49;
  a48 = v50;
  v52 = v51;
  sub_10006B24C();
  v54 = *(_QWORD *)(v53 + 8);
  a37 = v55;
  a38 = v54;
  v56 = sub_10001795C(&a34);
  sub_100005848((uint64_t)v56, v48, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16));
  v57 = type metadata accessor for Optional(255, v52);
  v61 = sub_100017AF8(v57, v58, v59, v60);
  sub_100010B48(v61, (uint64_t)&protocol witness table for Expression<A>);
  v62 = sub_10001BE7C(&qword_100128D58);
  v69 = (__n128 *)sub_10001F124(v62, v63, v64, v65, v66, v67, v68);
  sub_100018630(v69, (__n128)xmmword_1000EFD90);
  sub_10001008C();
  sub_10000C030();
  v70 = sub_10000BFF4();
  sub_1000DB710(v70);
  v71 = a13;
  v72 = a14;
  sub_10000E858(&a10, a13);
  v73 = sub_10001A0F8(v71, *(uint64_t (**)(uint64_t, uint64_t))(v72 + 8));
  v75 = v74;
  sub_10001DDEC(v73);
  sub_100018AEC(v73, v75, v72, v76, v77, &qword_10012C158);
  sub_1000101FC();
  sub_1000059A8();
  sub_100018640();
  sub_10000585C();
  sub_10000E87C(&a29);
  sub_10000E87C(&a34);
  sub_1000DB6A0();
  sub_1000134DC();
}

void < infix<A>(_:_:)()
{
  sub_10000ED18();
  sub_100008744();
  sub_10001B3F4();
}

{
  sub_10000ED18();
  sub_1000D92DC();
  sub_10001B3F4();
}

{
  sub_10000ED18();
  sub_1000D93D0();
  sub_10001B3F4();
}

{
  sub_10000ED18();
  sub_1000D94C4();
  sub_10001B3F4();
}

{
  sub_10001A4D8();
  sub_100013224();
  sub_100017714();
}

{
  sub_10001A4D8();
  sub_1000DA50C();
  sub_100017714();
}

#error "1000DA828: call analysis failed (funcsize=7)"

#error "1000DA844: call analysis failed (funcsize=7)"

void <= infix<A>(_:_:)()
{
  sub_100018E88();
  sub_100008744();
  sub_10001B3F4();
}

{
  sub_100018E88();
  sub_1000D92DC();
  sub_10001B3F4();
}

{
  sub_100018E88();
  sub_1000D93D0();
  sub_10001B3F4();
}

{
  sub_100018E88();
  sub_1000D94C4();
  sub_10001B3F4();
}

{
  sub_10001EF0C();
  sub_100013224();
  sub_100017714();
}

{
  sub_10001EF0C();
  sub_1000DA50C();
  sub_100017714();
}

#error "1000DA908: call analysis failed (funcsize=7)"

#error "1000DA924: call analysis failed (funcsize=7)"

uint64_t sub_1000DA934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Swift::String v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;
  _BYTE v23[112];
  uint64_t v24;
  uint64_t v25;

  sub_1000DB744();
  sub_1000100E0();
  sub_1000059A8();
  v24 = a2;
  v25 = a3;
  v12._object = (void *)0x80000001000F6D90;
  v12._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v12);
  v13 = sub_10001BE7C(&qword_1001296C8);
  inited = swift_initStackObject(v13, v23);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a5);
  *(_QWORD *)(inited + 56) = AssociatedTypeWitness;
  sub_1000DB7E0();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v16, v17, v18, &protocol requirements base descriptor for Value, v19);
  *(_QWORD *)(inited + 64) = AssociatedConformanceWitness;
  sub_1000DB7B8();
  sub_1000DB7EC();
  type metadata accessor for ClosedRange(0, a5, a7);
  *(_QWORD *)(inited + 96) = AssociatedTypeWitness;
  *(_QWORD *)(inited + 104) = AssociatedConformanceWitness;
  sub_10001795C((_QWORD *)(inited + 72));
  sub_1000DB7EC();
  v24 = a4;
  sub_10000EC68();
  sub_10001A39C();
  return a2;
}

uint64_t sub_1000DAAA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t inited;
  void (*v17)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v26[72];
  char v27[72];
  uint64_t v28;
  void *v29;

  sub_1000DB744();
  sub_1000100E0();
  sub_1000059A8();
  v28 = a2;
  v29 = a3;
  v12._countAndFlagsBits = 0x4E41203F203D3E20;
  v12._object = (void *)0xEA00000000002044;
  String.append(_:)(v12);
  sub_1000100E0();
  v13._countAndFlagsBits = a2;
  v13._object = a3;
  String.append(_:)(v13);
  sub_10000C028();
  v14._countAndFlagsBits = 1059077152;
  v14._object = (void *)0xE400000000000000;
  String.append(_:)(v14);
  v24 = a2;
  v15 = sub_10001BE7C(&qword_1001296C8);
  inited = swift_initStackObject(v15, v27);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  v17 = *(void (**)(uint64_t, uint64_t))(a6 + 56);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a5);
  *(_QWORD *)(inited + 56) = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a5, AssociatedTypeWitness, &protocol requirements base descriptor for Value, &associated conformance descriptor for Value.Value.Datatype: Binding);
  *(_QWORD *)(inited + 64) = AssociatedConformanceWitness;
  sub_1000DB7B8();
  v17(a5, a6);
  v20 = v17;
  v28 = a4;
  sub_10000C020();
  sub_1000DB804();
  sub_10000C020();
  sub_10001A39C();
  v21 = v28;
  v22 = swift_initStackObject(v15, v26);
  *(_OWORD *)(v22 + 16) = xmmword_1000EFAE0;
  type metadata accessor for Range(0, a5, a7);
  *(_QWORD *)(v22 + 56) = AssociatedTypeWitness;
  *(_QWORD *)(v22 + 64) = AssociatedConformanceWitness;
  sub_10001795C((_QWORD *)(v22 + 32));
  v20(a5, a6);
  v28 = v21;
  sub_1000DB804();
  return v24;
}

void ~= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100016810(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  sub_10001B3F4();
}

{
  sub_10001AADC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  sub_10001B3F4();
}

{
  sub_100016810(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  sub_10001B3F4();
}

uint64_t sub_1000DACF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  void (*v18)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  _BYTE v21[72];
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v23 = a3;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = a10;
  v14._object = a11;
  String.append(_:)(v14);
  v15 = v22;
  v16 = sub_10001BE7C(&qword_1001296C8);
  inited = swift_initStackObject(v16, v21);
  *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
  v18 = *(void (**)(uint64_t, uint64_t))(a6 + 56);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a5);
  *(_QWORD *)(inited + 56) = AssociatedTypeWitness;
  *(_QWORD *)(inited + 64) = swift_getAssociatedConformanceWitness(a6, a5, AssociatedTypeWitness, &protocol requirements base descriptor for Value, &associated conformance descriptor for Value.Value.Datatype: Binding);
  sub_1000DB7B8();
  v18(a5, a6);
  v22 = a4;
  sub_10000EC68();
  sub_10001A39C();
  return v15;
}

_QWORD *sub_1000DAE14(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN **v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v15 = _swiftEmptyArrayStorage;
    sub_10001FA9C();
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v6 = *(v4 - 2);
      v5 = *(v4 - 1);
      v7 = *v4;
      v15 = v2;
      v8 = v2[2];
      v9 = v2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1)
      {
        sub_10001FA9C();
        v2 = v15;
      }
      v13 = sub_10001BE7C(&qword_10012C150);
      v14 = &protocol witness table for Expression<A>;
      *(_QWORD *)&v11 = v6;
      *((_QWORD *)&v11 + 1) = v5;
      v12 = v7;
      v2[2] = v8 + 1;
      sub_100019A48(&v11, (uint64_t)&v2[5 * v8 + 4]);
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_1000DAF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;

  v5 = sub_1000DAE14(a1);
  sub_10001A118((uint64_t)v5, a2, a3, v13);
  v6 = v14;
  v7 = v15;
  sub_10000E858(v13, v14);
  v8 = sub_10001A0F8(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  v10 = v9;
  sub_10001DDEC(v8);
  sub_100018AEC(v8, v10, v7, v11, v12, &qword_10012C150);
  sub_1000100D0();
  sub_1000101FC();
  sub_1000059A8();
  sub_1000DB6A0();
}

void && infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1000DB758(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_10012C150);
  sub_100017714();
}

{
  sub_1000DB758(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_10012C158);
  sub_100017714();
}

uint64_t && infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000DB028(a1, a2, a3, a4, a5, a6, &unk_10012C150, &qword_10012C158);
}

{
  return sub_1000DB028(a1, a2, a3, a4, a5, a6, &qword_10012C158, &qword_10012C150);
}

#error "1000DB0A4: call analysis failed (funcsize=55)"

void && infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_10001EEA8(a1, a2, a3, a4, (uint64_t)&qword_10012C150, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_10001EEA8(a1, a2, a3, a4, (uint64_t)&qword_10012C158, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_1000DB158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 *v64;
  uint64_t v65;

  sub_10001F1B0();
  a47 = v51;
  a48 = v52;
  v54 = v53;
  sub_10006B24C();
  v56 = sub_10001BE7C(v55);
  a38 = &protocol witness table for Expression<A>;
  a34 = v50;
  a35 = v49;
  a36 = v48;
  a37 = v56;
  a32 = &type metadata for Bool;
  a33 = &protocol witness table for Bool;
  LOBYTE(a29) = v54;
  v57 = sub_10001BE7C(&qword_100128D58);
  v64 = (__n128 *)sub_10001F124(v57, v58, v59, v60, v61, v62, v63);
  sub_100018630(v64, (__n128)xmmword_1000EFD90);
  sub_10001008C();
  sub_10000C020();
  v65 = sub_10000C030();
  sub_1000DB6FC(v65);
  sub_10001B198(&a10);
  sub_10001DA10(&a10);
  sub_100019324();
  sub_1000101FC();
  sub_100018640();
  sub_10000585C();
  sub_10000E87C(&a29);
  sub_10000E87C(&a34);
  sub_10001E050();
  sub_1000134DC();
}

void && infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_100016744(a1, a2, a3, a4, (uint64_t)&qword_10012C150, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_100016744(a1, a2, a3, a4, (uint64_t)&qword_10012C158, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_1000DB24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 *v65;
  uint64_t v66;

  sub_10001F1B0();
  a47 = v48;
  a48 = v49;
  v51 = v50;
  v53 = v52;
  v55 = v54;
  a37 = &type metadata for Bool;
  a38 = &protocol witness table for Bool;
  LOBYTE(a34) = v56;
  a32 = sub_10001BE7C(v57);
  a33 = &protocol witness table for Expression<A>;
  a29 = v55;
  a30 = v53;
  a31 = v51;
  v58 = sub_10001BE7C(&qword_100128D58);
  v65 = (__n128 *)sub_10001F124(v58, v59, v60, v61, v62, v63, v64);
  sub_100018630(v65, (__n128)xmmword_1000EFD90);
  sub_10001008C();
  sub_10000C020();
  v66 = sub_10000C030();
  sub_1000DB6FC(v66);
  sub_10001B198(&a10);
  sub_10001DA10(&a10);
  sub_100019324();
  sub_1000101FC();
  sub_100018640();
  sub_10000585C();
  sub_10000E87C(&a29);
  sub_10000E87C(&a34);
  sub_10001E050();
  sub_1000134DC();
}

void || infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DB844();
  sub_1000DB7AC(v0, v1, v2, v3, v4, v5, (uint64_t)&qword_10012C150);
  sub_100017714();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DB844();
  sub_1000DB7AC(v0, v1, v2, v3, v4, v5, (uint64_t)&qword_10012C158);
  sub_100017714();
}

#error "1000DB37C: call analysis failed (funcsize=10)"

#error "1000DB3B0: call analysis failed (funcsize=10)"

void || infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_1000DB59C(a1, a2, a3, a4, (uint64_t)&qword_10012C150, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_1000DB59C(a1, a2, a3, a4, (uint64_t)&qword_10012C158, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void || infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_1000DB5AC(a1, a2, a3, a4, (uint64_t)&qword_10012C150, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

{
  sub_1000DB5AC(a1, a2, a3, a4, (uint64_t)&qword_10012C158, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void ! prefix(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DB428(a1, a2, a3, &qword_10012C150);
}

{
  sub_1000DB428(a1, a2, a3, &qword_10012C158);
}

void sub_1000DB428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  swift_bridgeObjectRetain();
  sub_1000101B0();
  sub_1000136A0(a1, a2, a3, 542396238, 0xE400000000000000, a4);
  sub_1000DB7C0();
  sub_1000059A8();
  sub_1000100D0();
  sub_1000DB7E0();
}

uint64_t sub_1000DB4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000136A0(a1, a2, a3, a4, a5, &qword_100128D00);
}

uint64_t sub_1000DB4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000136A0(a1, a2, a3, a4, a5, &qword_100128D30);
}

uint64_t sub_1000DB4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000136A0(a1, a2, a3, a4, a5, &qword_10012C150);
}

uint64_t sub_1000DB4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000136A0(a1, a2, a3, a4, a5, &qword_10012C158);
}

uint64_t sub_1000DB50C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_1000DB560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return a11(v16, v15, v14, v13, v12, v11);
}

void _s6SQLite3andyAA10ExpressionVySbGSayAEGF_0(uint64_t a1)
{
  sub_1000DAF24(a1, 0x20444E4120, 0xE500000000000000);
}

uint64_t sub_1000DB594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return type metadata accessor for Optional(a1, a5);
}

void sub_1000DB59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_1000DB158(a1, a2, a3, a4, a5, 542265120, 0xE400000000000000, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void sub_1000DB5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_UNKNOWN **a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,_UNKNOWN **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_1000DB24C(a1, a2, a3, a4, a5, 542265120, 0xE400000000000000, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

void _s6SQLite2oryAA10ExpressionVySbGSayAEGF_0(uint64_t a1)
{
  sub_1000DAF24(a1, 542265120, 0xE400000000000000);
}

_QWORD *sub_1000DB5CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v32 - 96) = a1;
  *(_QWORD *)(v32 - 88) = a2;
  *(_QWORD *)(v32 - 120) = v31;
  *(_QWORD *)(v32 - 112) = v29;
  *(_QWORD *)(v32 - 104) = v28;
  v33 = *(_QWORD *)(v27 + 8);
  a26 = v30;
  a27 = v33;
  return sub_10001795C(&a23);
}

uint64_t sub_1000DB604()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[23];
  v2 = v0[24];
  sub_10000E858(v0 + 20, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_1000DB630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0, a4, a3, a4);
}

void sub_1000DB670(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  sub_10001A118(v1, 545029152, 0xE400000000000000, (uint64_t *)va);
}

uint64_t sub_1000DB688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  unsigned __int8 v14;
  uint64_t v15;

  return sub_1000D793C((uint64_t)&a14, (uint64_t)&a9, 1, v14, v15);
}

uint64_t sub_1000DB6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Optional(255, a4);
}

uint64_t _s6SQLite2teoiyAA10ExpressionVySbSgGSnyxG_ADyxSgGtAA5ValueRzSLRzAaJ8DatatypeAaJPRpzSLAMRQlF_0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000DAAA8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t _s6SQLite2teoiyAA10ExpressionVySbSgGSNyxG_ADyxSgGtAA5ValueRzSLRzAaJ8DatatypeAaJPRpzSLAMRQlF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000DA934(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1000DB6FC(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a1);
  sub_10001A118(v2, v3, v1, (uint64_t *)va);
}

void sub_1000DB710(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a1);
  sub_10001A118(v3, v1, v2, (uint64_t *)va);
}

uint64_t sub_1000DB724()
{
  return sub_1000D8AF8();
}

uint64_t sub_1000DB72C()
{
  return sub_1000D8988();
}

uint64_t sub_1000DB734()
{
  return sub_1000D8A40();
}

uint64_t sub_1000DB73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return swift_initStackObject(a1, va);
}

void sub_1000DB744()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0;
  *(_QWORD *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
}

uint64_t sub_1000DB758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D7CC4(a1, a2, a3, a4, a5, a6, a7, 0x20444E4120);
}

uint64_t sub_1000DB784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Expression(0, a1, a3, a4);
}

uint64_t sub_1000DB794(uint64_t a1)
{
  uint64_t v1;

  return swift_initStackObject(a1, v1 + 48);
}

uint64_t sub_1000DB79C(uint64_t a1)
{
  uint64_t v1;

  return swift_initStackObject(a1, v1 + 200);
}

uint64_t sub_1000DB7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_10001BE7C(a6);
}

uint64_t sub_1000DB7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D7CC4(a1, a2, a3, a4, a5, a6, a7, 542265120);
}

_QWORD *sub_1000DB7B8()
{
  _QWORD *v0;

  return sub_10001795C(v0);
}

void sub_1000DB7CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[4];
  *(_QWORD *)(v1 - 168) = v0[3];
  *(_QWORD *)(v1 - 160) = v2;
  *(_QWORD *)(v1 - 152) = v0[5];
}

uint64_t sub_1000DB7EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000DB7F8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000132C4(v1 - 144, v0 + 72);
}

void sub_1000DB804()
{
  sub_10001A39C();
}

uint64_t sub_1000DB810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_10001BE7C(a7);
}

void sub_1000DB818(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_10001A118(a1, *(_QWORD *)(v2 + 16), v3, a2);
}

uint64_t sub_1000DB838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000D7CC4(a1, a2, a3, a4, a5, a6, a7, 545029152);
}

const char *Table.identifier.unsafeMutableAddressor()
{
  return "TABLE";
}

void sub_1000DB870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[21];
  _QWORD v19[32];
  uint64_t v20;
  uint64_t v21;

  sub_1000100A8();
  v20 = v2;
  v21 = v3;
  v5 = v4;
  v7 = v6;
  v8 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v9);
  sub_1000BE908();
  if ((v10 & 1) != 0)
  {
    sub_10001CAC4();
    sub_1000180D0();
  }
  else
  {
    sub_100010B58();
    v11 = v18[4];
    v12 = v18[5];
    sub_1000100E0();
    sub_1000E0204(v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v0, v5);
    if (v12)
    {
      sub_1000E0ED4();
    }
    else
    {
      sub_100010B58();
      sub_1000E0ED4();
      v11 = v19[2];
      sub_1000100E0();
      sub_1000E0204(v19);
    }
    v7[3] = sub_10001BE7C(&qword_10012BFA8);
    v7[4] = (uint64_t)&protocol witness table for Expression<A>;
    v13 = sub_1000D6A28();
    v15 = sub_1000E10E8(v13, v14, v11);
    v17 = v16;
    sub_10000C028();
    *v7 = v15;
    v7[1] = v17;
    v7[2] = (uint64_t)_swiftEmptyArrayStorage;
    sub_100013308();
  }
}

_QWORD *sub_1000DB99C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001573C();
    v3 = (_QWORD *)(a1 + 56);
    do
    {
      v4 = *(v3 - 3);
      v5 = *(v3 - 2);
      v6 = *(v3 - 1);
      v7 = *v3;
      swift_bridgeObjectRetain(*v3);
      v8 = static String._fromSubstring(_:)(v4, v5, v6, v7);
      v10 = v9;
      swift_bridgeObjectRelease(v7);
      v11 = _swiftEmptyArrayStorage[2];
      if (v11 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_10001573C();
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v8;
      v12[5] = v10;
      v3 += 4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1000DBA98(void (*a1)(_QWORD *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD *v18;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v18 = _swiftEmptyArrayStorage;
    sub_10001573C();
    v6 = _swiftEmptyArrayStorage;
    v8 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v9 = *v8;
      v16[0] = *(v8 - 1);
      v16[1] = v9;
      swift_bridgeObjectRetain(v9);
      a1(v17, v16);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease(v9);
      v11 = v17[0];
      v10 = v17[1];
      v18 = v6;
      v12 = v6[2];
      if (v12 >= v6[3] >> 1)
      {
        sub_10001573C();
        v6 = v18;
      }
      v8 += 2;
      v6[2] = v12 + 1;
      v13 = &v6[2 * v12];
      v13[4] = v11;
      v13[5] = v10;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
    swift_bridgeObjectRelease(v9);
  }
  return v6;
}

const char *View.identifier.unsafeMutableAddressor()
{
  return "VIEW";
}

const char *VirtualTable.identifier.unsafeMutableAddressor()
{
  return "VIRTUAL TABLE";
}

uint64_t sub_1000DBBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    && infix(_:_:)(a4, a5, a6, a1, a2, a3);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    a7[3] = sub_10001BE7C(&qword_10012C158);
    a7[4] = &protocol witness table for Expression<A>;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
    *a7 = v15;
    a7[1] = v17;
    a7[2] = v19;
  }
  else
  {
    a7[4] = 0;
    *(_OWORD *)a7 = 0u;
    *((_OWORD *)a7 + 1) = 0u;
  }
  swift_bridgeObjectRelease(a6);
  return swift_bridgeObjectRelease(a5);
}

uint64_t sub_1000DBCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    && infix(_:_:)(a1, a2, a3, a4, a5, a6);
    a1 = v12;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
  }
  swift_bridgeObjectRelease(a6);
  swift_bridgeObjectRelease(a5);
  return a1;
}

uint64_t SchemaType.select(distinct:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000034CC(a1, a2, a3, a4, 1);
}

uint64_t SchemaType.select(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000187F4(0, a1, a3, a2, *(_QWORD *)(a3 + 8));
}

uint64_t SchemaType.select(distinct:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000187F4(1, a1, a3, a2, *(_QWORD *)(a3 + 8));
}

uint64_t SchemaType.select(_:)()
{
  return sub_1000DBDC4();
}

uint64_t SchemaType.select(distinct:)()
{
  return sub_1000DBDC4();
}

uint64_t sub_1000DBDC4()
{
  void (*v0)(uint64_t, uint64_t, uint64_t);
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000100A8();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = sub_10001BE7C(&qword_100128D58);
  v9 = sub_100017848(v8);
  *(_OWORD *)(v9 + 16) = xmmword_1000EFAE0;
  v10 = sub_10001F058();
  v11 = v7(v10);
  v13 = v12;
  v15 = v14;
  *(_QWORD *)(v9 + 56) = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(v9 + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  *(_QWORD *)(v9 + 48) = v15;
  v1(v9, v5, v3);
  return sub_100018510(v9);
}

void SchemaType.select<A>(_:)()
{
  sub_1000DBE90();
}

{
  sub_1000DBF18();
}

uint64_t type metadata accessor for ScalarQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScalarQuery);
}

void SchemaType.select<A>(distinct:)()
{
  sub_1000DBE90();
}

{
  sub_1000DBF18();
}

void sub_1000DBE90()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_100013510();
  v1 = sub_10001BE7C(&qword_100128D58);
  v2 = sub_100017848(v1);
  *(_OWORD *)(v2 + 16) = xmmword_1000EFAE0;
  v6 = sub_10001C10C(v2, v3, v4, v5);
  sub_100013834(v6, v7, v8, (uint64_t)&protocol witness table for Expression<A>);
  v9 = sub_1000100E0();
  sub_1000E0E98(v9, v10, v11, v12, v13, (uint64_t)&protocol witness table for ScalarQuery<A>);
  swift_bridgeObjectRelease();
  sub_1000189C4(v0, &v14);
  sub_100013EAC();
}

void sub_1000DBF18()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_100013510();
  v2 = sub_10001BE7C(&qword_100128D58);
  *(_OWORD *)(sub_100017848(v2) + 16) = xmmword_1000EFAE0;
  v3 = type metadata accessor for Optional(255, v1);
  v7 = sub_10001C10C(v3, v4, v5, v6);
  sub_100013834(v7, v8, v9, (uint64_t)&protocol witness table for Expression<A>);
  v10 = sub_1000100E0();
  sub_1000E0E98(v10, v11, v12, v13, v14, (uint64_t)&protocol witness table for ScalarQuery<A>);
  swift_bridgeObjectRelease();
  sub_1000189C4(v0, &v15);
  sub_100013EAC();
}

void *SchemaType.count.getter@<X0>(void *a1@<X8>)
{
  _BYTE v3[168];

  sub_1000E0CF0(42, (void *)0xE100000000000000, (uint64_t)_swiftEmptyArrayStorage, 0x746E756F63, 0xE500000000000000, &qword_10012BFA8);
  SchemaType.select<A>(_:)();
  sub_1000059B0();
  sub_1000059C4();
  return sub_1000189C4(a1, v3);
}

void QueryType.union(_:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void (*v12)(uint64_t *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[4];

  v3 = sub_1000102DC(a1, a2);
  v11 = sub_1000E0FFC(v3, v4, v5, v6, v7, v8, v9, v10, v17[0]);
  v12(v11);
  v14 = v13;
  sub_1000D5D50();
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 160) + 16);
  sub_1000D5E24(v15);
  v16 = *(_QWORD *)(v14 + 160);
  *(_QWORD *)(v16 + 16) = v15 + 1;
  sub_100019A60(v2, v16 + 40 * v15 + 32);
  sub_10001EE80((uint64_t)v17);
  sub_10001F0D4();
}

uint64_t QueryType.join(_:on:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100016714();
  sub_10001F7C4(v1, v2, v3);
  sub_10000BFF4();
  v4 = (_QWORD *)sub_10001A9EC();
  QueryType.join(_:on:)(v4, v5, v6, v7, v8, v9, v10);
  sub_1000101FC();
  return sub_10001ADA4(v0);
}

void QueryType.join(_:on:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  QueryType.join(_:_:on:)(1, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t QueryType.join(_:_:on:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000100A8();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRetain();
  sub_10000BFF4();
  QueryType.join(_:_:on:)(v13, v11, v9, v7, v5, v3, v1, v15);
  sub_1000101FC();
  return sub_100018510(v7);
}

uint64_t QueryType.group(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _s6SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0(a1, 0, 0, 0, a2, a3, a4);
}

uint64_t _s6SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t (*v14)(_BYTE *, uint64_t, uint64_t);
  uint64_t (*v15)(_BYTE *, _QWORD);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[32];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(a7, v7, a5);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a6 + 32);
  swift_bridgeObjectRetain();
  sub_100018298(a2, a3, a4);
  v15 = (uint64_t (*)(_BYTE *, _QWORD))v14(v22, a5, a6);
  v17 = v16[12];
  v18 = v16[13];
  v19 = v16[14];
  v20 = v16[15];
  v16[12] = a1;
  v16[13] = a2;
  v16[14] = a3;
  v16[15] = a4;
  sub_100018848(v17, v18, v19, v20);
  return v15(v22, 0);
}

uint64_t QueryType.group(_:having:)()
{
  uint64_t v0;
  __n128 *v1;

  sub_1000100A8();
  sub_10001A888();
  v0 = sub_10001BE7C(&qword_100128D58);
  v1 = (__n128 *)sub_100017848(v0);
  sub_10001F918(v1, (__n128)xmmword_1000EFAE0);
  sub_100010828();
  QueryType.group(_:having:)();
  return sub_100018510((uint64_t)v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100016714();
  sub_10001F7C4(v1, v2, v3);
  sub_10000BFF4();
  v4 = sub_10001A9EC();
  _s6SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0(v4, v5, v6, v7, v8, v9, v10);
  sub_1000101FC();
  return sub_10001ADA4(v0);
}

{
  uint64_t v0;
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000100A8();
  sub_10001A888();
  v0 = sub_10001BE7C(&qword_100128D58);
  v1 = (__n128 *)sub_100017848(v0);
  sub_10001F918(v1, (__n128)xmmword_1000EFAE0);
  v2 = sub_100010828();
  _s6SQLite9QueryTypePAAE5group_6havingxSayAA11Expressible_pG_AA10ExpressionVySbSgGtF_0(v2, v3, v4, v5, v6, v7, v8);
  return sub_100018510((uint64_t)v1);
}

void QueryType.order(_:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15[4];

  sub_1000102DC(a1, a2);
  v4 = *(void (**)(uint64_t *))(v2 + 32);
  v5 = sub_10000BFF4();
  v13 = sub_1000E0FFC(v5, v6, v7, v8, v9, v10, v11, v12, v15[0]);
  v4(v13);
  *(_QWORD *)(v14 + 128) = v3;
  swift_bridgeObjectRelease();
  sub_10001EE80((uint64_t)v15);
  sub_10001F0D4();
}

uint64_t QueryType.limit(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000DC3A8(a1, a2 & 1, 0, 1, a3, a4, a5);
}

uint64_t sub_1000DC3A8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  char v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t (*v19)(_BYTE *, _QWORD);
  uint64_t v20;
  _BYTE v22[32];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(a7, v7, a5);
  v14 = a4 & 1;
  v16 = a2 & 1;
  v15 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v17 = 0;
  else
    v17 = a1;
  if (v15)
  {
    v18 = v14;
  }
  else
  {
    a3 = 0;
    v18 = 0;
  }
  v19 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a6 + 32))(v22, a5, a6);
  *(_QWORD *)(v20 + 136) = v17;
  *(_QWORD *)(v20 + 144) = a3;
  *(_BYTE *)(v20 + 152) = v18;
  *(_BYTE *)(v20 + 153) = v16;
  return v19(v22, 0);
}

uint64_t QueryType.limit(_:offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000DC3A8(a1, 0, a2, 0, a3, a4, a5);
}

uint64_t sub_1000DC474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t inited;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[192];
  _QWORD v15[21];
  _QWORD v16[22];

  v6 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v6, v14);
  *(_OWORD *)(inited + 16) = xmmword_1000F05A0;
  v8 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 16);
  v8(v15, a1, a2);
  sub_1000E0204(v15);
  if (LOBYTE(v15[0]))
    v9 = 0x44205443454C4553;
  else
    v9 = 0x5443454C4553;
  if (LOBYTE(v15[0]))
    v10 = 0xEF54434E49545349;
  else
    v10 = 0xE600000000000000;
  v11 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = v10;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v11;
  v8(v16, a1, a2);
  v12 = v16[1];
  swift_bridgeObjectRetain();
  sub_1000E0204(v16);
  sub_10001A118(v12, 8236, 0xE200000000000000, (uint64_t *)(inited + 72));
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 136) = v11;
  *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 112) = 1297044038;
  *(_QWORD *)(inited + 120) = 0xE400000000000000;
  *(_QWORD *)(inited + 128) = _swiftEmptyArrayStorage;
  sub_1000180D0();
  sub_10001A118(inited, 32, 0xE100000000000000, a3);
  swift_setDeallocating(inited);
  return sub_10001E778();
}

_QWORD *sub_1000DC600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v6)(_QWORD *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned __int8 v24[88];
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v29[8];
  uint64_t v30;
  _QWORD v31[8];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(void (**)(_QWORD *__return_ptr))(a2 + 16);
  v6(v29);
  v7 = v30;
  v34 = v30;
  swift_bridgeObjectRetain();
  sub_1000E0204(v29);
  v8 = *(_QWORD *)(v7 + 16);
  result = sub_10001E05C(&v34);
  if (v8)
  {
    ((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))v6)(v31, a1, a2);
    v10 = v32;
    v33 = v32;
    swift_bridgeObjectRetain();
    sub_1000E0204(v31);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v28 = _swiftEmptyArrayStorage;
      sub_10001FA9C();
      v12 = v10 + 32;
      do
      {
        sub_100019FA0(v12, (uint64_t)v24, &qword_10012C230);
        sub_100008558(v24, v25);
        sub_1000131A8((uint64_t)v24, &qword_10012C230);
        v13 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        {
          sub_10001FA9C();
          v13 = v28;
        }
        v14 = v13[2];
        if (v14 >= v13[3] >> 1)
          sub_10001FA9C();
        v15 = v26;
        v16 = v27;
        v17 = sub_100016184((uint64_t)v25, v26);
        v18 = __chkstk_darwin(v17);
        v20 = &v24[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
        (*(void (**)(unsigned __int8 *, double))(v21 + 16))(v20, v18);
        sub_10001F9E8(v14, (uint64_t)v20, (uint64_t *)&v28, v15, v16);
        sub_10000E87C(v25);
        v12 += 88;
        --v11;
      }
      while (v11);
      v22 = v28;
      sub_10001E05C(&v33);
    }
    else
    {
      sub_10001E05C(&v33);
      v22 = _swiftEmptyArrayStorage;
    }
    sub_10001A118((uint64_t)v22, 32, 0xE100000000000000, (uint64_t *)a3);
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t JoinType.rawValue.getter(char a1)
{
  if (!a1)
    return 0x53534F5243;
  if (a1 == 1)
    return 0x52454E4E49;
  return 0x54554F205446454CLL;
}

void sub_1000DC8A0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[112];
  _BYTE v13[112];
  _BYTE v14[112];
  __int128 v15[2];
  _QWORD v16[12];
  uint64_t v17;
  uint64_t v18[4];
  _QWORD v19[5];

  (*(void (**)(_QWORD *__return_ptr))(a1 + 16))(v16);
  sub_100019EB8((uint64_t)&v17, (uint64_t)v18, &qword_10012C470);
  sub_1000E0E34(v18);
  sub_1000E0204(v16);
  sub_100019EB8((uint64_t)v18, (uint64_t)v19, &qword_10012C470);
  v3 = v19[0];
  if (v19[0])
  {
    v5 = v19[1];
    v4 = v19[2];
    v6 = v19[3];
    v7 = sub_10001BE7C(&qword_100128D58);
    inited = swift_initStackObject(v7, v14);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    v9 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
    *(_QWORD *)(inited + 32) = 0x59422050554F5247;
    *(_QWORD *)(inited + 40) = 0xE800000000000000;
    *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(inited + 56) = v9;
    sub_10001A118(v3, 8236, 0xE200000000000000, (uint64_t *)(inited + 72));
    sub_10001A118(inited, 32, 0xE100000000000000, (uint64_t *)v15);
    swift_setDeallocating(inited);
    sub_10001E778();
    swift_bridgeObjectRelease();
    if (v4)
    {
      v10 = swift_initStackObject(v7, v13);
      *(_OWORD *)(v10 + 16) = xmmword_1000EFD90;
      sub_100019A60((uint64_t)v15, v10 + 32);
      v11 = swift_initStackObject(v7, v12);
      *(_OWORD *)(v11 + 16) = xmmword_1000EFD90;
      *(_QWORD *)(v11 + 56) = v9;
      *(_QWORD *)(v11 + 64) = &protocol witness table for Expression<A>;
      *(_QWORD *)(v11 + 32) = 0x474E49564148;
      *(_QWORD *)(v11 + 40) = 0xE600000000000000;
      *(_QWORD *)(v11 + 48) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v11 + 96) = sub_10001BE7C(&qword_10012C158);
      *(_QWORD *)(v11 + 104) = &protocol witness table for Expression<A>;
      *(_QWORD *)(v11 + 72) = v5;
      *(_QWORD *)(v11 + 80) = v4;
      *(_QWORD *)(v11 + 88) = v6;
      sub_10001A118(v11, 32, 0xE100000000000000, (uint64_t *)(v10 + 72));
      swift_setDeallocating(v11);
      sub_10001E778();
      sub_10001A118(v10, 32, 0xE100000000000000, (uint64_t *)a2);
      swift_setDeallocating(v10);
      sub_10001E778();
      sub_10000E87C(v15);
    }
    else
    {
      sub_100019A48(v15, a2);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

_QWORD *sub_1000DCACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v6)(_QWORD *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v39[20];
  uint64_t v40;
  _QWORD v41[20];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *(void (**)(_QWORD *__return_ptr))(a2 + 16);
  v6(v39);
  v7 = v40;
  v44 = v40;
  swift_bridgeObjectRetain();
  sub_1000E0204(v39);
  v8 = *(_QWORD *)(v7 + 16);
  result = sub_10001E05C(&v44);
  if (v8)
  {
    ((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))v6)(v41, a1, a2);
    v10 = v42;
    v43 = v42;
    swift_bridgeObjectRetain();
    sub_1000E0204(v41);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v29 = a3;
      v38 = _swiftEmptyArrayStorage;
      sub_10001FA9C();
      v12 = v10 + 32;
      v13 = _swiftEmptyArrayStorage;
      v30 = xmmword_1000EFD90;
      do
      {
        sub_100019A60(v12, (uint64_t)v32);
        v14 = sub_10001BE7C(&qword_100128D58);
        inited = swift_initStackObject(v14, &v31);
        *(_OWORD *)(inited + 16) = v30;
        *(_QWORD *)(inited + 56) = sub_10001BE7C(&qword_10012BFA8);
        *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
        *(_QWORD *)(inited + 32) = 0x4E4F494E55;
        *(_QWORD *)(inited + 40) = 0xE500000000000000;
        *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
        v17 = v33;
        v16 = v34;
        v18 = sub_10000E858(v32, v33);
        *(_QWORD *)(inited + 96) = v17;
        *(_QWORD *)(inited + 104) = *(_QWORD *)(v16 + 8);
        v19 = sub_10001795C((_QWORD *)(inited + 72));
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v19, v18, v17);
        sub_10001A118(inited, 32, 0xE100000000000000, v35);
        swift_setDeallocating(inited);
        sub_10001E778();
        sub_10000E87C(v32);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        {
          sub_10001FA9C();
          v13 = v38;
        }
        v20 = v13[2];
        if (v20 >= v13[3] >> 1)
          sub_10001FA9C();
        v21 = v36;
        v22 = v37;
        v23 = sub_100016184((uint64_t)v35, v36);
        v24 = __chkstk_darwin(v23);
        v26 = (char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v27 + 16))(v26, v24);
        sub_10001F9E8(v20, (uint64_t)v26, (uint64_t *)&v38, v21, v22);
        sub_10000E87C(v35);
        v13 = v38;
        v12 += 40;
        --v11;
      }
      while (v11);
      sub_10001E05C(&v43);
      a3 = v29;
    }
    else
    {
      sub_10001E05C(&v43);
      v13 = _swiftEmptyArrayStorage;
    }
    sub_10001A118((uint64_t)v13, 32, 0xE100000000000000, (uint64_t *)a3);
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t QueryType.alias(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, _QWORD);
  _QWORD *v15;
  _QWORD *v16;
  _BYTE v18[32];
  _QWORD v19[21];
  _QWORD v20[22];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v5);
  sub_1000E0FDC();
  v11 = v19[2];
  v10 = v19[3];
  sub_1000100E0();
  sub_1000E0204(v19);
  sub_1000E0FDC();
  v13 = v20[6];
  v12 = v20[7];
  sub_100016794();
  sub_1000E0204(v20);
  v14 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 32))(v18, a3, a4);
  v16 = v15;
  v15[2] = v11;
  v15[3] = v10;
  swift_bridgeObjectRelease();
  v16[4] = a1;
  v16[5] = a2;
  sub_10000EC68();
  sub_1000059C4();
  v16[6] = v13;
  v16[7] = v12;
  swift_bridgeObjectRelease();
  return v14(v18, 0);
}

uint64_t QueryType.insert(or:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000DD708(a1, a2);
}

SQLite::Insert __swiftcall QueryType.insert(or:_:)(SQLite::OnConflict or, Swift::OpaquePointer _)
{
  uint64_t v2;
  void *v3;
  void *v4;
  SQLite::Insert result;

  v2 = sub_1000DD708(or, _._rawValue);
  result.bindings._rawValue = v4;
  result.template._object = v3;
  result.template._countAndFlagsBits = v2;
  return result;
}

SQLite::Insert __swiftcall QueryType.insertMany(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  SQLite::Insert result;

  v3 = sub_1000DCEC8((uint64_t)a1._rawValue, v1, v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000DCEE0);
  result.bindings._rawValue = v5;
  result.template._object = v4;
  result.template._countAndFlagsBits = v3;
  return result;
}

uint64_t sub_1000DCEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a4(5, a1, a2, a3);
}

void sub_1000DCEE0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t inited;
  unint64_t v25;
  uint64_t v26;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _UNKNOWN **v42;
  Swift::String v43;
  uint64_t v44;
  _UNKNOWN **v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _UNKNOWN **v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t i;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _UNKNOWN **v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  _UNKNOWN **v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v74 = a1;
    v76 = a3;
    v77 = a4;
    v5 = *(_QWORD *)(a2 + 32);
    v78 = a2 + 32;
    v79 = v4;
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      *(_QWORD *)&v83 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_10001FA9C();
      v7 = v5 + 32;
      v8 = _swiftEmptyArrayStorage;
      do
      {
        sub_100019EE4(v7, (uint64_t)&v87);
        sub_100019A60((uint64_t)&v87, (uint64_t)&v92);
        sub_100019F20(&v87);
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_10001FA9C();
          v8 = (_QWORD *)v83;
        }
        v9 = v8[2];
        if (v9 >= v8[3] >> 1)
          sub_10001FA9C();
        v10 = v93;
        v11 = v94;
        v12 = sub_100016184((uint64_t)&v92, v93);
        v13 = __chkstk_darwin(v12);
        v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v16 + 16))(v15, v13);
        sub_10001F9E8(v9, (uint64_t)v15, (uint64_t *)&v83, v10, v11);
        sub_10000E87C(&v92);
        v8 = (_QWORD *)v83;
        v7 += 80;
        --v6;
      }
      while (v6);
      v75 = (_QWORD *)v83;
      swift_bridgeObjectRelease();
    }
    else
    {
      v75 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)&v92 = _swiftEmptyArrayStorage;
    v17 = v79;
    sub_1000D6E34();
    v18 = 0;
    v82 = xmmword_1000EFAE0;
    do
    {
      if (v18 == v17)
        goto LABEL_51;
      v19 = *(_QWORD *)(v78 + 8 * v18);
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        v80 = *(_QWORD *)(v78 + 8 * v18);
        v81 = v18;
        v21 = v19 + 32;
        swift_bridgeObjectRetain();
        v22 = _swiftEmptyArrayStorage;
        while (1)
        {
          sub_100019EE4(v21, (uint64_t)&v87);
          v23 = sub_10001BE7C(&qword_100128D58);
          inited = swift_initStackObject(v23, &v86);
          *(_OWORD *)(inited + 16) = v82;
          sub_100019A60((uint64_t)&v91, inited + 32);
          v25 = v22[2];
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
          if (!isUniquelyReferenced_nonNull_native || (v28 = v22[3] >> 1, v29 = v22, v28 <= v25))
          {
            sub_100019DF4(isUniquelyReferenced_nonNull_native, v25 + 1, 1, v22);
            v29 = v30;
            v28 = v30[3] >> 1;
          }
          v31 = v29[2];
          if (v28 <= v31)
            break;
          v32 = (uint64_t)&v29[5 * v31 + 4];
          sub_10001BE7C(&qword_100129F18);
          swift_arrayInitWithCopy(v32);
          ++v29[2];
          swift_setDeallocating(inited);
          sub_10001E778();
          sub_100019F20(&v87);
          swift_bridgeObjectRelease();
          v21 += 80;
          v22 = v29;
          if (!--v20)
          {
            swift_bridgeObjectRelease();
            v18 = v81;
            goto LABEL_23;
          }
        }
        __break(1u);
LABEL_51:
        __break(1u);
        return;
      }
      v29 = _swiftEmptyArrayStorage;
LABEL_23:
      v33 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0)
      {
        sub_1000D6E34();
        v33 = v92;
      }
      v34 = *(_QWORD *)(v33 + 16);
      if (v34 >= *(_QWORD *)(v33 + 24) >> 1)
      {
        sub_1000D6E34();
        v33 = v92;
      }
      ++v18;
      *(_QWORD *)(v33 + 16) = v34 + 1;
      *(_QWORD *)(v33 + 8 * v34 + 32) = v29;
      v17 = v79;
    }
    while (v18 != v79);
    v35 = sub_10001BE7C(&qword_10012C138);
    v36 = swift_initStackObject(v35, &v85);
    *(_OWORD *)(v36 + 16) = xmmword_1000F14E0;
    v37 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(v36 + 56) = v37;
    *(_QWORD *)(v36 + 64) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v36 + 32) = 0x545245534E49;
    *(_QWORD *)(v36 + 40) = 0xE600000000000000;
    *(_QWORD *)(v36 + 48) = _swiftEmptyArrayStorage;
    if (v74 == 5)
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
    }
    else
    {
      *(_QWORD *)&v87 = 2118223;
      *((_QWORD *)&v87 + 1) = 0xE300000000000000;
      v43._countAndFlagsBits = OnConflict.rawValue.getter(v74);
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v39 = *((_QWORD *)&v87 + 1);
      v38 = v87;
      v42 = &protocol witness table for Expression<A>;
      v41 = v37;
      v40 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)(v36 + 72) = v38;
    *(_QWORD *)(v36 + 80) = v39;
    *(_QWORD *)(v36 + 88) = v40;
    *(_QWORD *)(v36 + 96) = v41;
    *(_QWORD *)(v36 + 136) = v37;
    *(_QWORD *)(v36 + 144) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v36 + 104) = v42;
    *(_QWORD *)(v36 + 112) = 1330925129;
    *(_QWORD *)(v36 + 120) = 0xE400000000000000;
    *(_QWORD *)(v36 + 128) = _swiftEmptyArrayStorage;
    sub_10001CAC4();
    sub_1000180D0();
    sub_10001A118((uint64_t)v75, 8236, 0xE200000000000000, (uint64_t *)&v87);
    v44 = v89;
    v45 = v90;
    v46 = sub_10000E858(&v87, v89);
    v47 = sub_10001C528(v46, 0, 0xE000000000000000, v44, v45);
    v49 = v48;
    v51 = v50;
    sub_10000E87C(&v87);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v36 + 192) = v47;
    *(_QWORD *)(v36 + 200) = v49;
    *(_QWORD *)(v36 + 208) = v51;
    *(_QWORD *)(v36 + 216) = v37;
    *(_QWORD *)(v36 + 256) = v37;
    *(_QWORD *)(v36 + 264) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v36 + 224) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v36 + 232) = 0x5345554C4156;
    *(_QWORD *)(v36 + 240) = 0xE600000000000000;
    *(_QWORD *)(v36 + 248) = _swiftEmptyArrayStorage;
    v52 = *(_QWORD *)(v33 + 16);
    if (v52)
    {
      v81 = v36;
      *(_QWORD *)&v82 = v37;
      *(_QWORD *)&v92 = _swiftEmptyArrayStorage;
      sub_10001FA9C();
      v53 = 0;
      v54 = (_QWORD *)v92;
      do
      {
        swift_bridgeObjectRetain();
        sub_10001A118(v55, 8236, 0xE200000000000000, (uint64_t *)&v87);
        v56 = v89;
        v57 = v90;
        v58 = sub_10000E858(&v87, v89);
        v59 = sub_10001C528(v58, 0, 0xE000000000000000, v56, v57);
        v61 = v60;
        v63 = v62;
        sub_10000E87C(&v87);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_10001FA9C();
          v54 = (_QWORD *)v92;
        }
        v64 = v54[2];
        if (v64 >= v54[3] >> 1)
        {
          sub_10001FA9C();
          v54 = (_QWORD *)v92;
        }
        ++v53;
        *(_QWORD *)&v87 = v59;
        *((_QWORD *)&v87 + 1) = v61;
        v89 = v82;
        v90 = &protocol witness table for Expression<A>;
        v88 = v63;
        v54[2] = v64 + 1;
        sub_100019A48(&v87, (uint64_t)&v54[5 * v64 + 4]);
      }
      while (v52 != v53);
      swift_release();
      v36 = v81;
    }
    else
    {
      swift_release();
      v54 = _swiftEmptyArrayStorage;
    }
    sub_10001A118((uint64_t)v54, 8236, 0xE200000000000000, (uint64_t *)(v36 + 272));
    swift_bridgeObjectRelease();
    sub_10001CACC(v77, v36 + 312);
    v65 = _swiftEmptyArrayStorage;
    for (i = 32; i != 352; i += 40)
    {
      sub_100019FA0(v36 + i, (uint64_t)&v87, &qword_10012C140);
      sub_100019EB8((uint64_t)&v87, (uint64_t)&v83, &qword_10012C140);
      if (v84)
      {
        sub_100019A48(&v83, (uint64_t)&v92);
        sub_100019A48(&v92, (uint64_t)&v83);
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
        {
          sub_100019DF4(0, v65[2] + 1, 1, v65);
          v65 = v69;
        }
        v68 = v65[2];
        v67 = v65[3];
        if (v68 >= v67 >> 1)
        {
          sub_100019DF4(v67 > 1, v68 + 1, 1, v65);
          v65 = v70;
        }
        v65[2] = v68 + 1;
        sub_100019A48(&v83, (uint64_t)&v65[5 * v68 + 4]);
      }
      else
      {
        sub_1000131A8((uint64_t)&v83, &qword_10012C140);
      }
    }
    swift_bridgeObjectRelease();
    sub_10001A118((uint64_t)v65, 32, 0xE100000000000000, (uint64_t *)&v87);
    swift_bridgeObjectRelease();
    v71 = v89;
    v72 = v90;
    sub_10000E858(&v87, v89);
    ((void (*)(uint64_t, _UNKNOWN **))v72[1])(v71, v72);
    sub_10000E87C(&v87);
  }
  else
  {
    QueryType.insert()();
  }
}

SQLite::Insert __swiftcall QueryType.insertMany(or:_:)(SQLite::OnConflict or, Swift::OpaquePointer _)
{
  uint64_t v2;
  void *v3;
  void *v4;
  SQLite::Insert result;

  v2 = sub_1000DD708(or, _._rawValue);
  result.bindings._rawValue = v4;
  result.template._object = v3;
  result.template._countAndFlagsBits = v2;
  return result;
}

uint64_t OnConflict.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000DD740 + 4 * byte_1000F2690[a1]))(0x4543414C504552, 0xE700000000000000);
}

uint64_t sub_1000DD740()
{
  return 0x4B4341424C4C4F52;
}

uint64_t sub_1000DD758()
{
  return 0x54524F4241;
}

uint64_t sub_1000DD76C()
{
  return 1279869254;
}

uint64_t sub_1000DD77C()
{
  return 0x45524F4E4749;
}

#error "1000DD7B8: call analysis failed (funcsize=56)"

#error "1000DD8C0: call analysis failed (funcsize=60)"

void QueryType.upsert(_:onConflictOf:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  _BYTE v25[112];
  uint64_t __src[10];
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[10];
  _QWORD v31[10];
  _QWORD *v32;

  sub_1000100A8();
  v1 = v0;
  v24 = v2;
  swift_bridgeObjectRetain();
  v3 = sub_1000DDD40(sub_1000E01B4, (uint64_t)v23, v1);
  v4 = *((_QWORD *)v3 + 2);
  if (v4)
  {
    v32 = _swiftEmptyArrayStorage;
    sub_1000D6E68(0, v4, 0);
    v5 = (uint64_t)v3 + 32;
    do
    {
      sub_100019EE4(v5, (uint64_t)v30);
      sub_100019A60((uint64_t)v30, (uint64_t)v27);
      v6 = sub_10001C970(0, 0xE000000000000000, 0x646564756C637865, 0xE800000000000000, 34, 0xE100000000000000);
      v8 = v7;
      v31[0] = 0;
      v31[1] = 0xE000000000000000;
      sub_1000E1114((uint64_t)v31, 34, 0xE100000000000000);
      v9._countAndFlagsBits = v6;
      v9._object = v8;
      String.append(_:)(v9);
      sub_10000E038();
      sub_1000E1114((uint64_t)v31, 34, 0xE100000000000000);
      v10 = v31[0];
      v11 = v31[1];
      sub_100019A60((uint64_t)v27, (uint64_t)__src);
      v12 = sub_10001BE7C(&qword_100128D58);
      inited = swift_initStackObject(v12, v25);
      *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
      v14 = sub_10001BE7C(&qword_10012BFA8);
      *(_QWORD *)(inited + 56) = v14;
      *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
      *(_QWORD *)(inited + 32) = v10;
      *(_QWORD *)(inited + 40) = v11;
      *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
      v16 = v28;
      v15 = v29;
      sub_10000E858(v27, v28);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
      *(_QWORD *)(inited + 96) = v14;
      *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
      *(_QWORD *)(inited + 72) = v17;
      *(_QWORD *)(inited + 80) = v18;
      *(_QWORD *)(inited + 88) = v19;
      sub_10001B3D8(inited, 46, &__src[5]);
      sub_1000E10F0();
      sub_1000E0F84();
      memcpy(v31, __src, sizeof(v31));
      sub_10000E87C(v27);
      sub_100019F20(v30);
      v20 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
      {
        sub_1000D6E68(0, v20[2] + 1, 1);
        v20 = v32;
      }
      v22 = v20[2];
      v21 = v20[3];
      if (v22 >= v21 >> 1)
      {
        sub_1000D6E68((char *)(v21 > 1), v22 + 1, 1);
        v20 = v32;
      }
      v20[2] = v22 + 1;
      memcpy(&v20[10 * v22 + 4], v31, 0x50uLL);
      v5 += 80;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000C028();
  }
  QueryType.upsert(_:onConflictOf:set:)();
  sub_10001F604();
  sub_10000E038();
  sub_10001C134();
  sub_100013308();
}

uint64_t sub_1000DDC68(_QWORD *a1, _QWORD *a2)
{
  Swift::String v3;
  Swift::String v4;
  char v6;
  char v7;

  sub_10000E858(a1, a1[3]);
  v3 = Expressible.asSQL()();
  sub_10000E858(a2, a2[3]);
  v4 = Expressible.asSQL()();
  if (v3._countAndFlagsBits == v4._countAndFlagsBits && v3._object == v4._object)
  {
    swift_bridgeObjectRelease_n(v3._object, 2);
    v7 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v3._countAndFlagsBits, v3._object, v4._countAndFlagsBits, v4._object, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v6 ^ 1;
  }
  return v7 & 1;
}

uint64_t (*sub_1000DDD40(uint64_t (*result)(_QWORD *), uint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(_QWORD *);
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE __dst[80];
  _QWORD __src[11];
  _QWORD *v18;

  v4 = a3;
  v5 = _swiftEmptyArrayStorage;
  v18 = _swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = result;
    v8 = 0;
    v9 = a3 + 32;
    v14 = *(_QWORD *)(a3 + 16);
    while (v8 < *(_QWORD *)(v4 + 16))
    {
      sub_100019EE4(v9, (uint64_t)__src);
      v10 = v7(__src);
      if (v3)
      {
        sub_100019F20(__src);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t (*)(_QWORD *))v5;
      }
      if ((v10 & 1) != 0)
      {
        v11 = v7;
        memcpy(__dst, __src, sizeof(__dst));
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          sub_1000D6E68(0, v5[2] + 1, 1);
        v5 = v18;
        v13 = v18[2];
        v12 = v18[3];
        if (v13 >= v12 >> 1)
        {
          sub_1000D6E68((char *)(v12 > 1), v13 + 1, 1);
          v5 = v18;
        }
        v5[2] = v13 + 1;
        result = (uint64_t (*)(_QWORD *))memcpy(&v5[10 * v13 + 4], __dst, 0x50uLL);
        v7 = v11;
        v6 = v14;
        v4 = a3;
      }
      else
      {
        result = (uint64_t (*)(_QWORD *))sub_100019F20(__src);
      }
      ++v8;
      v9 += 80;
      if (v6 == v8)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t (*)(_QWORD *))v5;
  }
  return result;
}

void QueryType.upsert(_:onConflictOf:set:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 *inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  unint64_t v22;
  uint64_t v23;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t i;
  uint64_t v72;
  unint64_t v73;
  char v74;
  _QWORD *v75;
  char v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  char v102[112];
  char v103[72];
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  _UNKNOWN **v108;
  _BYTE v109[48];

  sub_1000100A8();
  v82 = v4;
  v84 = v0;
  v90 = v5;
  v86 = v6;
  v7 = *(_QWORD *)(v3 + 16);
  v88 = v8;
  if (v7)
  {
    v9 = v3 + 32;
    v92 = v109;
    v80 = v3;
    swift_bridgeObjectRetain();
    v10 = _swiftEmptyArrayStorage;
    v11 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_100019EE4(v9, (uint64_t)&v105);
      v12 = sub_10001BE7C(&qword_100128D58);
      inited = (__n128 *)swift_initStackObject(v12, &v104);
      sub_100012240(inited, v14, v15, v16, v17, v18, v19, v20, v80, v82, v84, (uint64_t)v86, v88, v90, (uint64_t)v92, v94, v21);
      sub_100019A60((uint64_t)&v105, v1);
      v22 = v11[2];
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
      if (!isUniquelyReferenced_nonNull_native || (v25 = v11[3] >> 1, v26 = v11, v25 <= v22))
      {
        sub_100019DF4(isUniquelyReferenced_nonNull_native, v22 + 1, 1, v11);
        v26 = v27;
        v25 = v27[3] >> 1;
      }
      v28 = v26[2];
      if (v25 <= v28)
        break;
      v29 = (uint64_t)&v26[5 * v28 + 4];
      sub_10001BE7C(&qword_100129F18);
      sub_1000E0F48(v29);
      ++v26[2];
      v30 = sub_1000100D0();
      v31 = (__n128 *)sub_10001F878(v30, (uint64_t)v103);
      sub_100012240(v31, v32, v33, v34, v35, v36, v37, v38, v81, v83, v85, v87, v89, v91, v93, v95, v39);
      sub_100019A60((uint64_t)v92, v1);
      v40 = v10[2];
      v41 = sub_10000EC68();
      v42 = swift_isUniquelyReferenced_nonNull_native(v41);
      if (!v42 || (v43 = v10[3] >> 1, v44 = v10, v43 <= v40))
      {
        sub_10000EB80(v42, v40 + 1);
        v44 = v45;
        v43 = v45[3] >> 1;
      }
      v46 = v44[2];
      if (v43 <= v46)
        goto LABEL_32;
      v2 = 40;
      sub_1000E0F48((uint64_t)&v44[5 * v46 + 4]);
      ++v44[2];
      sub_1000100D0();
      sub_100019F20(&v105);
      sub_1000117B4();
      swift_bridgeObjectRelease();
      v9 += 80;
      v10 = v44;
      v11 = v26;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    v26 = _swiftEmptyArrayStorage;
    v44 = _swiftEmptyArrayStorage;
LABEL_14:
    v47 = sub_10001BE7C(&qword_10012C138);
    v48 = swift_allocObject(v47, 472, 7);
    *(_OWORD *)(v48 + 16) = xmmword_1000F2680;
    v49 = sub_10001BE7C(&qword_10012BFA8);
    *(_QWORD *)(v48 + 32) = 0x545245534E49;
    *(_QWORD *)(v48 + 40) = 0xE600000000000000;
    *(_QWORD *)(v48 + 48) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v48 + 56) = v49;
    *(_QWORD *)(v48 + 96) = v49;
    *(_QWORD *)(v48 + 104) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v48 + 64) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v48 + 72) = 1330925129;
    *(_QWORD *)(v48 + 80) = 0xE400000000000000;
    *(_QWORD *)(v48 + 88) = _swiftEmptyArrayStorage;
    sub_10001CAC4();
    sub_1000180D0();
    sub_100005A18((uint64_t)v26, (uint64_t *)&v105);
    sub_10000595C();
    sub_10001F12C();
    *(_QWORD *)(v48 + 152) = v48 + 112;
    *(_QWORD *)(v48 + 160) = v2;
    *(_QWORD *)(v48 + 168) = v1;
    *(_QWORD *)(v48 + 176) = v49;
    *(_QWORD *)(v48 + 216) = v49;
    *(_QWORD *)(v48 + 224) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v48 + 184) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v48 + 192) = 0x5345554C4156;
    *(_QWORD *)(v48 + 200) = 0xE600000000000000;
    *(_QWORD *)(v48 + 208) = _swiftEmptyArrayStorage;
    sub_100005A18((uint64_t)v44, (uint64_t *)&v105);
    sub_10000595C();
    sub_10001F12C();
    sub_1000059B0();
    sub_10000C028();
    *(_QWORD *)(v48 + 256) = v49;
    *(_QWORD *)(v48 + 264) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v48 + 232) = v48 + 112;
    *(_QWORD *)(v48 + 240) = v2;
    *(_QWORD *)(v48 + 248) = v1;
    sub_10001CACC(v90, v48 + 272);
    *(_QWORD *)(v48 + 336) = v49;
    *(_QWORD *)(v48 + 344) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v48 + 312) = 0x4C464E4F43204E4FLL;
    *(_QWORD *)(v48 + 320) = 0xEB00000000544349;
    *(_QWORD *)(v48 + 328) = _swiftEmptyArrayStorage;
    v50 = v86[3];
    v51 = v86[4];
    v52 = sub_10000E858(v86, v50);
    v53 = v51;
    v54 = _swiftEmptyArrayStorage;
    *(_QWORD *)(v48 + 352) = sub_10001C528(v52, 0, 0xE000000000000000, v50, v53);
    *(_QWORD *)(v48 + 360) = v55;
    *(_QWORD *)(v48 + 368) = v56;
    *(_QWORD *)(v48 + 376) = v49;
    v96 = v49;
    *(_QWORD *)(v48 + 416) = v49;
    *(_QWORD *)(v48 + 424) = &protocol witness table for Expression<A>;
    *(_QWORD *)(v48 + 384) = &protocol witness table for Expression<A>;
    strcpy((char *)(v48 + 392), "DO UPDATE SET");
    *(_WORD *)(v48 + 406) = -4864;
    *(_QWORD *)(v48 + 408) = _swiftEmptyArrayStorage;
    v57 = v88;
    v58 = *(_QWORD *)(v88 + 16);
    if (v58)
    {
      *(_QWORD *)&v97 = _swiftEmptyArrayStorage;
      sub_1000E0EF4();
      v59 = v88 + 32;
      v54 = _swiftEmptyArrayStorage;
      do
      {
        sub_100019EE4(v59, (uint64_t)&v105);
        v60 = sub_10001BE7C(&qword_100128D58);
        v61 = swift_initStackObject(v60, v102);
        *(_OWORD *)(v61 + 16) = xmmword_1000EFD90;
        sub_100019A60((uint64_t)&v105, v61 + 32);
        sub_100019A60((uint64_t)v109, v61 + 72);
        sub_1000E0EC4(v61, (uint64_t *)&v99);
        v62 = v100;
        v63 = v101;
        sub_10000E858(&v99, v100);
        v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v62, v63);
        v66 = v65;
        v68 = v67;
        sub_10000E87C(&v99);
        sub_10001BFB8();
        sub_1000E1050();
        sub_100019F20(&v105);
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_100018F80();
          v54 = (_QWORD *)v97;
        }
        v57 = v54[2];
        v69 = v54[3];
        if (v57 >= v69 >> 1)
        {
          sub_10000C0D8(v69);
          sub_100018F80();
          v54 = (_QWORD *)v97;
        }
        *(_QWORD *)&v105 = v64;
        *((_QWORD *)&v105 + 1) = v66;
        v107 = v96;
        v108 = &protocol witness table for Expression<A>;
        v106 = v68;
        v54[2] = v57 + 1;
        sub_100019A48(&v105, (uint64_t)&v54[5 * v57 + 4]);
        v59 += 80;
        --v58;
      }
      while (v58);
    }
    sub_100005A18((uint64_t)v54, (uint64_t *)(v48 + 432));
    sub_1000059A8();
    v70 = _swiftEmptyArrayStorage;
    for (i = 32; i != 472; i += 40)
    {
      sub_1000E106C(v48 + i, (uint64_t)&v105);
      sub_10001EDCC((uint64_t)&v105, (uint64_t)&v97);
      if (v98)
      {
        sub_100019A48(&v97, (uint64_t)&v99);
        sub_100019A48(&v99, (uint64_t)&v97);
        if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
        {
          sub_10000EB80(0, v70[2] + 1);
          v70 = v75;
        }
        v72 = v70[2];
        sub_1000E0FBC();
        if (v74)
        {
          v76 = sub_100007424(v73);
          sub_100019DF4(v76, v77, v78, v70);
          v70 = v79;
        }
        v70[2] = v57;
        sub_100019A48(&v97, (uint64_t)&v70[5 * v72 + 4]);
      }
      else
      {
        sub_1000D6888((uint64_t)&v97);
      }
    }
    sub_1000100D0();
    sub_100018F74((uint64_t)v70, (uint64_t *)&v105);
    sub_1000117B4();
    sub_10001AFC8(&v105);
    sub_10001F604();
    sub_10000E87C(&v105);
    sub_10001C134();
    sub_100013308();
  }
}

SQLite::Update __swiftcall QueryType.update(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t i;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[5];
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  SQLite::Update result;

  sub_1000100A8();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = sub_10001BE7C(&qword_10012C138);
  inited = swift_initStackObject(v8, &v49);
  *(_OWORD *)(inited + 16) = xmmword_1000F0670;
  v10 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 32) = 0x455441445055;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v11 = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v10;
  sub_10001CAC4();
  v39 = v5;
  sub_1000180D0();
  *(_QWORD *)(inited + 136) = v10;
  *(_QWORD *)(inited + 144) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 112) = 5522771;
  *(_QWORD *)(inited + 120) = 0xE300000000000000;
  *(_QWORD *)(inited + 128) = _swiftEmptyArrayStorage;
  v12 = *(_QWORD *)(v7 + 16);
  if (v12)
  {
    v37 = v3;
    v38 = v1;
    *(_QWORD *)&v41 = _swiftEmptyArrayStorage;
    sub_1000E0EF4();
    v13 = v7 + 32;
    v11 = _swiftEmptyArrayStorage;
    v40 = xmmword_1000EFD90;
    do
    {
      sub_100019EE4(v13, (uint64_t)v44);
      v14 = sub_10001BE7C(&qword_100128D58);
      v15 = swift_initStackObject(v14, &v43);
      *(_OWORD *)(v15 + 16) = v40;
      sub_100019A60((uint64_t)v44, v15 + 32);
      sub_100019A60((uint64_t)&v45, v15 + 72);
      sub_1000E0EC4(v15, (uint64_t *)&v46);
      sub_100019D18();
      sub_10001E778();
      sub_100019F20(v44);
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      {
        sub_100018F80();
        v11 = (_QWORD *)v41;
      }
      v17 = v11[2];
      v16 = v11[3];
      if (v17 >= v16 >> 1)
      {
        sub_10000C0D8(v16);
        sub_100018F80();
      }
      v18 = v47;
      v19 = v48;
      sub_1000E1064((uint64_t)&v46);
      sub_1000E0EE4();
      __chkstk_darwin(v20);
      v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_100018A00((uint64_t)v22, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
      sub_10001F9E8(v17, (uint64_t)v22, (uint64_t *)&v41, v18, v19);
      sub_10000E87C(&v46);
      v11 = (_QWORD *)v41;
      v13 += 80;
      --v12;
    }
    while (v12);
    v3 = v37;
  }
  sub_100005A18((uint64_t)v11, (uint64_t *)(inited + 152));
  sub_1000101FC();
  v25 = v39;
  sub_10001CACC(v3, inited + 192);
  sub_10000CF78(v25, v3, inited + 232);
  sub_10000CD98(v3, inited + 272);
  v26 = _swiftEmptyArrayStorage;
  for (i = 32; i != 312; i += 40)
  {
    sub_100019FA0(inited + i, (uint64_t)v44, &qword_10012C140);
    sub_100019EB8((uint64_t)v44, (uint64_t)&v41, &qword_10012C140);
    if (v42)
    {
      sub_100019A48(&v41, (uint64_t)&v46);
      if ((sub_10001BF10(&v46, (uint64_t)&v41) & 1) == 0)
      {
        sub_100019BAC();
        v26 = v30;
      }
      v29 = v26[2];
      v28 = v26[3];
      if (v29 >= v28 >> 1)
      {
        v31 = sub_10000C0D8(v28);
        sub_10001CDE0(v31, v29 + 1);
        v26 = v32;
      }
      v26[2] = v29 + 1;
      sub_100019A48(&v41, (uint64_t)&v26[5 * v29 + 4]);
    }
    else
    {
      sub_1000131A8((uint64_t)&v41, &qword_10012C140);
    }
  }
  sub_1000100D0();
  sub_100018F74((uint64_t)v26, v44);
  sub_1000059A8();
  sub_100010068(v44);
  sub_10000E87C(v44);
  sub_100013308();
  result.bindings._rawValue = v35;
  result.template._object = v34;
  result.template._countAndFlagsBits = v33;
  return result;
}

uint64_t QueryType.exists.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[112];
  uint64_t v17[3];

  v4 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v4, v16);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  v6 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 64) = &protocol witness table for Expression<A>;
  strcpy((char *)(inited + 32), "SELECT EXISTS");
  *(_WORD *)(inited + 46) = -4864;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 56) = v6;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 8) + 8))(a1);
  v10 = sub_1000E0CF0(v7, v8, v9, 0, 0xE000000000000000, &qword_10012BFA8);
  v12 = v11;
  v14 = v13;
  sub_1000100D0();
  sub_1000059A8();
  *(_QWORD *)(inited + 96) = v6;
  *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 80) = v12;
  *(_QWORD *)(inited + 88) = v14;
  sub_100018F74(inited, v17);
  swift_setDeallocating(inited);
  sub_10001E778();
  sub_10001AFC8(v17);
  sub_10001F604();
  sub_10000E87C(v17);
  return sub_10001C134();
}

uint64_t QueryType.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = type metadata accessor for Optional(0, a5);
  return QueryType.namespace<A>(_:)(a1, a2, a3, a4, v9);
}

uint64_t QueryType.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_10001F058();
  v6 = v5(v4);
  QueryType.namespace<A>(_:)(v6, v7, v8, a3, (uint64_t)&type metadata for () + 8);
  sub_10001F604();
  sub_1000059B0();
  sub_1000059C4();
  return sub_10001C134();
}

void QueryType.expression.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  _QWORD *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[3];

  sub_100016714();
  v1 = v0;
  v2 = sub_10001BE7C(&qword_10012C138);
  *(_OWORD *)(sub_1000E1104(v2, v3, v4, v5, v6, v7, v8, v9, v59, *((uint64_t *)&v59 + 1), v60, v61, v62, v63, *((uint64_t *)&v63 + 1), v64)+ 16) = xmmword_1000F0670;
  v10 = sub_10001911C();
  sub_1000DC474(v10, v11, v12);
  v13 = sub_10001911C();
  sub_1000DC600(v13, v14, v15);
  sub_10001911C();
  sub_10001CACC(v16, v17);
  sub_10001911C();
  sub_1000DC8A0(v18, v19);
  v20 = sub_10001911C();
  sub_1000DCACC(v20, v21, v22);
  v23 = sub_10001911C();
  sub_10000CF78(v23, v24, v25);
  sub_10001911C();
  sub_10000CD98(v26, v27);
  v36 = _swiftEmptyArrayStorage;
  for (i = 32; i != 312; i += 40)
  {
    sub_100013690(v28, v29, v30, v31, v32, v33, v34, v35, v59, *((uint64_t *)&v59 + 1));
    sub_1000E0F58(v38, v39, v40, v41, v42, v43, v44, v45, v59, *((uint64_t *)&v59 + 1), v60, v61, v62, v63, *((uint64_t *)&v63 + 1), v64, v65, v66, v67[0]);
    if (v61)
    {
      sub_100019A48(&v59, (uint64_t)&v63);
      if ((sub_10001BF10(&v63, (uint64_t)&v59) & 1) == 0)
      {
        sub_100019BAC();
        v36 = v57;
      }
      v54 = v36[2];
      sub_1000E0FBC();
      if (v56)
      {
        sub_10001CDE0(v55 > 1, v1);
        v36 = v58;
      }
      v36[2] = v1;
      v28 = sub_1000D6A64((uint64_t)&v36[5 * v54], v59);
    }
    else
    {
      sub_1000E1010(v46, v47, v48, v49, v50, v51, v52, v53, v59);
    }
  }
  sub_1000117B4();
  sub_100018F74((uint64_t)v36, v67);
  sub_1000059A8();
  sub_10001AFC8(v67);
  sub_10000E87C(v67);
  sub_1000E0FC8();
  sub_1000110FC();
}

uint64_t static View.identifier.getter()
{
  return 1464158550;
}

void sub_1000DEBE8()
{
  const void *v0;
  _BYTE v1[168];

  sub_1000189C4(v1, v0);
  sub_10000FEBC();
}

uint64_t static VirtualTable.identifier.getter()
{
  return 0x204C415554524956;
}

void VirtualTable.clauses.setter(const void *a1)
{
  void *v1;
  _QWORD v3[21];

  sub_1000189C4(v3, v1);
  sub_1000E0204(v3);
  sub_1000189C4(v1, a1);
  sub_1000E1044();
}

void *sub_1000DEC84(const void *a1)
{
  void *v1;
  _QWORD __dst[21];

  memcpy(__dst, v1, sizeof(__dst));
  sub_1000E0204(__dst);
  return memcpy(v1, a1, 0xA8uLL);
}

void sub_1000DECD0()
{
  QueryType.expression.getter();
}

uint64_t Select.template.getter(uint64_t a1, uint64_t a2)
{
  sub_1000133E0(a1, a2);
  return a1;
}

void Select.template.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_1000E0EFC();
  *v1 = v2;
  v1[1] = v0;
  sub_10001000C();
}

void Select.bindings.setter(uint64_t a1)
{
  uint64_t v1;

  sub_1000E0FA0();
  *(_QWORD *)(v1 + 16) = a1;
  sub_10000BFBC();
}

uint64_t (*Update.bindings.modify())(_QWORD, _QWORD)
{
  return Int64.datatypeValue.getter;
}

uint64_t sub_1000DED60(uint64_t a1, uint64_t a2)
{
  sub_1000133E0(a1, a2);
  sub_10000EC68();
  return a1;
}

SQLite::Row_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RowIterator.failableNext()()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  SQLite::Row_optional result;

  v2 = v1;
  v3 = v0;
  v4 = (unint64_t)Statement.failableNext()();
  if (!v5)
  {
    v3 = (void *)v4;
    if (v4)
      sub_10000EC68();
    else
      v2 = 0;
  }
  v6 = v2;
  v7 = v3;
  result.value.values._rawValue = v7;
  result.value.columnNames._rawValue = v6;
  return result;
}

void RowIterator.map<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, unint64_t);
  void (*v5)(uint64_t, unint64_t);
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;

  sub_10000C038();
  v3 = v2;
  v5 = v4;
  __chkstk_darwin(v4);
  sub_10001017C();
  Array.init()(v6);
  v7 = sub_1000E0F78();
  if (v0)
  {
    sub_10000C028();
  }
  else
  {
    for (i = v7; i; i = sub_1000E0F78())
    {
      v9 = sub_10000BFF4();
      v5(v9, i);
      sub_10000EC84();
      sub_1000101FC();
      v10 = type metadata accessor for Array(0, v3);
      Array.append(_:)(v1, v10);
    }
  }
  sub_1000117E8();
}

void *sub_1000DEEE4@<X0>(SQLite::Row_optional *a1@<X8>)
{
  void *result;
  SQLite::Row_optional v3;
  uint64_t v4;

  v3 = RowIterator.failableNext()();
  result = v3.value.columnNames._rawValue;
  if (!v4)
    *a1 = v3;
  return result;
}

uint64_t sub_1000DEF10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000E58A8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1000DEF38(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = *a1;
  v5 = (void *)a1[1];
  v18 = 0;
  v19 = 0xE000000000000000;
  sub_10000E858(a2, a2[3]);
  sub_10001CAC4();
  sub_1000180D0();
  v6 = v16;
  v7 = v17;
  sub_10000E858(v15, v16);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  v10 = v9;
  swift_bridgeObjectRelease(v11);
  v18 = v8;
  v19 = v10;
  sub_10000E87C(v15);
  v12._countAndFlagsBits = 46;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v4;
  v13._object = v5;
  String.append(_:)(v13);
  v14 = v19;
  *a3 = v18;
  a3[1] = v14;
}

void Connection.scalar<A>(_:)(void *__src, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[168];

  memcpy(__dst, __src, sizeof(__dst));
  type metadata accessor for ScalarQuery(0, a2, v4, v5);
  QueryType.expression.getter();
  sub_100019338(v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  if (v2)
  {
    sub_1000059B0();
  }
  else
  {
    v10 = sub_1000059B0();
    sub_10001F2F4(v10);
    sub_1000131A8((uint64_t)__dst, &qword_100129578);
  }
}

void Connection.scalar<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[176];

  sub_10000C038();
  v29 = v0;
  v4 = v3;
  v27[0] = v5;
  v27[1] = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, v7);
  v9 = sub_1000E0EB4(AssociatedTypeWitness);
  v10 = *(_QWORD *)(v9 - 8);
  sub_10001907C();
  __chkstk_darwin(v11);
  v28 = (uint64_t)v27 - v12;
  v13 = *(_QWORD *)(v2 - 8);
  sub_10001907C();
  __chkstk_darwin(v14);
  v16 = (char *)v27 - v15;
  memcpy(v30, v4, 0xA8uLL);
  v17 = sub_10001122C();
  type metadata accessor for ScalarQuery(0, v17, v18, v19);
  QueryType.expression.getter();
  Connection.scalar(_:_:)(v20, v21, v22, (uint64_t)v30);
  if (v1)
  {
    sub_100007398();
    sub_1000059C4();
  }
  else
  {
    sub_100007398();
    sub_1000059C4();
    v23 = sub_10001BE7C(&qword_100129578);
    if (sub_1000E10D0(v28, (uint64_t)v30, v23))
    {
      v24 = v28;
      sub_100014360(v28, 0, 1, v2);
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v16, v24, v2);
      sub_1000E1058((uint64_t)v16);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v2);
    }
    else
    {
      v25 = v28;
      sub_100019D34();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v25, v9);
    }
    v26 = sub_1000E0F68();
    sub_1000E1080(v26);
  }
  sub_1000117E8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];

  sub_10000C038();
  v34 = v0;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v32[1] = v9;
  v32[2] = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, v11);
  v13 = sub_1000E0EB4(AssociatedTypeWitness);
  v14 = *(_QWORD *)(v13 - 8);
  sub_10001907C();
  __chkstk_darwin(v15);
  v33 = (uint64_t)v32 - v16;
  v17 = *(_QWORD *)(v2 - 8);
  sub_10001907C();
  __chkstk_darwin(v18);
  v20 = (char *)v32 - v19;
  v35[0] = v8;
  v35[1] = v6;
  v35[2] = v4;
  v21 = sub_10001122C();
  v24 = type metadata accessor for Select(0, v21, v22, v23);
  ExpressionType.expression.getter(v24, (uint64_t)&protocol witness table for Select<A>);
  Connection.scalar(_:_:)(v25, v26, v27, (uint64_t)v35);
  if (v1)
  {
    sub_100007398();
    sub_1000059C4();
  }
  else
  {
    sub_100007398();
    sub_1000059C4();
    v28 = sub_10001BE7C(&qword_100129578);
    if (sub_1000E10D0(v33, (uint64_t)v35, v28))
    {
      v29 = v33;
      sub_100014360(v33, 0, 1, v2);
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v20, v29, v2);
      sub_1000E1058((uint64_t)v20);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v2);
    }
    else
    {
      v30 = v33;
      sub_100019D34();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v30, v13);
    }
    v31 = sub_1000E0F68();
    sub_1000E1080(v31);
  }
  sub_1000117E8();
}

void Connection.scalar<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a3;
  v5 = type metadata accessor for Select(0, a4, a3, a4);
  ExpressionType.expression.getter(v5, (uint64_t)&protocol witness table for Select<A>);
  sub_100019338(v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  if (v4)
  {
    sub_1000059B0();
  }
  else
  {
    v10 = sub_1000059B0();
    sub_10001F2F4(v10);
    sub_1000131A8((uint64_t)v11, &qword_100129578);
  }
}

uint64_t Connection.pluck(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  _QWORD v16[17];
  uint64_t v17;
  _BYTE v18[24];
  char v19[8];
  uint64_t v20;
  char v21;
  char v22;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000E858(a1, v3);
  v5 = a1[3];
  v6 = a1[4];
  sub_10000E858(a1, v5);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 16))(v16, v5, v6);
  sub_1000E0204(v16);
  sub_100019EB8((uint64_t)&v17, (uint64_t)v18, &qword_10012C270);
  sub_100019EB8((uint64_t)v18, (uint64_t)v19, &qword_10012C270);
  if (v22)
    v7 = 0;
  else
    v7 = v20;
  v8 = v22 | v21;
  v15[3] = v3;
  v15[4] = v4;
  v9 = sub_10001795C(v15);
  sub_1000DC3A8(1, 0, v7, v8 & 1, v3, v4, (uint64_t)v9);
  Connection.prepareRowIterator(_:)(v15);
  v11 = v10;
  sub_10000E87C(v15);
  if (!v1)
  {
    v12 = (unint64_t)Statement.failableNext()();
    if (v13)
    {
      sub_1000101FC();
      sub_1000073B0();
    }
    else
    {
      if (v12)
      {
        sub_10000BFF4();
        v4 = v11;
      }
      else
      {
        v4 = 0;
      }
      sub_1000073B0();
      sub_1000101FC();
    }
  }
  return v4;
}

void sub_1000DF6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sqlite3_int64 *v4;
  uint64_t v5;
  sqlite3 *v6;

  sub_100014468(a1, a2, a3, a4);
  if (!v5)
  {
    swift_release();
    v6 = (sqlite3 *)Connection.handle.getter();
    *v4 = sqlite3_last_insert_rowid(v6);
  }
  sub_10001F5C0();
}

void sub_1000DF6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000DF70C(a1, a2, a3, a4);
}

void sub_1000DF70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  sqlite3 *v6;

  sub_100014468(a1, a2, a3, a4);
  if (!v5)
  {
    swift_release();
    v6 = (sqlite3 *)Connection.handle.getter();
    *v4 = sqlite3_changes(v6);
  }
  sub_10001F5C0();
}

void sub_1000DF748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_100016064(a1);
    if ((v3 & 1) != 0)
      swift_bridgeObjectRetain();
  }
  sub_10000BFBC();
}

SQLite::JoinType_optional __swiftcall JoinType.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10011F248, v2);
  sub_1000117B4();
  if (v3 >= 3)
    return (SQLite::JoinType_optional)3;
  else
    return (SQLite::JoinType_optional)v3;
}

void sub_1000DF7C8(char *a1, unsigned __int8 *a2)
{
  sub_1000E1120(*a1, *a2);
}

void sub_1000DF7D4()
{
  char *v0;

  sub_1000E15C4(*v0);
}

uint64_t sub_1000DF7DC(uint64_t a1)
{
  char *v1;

  return sub_1000E1630(a1, *v1);
}

void sub_1000DF7E4(uint64_t a1)
{
  char *v1;

  sub_1000E1968(a1, *v1);
}

SQLite::JoinType_optional sub_1000DF7EC@<W0>(Swift::String *a1@<X0>, SQLite::JoinType_optional *a2@<X8>)
{
  SQLite::JoinType_optional result;

  result.value = JoinType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void sub_1000DF818(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t v3;

  *a1 = JoinType.rawValue.getter(*v1);
  a1[1] = v3;
  sub_10000BFBC();
}

SQLite::OnConflict_optional __swiftcall OnConflict.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10011F2B0, v2);
  sub_1000117B4();
  if (v3 >= 5)
    return (SQLite::OnConflict_optional)5;
  else
    return (SQLite::OnConflict_optional)v3;
}

void sub_1000DF880(char *a1)
{
  sub_1000E137C(*a1);
}

void sub_1000DF88C()
{
  unsigned __int8 *v0;

  sub_1000E15D0(*v0);
}

void sub_1000DF894(uint64_t a1)
{
  char *v1;

  sub_1000E1744(a1, *v1);
}

void sub_1000DF89C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1000E1904(a1, *v1);
}

SQLite::OnConflict_optional sub_1000DF8A4@<W0>(Swift::String *a1@<X0>, SQLite::OnConflict_optional *a2@<X8>)
{
  SQLite::OnConflict_optional result;

  result.value = OnConflict.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void sub_1000DF8D0(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = OnConflict.rawValue.getter(*v1);
  a1[1] = v3;
  sub_10000BFBC();
}

uint64_t sub_1000DF8F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000932E8();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  result = sub_1000DF95C(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_1000DF95C(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  _QWORD *v5;
  Swift::Int v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v15;
  Swift::Int v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  char *v107;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_10007E3B8(0, v3, 1, a1);
      return result;
    }
    goto LABEL_148;
  }
  if (v3 < -1)
    goto LABEL_147;
  v104 = result;
  v101 = a1;
  if (v3 <= 1)
  {
    v5 = _swiftEmptyArrayStorage;
    v107 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v41 = _swiftEmptyArrayStorage[2];
      v8 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_114;
    }
    v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)(v3 / 2, &type metadata for String);
    *(_QWORD *)(result + 16) = v3 / 2;
    v103 = (_QWORD *)result;
    v107 = (char *)(result + 32);
  }
  v6 = 0;
  v7 = *a1;
  v102 = v7 + 8;
  v8 = (char *)_swiftEmptyArrayStorage;
  v105 = v3;
  while (1)
  {
    v9 = v6++;
    if (v6 >= v3)
      goto LABEL_39;
    v10 = (uint64_t *)(v7 + 16 * v6);
    result = *v10;
    v11 = v10[1];
    v12 = (_QWORD *)(v7 + 16 * v9);
    v13 = v12[1];
    if (result == *v12 && v11 == v13)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_38;
      v15 = 0;
    }
    else
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v11, *v12, v13, 1);
      v15 = result;
      v16 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_30;
    }
    v17 = (uint64_t *)(v102 + 16 * v16);
    do
    {
      result = *(v17 - 1);
      v18 = *v17;
      v19 = (_QWORD *)(v7 + 16 * v6);
      v20 = v19[1];
      if (result == *v19 && v18 == v20)
      {
        if ((v15 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v18, *v19, v20, 1);
        if (((v15 ^ result) & 1) != 0)
          goto LABEL_30;
      }
      v17 += 2;
      v22 = v16 + 1;
      v6 = v16;
      v16 = v22;
    }
    while (v22 < v3);
    v16 = v22;
LABEL_30:
    v6 = v16;
    if ((v15 & 1) != 0)
    {
LABEL_31:
      if (v16 < v9)
        goto LABEL_151;
      if (v9 < v16)
      {
        v23 = 16 * v16;
        v24 = 16 * v9;
        v25 = v16;
        v26 = v9;
        do
        {
          if (v26 != --v25)
          {
            if (!v7)
              goto LABEL_154;
            v27 = v7 + v23;
            v28 = *(_QWORD *)(v7 + v24);
            v29 = *(_QWORD *)(v7 + v24 + 8);
            *(_OWORD *)(v7 + v24) = *(_OWORD *)(v7 + v23 - 16);
            *(_QWORD *)(v27 - 16) = v28;
            *(_QWORD *)(v27 - 8) = v29;
          }
          ++v26;
          v23 -= 16;
          v24 += 16;
        }
        while (v26 < v25);
      }
LABEL_38:
      v6 = v16;
    }
LABEL_39:
    if (v6 < v3)
    {
      if (__OFSUB__(v6, v9))
        goto LABEL_146;
      if (v6 - v9 < v104)
      {
        if (__OFADD__(v9, v104))
          goto LABEL_149;
        if (v9 + v104 >= v3)
          v30 = v3;
        else
          v30 = v9 + v104;
        if (v30 < v9)
          goto LABEL_150;
        if (v6 != v30)
        {
          v31 = (uint64_t *)(v7 + 16 * v6);
          do
          {
            v32 = (uint64_t *)(v7 + 16 * v6);
            result = *v32;
            v33 = v32[1];
            v34 = v9;
            v35 = v31;
            do
            {
              v36 = *(v35 - 2);
              v37 = *(v35 - 1);
              if (result == v36 && v33 == v37)
                break;
              result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v33, v36, v37, 1);
              if ((result & 1) == 0)
                break;
              if (!v7)
                goto LABEL_152;
              result = *v35;
              v33 = v35[1];
              *(_OWORD *)v35 = *((_OWORD *)v35 - 1);
              *(v35 - 1) = v33;
              *(v35 - 2) = result;
              v35 -= 2;
              ++v34;
            }
            while (v6 != v34);
            ++v6;
            v31 += 2;
          }
          while (v6 != v30);
          v6 = v30;
        }
      }
    }
    if (v6 < v9)
    {
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
      return result;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v8);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100092968(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v8 = (char *)result;
    }
    v40 = *((_QWORD *)v8 + 2);
    v39 = *((_QWORD *)v8 + 3);
    v41 = v40 + 1;
    if (v40 >= v39 >> 1)
    {
      result = (uint64_t)sub_100092968((char *)(v39 > 1), v40 + 1, 1, v8);
      v8 = (char *)result;
    }
    *((_QWORD *)v8 + 2) = v41;
    v42 = v8 + 32;
    v43 = &v8[16 * v40 + 32];
    *(_QWORD *)v43 = v9;
    *((_QWORD *)v43 + 1) = v6;
    if (v40)
      break;
    v41 = 1;
LABEL_108:
    v3 = v105;
    if (v6 >= v105)
    {
      v5 = v103;
LABEL_114:
      result = (uint64_t)v8;
      v103 = v5;
      if (v41 < 2)
      {
LABEL_125:
        swift_bridgeObjectRelease(result);
        v103[2] = 0;
        return swift_bridgeObjectRelease(v103);
      }
      v95 = *v101;
      while (1)
      {
        v96 = v41 - 2;
        if (v41 < 2)
          goto LABEL_142;
        if (!v95)
          goto LABEL_155;
        v94 = result;
        v97 = *(_QWORD *)(result + 32 + 16 * v96);
        v98 = *(_QWORD *)(result + 32 + 16 * (v41 - 1) + 8);
        result = sub_1000DFFFC((char *)(v95 + 16 * v97), (char *)(v95 + 16 * *(_QWORD *)(result + 32 + 16 * (v41 - 1))), v95 + 16 * v98, v107);
        if (v1)
          goto LABEL_111;
        if (v98 < v97)
          goto LABEL_143;
        result = swift_isUniquelyReferenced_nonNull_native(v94);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_100092A54(v94);
          v94 = result;
        }
        if (v96 >= *(_QWORD *)(v94 + 16))
          goto LABEL_144;
        v99 = (_QWORD *)(v94 + 32 + 16 * v96);
        *v99 = v97;
        v99[1] = v98;
        v100 = *(_QWORD *)(v94 + 16);
        if (v41 > v100)
          goto LABEL_145;
        memmove((void *)(v94 + 32 + 16 * (v41 - 1)), (const void *)(v94 + 32 + 16 * v41), 16 * (v100 - v41));
        result = v94;
        *(_QWORD *)(v94 + 16) = v100 - 1;
        v41 = v100 - 1;
        if (v100 <= 2)
          goto LABEL_125;
      }
    }
  }
  v106 = v6;
  while (1)
  {
    v44 = v41 - 1;
    if (v41 >= 4)
    {
      v49 = &v42[2 * v41];
      v50 = *(v49 - 8);
      v51 = *(v49 - 7);
      v55 = __OFSUB__(v51, v50);
      v52 = v51 - v50;
      if (v55)
        goto LABEL_130;
      v54 = *(v49 - 6);
      v53 = *(v49 - 5);
      v55 = __OFSUB__(v53, v54);
      v47 = v53 - v54;
      v48 = v55;
      if (v55)
        goto LABEL_131;
      v56 = v41 - 2;
      v57 = &v42[2 * v41 - 4];
      v59 = *v57;
      v58 = v57[1];
      v55 = __OFSUB__(v58, v59);
      v60 = v58 - v59;
      if (v55)
        goto LABEL_132;
      v55 = __OFADD__(v47, v60);
      v61 = v47 + v60;
      if (v55)
        goto LABEL_134;
      if (v61 >= v52)
      {
        v79 = &v42[2 * v44];
        v81 = *v79;
        v80 = v79[1];
        v55 = __OFSUB__(v80, v81);
        v82 = v80 - v81;
        if (v55)
          goto LABEL_140;
        v72 = v47 < v82;
        goto LABEL_97;
      }
    }
    else
    {
      if (v41 != 3)
      {
        v73 = *((_QWORD *)v8 + 4);
        v74 = *((_QWORD *)v8 + 5);
        v55 = __OFSUB__(v74, v73);
        v66 = v74 - v73;
        v67 = v55;
        goto LABEL_91;
      }
      v46 = *((_QWORD *)v8 + 4);
      v45 = *((_QWORD *)v8 + 5);
      v55 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      v48 = v55;
    }
    if ((v48 & 1) != 0)
      goto LABEL_133;
    v56 = v41 - 2;
    v62 = &v42[2 * v41 - 4];
    v64 = *v62;
    v63 = v62[1];
    v65 = __OFSUB__(v63, v64);
    v66 = v63 - v64;
    v67 = v65;
    if (v65)
      goto LABEL_135;
    v68 = &v42[2 * v44];
    v70 = *v68;
    v69 = v68[1];
    v55 = __OFSUB__(v69, v70);
    v71 = v69 - v70;
    if (v55)
      goto LABEL_137;
    if (__OFADD__(v66, v71))
      goto LABEL_139;
    if (v66 + v71 >= v47)
    {
      v72 = v47 < v71;
LABEL_97:
      if (v72)
        v44 = v56;
      goto LABEL_99;
    }
LABEL_91:
    if ((v67 & 1) != 0)
      goto LABEL_136;
    v75 = &v42[2 * v44];
    v77 = *v75;
    v76 = v75[1];
    v55 = __OFSUB__(v76, v77);
    v78 = v76 - v77;
    if (v55)
      goto LABEL_138;
    if (v78 < v66)
      goto LABEL_108;
LABEL_99:
    v83 = v44 - 1;
    if (v44 - 1 >= v41)
    {
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }
    v84 = v7;
    if (!v7)
      goto LABEL_153;
    v85 = v8;
    v86 = &v42[2 * v83];
    v87 = *v86;
    v88 = v42;
    v89 = v44;
    v90 = &v42[2 * v44];
    v91 = v90[1];
    v92 = v84;
    result = sub_1000DFFFC((char *)(v84 + 16 * *v86), (char *)(v84 + 16 * *v90), v84 + 16 * v91, v107);
    if (v1)
      break;
    if (v91 < v87)
      goto LABEL_127;
    if (v89 > *((_QWORD *)v85 + 2))
      goto LABEL_128;
    *v86 = v87;
    v88[2 * v83 + 1] = v91;
    v93 = *((_QWORD *)v85 + 2);
    if (v89 >= v93)
      goto LABEL_129;
    v8 = v85;
    v41 = v93 - 1;
    result = (uint64_t)memmove(v90, v90 + 2, 16 * (v93 - 1 - v89));
    v42 = v88;
    *((_QWORD *)v85 + 2) = v93 - 1;
    v7 = v92;
    v6 = v106;
    if (v93 <= 2)
      goto LABEL_108;
  }
  v94 = (uint64_t)v85;
LABEL_111:
  swift_bridgeObjectRelease(v94);
  v103[2] = 0;
  return swift_bridgeObjectRelease(v103);
}

uint64_t sub_1000DFFFC(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  uint64_t v31;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_10001B888(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v20 = (char *)(a3 - 16);
    while (1)
    {
      v21 = v20 + 16;
      v22 = *((_QWORD *)v12 - 2);
      v23 = *((_QWORD *)v12 - 1);
      v24 = v12 - 16;
      v25 = *((_QWORD *)v6 - 2);
      v26 = *((_QWORD *)v6 - 1);
      v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1) & 1) == 0)
      {
        v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29)
          goto LABEL_43;
      }
      else
      {
        v28 = v21 != v6 || v20 >= v6;
        v24 = v6 - 16;
        v6 -= 16;
        if (!v28)
          goto LABEL_43;
      }
      *(_OWORD *)v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_47;
    }
  }
  sub_10001B888(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *((_QWORD *)v6 + 1);
      v15 = *((_QWORD *)v4 + 1);
      v16 = *(_QWORD *)v6 == *(_QWORD *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v14, *(_QWORD *)v4, v15, 1) & 1) != 0)
        break;
      v17 = v4;
      v16 = v7 == v4;
      v4 += 16;
      if (!v16)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v17 = v6;
    v16 = v7 == v6;
    v6 += 16;
    if (v16)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  v31 = (v12 - v4) / 16;
  if (v6 != v4 || v6 >= &v4[16 * v31])
    memmove(v6, v4, 16 * v31);
  return 1;
}

uint64_t sub_1000E01B4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000DDC68(a1, *(_QWORD **)(v1 + 16)) & 1;
}

uint64_t sub_1000E01D0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for QueryClauses(a2, a1, &type metadata for QueryClauses);
  return a2;
}

_QWORD *sub_1000E0204(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[9];
  v3 = a1[10];
  v4 = a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v8 = a1[15];
  v9 = a1[14];
  v10 = a1[20];
  v11 = a1[16];
  swift_bridgeObjectRelease(a1[8]);
  sub_1000100D0();
  sub_1000059A8();
  sub_1000101FC();
  sub_1000059C4();
  sub_100018818(v2, v3, v4);
  sub_100018848(v5, v6, v9, v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t type metadata accessor for Select(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017998(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Select);
}

unint64_t sub_1000E02D0()
{
  unint64_t result;

  result = qword_10012C278;
  if (!qword_10012C278)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for QueryError, &type metadata for QueryError);
    atomic_store(result, (unint64_t *)&qword_10012C278);
  }
  return result;
}

unint64_t sub_1000E030C(uint64_t a1)
{
  unint64_t result;

  result = sub_1000E0330();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000E0330()
{
  unint64_t result;

  result = qword_10012C340;
  if (!qword_10012C340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RowIterator, &type metadata for RowIterator);
    atomic_store(result, (unint64_t *)&qword_10012C340);
  }
  return result;
}

unint64_t sub_1000E0370()
{
  unint64_t result;

  result = qword_10012C348;
  if (!qword_10012C348)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for JoinType, &type metadata for JoinType);
    atomic_store(result, (unint64_t *)&qword_10012C348);
  }
  return result;
}

unint64_t sub_1000E03B0()
{
  unint64_t result;

  result = qword_10012C350;
  if (!qword_10012C350)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OnConflict, &type metadata for OnConflict);
    atomic_store(result, (unint64_t *)&qword_10012C350);
  }
  return result;
}

void *initializeWithTake for QueryClauses(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

void type metadata accessor for Table()
{
  sub_1000059CC();
}

uint64_t _s6SQLite12QueryClausesVwca_0(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  sub_10001634C(a1, a2);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(v4 + 8);
  swift_bridgeObjectRetain();
  sub_1000100D0();
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(v3 + 24);
  swift_bridgeObjectRetain();
  sub_1000100D0();
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(v3 + 40);
  swift_bridgeObjectRetain();
  sub_1000100D0();
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v2 + 56) = *(_QWORD *)(v3 + 56);
  swift_bridgeObjectRetain();
  sub_1000100D0();
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(v3 + 64);
  swift_bridgeObjectRetain();
  v5 = sub_1000100D0();
  v6 = *(_QWORD *)(v3 + 80);
  if (*(_QWORD *)(v2 + 80))
  {
    if (v6)
    {
      sub_10001A900();
      swift_bridgeObjectRetain();
      sub_1000101FC();
      *(_QWORD *)(v2 + 88) = *(_QWORD *)(v3 + 88);
      swift_bridgeObjectRetain();
      sub_1000100D0();
    }
    else
    {
      sub_10001F3BC(v5, &qword_10012C158);
      sub_10000E0C0();
    }
  }
  else if (v6)
  {
    sub_10001A900();
    *(_QWORD *)(v2 + 88) = *(_QWORD *)(v3 + 88);
    swift_bridgeObjectRetain();
    sub_100013E10();
  }
  else
  {
    v7 = *(_OWORD *)(v3 + 72);
    *(_QWORD *)(v2 + 88) = *(_QWORD *)(v3 + 88);
    *(_OWORD *)(v2 + 72) = v7;
  }
  v8 = (__int128 *)(v2 + 96);
  v10 = (__int128 *)(v3 + 96);
  v9 = *(_QWORD *)(v3 + 96);
  if (!*(_QWORD *)(v2 + 96))
  {
    if (v9)
    {
      sub_10000FEA4(v9);
      if (v2 == -96)
      {
        v13 = *(_OWORD *)(v3 + 104);
        MEMORY[0x18] = *(_QWORD *)(v3 + 120);
        MEMORY[8] = v13;
        goto LABEL_23;
      }
LABEL_18:
      sub_1000E101C();
      *(_QWORD *)(v2 + 120) = *(_QWORD *)(v3 + 120);
      swift_bridgeObjectRetain();
      sub_100013E10();
      goto LABEL_23;
    }
    v15 = *v10;
    *(_OWORD *)(v2 + 112) = *(_OWORD *)(v3 + 112);
LABEL_22:
    *v8 = v15;
    goto LABEL_23;
  }
  if (!v9)
  {
    sub_10001F3BC(0, qword_10012C358);
    v14 = *(_OWORD *)(v3 + 112);
    *v8 = *v10;
    *(_OWORD *)(v2 + 112) = v14;
    goto LABEL_23;
  }
  *(_QWORD *)(v2 + 96) = v9;
  swift_bridgeObjectRetain();
  v11 = sub_1000101FC();
  v8 = (__int128 *)(v2 + 104);
  v12 = *(_QWORD *)(v3 + 112);
  if (!*(_QWORD *)(v2 + 112))
  {
    if (v12)
      goto LABEL_18;
    v15 = *(_OWORD *)(v3 + 104);
    *(_QWORD *)(v2 + 120) = *(_QWORD *)(v3 + 120);
    goto LABEL_22;
  }
  if (v12)
  {
    sub_1000E101C();
    swift_bridgeObjectRetain();
    sub_1000101FC();
    *(_QWORD *)(v2 + 120) = *(_QWORD *)(v3 + 120);
    swift_bridgeObjectRetain();
    sub_1000100D0();
  }
  else
  {
    sub_10001F3BC(v11, &qword_10012C158);
    sub_10000E0C0();
  }
LABEL_23:
  *(_QWORD *)(v2 + 128) = *(_QWORD *)(v3 + 128);
  swift_bridgeObjectRetain();
  sub_1000100D0();
  v16 = *(_OWORD *)(v3 + 136);
  *(_WORD *)(v2 + 152) = *(_WORD *)(v3 + 152);
  *(_OWORD *)(v2 + 136) = v16;
  *(_QWORD *)(v2 + 160) = *(_QWORD *)(v3 + 160);
  swift_bridgeObjectRetain();
  sub_1000059A8();
  return v2;
}

void _s6SQLite12QueryClausesVwta_0(_BYTE *a1, _BYTE *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  sub_10001634C(a1, a2);
  v2[1] = *(_QWORD *)(v4 + 8);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v3 + 24);
  v2[2] = *(_QWORD *)(v3 + 16);
  v2[3] = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v3 + 40);
  v2[4] = *(_QWORD *)(v3 + 32);
  v2[5] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v3 + 56);
  v2[6] = *(_QWORD *)(v3 + 48);
  v2[7] = v7;
  swift_bridgeObjectRelease();
  v2[8] = *(_QWORD *)(v3 + 64);
  swift_bridgeObjectRelease();
  v8 = v2[10];
  if (v8)
  {
    v9 = *(_QWORD *)(v3 + 80);
    if (v9)
    {
      v2[9] = *(_QWORD *)(v3 + 72);
      v2[10] = v9;
      swift_bridgeObjectRelease();
      v2[11] = *(_QWORD *)(v3 + 88);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_10001F3BC(v8, &qword_10012C158);
  }
  sub_1000E0F8C();
LABEL_6:
  v10 = v2[12];
  v11 = *(_QWORD *)(v3 + 96);
  if (!v10)
  {
LABEL_12:
    v14 = *(_OWORD *)(v3 + 112);
    *((_OWORD *)v2 + 6) = *(_OWORD *)(v3 + 96);
    *((_OWORD *)v2 + 7) = v14;
    goto LABEL_15;
  }
  if (!v11)
  {
    sub_10001F3BC(v10, qword_10012C358);
    goto LABEL_12;
  }
  v2[12] = v11;
  swift_bridgeObjectRelease();
  v12 = v2[14];
  if (!v12)
  {
LABEL_14:
    sub_1000E0F8C();
    goto LABEL_15;
  }
  v13 = *(_QWORD *)(v3 + 112);
  if (!v13)
  {
    sub_10001F3BC(v12, &qword_10012C158);
    goto LABEL_14;
  }
  v2[13] = *(_QWORD *)(v3 + 104);
  v2[14] = v13;
  swift_bridgeObjectRelease();
  v2[15] = *(_QWORD *)(v3 + 120);
  swift_bridgeObjectRelease();
LABEL_15:
  v2[16] = *(_QWORD *)(v3 + 128);
  swift_bridgeObjectRelease();
  sub_1000E0FA8();
  v2[20] = *(_QWORD *)(v3 + 160);
  swift_bridgeObjectRelease();
  sub_10001000C();
}

void type metadata accessor for View()
{
  sub_1000059CC();
}

void type metadata accessor for VirtualTable()
{
  sub_1000059CC();
}

uint64_t sub_1000E07D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

void type metadata accessor for Insert()
{
  sub_1000059CC();
}

void type metadata accessor for Update()
{
  sub_1000059CC();
}

uint64_t _s6SQLite6InsertVwxx_0(uint64_t a1)
{
  sub_100035E24(a1);
  return sub_1000179D0(*(_QWORD *)(a1 + 16));
}

void _s6SQLite6InsertVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000E10A4(a1, a2);
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(v4 + 8);
  swift_bridgeObjectRetain();
  sub_1000100D0();
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  sub_1000117B4();
  sub_10001000C();
}

void _s6SQLite6InsertVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = sub_1000E10A4(a1, a2);
  sub_100035E24((uint64_t)v4);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(v2 + 8);
  swift_bridgeObjectRelease();
  sub_10000BFBC();
}

uint64_t _s6SQLite6InsertVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return sub_1000E110C(-1);
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return sub_1000E110C(v2);
}

uint64_t sub_1000E08D8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return sub_10001E56C(result, a2);
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      return sub_10001E56C(result, a2);
  }
  return result;
}

void type metadata accessor for Delete()
{
  sub_1000059CC();
}

uint64_t destroy for RowIterator(_QWORD *a1)
{
  swift_release(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

void _s6SQLite11RowIteratorVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_retain();
  sub_1000101B0();
  sub_10000BFBC();
}

uint64_t *assignWithCopy for RowIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void assignWithTake for RowIterator(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  sub_1000E0A2C(a1, a2, a3, (void (*)(_QWORD))&_swift_release);
}

void type metadata accessor for RowIterator()
{
  sub_1000059CC();
}

void sub_1000E09F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  sub_1000101B0();
  sub_10000BFBC();
}

void assignWithTake for Row(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  sub_1000E0A2C(a1, a2, a3, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1000E0A2C(_QWORD *a1, _OWORD *a2, uint64_t a3, void (*a4)(_QWORD))
{
  a4(*a1);
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  sub_10000BFBC();
}

uint64_t _s6SQLite11RowIteratorVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return sub_1000E110C(-1);
  if (a2 < 0 && *((_BYTE *)a1 + 16))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return sub_1000E110C(v2);
}

void type metadata accessor for Row()
{
  sub_1000059CC();
}

uint64_t storeEnumTagSinglePayload for JoinType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000E0AF8 + 4 * byte_1000F269A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E0B2C + 4 * byte_1000F2695[v4]))();
}

uint64_t sub_1000E0B2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0B34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E0B3CLL);
  return result;
}

uint64_t sub_1000E0B48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E0B50);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000E0B54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0B5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for JoinType()
{
  sub_1000059CC();
}

uint64_t storeEnumTagSinglePayload for OnConflict(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000E0BC0 + 4 * byte_1000F26A4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000E0BF4 + 4 * byte_1000F269F[v4]))();
}

uint64_t sub_1000E0BF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0BFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E0C04);
  return result;
}

uint64_t sub_1000E0C10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E0C18);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000E0C1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0C24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for OnConflict()
{
  sub_1000059CC();
}

uint64_t _s6SQLite12QueryClausesVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return sub_1000E110C(-1);
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return sub_1000E110C(v2);
}

uint64_t sub_1000E0C78(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return sub_10001E56C(result, a2);
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      return sub_10001E56C(result, a2);
  }
  return result;
}

void type metadata accessor for QueryClauses()
{
  sub_1000059CC();
}

uint64_t sub_1000E0CE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000E0CF0(a1, a2, a3, a4, a5, &qword_100129560);
}

uint64_t sub_1000E0CF0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v19 = sub_10001BE7C(a6);
  v20 = &protocol witness table for Expression<A>;
  v16 = a1;
  v17 = a2;
  v18 = a3;
  sub_10000BFF4();
  sub_100013E10();
  sub_10000EC68();
  v10._countAndFlagsBits = 40;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  sub_10000E858(&v16, v19);
  v11 = v16;
  v12 = v17;
  sub_10000BFF4();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  sub_1000101FC();
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  sub_10000EC68();
  sub_10000E87C(&v16);
  return a4;
}

uint64_t sub_1000E0DD4()
{
  uint64_t v0;

  sub_1000E0FA0();
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E0DF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000E0E04()
{
  sub_10001B71C();
}

void sub_1000E0E18(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_1000DEF38(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t *sub_1000E0E34(uint64_t *a1)
{
  sub_1000182C8(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

double sub_1000E0E88()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 + 32) = 0;
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  return result;
}

uint64_t sub_1000E0E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  return sub_10000762C(v6, v10, v7, v9, v8, a6);
}

uint64_t sub_1000E0EB4(uint64_t a1)
{
  return type metadata accessor for Optional(0, a1);
}

void sub_1000E0EC4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10001A118(a1, 2112800, 0xE300000000000000, a2);
}

uint64_t sub_1000E0ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000E0EF4()
{
  sub_10001FA9C();
}

uint64_t sub_1000E0EFC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
}

uint64_t sub_1000E0F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000E0F38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  return sub_10001914C(a1, a2, v4, v3, a3);
}

uint64_t sub_1000E0F48(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

void sub_1000E0F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t *v19;

  sub_100019EB8((uint64_t)&a19, (uint64_t)&a9, v19);
}

uint64_t sub_1000E0F68()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getAssociatedTypeWitness(0, v1, v0);
}

unint64_t sub_1000E0F78()
{
  return (unint64_t)Statement.failableNext()();
}

uint64_t sub_1000E0F84()
{
  return sub_10001E778();
}

__n128 sub_1000E0F8C()
{
  __n128 *v0;
  __n128 *v1;
  __n128 result;

  result = *v1;
  *v0 = *v1;
  v0[1].n128_u64[0] = v1[1].n128_u64[0];
  return result;
}

uint64_t sub_1000E0FA0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
}

__n128 sub_1000E0FA8()
{
  uint64_t v0;
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 136);
  *(__n128 *)(v0 + 136) = result;
  *(_WORD *)(v0 + 152) = *(_WORD *)(v1 + 152);
  return result;
}

uint64_t sub_1000E0FC8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000E0FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

__n128 sub_1000E0FE8@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v1[1].n128_u64[0];
  return result;
}

uint64_t *sub_1000E0FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

void sub_1000E1010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;

  sub_1000131A8((uint64_t)&a9, v9);
}

uint64_t sub_1000E101C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  *(_QWORD *)(v0 + 104) = *(_QWORD *)(v1 + 104);
  result = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v0 + 112) = result;
  return result;
}

void sub_1000E1030(uint64_t a1@<X8>)
{
  _QWORD *v1;

  v1[8] = a1;
  v1[4] = 42;
  v1[5] = 0xE100000000000000;
}

uint64_t sub_1000E1050()
{
  return sub_10001E778();
}

uint64_t sub_1000E1058(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v2, v3);
}

uint64_t sub_1000E1064(uint64_t a1)
{
  uint64_t v1;

  return sub_100016184(a1, v1);
}

void sub_1000E106C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100019FA0(a1, a2, v2);
}

uint64_t sub_1000E1074()
{
  return sub_10001CAC4();
}

uint64_t sub_1000E1080(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_100014360(v2, v1, 1, a1);
}

_QWORD *sub_1000E10A4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_1000E10B8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

void sub_1000E10C4()
{
  sub_1000180D0();
}

uint64_t sub_1000E10D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_dynamicCast(a1, a2, a3, v3, 6);
}

uint64_t sub_1000E10DC()
{
  uint64_t v0;

  return Statement.bind(_:)(v0);
}

uint64_t sub_1000E10E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  return sub_100019350(a1, a2, a3, v3);
}

uint64_t sub_1000E10F0()
{
  uint64_t v0;

  return swift_setDeallocating(v0);
}

void sub_1000E10F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Connection.prepare(_:_:)(a1, a2, a3);
}

uint64_t sub_1000E1104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  return swift_initStackObject(a1, va);
}

uint64_t sub_1000E110C@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t sub_1000E1114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return Character.write<A>(to:)(a1, a2, a3, v3, v4);
}

void sub_1000E1120(char a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0x53534F5243;
  if (a1)
  {
    sub_10001CE9C();
    if (v3)
      v5 = 0x52454E4E49;
    else
      v5 = 0x54554F205446454CLL;
    if (v3)
      v6 = v4;
    else
      v6 = 0xEA00000000005245;
  }
  else
  {
    v6 = 0xE500000000000000;
    v5 = 0x53534F5243;
  }
  if ((_BYTE)a2)
  {
    sub_10001CE9C();
    if (v7)
      v2 = 0x52454E4E49;
    else
      v2 = 0x54554F205446454CLL;
    if (v7)
      v9 = v8;
    else
      v9 = 0xEA00000000005245;
  }
  else
  {
    v9 = 0xE500000000000000;
  }
  if (v5 != v2 || v6 != v9)
    sub_100013644(v5, a2, v2);
  sub_1000117B4();
  sub_1000059A8();
  sub_10001000C();
}

void sub_1000E11FC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E1258(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000E12D8 + 4 * byte_1000F2A7D[a2]))(0x5443495254534552);
}

void sub_1000E12D8(uint64_t a1)
{
  uint64_t v1;

  if (a1 != 0x5443495254534552 || v1 != 0xE800000000000000)
    _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x5443495254534552, 0xE800000000000000, 0);
  sub_1000059A8();
  sub_1000117B4();
  sub_10001000C();
}

void sub_1000E137C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E13CC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000E1438 + 4 * byte_1000F2A87[a2]))(0x4B4341424C4C4F52);
}

void sub_1000E1438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 != 0x4B4341424C4C4F52 || v2 != 0xE800000000000000)
    sub_100013644(a1, a2, 0x4B4341424C4C4F52);
  sub_1000117B4();
  sub_1000059A8();
  sub_10001000C();
}

uint64_t sub_1000E14B8(char a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v7;

  v2 = 0xE900000000000045;
  v3 = 0x4445525245464544;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x54414944454D4D49;
    else
      v4 = 0x564953554C435845;
    v5 = 0xE900000000000045;
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x4445525245464544;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x54414944454D4D49;
    else
      v3 = 0x564953554C435845;
  }
  else
  {
    v2 = 0xE800000000000000;
  }
  if (v4 == v3 && v5 == v2)
  {
    v7 = 1;
    v2 = v5;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v2);
  return v7 & 1;
}

void sub_1000E15B8(uint64_t a1)
{
  sub_1000E15DC(a1, (uint64_t (*)(uint64_t))TableBuilder.Dependency.rawValue.getter);
}

void sub_1000E15C4(char a1)
{
  sub_1000E1968(0, a1);
}

void sub_1000E15D0(uint64_t a1)
{
  sub_1000E15DC(a1, (uint64_t (*)(uint64_t))OnConflict.rawValue.getter);
}

void sub_1000E15DC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  _BYTE v5[72];

  sub_100016660(a1);
  v4 = a2(a1);
  sub_10001DDF8((uint64_t)v5, v4);
  sub_1000117B4();
  sub_10001333C();
  sub_100018C30();
}

Swift::Int sub_1000E1624(char a1)
{
  return sub_1000E1860(0, a1);
}

uint64_t sub_1000E1630(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    sub_10001CE9C();
    if (v3)
      v6 = 0x52454E4E49;
    else
      v6 = 0x54554F205446454CLL;
    if (v3)
      v2 = v5;
    else
      v2 = 0xEA00000000005245;
  }
  else
  {
    sub_100018EA4();
  }
  sub_10001DDF8(v4, v6);
  return sub_1000179D0(v2);
}

void sub_1000E168C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E16D0(uint64_t a1)
{
  sub_10001DDF8(a1, 0x5443495254534552);
  return sub_1000179D0(0xE800000000000000);
}

void sub_1000E1744(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E1784(uint64_t a1)
{
  sub_10001DDF8(a1, 0x4B4341424C4C4F52);
  return sub_1000179D0(0xE800000000000000);
}

uint64_t sub_1000E17E0(uint64_t a1, char a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 == 1)
      v2 = 0x54414944454D4D49;
    else
      v2 = 0x564953554C435845;
    v3 = 0xE900000000000045;
  }
  else
  {
    v3 = 0xE800000000000000;
    v2 = 0x4445525245464544;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000E1860(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x54414944454D4D49;
    else
      v3 = 0x564953554C435845;
    v4 = 0xE900000000000045;
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x4445525245464544;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000E1904(uint64_t a1, uint64_t a2)
{
  sub_1000E191C(a1, a2, (uint64_t (*)(uint64_t))OnConflict.rawValue.getter);
}

void sub_1000E1910(uint64_t a1, uint64_t a2)
{
  sub_1000E191C(a1, a2, (uint64_t (*)(uint64_t))TableBuilder.Dependency.rawValue.getter);
}

void sub_1000E191C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v5 = a3(a2);
  sub_10001DDF8((uint64_t)v6, v5);
  sub_1000117B4();
  sub_10001333C();
  sub_100018C30();
}

void sub_1000E1968(uint64_t a1, char a2)
{
  char v3;
  uint64_t v4;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  if (a2)
  {
    sub_10001CE9C();
    if (v3)
      v4 = 0x52454E4E49;
    else
      v4 = 0x54554F205446454CLL;
  }
  else
  {
    sub_100018EA4();
  }
  sub_10001DDF8((uint64_t)v5, v4);
  sub_1000117B4();
  sub_10001333C();
  sub_100018C30();
}

uint64_t sub_1000E19F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  _OWORD v12[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1000273C0((_OWORD *)a1, v12);
    return sub_1000E40D0(v12, a2);
  }
  else
  {
    sub_10001316C(a1, &qword_100128A40);
    v5 = sub_1000E6620(a2);
    if ((v6 & 1) != 0)
    {
      v7 = v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v11 = *v2;
      v9 = *v2;
      *v2 = 0x8000000000000000;
      v10 = *(_QWORD *)(v9 + 24);
      sub_10001BE7C(&qword_10012C598);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
      sub_1000273C0((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v7), v12);
      _NativeDictionary._delete(at:)(v7, v11, &type metadata for Int, (char *)&type metadata for Any + 8);
      *v2 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v12, 0, sizeof(v12));
    }
    return sub_10001316C((uint64_t)v12, &qword_100128A40);
  }
}

void Connection.scalar(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1000E2750(a1, a2, a3, (void (*)(uint64_t))Statement.bind(_:), a4);
}

{
  Connection.scalar(_:_:)(a1, a2, a3, a4);
}

{
  sub_1000E2750(a1, a2, a3, (void (*)(uint64_t))Statement.bind(_:), a4);
}

sqlite3_int64 Connection.lastInsertRowid.getter()
{
  sqlite3 *v0;

  v0 = (sqlite3 *)Connection.handle.getter();
  return sqlite3_last_insert_rowid(v0);
}

uint64_t sub_1000E1B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  sqlite3 *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[6];
  uint64_t v16;
  char v17;
  uint64_t v18;

  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  sub_10001D33C();
  if (qword_10012BF88 != -1)
    swift_once(&qword_10012BF88, sub_1000E3DF4);
  static OS_dispatch_queue.getSpecific<A>(key:)(&v16);
  v8 = v16;
  v9 = v17;
  v10 = sub_10001D378();
  if ((v9 & 1) != 0 || v8 != v10)
  {
    v13 = (uint64_t)*(id *)(a1 + 104);
    OS_dispatch_queue.sync<A>(execute:)(&v18, sub_1000E48B0, v15);
    if (v4)
    {
      swift_bridgeObjectRelease(a4);
      swift_release();

      return v13;
    }
    swift_release();

    v13 = v18;
LABEL_11:
    swift_bridgeObjectRelease(a4);
    return v13;
  }
  v11 = (sqlite3 *)Connection.handle.getter();
  v12 = String.utf8CString.getter(a3, a4);
  v13 = sqlite3_exec(v11, (const char *)(v12 + 32), 0, 0, 0);
  swift_release();
  sub_10001D77C(v13, 0);
  if (!v4)
  {
    swift_release();
    goto LABEL_11;
  }
  swift_bridgeObjectRelease(a4);
  swift_release();
  return v13;
}

uint64_t Connection.changes.getter()
{
  sqlite3 *v0;

  v0 = (sqlite3 *)Connection.handle.getter();
  return sqlite3_changes(v0);
}

uint64_t sub_1000E1D04(int a1)
{
  uint64_t result;
  Swift::String v2;
  void *object;

  switch(a1)
  {
    case 9:
      return 2;
    case 18:
      return 0;
    case 23:
      return 1;
  }
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ALL, 0x80000001000F6FB0, "SQLite/Connection.swift", 23, 2);
  __break(1u);
  return result;
}

void Connection.Operation.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
  sub_10000BFBC();
}

void Connection.Operation.hashValue.getter(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = a1;
  sub_100016660(a1);
  Hasher._combine(_:)(v1);
  sub_10001333C();
  sub_100018C30();
}

void sub_1000E1E38()
{
  unsigned __int8 *v0;

  Connection.Operation.hashValue.getter(*v0);
}

void sub_1000E1E40(uint64_t a1)
{
  unsigned __int8 *v1;

  Connection.Operation.hash(into:)(a1, *v1);
}

void Connection.__allocating_init(_:readonly:)()
{
  sub_1000118EC();
  sub_10001CDEC();
  sub_10001B110();
}

uint64_t Connection.init(_:readonly:)(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  sqlite3 **v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  char v40;
  uint64_t v41;

  v36 = a2;
  v38 = a3;
  v37 = a1;
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  sub_1000BE920();
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v3 + 16) = 0u;
  v12 = (sqlite3 **)(v3 + 16);
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v3 + 96) = &_swiftEmptyDictionarySingleton;
  sub_10001D33C();
  v39 = _swiftEmptyArrayStorage;
  v13 = sub_100053B8C();
  v14 = sub_10001BE7C((uint64_t *)&unk_1001289C0);
  v15 = sub_100035D2C();
  v16 = dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v14, v15, v9, v13);
  static DispatchQoS.unspecified.getter(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v34);
  *(_QWORD *)(v3 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x442E6574694C5153, 0xEF65736162617461, v4, v11, v7, 0);
  *(_QWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 120) = 1;
  sub_1000E4944();
  v19 = v37;
  v20 = 0xE000000000000000;
  if (v36 == 1)
    v19 = 0;
  else
    v20 = v36;
  if (v36)
    v21 = v19;
  else
    v21 = v18;
  if (v36)
    v22 = v20;
  else
    v22 = v17;
  if ((v38 & 1) != 0)
    v23 = 65537;
  else
    v23 = 65542;
  v24 = String.utf8CString.getter(v21, v22);
  sub_1000117B4();
  sub_10001F508((uint64_t)v12, (uint64_t)&v39);
  v25 = v35;
  v26 = sqlite3_open_v2((const char *)(v24 + 32), v12, v23, 0);
  swift_endAccess(&v39);
  sub_1000058DC();
  v27 = v41;
  sub_10001D77C(v26, 0);
  if (v27)
  {
    swift_release();
  }
  else
  {
    v28 = qword_10012BF88;
    v29 = *(id *)(v25 + 104);
    if (v28 != -1)
      swift_once(&qword_10012BF88, sub_1000E3DF4);
    v30 = qword_10012C480;
    v39 = (_QWORD *)sub_10001D378();
    v40 = 0;
    OS_dispatch_queue.setSpecific<A>(key:value:)(v30, &v39);

  }
  return v25;
}

void Connection.Location.description.getter()
{
  uint64_t v0;
  unint64_t v1;

  sub_1000E4944();
  sub_10006AFAC(v0, v1);
  sub_10000BFBC();
}

uint64_t Connection.deinit()
{
  uint64_t v0;
  uint64_t v1;
  sqlite3 *v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v1 = v0;
  v2 = (sqlite3 *)Connection.handle.getter();
  sqlite3_close(v2);
  sub_100017758(v0 + 24, (uint64_t)v8, 0);
  v3 = *(void (**)(uint64_t))(v0 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 32);
    v5 = sub_1000179D8();
    v3(v5);
    sub_10007ECC8((uint64_t)v3, v4);
    v6 = *(_QWORD *)(v1 + 24);
  }
  else
  {
    v6 = 0;
  }
  sub_10007ECC8(v6, *(_QWORD *)(v1 + 32));
  _Block_release(*(const void **)(v1 + 48));
  _Block_release(*(const void **)(v1 + 56));
  _Block_release(*(const void **)(v1 + 64));
  _Block_release(*(const void **)(v1 + 72));
  _Block_release(*(const void **)(v1 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v1;
}

uint64_t Connection.__deallocating_deinit()
{
  uint64_t v0;

  Connection.deinit();
  return swift_deallocClassInstance(v0, 121, 7);
}

uint64_t Connection.onClose.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  sub_100017758(v0 + 24, (uint64_t)v3, 0);
  v1 = *(_QWORD *)(v0 + 24);
  sub_10005A6C8(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

void Connection.onClose.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  sub_100018980();
  sub_100017758(v1 + 24, (uint64_t)v5, 1);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v0;
  sub_10007ECC8(v3, v4);
  sub_10001C1DC();
}

void Connection.onClose.modify(uint64_t a1)
{
  uint64_t v1;

  sub_100017758(v1 + 24, a1, 33);
  sub_10000BFBC();
}

BOOL Connection.readonly.getter()
{
  sqlite3 *v0;

  v0 = (sqlite3 *)Connection.handle.getter();
  return sqlite3_db_readonly(v0, 0) == 1;
}

uint64_t Connection.totalChanges.getter()
{
  sqlite3 *v0;

  v0 = (sqlite3 *)Connection.handle.getter();
  return sqlite3_total_changes(v0);
}

unint64_t Connection.userVersion.getter()
{
  uint64_t v0;
  unsigned __int8 v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];
  uint64_t v6;

  Connection.scalar(_:_:)(0xD000000000000013, 0x80000001000F4920, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v5);
  if (!v6)
  {
    sub_10001316C((uint64_t)v5, &qword_100129578);
    goto LABEL_2;
  }
  v3 = sub_10001BE7C((uint64_t *)&unk_10012A020);
  result = swift_dynamicCast(&v4, v5, v3, &type metadata for Int64, 6);
  if ((result & 1) == 0)
  {
LABEL_2:
    v0 = 0;
    v1 = 1;
LABEL_3:
    v5[0] = v1;
    return v0 | ((unint64_t)v1 << 32);
  }
  if (v4 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v4 <= 0x7FFFFFFF)
  {
    v1 = 0;
    v0 = v4;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void Connection.userVersion.setter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  Connection.run(_:_:)(0xD000000000000016, 0x80000001000F6DD0, (uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001C1DC();
}

void Connection.userVersion.modify(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = Connection.userVersion.getter();
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = BYTE4(v3) & 1;
  sub_10000BFBC();
}

void sub_1000E2578()
{
  Connection.userVersion.setter();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.execute(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  sub_1000179D8();
  sub_10000EC68();
  sub_1000E1B48(v1, v1, countAndFlagsBits, (uint64_t)object);
}

const char *sub_1000E25E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  sqlite3 *v7;
  uint64_t v8;
  uint64_t v9;
  const char *result;

  v7 = (sqlite3 *)Connection.handle.getter();
  v8 = String.utf8CString.getter(a1, a2);
  v9 = sqlite3_exec(v7, (const char *)(v8 + 32), 0, 0, 0);
  swift_release();
  result = sub_10001D77C(v9, 0);
  if (!v3)
    *a3 = v9;
  return result;
}

void sub_1000E2694(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;

  Connection.prepare(_:_:)(a1, a2, (uint64_t)_swiftEmptyArrayStorage);
  if (!v4)
  {
    a4(a3);
    sub_1000073B0();
  }
}

void Connection.vacuum()()
{
  Connection.run(_:_:)(0x4D5555434156, 0xE600000000000000, (uint64_t)_swiftEmptyArrayStorage);
}

void sub_1000E2750(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  Connection.prepare(_:_:)(a1, a2, (uint64_t)_swiftEmptyArrayStorage);
  if (!v5)
  {
    a4(a3);
    Statement.scalar(_:)((uint64_t)_swiftEmptyArrayStorage, a5);
    sub_10001105C();
    sub_1000073B0();
  }
}

SQLite::Connection::TransactionMode_optional __swiftcall Connection.TransactionMode.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10011F348, v2);
  sub_1000117B4();
  if (v3 >= 3)
    return (SQLite::Connection::TransactionMode_optional)3;
  else
    return (SQLite::Connection::TransactionMode_optional)v3;
}

uint64_t Connection.TransactionMode.rawValue.getter(char a1)
{
  if (!a1)
    return 0x4445525245464544;
  if (a1 == 1)
    return 0x54414944454D4D49;
  return 0x564953554C435845;
}

uint64_t sub_1000E2874(char *a1, char *a2)
{
  return sub_1000E14B8(*a1, *a2);
}

Swift::Int sub_1000E2880()
{
  char *v0;

  return sub_1000E1624(*v0);
}

uint64_t sub_1000E2888(uint64_t a1)
{
  char *v1;

  return sub_1000E17E0(a1, *v1);
}

Swift::Int sub_1000E2890(uint64_t a1)
{
  char *v1;

  return sub_1000E1860(a1, *v1);
}

SQLite::Connection::TransactionMode_optional sub_1000E2898@<W0>(Swift::String *a1@<X0>, SQLite::Connection::TransactionMode_optional *a2@<X8>)
{
  SQLite::Connection::TransactionMode_optional result;

  result.value = Connection.TransactionMode.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1000E28C4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = Connection.TransactionMode.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t Connection.savepoint(_:block:)(uint64_t a1, unint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  Swift::String v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6._countAndFlagsBits = sub_100019350(39, 0xE100000000000000, a1, a2);
  String.append(_:)(v6);
  v7 = sub_10000C028();
  sub_10001F7E8(v7, v8, v9, v10, v11, v12, v13, v14, 0x4E494F5045564153, 0xEA00000000002054);
  v15 = v26;
  v16 = v28;
  sub_10001F7E8(v17, v18, v19, v20, v21, v22, v23, v24, v26, v28);
  sub_1000055DC(0x4E494F5045564153, 0xEA00000000002054, a3, a4, v15, v16, v27, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1000117B4();
}

Swift::Void __swiftcall Connection.interrupt()()
{
  sqlite3 *v0;

  v0 = (sqlite3 *)Connection.handle.getter();
  sqlite3_interrupt(v0);
}

uint64_t sub_1000E2A14()
{
  uint64_t v0;
  sqlite3 *v1;
  uint64_t result;
  double v3;
  _BYTE v4[24];

  v1 = (sqlite3 *)Connection.handle.getter();
  result = swift_beginAccess(v0 + 40, v4, 0, 0);
  v3 = *(double *)(v0 + 40) * 1000.0;
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -2147483650.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 2147483650.0)
    return sqlite3_busy_timeout(v1, (int)v3);
LABEL_7:
  __break(1u);
  return result;
}

double Connection.busyTimeout.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_100017758(v0 + 40, (uint64_t)v2, 0);
  return *(double *)(v0 + 40);
}

uint64_t Connection.busyTimeout.setter(double a1)
{
  uint64_t v1;
  _BYTE v4[24];

  sub_100017758(v1 + 40, (uint64_t)v4, 1);
  *(double *)(v1 + 40) = a1;
  return sub_1000E2A14();
}

void Connection.busyTimeout.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  sub_100017758(v1 + 40, a1, 33);
  sub_10000BFBC();
}

void sub_1000E2B48(uint64_t a1, char a2)
{
  swift_endAccess(a1);
  if ((a2 & 1) == 0)
    sub_1000E2A14();
  sub_10000BFBC();
}

void Connection.busyHandler(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  sqlite3 *v5;
  const void *v6;
  sqlite3 *v7;
  int (__cdecl *v8)(void *, int);
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    sub_100018980();
    v4 = sub_10001C088((uint64_t)&unk_1001200A0);
    *(_QWORD *)(v4 + 16) = v3;
    *(_QWORD *)(v4 + 24) = v1;
    sub_100015A18((uint64_t)sub_10004CCC4, (uint64_t)_NSConcreteStackBlock, 1107296256, v11, v12);
    sub_100017F64();
    sub_1000058DC();
    v5 = (sqlite3 *)Connection.handle.getter();
    sqlite3_busy_handler(v5, (int (__cdecl *)(void *, int))sub_1000E2C2C, v3);
    v6 = *(const void **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = v3;
    _Block_release(v6);
    sub_100013618();
  }
  else
  {
    Connection.handle.getter();
    sub_1000167A8();
    sqlite3_busy_handler(v7, v8, v9);
    v10 = *(const void **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    sub_10001B000(v10);
  }
}

uint64_t sub_1000E2C24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_1000E2C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  sqlite3 *v7;
  const void *v8;
  sqlite3 *v9;
  const void *v10;
  _QWORD v11[6];

  if (a1)
  {
    v5 = swift_allocObject(&unk_100120430, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v11[4] = sub_1000E48A8;
    v11[5] = v5;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1000E2D48;
    v11[3] = &unk_100120448;
    v6 = _Block_copy(v11);
    swift_retain_n(a2, 2);
    swift_release();
    v7 = (sqlite3 *)Connection.handle.getter();
    sqlite3_trace_v2(v7, 1u, (int (__cdecl *)(unsigned int, void *, void *, void *))sub_1000E2E08, v6);
    sub_10007ECC8(a1, a2);
    v8 = *(const void **)(v2 + 56);
    *(_QWORD *)(v2 + 56) = v6;
    _Block_release(v8);
  }
  else
  {
    v9 = (sqlite3 *)Connection.handle.getter();
    sqlite3_trace_v2(v9, 0, 0, 0);
    v10 = *(const void **)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    _Block_release(v10);
  }
}

uint64_t sub_1000E2D48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_1000E2D84(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = String.init(cString:)();
  v5 = v4;
  a2(v3);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_1000E2DBC(int a1, uint64_t a2, sqlite3_stmt *pStmt)
{
  char *v4;
  char *v5;

  if (pStmt)
  {
    v4 = sqlite3_expanded_sql(pStmt);
    if (v4)
    {
      v5 = v4;
      (*(void (**)(uint64_t, char *))(a2 + 16))(a2, v4);
      sqlite3_free(v5);
    }
  }
  return 0;
}

void Connection.updateHook(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  sqlite3 *v5;
  const void *v6;
  sqlite3 *v7;
  void (__cdecl *v8)(void *, int, const char *, const char *, sqlite3_int64);
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    sub_100018980();
    v4 = sub_10001C088((uint64_t)&unk_1001200F0);
    *(_QWORD *)(v4 + 16) = v3;
    *(_QWORD *)(v4 + 24) = v1;
    sub_100015A18((uint64_t)sub_1000E2F4C, (uint64_t)_NSConcreteStackBlock, 1107296256, v11, v12);
    sub_100017F64();
    sub_1000058DC();
    v5 = (sqlite3 *)Connection.handle.getter();
    sqlite3_update_hook(v5, (void (__cdecl *)(void *, int, const char *, const char *, sqlite3_int64))sub_1000E2FC4, v3);
    v6 = *(const void **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = v3;
    _Block_release(v6);
    sub_100013618();
  }
  else
  {
    Connection.handle.getter();
    sub_1000167A8();
    sqlite3_update_hook(v7, v8, v9);
    v10 = *(const void **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    sub_10001B000(v10);
  }
}

uint64_t sub_1000E2EBC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = sub_1000E1D04(a1);
  v10 = String.init(cString:)(a2);
  v12 = v11;
  v13 = String.init(cString:)(a3);
  a5(v9, v10, v12, v13, v14, a4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E2F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  swift_retain(v9);
  v10(a2, a3, a4, a5);
  return swift_release(v9);
}

uint64_t sub_1000E2FAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    if (a4)
      return (*(uint64_t (**)(void))(result + 16))();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void Connection.commitHook(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  sqlite3 *v5;
  const void *v6;
  sqlite3 *v7;
  int (__cdecl *v8)(void *);
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    sub_100018980();
    v4 = sub_10001C088((uint64_t)&unk_100120140);
    *(_QWORD *)(v4 + 16) = v3;
    *(_QWORD *)(v4 + 24) = v1;
    sub_100015A18((uint64_t)sub_1000E30C4, (uint64_t)_NSConcreteStackBlock, 1107296256, v11, v12);
    sub_100017F64();
    sub_1000058DC();
    v5 = (sqlite3 *)Connection.handle.getter();
    sqlite3_commit_hook(v5, (int (__cdecl *)(void *))sub_1000E3104, v3);
    v6 = *(const void **)(v2 + 72);
    *(_QWORD *)(v2 + 72) = v3;
    _Block_release(v6);
    sub_100013618();
  }
  else
  {
    Connection.handle.getter();
    sub_1000167A8();
    sqlite3_commit_hook(v7, v8, v9);
    v10 = *(const void **)(v2 + 72);
    *(_QWORD *)(v2 + 72) = 0;
    sub_10001B000(v10);
  }
}

uint64_t sub_1000E3078(void (*a1)(void))
{
  a1();
  return 0;
}

uint64_t sub_1000E30C4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000E30FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void Connection.rollbackHook(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  sqlite3 *v5;
  const void *v6;
  sqlite3 *v7;
  void (__cdecl *v8)(void *);
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    sub_100018980();
    v4 = sub_10001C088((uint64_t)&unk_100120190);
    *(_QWORD *)(v4 + 16) = v3;
    *(_QWORD *)(v4 + 24) = v1;
    sub_100015A18((uint64_t)sub_10001FF18, (uint64_t)_NSConcreteStackBlock, 1107296256, v11, v12);
    sub_100017F64();
    sub_1000058DC();
    v5 = (sqlite3 *)Connection.handle.getter();
    sqlite3_rollback_hook(v5, (void (__cdecl *)(void *))sub_1000E31B8, v3);
    v6 = *(const void **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = v3;
    _Block_release(v6);
    sub_100013618();
  }
  else
  {
    Connection.handle.getter();
    sub_1000167A8();
    sqlite3_rollback_hook(v7, v8, v9);
    v10 = *(const void **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    sub_10001B000(v10);
  }
}

uint64_t Connection.createFunction(_:argumentCount:deterministic:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  sqlite3 *v19;
  int v20;
  uint64_t v21;
  unsigned int function_v2;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  void **aBlock;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v34;
  uint64_t (*v35)(sqlite3_context *, int, uint64_t);
  uint64_t v36;

  if ((a4 & 1) == 0)
  {
    v12 = a3;
    if ((a3 & 0x8000000000000000) == 0)
      goto LABEL_5;
    __break(1u);
  }
  v12 = -1;
LABEL_5:
  v13 = sub_10001C088((uint64_t)&unk_1001201E0);
  *(_QWORD *)(v13 + 16) = a6;
  *(_QWORD *)(v13 + 24) = a7;
  v35 = sub_1000E40C0;
  v36 = v13;
  aBlock = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = sub_1000E37FC;
  v34 = &unk_1001201F8;
  v14 = (void **)_Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v15 = Connection.handle.getter();
  if (v12 > 0x7FFFFFFF)
  {
    __break(1u);
  }
  else
  {
    v19 = (sqlite3 *)v15;
    if ((a5 & 1) != 0)
      v20 = 2049;
    else
      v20 = 1;
    v21 = String.utf8CString.getter(a1, a2);
    function_v2 = sqlite3_create_function_v2(v19, (const char *)(v21 + 32), v12, v20, v14, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1000E3894, 0, 0, 0);
    swift_release();
    sub_1000179D8();
    v15 = (uint64_t)sub_1000EBA48(function_v2);
    if (!v16)
    {
      v34 = (void *)sub_10001BE7C(&qword_10012C488);
      aBlock = v14;
      _Block_copy(v14);
      sub_1000E3898(a1, a2, v12, (uint64_t)&aBlock);
      _Block_release(v14);
      return sub_10000E87C(&aBlock);
    }
  }
  v24 = v15;
  v25 = v17;
  aBlock = 0;
  v32 = 0xE000000000000000;
  v26 = v18;
  v27 = v16;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD000000000000019;
  v32 = 0x80000001000F6E60;
  v28._countAndFlagsBits = Result.description.getter(v24, v27, v25, v26);
  String.append(_:)(v28);
  sub_1000117B4();
  result = sub_100010304((uint64_t)"Fatal error", v29, v30, (uint64_t)aBlock, v32, (uint64_t)"SQLite/Connection.swift");
  __break(1u);
  return result;
}

uint64_t sub_1000E33DC(sqlite3_context *a1, int a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr))
{
  _QWORD v7[5];

  sub_1000E344C(a2, a3);
  a4(v7);
  swift_bridgeObjectRelease();
  sub_1000E3544((uint64_t)v7, a1);
  return sub_10001316C((uint64_t)v7, &qword_100129578);
}

void sub_1000E344C(int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[40];
  _QWORD *v9;

  if (a1 < 0)
  {
LABEL_10:
    __break(1u);
    return;
  }
  if (a1)
  {
    v3 = a1;
    v9 = _swiftEmptyArrayStorage;
    sub_10005261C();
    v4 = 0;
    v5 = _swiftEmptyArrayStorage;
    while (v3 != v4)
    {
      v7 = v4;
      sub_1000E3E7C(&v7, a2, (uint64_t)v8);
      v9 = v5;
      v6 = v5[2];
      if (v6 >= v5[3] >> 1)
      {
        sub_10005261C();
        v5 = v9;
      }
      ++v4;
      v5[2] = v6 + 1;
      sub_100053C08((uint64_t)v8, (uint64_t)&v5[5 * v6 + 4]);
      if (v3 == v4)
        return;
    }
    __break(1u);
    goto LABEL_10;
  }
}

uint64_t sub_1000E3544(uint64_t a1, sqlite3_context *a2)
{
  uint64_t v2;
  sqlite3_int64 v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (__cdecl *v23)(void *);
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  sqlite3_int64 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[5];
  _BYTE v35[24];
  uint64_t v36;

  v6 = type metadata accessor for String.Encoding(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000BE920();
  sub_10001BE34(a1, (uint64_t)v35);
  if (!v36)
  {
    sqlite3_result_null(a2);
    return sub_10001316C((uint64_t)v35, &qword_100129578);
  }
  sub_10001BE34((uint64_t)v35, (uint64_t)v34);
  v8 = sub_10001BE7C((uint64_t *)&unk_10012A020);
  v11 = sub_100018528(v8, v9, v10, (uint64_t)&type metadata for Blob);
  if ((_DWORD)v11)
  {
    LODWORD(v14) = v30;
    v15 = *(_QWORD *)(v30 + 16);
    if (!(v15 >> 31))
    {
      sqlite3_result_blob(a2, (const void *)(v30 + 32), v15, 0);
      sub_1000059A8();
LABEL_15:
      sub_10000E87C(v34);
      return sub_10001316C((uint64_t)v35, &qword_100129578);
    }
    __break(1u);
    goto LABEL_18;
  }
  v16 = sub_100018528(v11, v12, v13, (uint64_t)&type metadata for Double);
  if ((_DWORD)v16)
  {
    sqlite3_result_double(a2, *(double *)&v30);
    goto LABEL_15;
  }
  v19 = sub_100018528(v16, v17, v18, (uint64_t)&type metadata for Int64);
  if ((_DWORD)v19)
  {
    sqlite3_result_int64(a2, v30);
    goto LABEL_15;
  }
  if (sub_100018528(v19, v20, v21, (uint64_t)type metadata for String))
  {
    v3 = v30;
    v8 = v31;
    v32 = v30;
    v33 = v31;
    static String.Encoding.utf8.getter();
    v22 = sub_100012F00();
    v14 = StringProtocol.lengthOfBytes(using:)(v2, type metadata for String, v22);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
    if (v14 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v14 <= 0x7FFFFFFF)
      {
        if (qword_10012BF80 == -1)
        {
LABEL_14:
          v23 = (void (__cdecl *)(void *))qword_10012D640;
          v24 = String.utf8CString.getter(v3, v8);
          swift_bridgeObjectRelease();
          sqlite3_result_text(a2, (const char *)(v24 + 32), v14, v23);
          sub_1000058DC();
          goto LABEL_15;
        }
LABEL_20:
        swift_once(&qword_10012BF80, sub_1000D7388);
        goto LABEL_14;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  sub_10000E87C(v34);
  sub_10001BE34(a1, (uint64_t)v34);
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v32 = 0xD000000000000019;
  v33 = 0x80000001000F6F50;
  sub_10001BE34((uint64_t)v34, (uint64_t)&v30);
  v26 = sub_10001BE7C(&qword_100129578);
  v27._countAndFlagsBits = String.init<A>(describing:)(&v30, v26);
  String.append(_:)(v27);
  sub_1000117B4();
  result = sub_100010304((uint64_t)"Fatal error", v28, v29, v32, v33, (uint64_t)"SQLite/Connection.swift");
  __break(1u);
  return result;
}

uint64_t sub_1000E37FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v8(a2, a3, a4);
  return swift_release(v7);
}

uint64_t sub_1000E3854(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (**v6)(void *, sqlite3_context *, uint64_t, uint64_t);

  v6 = (uint64_t (**)(void *, sqlite3_context *, uint64_t, uint64_t))sqlite3_user_data(a1);
  return v6[2](v6, a1, a2, a3);
}

uint64_t sub_1000E3898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *);
  _QWORD *v15;
  _BYTE v17[32];
  _QWORD v18[4];
  _BYTE v19[24];

  v9 = v4 + 88;
  sub_100017758(v4 + 88, (uint64_t)v18, 32);
  v10 = *(_QWORD *)(v4 + 88);
  sub_10000EC68();
  sub_1000DF748(a1, a2, v10);
  v12 = v11;
  swift_endAccess(v18);
  sub_1000117B4();
  sub_1000059A8();
  if (!v12)
  {
    sub_10000EC68();
    v13 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for Int, (char *)&type metadata for Any + 8, &protocol witness table for Int);
    sub_100017758(v9, (uint64_t)v18, 33);
    sub_1000E413C(v13, a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E6814);
    swift_endAccess(v18);
    sub_1000117B4();
  }
  sub_100017758(v9, (uint64_t)v19, 33);
  sub_10000EC68();
  v14 = sub_1000E39EC(v18, a1, a2);
  if (*v15)
  {
    sub_10000FE10(a4, (uint64_t)v17);
    sub_1000E19F8((uint64_t)v17, a3);
  }
  ((void (*)(_QWORD *, _QWORD))v14)(v18, 0);
  swift_endAccess(v19);
  return sub_1000117B4();
}

void (*sub_1000E39EC(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1000E4590(v6, a2, a3);
  return sub_1000E3A58;
}

void sub_1000E3A58(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  sub_1000059A8();
  sub_100016480(v1);
}

void Connection.createCollation(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  void *v11;
  sqlite3 *v12;
  uint64_t v13;
  uint64_t collation_v2;
  _QWORD v15[6];

  v10 = sub_1000100C8((uint64_t)&unk_100120230, 32);
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  v15[4] = sub_1000E40C8;
  v15[5] = v10;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_1000E3C80;
  v15[3] = &unk_100120248;
  v11 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v12 = (sqlite3 *)Connection.handle.getter();
  v13 = String.utf8CString.getter(a1, a2);
  collation_v2 = sqlite3_create_collation_v2(v12, (const char *)(v13 + 32), 1, v11, (int (__cdecl *)(void *, int, const void *, int, const void *))sub_1000E3D4C, 0);
  swift_release();
  sub_10001D77C(collation_v2, 0);
  if (!v5)
  {
    sub_10001F508(v4 + 96, (uint64_t)v15);
    sub_10000EC68();
    _Block_copy(v11);
    sub_1000E413C((uint64_t)v11, a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E68B4);
    swift_endAccess(v15);
    sub_1000117B4();
  }
  _Block_release(v11);
}

uint64_t sub_1000E3BE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v5 = ((uint64_t (*)(void))String.init(cString:))();
  v7 = v6;
  v8 = String.init(cString:)(a2);
  v10 = v9;
  v11 = a3(v5, v7, v8, v9);
  swift_bridgeObjectRelease(v10);
  result = swift_bridgeObjectRelease(v7);
  if (v11 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v11 <= 0x7FFFFFFF)
  {
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E3C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = v6(a2, a3);
  swift_release(v5);
  return v7;
}

uint64_t sub_1000E3CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a3 && a5)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(a1, a3, a5);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003DLL, 0x80000001000F6F70, "SQLite/Connection.swift", 23, 2);
  __break(1u);
  return result;
}

_QWORD *Connection.backup(databaseName:usingConnection:andDatabaseName:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = type metadata accessor for Backup();
  sub_1000100C8(v11, 40);
  sub_1000179D8();
  sub_10006AFAC(a1, a2);
  swift_retain();
  sub_10006AFAC(a4, a5);
  return Backup.init(sourceConnection:sourceName:targetConnection:targetName:)(v5, a1, a2, a3, a4, a5);
}

void sub_1000E3DF4()
{
  uint64_t v0;

  v0 = sub_10001BE7C(&qword_10012C5B0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  qword_10012C480 = DispatchSpecificKey.init()();
  sub_10000BFBC();
}

const char *Connection.description.getter()
{
  sqlite3 *v0;
  const char *result;

  v0 = (sqlite3 *)Connection.handle.getter();
  result = sqlite3_db_filename(v0, 0);
  if (result)
    return (const char *)String.init(cString:)(result);
  __break(1u);
  return result;
}

const char *sub_1000E3E54()
{
  return Connection.description.getter();
}

void sub_1000E3E74()
{
  Connection.Location.description.getter();
}

void sub_1000E3E7C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sqlite3_value *v4;
  sqlite3_int64 v5;
  ValueMetadata *v6;
  _UNKNOWN **v7;
  const unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  const void *v12;
  const void *v13;
  int v14;
  Swift::String v15;

  if (!a2)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001000F6F30, "SQLite/Connection.swift", 23, 2);
    __break(1u);
    JUMPOUT(0x1000E4050);
  }
  v4 = *(sqlite3_value **)(a2 + 8 * *a1);
  switch(sqlite3_value_type(v4))
  {
    case 1:
      v5 = sqlite3_value_int64(v4);
      v6 = (ValueMetadata *)&type metadata for Int64;
      v7 = &protocol witness table for Int64;
      goto LABEL_10;
    case 2:
      v11 = sqlite3_value_double(v4);
      *(_QWORD *)(a3 + 24) = &type metadata for Double;
      *(_QWORD *)(a3 + 32) = &protocol witness table for Double;
      *(double *)a3 = v11;
      return;
    case 3:
      v8 = sqlite3_value_text(v4);
      if (!v8)
        goto LABEL_13;
      v9 = String.init(cString:)(v8);
      *(_QWORD *)(a3 + 24) = type metadata for String;
      *(_QWORD *)(a3 + 32) = &protocol witness table for String;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      break;
    case 4:
      v12 = sqlite3_value_blob(v4);
      if (!v12)
        goto LABEL_14;
      v13 = v12;
      v14 = sqlite3_value_bytes(v4);
      _s6SQLite4BlobV5bytes6lengthACSV_SitcfC_0(v13, v14);
      v6 = &type metadata for Blob;
      v7 = &protocol witness table for Blob;
LABEL_10:
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v7;
      *(_QWORD *)a3 = v5;
      break;
    case 5:
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    default:
      goto LABEL_15;
  }
}

uint64_t sub_1000E4064()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E4088(int a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(a1) & 1;
}

uint64_t sub_1000E40B0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000E2EBC(a1, a2, a3, a4, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16));
}

uint64_t sub_1000E40B8()
{
  uint64_t v0;

  return sub_1000E3078(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1000E40C0(sqlite3_context *a1, int a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000E33DC(a1, a2, a3, *(void (**)(_QWORD *__return_ptr))(v3 + 16));
}

uint64_t sub_1000E40C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000E3BE8(a1, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000E40D0(_OWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  *v2 = 0x8000000000000000;
  sub_1000E6720(a1, a2, isUniquelyReferenced_nonNull_native);
  *v2 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E413C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v12 = *v4;
  *v4 = 0x8000000000000000;
  a4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  v10 = *v4;
  *v4 = v12;
  return swift_bridgeObjectRelease(v10);
}

unint64_t sub_1000E41C0()
{
  unint64_t result;

  result = qword_10012C490;
  if (!qword_10012C490)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Connection.Operation, &type metadata for Connection.Operation);
    atomic_store(result, (unint64_t *)&qword_10012C490);
  }
  return result;
}

unint64_t sub_1000E4200()
{
  unint64_t result;

  result = qword_10012C498;
  if (!qword_10012C498)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Connection.TransactionMode, &type metadata for Connection.TransactionMode);
    atomic_store(result, (unint64_t *)&qword_10012C498);
  }
  return result;
}

uint64_t type metadata accessor for Connection()
{
  return objc_opt_self(_TtC6SQLite10Connection);
}

unint64_t destroy for Connection.Location(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s6SQLite10ConnectionC8LocationOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for Connection.Location(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for Connection.Location(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Connection.Location(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Connection.Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_1000E4470(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000E4488(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

void type metadata accessor for Connection.Location()
{
  sub_1000059CC();
}

void type metadata accessor for Connection.Operation()
{
  sub_1000059CC();
}

uint64_t _s6SQLite10ConnectionC9OperationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000E4514 + 4 * byte_1000F2A9B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E4548 + 4 * byte_1000F2A96[v4]))();
}

uint64_t sub_1000E4548(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E4550(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E4558);
  return result;
}

uint64_t sub_1000E4564(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E456CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000E4570(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E4578(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Connection.TransactionMode()
{
  sub_1000059CC();
}

void (*sub_1000E4590(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain();
  v7[9] = sub_1000E47BC(v7);
  v7[10] = sub_1000E466C(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1000E4620;
}

void sub_1000E4620(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  sub_1000059A8();
  v2(v1, 0);
  free(v1);
}

void (*sub_1000E466C(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  Swift::Int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v12 = sub_100016064(a2);
  *((_BYTE *)v10 + 40) = v13 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v13 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  v17 = v12;
  v18 = v13;
  sub_10001BE7C(&qword_10012C5A0);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v16))
  {
    v19 = sub_100016064(a2);
    if ((v18 & 1) == (v20 & 1))
    {
      v17 = v19;
      goto LABEL_5;
    }
LABEL_10:
    result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
    return result;
  }
LABEL_5:
  v10[4] = v17;
  if ((v18 & 1) != 0)
    v21 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v17);
  else
    v21 = 0;
  *v10 = v21;
  return sub_1000E4784;
}

void sub_1000E4784(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1000E47E8(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();
  sub_100016480(v1);
}

uint64_t (*sub_1000E47BC(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1000E47DC;
}

uint64_t sub_1000E47DC(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

double sub_1000E47E8(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      sub_1000266D8(a4, a5, a6, v8, *a3);
      swift_bridgeObjectRetain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1);
    v9 = *a3;
    v10 = sub_10001BE7C(&qword_10012C5A8);
    _NativeDictionary._delete(at:)(a4, v9, type metadata for String, v10);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_1000E48A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E2D84(a1, *(void (**)(uint64_t))(v1 + 16));
}

const char *sub_1000E48B0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000E25E8(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_1000E48CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100013534();
  sub_1000DF6F8(v0, v1, v2, v3);
}

void sub_1000E48E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100013534();
  sub_1000DF6C0(v0, v1, v2, v3);
}

_QWORD *sub_1000E495C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return static OS_dispatch_queue.getSpecific<A>(key:)((uint64_t *)va);
}

uint64_t sub_1000E4964()
{
  double *v0;

  return sub_1000E496C(*v0);
}

uint64_t sub_1000E496C(double a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001BE7C(&qword_1001296C8);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v3 + 56) = &type metadata for Double;
  *(_QWORD *)(v3 + 64) = &protocol witness table for Double;
  *(double *)(v3 + 32) = a1;
  return 63;
}

uint64_t sub_1000E49D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001BE7C(&qword_1001296C8);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v3 + 56) = &type metadata for Blob;
  *(_QWORD *)(v3 + 64) = &protocol witness table for Blob;
  *(_QWORD *)(v3 + 32) = a1;
  swift_bridgeObjectRetain();
  return 63;
}

uint64_t sub_1000E4A40(char a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001BE7C(&qword_1001296C8);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v3 + 56) = &type metadata for Int64;
  *(_QWORD *)(v3 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v3 + 32) = a1 & 1;
  return 63;
}

uint64_t sub_1000E4AA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001BE7C(&qword_1001296C8);
  v3 = sub_100017848(v2);
  *(_OWORD *)(v3 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v3 + 56) = &type metadata for Int64;
  *(_QWORD *)(v3 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v3 + 32) = a1;
  return 63;
}

void sub_1000E4B04(uint64_t a1, unint64_t a2)
{
  sub_10001EBF8(a1, a2);
  sub_1000E5168(a1, a2);
}

uint64_t sub_1000E4B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  Class isa;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, v1, v2, v4);
  v7 = sub_10001BE7C(&qword_1001296C8);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v8 + 56) = type metadata for String;
  *(_QWORD *)(v8 + 64) = &protocol witness table for String;
  if (qword_10012BF98 != -1)
    swift_once(&qword_10012BF98, sub_1000E8FCC);
  swift_beginAccess(&dateFormatter, v17, 0, 0);
  v9 = dateFormatter.super.super.isa;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v11 = -[objc_class stringFromDate:](v9, "stringFromDate:", isa);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)(v8 + 32) = v12;
  *(_QWORD *)(v8 + 40) = v14;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return 63;
}

void Value.expression.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  _QWORD v12[6];

  v5 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Expression(0, a1, v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v10);
  ExpressionType<>.init(value:)((uint64_t)v7, v10, WitnessTable, a2);
  v12[0] = v12[3];
  v12[1] = v12[4];
  v12[2] = v12[5];
  ExpressionType.expression.getter(v10, WitnessTable);
  sub_1000101FC();
  swift_bridgeObjectRelease();
  sub_10001ADFC();
}

uint64_t sub_1000E4D98()
{
  uint64_t *v0;

  return sub_1000E49D0(*v0);
}

uint64_t sub_1000E4DA0()
{
  char *v0;

  return sub_1000E4A40(*v0);
}

uint64_t sub_1000E4DA8()
{
  uint64_t *v0;

  return sub_1000E4AA8(*v0);
}

uint64_t ExpressionType.init(literal:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(a4 + 40))(a1, a2, _swiftEmptyArrayStorage, a3);
}

Swift::String __swiftcall Expressible.asSQL()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String_optional v15;
  Swift::String result;
  uint64_t v17;

  (*(void (**)(void))(v0 + 8))();
  v2 = v1;
  v4 = v3;
  v17 = v1;
  swift_bridgeObjectRetain_n(v1, 3);
  swift_bridgeObjectRetain();
  v7 = String.Iterator.next()();
  object = v7.value._object;
  countAndFlagsBits = v7.value._countAndFlagsBits;
  if (!v7.value._object)
  {
LABEL_13:
    sub_1000100D0();
    swift_bridgeObjectRelease_n(v2, 2);
    swift_bridgeObjectRelease(v17);
    sub_1000100D0();
    swift_bridgeObjectRelease(v2);
    countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
    goto LABEL_16;
  }
  v8 = v7.value._countAndFlagsBits;
  v9 = v7.value._object;
  v10 = 0;
  while (1)
  {
    if (v8 != 63 || v9 != (void *)0xE100000000000000)
    {
      countAndFlagsBits = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, 63, 0xE100000000000000, 0);
      if ((countAndFlagsBits & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v13 = v9;
        goto LABEL_12;
      }
    }
    if ((v10 & 0x8000000000000000) != 0)
      break;
    if (v10 >= *(_QWORD *)(v4 + 16))
      goto LABEL_15;
    v8 = sub_1000D75EC(v4 + 32 + 40 * v10);
    v13 = v12;
    ++v10;
LABEL_12:
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = v8;
    v14._object = v13;
    String.append(_:)(v14);
    sub_1000101FC();
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    v15 = String.Iterator.next()();
    object = v15.value._object;
    countAndFlagsBits = v15.value._countAndFlagsBits;
    v8 = v15.value._countAndFlagsBits;
    v9 = v15.value._object;
    if (!v15.value._object)
      goto LABEL_13;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t ExpressionType.init(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100019350(34, 0xE100000000000000, a1, a2);
  v8 = v7;
  sub_1000101FC();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(a4 + 40))(v6, v8, _swiftEmptyArrayStorage, a3, a4);
}

void sub_1000E4FF0(uint64_t a1)
{
  ExpressionType.expression.getter(a1, (uint64_t)&protocol witness table for Select<A>);
}

uint64_t sub_1000E4FFC(uint64_t a1, uint64_t a2)
{
  return sub_1000E5008(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1000DED5C);
}

uint64_t sub_1000E5008(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2]);
}

uint64_t Expression.template.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Expression.bindings.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t ExpressionType.asc.getter()
{
  return sub_1000E5094();
}

uint64_t ExpressionType.desc.getter()
{
  return sub_1000E5094();
}

uint64_t sub_1000E5094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  sub_10001B204();
  v6 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v6, &v11);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = *(_QWORD *)(v3 + 8);
  v8 = sub_10001795C((_QWORD *)(inited + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v8, v1, v4);
  v9 = sub_10001BE7C(&qword_10012BFA8);
  *(_QWORD *)(inited + 104) = &protocol witness table for Expression<A>;
  *(_QWORD *)(inited + 72) = v2;
  *(_QWORD *)(inited + 80) = v0;
  *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 96) = v9;
  sub_10001A118(inited, 32, 0xE100000000000000, v5);
  swift_setDeallocating(inited);
  return sub_10001E778();
}

void sub_1000E5168(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_10001BE7C(&qword_1001296C8);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1000EFAE0;
  *(_QWORD *)(v4 + 56) = &type metadata for Blob;
  *(_QWORD *)(v4 + 64) = &protocol witness table for Blob;
  __asm { BR              X10 }
}

uint64_t sub_1000E51E0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000E9354(v1, v0 & 0xFFFFFFFFFFFFLL, BYTE6(v0), v1, v0);
  *(_QWORD *)(v2 + 32) = v3;
  sub_10001EA88(v1, v0);
  return 63;
}

uint64_t ExpressionType<>.init(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_10001BE7C(&qword_1001296C8);
  v9 = sub_100017848(v8);
  *(_OWORD *)(v9 + 16) = xmmword_1000EFAE0;
  v10 = *(void (**)(uint64_t, uint64_t))(a4 + 56);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2);
  v12 = swift_getAssociatedTypeWitness(0, a4, AssociatedTypeWitness);
  *(_QWORD *)(v9 + 56) = v12;
  *(_QWORD *)(v9 + 64) = swift_getAssociatedConformanceWitness(a4, AssociatedTypeWitness, v12, &protocol requirements base descriptor for Value, &associated conformance descriptor for Value.Value.Datatype: Binding);
  sub_10001795C((_QWORD *)(v9 + 32));
  v13 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v10(v13, a4);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(a3 + 40))(63, 0xE100000000000000, v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
}

uint64_t static ExpressionType<>.null.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  sub_10001B204();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v3);
  v7 = swift_getAssociatedTypeWitness(255, v1, AssociatedTypeWitness);
  v8 = type metadata accessor for Optional(0, v7);
  __chkstk_darwin(v8);
  v10 = (char *)&v12 - v9;
  sub_100014360((uint64_t)&v12 - v9, 1, 1, v7);
  return ExpressionType<>.init(value:)((uint64_t)v10, v3, v2, v1, v0, v4);
}

uint64_t sub_1000E5520()
{
  uint64_t result;
  uint64_t v1;

  result = sub_100019350(34, 0xE100000000000000, 0x4449574F52, 0xE500000000000000);
  rowid = result;
  unk_10012D650 = v1;
  qword_10012D658 = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

uint64_t *rowid.unsafeMutableAddressor()
{
  if (qword_10012BF90 != -1)
    swift_once(&qword_10012BF90, sub_1000E5520);
  return &rowid;
}

void cast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Swift::String v9;

  sub_10001C8AC(a1, a2);
  sub_100018B10();
  swift_bridgeObjectRelease();
  sub_10001853C();
  v9._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 40))(a5, a7);
  String.append(_:)(v9);
  sub_1000100D0();
  sub_10001E2FC();
  swift_bridgeObjectRetain();
  sub_10001AFEC();
}

{
  Swift::String v9;

  sub_10001C8AC(a1, a2);
  sub_100018B10();
  swift_bridgeObjectRelease();
  sub_10001853C();
  v9._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 40))(a5, a7);
  String.append(_:)(v9);
  sub_1000101FC();
  sub_10001E2FC();
  type metadata accessor for Optional(0, a5);
  swift_bridgeObjectRetain();
  sub_10001AFEC();
}

uint64_t sub_1000E56A8(uint64_t a1, uint64_t a2)
{
  return sub_1000E56B4(a1, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1000E4B04);
}

uint64_t sub_1000E56B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1]);
}

void sub_1000E56C4(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  sqlite3_stmt **v19;
  char v20[24];
  _QWORD *v21;

  v3 = a1;
  v4 = HIDWORD(a1);
  if (a1 < 0 == (int)a1 < 0)
  {
    v17 = HIDWORD(a1) - a1;
    if (__OFSUB__(HIDWORD(a1), (_DWORD)a1))
      goto LABEL_31;
    v9 = v17;
    if (v17)
      goto LABEL_13;
    goto LABEL_25;
  }
  if ((int)a1 >= 0)
    v5 = a1;
  else
    v5 = -(int)a1;
  if (a1 >= 0)
    v6 = HIDWORD(a1);
  else
    v6 = -HIDWORD(a1);
  v7 = __CFADD__(v5, v6);
  v8 = (v5 + v6);
  if (!v7)
  {
    if ((int)a1 < 0)
      v9 = v8;
    else
      v9 = -v8;
    if (v9)
    {
LABEL_13:
      v21 = _swiftEmptyArrayStorage;
      sub_10001573C();
      if ((v9 & 0x8000000000000000) == 0)
      {
        v18 = a2;
        v10 = v21;
        v19 = (sqlite3_stmt **)(a2 + 16);
        swift_beginAccess(a2 + 16, v20, 0, 0);
        v11 = v3;
        while (v9)
        {
          if (!sqlite3_column_name(*v19, v11))
            goto LABEL_32;
          v12 = String.init(cString:)();
          v14 = v13;
          v21 = v10;
          v15 = v10[2];
          if (v15 >= v10[3] >> 1)
          {
            sub_10001573C();
            v10 = v21;
          }
          v10[2] = v15 + 1;
          v16 = &v10[2 * v15];
          v16[4] = v12;
          v16[5] = v14;
          if ((int)v4 < v3)
            goto LABEL_27;
          if (v11 >= (int)v4)
            goto LABEL_28;
          ++v11;
          if (!--v9)
          {
            swift_release(v18);
            return;
          }
        }
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }
      __break(1u);
      goto LABEL_30;
    }
LABEL_25:
    swift_release(a2);
    return;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
}

void sub_1000E5870()
{
  uint64_t v0;
  uint64_t v1;

  v0 = (unint64_t)Statement.failableNext()();
  if (v1)
  {
    sub_10001E30C(v0, (uint64_t)"SQLite/Statement.swift");
    __break(1u);
  }
  else
  {
    sub_10001B3F4();
  }
}

uint64_t sub_1000E58A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = (unint64_t)Statement.failableNext()();
  if (v1)
  {
    result = sub_10001E30C(v0, (uint64_t)"SQLite/Statement.swift");
    __break(1u);
  }
  else
  {
    if (v0)
      sub_10000EC68();
    return sub_100019430();
  }
  return result;
}

uint64_t FailableIterator.next()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void Statement.scalar(_:)(uint64_t a1)
{
  Statement.bind(_:)(a1);
  sub_10000C138((uint64_t)_swiftEmptyArrayStorage);
  sub_1000073B0();
  sub_10001CE04();
}

{
  Statement.bind(_:)(a1);
  sub_10000C138((uint64_t)_swiftEmptyArrayStorage);
  sub_1000073B0();
  sub_10001CE04();
}

uint64_t Statement.columnCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

void Statement.columnCount.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  Statement.columnCount.getter((uint64_t)a1);
  *a1 = v3;
  sub_10000BFBC();
}

_QWORD *sub_1000E5D7C(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 32) = *result;
  *(_BYTE *)(v1 + 40) = 0;
  return result;
}

uint64_t Statement.columnNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease(v2);
}

void Statement.columnNames.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  Statement.columnNames.getter();
  *a1 = v3;
  sub_10000BFBC();
}

uint64_t sub_1000E5DCC(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return Statement.columnNames.setter(*a1);
  v2 = sub_10000EC68();
  Statement.columnNames.setter(v2);
  return swift_bridgeObjectRelease();
}

uint64_t Statement.row.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

void Statement.row.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = Statement.row.getter((uint64_t)a1);
  a1[1] = v3;
  sub_10000BFBC();
}

_QWORD *sub_1000E5E44(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = result[1];
  v1 = result[2];
  *(_QWORD *)(v1 + 56) = *result;
  *(_QWORD *)(v1 + 64) = v2;
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.step()()
{
  sub_1000179D8();
  return sub_100016488();
}

void Statement.scalar(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BOOL8 v7;
  sqlite3_stmt *v8;

  v4 = v3;
  if (*(_QWORD *)(a1 + 16))
  {
    Statement.bind(_:)(a1);
    Statement.scalar(_:)(_swiftEmptyArrayStorage);
    sub_1000073B0();
  }
  else
  {
    sub_10001D580(0);
    v6 = *(_QWORD *)(v2 + 24);
    sub_1000179D8();
    v7 = sub_10000C918(v6, v2);
    if (!v4)
    {
      v8 = (sqlite3_stmt *)Statement.row.getter(v7);
      Cursor.subscript.getter(0, v8, a2);
    }
  }
  sub_10001CE04();
}

uint64_t Statement.makeIterator()()
{
  sub_10001D580(0);
  return swift_retain();
}

uint64_t sub_1000E5F44@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  Statement.makeIterator()();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000E5F74()
{
  return _s6SQLite9StatementC6handle33_BBABA35034D0672F50B2547BC77385B8LLs13OpaquePointerVSgvpfi_0();
}

uint64_t sub_1000E5F94()
{
  return 2;
}

uint64_t sub_1000E5F9C()
{
  return sub_1000E5FBC();
}

uint64_t sub_1000E5FBC()
{
  uint64_t v0;

  v0 = sub_1000E6A9C();
  swift_release();
  return v0;
}

uint64_t sub_1000E5FF0()
{
  return sub_1000E6014();
}

uint64_t sub_1000E6018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = type metadata accessor for Optional(0, a2);
  v23 = *(_QWORD *)(v8 - 8);
  v24 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v22 - v16;
  v25 = Array.init()(a2);
  v28 = v25;
  v18 = *(void (**)(uint64_t, uint64_t))(a4 + 16);
  v19 = v26;
  v26 = a4;
  v27 = a1;
  v18(a3, a4);
  if (v19)
  {
    sub_10001190C();
    return swift_bridgeObjectRelease();
  }
  else
  {
    while (sub_10001C93C((uint64_t)v10, 1, a2) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v10, a2);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, a2);
      v20 = type metadata accessor for Array(0, a2);
      Array.append(_:)(v14, v20);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, a2);
      v18(a3, v26);
    }
    sub_10001190C();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
    return v28;
  }
}

unint64_t sub_1000E61FC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = (unint64_t)Statement.failableNext()();
  if (!v3)
    *a1 = result;
  return result;
}

void sub_1000E6228(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_1000E5870();
  *a1 = v2;
}

uint64_t Statement.prepareRowIterator()()
{
  uint64_t v0;

  sub_1000179D8();
  sub_1000E6270();
  return v0;
}

_QWORD *sub_1000E6270()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  Statement.columnNames.getter();
  if (*(_QWORD *)(v0 + 16))
  {
    v1 = 0;
    v14 = *(_QWORD *)(v0 + 16);
    v2 = (unint64_t *)(v0 + 40);
    do
    {
      v3 = *(v2 - 1);
      v4 = *v2;
      swift_bridgeObjectRetain();
      v5 = sub_10001C970(0, 0xE000000000000000, v3, v4, 34, 0xE100000000000000);
      v7 = (void *)v6;
      sub_100017DD0(v5, v6, v8);
      v9._countAndFlagsBits = v5;
      v9._object = v7;
      String.append(_:)(v9);
      v10 = swift_bridgeObjectRelease();
      sub_100017DD0(v10, v11, v12);
      swift_bridgeObjectRelease();
      swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_1000E6650(v1, 0, 0xE000000000000000);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 += 2;
      ++v1;
    }
    while (v14 != v1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyDictionarySingleton;
}

const char *Statement.description.getter(uint64_t a1)
{
  uint64_t v1;
  const char *result;

  sub_10001B010(a1);
  result = sqlite3_sql(*(sqlite3_stmt **)(v1 + 16));
  if (result)
    return (const char *)String.init(cString:)(result);
  __break(1u);
  return result;
}

void sub_1000E63E8(uint64_t a1)
{
  Statement.description.getter(a1);
  sub_10000BFBC();
}

double Cursor.subscript.getter(uint64_t iCol, sqlite3_stmt *a2)
{
  double result;

  if (iCol < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (iCol <= 0x7FFFFFFF)
  {
    return sqlite3_column_double(a2, iCol);
  }
  __break(1u);
  return result;
}

sqlite3_int64 Cursor.subscript.getter(sqlite3_int64 result, sqlite3_stmt *a2)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return sub_10001DA38(a2, result);
  }
  __break(1u);
  return result;
}

uint64_t Cursor.subscript.getter(uint64_t iCol, sqlite3_stmt *a2)
{
  if (iCol < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (iCol > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  iCol = (uint64_t)sqlite3_column_text(a2, iCol);
  if (iCol)
    return String.init(cString:)(iCol);
LABEL_7:
  __break(1u);
  return iCol;
}

void Cursor.subscript.getter(uint64_t iCol, sqlite3_stmt *a2)
{
  int v2;
  const void *v4;
  const void *v5;
  int64_t v6;

  if (iCol < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = iCol;
  if (iCol > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v4 = sqlite3_column_blob(a2, iCol);
  if (v4)
  {
    v5 = v4;
    v6 = sqlite3_column_bytes(a2, v2);
    _s6SQLite4BlobV5bytes6lengthACSV_SitcfC_0(v5, v6);
  }
  else
  {
    sub_10001000C();
  }
}

BOOL Cursor.subscript.getter(_BOOL8 iCol, sqlite3_stmt *a2)
{
  if (iCol < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (iCol <= 0x7FFFFFFF)
  {
    return sqlite3_column_int64(a2, iCol) != 0;
  }
  __break(1u);
  return iCol;
}

void Cursor.makeIterator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_1000100C8((uint64_t)&unk_100120550, 24);
  *(_QWORD *)(v4 + 16) = 0;
  v5 = (_QWORD *)sub_1000100C8((uint64_t)&unk_100120578, 40);
  v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  v6 = sub_10001BE7C(&qword_10012C670);
  v7 = sub_1000100C8(v6, 32);
  *(_QWORD *)(v7 + 16) = sub_1000114B0;
  *(_QWORD *)(v7 + 24) = v5;
  sub_10001000C();
}

void sub_1000E65E0(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  Cursor.makeIterator()(*v1, v1[1]);
  *a1 = v3;
}

uint64_t sub_1000E6608()
{
  return _s6SQLite9StatementC6handle33_BBABA35034D0672F50B2547BC77385B8LLs13OpaquePointerVSgvpfi_0();
}

uint64_t sub_1000E6610()
{
  _QWORD *v0;

  return sub_1000E5FEC(*v0, v0[1]);
}

uint64_t sub_1000E6618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_1000E6010(a1, a2, a3, *v3, v3[1]);
}

unint64_t sub_1000E6620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1000E6A00(a1, v3);
}

void sub_1000E6650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;

  sub_100016064(a2);
  sub_10001AB98();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = v7;
  v11 = v8;
  sub_10001BE7C(&qword_10012C468);
  if (!sub_10001B258())
    goto LABEL_5;
  v12 = sub_100016064(a2);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
    return;
  }
  v10 = v12;
LABEL_5:
  v14 = *v3;
  if ((v11 & 1) != 0)
  {
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v10) = a1;
    sub_1000110FC();
  }
  else
  {
    sub_1000266D8(v10, a2, a3, a1, v14);
    sub_10001C758(a3);
  }
}

_OWORD *sub_1000E6720(_OWORD *a1, uint64_t a2, char a3)
{
  Swift::Int *v3;
  Swift::Int *v4;
  Swift::Int v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *result;

  v4 = v3;
  v8 = *v3;
  sub_1000E6620(a2);
  sub_10001AB98();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = v9;
  v13 = v10;
  sub_10001BE7C(&qword_10012C598);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v8))
    goto LABEL_5;
  v14 = sub_1000E6620(a2);
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
    return result;
  }
  v12 = v14;
LABEL_5:
  v16 = (_QWORD *)*v4;
  if ((v13 & 1) == 0)
    return sub_1000E6954(v12, a2, a1, v16);
  sub_10000E87C((_QWORD *)(v16[7] + 32 * v12));
  v17 = (_OWORD *)sub_100019430();
  return sub_1000273C0(v17, v18);
}

void sub_1000E6814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_10001ADB8(a1, a2);
  sub_10001AB98();
  if (v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = v5;
  v9 = v6;
  sub_10001BE7C(&qword_10012C5A0);
  if (!sub_10001B258())
    goto LABEL_5;
  v10 = sub_100019AA0();
  if ((v9 & 1) != (v11 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
    return;
  }
  v8 = v10;
LABEL_5:
  if ((v9 & 1) != 0)
  {
    v12 = *(_QWORD *)(*(_QWORD *)v4 + 56);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v12 + 8 * v8) = v2;
    sub_1000110FC();
  }
  else
  {
    v13 = sub_100018CCC();
    sub_1000266D8(v13, v14, v15, v16, v17);
    sub_10001C758(v3);
  }
}

void sub_1000E68B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  sub_10001ADB8(a1, a2);
  sub_10001AB98();
  if (v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = v5;
  v9 = v6;
  sub_10001BE7C(&qword_10012C760);
  if (!sub_10001B258())
    goto LABEL_5;
  v10 = sub_100019AA0();
  if ((v9 & 1) != (v11 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(type metadata for String);
    __break(1u);
    return;
  }
  v8 = v10;
LABEL_5:
  if ((v9 & 1) != 0)
  {
    v12 = *(_QWORD *)(*(_QWORD *)v4 + 56);
    _Block_release(*(const void **)(v12 + 8 * v8));
    *(_QWORD *)(v12 + 8 * v8) = v2;
    sub_1000110FC();
  }
  else
  {
    v13 = sub_100018CCC();
    sub_1000E69B8(v13, v14, v15, v16, v17);
    sub_10001C758(v3);
  }
}

_OWORD *sub_1000E6954(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1000273C0(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_1000E69B8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_1000E6A00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1000E6A9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  swift_retain();
  sub_10001D580(0);
  result = (unint64_t)Statement.failableNext()();
  if (v3)
  {
LABEL_20:
    swift_unexpectedError(v3, "SQLite/Statement.swift", 22, 1, 211);
    __break(1u);
  }
  else
  {
    v4 = result;
    v1 = 0;
    v0 = _swiftEmptyArrayStorage;
    v5 = &_swiftEmptyArrayStorage[4];
    while (v4)
    {
      if (!v1)
      {
        v6 = v0[3];
        if ((uint64_t)((v6 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
        if (v7 <= 1)
          v8 = 1;
        else
          v8 = v7;
        v9 = sub_10001BE7C(&qword_10012C758);
        v10 = (_QWORD *)swift_allocObject(v9, 8 * v8 + 32, 7);
        v11 = (uint64_t)(j__malloc_size(v10) - 32) / 8;
        v10[2] = v8;
        v10[3] = 2 * v11;
        v12 = (unint64_t)(v10 + 4);
        v13 = v0[3];
        v14 = v13 >> 1;
        if (v0[2])
        {
          if (v10 != v0 || v12 >= (unint64_t)&v0[v14 + 4])
            memmove(v10 + 4, v0 + 4, 8 * v14);
          v0[2] = 0;
        }
        v5 = (uint64_t *)(v12 + 8 * v14);
        v1 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - (v13 >> 1);
        result = swift_release();
        v0 = v10;
      }
      v16 = __OFSUB__(v1--, 1);
      if (v16)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      *v5++ = v4;
      result = (unint64_t)Statement.failableNext()();
      v4 = result;
      if (v3)
        goto LABEL_20;
    }
  }
  result = swift_release();
  v17 = v0[3];
  if (v17 < 2)
    return (uint64_t)v0;
  v18 = v17 >> 1;
  v16 = __OFSUB__(v18, v1);
  v19 = v18 - v1;
  if (!v16)
  {
    v0[2] = v19;
    return (uint64_t)v0;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000E6C20()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000E6C34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10012C678;
  if (!qword_10012C678)
  {
    v1 = type metadata accessor for Statement();
    result = swift_getWitnessTable(&protocol conformance descriptor for Statement, v1);
    atomic_store(result, (unint64_t *)&qword_10012C678);
  }
  return result;
}

unint64_t sub_1000E6C70(uint64_t a1)
{
  unint64_t result;

  result = sub_1000E6C34();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000E6C98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10012C680;
  if (!qword_10012C680)
  {
    v1 = sub_100025A6C(&qword_10012C688);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyIterator<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10012C680);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Cursor(uint64_t a1, int a2)
{
  int v2;

  if (a2)
  {
    if (a2 == 1 || !*(_BYTE *)(a1 + 16))
    {
      if (*(_QWORD *)a1)
        v2 = -1;
      else
        v2 = 0;
    }
    else
    {
      v2 = *(_DWORD *)a1 + 1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Cursor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Cursor()
{
  return &type metadata for Cursor;
}

uint64_t sub_1000E6D64(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;
  _BYTE v18[40];

  v10 = swift_allocObject(&unk_100120550, 24, 7);
  *(_QWORD *)(v10 + 16) = 0;
  v11 = (_QWORD *)swift_allocObject(&unk_100120638, 40, 7);
  v11[2] = v10;
  v11[3] = a4;
  v11[4] = a5;
  v12 = sub_10001BE7C(&qword_10012C670);
  result = swift_allocObject(v12, 32, 7);
  v14 = result;
  v15 = 0;
  *(_QWORD *)(result + 16) = sub_1000E6F98;
  *(_QWORD *)(result + 24) = v11;
  if (!a2 || !a3)
  {
LABEL_11:
    *a1 = v14;
    return v15;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    sub_1000114B0((uint64_t)v16);
    if (v17 == 1)
    {
      v15 = 0;
LABEL_9:
      sub_10001316C((uint64_t)v16, &qword_10012C750);
    }
    else
    {
      v15 = 0;
      while (1)
      {
        sub_100011470((uint64_t)v16, (uint64_t)v18, &qword_100129578);
        sub_100011470((uint64_t)v18, a2, &qword_100129578);
        if (a3 - 1 == v15)
          break;
        a2 += 40;
        sub_1000114B0((uint64_t)v16);
        ++v15;
        if (v17 == 1)
          goto LABEL_9;
      }
      v15 = a3;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E6EB8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  result = sub_10001D580(0);
  v8 = 0;
  if (!a2 || !a3)
  {
LABEL_11:
    *a1 = v3;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = (unint64_t)Statement.failableNext()();
    if (v10)
    {
LABEL_9:
      swift_unexpectedError(v10, "SQLite/Statement.swift", 22, 1, 211);
      __break(1u);
LABEL_10:
      v8 = a3;
    }
    else
    {
      v8 = 0;
      while (v9)
      {
        *(_QWORD *)(a2 + 8 * v8) = v9;
        if (a3 - 1 == v8)
          goto LABEL_10;
        v9 = (unint64_t)Statement.failableNext()();
        ++v8;
        if (v10)
          goto LABEL_9;
      }
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E6F74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E6FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[112];
  _QWORD v22[5];
  _QWORD v23[5];

  v23[4] = &protocol witness table for Expression<A>;
  v23[0] = a1;
  v23[1] = a2;
  v23[2] = a3;
  v23[3] = sub_10001BE7C(&qword_100129560);
  v22[3] = &type metadata for Int;
  v22[4] = &protocol witness table for Int;
  v22[0] = a4;
  v7 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v7, v21);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  sub_1000132C4((uint64_t)v23, inited + 32);
  sub_1000132C4((uint64_t)v22, inited + 72);
  sub_10000BFF4();
  sub_100013E10();
  sub_10001A118(inited, a5, 0xE300000000000000, v18);
  v9 = v19;
  v10 = v20;
  sub_10000E858(v18, v19);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  v13 = v12;
  v15 = v14;
  sub_10000E87C(v18);
  v16 = sub_1000E0CE4(v11, v13, v15, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating(inited);
  sub_10001E778();
  sub_10000E87C(v22);
  sub_10000E87C(v23);
  return v16;
}

uint64_t Setter.expression.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[3];
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[112];

  v1 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v1, v10);
  *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
  sub_1000132C4(v0, inited + 32);
  sub_1000132C4(v0 + 40, inited + 72);
  sub_10001A118(inited, 2112800, 0xE300000000000000, v7);
  v3 = v8;
  v4 = v9;
  sub_10000E858(v7, v8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  sub_10000E87C(v7);
  swift_setDeallocating(inited);
  sub_10001E778();
  return v5;
}

uint64_t sub_1000E71F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t result;

  result = type metadata accessor for Expression(0, a7, a3, a4);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = result;
  a8[8] = result;
  a8[9] = &protocol witness table for Expression<A>;
  a8[4] = &protocol witness table for Expression<A>;
  a8[5] = a4;
  a8[6] = a5;
  a8[7] = a6;
  return result;
}

uint64_t sub_1000E7268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v16 = type metadata accessor for Optional(255, a7);
  a8[3] = type metadata accessor for Expression(0, v16, v17, v18);
  a8[4] = &protocol witness table for Expression<A>;
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  result = type metadata accessor for Expression(0, a7, v19, v20);
  a8[8] = result;
  a8[9] = &protocol witness table for Expression<A>;
  a8[5] = a4;
  a8[6] = a5;
  a8[7] = a6;
  return result;
}

uint64_t sub_1000E7304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v15 = type metadata accessor for Optional(255, a7);
  result = type metadata accessor for Expression(0, v15, v16, v17);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = result;
  a8[8] = result;
  a8[9] = &protocol witness table for Expression<A>;
  a8[4] = &protocol witness table for Expression<A>;
  a8[5] = a4;
  a8[6] = a5;
  a8[7] = a6;
  return result;
}

void <- infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001E9CC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_10001E9CC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_10001E9CC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

double sub_1000E73E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void))
{
  double result;

  a9();
  sub_10000BFF4();
  sub_100013E10();
  swift_bridgeObjectRetain();
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t += infix(_:_:)()
{
  return sub_1000E7484();
}

{
  return sub_1000E74D8();
}

{
  return sub_1000E7484();
}

{
  return sub_1000E7484();
}

{
  return sub_1000E74D8();
}

uint64_t sub_1000E7484()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;

  sub_10001B55C();
  v1();
  v2 = sub_100019BD4();
  sub_100017F88(v2, (uint64_t)&protocol witness table for Expression<A>);
  return sub_10001C758(v0);
}

uint64_t sub_1000E74D8()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;

  sub_10001B55C();
  v1();
  v2 = sub_100019BD4();
  sub_100017F88(v2, (uint64_t)&protocol witness table for Expression<A>);
  return sub_10001C758(v0);
}

void += infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

void += infix<A>(_:_:)()
{
  sub_1000E765C();
  sub_100017714();
}

{
  sub_1000E765C();
  sub_100017714();
}

uint64_t sub_1000E759C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_100018B20();
  v11 = a10(v10);
  sub_10001787C(v11, v12, v13);
  sub_10000E038();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E765C()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100018B20();
  v2 = v1();
  sub_10001787C(v2, v3, v4);
  sub_10000E038();
  return sub_100018510(v0);
}

void -= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

void -= infix<A>(_:_:)()
{
  sub_1000E765C();
  sub_100017714();
}

{
  sub_1000E765C();
  sub_100017714();
}

void *= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

void *= infix<A>(_:_:)()
{
  sub_1000E765C();
  sub_100017714();
}

{
  sub_1000E765C();
  sub_100017714();
}

void /= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

{
  sub_10001B024(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10001B3F4();
}

void /= infix<A>(_:_:)()
{
  sub_1000E765C();
  sub_100017714();
}

{
  sub_1000E765C();
  sub_100017714();
}

void %= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

uint64_t %= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)% infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)% infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

uint64_t sub_1000E7998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_100018B20();
  v10 = a9();
  sub_10001787C(v10, v11, v12);
  sub_10000E038();
  return sub_100018510(v9);
}

uint64_t sub_1000E7A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t))
{
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10001CE0C();
  v9();
  v11 = v10;
  v12 = sub_10001DE00();
  a8(v12);
  swift_bridgeObjectRelease();
  return sub_100018510(v11);
}

void <<= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

uint64_t <<= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)<< infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)<< infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

void >>= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

uint64_t >>= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)>> infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)>> infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

void &= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

uint64_t &= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)& infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)& infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

void |= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

uint64_t |= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)| infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)| infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

void ^= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

{
  sub_100018550(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100017714();
}

uint64_t ^= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)^ infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

{
  return sub_1000E7A18(a1, a2, a3, a4, a5, a6, (uint64_t)^ infix<A>(_:_:), (void (*)(uint64_t))<- infix<A>(_:_:));
}

void ++ postfix<A>(_:)()
{
  sub_100011920();
}

{
  sub_100015A30();
}

void -- postfix<A>(_:)()
{
  sub_100011920();
}

{
  sub_100015A30();
}

void sub_1000E7DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_10001DA44();
  sub_10001BE7C(&qword_100129560);
  v6 = type metadata accessor for Expression(0, v0, v4, v5);
  sub_1000E7ECC();
  sub_100017B30();
  sub_10000C030();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v6);
  v15 = sub_10001B858(WitnessTable, v8, v9, v10, v11, v12, v13, v14, v3);
  v23 = sub_10001B21C(v15, v16, v17, v18, v19, v20, v21, v22, v26, v2, v1, v27, v28, v29);
  sub_100018CE0(v23, v24, v25, (uint64_t)&protocol witness table for Expression<A>);
  sub_100017DE8();
}

void sub_1000E7E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_10001DA44();
  sub_10001BE7C(&qword_100129560);
  v4 = type metadata accessor for Optional(255, v0);
  v7 = type metadata accessor for Expression(0, v4, v5, v6);
  sub_1000E7ECC();
  sub_100017B30();
  sub_10000C030();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v7);
  v16 = sub_10001B858(WitnessTable, v9, v10, v11, v12, v13, v14, v15, v3);
  v24 = sub_10001B21C(v16, v17, v18, v19, v20, v21, v22, v23, v27, v2, v1, v28, v29, v30);
  sub_100018CE0(v24, v25, v26, (uint64_t)&protocol witness table for Expression<A>);
  sub_100017DE8();
}

unint64_t sub_1000E7ECC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10012B850;
  if (!qword_10012B850)
  {
    v1 = sub_100025A6C(&qword_100129560);
    result = swift_getWitnessTable(&protocol conformance descriptor for Expression<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10012B850);
  }
  return result;
}

_QWORD *assignWithCopy for Setter(_QWORD *a1, _QWORD *a2)
{
  sub_100040534(a1, a2);
  sub_100040534(a1 + 5, a2 + 5);
  return a1;
}

void *initializeWithTake for Setter(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for Setter(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  sub_10000E87C((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_10000E87C((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for Setter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Setter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Setter()
{
  return &type metadata for Setter;
}

uint64_t static DateFunctions.date(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000178AC(a1, a2, a3, 1702125924);
}

uint64_t sub_1000E8054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = *(_QWORD *)(a5 + 16);
  if (v9)
  {
    sub_1000E846C((_QWORD *)0x3F, 0xE100000000000000, v9);
    v10 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
    v11 = sub_1000D6740();
    v12 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v10, v11);
    v14 = v13;
    swift_bridgeObjectRelease();
    v26 = a1;
    v27 = a2;
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = 539770664;
    v15._object = (void *)0xE400000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = v12;
    v16._object = v14;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 41;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18 = a1;
    v19 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
    inited = swift_initStackObject(v19, &v25);
    *(_OWORD *)(inited + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(inited + 32) = a3;
    *(_QWORD *)(inited + 40) = a4;
    v26 = inited;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100058FC0();
    sub_100050724(v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = a1;
    v27 = a2;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = 2703144;
    v21._object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    v18 = v26;
    v22 = sub_10001BE7C(&qword_1001296C8);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(v23 + 56) = type metadata for String;
    *(_QWORD *)(v23 + 64) = &protocol witness table for String;
    *(_QWORD *)(v23 + 32) = a3;
    *(_QWORD *)(v23 + 40) = a4;
    swift_bridgeObjectRetain();
  }
  return v18;
}

uint64_t static DateFunctions.time(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000178AC(a1, a2, a3, 1701669236);
}

uint64_t static DateFunctions.datetime(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E8260(a1, a2, a3, 0x656D697465746164, 0xE800000000000000);
}

uint64_t static DateFunctions.julianday(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E8260(a1, a2, a3, 0x61646E61696C756ALL, 0xE900000000000079);
}

uint64_t sub_1000E8260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000E8054(a4, a5, a1, a2, a3);
}

uint64_t static DateFunctions.strftime(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v9 = *(_QWORD *)(a5 + 16);
  if (v9)
  {
    sub_1000E846C((_QWORD *)0x3F, 0xE100000000000000, v9);
    v10 = sub_10001BE7C((uint64_t *)&unk_10012AD80);
    v11 = sub_1000D6740();
    v12 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v10, v11);
    v14 = v13;
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v22 = 0x656D697466727473;
    v23 = 0xEF202C3F202C3F28;
    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    sub_100018558();
    v16 = sub_10001BE7C((uint64_t *)&unk_100129CC0);
    inited = swift_initStackObject(v16, &v21);
    *(_OWORD *)(inited + 16) = xmmword_1000EFD90;
    *(_QWORD *)(inited + 32) = a1;
    *(_QWORD *)(inited + 40) = a2;
    *(_QWORD *)(inited + 48) = a3;
    *(_QWORD *)(inited + 56) = a4;
    v22 = inited;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100058FC0();
    sub_100050724(v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = sub_10001BE7C(&qword_1001296C8);
    v19 = swift_allocObject(v18, 112, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1000EFD90;
    *(_QWORD *)(v19 + 56) = type metadata for String;
    *(_QWORD *)(v19 + 64) = &protocol witness table for String;
    *(_QWORD *)(v19 + 32) = a1;
    *(_QWORD *)(v19 + 40) = a2;
    *(_QWORD *)(v19 + 96) = type metadata for String;
    *(_QWORD *)(v19 + 104) = &protocol witness table for String;
    *(_QWORD *)(v19 + 72) = a3;
    *(_QWORD *)(v19 + 80) = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return 0x656D697466727473;
}

_QWORD *sub_1000E846C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v5 = result;
      v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a3, &type metadata for String);
      v7 = v6;
      v6[2] = a3;
      v6[4] = v5;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = v5;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = v5;
            *v9 = a2;
            sub_10000EC68();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        sub_10000EC68();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
    return v7;
  }
  return result;
}

uint64_t DateFunctions.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t Date.date.getter()
{
  return sub_10001B030(1702125924);
}

uint64_t type metadata accessor for DateFunctions()
{
  return objc_opt_self(_TtC6SQLite13DateFunctions);
}

uint64_t Date.time.getter()
{
  return sub_10001B030(1701669236);
}

uint64_t Date.datetime.getter()
{
  return sub_1000E8584(0x656D697465746164, 0xE800000000000000);
}

uint64_t Date.julianday.getter()
{
  return sub_1000E8584(0x61646E61696C756ALL, 0xE900000000000079);
}

uint64_t sub_1000E8584(uint64_t a1, uint64_t a2)
{
  objc_class *v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  type metadata accessor for DateFunctions();
  if (qword_10012BF98 != -1)
    swift_once(&qword_10012BF98, sub_1000E8FCC);
  swift_beginAccess(&dateFormatter, v12, 0, 0);
  v4 = dateFormatter.super.super.isa;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v6 = -[objc_class stringFromDate:](v4, "stringFromDate:", isa);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = sub_1000E8054(a1, a2, v7, v9, (uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t Expression<A>.date.getter(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_10001C8D4(a1, a2, a3, 1702125924);
}

uint64_t Expression<A>.time.getter(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_10001C8D4(a1, a2, a3, 1701669236);
}

uint64_t Expression<A>.datetime.getter(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000E86E8(a1, a2, a3, 0x656D697465746164);
}

uint64_t Expression<A>.julianday.getter(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000E86E8(a1, a2, a3, 0x61646E61696C756ALL);
}

uint64_t sub_1000E86E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  Swift::String v6;

  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_100018558();
  sub_10000EC68();
  return a4;
}

uint64_t Backup.__allocating_init(sourceConnection:sourceName:targetConnection:targetName:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = swift_allocObject(v6, 40, 7);
  Backup.init(sourceConnection:sourceName:targetConnection:targetName:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

sqlite3_backup *Backup.pageCount.getter()
{
  uint64_t v0;
  sqlite3_backup *result;

  result = *(sqlite3_backup **)(v0 + 32);
  if (result)
    return (sqlite3_backup *)sqlite3_backup_pagecount(result);
  return result;
}

sqlite3_backup *Backup.remainingPages.getter()
{
  uint64_t v0;
  sqlite3_backup *result;

  result = *(sqlite3_backup **)(v0 + 32);
  if (result)
    return (sqlite3_backup *)sqlite3_backup_remaining(result);
  return result;
}

_QWORD *Backup.init(sourceConnection:sourceName:targetConnection:targetName:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  sqlite3 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  sqlite3_backup *v24;
  sqlite3 *v25;
  unsigned int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  sqlite3 *pDest;

  v7 = v6;
  v6[3] = a1;
  v6[4] = 0;
  v6[2] = a4;
  pDest = (sqlite3 *)Connection.handle.getter();
  v12 = 0xE400000000000000;
  v13 = 1886217588;
  if (a6 != 1)
  {
    v13 = a5;
    v12 = a6;
  }
  v14 = a6 == 0;
  if (a6)
    v15 = v13;
  else
    v15 = 1852399981;
  if (v14)
    v16 = 0xE400000000000000;
  else
    v16 = v12;
  v17 = (sqlite3 *)Connection.handle.getter();
  v18 = 0xE400000000000000;
  v19 = 1886217588;
  if (a3 != 1)
  {
    v19 = a2;
    v18 = a3;
  }
  if (a3)
    v20 = v19;
  else
    v20 = 1852399981;
  if (a3)
    v21 = v18;
  else
    v21 = 0xE400000000000000;
  v22 = String.utf8CString.getter(v15, v16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v23 = String.utf8CString.getter(v20, v21);
  swift_bridgeObjectRelease();
  v24 = sqlite3_backup_init(pDest, (const char *)(v22 + 32), v17, (const char *)(v23 + 32));
  swift_release();
  swift_release();
  v7[4] = v24;
  if (v24
    || (v25 = (sqlite3 *)Connection.handle.getter(),
        v26 = sqlite3_errcode(v25),
        swift_retain(),
        v27 = sub_1000EBA48(v26),
        !v28))
  {
    swift_release();
    swift_release();
  }
  else
  {
    v31 = (uint64_t)v27;
    v32 = v28;
    v33 = v29;
    v34 = v30;
    swift_release();
    v35 = sub_10004FC40();
    sub_1000176B0((uint64_t)&type metadata for Result, v35);
    *(_QWORD *)v36 = v31;
    *(_QWORD *)(v36 + 8) = v32;
    *(_DWORD *)(v36 + 16) = v33;
    *(_QWORD *)(v36 + 24) = v34;
    swift_bridgeObjectRetain();
    v37 = swift_retain();
    swift_willThrow(v37);
    swift_release();
    swift_release();
    sub_1000E8A0C(v31, v32, v33, v34);
  }
  return v7;
}

uint64_t sub_1000E8A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_release(a4);
  }
  return result;
}

void Backup.step(pagesToCopy:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  const char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((a1 & (unint64_t)&_mh_execute_header) != 0)
    v2 = -1;
  else
    v2 = a1;
  v3 = sqlite3_backup_step(*(sqlite3_backup **)(v1 + 32), v2);
  if (v3 == 101)
  {
    Backup.finish()();
  }
  else
  {
    v4 = v3;
    swift_retain();
    v5 = sub_1000EBA48(v4);
    if (v6)
    {
      v9 = v5;
      v10 = v6;
      v11 = v7;
      v12 = v8;
      v13 = sub_10004FC40();
      v14 = sub_1000176B0((uint64_t)&type metadata for Result, v13);
      *(_QWORD *)v15 = v9;
      *(_QWORD *)(v15 + 8) = v10;
      *(_DWORD *)(v15 + 16) = v11;
      *(_QWORD *)(v15 + 24) = v12;
      swift_willThrow(v14);
    }
  }
}

Swift::Void __swiftcall Backup.finish()()
{
  uint64_t v0;
  sqlite3_backup *v1;

  v1 = *(sqlite3_backup **)(v0 + 32);
  if (v1)
  {
    sqlite3_backup_finish(v1);
    *(_QWORD *)(v0 + 32) = 0;
  }
}

uint64_t Backup.deinit()
{
  uint64_t v0;

  Backup.finish()();
  swift_release();
  swift_release();
  return v0;
}

uint64_t Backup.__deallocating_deinit()
{
  uint64_t v0;

  Backup.deinit();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for Backup()
{
  return objc_opt_self(_TtC6SQLite6Backup);
}

ValueMetadata *type metadata accessor for Backup.DatabaseName()
{
  return &type metadata for Backup.DatabaseName;
}

ValueMetadata *type metadata accessor for Backup.Pages()
{
  return &type metadata for Backup.Pages;
}

NSDateFormatter *dateFormatter.unsafeMutableAddressor()
{
  if (qword_10012BF98 != -1)
    swift_once(&qword_10012BF98, sub_1000E8FCC);
  return &dateFormatter;
}

uint64_t static Data.fromDatatypeValue(_:)()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  return sub_1000B7750(v0);
}

void Data.datatypeValue.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1000E8C28()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000E9354(v0, v1 & 0xFFFFFFFFFFFFLL, BYTE6(v1), v0, v1);
}

void sub_1000E8D08(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = static Data.fromDatatypeValue(_:)();
  a1[1] = v2;
  sub_10000BFBC();
}

void sub_1000E8D2C(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  Data.datatypeValue.getter(*v1, v1[1]);
  *a1 = v3;
  sub_10000BFBC();
}

uint64_t static Date.fromDatatypeValue(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  NSString v12;
  id v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _BYTE v16[24];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10001765C();
  v6 = v5 - v4;
  v7 = sub_10001BE7C(&qword_10012AA18);
  __chkstk_darwin(v7);
  sub_10001765C();
  v10 = v9 - v8;
  if (qword_10012BF98 != -1)
    swift_once(&qword_10012BF98, sub_1000E8FCC);
  sub_100017870((uint64_t)&dateFormatter, (uint64_t)v16);
  v11 = dateFormatter.super.super.isa;
  v12 = String._bridgeToObjectiveC()();
  v13 = -[objc_class dateFromString:](v11, "dateFromString:", v12);

  if (v13)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v14(v10, v6, v2);
    sub_10001B3FC(v10, 0);
    result = sub_10001C93C(v10, 1, v2);
    if ((_DWORD)result != 1)
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(a1, v10, v2);
  }
  else
  {
    result = sub_10001B3FC(v10, 1);
  }
  __break(1u);
  return result;
}

uint64_t Date.datatypeValue.getter()
{
  objc_class *v0;
  Class isa;
  id v2;
  uint64_t v3;
  _BYTE v5[24];

  if (qword_10012BF98 != -1)
    swift_once(&qword_10012BF98, sub_1000E8FCC);
  sub_100017870((uint64_t)&dateFormatter, (uint64_t)v5);
  v0 = dateFormatter.super.super.isa;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v2 = -[objc_class stringFromDate:](v0, "stringFromDate:", isa);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t sub_1000E8FA0@<X0>(uint64_t a1@<X8>)
{
  return static Date.fromDatatypeValue(_:)(a1);
}

void sub_1000E8FAC(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = Date.datatypeValue.getter();
  a1[1] = v2;
  sub_10000BFBC();
}

objc_class *sub_1000E8FCC()
{
  objc_class *result;

  result = (objc_class *)sub_1000E8FE8();
  dateFormatter.super.super.isa = result;
  return result;
}

id sub_1000E8FE8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  Class isa;
  uint64_t v9;
  Class v10;
  uint64_t v12;

  v0 = sub_10001BE7C(&qword_10012C970);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  sub_1000E94B8(0xD000000000000019, 0x80000001000F7160, v7);
  Locale.init(identifier:)(0x4F505F53555F6E65, 0xEB00000000584953);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_msgSend(v7, "setLocale:", isa);

  TimeZone.init(secondsFromGMT:)(0);
  v9 = type metadata accessor for TimeZone(0);
  v10 = 0;
  if (sub_10001C93C((uint64_t)v2, 1, v9) != 1)
  {
    v10 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v2, v9);
  }
  objc_msgSend(v7, "setTimeZone:", v10);

  return v7;
}

uint64_t static UUID.fromDatatypeValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = sub_10001BE7C((uint64_t *)&unk_1001281C0);
  __chkstk_darwin(v6);
  sub_10001765C();
  v9 = v8 - v7;
  UUID.init(uuidString:)(a1, a2);
  v10 = type metadata accessor for UUID(0);
  result = sub_10001C93C(v9, 1, v10);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a3, v9, v10);
  __break(1u);
  return result;
}

uint64_t sub_1000E9238@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return static UUID.fromDatatypeValue(_:)(*a1, a1[1], a2);
}

void sub_1000E9244(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = UUID.datatypeValue.getter();
  a1[1] = v2;
  sub_10000BFBC();
}

void sub_1000E9264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = __DataStorage._bytes.getter();
  if (v7)
  {
    v8 = v7;
    v9 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v9))
    {
      __break(1u);
      JUMPOUT(0x1000E9338);
    }
    v10 = v8 + a1 - v9;
  }
  else
  {
    v10 = 0;
  }
  __DataStorage._length.getter();
  if (v10)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1000E9344);
}

void sub_1000E9354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E9410()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[6];

  _s6SQLite4BlobV5bytes6lengthACSV_SitcfC_0(v5, BYTE6(v0));
  v3 = v2;
  sub_10001EA88(v1, v0);
  return v3;
}

_UNKNOWN **sub_1000E94A0()
{
  return &protocol witness table for Blob;
}

_UNKNOWN **sub_1000E94AC()
{
  return &protocol witness table for String;
}

void sub_1000E94B8(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, "setDateFormat:", v5);

}

void QueryError.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E9548()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v12;
  uint64_t v13;

  sub_10001B038();
  _StringGuts.grow(_:)(17);
  sub_1000178B4(v2, v3, v4, v5, v6, v7, v8, v9, v12, v13);
  v10._countAndFlagsBits = v1;
  v10._object = v0;
  String.append(_:)(v10);
  return 0x2068637573206F4ELL;
}

void sub_1000E96BC()
{
  uint64_t v0;

  QueryError.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000E96CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  result = a2;
  if (a4 - 1 < 2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  else if (!a4 || a4 == 3)
  {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for QueryError(uint64_t a1)
{
  return sub_1000E972C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_1000E972C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  result = a2;
  if (a4 - 1 < 2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }
  else if (!a4 || a4 == 3)
  {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t initializeWithCopy for QueryError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1000E96CC(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for QueryError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1000E96CC(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1000E972C(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for QueryError(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for QueryError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1000E972C(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000E9928(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1000E9930(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for QueryError()
{
  return &type metadata for QueryError;
}

uint64_t sub_1000E9948(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[40];
  uint64_t v60;

  v47 = a5;
  v48 = a8;
  v54 = a1;
  v55 = a2;
  v46 = *(_QWORD *)(a5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v56 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8), v14);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = ((uint64_t (*)(void))__chkstk_darwin)();
  v51 = (char *)&v42 - v18;
  v19 = a4;
  __chkstk_darwin(v17);
  v50 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness(0, a6, a3);
  v49 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v45 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v42 - v24;
  v52 = v8;
  v26 = a6;
  v27 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v27)
    return static Array._allocateUninitialized(_:)(0, v19);
  v28 = v27;
  v43 = v21;
  v29 = v16;
  v60 = ContiguousArray.init()(v19);
  v53 = type metadata accessor for ContiguousArray(0, v19);
  ContiguousArray.reserveCapacity(_:)(v28);
  v44 = v25;
  v30 = a3;
  v31 = v52;
  v32 = v30;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v28 < 0)
  {
    __break(1u);
  }
  else
  {
    v57 = v26;
    v35 = v50;
    v34 = v51;
    v36 = v44;
    while (1)
    {
      v37 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v59, v36, v32, v57);
      (*(void (**)(char *))(v29 + 16))(v34);
      v37(v59, 0);
      v38 = v58;
      v54(v34, v56);
      if (v38)
        break;
      v58 = 0;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v34, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v35, v53);
      dispatch thunk of Collection.formIndex(after:)(v36, v32, v57);
      if (!--v28)
      {
        v39 = v49;
        v40 = v45;
        v41 = v43;
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v45, v36, v43);
        _expectEnd<A>(of:is:)(v31, v40, v32, v57);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
        return v60;
      }
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v34, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v43);
    swift_release(v60);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v46 + 32))(v48, v56, v47);
  }
  return result;
}

uint64_t sub_1000E9C84(_QWORD *a1, uint64_t a2)
{
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;

  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 40;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4 = a1[3];
  v5 = a1[4];
  sub_10000E858(a1, v4);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v7 = v6(v4, v5);
  v9 = v8;
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v6(v4, v5);
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_1000E9D68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E9D94
                                                            + 4 * asc_1000F3058[a1]))(7561825, 0xE300000000000000);
}

uint64_t sub_1000E9D94()
{
  return 0x646E756F72;
}

uint64_t sub_1000E9DA8()
{
  return 0x6D6F646E6172;
}

uint64_t sub_1000E9DBC()
{
  return 0x6C626D6F646E6172;
}

uint64_t sub_1000E9DD8()
{
  return 0x626F6C626F72657ALL;
}

uint64_t sub_1000E9DF0()
{
  return 0x6874676E656CLL;
}

uint64_t sub_1000E9E04()
{
  return 0x7265776F6CLL;
}

uint64_t sub_1000E9E28()
{
  return 0x6D6972746CLL;
}

uint64_t sub_1000E9E3C()
{
  return 0x6D69727472;
}

uint64_t sub_1000E9E54()
{
  return 1835627124;
}

uint64_t sub_1000E9E64()
{
  return 0x6563616C706572;
}

uint64_t sub_1000E9E7C()
{
  return 0x727473627573;
}

uint64_t sub_1000E9E90()
{
  return 1162561868;
}

uint64_t sub_1000E9EA0()
{
  return 20041;
}

uint64_t sub_1000E9EAC()
{
  return 1112493127;
}

uint64_t sub_1000E9EBC()
{
  return 0x484354414DLL;
}

uint64_t sub_1000E9ED0()
{
  return 0x505845474552;
}

uint64_t sub_1000E9EE4()
{
  return 0x4554414C4C4F43;
}

uint64_t sub_1000E9EFC()
{
  return 0x6C6C756E6669;
}

uint64_t sub_1000E9F10(_QWORD *a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000E9D68(a2);
  v5 = sub_1000D72B0(a1, v3, v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000E9F7C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[5];

  v3 = sub_1000E9D68(a2);
  v5 = v4;
  sub_10001A118(a1, 8236, 0xE200000000000000, v8);
  v6 = sub_1000D72B0(v8, v3, v5);
  swift_bridgeObjectRelease();
  sub_10000E87C(v8);
  return v6;
}

void ExpressionType<>.absoluteValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[5];

  v8 = sub_10001AA0C(a1, a2, a3, a4, a5, a6, a7, a8, v10, v11[0], v11[1], v11[2], v11[3], v11[4]);
  sub_10001B874((uint64_t)v8);
  v9 = sub_10001909C();
  sub_100019DE4(v9);
  sub_10000E87C(v11);
  sub_10001C134();
  sub_100013618();
}

void ExpressionType<>.round(_:)(unint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *inited;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[5];
  _BYTE v44[72];

  v3 = v2;
  v6 = sub_10001BE7C(&qword_100128D58);
  if ((a2 & 1) != 0)
  {
    inited = (__n128 *)swift_initStackObject(v6, v44);
    v16 = sub_100018F90(inited, (__n128)xmmword_1000EFAE0);
    sub_10001DA60((uint64_t)v16);
  }
  else
  {
    inited = (__n128 *)sub_100015A10(v6, v7, v8, v9, v10, v11, v12, v13, v29);
    v15 = sub_100018F90(inited, (__n128)xmmword_1000EFD90);
    sub_10001DA60((uint64_t)v15);
    inited[6].n128_u64[0] = (unint64_t)&type metadata for Int;
    inited[6].n128_u64[1] = (unint64_t)&protocol witness table for Int;
    inited[4].n128_u64[1] = a1;
  }
  sub_100005A18((uint64_t)inited, v43);
  sub_10001EFF8(v17, v18, v19, v20, v21, v22, v23, v24, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43[0],
    v43[1],
    v43[2],
    v43[3]);
  sub_10001A100();
  sub_10001C528(v25, v26, v27, v28, v3);
  sub_10000E87C(v43);
  sub_100019D18();
  sub_10001E778();
  sub_100015994();
  sub_100018800();
}

uint64_t ExpressionType<>.round(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28[19];

  if ((a2 & 1) != 0)
  {
    sub_10001A100();
    sub_10001C528(v22, v23, v24, v25, v26);
    sub_10000DDD0();
  }
  else
  {
    v8 = sub_10001BE7C(&qword_100128D58);
    v15 = sub_10001F124(v8, v9, v10, v11, v12, v13, v14);
    *(_OWORD *)(v15 + 16) = xmmword_1000EFD90;
    *(_QWORD *)(v15 + 56) = a3;
    *(_QWORD *)(v15 + 64) = *(_QWORD *)(a4 + 8);
    v16 = sub_10001795C((_QWORD *)(v15 + 32));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v16, v4, a3);
    *(_QWORD *)(v15 + 96) = &type metadata for Int;
    *(_QWORD *)(v15 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v15 + 72) = a1;
    sub_100005A18(v15, v28);
    v17 = v28[4];
    sub_10000E858(v28, v28[3]);
    sub_10001A100();
    sub_10001C528(v18, v19, v20, v21, v17);
    sub_10000DDD0();
    sub_10000E87C(v28);
    sub_100018640();
    sub_10000585C();
  }
  return sub_1000EB9A4();
}

uint64_t static ExpressionType<>.random()(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness(0, a2, a1);
  return sub_1000E9F7C((uint64_t)_swiftEmptyArrayStorage, 2u);
}

void static ExpressionType<>.random(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000EA298(a1, a2, a3, 0x6C626D6F646E6172);
}

void static ExpressionType<>.allZeros(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000EA298(a1, a2, a3, 0x626F6C626F72657ALL);
}

void sub_1000EA298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5[5];

  sub_100005A18((uint64_t)_swiftEmptyArrayStorage, v5);
  sub_1000E9C84(v5, a4);
  sub_10000E87C(v5);
  sub_10001C134();
  sub_100013618();
}

uint64_t ExpressionType<>.length.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000178BC(a1, a2, a3, a4, sub_10001C528);
}

uint64_t ExpressionType<>.lowercaseString.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001B408(a1, a2, 1702326124, a4, sub_10001C528);
}

uint64_t ExpressionType<>.uppercaseString.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001B408(a1, a2, 1701867637, a4, sub_10001C528);
}

void ExpressionType<>.like(_:escape:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 *inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];
  _BYTE v29[112];
  _QWORD v30[5];
  uint64_t v31;
  Swift::String v32;

  sub_1000EB9C0();
  if (v7)
  {
    sub_100005988(v4, v5, v6, v7);
    sub_10001EED4();
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = sub_10001F7FC();
    sub_1000EBA3C(v32);
    sub_1000059B0();
    sub_10001AAE8((uint64_t)" LIKE ? ESCAPE ?)");
    v8 = sub_100010848();
    v9 = sub_10001BE7C(&qword_1001296C8);
    v17 = sub_100015A10(v9, v10, v11, v12, v13, v14, v15, v16, v27);
    *(_OWORD *)(v17 + 16) = xmmword_1000EFD90;
    *(_QWORD *)(v17 + 56) = type metadata for String;
    *(_QWORD *)(v17 + 64) = &protocol witness table for String;
    *(_QWORD *)(v17 + 32) = v1;
    *(_QWORD *)(v17 + 40) = v0;
    *(_QWORD *)(v17 + 96) = type metadata for String;
    *(_QWORD *)(v17 + 104) = &protocol witness table for String;
    *(_QWORD *)(v17 + 72) = v3;
    *(_QWORD *)(v17 + 80) = v2;
    v31 = v8;
    sub_10000EC68();
    sub_10001F230();
  }
  else
  {
    v18 = sub_100010098();
    sub_100016360((uint64_t)v18);
    v30[3] = type metadata for String;
    v30[4] = &protocol witness table for String;
    v30[0] = v1;
    v30[1] = v0;
    v19 = sub_10001BE7C(&qword_100128D58);
    inited = (__n128 *)swift_initStackObject(v19, v29);
    v21 = sub_100019B9C(inited, (__n128)xmmword_1000EFD90);
    sub_10000EB78(v21, (uint64_t)&inited[4].n128_i64[1]);
    sub_10000EC68();
    sub_10001C8FC((uint64_t)inited, v28);
    sub_10000E858(v28, v28[3]);
    v22 = sub_10001947C();
    v24 = v23;
    v26 = v25;
    sub_10000E87C(v28);
    sub_1000133F0(v22, v24, v26);
    sub_1000101FC();
    swift_bridgeObjectRelease();
    sub_100018640();
    sub_10000585C();
    sub_10000E87C(v30);
    sub_10000E87C(&v31);
  }
  sub_10001C2A4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[5];
  char v74;
  uint64_t v75;

  sub_10001EF30();
  if (v4)
  {
    v7 = v4;
    v8 = v3;
    v9 = sub_10000C144(v0, v1, v2, v3, v4, v5, v6);
    sub_10000EB64((uint64_t)v9);
    v10 = sub_10001BE7C(&qword_100128D00);
    sub_100005A58(v10, (uint64_t)&protocol witness table for Expression<A>);
    v11 = sub_10001BE7C(&qword_100128D58);
    v19 = (__n128 *)sub_1000EBA20(v11, v12, v13, v14, v15, v16, v17, v18, v49, v51);
    v20 = sub_100017B20(v19, (__n128)xmmword_1000EFD90);
    sub_10001B714(v20, (uint64_t)&v19[4].n128_i64[1]);
    sub_10000EC68();
    sub_10000BFF4();
    sub_1000101B0();
    sub_10001C8FC((uint64_t)v19, v73);
    sub_100019128(v73);
    v22 = v21;
    sub_10000E87C(v73);
    swift_setDeallocating(v19);
    sub_10001E778();
    sub_10001E320();
    sub_100019D48();
    sub_1000101FC();
    sub_10001B23C();
    v23 = sub_10001BE7C(&qword_1001296C8);
    v31 = sub_100015A10(v23, v24, v25, v26, v27, v28, v29, v30, v50);
    *(_OWORD *)(v31 + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(v31 + 56) = type metadata for String;
    *(_QWORD *)(v31 + 64) = &protocol witness table for String;
    *(_QWORD *)(v31 + 32) = v8;
    *(_QWORD *)(v31 + 40) = v7;
    v75 = v22;
    sub_10000C020();
    sub_10001F230();
    sub_1000059B0();
    sub_1000101FC();
  }
  else
  {
    v32 = sub_10000C144(v0, v1, v2, v3, 0, v5, v6);
    sub_10000EB64((uint64_t)v32);
    v33 = sub_10001BE7C(&qword_100128D00);
    sub_100005A58(v33, (uint64_t)&protocol witness table for Expression<A>);
    v34 = sub_10001BE7C(&qword_100128D58);
    v42 = (__n128 *)sub_100016758(v34, v35, v36, v37, v38, v39, v40, v41, v49, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60,
                      v61,
                      v62,
                      v63,
                      v64,
                      v65,
                      v66,
                      v67,
                      v68,
                      v69,
                      v70,
                      v71,
                      v72,
                      v73[0],
                      v73[1],
                      v73[2],
                      v73[3],
                      v73[4],
                      v74);
    v43 = sub_100017B20(v42, (__n128)xmmword_1000EFD90);
    sub_10001B714(v43, (uint64_t)&v42[4].n128_i64[1]);
    sub_10000BFF4();
    sub_1000101B0();
    sub_10001C8FC((uint64_t)v42, v73);
    v44 = sub_100010068(v73);
    v46 = v45;
    v48 = v47;
    sub_10000E87C(v73);
    sub_1000133F0(v44, v46, v48);
    sub_10001DE14();
    sub_1000101FC();
    sub_1000110A4();
    sub_10001A880();
    sub_10001B630();
  }
  sub_10001CEA8();
  sub_100013308();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 *inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];
  _BYTE v29[112];
  _QWORD v30[5];
  uint64_t v31;
  Swift::String v32;

  sub_1000EB9C0();
  if (v7)
  {
    sub_100005988(v4, v5, v6, v7);
    sub_10001EED4();
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = sub_10001F7FC();
    sub_1000EBA3C(v32);
    sub_1000059B0();
    sub_10001AAE8((uint64_t)" LIKE ? ESCAPE ?)");
    v8 = sub_100010848();
    v9 = sub_10001BE7C(&qword_1001296C8);
    v17 = sub_100015A10(v9, v10, v11, v12, v13, v14, v15, v16, v27);
    *(_OWORD *)(v17 + 16) = xmmword_1000EFD90;
    *(_QWORD *)(v17 + 56) = type metadata for String;
    *(_QWORD *)(v17 + 64) = &protocol witness table for String;
    *(_QWORD *)(v17 + 32) = v1;
    *(_QWORD *)(v17 + 40) = v0;
    *(_QWORD *)(v17 + 96) = type metadata for String;
    *(_QWORD *)(v17 + 104) = &protocol witness table for String;
    *(_QWORD *)(v17 + 72) = v3;
    *(_QWORD *)(v17 + 80) = v2;
    v31 = v8;
    sub_10000EC68();
    sub_10001F230();
  }
  else
  {
    v18 = sub_100010098();
    sub_100016360((uint64_t)v18);
    v30[3] = type metadata for String;
    v30[4] = &protocol witness table for String;
    v30[0] = v1;
    v30[1] = v0;
    v19 = sub_10001BE7C(&qword_100128D58);
    inited = (__n128 *)swift_initStackObject(v19, v29);
    v21 = sub_100019B9C(inited, (__n128)xmmword_1000EFD90);
    sub_10000EB78(v21, (uint64_t)&inited[4].n128_i64[1]);
    sub_10000EC68();
    sub_10001C8FC((uint64_t)inited, v28);
    sub_10000E858(v28, v28[3]);
    v22 = sub_10001947C();
    v24 = v23;
    v26 = v25;
    sub_10000E87C(v28);
    sub_1000EB9B4(v22, v24, v26);
    sub_1000101FC();
    swift_bridgeObjectRelease();
    sub_100018640();
    sub_10000585C();
    sub_10000E87C(v30);
    sub_10000E87C(&v31);
  }
  sub_10001C2A4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[5];
  char v74;
  uint64_t v75;

  sub_10001EF30();
  if (v4)
  {
    v7 = v4;
    v8 = v3;
    v9 = sub_10000C144(v0, v1, v2, v3, v4, v5, v6);
    sub_10000EB64((uint64_t)v9);
    v10 = sub_10001BE7C(&qword_100128D00);
    sub_100005A58(v10, (uint64_t)&protocol witness table for Expression<A>);
    v11 = sub_10001BE7C(&qword_100128D58);
    v19 = (__n128 *)sub_1000EBA20(v11, v12, v13, v14, v15, v16, v17, v18, v49, v51);
    v20 = sub_100017B20(v19, (__n128)xmmword_1000EFD90);
    sub_10001B714(v20, (uint64_t)&v19[4].n128_i64[1]);
    sub_10000EC68();
    sub_10000BFF4();
    sub_1000101B0();
    sub_10001C8FC((uint64_t)v19, v73);
    sub_100019128(v73);
    v22 = v21;
    sub_10000E87C(v73);
    swift_setDeallocating(v19);
    sub_10001E778();
    sub_10001E320();
    sub_100019D48();
    sub_1000101FC();
    sub_10001B23C();
    v23 = sub_10001BE7C(&qword_1001296C8);
    v31 = sub_100015A10(v23, v24, v25, v26, v27, v28, v29, v30, v50);
    *(_OWORD *)(v31 + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(v31 + 56) = type metadata for String;
    *(_QWORD *)(v31 + 64) = &protocol witness table for String;
    *(_QWORD *)(v31 + 32) = v8;
    *(_QWORD *)(v31 + 40) = v7;
    v75 = v22;
    sub_10000C020();
    sub_10001F230();
    sub_1000059B0();
    sub_1000101FC();
  }
  else
  {
    v32 = sub_10000C144(v0, v1, v2, v3, 0, v5, v6);
    sub_10000EB64((uint64_t)v32);
    v33 = sub_10001BE7C(&qword_100128D00);
    sub_100005A58(v33, (uint64_t)&protocol witness table for Expression<A>);
    v34 = sub_10001BE7C(&qword_100128D58);
    v42 = (__n128 *)sub_100016758(v34, v35, v36, v37, v38, v39, v40, v41, v49, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60,
                      v61,
                      v62,
                      v63,
                      v64,
                      v65,
                      v66,
                      v67,
                      v68,
                      v69,
                      v70,
                      v71,
                      v72,
                      v73[0],
                      v73[1],
                      v73[2],
                      v73[3],
                      v73[4],
                      v74);
    v43 = sub_100017B20(v42, (__n128)xmmword_1000EFD90);
    sub_10001B714(v43, (uint64_t)&v42[4].n128_i64[1]);
    sub_10000BFF4();
    sub_1000101B0();
    sub_10001C8FC((uint64_t)v42, v73);
    v44 = sub_100010068(v73);
    v46 = v45;
    v48 = v47;
    sub_10000E87C(v73);
    sub_1000EB9B4(v44, v46, v48);
    sub_10001DE14();
    sub_1000101FC();
    sub_1000110A4();
    sub_10001A880();
    sub_10001B630();
  }
  sub_10001CEA8();
  sub_100013308();
}

void ExpressionType<>.glob(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001F700(a1, a2, a3, a4);
}

{
  sub_10001F700(a1, a2, a3, a4);
}

void ExpressionType<>.match(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001E9D4(a1, a2, a3, a4);
}

void ExpressionType<>.regexp(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100010320(a1, a2, a3, a4);
}

{
  sub_100010320(a1, a2, a3, a4);
}

void ExpressionType<>.collate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000EADF0(a1, a2, a3, a4);
}

{
  sub_1000EADF0(a1, a2, a3, a4);
}

uint64_t ExpressionType<>.ltrim(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10001857C(a1, a2, a3, 29804, a5, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10001C528);
}

uint64_t ExpressionType<>.rtrim(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10001857C(a1, a2, a3, 29810, a5, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10001C528);
}

uint64_t sub_1000EA6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31[3];
  uint64_t v32;
  uint64_t v33;

  if (a1)
  {
    v13 = sub_10001BE7C(&qword_100128D58);
    v20 = sub_10001F124(v13, v14, v15, v16, v17, v18, v19);
    *(_OWORD *)(v20 + 16) = xmmword_1000EFD90;
    *(_QWORD *)(v20 + 56) = a2;
    *(_QWORD *)(v20 + 64) = *(_QWORD *)(a3 + 8);
    v21 = sub_10001795C((_QWORD *)(v20 + 32));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v21, v6, a2);
    v31[0] = a1;
    sub_1000100E0();
    v22 = sub_1000BF010();
    v24 = sub_1000EBA28(&qword_10012C980, v23, (uint64_t)&protocol conformance descriptor for Set<A>);
    v25 = String.init<A>(_:)(v31, v22, v24);
    *(_QWORD *)(v20 + 96) = type metadata for String;
    *(_QWORD *)(v20 + 104) = &protocol witness table for String;
    *(_QWORD *)(v20 + 72) = v25;
    *(_QWORD *)(v20 + 80) = v26;
    sub_100005A18(v20, v31);
    v27 = v32;
    v28 = v33;
    v29 = sub_10000E858(v31, v32);
    a6(v29, a4, a5, v27, v28);
    sub_100018EB8();
    sub_10000E87C(v31);
    swift_setDeallocating(v20);
    sub_10001E778();
  }
  else
  {
    a6(v6, a4, a5, a2, *(_QWORD *)(a3 + 8));
    sub_100018EB8();
  }
  return sub_100015994();
}

void ExpressionType<>.trim(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *inited;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[5];
  _BYTE v45[72];

  v3 = v2;
  if (a1)
  {
    v6 = sub_10001BE7C(&qword_100128D58);
    inited = (__n128 *)sub_100015A10(v6, v7, v8, v9, v10, v11, v12, v13, v30);
    v15 = sub_1000EB98C(inited, (__n128)xmmword_1000EFD90);
    sub_10001DA60((uint64_t)v15);
    v44[0] = a1;
    sub_10000C030();
    a2 = &qword_10012C978;
    v3 = sub_10001BE7C(&qword_10012C978);
    v16 = sub_10001C2FC(&qword_10012C980, &qword_10012C978, (uint64_t)&protocol conformance descriptor for Set<A>);
    v17 = String.init<A>(_:)(v44, v3, v16);
    inited[6].n128_u64[0] = (unint64_t)type metadata for String;
    inited[6].n128_u64[1] = (unint64_t)&protocol witness table for String;
    inited[4].n128_u64[1] = v17;
    inited[5].n128_u64[0] = v18;
  }
  else
  {
    v19 = sub_10001BE7C(&qword_100128D58);
    inited = (__n128 *)swift_initStackObject(v19, v45);
    v20 = sub_1000EB98C(inited, (__n128)xmmword_1000EFAE0);
    sub_10001DA60((uint64_t)v20);
  }
  sub_100005A18((uint64_t)inited, v44);
  v29 = sub_10001EFF8(v21, v22, v23, v24, v25, v26, v27, v28, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40,
          v41,
          v42,
          v43,
          v44[0],
          v44[1],
          v44[2],
          v44[3]);
  sub_10001C528(v29, 1835627124, 0xE400000000000000, a2, v3);
  sub_10000E87C(v44);
  sub_100019D18();
  sub_10001E778();
  sub_100015994();
  sub_100018800();
}

uint64_t ExpressionType<>.replace(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000EAEE8(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10001C528);
}

uint64_t ExpressionType<>.substring(_:length:)(unint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return sub_1000EB014(a1, a2, a3, a4, a5, (void (*)(_QWORD *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10001C528);
}

uint64_t ExpressionType<>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000EB138(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))ExpressionType<>.substring(_:length:));
}

uint64_t sub_1000EA980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;

  return a5(v5, a3, a4, a1, *(_QWORD *)(a2 + 8));
}

void sub_1000EAD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 *v18;
  uint64_t v19[29];

  v10 = sub_1000EBA00(a1, a2, a3, a4);
  sub_10001B874((uint64_t)v10);
  v19[22] = (uint64_t)type metadata for String;
  v19[23] = (uint64_t)&protocol witness table for String;
  v19[19] = a1;
  v19[20] = a2;
  v11 = sub_10001BE7C(&qword_100128D58);
  v18 = (__n128 *)sub_10001F124(v11, v12, v13, v14, v15, v16, v17);
  sub_100018630(v18, (__n128)xmmword_1000EFD90);
  sub_10001008C();
  sub_10000C020();
  sub_10001A118((uint64_t)v18, a5, a6, v19);
  sub_10001B198(v19);
  sub_10000E87C(v19);
  sub_10001A8A8();
  sub_100019324();
  sub_1000101FC();
  sub_100018640();
  sub_10000585C();
  sub_10001A6F8();
  sub_1000134DC();
}

void sub_1000EADF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15[29];

  v6 = sub_1000EBA00(a1, a2, a3, a4);
  sub_10001B874((uint64_t)v6);
  v15[22] = (uint64_t)&type metadata for Collation;
  v15[23] = (uint64_t)&protocol witness table for Collation;
  v15[19] = a1;
  v15[20] = a2;
  v7 = sub_10001BE7C(&qword_100128D58);
  v14 = (__n128 *)sub_10001F124(v7, v8, v9, v10, v11, v12, v13);
  sub_100018630(v14, (__n128)xmmword_1000EFD90);
  sub_10001008C();
  sub_1000D6784(a1, a2);
  sub_10001A118((uint64_t)v14, 0x4554414C4C4F4320, 0xE900000000000020, v15);
  sub_10001B198(v15);
  sub_10000E87C(v15);
  sub_10001A8A8();
  sub_100019324();
  sub_1000101FC();
  sub_100018640();
  sub_10000585C();
  sub_10001A6F8();
  sub_1000134DC();
}

uint64_t ExpressionType<>.trim(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EA6D4(a1, a2, a3, 1835627124, 0xE400000000000000, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10001C528);
}

uint64_t sub_1000EAEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v16;
  uint64_t inited;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23[3];
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[152];

  v9 = v7;
  v16 = sub_10001BE7C(&qword_100128D58);
  inited = swift_initStackObject(v16, v26);
  *(_OWORD *)(inited + 16) = xmmword_1000EFDA0;
  *(_QWORD *)(inited + 56) = a5;
  *(_QWORD *)(inited + 64) = *(_QWORD *)(a6 + 8);
  v18 = sub_10001795C((_QWORD *)(inited + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v18, v9, a5);
  *(_QWORD *)(inited + 96) = type metadata for String;
  *(_QWORD *)(inited + 104) = &protocol witness table for String;
  *(_QWORD *)(inited + 72) = a1;
  *(_QWORD *)(inited + 80) = a2;
  *(_QWORD *)(inited + 136) = type metadata for String;
  *(_QWORD *)(inited + 144) = &protocol witness table for String;
  *(_QWORD *)(inited + 112) = a3;
  *(_QWORD *)(inited + 120) = a4;
  swift_bridgeObjectRetain();
  sub_10000C020();
  sub_100005A18(inited, v23);
  v19 = v24;
  v20 = v25;
  v21 = sub_10000E858(v23, v24);
  a7(v21, 0x6563616C706572, 0xE700000000000000, v19, v20);
  sub_100018EB8();
  sub_10000E87C(v23);
  sub_100019D18();
  sub_10001E778();
  return sub_100015994();
}

uint64_t sub_1000EB014(unint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 *inited;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[112];

  v10 = sub_10001BE7C(&qword_100128D58);
  if ((a3 & 1) != 0)
  {
    inited = (__n128 *)swift_initStackObject(v10, v29);
    v20 = sub_10001F514(inited, (__n128)xmmword_1000EFD90);
    sub_10001F308((uint64_t)v20);
    inited[6].n128_u64[0] = (unint64_t)&type metadata for Int;
    inited[6].n128_u64[1] = (unint64_t)&protocol witness table for Int;
    inited[4].n128_u64[1] = a1;
  }
  else
  {
    inited = (__n128 *)sub_100015A10(v10, v11, v12, v13, v14, v15, v16, v17, v25);
    v19 = sub_10001F514(inited, (__n128)xmmword_1000EFDA0);
    sub_10001F308((uint64_t)v19);
    inited[6].n128_u64[0] = (unint64_t)&type metadata for Int;
    inited[6].n128_u64[1] = (unint64_t)&protocol witness table for Int;
    inited[4].n128_u64[1] = a1;
    inited[8].n128_u64[1] = (unint64_t)&type metadata for Int;
    inited[9].n128_u64[0] = (unint64_t)&protocol witness table for Int;
    inited[7].n128_u64[0] = a2;
  }
  sub_100005A18((uint64_t)inited, v26);
  v21 = v27;
  v22 = v28;
  v23 = sub_10000E858(v26, v27);
  a6(v23, 0x727473627573, 0xE600000000000000, v21, v22);
  sub_10000DDD0();
  sub_10000E87C(v26);
  sub_100018640();
  sub_10000585C();
  return sub_1000EB9A4();
}

uint64_t sub_1000EB138(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))
{
  BOOL v5;
  uint64_t v6;

  v5 = __OFSUB__(a2, result);
  v6 = a2 - result;
  if (!v5)
    return a5(result, v6, 0, a3, a4);
  __break(1u);
  return result;
}

void Collection<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  _BYTE v41[120];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _UNKNOWN **v46;
  _QWORD *v47;

  v8 = sub_100018CF8(a1, a2, a3, a4, a5);
  v47 = sub_10001F074(v8);
  sub_1000BF010();
  v10 = sub_1000EBA28((unint64_t *)&qword_100129568, v9, (uint64_t)&protocol conformance descriptor for [A]);
  sub_100007438(v10);
  v11 = sub_1000EBA10();
  v12 = sub_1000EBA30(v11, *(_QWORD *)(v5 + 8));
  v16 = sub_100017AF8(v12, v13, v14, v15);
  sub_10001B570(v16);
  sub_10000C020();
  sub_10001A4FC();
  swift_bridgeObjectRelease();
  sub_100018558();
  sub_10001EE28();
  v17 = sub_10001BE7C(&qword_100129578);
  v22 = sub_1000166AC((void (*)(char *, char *))sub_1000EB958, v18, v19, v17, (uint64_t)&type metadata for Never, v20, (uint64_t)&protocol witness table for Never, v21, v38, v39);
  v45 = sub_10001BE7C(&qword_10012BFA8);
  v46 = &protocol witness table for Expression<A>;
  v42 = v6;
  v43 = v7;
  v44 = v22;
  v23 = sub_10001BE7C(&qword_100128D58);
  inited = (__n128 *)swift_initStackObject(v23, v41);
  v25 = sub_100019B9C(inited, (__n128)xmmword_1000EFD90);
  v26 = sub_10000EB78(v25, (uint64_t)&inited[4].n128_i64[1]);
  sub_100013EC8(v26, v27, v28, v29, v30, v31, v32);
  v33 = sub_100010068(v40);
  v35 = v34;
  v37 = v36;
  sub_10000E87C(v40);
  sub_1000133F0(v33, v35, v37);
  sub_1000101FC();
  swift_bridgeObjectRelease();
  sub_1000110A4();
  sub_10001A880();
  sub_1000EB9D8();
  sub_100010160();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 *inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  _BYTE v42[120];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  _QWORD *v48;

  v8 = sub_100018CF8(a1, a2, a3, a4, a5);
  v48 = sub_10001F074(v8);
  sub_1000BF010();
  v10 = sub_1000EBA28((unint64_t *)&qword_100129568, v9, (uint64_t)&protocol conformance descriptor for [A]);
  sub_100007438(v10);
  v11 = sub_1000EBA10();
  v12 = sub_1000EBA30(v11, *(_QWORD *)(v5 + 8));
  v13 = type metadata accessor for Optional(255, v12);
  v17 = sub_100017AF8(v13, v14, v15, v16);
  sub_10001B570(v17);
  sub_10000C020();
  sub_10001A4FC();
  swift_bridgeObjectRelease();
  sub_100018558();
  sub_10001EE28();
  v18 = sub_10001BE7C(&qword_100129578);
  v23 = sub_1000166AC((void (*)(char *, char *))sub_1000EB978, v19, v20, v18, (uint64_t)&type metadata for Never, v21, (uint64_t)&protocol witness table for Never, v22, v39, v40);
  v46 = sub_10001BE7C(&qword_10012BFA8);
  v47 = &protocol witness table for Expression<A>;
  v43 = v6;
  v44 = v7;
  v45 = v23;
  v24 = sub_10001BE7C(&qword_100128D58);
  inited = (__n128 *)swift_initStackObject(v24, v42);
  v26 = sub_100019B9C(inited, (__n128)xmmword_1000EFD90);
  v27 = sub_10000EB78(v26, (uint64_t)&inited[4].n128_i64[1]);
  sub_100013EC8(v27, v28, v29, v30, v31, v32, v33);
  v34 = sub_100010068(v41);
  v36 = v35;
  v38 = v37;
  sub_10000E87C(v41);
  sub_1000EB9B4(v34, v36, v38);
  sub_1000101FC();
  swift_bridgeObjectRelease();
  sub_1000110A4();
  sub_10001A880();
  sub_1000EB9D8();
  sub_100010160();
}

uint64_t sub_1000EB444@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 56);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(a2 + 8), a1);
  v8 = swift_getAssociatedTypeWitness(0, a3, AssociatedTypeWitness);
  a4[3] = v8;
  a4[4] = swift_getAssociatedConformanceWitness(a3, AssociatedTypeWitness, v8, &protocol requirements base descriptor for Value, &associated conformance descriptor for Value.Value.Datatype: Binding);
  sub_10001795C(a4);
  v9 = swift_checkMetadataState(0, AssociatedTypeWitness);
  return v6(v9, a3);
}

void String.like(_:escape:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[5];
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _UNKNOWN **v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _UNKNOWN **v86;

  if (a5)
  {
    v85 = type metadata for String;
    v86 = &protocol witness table for String;
    v83 = a6;
    v84 = a7;
    v81 = sub_10001BE7C(&qword_100128D00);
    v82 = &protocol witness table for Expression<A>;
    v78 = a1;
    v79 = a2;
    v80 = a3;
    v12 = sub_10001BE7C(&qword_100128D58);
    v20 = (__n128 *)sub_1000EBA20(v12, v13, v14, v15, v16, v17, v18, v19, v52, v54);
    v21 = sub_100017B20(v20, (__n128)xmmword_1000EFD90);
    sub_10001B714(v21, (uint64_t)&v20[4].n128_i64[1]);
    sub_10000EC68();
    sub_10000C030();
    sub_10000BFF4();
    sub_1000101B0();
    sub_10001C8FC((uint64_t)v20, v76);
    v22 = sub_10001B198(v76);
    v24 = v23;
    v26 = v25;
    sub_10000E87C(v76);
    swift_setDeallocating(v20);
    sub_10001E778();
    sub_10001E320();
    v27._countAndFlagsBits = v22;
    v27._object = v24;
    String.append(_:)(v27);
    sub_1000101FC();
    sub_10001B23C();
    v28 = sub_10001BE7C(&qword_1001296C8);
    v36 = sub_100015A10(v28, v29, v30, v31, v32, v33, v34, v35, v53);
    *(_OWORD *)(v36 + 16) = xmmword_1000EFAE0;
    *(_QWORD *)(v36 + 56) = type metadata for String;
    *(_QWORD *)(v36 + 64) = &protocol witness table for String;
    *(_QWORD *)(v36 + 32) = a4;
    *(_QWORD *)(v36 + 40) = a5;
    v83 = v26;
    sub_10000C020();
    sub_10001F230();
    sub_1000059B0();
    sub_1000101FC();
  }
  else
  {
    v85 = type metadata for String;
    v86 = &protocol witness table for String;
    v83 = a6;
    v84 = a7;
    v81 = sub_10001BE7C(&qword_100128D00);
    v82 = &protocol witness table for Expression<A>;
    v78 = a1;
    v79 = a2;
    v80 = a3;
    v37 = sub_10001BE7C(&qword_100128D58);
    v45 = (__n128 *)sub_100016758(v37, v38, v39, v40, v41, v42, v43, v44, v52, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63,
                      v64,
                      v65,
                      v66,
                      v67,
                      v68,
                      v69,
                      v70,
                      v71,
                      v72,
                      v73,
                      v74,
                      v75,
                      v76[0],
                      v76[1],
                      v76[2],
                      v76[3],
                      v76[4],
                      v77);
    v46 = sub_100017B20(v45, (__n128)xmmword_1000EFD90);
    sub_10001B714(v46, (uint64_t)&v45[4].n128_i64[1]);
    sub_10000C030();
    sub_10000BFF4();
    sub_1000101B0();
    sub_10001C8FC((uint64_t)v45, v76);
    v47 = sub_100010068(v76);
    v49 = v48;
    v51 = v50;
    sub_10000E87C(v76);
    sub_1000133F0(v47, v49, v51);
    sub_10001DE14();
    sub_1000101FC();
    sub_1000110A4();
    sub_10001A880();
    sub_10001B630();
  }
  sub_10001CEA8();
  sub_100013308();
}

void ?? infix<A>(_:_:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v12 = sub_10001BE7C(&qword_100128D58);
  v20 = (__n128 *)sub_100015A10(v12, v13, v14, v15, v16, v17, v18, v19, v26);
  v21 = sub_100013864(v20, (__n128)xmmword_1000EFD90);
  v20[3].n128_u64[1] = sub_100017AF8(v21, v22, v23, v24);
  v20[4].n128_u64[0] = (unint64_t)&protocol witness table for Expression<A>;
  v20[2].n128_u64[0] = a1;
  v20[2].n128_u64[1] = a2;
  v20[3].n128_u64[0] = a3;
  v20[6].n128_u64[0] = a5;
  v20[6].n128_u64[1] = *(_QWORD *)(a6 + 8);
  v25 = sub_10001795C(&v20[4].n128_u64[1]);
  (*(void (**)(_QWORD *, uint64_t, unint64_t))(*(_QWORD *)(a5 - 8) + 16))(v25, a4, a5);
  sub_10000C020();
  swift_bridgeObjectRetain();
  sub_100014480((uint64_t)v20);
  sub_100018EB8();
  sub_100019D18();
  sub_10001E778();
  sub_100015994();
  sub_10000ED58();
}

uint64_t ?? infix<A>(_:_:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  sub_100016824();
  v7 = sub_10001BE7C(&qword_100128D58);
  v15 = (__n128 *)sub_100015A10(v7, v8, v9, v10, v11, v12, v13, v14, v23);
  v16 = sub_100013864(v15, (__n128)xmmword_1000EFD90);
  v15[3].n128_u64[1] = sub_100017AF8(v16, v17, v18, v19);
  v15[4].n128_u64[0] = (unint64_t)&protocol witness table for Expression<A>;
  v15[2].n128_u64[0] = v6;
  v15[2].n128_u64[1] = v5;
  v15[3].n128_u64[0] = v4;
  v15[6].n128_u64[0] = type metadata accessor for Expression(0, v0, v20, v21);
  v15[6].n128_u64[1] = (unint64_t)&protocol witness table for Expression<A>;
  v15[4].n128_u64[1] = v3;
  v15[5].n128_u64[0] = v2;
  v15[5].n128_u64[1] = v1;
  sub_1000100E0();
  sub_10000C020();
  sub_10000BFF4();
  sub_1000101B0();
  sub_100014480((uint64_t)v15);
  sub_100018640();
  sub_10000585C();
  return sub_1000EB9A4();
}

void ?? infix<A>(_:_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_100016824();
  v6 = sub_10001BE7C(&qword_100128D58);
  v14 = (__n128 *)sub_100015A10(v6, v7, v8, v9, v10, v11, v12, v13, v20);
  v15 = sub_100013864(v14, (__n128)xmmword_1000EFD90);
  v19 = sub_100017AF8(v15, v16, v17, v18);
  v14[2].n128_u64[0] = v5;
  v14[2].n128_u64[1] = v4;
  v14[3].n128_u64[0] = v3;
  v14[3].n128_u64[1] = v19;
  v14[6].n128_u64[0] = v19;
  v14[6].n128_u64[1] = (unint64_t)&protocol witness table for Expression<A>;
  v14[4].n128_u64[0] = (unint64_t)&protocol witness table for Expression<A>;
  v14[4].n128_u64[1] = v2;
  v14[5].n128_u64[0] = v1;
  v14[5].n128_u64[1] = v0;
  sub_1000100E0();
  sub_10000C020();
  sub_10000BFF4();
  sub_1000101B0();
  sub_100014480((uint64_t)v14);
  sub_100018640();
  sub_10000585C();
  sub_1000EB9A4();
  sub_10000ED58();
}

uint64_t sub_1000EB958@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_1000EB444(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1000EB978@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000EB958(a1);
}

_QWORD *sub_1000EB98C(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  a1[1] = a2;
  *(_QWORD *)(v3 + 56) = v2;
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(v4 + 8);
  return sub_10001795C((__n128 *)a1[2].n128_u64);
}

uint64_t sub_1000EB9A4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000EB9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DB4C8(a1, a2, a3, 0, 0xE000000000000000);
}

uint64_t sub_1000EB9D8()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000E87C((_QWORD *)(v1 - 168));
  sub_10000E87C((_QWORD *)(v1 - 128));
  return v0;
}

_QWORD *sub_1000EBA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v4 - 80) = a3;
  *(_QWORD *)(v4 - 72) = v5;
  return sub_10001795C((_QWORD *)(v4 - 104));
}

uint64_t sub_1000EBA10()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000EBA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return swift_initStackObject(a1, va);
}

uint64_t sub_1000EBA28(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_10001C2FC(a1, v3, a3);
}

uint64_t sub_1000EBA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getAssociatedTypeWitness(255, a2, v2);
}

void sub_1000EBA3C(Swift::String a1)
{
  String.append(_:)(a1);
}

const char *sub_1000EBA48(unsigned int a1)
{
  char v2;
  uint64_t v3;
  sqlite3 *v4;
  const char *result;

  if (qword_10012BFA0 != -1)
    swift_once(&qword_10012BFA0, sub_1000EBB10);
  sub_10001D860(a1, qword_10012C988);
  if ((v2 & 1) != 0)
  {
    swift_release();
    swift_release();
    return 0;
  }
  v4 = (sqlite3 *)Connection.handle.getter();
  result = sqlite3_errmsg(v4);
  if (result)
  {
    v3 = String.init(cString:)(result);
    swift_release();
    return (const char *)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EBB10()
{
  uint64_t result;

  result = sub_1000EBDD8((uint64_t)&off_10011F180);
  qword_10012C988 = result;
  return result;
}

uint64_t Result.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  if (a4)
  {
    swift_retain_n(a4, 2);
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v11 = a1;
    v6._countAndFlagsBits = 10272;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    v12._countAndFlagsBits = (uint64_t)Statement.description.getter(v7);
    sub_100017698(v12);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x3A65646F63282029;
    v8._object = (void *)0xE900000000000020;
    String.append(_:)(v8);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    sub_100017698(v13);
    swift_bridgeObjectRelease();
    sub_10001B048();
    swift_release_n(a4, 2);
  }
  else
  {
    v11 = a1;
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = 0x203A65646F632820;
    v9._object = (void *)0xE800000000000000;
    String.append(_:)(v9);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    sub_100017698(v14);
    swift_bridgeObjectRelease();
    sub_10001B048();
  }
  return v11;
}

uint64_t sub_1000EBC94()
{
  uint64_t v0;

  return Result.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned int *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t destroy for Result(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t assignWithTake for Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v6);
  return a1;
}

ValueMetadata *type metadata accessor for Result()
{
  return &type metadata for Result;
}

uint64_t sub_1000EBDD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptySetSingleton;
    goto LABEL_13;
  }
  sub_10001BE7C(&qword_10012C990);
  result = static _SetStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)result;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_13:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v4;
  }
  v6 = 0;
  v7 = result + 56;
  v8 = *(_QWORD *)(result + 40);
  v9 = ~(-1 << *(_BYTE *)(result + 32));
  while (v6 < *(_QWORD *)(a1 + 16))
  {
    v10 = *(_DWORD *)(a1 + 32 + 4 * v6);
    result = static Hasher._hash(seed:bytes:count:)(v8, v10, 4);
    v11 = result & v9;
    v12 = (result & (unint64_t)v9) >> 6;
    v13 = *(_QWORD *)(v7 + 8 * v12);
    v14 = 1 << (result & v9);
    v15 = v4[6];
    if ((v14 & v13) != 0)
    {
      while (*(_DWORD *)(v15 + 4 * v11) != v10)
      {
        v11 = (v11 + 1) & v9;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
        v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      *(_QWORD *)(v7 + 8 * v12) = v14 | v13;
      *(_DWORD *)(v15 + 4 * v11) = v10;
      v16 = v4[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_15;
      v4[2] = v18;
    }
    if (++v6 == v5)
      goto LABEL_13;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t Collation.expression.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  switch(a2)
  {
    case 0uLL:
      return 0x5952414E4942;
    case 1uLL:
      return 0x455341434F4ELL;
    case 2uLL:
      return 0x4D49525452;
  }
  return sub_10001C92C(a1, a2, a3, a2);
}

uint64_t Collation.description.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  switch(a2)
  {
    case 0uLL:
      return 0x5952414E4942;
    case 1uLL:
      return 0x455341434F4ELL;
    case 2uLL:
      return 0x4D49525452;
  }
  return sub_10001C92C(a1, a2, a3, a2);
}

uint64_t sub_1000EBFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return Collation.expression.getter(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), a3);
}

uint64_t sub_1000EC00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return Collation.description.getter(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), a3);
}

uint64_t getEnumTagSinglePayload for Collation(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Collation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Collation()
{
  return &type metadata for Collation;
}

uint64_t sub_1000EC0D0()
{
  return sub_1000EC268(1);
}

uint64_t sub_1000EC0D8(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_100132778 == -1)
  {
    if (qword_100132780)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_100132778, 0, (dispatch_function_t)sub_1000EC260);
    if (qword_100132780)
      goto LABEL_3;
  }
  if (qword_100132770 == -1)
  {
    v9 = dword_100132760 < a2;
    if (dword_100132760 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_100132770, 0, (dispatch_function_t)sub_1000EC0D0);
    v9 = dword_100132760 < a2;
    if (dword_100132760 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_100132764 > a3)
    return 1;
  return dword_100132764 >= a3 && dword_100132768 >= a4;
}

uint64_t sub_1000EC260()
{
  return sub_1000EC268(0);
}

uint64_t sub_1000EC268(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_100132780;
  if (qword_100132780)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_100132780 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_100132760, &dword_100132764, &dword_100132768);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_featureEnabledWithDomain_feature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureEnabledWithDomain:feature:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

