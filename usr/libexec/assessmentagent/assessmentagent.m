BOOL sub_1000032C0(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  BOOL v7;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];

  v3 = a2;
  if (a1)
  {
    v4 = 0;
    do
    {
      objc_msgSend(a1, "underlyingToken", v9, v10);
      v5 = *(_DWORD *)&v11[v4];
      if (v3)
      {
        objc_msgSend(v3, "underlyingToken");
      }
      else
      {
        v9 = 0u;
        v10 = 0u;
      }
      v7 = v5 == *(_DWORD *)((char *)&v9 + v4);
      v6 = v7;
      v7 = !v7 || v4 == 28;
      v4 += 4;
    }
    while (!v7);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1000042D0(uint64_t a1, void *a2)
{
  char *v3;
  void (*v4)(void);
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (char *)objc_msgSend(v7, "status");
  if ((unint64_t)v3 < 2)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[AEAConcreteAirPlayPrimitives stopAirPlayingWithCompletion:]_block_invoke"));
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("AEAConcreteAirPlayPrimitives.m"), 44, CFSTR("Should never receve this route setting status %ld"), objc_msgSend(v7, "status"));
    goto LABEL_9;
  }
  if ((unint64_t)(v3 - 3) >= 2)
  {
    if (v3 == (char *)2)
    {
      v4 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
      goto LABEL_7;
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[AEAConcreteAirPlayPrimitives stopAirPlayingWithCompletion:]_block_invoke"));
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("AEAConcreteAirPlayPrimitives.m"), 57, CFSTR("Encountered unknown AirPlay status %ld"), objc_msgSend(v7, "status"));
LABEL_9:

    goto LABEL_10;
  }
  v4 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
LABEL_7:
  v4();
LABEL_10:

}

id *sub_100004410(id *a1, void *a2)
{
  id v4;
  id *v5;
  objc_super v7;

  v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)AEAConcreteOSTransactionToken;
    v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5)
      objc_storeStrong(v5 + 1, a2);
  }

  return a1;
}

void sub_10000448C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 8), a2);
}

id *sub_100004648(id *a1, void *a2)
{
  id v4;
  id *v5;
  objc_super v7;

  v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)AEAConcreteRestrictedNetworkToken;
    v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5)
      objc_storeStrong(v5 + 1, a2);
  }

  return a1;
}

void sub_1000049EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100004A10(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  intptr_t v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "timerSource"));
    v3 = dispatch_source_testcancel(v2);

    WeakRetained = v4;
    if (!v3)
    {
      objc_msgSend(v4, "timerDidFire");
      WeakRetained = v4;
    }
  }

}

id sub_100004B5C(uint64_t a1)
{
  NSObject *v2;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timerSource"));
  dispatch_source_cancel(v2);

  return objc_msgSend(*(id *)(a1 + 32), "setFireHandler:", 0);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  _QWORD *v4;
  objc_class *v5;
  id v6;
  id v7;
  _OWORD v8[2];
  uint64_t v9;
  _QWORD v10[20];
  _QWORD v11[5];

  v3 = type metadata accessor for AEAConcreteEnvironment();
  swift_allocObject(v3, 728, 7);
  v4 = sub_10004FD44();
  qword_100093DF8 = (uint64_t)v4;
  v5 = (objc_class *)type metadata accessor for AEAAgent();
  v11[3] = v3;
  v11[4] = &off_100086C58;
  v11[0] = v4;
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  swift_retain_n(v4, 2);
  sub_1000496E4(v11, (uint64_t)v8, v10);
  sub_100004CE0((uint64_t)v8);
  v6 = objc_allocWithZone(v5);
  v7 = sub_100018DB4(v10);
  sub_100004D60(v11);
  swift_release(v4);
  qword_100093E00 = (uint64_t)v7;
  sub_100019018();
  dispatch_main();
}

uint64_t sub_100004CE0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20(&qword_10008E718);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100004D20(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100004D60(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void type metadata accessor for CFNotificationCenter(uint64_t a1)
{
  sub_1000052C4(a1, &qword_10008EFC0, (uint64_t)&unk_100081970);
}

uint64_t initializeBufferWithCopyOfBuffer for AEASpringBoardHomeScreenConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_100004DC8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100004DD4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100004DF4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
  sub_1000052C4(a1, &qword_10008EFC8, (uint64_t)&unk_1000819F8);
}

void type metadata accessor for SecTask(uint64_t a1)
{
  sub_1000052C4(a1, &qword_10008EFD0, (uint64_t)&unk_100081A20);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000052C4(a1, &qword_10008EFD8, (uint64_t)&unk_100081A50);
}

uint64_t sub_100004E5C(uint64_t a1, uint64_t a2)
{
  return sub_100004FA4(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100004E68(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100004EDC(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100004F58@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100004F98(uint64_t a1, uint64_t a2)
{
  return sub_100004FA4(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100004FA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100004FE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100005020(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100005090(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100005118@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10000515C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1000052C4(a1, &qword_10008F040, (uint64_t)&unk_100081A78);
}

uint64_t sub_100005198(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000524C(&qword_10008F0C0, (uint64_t)&unk_100065238);
  v3 = sub_10000524C(&qword_10008F0C8, (uint64_t)&unk_1000651D8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005204()
{
  return sub_10000524C(&qword_10008F048, (uint64_t)&unk_10006519C);
}

uint64_t sub_100005228()
{
  return sub_10000524C(&qword_10008F050, (uint64_t)&unk_100065170);
}

uint64_t sub_10000524C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for URLResourceKey(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000528C()
{
  return sub_10000524C(&qword_10008F058, (uint64_t)&unk_10006520C);
}

void type metadata accessor for AEPolicySessionEvent(uint64_t a1)
{
  sub_1000052C4(a1, (unint64_t *)&unk_10008F0D0, (uint64_t)&unk_100081AA0);
}

void sub_1000052C4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100005308@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v5 = a2();
  if (v6)
  {
    v7 = v5;
    v8 = v6;
    sub_1000057E4(a1, a3);
    v9 = type metadata accessor for AEAParticipant(0);
    v10 = a3 + *(int *)(v9 + 20);
    *(_BYTE *)v10 = v7 & 1;
    *(_QWORD *)(v10 + 8) = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
    v12 = a3;
    v13 = 0;
  }
  else
  {
    v9 = type metadata accessor for AEAParticipant(0);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
    v12 = a3;
    v13 = 1;
  }
  return v11(v12, v13, 1, v9);
}

uint64_t sub_1000053A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_candidateProcesses;
  v2 = sub_100004D20(&qword_10008F2F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_configurationBuilder
                          + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10000540C()
{
  return type metadata accessor for AEACandidateMatchingParticipantSource(0);
}

uint64_t type metadata accessor for AEACandidateMatchingParticipantSource(uint64_t a1)
{
  uint64_t result;

  result = qword_10008F238;
  if (!qword_10008F238)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEACandidateMatchingParticipantSource);
  return result;
}

void sub_100005450(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1000054C8(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_1000054C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10008F248)
  {
    v2 = sub_100005520((uint64_t *)&unk_10008F250);
    v3 = type metadata accessor for Published.Publisher(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10008F248);
  }
}

uint64_t sub_100005520(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100005564()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = sub_100004D20(&qword_10008F2E0);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004D20(&qword_10008F2E8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v0;
  v9 = (uint64_t *)(*v0 + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_configurationBuilder);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8 + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_candidateProcesses;
  v13 = swift_allocObject(&unk_100081B80, 32, 7);
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v10;
  v14 = sub_100004D20(&qword_10008F2F0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v3, v12, v14);
  v15 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v3[*(int *)(v1 + 76)];
  *v15 = sub_10000575C;
  v15[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v13;
  v16 = sub_1000057A4(&qword_10008F2F8, &qword_10008F2E0, (uint64_t)&unk_100065758);
  v17 = sub_1000057A4(&qword_10008F300, &qword_10008F308, (uint64_t)&protocol conformance descriptor for Set<A>);
  swift_retain(v10);
  Publisher<>.removeDuplicates()(v1, v16, v17);
  sub_100005764((uint64_t)v3);
  v18 = sub_1000057A4(&qword_10008F310, &qword_10008F2E8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v19 = Publisher.eraseToAnyPublisher()(v4, v18);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v19;
}

uint64_t sub_100005738()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000575C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100005308(a1, *(uint64_t (**)(void))(v2 + 16), a2);
}

uint64_t sub_100005764(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20(&qword_10008F2E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000057A4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005520(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000057E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AEAParticipant.Process(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100005828()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for AEAConcreteMobileKeyBagPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent33AEAConcreteMobileKeyBagPrimitives);
}

uint64_t sub_100005858@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE v14[24];

  v3 = sub_100004D20(&qword_10008F508);
  v4 = __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad____lazy_storage___fileURL;
  swift_beginAccess(v1 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad____lazy_storage___fileURL, v14, 0, 0);
  sub_10000615C(v9, (uint64_t)v8);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  sub_1000061A4((uint64_t)v8);
  URL.appendingPathComponent(_:)(*(_QWORD *)(v1 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_fileName), *(_QWORD *)(v1 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_fileName + 8));
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess(v9, v13, 33, 0);
  sub_1000061E4((uint64_t)v6, v9);
  return swift_endAccess(v13);
}

uint64_t sub_100005C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t result;
  void (*v12)(char *, uint64_t);
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  Class isa;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  _BYTE v25[24];

  v2 = v0;
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v23 - v8;
  v10 = (_QWORD *)(v0 + 16);
  sub_1000060F4((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  sub_100005858((uint64_t)v9);
  sub_100014F24();
  if (v1)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v9, v3);
  v13 = (uint64_t *)(v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_backing);
  result = swift_beginAccess(v2 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_backing, v25, 0, 0);
  v14 = *v13;
  if (*(_QWORD *)(v14 + 16))
  {
    v15 = (void *)objc_opt_self(NSPropertyListSerialization);
    swift_bridgeObjectRetain(v14);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    v24 = 0;
    v17 = objc_msgSend(v15, "dataWithPropertyList:format:options:error:", isa, 200, 0, &v24);

    v18 = v24;
    if (v17)
    {
      v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v21 = v20;

      sub_1000060F4(v10, *(_QWORD *)(v2 + 40));
      sub_100005858((uint64_t)v7);
      sub_100014DC0(v19, v21, (uint64_t)v7, 2);
      v12(v7, v3);
      return sub_100006118(v19, v21);
    }
    else
    {
      v22 = v18;
      _convertNSErrorToError(_:)(v18);

      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_100005F24()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100004D60(v0 + 2);
  v1 = (char *)v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_directoryURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_fileName
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_backing));
  sub_1000061A4((uint64_t)v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad____lazy_storage___fileURL);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100005FB0()
{
  return _s17WritingScratchpadCMa(0);
}

uint64_t _s17WritingScratchpadCMa(uint64_t a1)
{
  uint64_t result;

  result = qword_10008F408;
  if (!qword_10008F408)
    return swift_getSingletonMetadata(a1, &_s17WritingScratchpadCMn);
  return result;
}

void sub_100005FF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = "(";
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_100065420;
    v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_1000060A0(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

void sub_1000060A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10008F418)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10008F418);
  }
}

_QWORD *sub_1000060F4(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100006118(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000615C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_10008F508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000061A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20(&qword_10008F508);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000061E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_10008F508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000622C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008F518[0];
  if (!qword_10008F518[0])
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, qword_10008F518);
  }
  return result;
}

ValueMetadata *type metadata accessor for AEASpringBoardAppRestrictionState()
{
  return &type metadata for AEASpringBoardAppRestrictionState;
}

uint64_t destroy for AEASpringBoardHomeScreenConfiguration(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

_QWORD *initializeWithCopy for AEASpringBoardHomeScreenConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  ((void (*)(void))swift_bridgeObjectRetain)();
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for AEASpringBoardHomeScreenConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for AEASpringBoardHomeScreenConfiguration(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for AEASpringBoardHomeScreenConfiguration(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEASpringBoardHomeScreenConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEASpringBoardHomeScreenConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEASpringBoardHomeScreenConfiguration()
{
  return &type metadata for AEASpringBoardHomeScreenConfiguration;
}

uint64_t sub_100006468(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a2 + 8);
  if ((sub_100006568(*(_QWORD **)a1, *(_QWORD **)a2) & 1) != 0)
    return sub_100006568(v2, v3);
  else
    return 0;
}

uint64_t sub_1000064B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

BOOL sub_1000064E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char v12;
  _BOOL8 result;

  v4 = *a1;
  v5 = a1[1];
  v6 = (_QWORD *)a1[2];
  v7 = (_QWORD *)a1[3];
  v8 = a2[1];
  v10 = (_QWORD *)a2[2];
  v9 = (_QWORD *)a2[3];
  if (v4 == *a2 && v5 == v8)
    return (sub_100006568(v6, v10) & 1) != 0 && (sub_100006568(v7, v9) & 1) != 0;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0);
  result = 0;
  if ((v12 & 1) != 0)
    return (sub_100006568(v6, v10) & 1) != 0 && (sub_100006568(v7, v9) & 1) != 0;
  return result;
}

uint64_t sub_100006568(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v15 = *(i - 1);
      v16 = *i;
      v17 = *(v13 - 1);
      v18 = *v13;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AEASpringBoardHomeScreenConfiguration.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for AEAParticipant.Configuration(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for AEASpringBoardHomeScreenConfiguration.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for AEAParticipant.Configuration(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for AEASpringBoardHomeScreenConfiguration.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAParticipant.Configuration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAParticipant.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_100006760()
{
  return 0;
}

ValueMetadata *type metadata accessor for AEASpringBoardHomeScreenConfiguration.Item()
{
  return &type metadata for AEASpringBoardHomeScreenConfiguration.Item;
}

uint64_t destroy for AEASpringBoardHomeScreenConfiguration.Layout(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s15assessmentagent37AEASpringBoardHomeScreenConfigurationV6LayoutVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for AEASpringBoardHomeScreenConfiguration.Layout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for AEASpringBoardHomeScreenConfiguration.Layout(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEASpringBoardHomeScreenConfiguration.Layout(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEASpringBoardHomeScreenConfiguration.Layout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEASpringBoardHomeScreenConfiguration.Layout()
{
  return &type metadata for AEASpringBoardHomeScreenConfiguration.Layout;
}

uint64_t sub_100006908(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t sub_100006A5C(uint64_t result, uint64_t a2, char a3)
{
  if (a3 != 2)
  {
    if (a3 != 3)
      return result;
    a2 = result;
  }
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100006A80(uint64_t result, uint64_t a2, char a3)
{
  if (a3 != 2)
  {
    if (a3 != 3)
      return result;
    a2 = result;
  }
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100006AAC(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  void *v14;
  void *v15;
  char *v16;
  char *v17;

  v2 = a1[13];
  v3 = (void *)a1[16];
  v4 = *(char **)(a1[17] + 8);
  v5 = (void *)a1[18];
  v10 = a1[10];
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v6 = _s17AEADeltaPublisherVMa(255, (uint64_t)&v10);
  result = type metadata accessor for Optional(319, v6);
  if (v8 <= 0x3F)
  {
    v10 = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Optional(319, a1[12]);
    if (v9 <= 0x3F)
    {
      v11 = *(_QWORD *)(result - 8) + 64;
      v12 = &unk_1000655E8;
      v13 = (char *)&value witness table for Builtin.RawPointer + 64;
      v14 = &unk_100065600;
      v15 = &unk_100065618;
      v16 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v17 = (char *)&value witness table for Builtin.BridgeObject + 64;
      return swift_initClassMetadata2(a1, 0, 8, &v10, a1 + 19);
    }
  }
  return result;
}

uint64_t sub_100006BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v9 = *(_OWORD *)(a2 + 32);
  v17 = *(_OWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 64);
  v18 = a3;
  v19 = v9;
  v20 = a4;
  v21 = *(_OWORD *)(a2 + 48);
  v22 = v10;
  v11 = _s13AEACachingMapV22CachingMapSubscriptionCMa(0, (uint64_t)&v17);
  v12 = (uint64_t *)(v4 + *(int *)(a2 + 76));
  v13 = *v12;
  v14 = v12[1];
  swift_retain(v14);
  v15 = sub_100008FB8(v4, a1, v13, v14);
  swift_release(v14);
  *(_QWORD *)&v19 = v11;
  *((_QWORD *)&v19 + 1) = swift_getWitnessTable(&unk_100065710, v11);
  *(_QWORD *)&v17 = v15;
  dispatch thunk of Subscriber.receive(subscription:)(&v17, a3, a4);
  return sub_100004D60(&v17);
}

uint64_t sub_100006C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100006BA0(a1, a4, a2, a3);
}

uint64_t sub_100006CA0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  v1 = *(_QWORD **)v0;
  swift_slowDealloc(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176)), -1, -1);
  v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 152);
  v3 = v1[13];
  v4 = v1[16];
  v5 = *(_QWORD *)(v1[17] + 8);
  v6 = v1[18];
  v12[0] = v1[10];
  v12[1] = v3;
  v12[2] = v4;
  v12[3] = v5;
  v12[4] = v6;
  v7 = _s17AEADeltaPublisherVMa(255, (uint64_t)v12);
  v8 = type metadata accessor for Optional(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v2, v8);
  v9 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
  v10 = type metadata accessor for Optional(0, v1[12]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  sub_100008370(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 168)), *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 168) + 8));
  sub_10000849C(v0 + *(_QWORD *)(*(_QWORD *)v0 + 192));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 200)));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208)));
  return v0;
}

uint64_t sub_100006DAC()
{
  uint64_t v0;

  v0 = sub_100006CA0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t _s13AEACachingMapV22CachingMapSubscriptionCMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s13AEACachingMapV22CachingMapSubscriptionCMn);
}

void sub_100006DD8()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
  os_unfair_lock_lock(v1);
  sub_100006E24(v0);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_100006E24(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  char v44[24];
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 136) + 8);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  *(_QWORD *)&v45 = v3;
  *((_QWORD *)&v45 + 1) = v4;
  v48 = v5;
  *(_QWORD *)&v46 = v5;
  *((_QWORD *)&v46 + 1) = v6;
  v47 = v7;
  v37 = _s17AEADeltaPublisherVMa(255, (uint64_t)&v45);
  v8 = type metadata accessor for Optional(0, v37);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  __chkstk_darwin(v8);
  v38 = (char *)&v33 - v9;
  v10 = v2[12];
  v11 = type metadata accessor for Optional(0, v10);
  v12 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  v16 = v2[23];
  if ((*(_BYTE *)(a1 + v16) & 1) == 0)
  {
    v33 = result;
    v34 = v4;
    v35 = v3;
    v36 = v7;
    *(_BYTE *)(a1 + v16) = 1;
    v17 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 192);
    swift_beginAccess(v17, v44, 0, 0);
    sub_100008454(v17, (uint64_t)&v45);
    if (*((_QWORD *)&v46 + 1))
    {
      sub_100008380((uint64_t)&v45, (uint64_t)v41);
      sub_10000849C((uint64_t)&v45);
      v19 = v42;
      v18 = v43;
      sub_1000060F4(v41, v42);
      dispatch thunk of Cancellable.cancel()(v19, *(_QWORD *)(v18 + 8));
      sub_100004D60(v41);
    }
    else
    {
      sub_10000849C((uint64_t)&v45);
    }
    v47 = 0;
    v45 = 0u;
    v46 = 0u;
    swift_beginAccess(v17, v41, 33, 0);
    sub_10000840C((uint64_t)&v45, v17);
    swift_endAccess(v41);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v15, 1, 1, v10);
    v20 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 160);
    swift_beginAccess(v20, &v45, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 40))(v20, v15, v33);
    swift_endAccess(&v45);
    v21 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v38, 1, 1);
    v22 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 152);
    swift_beginAccess(v22, &v45, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 40))(v22, v21, v40);
    swift_endAccess(&v45);
    v23 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 168));
    v24 = *v23;
    v25 = v23[1];
    *v23 = 0;
    v23[1] = 0;
    sub_100008370(v24, v25);
    swift_beginAccess(a1 + *(_QWORD *)(*(_QWORD *)a1 + 200), &v45, 33, 0);
    v26 = *(_QWORD *)(v48 + 8);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v34, v35, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
    v28 = swift_getAssociatedTypeWitness(255, v26, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
    v29 = v36;
    v30 = swift_getAssociatedTypeWitness(255, v36, v28, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
    v31 = v2[11];
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v29, v28, v30, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
    type metadata accessor for Dictionary(0, v30, v31, AssociatedConformanceWitness);
    Dictionary.removeAll(keepingCapacity:)(0);
    swift_endAccess(&v45);
    swift_beginAccess(a1 + *(_QWORD *)(*(_QWORD *)a1 + 208), &v45, 33, 0);
    type metadata accessor for Set(0, v31, v2[14]);
    Set.removeAll(keepingCapacity:)(0);
    return swift_endAccess(&v45);
  }
  return result;
}

uint64_t sub_1000071D8(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t (*v4)();
  uint64_t (*v6[2])();

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 176));
  os_unfair_lock_lock(v3);
  sub_100007240(v1, a1, v6);
  os_unfair_lock_unlock(v3);
  v4 = v6[1];
  v6[0]();
  return swift_release(v4);
}

uint64_t sub_100007240@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];

  if ((*(_BYTE *)(result + *(_QWORD *)(*(_QWORD *)result + 184)) & 1) == 0)
  {
    v5 = result + *(_QWORD *)(*(_QWORD *)result + 192);
    swift_beginAccess(v5, v7, 0, 0);
    sub_100008454(v5, (uint64_t)&v8);
    if (v9)
    {
      sub_1000084DC(&v8, (uint64_t)v10);
      sub_1000084DC(v10, (uint64_t)&v8);
      v6 = swift_allocObject(&unk_100081E80, 64, 7);
      result = sub_1000084DC(&v8, v6 + 16);
      *(_QWORD *)(v6 + 56) = a2;
      *a3 = sub_100008518;
      a3[1] = (uint64_t (*)())v6;
      return result;
    }
    result = sub_10000849C((uint64_t)&v8);
  }
  *a3 = Publishers.AEACombineLatestMany.init(_:);
  a3[1] = 0;
  return result;
}

void sub_10000731C(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 176));
  os_unfair_lock_lock(v3);
  sub_100007370(v1, a1);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_100007370(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE v5[40];
  _BYTE v6[40];

  if ((*(_BYTE *)(result + *(_QWORD *)(*(_QWORD *)result + 184)) & 1) == 0)
  {
    v2 = result;
    sub_100008380(a2, (uint64_t)v6);
    sub_1000083C4((uint64_t)v6, (uint64_t)v5);
    v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 192);
    swift_beginAccess(v3, v4, 33, 0);
    sub_10000840C((uint64_t)v5, v3);
    return swift_endAccess(v4);
  }
  return result;
}

void sub_1000073FC(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 176));
  os_unfair_lock_lock(v3);
  sub_100007450(v1, a1);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_100007450(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v15[24];
  uint64_t v16;

  v16 = a2;
  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for Optional(0, v4);
  v9 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin();
  v12 = &v15[-v11 - 8];
  if ((*(_BYTE *)(a1 + v3[23]) & 1) == 0)
  {
    v13 = a1 + v3[20];
    swift_beginAccess(v13, v15, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v13, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
    {
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v12, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      dispatch thunk of Subscriber.receive(completion:)(v16, v4, v3[15]);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return result;
}

uint64_t (*sub_1000075B8(uint64_t a1, uint64_t a2, char *a3))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v3;
  os_unfair_lock_s *v7;
  uint64_t (*v8)@<X0>(uint64_t *@<X8>);
  uint64_t (*v10[2])@<X0>(uint64_t *@<X8>);

  v7 = *(os_unfair_lock_s **)((char *)v3 + *(_QWORD *)(*v3 + 176));
  os_unfair_lock_lock(v7);
  sub_100007644(v3, a1, a2, a3, v10);
  os_unfair_lock_unlock(v7);
  v8 = v10[1];
  ((void (*)(uint64_t (**__return_ptr)@<X0>(uint64_t *@<X8>)))v10[0])(v10);
  swift_release(v8);
  return v10[0];
}

uint64_t sub_100007644@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t (**a5)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)@<X0>(uint64_t *@<X8>);
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t *v25;
  void (*v26)(char *);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t (**v33)@<X0>(uint64_t *@<X8>);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41[24];
  uint64_t (**v42)@<X0>(uint64_t *@<X8>);

  v39 = a3;
  v40 = a4;
  v38 = a2;
  v42 = a5;
  v7 = *a1;
  v8 = *(_QWORD *)(*a1 + 96);
  v9 = type metadata accessor for Optional(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v34 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v11);
  result = __chkstk_darwin(v16);
  if ((*((_BYTE *)a1 + *(_QWORD *)(v7 + 184)) & 1) == 0)
  {
    v35 = v19;
    v36 = (char *)&v34 - v18;
    v37 = v5;
    v22 = (uint64_t)a1 + *(_QWORD *)(v7 + 160);
    swift_beginAccess(v22, v41, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v22, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1)
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
    else
    {
      v23 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v24 = v36;
      v23(v36, v13, v8);
      v25 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 + 168));
      v26 = (void (*)(char *))*v25;
      if (*v25)
      {
        v27 = v25[1];
        sub_10000828C(*v25, v27);
        v40 = (char *)sub_1000079F8(v38, v39, v40, v26, v27);
        v28 = v35;
        v23(v35, v24, v8);
        v29 = *(unsigned __int8 *)(v14 + 80);
        v30 = (v29 + 88) & ~v29;
        v31 = (v15 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
        v20 = swift_allocObject(&unk_100081E58, v31 + 8, v29 | 7);
        *(_QWORD *)(v20 + 16) = *(_QWORD *)(v7 + 80);
        *(_QWORD *)(v20 + 24) = *(_QWORD *)(v7 + 88);
        *(_QWORD *)(v20 + 32) = v8;
        *(_OWORD *)(v20 + 40) = *(_OWORD *)(v7 + 104);
        *(_QWORD *)(v20 + 56) = *(_QWORD *)(v7 + 120);
        *(_OWORD *)(v20 + 64) = *(_OWORD *)(v7 + 128);
        *(_QWORD *)(v20 + 80) = *(_QWORD *)(v7 + 144);
        v23((char *)(v20 + v30), v28, v8);
        v32 = v40;
        *(_QWORD *)(v20 + v31) = v40;
        swift_bridgeObjectRetain(v32);
        result = sub_100008370((uint64_t)v26, v27);
        v21 = sub_100008308;
        goto LABEL_9;
      }
      result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v24, v8);
    }
    v20 = 0;
    v21 = sub_1000078C8;
    goto LABEL_9;
  }
  v20 = 0;
  v21 = sub_1000078C8;
LABEL_9:
  v33 = v42;
  *v42 = v21;
  v33[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v20;
  return result;
}

uint64_t sub_1000078C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Subscribers.Demand.none.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000078EC(uint64_t a1)
{
  return sub_1000071D8(a1);
}

void sub_10000790C(uint64_t a1)
{
  sub_10000731C(a1);
}

uint64_t (*sub_10000792C(uint64_t a1))@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000075B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(char **)(a1 + 16));
}

void sub_100007958(uint64_t a1)
{
  sub_1000073FC(a1);
}

void sub_100007978()
{
  sub_100006DD8();
}

uint64_t sub_100007998()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t sub_1000079B8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100065668, a1);
}

uint64_t sub_1000079C8(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 80), a1, &protocol requirements base descriptor for Publisher, &associated conformance descriptor for Publisher.Publisher.Failure: Error);
}

uint64_t sub_1000079E8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100065690, a1);
}

uint64_t sub_1000079F8(uint64_t a1, uint64_t a2, char *a3, void (*a4)(char *), uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t IsNativeType;
  uint64_t v42;
  uint64_t v43;
  uint64_t AssociatedConformanceWitness;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  Swift::Bool v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  void (*v100)(char *);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[3];
  char v116[8];

  v6 = v5;
  v100 = a4;
  v101 = a5;
  v97 = a1;
  v8 = (_QWORD *)*v5;
  v9 = *(_QWORD *)(v8[16] + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8[13], v8[10], &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v11 = swift_getAssociatedTypeWitness(0, v9, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v109 = *(_QWORD *)(v11 - 8);
  v12 = ((uint64_t (*)(void))__chkstk_darwin)();
  v14 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v13;
  __chkstk_darwin(v12);
  v111 = (char *)&v86 - v15;
  v16 = v8[11];
  v17 = type metadata accessor for Optional(0, v16);
  v107 = *(_QWORD *)(v17 - 8);
  v108 = v17;
  v18 = __chkstk_darwin(v17);
  v99 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v103 = (char *)&v86 - v21;
  v22 = __chkstk_darwin(v20);
  v105 = (char *)&v86 - v23;
  v112 = *(_QWORD *)(v16 - 8);
  v113 = v16;
  v24 = __chkstk_darwin(v22);
  v94 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v93 = (char *)&v86 - v27;
  v28 = __chkstk_darwin(v26);
  v92 = (char *)&v86 - v29;
  __chkstk_darwin(v28);
  v95 = (char *)&v86 - v30;
  v104 = v8;
  v106 = v8[18];
  v114 = v11;
  v31 = swift_getAssociatedTypeWitness(0, v106, v11, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 64);
  v34 = __chkstk_darwin(v31);
  v98 = (char *)&v86 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v36 = (char *)&v86 - v35;
  v37 = swift_bridgeObjectRetain(a3);
  v38 = Array.endIndex.getter(v37, v31);
  v110 = v14;
  v102 = v31;
  v96 = v6;
  if (!v38)
  {
    swift_bridgeObjectRelease(a3);
    IsNativeType = v109;
    goto LABEL_15;
  }
  v87 = v33;
  v39 = (_QWORD *)((char *)v6 + *(_QWORD *)(*v6 + 200));
  v89 = (char *)v6 + *(_QWORD *)(*v6 + 208);
  swift_beginAccess(v39, v116, 0, 0);
  v40 = 0;
  v91 = a3;
  v90 = v39;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v40, IsNativeType & 1, a3, v31);
    if ((IsNativeType & 1) == 0)
      break;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v36, &a3[((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v40], v31);
    v42 = v40 + 1;
    if (__OFADD__(v40, 1))
      goto LABEL_12;
LABEL_7:
    v43 = *v39;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v106, v114, v31, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
    swift_bridgeObjectRetain(v43);
    v45 = v113;
    v46 = AssociatedConformanceWitness;
    v47 = v105;
    Dictionary.subscript.getter(v36, v43, v31, v113, v46);
    swift_bridgeObjectRelease(v43);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v31);
    v48 = v112;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v47, 1, v45) == 1)
    {
      (*(void (**)(char *, uint64_t))(v107 + 8))(v47, v108);
    }
    else
    {
      v49 = v95;
      v50 = v36;
      v51 = v113;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v95, v47, v113);
      swift_beginAccess(v89, v115, 33, 0);
      v52 = type metadata accessor for Set(0, v51, v104[14]);
      v53 = v103;
      Set.remove(_:)(v49, v52);
      (*(void (**)(char *, uint64_t))(v107 + 8))(v53, v108);
      swift_endAccess(v115);
      v31 = v102;
      v54 = v49;
      a3 = v91;
      v55 = v51;
      v36 = v50;
      v39 = v90;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v54, v55);
    }
    IsNativeType = v109;
    ++v40;
    if (v42 == Array.endIndex.getter(a3, v31))
      goto LABEL_13;
  }
  result = _ArrayBuffer._getElementSlowPath(_:)(v40, a3, v31);
  if (v87 != 8)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  v57 = result;
  v115[0] = result;
  (*(void (**)(char *, _QWORD *, uint64_t))(v32 + 16))(v36, v115, v31);
  swift_unknownObjectRelease(v57);
  v42 = v40 + 1;
  if (!__OFADD__(v40, 1))
    goto LABEL_7;
LABEL_12:
  __break(1u);
LABEL_13:
  swift_bridgeObjectRelease(a3);
  v6 = v96;
  v14 = v110;
LABEL_15:
  v58 = v97;
  v59 = swift_bridgeObjectRetain(v97);
  if (!Array.endIndex.getter(v59, v114))
    goto LABEL_27;
  v60 = 0;
  v61 = *(_QWORD *)(*v6 + 208);
  v95 = (char *)v6 + *(_QWORD *)(*v6 + 200);
  v91 = (char *)v6 + v61;
  v62 = v113;
  v63 = v114;
  while (2)
  {
    v77 = v114;
    v78 = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v60, v78, v58, v77);
    if (v78)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(IsNativeType + 16))(v111, v58+ ((*(unsigned __int8 *)(IsNativeType + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(IsNativeType + 80))+ *(_QWORD *)(IsNativeType + 72) * v60, v114);
      v79 = v60 + 1;
      if (__OFADD__(v60, 1))
        break;
      goto LABEL_21;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)(v60, v58, v114);
    if (v88 != 8)
      goto LABEL_29;
    v84 = result;
    v115[0] = result;
    (*(void (**)(char *, _QWORD *, uint64_t))(IsNativeType + 16))(v111, v115, v114);
    swift_unknownObjectRelease(v84);
    v79 = v60 + 1;
    if (!__OFADD__(v60, 1))
    {
LABEL_21:
      (*(void (**)(char *, char *, uint64_t))(IsNativeType + 32))(v14, v111, v114);
      v80 = v99;
      v81 = IsNativeType;
      v100(v14);
      v82 = v80;
      v83 = v112;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v82, 1, v113) == 1)
      {
        (*(void (**)(char *, uint64_t))(v81 + 8))(v14, v114);
        (*(void (**)(char *, uint64_t))(v107 + 8))(v82, v108);
        IsNativeType = v81;
      }
      else
      {
        v64 = v92;
        (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v92, v82, v62);
        v65 = v106;
        dispatch thunk of Identifiable.id.getter(v63, v106);
        v105 = *(char **)(v83 + 16);
        v66 = v103;
        ((void (*)(char *, char *, uint64_t))v105)(v103, v64, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v66, 0, 1, v62);
        swift_beginAccess(v95, v115, 33, 0);
        v67 = v65;
        v68 = v102;
        v69 = swift_getAssociatedConformanceWitness(v67, v63, v102, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
        v70 = type metadata accessor for Dictionary(0, v68, v62, v69);
        Dictionary.subscript.setter(v66, v98, v70);
        swift_endAccess(v115);
        v71 = v94;
        ((void (*)(char *, char *, uint64_t))v105)(v94, v64, v62);
        v58 = v97;
        swift_beginAccess(v91, v115, 33, 0);
        v72 = type metadata accessor for Set(0, v62, v104[14]);
        v73 = v93;
        Set.insert(_:)(v93, v71, v72);
        v74 = *(void (**)(char *, uint64_t))(v83 + 8);
        v74(v73, v62);
        swift_endAccess(v115);
        v75 = v64;
        v6 = v96;
        v74(v75, v62);
        IsNativeType = v109;
        (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v63);
      }
      v76 = Array.endIndex.getter(v58, v114);
      ++v60;
      v14 = v110;
      if (v79 == v76)
        goto LABEL_27;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_27:
  swift_bridgeObjectRelease(v58);
  v85 = (char *)v6 + *(_QWORD *)(*v6 + 208);
  swift_beginAccess(v85, v115, 0, 0);
  return *(_QWORD *)v85;
}

uint64_t sub_10000828C(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10000829C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 88) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_100008308@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  v4 = *(_QWORD *)(v1
                 + ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) - 8) + 64)
                   + ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) - 8) + 80))
                   + 7) & 0xFFFFFFFFFFFFF8));
  result = dispatch thunk of Subscriber.receive(_:)(&v4);
  *a1 = result;
  return result;
}

uint64_t sub_100008370(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100008380(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000083C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(qword_10008F5A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000840C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(qword_10008F5A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(qword_10008F5A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000849C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20(qword_10008F5A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000084DC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000084F4()
{
  uint64_t v0;

  sub_100004D60((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100008518()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[5];
  sub_1000060F4(v0 + 2, v3);
  return dispatch thunk of Subscription.request(_:)(v1, v3, v2);
}

uint64_t sub_100008560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 64);
}

uint64_t sub_100008568(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 72);
    return 0;
  }
  return result;
}

uint64_t *sub_1000085E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v10 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v9 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v10 = v9[1];
    v11 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v9;
    v11[1] = v10;
  }
  swift_retain(v10);
  return v4;
}

uint64_t sub_100008690(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  return swift_release(*(_QWORD *)(((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000086D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain(v9);
  return a1;
}

uint64_t sub_100008730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  v10 = v7[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain(v9);
  swift_release(v10);
  return a1;
}

uint64_t sub_10000879C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000087F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 8);
  *(_OWORD *)v7 = *(_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release(v8);
  return a1;
}

uint64_t sub_10000885C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000088D8 + 4 * byte_1000655B0[v10]))();
  }
}

void sub_10000895C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_100008A50()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x100008B30);
}

void sub_100008A58(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x100008A60);
  JUMPOUT(0x100008B30);
}

void sub_100008ACC()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x100008B30);
}

void sub_100008AF0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100008B30);
}

void sub_100008AF8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100008B30);
}

void sub_100008B00(unsigned int a1@<W1>, unsigned int a2@<W2>, size_t a3@<X8>)
{
  int v3;
  char *v4;
  uint64_t v5;

  *(_WORD *)&v4[v5] = 0;
  if (a1)
  {
    if (a2 < 0x7FFFFFFF)
      JUMPOUT(0x100008AD4);
    if (a2 >= a1)
      JUMPOUT(0x100008B0CLL);
    if ((_DWORD)a3)
    {
      if (a3 <= 3)
        v3 = a3;
      else
        v3 = 4;
      bzero(v4, a3);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x100008B30);
}

void sub_100008B44()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x100008B30);
}

void sub_100008B54()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x100008B30);
}

void sub_100008B5C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x100008B30);
}

uint64_t _s13AEACachingMapVMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s13AEACachingMapVMn);
}

uint64_t sub_100008B74(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 16), a1, &protocol requirements base descriptor for Publisher, &associated conformance descriptor for Publisher.Publisher.Failure: Error);
}

uint64_t sub_100008B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedTypeWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t WitnessTable;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v5 = v4;
  v64 = a3;
  v65 = a4;
  v60 = a2;
  v58 = a1;
  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 96);
  v8 = type metadata accessor for Optional(0, v7);
  v61 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  __chkstk_darwin(v8);
  v59 = (char *)&v47 - v9;
  v10 = v6[10];
  v11 = v6[13];
  v12 = v6[16];
  v63 = v6[17];
  v13 = *(_QWORD *)(v63 + 8);
  v14 = v6[18];
  v66 = v10;
  v67 = v11;
  v53 = v10;
  v54 = v11;
  v68 = v12;
  v69 = v13;
  v15 = v12;
  v57 = v12;
  v70 = v14;
  v16 = _s17AEADeltaPublisherVMa(255, (uint64_t)&v66);
  v17 = type metadata accessor for Optional(0, v16);
  v55 = *(_QWORD *)(v17 - 8);
  v56 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v47 - v18;
  v20 = v5 + v6[19];
  v48 = *(_QWORD *)(v16 - 8);
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  v49(v20, 1, 1, v16);
  v21 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 160);
  v50 = v7;
  v51 = *(_QWORD *)(v7 - 8);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
  v52(v21, 1, 1, v7);
  v22 = (_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 168));
  *v22 = 0;
  v22[1] = 0;
  v23 = *(_QWORD *)(*(_QWORD *)v5 + 176);
  v24 = (_DWORD *)swift_slowAlloc(4, -1);
  *v24 = 0;
  *(_QWORD *)(v5 + v23) = v24;
  *(_BYTE *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 184)) = 0;
  v25 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 192);
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_QWORD *)(v25 + 32) = 0;
  v26 = *(_QWORD *)(*(_QWORD *)v5 + 200);
  v27 = *(_QWORD *)(v15 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11, v10, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v29 = swift_getAssociatedTypeWitness(255, v27, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v30 = swift_getAssociatedTypeWitness(0, v14, v29, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v31 = v6[11];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v14, v29, v30, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  *(_QWORD *)(v5 + v26) = Dictionary.init()(v30, v31, AssociatedConformanceWitness);
  v33 = *(_QWORD *)(*(_QWORD *)v5 + 208);
  v34 = v6[14];
  *(_QWORD *)(v5 + v33) = Set.init()(v31, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v19, v58, v16);
  v49((uint64_t)v19, 0, 1, v16);
  v35 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 152);
  swift_beginAccess(v35, &v66, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v55 + 40))(v35, v19, v56);
  swift_endAccess(&v66);
  v36 = v59;
  v37 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v59, v60, v50);
  v52((uint64_t)v36, 0, 1, v37);
  v38 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 160);
  swift_beginAccess(v38, &v66, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v61 + 40))(v38, v36, v62);
  swift_endAccess(&v66);
  v39 = (uint64_t *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 168));
  v40 = *v39;
  v41 = v39[1];
  v42 = v65;
  *v39 = v64;
  v39[1] = v42;
  swift_retain(v42);
  sub_100008370(v40, v41);
  v74 = v14;
  v75 = v5;
  v43 = v6[15];
  v66 = v53;
  v67 = v31;
  v68 = v37;
  v69 = v54;
  v70 = v34;
  v71 = v43;
  v72 = v57;
  v73 = v63;
  v44 = _s13AEACachingMapV22CachingMapSubscriptionCMa(0, (uint64_t)&v66);
  WitnessTable = swift_getWitnessTable(&unk_1000656B8, v44);
  sub_10001BE80((uint64_t)&v75, v16, v44, WitnessTable);
  return v5;
}

uint64_t sub_100008FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v14[4];
  uint64_t v15;

  v9 = *(_QWORD *)(v4 + 144);
  v10 = *(_OWORD *)(v4 + 96);
  v14[0] = *(_OWORD *)(v4 + 80);
  v14[1] = v10;
  v11 = *(_OWORD *)(v4 + 128);
  v14[2] = *(_OWORD *)(v4 + 112);
  v14[3] = v11;
  v15 = v9;
  v12 = _s13AEACachingMapV22CachingMapSubscriptionCMa(0, (uint64_t)v14);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  return sub_100008B94(a1, a2, a3, a4);
}

uint64_t sub_100009040()
{
  return 1;
}

Swift::Int sub_100009048()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_100009088()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000090AC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

id sub_1000090F8()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_publicationListener], "invalidate");
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AEAClientConnection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000091F4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  void *v11;
  uint64_t v12;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_publicationListener);
  objc_msgSend(v1, "setDelegate:", v0);
  objc_msgSend(v1, "resume");
  v2 = *(void **)(v0 + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
  v3 = swift_allocObject(&unk_1000821A0, 24, 7);
  swift_unknownObjectWeakInit(v3 + 16, v2);
  v11 = sub_10000AFA4;
  v12 = v3;
  v7 = _NSConcreteStackBlock;
  v8 = 1107296256;
  v9 = sub_10002448C;
  v10 = &unk_1000821B8;
  v4 = _Block_copy(&v7);
  swift_release(v12);
  objc_msgSend(v2, "setInterruptionHandler:", v4);
  _Block_release(v4);
  v5 = swift_allocObject(&unk_100082100, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v0);
  v11 = sub_10000B000;
  v12 = v5;
  v7 = _NSConcreteStackBlock;
  v8 = 1107296256;
  v9 = sub_10002448C;
  v10 = &unk_1000821E0;
  v6 = _Block_copy(&v7);
  swift_release(v12);
  objc_msgSend(v2, "setInvalidationHandler:", v6);
  _Block_release(v6);
}

uint64_t sub_100009368(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  aBlock[4] = sub_10000AFBC;
  v19 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002448C;
  aBlock[3] = &unk_100082208;
  v10 = _Block_copy(aBlock);
  v11 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v11);
  v17 = _swiftEmptyArrayStorage;
  v12 = sub_10000ACBC();
  v13 = sub_100004D20(&qword_10008F748);
  v14 = sub_10000AD04();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v2, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v19);
}

void sub_100009530(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;
  _QWORD v12[3];
  _BYTE v13[8];
  uint64_t v14;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10008E5E0 != -1)
      swift_once(&qword_10008E5E0, sub_10001552C);
    v2 = type metadata accessor for Logger(0);
    sub_10000B164(v2, (uint64_t)qword_100093E18);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v14 = v6;
      *(_DWORD *)v5 = 136446210;
      swift_getErrorValue(a1, v13, v12);
      v7 = sub_10004CCD0(v12[1], v12[2]);
      v9 = v8;
      v11 = sub_100059C74(v7, v8, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12, v5 + 4, v5 + 12);
      swift_bridgeObjectRelease(v9);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to forward invalidation error to client. Error: %{public}s", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

uint64_t sub_100009720()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  void *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v9 = swift_allocObject(&unk_100082150, 24, 7);
  *(_QWORD *)(v9 + 16) = v0;
  aBlock[4] = sub_10000AFF8;
  v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002448C;
  aBlock[3] = &unk_100082168;
  v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v16 = &_swiftEmptyArrayStorage;
  v11 = sub_10000ACBC();
  v12 = sub_100004D20(&qword_10008F748);
  v13 = sub_10000AD04();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

char *sub_1000098F8(char *a1)
{
  char *result;
  char *v3;

  result = (char *)swift_unknownObjectWeakLoadStrong(&a1[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate]);
  if (result)
  {
    v3 = result;
    sub_10001B23C(a1, result);
    return (char *)swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t type metadata accessor for AEAClientConnection()
{
  return objc_opt_self(_TtC15assessmentagent19AEAClientConnection);
}

uint64_t sub_100009994()
{
  uint64_t v0;

  if (qword_10008E650 != -1)
    swift_once(&qword_10008E650, sub_100031900);
  v0 = qword_100093F20;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100093F28);
  return v0;
}

void sub_1000099FC(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "invalidate");

  }
}

void sub_100009A54(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_100009720();

  }
}

id sub_100009B00(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id result;
  void *v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v26 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)&v3[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_xpcPrimitives];
  result = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (result)
  {
    v14 = result;
    v15 = objc_msgSend(v12, "auditTokenForConnection:", result);

    if (qword_10008E618 != -1)
      swift_once(&qword_10008E618, sub_10003015C);
    v16 = (_QWORD *)swift_allocObject(&unk_100082060, 56, 7);
    v16[2] = v3;
    v16[3] = a1;
    v17 = v26;
    v16[4] = v15;
    v16[5] = v17;
    v16[6] = a3;
    aBlock[4] = sub_10000AF70;
    v31 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002448C;
    aBlock[3] = &unk_100082078;
    v18 = _Block_copy(aBlock);
    v19 = v3;
    v20 = a1;
    v21 = v15;
    v22 = swift_retain(a3);
    static DispatchQoS.unspecified.getter(v22);
    v29 = &_swiftEmptyArrayStorage;
    v23 = sub_10000ACBC();
    v24 = sub_100004D20(&qword_10008F748);
    v25 = sub_10000AD04();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v24, v25, v6, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v27);
    return (id)swift_release(v31);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100009D6C(char *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;

  result = swift_unknownObjectWeakLoadStrong(&a1[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate]);
  if (result)
  {
    v11 = result;
    sub_10001A880(a1, a2, a3, a4, a5);
    return swift_unknownObjectRelease(v11);
  }
  return result;
}

void sub_100009E74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_100009EC0(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  void *v22;
  _QWORD aBlock[5];
  _QWORD *v24;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v13 = (_QWORD *)swift_allocObject(&unk_100081FE8, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_10000AC98;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002448C;
  aBlock[3] = &unk_100082000;
  v14 = _Block_copy(aBlock);
  v15 = v2;
  v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  v22 = &_swiftEmptyArrayStorage;
  v17 = sub_10000ACBC();
  v18 = sub_100004D20(&qword_10008F748);
  v19 = sub_10000AD04();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v24);
}

uint64_t sub_10000A0AC(char *a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t result;
  char *v7;

  result = swift_unknownObjectWeakLoadStrong(&a1[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate]);
  if (result)
  {
    v7 = (char *)result;
    swift_retain(a3);
    sub_10001B4C0(a1, v7, a2, a3);
    swift_release(a3);
    return swift_unknownObjectRelease(v7);
  }
  return result;
}

uint64_t sub_10000A128(uint64_t (*a1)(_QWORD))
{
  return a1(0);
}

unint64_t sub_10000A1C0()
{
  unint64_t result;

  result = qword_10008F738;
  if (!qword_10008F738)
  {
    result = swift_getWitnessTable(&unk_100065858, &type metadata for AEAClientConnection.ClientConnectionError);
    atomic_store(result, (unint64_t *)&qword_10008F738);
  }
  return result;
}

uint64_t sub_10000A204(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = a1;
  return swift_task_switch(sub_10000A21C, 0, 0);
}

uint64_t sub_10000A21C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 144) + 16;
  swift_beginAccess(v1, v0 + 120, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  v3 = (void *)Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v4 = v0 + 16;
  v5 = *(void **)(Strong + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
  *(_QWORD *)(v0 + 152) = v5;
  v6 = v5;

  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10000A30C;
  v7 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v8 = (_QWORD *)(v0 + 80);
  v8[1] = 0x40000000;
  v8[2] = sub_10001E1BC;
  v8[3] = &unk_1000822D8;
  v8[4] = v7;
  objc_msgSend(v6, "handleEventWantsBeginSingleAppModeWithCompletion:", v8);
  return swift_continuation_await(v4);
}

uint64_t sub_10000A30C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    v2 = sub_10000B184;
  else
    v2 = sub_10000B17C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000A36C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = a1;
  return swift_task_switch(sub_10000A384, 0, 0);
}

uint64_t sub_10000A384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 144) + 16;
  swift_beginAccess(v1, v0 + 120, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  v3 = (void *)Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v4 = v0 + 16;
  v5 = *(void **)(Strong + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
  *(_QWORD *)(v0 + 152) = v5;
  v6 = v5;

  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10000A474;
  v7 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v8 = (_QWORD *)(v0 + 80);
  v8[1] = 0x40000000;
  v8[2] = sub_10001E1BC;
  v8[3] = &unk_1000822C0;
  v8[4] = v7;
  objc_msgSend(v6, "handleEventWantsEndSingleAppModeWithCompletion:", v8);
  return swift_continuation_await(v4);
}

uint64_t sub_10000A474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    v2 = sub_10000A508;
  else
    v2 = sub_10000A4D4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000A4D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000A508()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000A548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[25] = a8;
  v8[26] = v10;
  v8[23] = a6;
  v8[24] = a7;
  v8[21] = a4;
  v8[22] = a5;
  v8[19] = a2;
  v8[20] = a3;
  v8[18] = a1;
  return swift_task_switch(sub_10000A578, 0, 0);
}

uint64_t sub_10000A578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  NSString v5;
  NSString v6;
  NSString v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v13;

  v1 = *(_QWORD *)(v0 + 208) + 16;
  swift_beginAccess(v1, v0 + 120, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (void *)Strong;
  v4 = *(void **)(Strong + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
  *(_QWORD *)(v0 + 216) = v4;
  v13 = v4;

  v5 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 224) = v5;
  v6 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 232) = v6;
  v7 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 240) = v7;
  v8 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 248) = v8;
  v9 = v0 + 16;
  *(_QWORD *)(v0 + 56) = v0 + 264;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10000A710;
  v10 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v11 = (_QWORD *)(v0 + 80);
  v11[1] = 0x40000000;
  v11[2] = sub_10000A840;
  v11[3] = &unk_100082308;
  v11[4] = v10;
  objc_msgSend(v13, "handleEventWantsPresentChoicePromptWithTitle:message:confirmTitle:cancelTitle:completion:", v5, v6, v7, v8, v11);
  return swift_continuation_await(v9);
}

uint64_t sub_10000A710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 256) = v1;
  if (v1)
    v2 = sub_10000A7D4;
  else
    v2 = sub_10000A770;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000A770()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = *(void **)(v0 + 240);
  v1 = *(void **)(v0 + 248);
  v4 = *(void **)(v0 + 224);
  v3 = *(void **)(v0 + 232);
  v5 = *(unsigned __int8 *)(v0 + 264);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_10000A7D4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = *(void **)(v0 + 248);
  v3 = *(void **)(v0 + 232);
  v2 = *(void **)(v0 + 240);
  v5 = *(void **)(v0 + 216);
  v4 = *(void **)(v0 + 224);
  swift_willThrow();

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10000A840(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004D20(&qword_100090790);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_10000A8C0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 168) = a3;
  *(double *)(v4 + 160) = a4;
  *(_QWORD *)(v4 + 144) = a1;
  *(_QWORD *)(v4 + 152) = a2;
  return swift_task_switch(sub_10000A8E0, 0, 0);
}

uint64_t sub_10000A8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  Swift::Double v5;
  void *v6;
  id v7;
  NSString v8;
  Class isa;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 168) + 16;
  swift_beginAccess(v1, v0 + 120, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  v3 = (void *)Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v4 = v0 + 16;
  v5 = *(double *)(v0 + 160);
  v6 = *(void **)(Strong + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
  *(_QWORD *)(v0 + 176) = v6;
  v7 = v6;

  v8 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 184) = v8;
  sub_10000622C();
  isa = NSNumber.init(floatLiteral:)(v5).super.super.isa;
  *(_QWORD *)(v0 + 192) = isa;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10000AA1C;
  v10 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v11 = (_QWORD *)(v0 + 80);
  v11[1] = 0x40000000;
  v11[2] = sub_10001E1BC;
  v11[3] = &unk_1000822F0;
  v11[4] = v10;
  objc_msgSend(v7, "handleEventWantsPresentBannerWithTitle:duration:completion:", v8, isa, v11);
  return swift_continuation_await(v4);
}

uint64_t sub_10000AA1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 200) = v1;
  if (v1)
    v2 = sub_10000AABC;
  else
    v2 = sub_10000AA7C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000AA7C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 184);
  v2 = *(void **)(v0 + 192);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000AABC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 192);
  v3 = *(void **)(v0 + 176);
  v2 = *(void **)(v0 + 184);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000AB10(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, void *a5)
{
  objc_class *v9;
  char *v10;
  char *v11;
  void *v12;
  id v13;
  char *v14;
  id v15;
  id v16;
  objc_super v17;

  if (a1)
  {
    swift_errorRetain(a1);
    a2(a1, 1);
    swift_errorRelease(a1);
  }
  else
  {
    v9 = (objc_class *)type metadata accessor for AEAClientConnection();
    v10 = (char *)objc_allocWithZone(v9);
    v11 = &v10[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate];
    *((_QWORD *)v11 + 1) = 0;
    swift_unknownObjectWeakInit(v11, 0);
    *(_QWORD *)&v10[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_xpcPrimitives] = a4;
    *(_QWORD *)&v10[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy] = a5;
    v12 = (void *)objc_opt_self(NSXPCListener);
    swift_unknownObjectRetain(a4);
    v13 = a5;
    v14 = v10;
    v15 = objc_msgSend(v12, "anonymousListener");
    *(_QWORD *)&v14[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_publicationListener] = v15;

    v17.receiver = v14;
    v17.super_class = v9;
    v16 = objc_msgSendSuper2(&v17, "init");
    a2((uint64_t)v16, 0);

  }
}

uint64_t sub_10000AC40()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10000AC64(uint64_t a1)
{
  uint64_t v1;

  sub_100009E74(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10000AC6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10000AC98()
{
  uint64_t v0;

  return sub_10000A0AC(*(char **)(v0 + 16), *(void (**)(_QWORD))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10000ACA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000ACB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10000ACBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008F740;
  if (!qword_10008F740)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10008F740);
  }
  return result;
}

unint64_t sub_10000AD04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008F750;
  if (!qword_10008F750)
  {
    v1 = sub_100005520(&qword_10008F748);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10008F750);
  }
  return result;
}

id sub_10000AD50(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  void **v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  void (*v15)();
  uint64_t v16;

  v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_xpcPrimitives), "connectionCanPublishAssessmentState:", a1);
  if ((_DWORD)v3)
  {
    v4 = swift_allocObject(&unk_1000820B0, 24, 7);
    swift_unknownObjectWeakInit(v4 + 16, a1);
    v15 = sub_10000AFA4;
    v16 = v4;
    v11 = _NSConcreteStackBlock;
    v12 = 1107296256;
    v13 = sub_10002448C;
    v14 = &unk_1000820C8;
    v5 = _Block_copy(&v11);
    swift_release(v16);
    objc_msgSend(a1, "setInterruptionHandler:", v5);
    _Block_release(v5);
    v6 = swift_allocObject(&unk_100082100, 24, 7);
    swift_unknownObjectWeakInit(v6 + 16, v1);
    v15 = sub_10000AFBC;
    v16 = v6;
    v11 = _NSConcreteStackBlock;
    v12 = 1107296256;
    v13 = sub_10002448C;
    v14 = &unk_100082118;
    v7 = _Block_copy(&v11);
    swift_release(v16);
    objc_msgSend(a1, "setInvalidationHandler:", v7);
    _Block_release(v7);
    v8 = objc_msgSend(objc_allocWithZone((Class)AEAssessmentStatePublishingXPCInterfaceFactory), "init");
    v9 = objc_msgSend(v8, "makeInterface");

    objc_msgSend(a1, "setExportedInterface:", v9);
    objc_msgSend(a1, "setExportedObject:", v1);
    objc_msgSend(a1, "resume");
  }
  else
  {
    objc_msgSend(a1, "invalidate");
  }
  return v3;
}

uint64_t sub_10000AF34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10000AF70()
{
  uint64_t v0;

  return sub_100009D6C(*(char **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10000AF80()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10000AFA4()
{
  uint64_t v0;

  sub_1000099FC(v0);
}

void sub_10000AFBC()
{
  uint64_t v0;

  sub_100009A54(v0);
}

uint64_t sub_10000AFD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

char *sub_10000AFF8()
{
  uint64_t v0;

  return sub_1000098F8(*(char **)(v0 + 16));
}

uint64_t sub_10000B000()
{
  uint64_t v0;

  return sub_100009368(v0);
}

uint64_t sub_10000B008(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAClientConnection.ClientConnectionError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AEAClientConnection.ClientConnectionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10000B0C0 + 4 * byte_1000657B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10000B0E0 + 4 * byte_1000657B5[v4]))();
}

_BYTE *sub_10000B0C0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10000B0E0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10000B0E8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10000B0F0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10000B0F8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10000B100(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AEAClientConnection.ClientConnectionError()
{
  return &type metadata for AEAClientConnection.ClientConnectionError;
}

unint64_t sub_10000B120()
{
  unint64_t result;

  result = qword_10008F758;
  if (!qword_10008F758)
  {
    result = swift_getWitnessTable(&unk_1000658F8, &type metadata for AEAClientConnection.ClientConnectionError);
    atomic_store(result, &qword_10008F758);
  }
  return result;
}

uint64_t sub_10000B164(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t type metadata accessor for AEAConcretePasteboardPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent31AEAConcretePasteboardPrimitives);
}

void sub_10000B1EC()
{
  id v0;
  Class isa;

  v0 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
  sub_100004D20(&qword_10008F828);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, "setItems:", isa);

}

ValueMetadata *type metadata accessor for AEARecoverFromCrashTask()
{
  return &type metadata for AEARecoverFromCrashTask;
}

uint64_t sub_10000B27C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  if (!a1)
    return a2(0, 0);
  swift_errorRetain();
  a2(a1, 1);
  return swift_errorRelease(a1);
}

uint64_t sub_10000B2D8(void (*a1)(void ***), uint64_t a2)
{
  void **v2;
  void *v5;

  v5 = *v2;
  swift_retain(a2);
  sub_10000B320(v5, a1, a2);
  return swift_release(a2);
}

uint64_t sub_10000B320(void *a1, void (*a2)(void ***), uint64_t a3)
{
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t, void *);
  void *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;

  v6 = swift_allocObject(&unk_100082400, 32, 7);
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  swift_retain(a3);
  v7 = objc_msgSend(a1, "recoverySession");
  if (v7)
  {
    v8 = v7;
    v9 = swift_allocObject(&unk_100082428, 32, 7);
    *(_QWORD *)(v9 + 16) = sub_10000B480;
    *(_QWORD *)(v9 + 24) = v6;
    v17 = sub_10000B48C;
    v18 = v9;
    v13 = _NSConcreteStackBlock;
    v14 = 1107296256;
    v15 = sub_100018BB8;
    v16 = &unk_100082440;
    v10 = _Block_copy(&v13);
    v11 = v18;
    swift_retain(v6);
    swift_release(v11);
    objc_msgSend(v8, "deactivateWithCompletion:", v10);
    _Block_release(v10);
    swift_release(v6);
    return swift_unknownObjectRelease(v8);
  }
  else
  {
    v13 = 0;
    LOBYTE(v14) = 0;
    a2(&v13);
    return swift_release(v6);
  }
}

uint64_t sub_10000B45C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000B480(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10004E058(a1, a2 & 1, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_10000B48C(uint64_t a1)
{
  uint64_t v1;

  return sub_10000B27C(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_10000B494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000B4A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10000B4B4()
{
  unint64_t result;

  result = qword_10008F848;
  if (!qword_10008F848)
  {
    result = swift_getWitnessTable(&unk_100065A04, &type metadata for AEAAirPlayActionError);
    atomic_store(result, (unint64_t *)&qword_10008F848);
  }
  return result;
}

uint64_t sub_10000B4F8()
{
  uint64_t v0;

  if (qword_10008E620 != -1)
    swift_once(&qword_10008E620, sub_1000312A8);
  v0 = qword_100093EC0;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100093EC8);
  return v0;
}

void sub_10000B554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v7 = sub_100004D20(&qword_10008F860);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_1000825D0, v11 + v9, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_10000BBD8;
  v15 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000B748;
  aBlock[3] = &unk_1000825E8;
  v13 = _Block_copy(aBlock);
  swift_release(v15);
  objc_msgSend(a5, "stopAirPlayingWithCompletion:", v13);
  _Block_release(v13);
}

uint64_t sub_10000B684(char a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];
  _QWORD v6[5];
  char v7;
  _OWORD v8[3];

  if ((a1 & 1) != 0)
  {
    memset(v8, 0, 41);
  }
  else
  {
    v1 = sub_10000B4B4();
    *(_QWORD *)&v8[0] = swift_allocError(&type metadata for AEAAirPlayActionError, v1, 0, 0);
    BYTE8(v8[2]) = 1;
  }
  sub_10000BC30((uint64_t)v8, (uint64_t)v6);
  if ((v7 & 1) != 0)
  {
    v5[0] = v6[0];
    v2 = sub_100004D20(&qword_10008F860);
    CheckedContinuation.resume(throwing:)(v5, v2);
  }
  else
  {
    sub_10000BCB8((uint64_t)v6, (uint64_t)v5);
    v3 = sub_100004D20(&qword_10008F860);
    CheckedContinuation.resume(returning:)(v5, v3);
  }
  return sub_10000BC78((uint64_t)v8);
}

uint64_t sub_10000B748(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

double sub_10000B784@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_10000B794(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(v1 + 1);
  *(_QWORD *)(v2 + 48) = v1[3];
  return swift_task_switch(sub_10000B7C0, 0, 0);
}

uint64_t sub_10000B7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v7 = *(_OWORD *)(v0 + 24);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = v7;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 64) = v4;
  v5 = sub_100004D20(&qword_100091B60);
  *v4 = v0;
  v4[1] = sub_10000B884;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0x6574617669746361, 0xEF293A6874697728, sub_10000BB68, v3, v5);
}

uint64_t sub_10000B884()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 64);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10000B8F8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 56));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10000B8F8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000B92C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_10000B958()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t storeEnumTagSinglePayload for AEAAirPlayActionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10000B9A0 + 4 * byte_1000659B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10000B9C0 + 4 * byte_1000659B5[v4]))();
}

_BYTE *sub_10000B9A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10000B9C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10000B9C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10000B9D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10000B9D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10000B9E0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AEAAirPlayActionError()
{
  return &type metadata for AEAAirPlayActionError;
}

unint64_t sub_10000BA00()
{
  unint64_t result;

  result = qword_10008F850;
  if (!qword_10008F850)
  {
    result = swift_getWitnessTable(&unk_100065AA8, &type metadata for AEAAirPlayActionError);
    atomic_store(result, (unint64_t *)&qword_10008F850);
  }
  return result;
}

uint64_t destroy for AEAAirPlayActivation(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_unknownObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for AEAAirPlayActivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_unknownObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for AEAAirPlayActivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for AEAAirPlayActivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_unknownObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for AEAAirPlayActivation()
{
  return &type metadata for AEAAirPlayActivation;
}

void sub_10000BB68(uint64_t a1)
{
  uint64_t v1;

  sub_10000B554(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10000BB74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100004D20(&qword_10008F860);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10000BBD8(char a1)
{
  sub_100004D20(&qword_10008F860);
  return sub_10000B684(a1);
}

uint64_t sub_10000BC18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000BC28(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000BC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(qword_10008F868);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000BC78(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20(qword_10008F868);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000BCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100091B60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000BD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_10000BD08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_10000BD74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }
  return v3;
}

uint64_t sub_10000BDE4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_10000BDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_10000BE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_10000BE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_10000BE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_10000BEB4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10000BF64 + 4 * byte_100065B10[(v7 - 1)]))();
}

void sub_10000BFB4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_100000004;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AEAUnsafeSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C170(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AEAUnsafeSendable);
}

uint64_t sub_10000C170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

void sub_10000C19C(Swift::Bool a1)
{
  void *v1;
  void *v2;
  Class isa;
  id v5;

  v2 = v1;
  sub_10000622C();
  isa = NSNumber.init(BOOLeanLiteral:)(a1).super.super.isa;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setNumber:forKey:", isa, v5);

}

uint64_t sub_10000C220()
{
  void *v0;
  NSString v1;
  id v2;
  id v3;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "numberForKey:", v1);

  if (!v2)
    return 2;
  v3 = objc_msgSend(v2, "BOOLValue");

  return (uint64_t)v3;
}

unint64_t sub_10000C298()
{
  unint64_t result;

  result = qword_10008F8F0;
  if (!qword_10008F8F0)
  {
    result = swift_getWitnessTable(&unk_100065BA4, &type metadata for AEASiriActionError);
    atomic_store(result, (unint64_t *)&qword_10008F8F0);
  }
  return result;
}

uint64_t sub_10000C2DC()
{
  uint64_t v0;

  if (qword_10008E660 != -1)
    swift_once(&qword_10008E660, sub_100031B20);
  v0 = qword_100093F40;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100093F48);
  return v0;
}

uint64_t storeEnumTagSinglePayload for AEASiriActionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10000C378 + 4 * byte_100065B50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10000C398 + 4 * byte_100065B55[v4]))();
}

_BYTE *sub_10000C378(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10000C398(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10000C3A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10000C3A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10000C3B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10000C3B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AEASiriActionError()
{
  return &type metadata for AEASiriActionError;
}

unint64_t sub_10000C3D8()
{
  unint64_t result;

  result = qword_10008F8F8;
  if (!qword_10008F8F8)
  {
    result = swift_getWitnessTable(&unk_100065C44, &type metadata for AEASiriActionError);
    atomic_store(result, (unint64_t *)&qword_10008F8F8);
  }
  return result;
}

uint64_t destroy for AEAKillAgentNotificationListenerActivation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  sub_100004D60(a1 + 3);
  return sub_100004D60(a1 + 8);
}

uint64_t initializeWithCopy for AEAKillAgentNotificationListenerActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = a2 + 24;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain(v4);
  v8(a1 + 24, v5, v7);
  v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 64, a2 + 64);
  return a1;
}

_QWORD *assignWithCopy for AEAKillAgentNotificationListenerActivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  sub_10000C54C(a1 + 3, a2 + 3);
  sub_10000C54C(a1 + 8, a2 + 8);
  return a1;
}

_QWORD *sub_10000C54C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for AEAKillAgentNotificationListenerActivation(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for AEAKillAgentNotificationListenerActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  sub_100004D60((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100004D60((_QWORD *)(a1 + 64));
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAKillAgentNotificationListenerActivation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAKillAgentNotificationListenerActivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAKillAgentNotificationListenerActivation()
{
  return &type metadata for AEAKillAgentNotificationListenerActivation;
}

uint64_t sub_10000C804()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 24);
  return swift_task_switch(sub_10000C820, 0, 0);
}

uint64_t sub_10000C820()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), "cancel");
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000C85C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  return swift_task_switch(sub_10000C874, 0, 0);
}

__CFNotificationCenter *sub_10000C874()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __CFNotificationCenter *result;
  __CFNotificationCenter *v11;
  _QWORD *v12;
  __CFString *v13;
  _QWORD *v14;

  sub_10000CB68(*(_QWORD *)(v0 + 128), v0 + 16);
  v1 = swift_allocObject(&unk_1000828F8, 120, 7);
  v2 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v1 + 96) = v2;
  *(_QWORD *)(v1 + 112) = *(_QWORD *)(v0 + 112);
  v3 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 32) = v3;
  v4 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v1 + 64) = v4;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(AEKillAssessmentAgentNotificationName);
  v7 = v6;
  v8 = type metadata accessor for AEAConcreteSystemNotificationPrimitives.NotificationCenterObservation();
  v9 = (_QWORD *)swift_allocObject(v8, 64, 7);
  v9[2] = sub_10005C190;
  v9[3] = 0;
  v9[4] = v5;
  v9[5] = v7;
  v9[6] = sub_10000CBD0;
  v9[7] = v1;
  swift_retain_n(v1, 2);
  result = CFNotificationCenterGetDarwinNotifyCenter();
  if (result)
  {
    v11 = result;
    v12 = *(_QWORD **)(v0 + 120);
    v13 = (__CFString *)String._bridgeToObjectiveC()();
    CFNotificationCenterAddObserver(v11, v9, (CFNotificationCallback)sub_10005C2EC, v13, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

    swift_release_n(v1, 2);
    v12[3] = &type metadata for AEAKillAgentNotificationListenerDeactivation;
    v12[4] = &off_1000829D8;
    v14 = (_QWORD *)swift_allocObject(&unk_100082920, 48, 7);
    *v12 = v14;
    v14[2] = 0xD00000000000003ALL;
    v14[3] = 0x800000010006BC80;
    v14[4] = 4;
    v14[5] = v9;
    return (__CFNotificationCenter *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10000C9FC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000B164(v0, (uint64_t)qword_100093E18);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received kill agent notification", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  exit(9);
}

uint64_t sub_10000CAC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10008F90C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10000CB20;
  v4[15] = a1;
  v4[16] = v1;
  return swift_task_switch(sub_10000C874, 0, 0);
}

uint64_t sub_10000CB20()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000CB68(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEAKillAgentNotificationListenerActivation(a2, a1);
  return a2;
}

uint64_t sub_10000CB9C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_100004D60(v0 + 5);
  sub_100004D60(v0 + 10);
  return swift_deallocObject(v0, 120, 7);
}

void sub_10000CBD0()
{
  sub_10000C9FC();
}

uint64_t sub_10000CBD8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

ValueMetadata *type metadata accessor for AEAKillAgentNotificationListenerDeactivation()
{
  return &type metadata for AEAKillAgentNotificationListenerDeactivation;
}

uint64_t sub_10000CC18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10000CCA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10000CD18();
  swift_release(*(_QWORD *)(v0 + 16));
  v1 = v0 + qword_10008F9C8;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10000CCF8()
{
  uint64_t v0;

  v0 = sub_10000CCA8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10000CD18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    v3 = v1 + qword_10008F9C8;
    swift_retain(v2);
    sub_10000CDD0(v3);
    swift_release(v2);
    v4 = *(_QWORD *)(v1 + 16);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(v1 + 16) = 0;
  return swift_release(v4);
}

uint64_t sub_10000CD78()
{
  return sub_10000CD18();
}

uint64_t sub_10000CD98(uint64_t (*a1)(uint64_t *))
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  return a1(&v2);
}

uint64_t sub_10000CDD0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  uint64_t v16;

  v3 = *v1;
  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v6, a1, v4);
  v16 = 0;
  swift_beginAccess(v1 + 3, v15, 33, 0);
  v8 = *(_QWORD *)(v3 + 80);
  v9 = sub_100005520(&qword_10008FA50);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v8, v9, 0, 0);
  v11 = type metadata accessor for PassthroughSubject(255, TupleTypeMetadata2, &type metadata for Never, &protocol witness table for Never);
  v12 = sub_10000D004();
  v13 = type metadata accessor for Dictionary(0, v4, v11, v12);
  Dictionary.subscript.setter(&v16, v6, v13);
  return swift_endAccess(v15);
}

uint64_t *sub_10000CEE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  v3 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t sub_10000CF50()
{
  uint64_t v0;

  sub_10000CEE4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for AEAValueAntiphony(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C170(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AEAValueAntiphony);
}

uint64_t sub_10000CF80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 2, v4, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for AEAValueAntiphony.Membership(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C170(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AEAValueAntiphony.Membership);
}

unint64_t sub_10000D004()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008FA58;
  if (!qword_10008FA58)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10008FA58);
  }
  return result;
}

_QWORD *sub_10000D04C(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_10003FE94(0, v1, 0);
  result = (_QWORD *)sub_100040C1C(a1);
  v5 = (uint64_t)result;
  v6 = 0;
  v7 = a1 + 64;
  v21 = v1;
  v22 = v4;
  v23 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    v10 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v4)
      goto LABEL_24;
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 40 * v5);
    v12 = v11[1];
    v24 = *v11;
    v14 = _swiftEmptyArrayStorage[2];
    v13 = _swiftEmptyArrayStorage[3];
    result = (_QWORD *)swift_bridgeObjectRetain(v12);
    if (v14 >= v13 >> 1)
      result = (_QWORD *)sub_10003FE94(v13 > 1, v14 + 1, 1);
    _swiftEmptyArrayStorage[2] = v14 + 1;
    v15 = &_swiftEmptyArrayStorage[2 * v14];
    v15[4] = v24;
    v15[5] = v12;
    v8 = 1 << *(_BYTE *)(a1 + 32);
    if (v5 >= v8)
      goto LABEL_25;
    v7 = a1 + 64;
    v16 = *(_QWORD *)(v23 + 8 * v10);
    if ((v16 & (1 << v5)) == 0)
      goto LABEL_26;
    v4 = v22;
    if (*(_DWORD *)(a1 + 36) != v22)
      goto LABEL_27;
    v17 = v16 & (-2 << (v5 & 0x3F));
    if (v17)
    {
      v8 = __clz(__rbit64(v17)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v9 = v21;
    }
    else
    {
      v18 = v10 + 1;
      v19 = (unint64_t)(v8 + 63) >> 6;
      v9 = v21;
      if (v10 + 1 < v19)
      {
        v20 = *(_QWORD *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          v8 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v10)
          {
            v20 = *(_QWORD *)(a1 + 80 + 8 * v10++);
            if (v20)
            {
              v18 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v6;
    v5 = v8;
    if (v6 == v9)
      return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

BOOL sub_10000D258(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10000D270()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000D2B4()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000D2DC(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10000D31C()
{
  _BYTE *v0;
  uint64_t *v1;
  uint64_t v2;

  if ((*v0 & 1) != 0)
  {
    if (qword_10008E688 != -1)
      swift_once(&qword_10008E688, sub_10003206C);
    v1 = &qword_100093F90;
  }
  else
  {
    if (qword_10008E680 != -1)
      swift_once(&qword_10008E680, sub_100031F5C);
    v1 = &qword_100093F80;
  }
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10000D3B4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_10000D3CC, 0, 0);
}

uint64_t sub_10000D3CC()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)(*(_QWORD *)(v0 + 56) + 104);
  v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_10000D424;
  return v4();
}

uint64_t sub_10000D424()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 64);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_10000D490, 0, 0);
}

uint64_t sub_10000D490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v1 + 32);
  v2 = *(_QWORD *)(v1 + 40);
  v4 = type metadata accessor for AEAConcreteManagedConfigurationRestrictionsApplicator();
  swift_allocObject(v4, 40, 7);
  swift_bridgeObjectRetain(v2);
  *(_QWORD *)(v0 + 16) = sub_10005DC00(v3, v2);
  *(_QWORD *)(v0 + 40) = v4;
  *(_QWORD *)(v0 + 48) = &off_100087460;
  sub_1000060F4((_QWORD *)(v0 + 16), v4);
  sub_1000603A0(0);
  sub_100004D60((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000D550()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_10000D558()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10008FEAC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100014AC4;
  v2[7] = v0;
  return swift_task_switch(sub_10000D3CC, 0, 0);
}

uint64_t sub_10000D5B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10008FA8C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100014AC4;
  v3[12] = v2;
  return swift_task_switch(sub_10000E0FC, 0, 0);
}

uint64_t sub_10000D614@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v15[4];
  uint64_t v16;

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(a1, "stringForKey:", v5);

  if (!v6)
  {
    sub_100014510(v2, (uint64_t)v15);
LABEL_5:
    v7 = v15[3];
    v9 = v16;
    swift_bridgeObjectRetain(v16);
    goto LABEL_6;
  }
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  sub_100014510(v2, (uint64_t)v15);
  if (!v9)
    goto LABEL_5;
LABEL_6:
  sub_100014544(v15);
  a2[3] = (uint64_t)&type metadata for AEARestrictionsRecoveryDeactivation;
  a2[4] = (uint64_t)&off_100082FD0;
  v10 = swift_allocObject(&unk_100082E70, 136, 7);
  *a2 = v10;
  sub_100008380(v2 + 40, v10 + 64);
  v11 = *(_QWORD *)(v2 + 128);
  v12 = *(_QWORD *)(v2 + 152);
  *(_QWORD *)(v10 + 16) = 0xD000000000000035;
  *(_QWORD *)(v10 + 24) = 0x800000010006C0C0;
  *(_QWORD *)(v10 + 32) = 5;
  *(_BYTE *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = v7;
  *(_QWORD *)(v10 + 56) = v9;
  *(_QWORD *)(v10 + 104) = v11;
  v13 = *(_OWORD *)(v2 + 136);
  *(_OWORD *)(v10 + 112) = v13;
  *(_QWORD *)(v10 + 128) = v12;
  swift_retain(v13);
  return swift_retain(v12);
}

uint64_t sub_10000D77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  return swift_task_switch(sub_10000D79C, 0, 0);
}

uint64_t sub_10000D79C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 128);
  v30 = *(_QWORD *)(v0 + 120);
  v32 = *(_QWORD *)(v0 + 112);
  v33 = *(_QWORD *)(v0 + 104);
  v31 = *(_QWORD *)(v1 + 24);
  v25 = *(_QWORD *)(v1 + 32);
  sub_100008380(v1 + 40, v0 + 16);
  sub_100008380(v1 + 80, v0 + 56);
  v2 = *(_QWORD *)(v1 + 120);
  v3 = *(_QWORD *)(v1 + 136);
  v28 = *(_QWORD *)(v1 + 144);
  v29 = *(_QWORD *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 152);
  v26 = *(_BYTE *)(v1 + 161);
  v27 = *(_BYTE *)(v1 + 160);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = sub_100013D84(v0 + 16, v5);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v5);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = sub_100013D84(v0 + 56, v9);
  v11 = *(_QWORD *)(v9 - 8);
  v12 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(v12, v10, v9);
  v13 = *v8;
  v14 = *v12;
  swift_bridgeObjectRetain(v25);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  v15 = swift_retain(v30);
  *((_QWORD *)&v24 + 1) = v32;
  *(_QWORD *)&v24 = v4;
  v16 = sub_100013690(v31, v25, v13, v14, v2, v29, v3, v28, v24, v15, v27, v26);
  sub_100004D60((_QWORD *)(v0 + 56));
  swift_task_dealloc(v12);
  sub_100004D60((_QWORD *)(v0 + 16));
  swift_task_dealloc(v8);
  v18 = *(_QWORD *)(v1 + 24);
  v17 = *(_QWORD *)(v1 + 32);
  v19 = (_QWORD *)swift_allocObject(&unk_100082E20, 40, 7);
  v19[2] = v33;
  v19[3] = v18;
  v19[4] = v17;
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain(v17);
  sub_10000E4AC((uint64_t)sub_1000144D8, (uint64_t)v19);
  v20 = *(_QWORD *)(v0 + 104);
  v21 = *(uint64_t **)(v0 + 96);
  swift_release(v19);
  v21[3] = (uint64_t)&type metadata for AEARestrictionsDeactivation;
  v21[4] = (uint64_t)&off_100082FF0;
  v22 = swift_allocObject(&unk_100082E48, 56, 7);
  *v21 = v22;
  swift_unknownObjectRelease(v20);
  *(_QWORD *)(v22 + 16) = 0xD00000000000002CLL;
  *(_QWORD *)(v22 + 24) = 0x800000010006C070;
  *(_QWORD *)(v22 + 32) = 5;
  *(_BYTE *)(v22 + 40) = 0;
  *(_QWORD *)(v22 + 48) = v16;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000DA48(void *a1)
{
  NSString v2;
  NSString v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[16];
  id v20;

  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setString:forKey:", v2, v3);

  v20 = 0;
  if (objc_msgSend(a1, "persistWithError:", &v20))
  {
    v4 = v20;
  }
  else
  {
    v16 = v20;
    v5 = v20;
    v6 = _convertNSErrorToError(_:)(v16);

    swift_willThrow();
    if (qword_10008E600 != -1)
      swift_once(&qword_10008E600, sub_100015604);
    v7 = type metadata accessor for Logger(0);
    sub_10000B164(v7, (uint64_t)qword_100093E78);
    swift_errorRetain(v6);
    v8 = swift_errorRetain(v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (void *)swift_slowAlloc(32, -1);
      v20 = v12;
      *(_DWORD *)v11 = 136446210;
      swift_getErrorValue(v6, v19, v18);
      v13 = sub_10004CCD0(v18[1], v18[2]);
      v15 = v14;
      v17 = sub_100059C74(v13, v14, (uint64_t *)&v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to persist restriction scratchpad. Error: %{public}s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v6);
    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
  }
}

uint64_t sub_10000DD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc(dword_10008FE94);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_10000CB20;
  v10[15] = a4;
  v10[16] = v4;
  v10[13] = a2;
  v10[14] = a3;
  v10[12] = a1;
  return swift_task_switch(sub_10000D79C, 0, 0);
}

uint64_t sub_10000DD94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];
  _QWORD v20[5];

  v1 = v0[26];
  if (v1)
  {
    v2 = v0[26];
  }
  else
  {
    v3 = v0[2];
    v4 = v0[3];
    sub_100008380((uint64_t)(v0 + 9), (uint64_t)v20);
    sub_100008380((uint64_t)(v0 + 4), (uint64_t)v19);
    v5 = v0[19];
    v6 = v0[20];
    v7 = sub_100013D84((uint64_t)v20, v20[3]);
    __chkstk_darwin(v7);
    v9 = (_QWORD *)((char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    v11 = sub_100013D84((uint64_t)v19, v19[3]);
    __chkstk_darwin(v11);
    v13 = (_QWORD *)((char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    v15 = *v9;
    v16 = *v13;
    swift_bridgeObjectRetain(v4);
    swift_retain(v6);
    v2 = sub_100013424(v3, v4, v15, v16, v5, v6);
    sub_100004D60(v19);
    sub_100004D60(v20);
    v17 = v0[26];
    v0[26] = v2;
    swift_retain(v2);
    swift_release(v17);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_10000DF20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[5];
  _QWORD v24[5];

  v1 = v0[27];
  if (v1)
  {
    v2 = v0[27];
  }
  else
  {
    v3 = v0;
    sub_100008380((uint64_t)(v0 + 4), (uint64_t)v24);
    v5 = v0[19];
    v4 = v0[20];
    v6 = sub_100013D84((uint64_t)v24, v24[3]);
    __chkstk_darwin(v6);
    v8 = (_QWORD *)((char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    v10 = *v8;
    v11 = type metadata accessor for AEAConcreteSpringBoardPrimitives();
    v23[3] = v11;
    v23[4] = &off_100083CF0;
    v23[0] = v10;
    v12 = type metadata accessor for AEAHomeScreenConfigurer();
    v2 = swift_allocObject(v12, 152, 7);
    v13 = sub_100013D84((uint64_t)v23, v11);
    __chkstk_darwin(v13);
    v15 = (_QWORD *)((char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v16 + 16))(v15);
    v17 = *v15;
    *(_QWORD *)(v2 + 40) = v11;
    *(_QWORD *)(v2 + 48) = &off_100083CF0;
    *(_QWORD *)(v2 + 16) = v17;
    v18 = type metadata accessor for CATSerializer(0);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v19 = swift_retain(v4);
    v20 = CATSerializer.init()(v19);
    *(_QWORD *)(v2 + 64) = v4;
    *(_QWORD *)(v2 + 72) = v20;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_QWORD *)(v2 + 144) = 0;
    *(_QWORD *)(v2 + 56) = v5;
    sub_100004D60(v23);
    sub_100004D60(v24);
    v21 = v3[27];
    v3[27] = v2;
    swift_retain(v2);
    swift_release(v21);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_10000E0E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = v0;
  return swift_task_switch(sub_10000E0FC, 0, 0);
}

uint64_t sub_10000E0FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[12];
  *(_BYTE *)(v1 + 184) = 0;
  swift_beginAccess(v1 + 176, v0 + 9, 33, 0);
  sub_100051D40();
  swift_endAccess(v0 + 9);
  v2 = *(_QWORD *)(v1 + 192);
  v3 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 200) = 0;
  sub_100008370(v2, v3);
  v4 = sub_10000DF20();
  v0[13] = v4;
  swift_retain(v4);
  v5 = CATSerializer.enqueue<A>(respectingCancelAll:_:)(1, &unk_10008FE78, v4, (char *)&type metadata for () + 8);
  v0[14] = v5;
  swift_release(v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v0[15] = v6;
  v7 = sub_100004D20(&qword_100090790);
  *v6 = v0;
  v6[1] = sub_10000E1F8;
  return Task.value.getter(v7, v5, (char *)&type metadata for () + 8, v7, &protocol self-conformance witness table for Error);
}

uint64_t sub_10000E1F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 112));
    v4 = sub_10000E354;
  }
  else
  {
    v4 = sub_10000E264;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10000E264()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(v1);
  *(_QWORD *)(v0 + 136) = sub_10000DD94();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 56) = xmmword_100065EA0;
  v2 = (_QWORD *)swift_task_alloc(dword_10008FC2C);
  *(_QWORD *)(v0 + 144) = v2;
  *v2 = v0;
  v2[1] = sub_10000E2EC;
  return sub_10000FB94(v0 + 16);
}

uint64_t sub_10000E2EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10000E478;
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 136);
    v4 = sub_10000E388;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_10000E354()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000E388()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  objc_msgSend(*(id *)(v1 + 152), "cancel");
  swift_release(v1);
  return swift_task_switch(sub_10000E3D8, 0, 0);
}

uint64_t sub_10000E3D8()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)(*(_QWORD *)(v0 + 96) + 128);
  v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  *(_QWORD *)(v0 + 160) = v2;
  *v2 = v0;
  v2[1] = sub_10000E430;
  return v4();
}

uint64_t sub_10000E430()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000E478()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000E4AC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  if ((*(_BYTE *)(v2 + 184) & 1) == 0)
  {
    v3 = (_QWORD *)v2;
    *(_BYTE *)(v2 + 184) = 1;
    v5 = *(_QWORD *)(v2 + 192);
    v4 = *(_QWORD *)(v2 + 200);
    v3[24] = result;
    v3[25] = a2;
    swift_retain(a2);
    sub_100008370(v5, v4);
    v6 = sub_100051E28();
    v8 = v7;
    v9 = v3 + 22;
    swift_beginAccess(v3 + 22, v21, 33, 0);
    v10 = swift_retain(v6);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
    v12 = *(_QWORD *)((v3[22] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v11 = *(_QWORD *)((v3[22] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v12 >= v11 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v6);
    specialized Array._endMutation()(v13);
    swift_endAccess(v21);
    v21[0] = v8;
    v14 = swift_allocObject(&unk_100082C18, 24, 7);
    swift_weakInit(v14 + 16, v3);
    v15 = swift_allocObject(&unk_100082C40, 32, 7);
    *(_QWORD *)(v15 + 16) = sub_100013AA8;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = sub_100004D20((uint64_t *)&unk_100093270);
    v17 = sub_1000057A4(&qword_10008FE50, (uint64_t *)&unk_100093270, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v18 = Publisher<>.sink(receiveValue:)(sub_100013AB0, v15, v16, v17);
    swift_release(v15);
    swift_beginAccess(v9, v21, 33, 0);
    v19 = sub_100004D20((uint64_t *)&unk_100093280);
    v20 = sub_1000057A4(&qword_10008FE58, (uint64_t *)&unk_100093280, (uint64_t)&protocol conformance descriptor for [A]);
    AnyCancellable.store<A>(in:)(v9, v19, v20);
    swift_endAccess(v21);
    swift_release(v6);
    swift_release(v8);
    return swift_release(v18);
  }
  return result;
}

uint64_t sub_10000E6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE v27[24];

  v8 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_100004D20(&qword_100091B00);
  __chkstk_darwin(v12);
  v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a4 += 16;
  swift_beginAccess(a4, v27, 0, 0);
  result = swift_weakLoadStrong(a4);
  if (result)
  {
    v16 = result;
    v17 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
    sub_100013AB8(a1, (uint64_t)&v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8]);
    type metadata accessor for MainActor(0);
    swift_retain(v16);
    v18 = swift_retain(a3);
    v19 = static MainActor.shared.getter(v18);
    v20 = *(unsigned __int8 *)(v9 + 80);
    v21 = (v20 + 40) & ~v20;
    v22 = (v10 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = (_QWORD *)swift_allocObject(&unk_100082C68, v22 + 16, v20 | 7);
    v23[2] = v19;
    v23[3] = &protocol witness table for MainActor;
    v23[4] = v16;
    sub_100013C28((uint64_t)v11, (uint64_t)v23 + v21);
    v24 = (_QWORD *)((char *)v23 + v22);
    *v24 = a2;
    v24[1] = a3;
    v25 = sub_100052094((uint64_t)v14, (uint64_t)&unk_10008FE68, (uint64_t)v23);
    swift_release(v25);
    return swift_release(v16);
  }
  return result;
}

uint64_t sub_10000E85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v12;
  _QWORD *v13;

  v12 = type metadata accessor for MainActor(0);
  v7[2] = v12;
  v7[3] = static MainActor.shared.getter(v12);
  v13 = (_QWORD *)swift_task_alloc(dword_10008FA94);
  v7[4] = v13;
  *v13 = v7;
  v13[1] = sub_10000E8F4;
  v13[23] = a7;
  v13[24] = a4;
  v13[21] = a5;
  v13[22] = a6;
  return swift_task_switch(sub_10000E9B0, 0, 0);
}

uint64_t sub_10000E8F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10000E964, v2, v3);
}

uint64_t sub_10000E964()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000E994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[23] = a3;
  v4[24] = v3;
  v4[21] = a1;
  v4[22] = a2;
  return swift_task_switch(sub_10000E9B0, 0, 0);
}

uint64_t sub_10000E9B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(uint64_t);
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 192);
  v4 = *(void (**)(uint64_t))(v1 + 192);
  v2 = (_QWORD *)(v1 + 192);
  v3 = v4;
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v0 + 192) + 200);
    *v2 = 0;
    v2[1] = 0;
    swift_retain(v5);
    v6 = sub_100008370((uint64_t)v3, v5);
    v3(v6);
    sub_100008370((uint64_t)v3, v5);
  }
  *(_QWORD *)(v0 + 200) = sub_10000DD94();
  sub_10000F7B0(v0 + 72);
  v7 = *(unsigned __int8 *)(v0 + 104);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 48) = v7;
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v0 + 112);
  v8 = (_QWORD *)swift_task_alloc(dword_10008FC2C);
  *(_QWORD *)(v0 + 208) = v8;
  *v8 = v0;
  v8[1] = sub_10000EA88;
  return sub_10000FB94(v0 + 16);
}

uint64_t sub_10000EA88()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10000F5A0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 200);
    sub_100013840(v2 + 72);
    swift_release(v5);
    v4 = sub_10000EB00;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10000EB00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  int *v16;
  _QWORD *v17;
  uint64_t (*v18)();
  int *v19;
  uint64_t (*v20)(void);

  v1 = *(_QWORD *)(v0 + 192);
  if (*(_BYTE *)(v1 + 169) == 1)
  {
    v2 = sub_10000DF20();
    *(_QWORD *)(v0 + 224) = v2;
    v3 = sub_10000F8EC();
    v5 = v4;
    v7 = v6;
    v9 = v8;
    *(_QWORD *)(v0 + 232) = v4;
    *(_QWORD *)(v0 + 240) = v6;
    *(_QWORD *)(v0 + 248) = v8;
    v10 = (_QWORD *)swift_allocObject(&unk_100082BC8, 56, 7);
    v10[2] = v3;
    v10[3] = v5;
    v10[4] = v7;
    v10[5] = v9;
    v10[6] = v2;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_retain(v2);
    v11 = CATSerializer.enqueue<A>(respectingCancelAll:_:)(1, &unk_10008FE48, v10, (char *)&type metadata for () + 8);
    *(_QWORD *)(v0 + 256) = v11;
    swift_release(v10);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(_QWORD *)(v0 + 264) = v12;
    v13 = sub_100004D20(&qword_100090790);
    *v12 = v0;
    v12[1] = sub_10000ED0C;
    return Task.value.getter(v13, v11, (char *)&type metadata for () + 8, v13, &protocol self-conformance witness table for Error);
  }
  else if (*(_BYTE *)(v1 + 168) == 1)
  {
    v15 = *(_QWORD *)(v0 + 168);
    if (*(_QWORD *)(*(_QWORD *)(v15 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) + 20))
                   + 16))
    {
      v16 = *(int **)(v1 + 128);
      v20 = (uint64_t (*)(void))((char *)v16 + *v16);
      v17 = (_QWORD *)swift_task_alloc(v16[1]);
      *(_QWORD *)(v0 + 296) = v17;
      v18 = sub_10000F308;
    }
    else
    {
      v19 = *(int **)(v1 + 112);
      v20 = (uint64_t (*)(void))((char *)v19 + *v19);
      v17 = (_QWORD *)swift_task_alloc(v19[1]);
      *(_QWORD *)(v0 + 280) = v17;
      v18 = sub_10000F0A8;
    }
    *v17 = v0;
    v17[1] = v18;
    return v20();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 176))(0, 0);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000ED0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 256));
    v4 = sub_10000EE88;
  }
  else
  {
    v4 = sub_10000ED78;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10000ED78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v9)();
  int *v11;
  uint64_t (*v12)(void);

  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 256));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_release(v4);
  v5 = *(_QWORD *)(v0 + 192);
  if (*(_BYTE *)(v5 + 168) == 1)
  {
    v6 = *(_QWORD *)(v0 + 168);
    if (*(_QWORD *)(*(_QWORD *)(v6 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) + 20))
                   + 16))
    {
      v7 = *(int **)(v5 + 128);
      v12 = (uint64_t (*)(void))((char *)v7 + *v7);
      v8 = (_QWORD *)swift_task_alloc(v7[1]);
      *(_QWORD *)(v0 + 296) = v8;
      v9 = sub_10000F308;
    }
    else
    {
      v11 = *(int **)(v5 + 112);
      v12 = (uint64_t (*)(void))((char *)v11 + *v11);
      v8 = (_QWORD *)swift_task_alloc(v11[1]);
      *(_QWORD *)(v0 + 280) = v8;
      v9 = sub_10000F0A8;
    }
    *v8 = v0;
    v8[1] = v9;
    return v12();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 176))(0, 0);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000EE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  v4 = *(_QWORD *)(v0 + 272);
  if (qword_10008E600 != -1)
    swift_once(&qword_10008E600, sub_100015604);
  v5 = type metadata accessor for Logger(0);
  sub_10000B164(v5, (uint64_t)qword_100093E78);
  swift_errorRetain(v4);
  v6 = swift_errorRetain(v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v9 = 136446210;
    swift_getErrorValue(v4, v0 + 152, v0 + 128);
    v11 = sub_10004CCD0(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
    v13 = v12;
    *(_QWORD *)(v0 + 160) = sub_100059C74(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to apply restrictions for configuration: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  swift_errorRetain(v4);
  v14(v4, 1);
  swift_errorRelease(v4);
  swift_errorRelease(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F0A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10000F10C;
  else
    v3 = sub_100014AD0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10000F10C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 288);
  if (qword_10008E600 != -1)
    swift_once(&qword_10008E600, sub_100015604);
  v2 = type metadata accessor for Logger(0);
  sub_10000B164(v2, (uint64_t)qword_100093E78);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_getErrorValue(v1, v0 + 152, v0 + 128);
    v8 = sub_10004CCD0(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
    v10 = v9;
    *(_QWORD *)(v0 + 160) = sub_100059C74(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to apply restrictions for configuration: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  swift_errorRetain(v1);
  v11(v1, 1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10000F3A4;
  else
    v3 = sub_10000F36C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10000F36C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 176))(0, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 304);
  if (qword_10008E600 != -1)
    swift_once(&qword_10008E600, sub_100015604);
  v2 = type metadata accessor for Logger(0);
  sub_10000B164(v2, (uint64_t)qword_100093E78);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_getErrorValue(v1, v0 + 152, v0 + 128);
    v8 = sub_10004CCD0(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
    v10 = v9;
    *(_QWORD *)(v0 + 160) = sub_100059C74(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to apply restrictions for configuration: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  swift_errorRetain(v1);
  v11(v1, 1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 200);
  sub_100013840(v0 + 72);
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 216);
  if (qword_10008E600 != -1)
    swift_once(&qword_10008E600, sub_100015604);
  v3 = type metadata accessor for Logger(0);
  sub_10000B164(v3, (uint64_t)qword_100093E78);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_getErrorValue(v2, v0 + 152, v0 + 128);
    v9 = sub_10004CCD0(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
    v11 = v10;
    *(_QWORD *)(v0 + 160) = sub_100059C74(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to apply restrictions for configuration: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  v12 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  swift_errorRetain(v2);
  v12(v2, 1);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_10000F7B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const mach_header_64 *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *result;
  int v31;
  uint64_t v32;

  v3 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v4 = *(unsigned __int8 *)(v1 + v3[13]);
  v5 = *(unsigned __int8 *)(v1 + v3[11]);
  v6 = *(unsigned __int8 *)(v1 + v3[6]);
  v7 = *(unsigned __int8 *)(v1 + v3[15]);
  v8 = *(unsigned __int8 *)(v1 + v3[12]);
  v9 = *(unsigned __int8 *)(v1 + v3[10]);
  v10 = *(unsigned __int8 *)(v1 + v3[14]);
  v32 = *(unsigned __int8 *)(v1 + v3[9]);
  v11 = *(unsigned __int8 *)(v1 + v3[7]);
  v31 = *(unsigned __int8 *)(v1 + v3[8]);
  v12 = sub_1000121E4();
  v13 = 256;
  if (!v5)
    v13 = 0;
  v14 = v13 | v4;
  v15 = 0x10000;
  if (!v6)
    v15 = 0;
  if (v7)
    v16 = 0x1000000;
  else
    v16 = 0;
  v17 = v14 | v15 | v16;
  v18 = 0x10000000000;
  if (!v8)
    v18 = 0;
  v19 = 0x1000000000000;
  if (!v9)
    v19 = 0;
  v20 = v18 | v19;
  v21 = 0x100000000000000;
  if (!v10)
    v21 = 0;
  v22 = v17 | v20 | v21;
  if (v11)
    v23 = 0x1000000;
  else
    v23 = 0;
  v24 = v23 | v32;
  v25 = &_mh_execute_header;
  if (!v31)
    v25 = 0;
  v26 = v24 | (unint64_t)v25;
  v27 = v12 << 24;
  v28 = v12 >> 40;
  v29 = sub_100012400();
  result = sub_100012564();
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v26;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v27;
  *(_BYTE *)(a1 + 32) = v28;
  *(_QWORD *)(a1 + 40) = v29;
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

unint64_t sub_10000F8EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _BYTE v15[48];

  v1 = sub_100004D20(&qword_100093360);
  inited = swift_initStackObject(v1, v15);
  *(_OWORD *)(inited + 16) = xmmword_100065EB0;
  v3 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(inited + 32) = *(_QWORD *)(v0 + 8);
  *(_QWORD *)(inited + 40) = v3;
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) + 20));
  swift_bridgeObjectRetain(v3);
  v5 = swift_bridgeObjectRetain(v4);
  v6 = sub_10000D04C(v5);
  swift_bridgeObjectRelease(v4);
  sub_10003DC30((uint64_t)v6);
  v7 = *(_QWORD *)(inited + 16);
  if (v7)
  {
    sub_10003FEDC(0, v7, 0);
    v8 = (_QWORD *)(inited + 40);
    do
    {
      v10 = *(v8 - 1);
      v9 = *v8;
      v11 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v8);
      if (v11 >= v12 >> 1)
        sub_10003FEDC(v12 > 1, v11 + 1, 1);
      v8 += 2;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v11];
      v13[4] = v10;
      v13[5] = v9;
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease(inited);
  return 0xD000000000000019;
}

_QWORD *sub_10000FA70()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  sub_100004D60(v0 + 4);
  sub_100004D60(v0 + 9);
  v1 = v0[15];
  swift_release(v0[17]);
  swift_release(v1);
  swift_release(v0[18]);
  swift_release(v0[20]);
  swift_bridgeObjectRelease(v0[22]);
  sub_100008370(v0[24], v0[25]);
  swift_release(v0[26]);
  swift_release(v0[27]);
  return v0;
}

uint64_t sub_10000FAE8()
{
  _QWORD *v0;

  v0 = sub_10000FA70();
  return swift_deallocClassInstance(v0, 224, 7);
}

uint64_t type metadata accessor for AEARestrictionsAssertion()
{
  return objc_opt_self(_TtC15assessmentagentP33_A8D4301921A0F4CD295D3AB81CF9BF6F24AEARestrictionsAssertion);
}

uint64_t sub_10000FB24()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 152), "cancel");
  sub_100004D60((_QWORD *)(v0 + 112));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 152));
  sub_100012AE0(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AEARestrictionsApplicator()
{
  return objc_opt_self(_TtC15assessmentagentP33_A8D4301921A0F4CD295D3AB81CF9BF6F25AEARestrictionsApplicator);
}

uint64_t sub_10000FB94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)(v2 + 656) = v1;
  *(_QWORD *)(v2 + 648) = a1;
  sub_1000139A8(a1, v2 + 464, &qword_10008FE30);
  v3 = *(_OWORD *)(v2 + 480);
  *(_OWORD *)(v2 + 664) = *(_OWORD *)(v2 + 464);
  *(_OWORD *)(v2 + 680) = v3;
  *(_OWORD *)(v2 + 696) = *(_OWORD *)(v2 + 496);
  *(_QWORD *)(v2 + 712) = *(_QWORD *)(v2 + 512);
  return swift_task_switch(sub_10000FBFC, v1, 0);
}

uint64_t sub_10000FBFC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  _QWORD *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_class *v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  __int128 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  _QWORD *v57;
  _QWORD *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78[2];

  v1 = *(_QWORD **)(v0 + 656);
  v2 = v1[21];
  v3 = v1[22];
  v4 = v1[23];
  v6 = v1[24];
  v5 = v1[25];
  v7 = v1[26];
  v8 = v1[27];
  sub_1000139A8(*(_QWORD *)(v0 + 648), v0 + 184, &qword_10008FE30);
  if (*(_QWORD *)(v0 + 224) == 1)
  {
    if (v7 == 1)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (v7 == 1)
  {
LABEL_5:
    v74 = *(_QWORD *)(v0 + 704);
    v76 = *(_QWORD *)(v0 + 712);
    v72 = *(_QWORD *)(v0 + 688);
    v73 = *(_QWORD *)(v0 + 696);
    v70 = *(_QWORD *)(v0 + 672);
    v71 = *(_QWORD *)(v0 + 680);
    v69 = *(_QWORD *)(v0 + 664);
    v9 = *(_QWORD **)(v0 + 648);
    sub_100012AAC(v2, v3, v4, v6, v5, v7, v8);
    sub_100012B14(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
    sub_100012AE0(v69, v70, v71, v72, v73, v74, v76);
    sub_100012AE0(v2, v3, v4, v6, v5, v7, v8);
    goto LABEL_11;
  }
  v10 = *(_OWORD *)(v0 + 680);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 664);
  v11 = *(_QWORD *)(v0 + 696);
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v3;
  *(_QWORD *)(v0 + 32) = v4;
  *(_QWORD *)(v0 + 40) = v6;
  *(_BYTE *)(v0 + 48) = v5;
  *(_QWORD *)(v0 + 56) = v7;
  *(_QWORD *)(v0 + 64) = v8;
  *(_OWORD *)(v0 + 88) = v10;
  *(_BYTE *)(v0 + 104) = v11;
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 704);
  if (sub_10004B248((uint64_t *)(v0 + 72), (uint64_t *)(v0 + 16)))
  {
LABEL_7:
    if (qword_10008E600 != -1)
      swift_once(&qword_10008E600, sub_100015604);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10000B164(v12, (uint64_t)qword_100093E78);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v14, v15))
      goto LABEL_37;
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Skipping duplicate restrictions update", v16, 2u);
    goto LABEL_35;
  }
LABEL_11:
  if (qword_10008E600 != -1)
    swift_once(&qword_10008E600, sub_100015604);
  v17 = v0 + 296;
  v77 = (uint64_t *)(v0 + 640);
  v18 = (_QWORD **)(v0 + 648);
  v19 = *(_QWORD **)(v0 + 648);
  v20 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 720) = sub_10000B164(v20, (uint64_t)qword_100093E78);
  sub_100012B14(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
  v21 = sub_100012B14(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  v24 = os_log_type_enabled(v22, v23);
  v25 = *(_QWORD **)(v0 + 648);
  if (v24)
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v78[0] = v27;
    *(_DWORD *)v26 = 136315138;
    sub_1000139A8((uint64_t)v25, v0 + 576, &qword_10008FE30);
    sub_100012B14(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
    v28 = sub_100004D20(&qword_10008FE30);
    v29 = String.init<A>(describing:)(v0 + 576, v28);
    v31 = v30;
    *v77 = sub_100059C74(v29, v30, v78);
    v17 = v0 + 296;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v77, v0 + 648, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease(v31);
    sub_100012B14(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
    v18 = (_QWORD **)(v0 + 648);
    sub_100012B14(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Applying restrictions: %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    sub_100012B14(*(_QWORD **)(v0 + 648), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
    sub_100012B14(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
  }

  v32 = *(_QWORD *)(v0 + 648);
  v33 = *sub_1000060F4((_QWORD *)(*(_QWORD *)(v0 + 656) + 112), *(_QWORD *)(*(_QWORD *)(v0 + 656) + 136));
  sub_1000139A8(v32, v17, &qword_10008FE30);
  if (*(_QWORD *)(v0 + 336) == 1)
  {
    v34 = 0;
  }
  else
  {
    v35 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)v17;
    *(_OWORD *)(v0 + 256) = v35;
    *(_OWORD *)(v0 + 272) = *(_OWORD *)(v17 + 32);
    *(_QWORD *)(v0 + 288) = *(_QWORD *)(v17 + 48);
    v34 = (objc_class *)sub_10005E090(*(_QWORD *)(v33 + 32));
  }
  sub_1000603A0(v34);
  v75 = (_OWORD *)(v0 + 408);
  v36 = *v18;
  swift_bridgeObjectRelease(v34);
  v37 = v1[21];
  v38 = v1[22];
  v39 = v1[23];
  v40 = v1[24];
  v42 = v1[25];
  v41 = v1[26];
  v43 = v1[27];
  sub_1000139A8((uint64_t)v36, (uint64_t)(v1 + 21), &qword_10008FE30);
  sub_100012B14(v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
  sub_100012AAC(v37, v38, v39, v40, v42, v41, v43);
  sub_100012AE0(v37, v38, v39, v40, v42, v41, v43);
  if (v41 == 1)
  {
    v44 = 0;
  }
  else
  {
    *(_QWORD *)(v0 + 128) = v37;
    *(_QWORD *)(v0 + 136) = v38;
    *(_QWORD *)(v0 + 144) = v39;
    *(_QWORD *)(v0 + 152) = v40;
    *(_BYTE *)(v0 + 160) = v42;
    *(_QWORD *)(v0 + 168) = v41;
    *(_QWORD *)(v0 + 176) = v43;
    v44 = sub_100010788();
    sub_100012AE0(v37, v38, v39, v40, v42, v41, v43);
  }
  *(_QWORD *)(v0 + 728) = v44;
  v45 = sub_1000139A8(*(_QWORD *)(v0 + 648), (uint64_t)v75, &qword_10008FE30);
  if (*(_QWORD *)(v0 + 448) == 1)
  {
    if (v44)
    {
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Skipping SpringBoard observation: deactivating app restrictions", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

      swift_bridgeObjectRelease(v44);
LABEL_33:
      v57 = *(_QWORD **)(v0 + 648);
      sub_100012B14(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
      v58 = sub_100012B14(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
      v14 = Logger.logObject.getter(v58);
      v59 = static os_log_type_t.info.getter();
      v60 = os_log_type_enabled(v14, v59);
      v61 = *(_QWORD **)(v0 + 648);
      if (!v60)
      {
        sub_100012B14(*(_QWORD **)(v0 + 648), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
        sub_100012B14(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
        goto LABEL_37;
      }
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = swift_slowAlloc(32, -1);
      *(_DWORD *)v16 = 136315138;
      v78[0] = v62;
      sub_1000139A8((uint64_t)v61, v0 + 520, &qword_10008FE30);
      sub_100012B14(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
      v63 = sub_100004D20(&qword_10008FE30);
      v64 = String.init<A>(describing:)(v0 + 520, v63);
      v66 = v65;
      *(_QWORD *)(v0 + 632) = sub_100059C74(v64, v65, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v77, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v66);
      sub_100012B14(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
      sub_100012B14(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
      _os_log_impl((void *)&_mh_execute_header, v14, v59, "Finished applying restrictions: %s", v16, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
LABEL_35:
      swift_slowDealloc(v16, -1, -1);
LABEL_37:

      return (*(uint64_t (**)(void))(v0 + 8))();
    }
LABEL_30:
    v54 = Logger.logObject.getter(v45);
    v55 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Skipping SpringBoard observation: no change in app restrictions", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    goto LABEL_33;
  }
  v49 = *(_OWORD *)(v0 + 424);
  *(_OWORD *)(v0 + 352) = *v75;
  *(_OWORD *)(v0 + 368) = v49;
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 440);
  *(_QWORD *)(v0 + 400) = *(_QWORD *)(v0 + 456);
  v50 = sub_100010788();
  v51 = (uint64_t)v50;
  *(_QWORD *)(v0 + 736) = v50;
  if (v44)
  {
    swift_bridgeObjectRetain(v50);
    v52 = swift_bridgeObjectRetain(v44);
    v53 = sub_100010F9C(v52, v51);
    swift_bridgeObjectRelease(v44);
    if ((v53 & 1) != 0)
    {
      swift_bridgeObjectRelease_n(v51, 2);
      v45 = swift_bridgeObjectRelease(v44);
      goto LABEL_30;
    }
  }
  else
  {
    swift_bridgeObjectRetain(v50);
  }
  v68 = (_QWORD *)swift_task_alloc(dword_10008FC34);
  *(_QWORD *)(v0 + 744) = v68;
  *v68 = v0;
  v68[1] = sub_1000104D8;
  return sub_1000108A0(v51);
}

uint64_t sub_1000104D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 744);
  *(_QWORD *)(*v1 + 752) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 736);
  v5 = *(_QWORD *)(v2 + 656);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v6 = sub_10001074C;
  else
    v6 = sub_100010548;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100010548()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  NSObject *v4;
  os_log_type_t v5;
  _QWORD *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 728);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 736));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD **)(v0 + 648);
  sub_100012B14(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
  v3 = sub_100012B14(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD **)(v0 + 648);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v8;
    *(_DWORD *)v7 = 136315138;
    sub_1000139A8((uint64_t)v6, v0 + 520, &qword_10008FE30);
    sub_100012B14(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AAC);
    v9 = sub_100004D20(&qword_10008FE30);
    v10 = String.init<A>(describing:)(v0 + 520, v9);
    v12 = v11;
    *(_QWORD *)(v0 + 632) = sub_100059C74(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v12);
    sub_100012B14(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
    sub_100012B14(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Finished applying restrictions: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    v13 = *(_QWORD **)(v0 + 648);
    sub_100012B14(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
    sub_100012B14(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AE0);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001074C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 736));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 728));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100010788()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE v11[8];
  uint64_t v12;

  sub_1000139A8(v0 + 40, (uint64_t)v11, &qword_10008FE38);
  sub_1000139A8((uint64_t)v11, (uint64_t)&v12, &qword_10008FE38);
  v1 = v12;
  if (!v12)
    return &_swiftEmptySetSingleton;
  v2 = *(_QWORD *)(v12 + 16);
  if (v2)
  {
    sub_10003FE94(0, v2, 0);
    v3 = (_QWORD *)(v1 + 40);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v6 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v6 >= v7 >> 1)
        sub_10003FE94(v7 > 1, v6 + 1, 1);
      v3 += 2;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      v8 = (char *)&_swiftEmptyArrayStorage[2 * v6];
      *((_QWORD *)v8 + 4) = v5;
      *((_QWORD *)v8 + 5) = v4;
      --v2;
    }
    while (v2);
  }
  v9 = sub_100041530((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  return (void *)v9;
}

uint64_t sub_1000108A0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for ContinuousClock(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100010900, v1, 0);
}

uint64_t sub_100010900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  *(_OWORD *)(v0 + 16) = xmmword_100065EC0;
  v3 = swift_allocObject(&unk_100082BA0, 32, 7);
  *(_QWORD *)(v0 + 72) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v1);
  v4 = swift_bridgeObjectRetain(v2);
  ContinuousClock.init()(v4);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.cat_withTimeout<A, B>(duration:clock:body:)[1]);
  *(_QWORD *)(v0 + 80) = v5;
  v6 = sub_100012A64();
  *v5 = v0;
  v5[1] = sub_1000109D8;
  return static Task<>.cat_withTimeout<A, B>(duration:clock:body:)(v6, v0 + 16, *(_QWORD *)(v0 + 64), &unk_10008FE10, v3, (char *)&type metadata for () + 8, *(_QWORD *)(v0 + 48), v6);
}

uint64_t sub_1000109D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 72);
  v3 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(*v1 + 56);
  v5 = *(_QWORD *)(*v1 + 64);
  v7 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release(v4);
  if (v0)
    v8 = sub_100010AA4;
  else
    v8 = sub_100010A70;
  return swift_task_switch(v8, *(_QWORD *)(v2 + 40), 0);
}

uint64_t sub_100010A70()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100010AA4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100010AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v4 = sub_100004D20(&qword_10008FE20);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004D20(&qword_10008FE28);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100010B68, 0, 0);
}

uint64_t sub_100010B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  if (qword_10008E600 != -1)
    swift_once(&qword_10008E600, sub_100015604);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000B164(v1, (uint64_t)qword_100093E78);
  *(_QWORD *)(v0 + 88) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beginning SpringBoard observation for expected app restriction update", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 24);

  return swift_task_switch(sub_100010C58, v6, 0);
}

uint64_t sub_100010C58()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 152);
  return swift_task_switch(sub_100010C78, 0, 0);
}

uint64_t sub_100010C78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[5];
  CATAsyncStreamMulticaster.makeStream()();
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[13] = v4;
  *v4 = v0;
  v4[1] = sub_100010D30;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v0[8]);
}

uint64_t sub_100010D30()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_100010D84, 0, 0);
}

uint64_t sub_100010D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    goto LABEL_6;
  v2 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 16), 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v16 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = swift_bridgeObjectRetain(v1);
    v8 = Set.description.getter(v7, &type metadata for String, &protocol witness table for String);
    v10 = v9;
    swift_bridgeObjectRelease(v1);
    *(_QWORD *)(v5 + 4) = sub_100059C74(v8, v10, &v16);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Observed SpringBoard app restriction update: %s", (uint8_t *)v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v1, 2);
  }

  v11 = sub_100010F9C(v1, *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(v1);
  if ((v11 & 1) == 0)
  {
    v15 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 104) = v15;
    *v15 = v0;
    v15[1] = sub_100010D30;
    return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, *(_QWORD *)(v0 + 64));
  }
  else
  {
LABEL_6:
    v12 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v12, *(_QWORD *)(v0 + 64));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100010F9C(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t i;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  _QWORD v34[9];

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v31 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v32 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v33 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v32)
      return 1;
    v11 = *(_QWORD *)(v31 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v32)
        return 1;
      v11 = *(_QWORD *)(v31 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v32)
          return 1;
        v11 = *(_QWORD *)(v31 + 8 * v12);
        if (!v11)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v32)
            return 1;
          v11 = *(_QWORD *)(v31 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v33 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)(v34, *(_QWORD *)(a2 + 40));
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v34, v17, v16);
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = v22[1];
    v24 = *v22 == v17 && v23 == v16;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v17, v16, 0) & 1) == 0)
    {
      v25 = ~v19;
      for (i = v20 + 1; ; i = v27 + 1)
      {
        v27 = i & v25;
        if (((*(_QWORD *)(v7 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
          break;
        v28 = (_QWORD *)(v21 + 16 * v27);
        v29 = v28[1];
        v30 = *v28 == v17 && v29 == v16;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v17, v16, 0) & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease(v16);
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease(v16);
    result = v14;
    v3 = v33;
  }
  v13 = v3 + 5;
  if (v3 + 5 >= v32)
    return 1;
  v11 = *(_QWORD *)(v31 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v32)
      return 1;
    v11 = *(_QWORD *)(v31 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_10001123C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100011248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[41] = a5;
  v6[42] = a6;
  v6[39] = a3;
  v6[40] = a4;
  v6[38] = a2;
  return swift_task_switch(sub_100011268, 0, 0);
}

uint64_t sub_100011268()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = *(_QWORD **)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = v1[15];
  v4 = v1[16];
  v5 = (_QWORD *)v1[17];
  v6 = (_QWORD *)v1[18];
  if (v4)
  {
    v7 = *(_QWORD *)(v0 + 304);
    v8 = v3 == v7 && v4 == v2;
    if ((v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, *(_QWORD *)(v0 + 312), v1[15], v1[16], 0) & 1) != 0)
      && (sub_100006568(*(_QWORD **)(v0 + 320), v5) & 1) != 0)
    {
      v10 = *(_QWORD *)(v0 + 320);
      v9 = *(_QWORD **)(v0 + 328);
      v11 = *(_QWORD *)(v0 + 312);
      v12 = sub_100006568(v9, v6);
      swift_bridgeObjectRetain_n(v11, 2);
      swift_bridgeObjectRetain_n(v10, 2);
      swift_bridgeObjectRetain_n(v9, 2);
      sub_100013A34(v3, v4, (uint64_t)v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      if ((v12 & 1) != 0)
      {
        v14 = *(_QWORD *)(v0 + 320);
        v13 = *(_QWORD *)(v0 + 328);
        v15 = *(_QWORD *)(v0 + 312);
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease_n(v15, 2);
        swift_bridgeObjectRelease_n(v14, 2);
        swift_bridgeObjectRelease_n(v13, 2);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }
    else
    {
      v17 = *(_QWORD *)(v0 + 320);
      v16 = *(_QWORD *)(v0 + 328);
      swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 312), 2);
      swift_bridgeObjectRetain_n(v17, 2);
      swift_bridgeObjectRetain_n(v16, 2);
      sub_100013A34(v3, v4, (uint64_t)v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
    }
    v19 = *(_QWORD *)(v0 + 320);
    v18 = *(_QWORD *)(v0 + 328);
    v20 = *(_QWORD *)(v0 + 312);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v18, 2);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 320);
    v21 = *(_QWORD *)(v0 + 328);
    v23 = *(_QWORD *)(v0 + 304);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 312));
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v21);
    sub_100012998(v23, v2, v22, v21);
    sub_100012998(v3, 0, (uint64_t)v5, (uint64_t)v6);
  }
  v24 = *(_QWORD *)(v0 + 336) + 80;
  swift_beginAccess(v24, v0 + 272, 0, 0);
  sub_100013920(v24, v0 + 16);
  v25 = *(_QWORD *)(v0 + 40);
  sub_100012958(v0 + 16);
  if (v25)
  {
    v26 = v0 + 176;
    if (qword_10008E600 != -1)
      swift_once(&qword_10008E600, sub_100015604);
    v28 = *(_QWORD *)(v0 + 320);
    v27 = *(_QWORD *)(v0 + 328);
    v29 = *(_QWORD *)(v0 + 312);
    v30 = type metadata accessor for Logger(0);
    sub_10000B164(v30, (uint64_t)qword_100093E78);
    swift_bridgeObjectRetain_n(v29, 2);
    swift_bridgeObjectRetain_n(v28, 2);
    v31 = swift_bridgeObjectRetain_n(v27, 2);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter();
    v34 = os_log_type_enabled(v32, v33);
    v36 = *(_QWORD *)(v0 + 320);
    v35 = *(_QWORD *)(v0 + 328);
    v37 = *(_QWORD *)(v0 + 312);
    if (v34)
    {
      v38 = *(_QWORD *)(v0 + 304);
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = swift_slowAlloc(32, -1);
      v40 = v70;
      *(_DWORD *)v39 = 136446210;
      *(_QWORD *)(v0 + 216) = v38;
      *(_QWORD *)(v0 + 224) = v37;
      *(_QWORD *)(v0 + 232) = v36;
      *(_QWORD *)(v0 + 240) = v35;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v35);
      v41 = String.init<A>(describing:)(v0 + 216, &type metadata for AEASpringBoardHomeScreenConfiguration);
      v43 = v42;
      *(_QWORD *)(v0 + 296) = sub_100059C74(v41, v42, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease_n(v37, 2);
      swift_bridgeObjectRelease_n(v36, 2);
      swift_bridgeObjectRelease_n(v35, 2);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Updating home screen with configuration: %{public}s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      v44 = v40;
      v26 = v0 + 176;
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 312), 2);
      swift_bridgeObjectRelease_n(v36, 2);
      swift_bridgeObjectRelease_n(v35, 2);
    }

    sub_100013920(*(_QWORD *)(v0 + 336) + 80, v26);
    if (*(_QWORD *)(v0 + 200))
    {
      v59 = *(_QWORD *)(v0 + 320);
      v58 = *(_QWORD *)(v0 + 328);
      v60 = *(_QWORD *)(v0 + 312);
      sub_100008380(v26, v0 + 136);
      sub_100012958(v26);
      sub_1000060F4((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v61 = (_QWORD *)swift_task_alloc(dword_1000906E4);
      *(_QWORD *)(v0 + 384) = v61;
      *v61 = v0;
      v61[1] = sub_100011D1C;
      return sub_10001EAA8(*(_QWORD *)(v0 + 304), v60, v59, v58);
    }
    sub_100012958(v26);
    v63 = *(_QWORD *)(v0 + 328);
    v62 = *(_QWORD **)(v0 + 336);
    v64 = *(_QWORD *)(v0 + 312);
    v65 = *(_QWORD *)(v0 + 320);
    v66 = v62[15];
    v67 = v62[16];
    v68 = v62[17];
    v69 = v62[18];
    v62[15] = *(_QWORD *)(v0 + 304);
    v62[16] = v64;
    v62[17] = v65;
    v62[18] = v63;
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v63);
    sub_100012998(v66, v67, v68, v69);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (qword_10008E600 != -1)
    swift_once(&qword_10008E600, sub_100015604);
  v45 = type metadata accessor for Logger(0);
  v46 = sub_10000B164(v45, (uint64_t)qword_100093E78);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Beginning home screen configuration session for the first time", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }
  v50 = *(_QWORD *)(v0 + 336);

  v52 = *(_QWORD *)(v50 + 56);
  v51 = *(_QWORD *)(v50 + 64);
  v53 = swift_allocObject(&unk_100082BF0, 32, 7);
  *(_QWORD *)(v0 + 344) = v53;
  *(_QWORD *)(v53 + 16) = v52;
  *(_QWORD *)(v53 + 24) = v51;
  v54 = type metadata accessor for AEAConcreteSpringBoardPrimitives.HomeScreenConfigurationSession();
  *(_QWORD *)(v0 + 352) = v54;
  swift_allocObject(v54, 24, 7);
  v55 = dword_1000907AC;
  swift_retain(v51);
  swift_retain(v53);
  v56 = (_QWORD *)swift_task_alloc(v55);
  *(_QWORD *)(v0 + 360) = v56;
  *v56 = v0;
  v56[1] = sub_1000118D8;
  return sub_10001E7D0((uint64_t)sub_10001398C, v53);
}

uint64_t sub_1000118D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 360);
  *(_QWORD *)(*v2 + 368) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100011CE8;
  }
  else
  {
    *(_QWORD *)(v4 + 376) = a1;
    v6 = sub_10001194C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10001194C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 352);
  *(_QWORD *)(v0 + 88) = &off_100083CC8;
  swift_release(v2);
  *(_QWORD *)(v0 + 56) = v1;
  v4 = v0 + 176;
  sub_1000139A8(v0 + 56, v0 + 96, &qword_10008FE00);
  swift_beginAccess(v3 + 80, v0 + 248, 33, 0);
  sub_1000139EC(v0 + 96, v3 + 80);
  swift_endAccess(v0 + 248);
  if (qword_10008E600 != -1)
    swift_once(&qword_10008E600, sub_100015604);
  v6 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 312);
  v8 = type metadata accessor for Logger(0);
  sub_10000B164(v8, (uint64_t)qword_100093E78);
  swift_bridgeObjectRetain_n(v7, 2);
  swift_bridgeObjectRetain_n(v6, 2);
  v9 = swift_bridgeObjectRetain_n(v5, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  v12 = os_log_type_enabled(v10, v11);
  v14 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 328);
  v15 = *(_QWORD *)(v0 + 312);
  if (v12)
  {
    v16 = *(_QWORD *)(v0 + 304);
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v18 = v36;
    *(_DWORD *)v17 = 136446210;
    *(_QWORD *)(v0 + 216) = v16;
    *(_QWORD *)(v0 + 224) = v15;
    *(_QWORD *)(v0 + 232) = v14;
    *(_QWORD *)(v0 + 240) = v13;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v13);
    v19 = String.init<A>(describing:)(v0 + 216, &type metadata for AEASpringBoardHomeScreenConfiguration);
    v21 = v20;
    *(_QWORD *)(v0 + 296) = sub_100059C74(v19, v20, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease_n(v13, 2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Updating home screen with configuration: %{public}s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v22 = v18;
    v4 = v0 + 176;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 312), 2);
    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease_n(v13, 2);
  }

  sub_100013920(*(_QWORD *)(v0 + 336) + 80, v4);
  if (*(_QWORD *)(v0 + 200))
  {
    v24 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 328);
    v25 = *(_QWORD *)(v0 + 312);
    sub_100008380(v4, v0 + 136);
    sub_100012958(v4);
    sub_1000060F4((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v26 = (_QWORD *)swift_task_alloc(dword_1000906E4);
    *(_QWORD *)(v0 + 384) = v26;
    *v26 = v0;
    v26[1] = sub_100011D1C;
    return sub_10001EAA8(*(_QWORD *)(v0 + 304), v25, v24, v23);
  }
  else
  {
    sub_100012958(v4);
    v29 = *(_QWORD *)(v0 + 328);
    v28 = *(_QWORD **)(v0 + 336);
    v30 = *(_QWORD *)(v0 + 312);
    v31 = *(_QWORD *)(v0 + 320);
    v32 = v28[15];
    v33 = v28[16];
    v34 = v28[17];
    v35 = v28[18];
    v28[15] = *(_QWORD *)(v0 + 304);
    v28[16] = v30;
    v28[17] = v31;
    v28[18] = v29;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v29);
    sub_100012998(v32, v33, v34, v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100011CE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 344));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100011E08;
  else
    v3 = sub_100011D80;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100011D80()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100004D60((_QWORD *)(v0 + 136));
  v2 = *(_QWORD *)(v0 + 328);
  v1 = *(_QWORD **)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 320);
  v5 = v1[15];
  v6 = v1[16];
  v7 = v1[17];
  v8 = v1[18];
  v1[15] = *(_QWORD *)(v0 + 304);
  v1[16] = v3;
  v1[17] = v4;
  v1[18] = v2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  sub_100012998(v5, v6, v7, v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011E08()
{
  uint64_t v0;

  sub_100004D60((_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011E3C(void (*a1)(void), uint64_t a2, char a3)
{
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v5 = sub_1000121A0();
  v6 = swift_allocError(&type metadata for AEARestrictionsActionError, v5, 0, 0);
  *v7 = a3;
  a1();
  return swift_errorRelease(v6);
}

uint64_t sub_100011E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 184) = a2;
  return swift_task_switch(sub_100011EAC, 0, 0);
}

uint64_t sub_100011EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 184) + 80;
  swift_beginAccess(v1, v0 + 136, 0, 0);
  sub_100013920(v1, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_1000084DC((__int128 *)(v0 + 56), v0 + 16);
    if (qword_10008E600 != -1)
      swift_once(&qword_10008E600, sub_100015604);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10000B164(v2, (uint64_t)qword_100093E78);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ending home screen configuration session", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    *(_QWORD *)(v0 + 128) = 0;
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    swift_beginAccess(v1, v0 + 160, 33, 0);
    sub_1000139EC(v0 + 96, v1);
    swift_endAccess(v0 + 160);
    sub_1000060F4((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v7 = (_QWORD *)swift_task_alloc(dword_1000906EC);
    *(_QWORD *)(v0 + 192) = v7;
    *v7 = v0;
    v7[1] = sub_100012068;
    return sub_10001ED18();
  }
  else
  {
    sub_100012958(v0 + 56);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100012068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100012100;
  else
    v3 = sub_1000120CC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000120CC()
{
  uint64_t v0;

  sub_100004D60((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100012100()
{
  uint64_t v0;

  sub_100004D60((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100012134()
{
  _QWORD *v0;

  sub_100004D60(v0 + 2);
  swift_release(v0[8]);
  swift_release(v0[9]);
  sub_100012958((uint64_t)(v0 + 10));
  sub_100012998(v0[15], v0[16], v0[17], v0[18]);
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t type metadata accessor for AEAHomeScreenConfigurer()
{
  return objc_opt_self(_TtC15assessmentagentP33_A8D4301921A0F4CD295D3AB81CF9BF6F23AEAHomeScreenConfigurer);
}

unint64_t sub_1000121A0()
{
  unint64_t result;

  result = qword_10008FDF8;
  if (!qword_10008FDF8)
  {
    result = swift_getWitnessTable(&unk_100066068, &type metadata for AEARestrictionsActionError);
    atomic_store(result, (unint64_t *)&qword_10008FDF8);
  }
  return result;
}

uint64_t sub_1000121E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  unint64_t v25;
  int64_t v26;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) + 20));
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v26 = (unint64_t)(v3 + 63) >> 6;
  v6 = AECalculatorBundleIdentifier;
  result = swift_bridgeObjectRetain(v1);
  v8 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 40 * i);
    v16 = *v14;
    v15 = v14[1];
    v17 = (unsigned __int8 *)(*(_QWORD *)(v1 + 56) + 16 * i);
    v18 = *v17;
    v19 = *((_QWORD *)v17 + 1);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v16 == v20 && v15 == v21)
    {
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v15);
LABEL_27:
      v25 = sub_1000127F8(v18, v19);
      swift_release(v1);
      swift_bridgeObjectRelease(v19);
      return v25 & 0xFFFFFFFFFFFFLL;
    }
    v23 = v21;
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, v20, v21, 0);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease(v23);
    if ((v24 & 1) != 0)
      goto LABEL_27;
    result = swift_bridgeObjectRelease(v19);
    if (v5)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v11 >= v26)
      goto LABEL_28;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v26)
        goto LABEL_28;
      v12 = *(_QWORD *)(v2 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v26)
          goto LABEL_28;
        v12 = *(_QWORD *)(v2 + 8 * v8);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v5 = (v12 - 1) & v12;
  }
  v13 = v11 + 3;
  if (v13 >= v26)
  {
LABEL_28:
    swift_release(v1);
    return 3;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v26)
      goto LABEL_28;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_18;
  }
LABEL_30:
  __break(1u);
  return result;
}

_QWORD *sub_100012400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _BYTE v15[48];

  v1 = sub_100004D20(&qword_100093360);
  inited = swift_initStackObject(v1, v15);
  *(_OWORD *)(inited + 16) = xmmword_100065EB0;
  v3 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(inited + 32) = *(_QWORD *)(v0 + 8);
  *(_QWORD *)(inited + 40) = v3;
  v4 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) + 20));
  swift_bridgeObjectRetain(v3);
  v5 = swift_bridgeObjectRetain(v4);
  v6 = sub_10000D04C(v5);
  swift_bridgeObjectRelease(v4);
  sub_10003DC30((uint64_t)v6);
  v7 = *(_QWORD *)(inited + 16);
  if (v7)
  {
    sub_10003FEB0(0, v7, 0);
    v8 = (_QWORD *)(inited + 40);
    do
    {
      v10 = *(v8 - 1);
      v9 = *v8;
      v11 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v8);
      if (v11 >= v12 >> 1)
        sub_10003FEB0(v12 > 1, v11 + 1, 1);
      v8 += 2;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v11];
      v13[4] = v10;
      v13[5] = v9;
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease(inited);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100012564()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v26;
  char v27[48];

  if (qword_10008E710 != -1)
    goto LABEL_19;
  while (1)
  {
    v1 = qword_100094078;
    v2 = sub_100004D20(&qword_100093360);
    inited = swift_initStackObject(v2, v27);
    *(_OWORD *)(inited + 16) = xmmword_100065EB0;
    v4 = v0[2];
    *(_QWORD *)(inited + 32) = v0[1];
    *(_QWORD *)(inited + 40) = v4;
    v5 = *(_QWORD *)((char *)v0 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) + 20));
    swift_bridgeObjectRetain(v1);
    swift_bridgeObjectRetain(v4);
    v6 = swift_bridgeObjectRetain(v5);
    v7 = sub_10000D04C(v6);
    swift_bridgeObjectRelease(v5);
    sub_10003DC30((uint64_t)v7);
    v8 = sub_100041530(inited);
    swift_bridgeObjectRelease(inited);
    if (*(_QWORD *)(v8 + 16) <= *(_QWORD *)(v1 + 16) >> 3)
      break;
    v9 = sub_100012CE0(v8, v1);
    swift_bridgeObjectRelease(v8);
    v10 = v9[2];
    if (!v10)
      goto LABEL_14;
LABEL_4:
    sub_10003FEB0(0, v10, 0);
    v0 = _swiftEmptyArrayStorage;
    v11 = sub_10004D54C(v9);
    v13 = v12;
    v15 = v14 & 1;
    while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *((_BYTE *)v9 + 32))
    {
      if (((*(unint64_t *)((char *)v9 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v11) & 1) == 0)
        goto LABEL_17;
      if (*((_DWORD *)v9 + 9) != (_DWORD)v13)
        goto LABEL_18;
      v26 = v15;
      v16 = (uint64_t *)(v9[6] + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      v20 = _swiftEmptyArrayStorage[2];
      v19 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v17);
      if (v20 >= v19 >> 1)
        sub_10003FEB0(v19 > 1, v20 + 1, 1);
      _swiftEmptyArrayStorage[2] = v20 + 1;
      v21 = &_swiftEmptyArrayStorage[2 * v20];
      v21[4] = v18;
      v21[5] = v17;
      v22 = sub_10004D5F0(v11, v13, v26 & 1, v9);
      v11 = v22;
      v13 = v23;
      v15 = v24 & 1;
      if (!--v10)
      {
        sub_100013A70(v22, v23, v15);
        swift_bridgeObjectRelease(v9);
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    swift_once(&qword_10008E710, sub_100060A1C);
  }
  sub_100012B4C(v8);
  swift_bridgeObjectRelease(v8);
  v9 = (unint64_t *)v1;
  v10 = *(_QWORD *)(v1 + 16);
  if (v10)
    goto LABEL_4;
LABEL_14:
  swift_bridgeObjectRelease(v9);
  return _swiftEmptyArrayStorage;
}

unint64_t sub_1000127F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorUnitConversionInputModeEnabledKey);
  v6 = v5;
  v7 = sub_100018A8C(v4, v5, a1, a2);
  swift_bridgeObjectRelease(v6);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorMathPaperModeEnabledKey);
  v10 = v9;
  LOBYTE(v6) = sub_100018A8C(v8, v9, a1, a2);
  swift_bridgeObjectRelease(v10);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorScientificModeEnabledKey);
  v13 = v12;
  LOBYTE(v10) = sub_100018A8C(v11, v12, a1, a2);
  swift_bridgeObjectRelease(v13);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorKeyboardMathSolvingEnabledKey);
  v16 = v15;
  v17 = sub_100018A8C(v14, v15, a1, a2);
  swift_bridgeObjectRelease(v16);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorMathPaperSolvingEnabledKey);
  v20 = v19;
  v21 = sub_100018A8C(v18, v19, a1, a2);
  swift_bridgeObjectRelease(v20);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorSquareRootOnBasicForcedKey);
  v24 = v23;
  LOBYTE(a2) = sub_100018A8C(v22, v23, a1, a2);
  swift_bridgeObjectRelease(v24);
  return ((unint64_t)v21 << 32) | ((unint64_t)a2 << 40) | ((unint64_t)v17 << 24) | ((unint64_t)v10 << 16) | ((unint64_t)v6 << 8) | v7;
}

uint64_t sub_100012958(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20(&qword_10008FE00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100012998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1000129D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100012A00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10008FE0C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100014AC4;
  return sub_100010AD8(a1, v5, v4);
}

unint64_t sub_100012A64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10008FE18;
  if (!qword_10008FE18)
  {
    v1 = type metadata accessor for ContinuousClock(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ContinuousClock, v1);
    atomic_store(result, (unint64_t *)&qword_10008FE18);
  }
  return result;
}

uint64_t sub_100012AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a6 != 1)
  {
    swift_bridgeObjectRetain(a7);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

uint64_t sub_100012AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a6 != 1)
  {
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

_QWORD *sub_100012B14(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t sub_100012B4C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(result);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v7)
      return swift_release(v2);
    v17 = *(_QWORD *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v7)
        return swift_release(v2);
      v17 = *(_QWORD *)(v3 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v7)
          return swift_release(v2);
        v17 = *(_QWORD *)(v3 + 8 * v8);
        if (!v17)
        {
          v8 = v16 + 3;
          if (v16 + 3 >= v7)
            return swift_release(v2);
          v17 = *(_QWORD *)(v3 + 8 * v8);
          if (!v17)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_100025920(v12, v13);
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    result = swift_bridgeObjectRelease(v15);
  }
  v18 = v16 + 4;
  if (v18 >= v7)
    return swift_release(v2);
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v7)
      return swift_release(v2);
    v17 = *(_QWORD *)(v3 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t *sub_100012CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v41 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v40 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v40)
          goto LABEL_47;
        v13 = *(_QWORD *)(v41 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v40)
            goto LABEL_47;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v40)
              goto LABEL_47;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v40)
                goto LABEL_47;
              v13 = *(_QWORD *)(v41 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_47:
                  sub_100013A7C(a1);
                  return (unint64_t *)v2;
                }
                v13 = *(_QWORD *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v40)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v41 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v42, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      v36 = sub_100013148((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_100013A7C(v43);
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, (const void *)(v2 + 56), v35);
      v36 = sub_100013148((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_100013A7C(v43);
      swift_slowDealloc(v37, -1, -1);
    }
    return v36;
  }
  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t *sub_100013148(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v39;
  unint64_t *v40;
  _QWORD v41[9];
  uint64_t v42;

  v7 = *(_QWORD *)(a3 + 16);
  v40 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v42 = a3 + 56;
  while (2)
  {
    v39 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_45;
          }
          v14 = (unint64_t)(a5[2] + 64) >> 6;
          v15 = a5[3];
          if (v13 >= v14)
            goto LABEL_43;
          v16 = a5[1];
          v17 = *(_QWORD *)(v16 + 8 * v13);
          if (!v17)
          {
            v15 = v9 + 1;
            if (v9 + 2 >= v14)
              goto LABEL_43;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              v13 = v9 + 2;
            }
            else
            {
              v15 = v9 + 2;
              if (v9 + 3 >= v14)
                goto LABEL_43;
              v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                v13 = v9 + 3;
              }
              else
              {
                v13 = v9 + 4;
                v15 = v9 + 3;
                if (v9 + 4 >= v14)
                  goto LABEL_43;
                v17 = *(_QWORD *)(v16 + 8 * v13);
                if (!v17)
                {
                  v15 = v14 - 1;
                  v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    v17 = *(_QWORD *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }
LABEL_43:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain(a3);
                  return (unint64_t *)sub_100026138(v40, a2, v39, a3);
                }
              }
            }
          }
LABEL_21:
          v11 = (v17 - 1) & v17;
          v12 = __clz(__rbit64(v17)) + (v13 << 6);
          v9 = v13;
        }
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v41, *(_QWORD *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v41, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v42 + 8 * (v24 >> 6))) != 0)
          break;
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }
      v27 = *(_QWORD *)(a3 + 48);
      v28 = (_QWORD *)(v27 + 16 * v24);
      v29 = v28[1];
      v30 = *v28 == v21 && v29 == v20;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) == 0)
      {
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v42 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease(v20);
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_29;
          }
        }
        goto LABEL_3;
      }
      result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_29:
      v31 = v40[v25];
      v40[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v39 - 1;
    if (__OFSUB__(v39, 1))
    {
LABEL_45:
      __break(1u);
      return result;
    }
    if (v39 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_100013424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;

  v30 = type metadata accessor for AEAConcreteManagedConfigurationPrimitives();
  v31 = &off_100087470;
  v29[0] = a3;
  v27 = type metadata accessor for AEAConcreteSpringBoardPrimitives();
  v28 = &off_100083CF0;
  v26[0] = a4;
  v12 = type metadata accessor for AEARestrictionsApplicator();
  v13 = swift_allocObject(v12, 224, 15);
  v14 = sub_100013D84((uint64_t)v29, v30);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_100013D84((uint64_t)v26, v27);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = *v16;
  v23 = *v20;
  v24 = sub_100013DAC(a1, a2, a5, a6, v13);
  swift_release(v22);
  swift_release(v23);
  sub_100004D60(v26);
  sub_100004D60(v29);
  return v24;
}

uint64_t sub_1000135A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14)
{
  *(_QWORD *)(a14 + 56) = type metadata accessor for AEAConcreteSpringBoardPrimitives();
  *(_QWORD *)(a14 + 64) = &off_100083CF0;
  *(_QWORD *)(a14 + 32) = a4;
  *(_QWORD *)(a14 + 96) = type metadata accessor for AEAConcreteManagedConfigurationPrimitives();
  *(_QWORD *)(a14 + 104) = &off_100087470;
  *(_QWORD *)(a14 + 72) = a3;
  *(_QWORD *)(a14 + 176) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a14 + 184) = 0;
  *(_OWORD *)(a14 + 192) = 0u;
  *(_OWORD *)(a14 + 208) = 0u;
  *(_QWORD *)(a14 + 16) = a1;
  *(_QWORD *)(a14 + 24) = a2;
  *(_QWORD *)(a14 + 112) = a6;
  *(_QWORD *)(a14 + 120) = a7;
  *(_QWORD *)(a14 + 128) = a8;
  *(_QWORD *)(a14 + 136) = a9;
  *(_QWORD *)(a14 + 144) = a5;
  *(_QWORD *)(a14 + 152) = a10;
  *(_QWORD *)(a14 + 160) = a11;
  *(_BYTE *)(a14 + 168) = a12;
  *(_BYTE *)(a14 + 169) = a13;
  return a14;
}

uint64_t sub_100013690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, char a11, char a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  _UNKNOWN **v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;

  v31 = a7;
  v32 = a8;
  v30 = a6;
  v29 = a9;
  v37 = type metadata accessor for AEAConcreteManagedConfigurationPrimitives();
  v38 = &off_100087470;
  v36[0] = a3;
  v34 = type metadata accessor for AEAConcreteSpringBoardPrimitives();
  v35 = &off_100083CF0;
  v33[0] = a4;
  v17 = type metadata accessor for AEARestrictionsAssertion();
  v18 = swift_allocObject(v17, 224, 7);
  v19 = sub_100013D84((uint64_t)v36, v37);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_100013D84((uint64_t)v33, v34);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = sub_1000135A4(a1, a2, *v21, *v25, a5, v30, v31, v32, v29, *((uint64_t *)&v29 + 1), a10, a11, a12, v18);
  sub_100004D60(v33);
  sub_100004D60(v36);
  return v27;
}

uint64_t sub_100013840(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100013874()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000138B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = swift_task_alloc(dword_10008FE44);
  v4 = *(_OWORD *)(v0 + 24);
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10000CB20;
  *(_OWORD *)(v3 + 312) = v4;
  *(_OWORD *)(v3 + 328) = v5;
  *(_QWORD *)(v3 + 304) = v2;
  return swift_task_switch(sub_100011268, 0, 0);
}

uint64_t sub_100013920(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_10008FE00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013968()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001398C()
{
  uint64_t v0;

  return sub_100011E3C(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), 1);
}

uint64_t sub_1000139A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004D20(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000139EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_10008FE00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100013A70(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_100013A7C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100013A84()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100013AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10000E6B0(a1, a2, a3, v3);
}

uint64_t sub_100013AB0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000521E0(a1, *(void (**)(uint64_t, uint64_t (*)(uint64_t, char), uint64_t))(v1 + 16));
}

uint64_t sub_100013AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  v7 = v0 + v4 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 16));
  v8 = v7 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v12 + 20) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v1 + 20)));
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v3 | 7);
}

uint64_t sub_100013C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013C6C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_10008FE64);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10000CB20;
  return sub_10000E85C(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100013D28()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10008FE74);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100014AC4;
  v2[23] = v0;
  return swift_task_switch(sub_100011EAC, 0, 0);
}

uint64_t sub_100013D84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100013DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  char *v14;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  swift_defaultActor_initialize(a5);
  *(_QWORD *)(a5 + 200) = 0;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_OWORD *)(a5 + 168) = 0u;
  *(_OWORD *)(a5 + 208) = xmmword_100065EA0;
  v10 = type metadata accessor for AEAConcreteManagedConfigurationRestrictionsApplicator();
  swift_allocObject(v10, 40, 7);
  swift_bridgeObjectRetain(a2);
  v11 = sub_10005DC00(a1, a2);
  v17 = v10;
  v18 = &off_100087460;
  swift_bridgeObjectRelease(a2);
  *(_QWORD *)&v16 = v11;
  sub_1000084DC(&v16, a5 + 112);
  v12 = swift_allocObject(&unk_100082C90, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  v13 = objc_allocWithZone((Class)type metadata accessor for AEAConcreteSpringBoardPrimitives.AppRestrictionsMonitoringSession());
  swift_retain(a4);
  swift_retain(v12);
  v14 = sub_10001E390((uint64_t)sub_100013EE8, v12);
  swift_release(v12);
  swift_release(a4);
  *(_QWORD *)(a5 + 152) = v14;
  *(_QWORD *)(a5 + 160) = &off_100083CE0;
  return a5;
}

uint64_t sub_100013EE8()
{
  uint64_t v0;

  return sub_100011E3C(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), 0);
}

_BYTE *initializeBufferWithCopyOfBuffer for AEARestrictionsActionError(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AEARestrictionsActionError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARestrictionsActionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100013FEC + 4 * byte_100065ED5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100014020 + 4 * byte_100065ED0[v4]))();
}

uint64_t sub_100014020(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100014028(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100014030);
  return result;
}

uint64_t sub_10001403C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100014044);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100014048(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100014050(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001405C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100014064(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AEARestrictionsActionError()
{
  return &type metadata for AEARestrictionsActionError;
}

unint64_t sub_100014084()
{
  unint64_t result;

  result = qword_10008FE80;
  if (!qword_10008FE80)
  {
    result = swift_getWitnessTable(&unk_10006610C, &type metadata for AEARestrictionsActionError);
    atomic_store(result, (unint64_t *)&qword_10008FE80);
  }
  return result;
}

uint64_t destroy for AEARestrictionsActivation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  sub_100004D60(a1 + 5);
  sub_100004D60(a1 + 10);
  swift_release(a1[15]);
  swift_release(a1[17]);
  return swift_release(a1[19]);
}

uint64_t initializeWithCopy for AEARestrictionsActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = a2 + 40;
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v9(a1 + 40, v6, v8);
  v10 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 80, a2 + 80);
  v11 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v11;
  v12 = *(_QWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 136) = v14;
  *(_QWORD *)(a1 + 152) = v12;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  swift_retain(v11);
  swift_retain(v14);
  swift_retain(v12);
  return a1;
}

uint64_t assignWithCopy for AEARestrictionsActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  sub_10000C54C((_QWORD *)(a1 + 40), (_QWORD *)(a2 + 40));
  sub_10000C54C((_QWORD *)(a1 + 80), (_QWORD *)(a2 + 80));
  v8 = *(_QWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 136);
  v11 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 152);
  v13 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  swift_retain(v12);
  swift_release(v13);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  return a1;
}

__n128 initializeWithTake for AEARestrictionsActivation(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for AEARestrictionsActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  sub_100004D60((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_100004D60((_QWORD *)(a1 + 80));
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release(v10);
  v11 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_release(v11);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARestrictionsActivation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 162))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARestrictionsActivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 160) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 162) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 162) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEARestrictionsActivation()
{
  return &type metadata for AEARestrictionsActivation;
}

uint64_t sub_1000144AC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000144D8()
{
  uint64_t v0;

  sub_10000DA48(*(void **)(v0 + 16));
}

uint64_t sub_1000144E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100014510(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEARestrictionsActivation(a2, a1);
  return a2;
}

_QWORD *sub_100014544(_QWORD *a1)
{
  destroy for AEARestrictionsActivation(a1);
  return a1;
}

uint64_t sub_100014570()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[7]);
  sub_100004D60(v0 + 8);
  swift_release(v0[14]);
  swift_release(v0[16]);
  return swift_deallocObject(v0, 136, 7);
}

uint64_t destroy for AEARestrictionsRecoveryDeactivation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[5]);
  sub_100004D60(a1 + 6);
  swift_release(a1[12]);
  return swift_release(a1[14]);
}

uint64_t initializeWithCopy for AEARestrictionsRecoveryDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  __int128 v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a2 + 48;
  v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v9(a1 + 48, v6, v8);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  swift_retain(v11);
  swift_retain(v10);
  return a1;
}

uint64_t assignWithCopy for AEARestrictionsRecoveryDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  sub_10000C54C((_QWORD *)(a1 + 48), (_QWORD *)(a2 + 48));
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_retain(v8);
  swift_release(v9);
  v11 = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 112);
  v12 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  swift_retain(v10);
  swift_release(v12);
  return a1;
}

__n128 initializeWithTake for AEARestrictionsRecoveryDeactivation(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for AEARestrictionsRecoveryDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  sub_100004D60((_QWORD *)(a1 + 48));
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARestrictionsRecoveryDeactivation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARestrictionsRecoveryDeactivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEARestrictionsRecoveryDeactivation()
{
  return &type metadata for AEARestrictionsRecoveryDeactivation;
}

uint64_t destroy for AEARestrictionsDeactivation(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for AEARestrictionsDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for AEARestrictionsDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for AEARestrictionsDeactivation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AEARestrictionsDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARestrictionsDeactivation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARestrictionsDeactivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEARestrictionsDeactivation()
{
  return &type metadata for AEARestrictionsDeactivation;
}

ValueMetadata *type metadata accessor for AEAOSTransactionActivation()
{
  return &type metadata for AEAOSTransactionActivation;
}

uint64_t sub_100014AFC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 24);
  return swift_task_switch(sub_100014B18, 0, 0);
}

uint64_t sub_100014B18()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), "releaseTransaction");
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_100014B70, 0, 0);
}

uint64_t sub_100014B70()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  _QWORD *v3;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = objc_msgSend(*(id *)(v0 + 24), "acquireAssessmentModeTransaction");
  v1[3] = &type metadata for AEAOSTransactionDeactivation;
  v1[4] = &off_100083258;
  v3 = (_QWORD *)swift_allocObject(&unk_1000831A0, 48, 7);
  *v1 = v3;
  v3[2] = 0xD00000000000002ALL;
  v3[3] = 0x800000010006C100;
  v3[4] = 5;
  v3[5] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014C08()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

ValueMetadata *type metadata accessor for AEAOSTransactionDeactivation()
{
  return &type metadata for AEAOSTransactionDeactivation;
}

_QWORD *sub_100014C4C(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD v20[2];
  _QWORD *v21;

  v4 = v3;
  v18 = a1;
  v19 = a2;
  v17 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v21 = _swiftEmptyArrayStorage;
    sub_10003FF08(0, v9, 0);
    v10 = v21;
    v11 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v12 = *v11;
      v20[0] = *(v11 - 1);
      v20[1] = v12;
      swift_bridgeObjectRetain(v12);
      v18(v20);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease(v12);
      v21 = v10;
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_10003FF08(v13 > 1, v14 + 1, 1);
        v10 = v21;
      }
      v11 += 2;
      v10[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, v8, v17);
      if (!--v9)
        return v10;
    }
    swift_release(v10);
    swift_bridgeObjectRelease(v12);
  }
  return v10;
}

uint64_t sub_100014DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  NSURL *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v22;
  id v23;

  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.deletingLastPathComponent()(v11);
  v14 = *(void **)(v4 + 16);
  URL._bridgeToObjectiveC()(v15);
  v17 = v16;
  v23 = 0;
  LODWORD(v14) = objc_msgSend(v14, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v16, 1, 0, &v23);

  v18 = v23;
  if ((_DWORD)v14)
  {
    v19 = v23;
    Data.write(to:options:)(a3, a4, a1, a2);
  }
  else
  {
    v20 = v23;
    _convertNSErrorToError(_:)(v18);

    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

id sub_100014F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSURL *v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  id v10;
  id result;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  id v17;

  v1 = type metadata accessor for CocoaError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (NSURL *)((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (char *)((char *)&v17 - (char *)v4);
  v6 = *(void **)(v0 + 16);
  URL._bridgeToObjectiveC()(v4);
  v8 = v7;
  v17 = 0;
  v9 = objc_msgSend(v6, "removeItemAtURL:error:", v7, &v17);

  v10 = v17;
  if (v9)
    return v17;
  v12 = v17;
  v13 = _convertNSErrorToError(_:)(v10);

  swift_willThrow();
  v14 = swift_errorRetain(v13);
  static CocoaError.fileNoSuchFile.getter(v14);
  v15 = sub_1000154E4();
  v16 = static _ErrorCodeProtocol.~= infix(_:_:)(v5, v13, v1, v15);
  swift_errorRelease(v13);
  result = (id)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  if ((v16 & 1) != 0)
    return (id)swift_errorRelease(v13);
  return result;
}

_QWORD *sub_100015088(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[4];

  v3 = *(void **)(v1 + 16);
  URL.path.getter();
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(v3, "enumeratorAtPath:", v6);

  if (!v7)
    return _swiftEmptyArrayStorage;
  v8 = objc_msgSend(v7, "allObjects");

  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, (char *)&type metadata for Any + 8);
  v10 = sub_1000151AC(v9);
  v11 = swift_bridgeObjectRelease(v9);
  if (!v10)
    return _swiftEmptyArrayStorage;
  __chkstk_darwin(v11);
  v14[2] = a1;
  v12 = sub_100014C4C((void (*)(_QWORD *))sub_100015478, (uint64_t)v14, (uint64_t)v10);
  swift_bridgeObjectRelease(v10);
  return v12;
}

_QWORD *sub_1000151AC(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 16);
  v14 = _swiftEmptyArrayStorage;
  sub_10003FE94(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_1000154A8(i, (uint64_t)v13);
      if (!swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, &type metadata for String, 6))break;
      v5 = v11;
      v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10003FE94(0, v3[2] + 1, 1);
        v3 = v14;
      }
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_10003FE94(v7 > 1, v8 + 1, 1);
        v3 = v14;
      }
      v3[2] = v8 + 1;
      v9 = &v3[2 * v8];
      v9[4] = v5;
      v9[5] = v6;
      if (!--v2)
        return v3;
    }
    v11 = 0;
    v12 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  return v3;
}

uint64_t sub_1000152F0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for AEAConcreteFileSystemPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent31AEAConcreteFileSystemPrimitives);
}

uint64_t sub_100015334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues;
  v4 = type metadata accessor for URLResourceValues(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000153AC()
{
  return type metadata accessor for AEAConcreteFileSystemPrimitives.ConcreteURLResourceValues(0);
}

uint64_t type metadata accessor for AEAConcreteFileSystemPrimitives.ConcreteURLResourceValues(uint64_t a1)
{
  uint64_t result;

  result = qword_10008FFC8;
  if (!qword_10008FFC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAConcreteFileSystemPrimitives.ConcreteURLResourceValues);
  return result;
}

uint64_t sub_1000153F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for URLResourceValues(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 2, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_100015478(_QWORD *a1)
{
  return URL.appendingPathComponent(_:)(*a1, a1[1]);
}

uint64_t sub_1000154A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1000154E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000900B0;
  if (!qword_1000900B0)
  {
    v1 = type metadata accessor for CocoaError.Code(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CocoaError.Code, v1);
    atomic_store(result, (unint64_t *)&qword_1000900B0);
  }
  return result;
}

uint64_t sub_10001552C(uint64_t a1)
{
  return sub_10001564C(a1, qword_100093E18);
}

uint64_t *sub_100015548(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100015588(uint64_t a1)
{
  return sub_10001564C(a1, qword_100093E30);
}

uint64_t sub_1000155B4(uint64_t a1)
{
  return sub_10001564C(a1, qword_100093E48);
}

uint64_t sub_1000155D8(uint64_t a1)
{
  return sub_10001564C(a1, qword_100093E60);
}

uint64_t sub_100015604(uint64_t a1)
{
  return sub_10001564C(a1, qword_100093E78);
}

uint64_t sub_100015628(uint64_t a1)
{
  return sub_10001564C(a1, qword_100093E90);
}

uint64_t sub_10001564C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Logger(0);
  sub_100015548(v3, a2);
  sub_10000B164(v3, (uint64_t)a2);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(AACLoggingSubsystem);
  return Logger.init(subsystem:category:)(v4);
}

uint64_t destroy for AEAParticipant.ApplicationDescriptor(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for AEAParticipant.ApplicationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for AEAParticipant.ApplicationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AEAParticipant.ApplicationDescriptor(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AEAParticipant.ApplicationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAParticipant.ApplicationDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAParticipant.ApplicationDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAParticipant.ApplicationDescriptor()
{
  return &type metadata for AEAParticipant.ApplicationDescriptor;
}

uint64_t *sub_100015898(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[2];
    a1[1] = a2[1];
    a1[2] = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain(v5);
    if (v11(v8, 1, v9))
    {
      v12 = sub_100004D20(&qword_10008F508);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t sub_100015998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_100015A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain(v4);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100004D20(&qword_10008F508);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_100015AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100004D20(&qword_10008F508);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_100015C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_100004D20(&qword_10008F508);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_100015CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100004D20(&qword_10008F508);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_100015DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100015E08);
}

uint64_t sub_100015E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100004D20(&qword_10008F508);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t sub_100015E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100015EA0);
}

uint64_t sub_100015EA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 16) = a2;
  }
  else
  {
    v7 = sub_100004D20(&qword_10008F508);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AEAParticipant.SecurityInfo(uint64_t a1)
{
  return sub_100016918(a1, qword_100090110, (uint64_t)&nominal type descriptor for AEAParticipant.SecurityInfo);
}

uint64_t sub_100015F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001719C(a1, a2, a3, (uint64_t)&unk_100066398, (uint64_t)&unk_1000663B0, (uint64_t (*)(uint64_t))sub_1000060A0);
}

uint64_t initializeBufferWithCopyOfBuffer for AEAParticipant.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for AEAParticipant.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for AEAParticipant.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for AEAParticipant.Configuration()
{
  return &type metadata for AEAParticipant.Configuration;
}

char *sub_100016004(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *__dst;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v8;
    a1[24] = *((_BYTE *)a2 + 24);
    v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v10 = &v7[v9];
    v11 = (uint64_t)a2 + v9;
    *v10 = *((_BYTE *)a2 + v9);
    v12 = *(uint64_t *)((char *)a2 + v9 + 16);
    *((_QWORD *)v10 + 1) = *(char **)((char *)a2 + v9 + 8);
    *((_QWORD *)v10 + 2) = v12;
    v13 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v10[v13];
    v14 = (const void *)(v11 + v13);
    v15 = type metadata accessor for URL(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
    v18 = v4;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v12);
    if (v17(v14, 1, v15))
    {
      v19 = sub_100004D20(&qword_10008F508);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v20 = *(int *)(a3 + 20);
    v21 = &v7[v20];
    v22 = (uint64_t)a2 + v20;
    *v21 = *(_BYTE *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    *((_QWORD *)v21 + 1) = v23;
    swift_bridgeObjectRetain(v23);
  }
  return v7;
}

uint64_t type metadata accessor for AEAParticipant.Process(uint64_t a1)
{
  return sub_100016918(a1, qword_100090238, (uint64_t)&nominal type descriptor for AEAParticipant.Process);
}

uint64_t sub_100016194(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 16));
  v5 = v4 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100016240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)v9 = *(_BYTE *)(a2 + v8);
  v11 = *(_QWORD *)(a2 + v8 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + v8 + 8);
  *(_QWORD *)(v9 + 16) = v11;
  v12 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v13 = (void *)(v9 + v12);
  v14 = (const void *)(v10 + v12);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v6;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v11);
  if (v17(v14, 1, v15))
  {
    v19 = sub_100004D20(&qword_10008F508);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v20 = *(int *)(a3 + 20);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_BYTE *)v21 = *(_BYTE *)v22;
  v23 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v21 + 8) = v23;
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t sub_100016390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v11 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)v12 = *(_BYTE *)(a2 + v11);
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(a2 + v11 + 8);
  v14 = *(_QWORD *)(a2 + v11 + 16);
  v15 = *(_QWORD *)(a1 + v11 + 16);
  *(_QWORD *)(v12 + 16) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v17 = (void *)(v12 + v16);
  v18 = (void *)(v13 + v16);
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v24 = sub_100004D20(&qword_10008F508);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  v25 = *(int *)(a3 + 20);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  v28 = *(_QWORD *)(v27 + 8);
  v29 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  return a1;
}

uint64_t sub_10001654C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_BYTE *)v7 = *(_BYTE *)(a2 + v6);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + v6 + 8);
  v9 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v10 = (void *)(v7 + v9);
  v11 = (const void *)(v8 + v9);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100004D20(&qword_10008F508);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100016660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_BYTE *)v10 = *(_BYTE *)(a2 + v9);
  v12 = *(_QWORD *)(a2 + v9 + 16);
  v13 = *(_QWORD *)(a1 + v9 + 16);
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(a2 + v9 + 8);
  *(_QWORD *)(v10 + 16) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v15 = (void *)(v10 + v14);
  v16 = (void *)(v11 + v14);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_100004D20(&qword_10008F508);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = *(int *)(a3 + 20);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t sub_1000167F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000167FC);
}

uint64_t sub_1000167FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for AEAParticipant.Process(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10001687C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100016888);
}

uint64_t sub_100016888(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AEAParticipant.Process(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AEAParticipant(uint64_t a1)
{
  return sub_100016918(a1, qword_1000901A8, (uint64_t)&nominal type descriptor for AEAParticipant);
}

uint64_t sub_100016918(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10001694C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for AEAParticipant.Process(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000663E8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_1000169BC(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  char *v17;
  uint64_t v18;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v6;
    a1[24] = *((_BYTE *)a2 + 24);
    v7 = *(int *)(a3 + 24);
    v8 = &a1[v7];
    v9 = (uint64_t)a2 + v7;
    *v8 = *((_BYTE *)a2 + v7);
    v10 = *(uint64_t *)((char *)a2 + v7 + 16);
    *((_QWORD *)v8 + 1) = *(char **)((char *)a2 + v7 + 8);
    *((_QWORD *)v8 + 2) = v10;
    v11 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v12 = &v8[v11];
    v13 = (const void *)(v9 + v11);
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    v17 = v4;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v10);
    if (v16(v13, 1, v14))
    {
      v18 = sub_100004D20(&qword_10008F508);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return v5;
}

uint64_t sub_100016AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 16));
  v5 = v4 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t sub_100016B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  id v17;
  uint64_t v18;

  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 16);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)(v8 + 16) = v10;
  v11 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v12 = (void *)(v8 + v11);
  v13 = (const void *)(v9 + v11);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v5;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v10);
  if (v16(v13, 1, v14))
  {
    v18 = sub_100004D20(&qword_10008F508);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_100016CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)v12 = *(_BYTE *)v13;
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(a1 + v11 + 16);
  *(_QWORD *)(v12 + 16) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v17 = (void *)(v12 + v16);
  v18 = (void *)(v13 + v16);
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v24 = sub_100004D20(&qword_10008F508);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_100016E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_BYTE *)v5 = *(_BYTE *)(a2 + v4);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a2 + v4 + 8);
  v7 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v8 = (void *)(v5 + v7);
  v9 = (const void *)(v6 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100004D20(&qword_10008F508);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_100016F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_BYTE *)v10 = *(_BYTE *)v11;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(a1 + v9 + 16);
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v10 + 16) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v15 = (void *)(v10 + v14);
  v16 = (void *)(v11 + v14);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_100004D20(&qword_10008F508);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_100017074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100017080);
}

uint64_t sub_100017080(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for AEAParticipant.SecurityInfo(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1000170FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100017108);
}

char *sub_100017108(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for AEAParticipant.SecurityInfo(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10001717C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001719C(a1, a2, a3, (uint64_t)&value witness table for Builtin.UnknownObject + 64, (uint64_t)&unk_100066408, type metadata accessor for AEAParticipant.SecurityInfo);
}

uint64_t sub_10001719C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t result;
  unint64_t v8;
  _QWORD v9[3];

  v9[0] = a4;
  v9[1] = a5;
  result = a6(319);
  if (v8 <= 0x3F)
  {
    v9[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v9, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100017208()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  char *v8;
  char v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 45;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v12 = objc_msgSend(*(id *)v0, "processIdentifier");
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x756769666E6F6320;
  v7._object = (void *)0xEF3A6E6F69746172;
  String.append(_:)(v7);
  v8 = (char *)(v0 + *(int *)(type metadata accessor for AEAParticipant(0) + 20));
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  LOBYTE(v12) = v9;
  v13 = v10;
  _print_unlocked<A, B>(_:_:)(&v12, v14, &type metadata for AEAParticipant.Configuration, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v14[0];
}

Swift::Int sub_100017334()
{
  id *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  Class isa;
  Swift::UInt v10;
  _QWORD v12[9];

  Hasher.init(_seed:)(v12, 0);
  v1 = objc_msgSend(*v0, "dataRepresentation");
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  Data.hash(into:)(v12, v2, v4);
  sub_100006118(v2, v4);
  v5 = (unsigned __int8 *)v0 + *(int *)(type metadata accessor for AEAParticipant(0) + 20);
  v6 = *v5;
  v7 = *((_QWORD *)v5 + 1);
  swift_bridgeObjectRetain(v7);
  v8 = Bool.hashValue.getter(v6);
  Hasher._combine(_:)(v8);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v10 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v10);
  swift_bridgeObjectRelease(v7);
  return Hasher._finalize()();
}

uint64_t sub_100017434(uint64_t a1, uint64_t a2)
{
  id *v2;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt v12;
  Class isa;
  Swift::UInt v14;

  v5 = objc_msgSend(*v2, "dataRepresentation");
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  Data.hash(into:)(a1, v6, v8);
  sub_100006118(v6, v8);
  v9 = (unsigned __int8 *)v2 + *(int *)(a2 + 20);
  v10 = *v9;
  v11 = *((_QWORD *)v9 + 1);
  swift_bridgeObjectRetain(v11);
  v12 = Bool.hashValue.getter(v10);
  Hasher._combine(_:)(v12);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v14 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v14);
  return swift_bridgeObjectRelease(v11);
}

Swift::Int sub_100017518(uint64_t a1, uint64_t a2)
{
  id *v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Class isa;
  Swift::UInt v13;
  _QWORD v15[9];

  Hasher.init(_seed:)(v15, a1);
  v4 = objc_msgSend(*v2, "dataRepresentation");
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  Data.hash(into:)(v15, v5, v7);
  sub_100006118(v5, v7);
  v8 = (unsigned __int8 *)v2 + *(int *)(a2 + 20);
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  swift_bridgeObjectRetain(v10);
  v11 = Bool.hashValue.getter(v9);
  Hasher._combine(_:)(v11);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v13 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v13);
  swift_bridgeObjectRelease(v10);
  return Hasher._finalize()();
}

void sub_100017614(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*v1, "dataRepresentation");
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

void sub_100017670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004D20(&qword_10008F508);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*(_BYTE *)v2);
  v11 = *(_QWORD *)(v2 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(v2 + 8);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v11);
    String.hash(into:)(a1, v12, v11);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v13 = type metadata accessor for AEAParticipant.SecurityInfo(0);
  sub_10000615C(v2 + *(int *)(v13 + 24), (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v14 = sub_100017AD0(&qword_1000902A8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

Swift::Int sub_100017800()
{
  id *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, 0);
  v1 = objc_msgSend(*v0, "dataRepresentation");
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  Data.hash(into:)(v6, v2, v4);
  sub_100006118(v2, v4);
  return Hasher._finalize()();
}

uint64_t sub_100017884(uint64_t a1)
{
  id *v1;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = objc_msgSend(*v1, "dataRepresentation");
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  Data.hash(into:)(a1, v4, v6);
  return sub_100006118(v4, v6);
}

Swift::Int sub_1000178EC(uint64_t a1)
{
  id *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, a1);
  v2 = objc_msgSend(*v1, "dataRepresentation");
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  Data.hash(into:)(v7, v3, v5);
  sub_100006118(v3, v5);
  return Hasher._finalize()();
}

uint64_t sub_10001796C()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  v1._countAndFlagsBits = 45;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  objc_msgSend(*(id *)v0, "processIdentifier");
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return v5;
}

uint64_t sub_1000179F0(_QWORD *a1, _QWORD *a2)
{
  sub_10001880C();
  return static NSObject.== infix(_:_:)(*a1, *a2) & 1;
}

unint64_t sub_100017A34()
{
  unint64_t result;

  result = qword_100090278;
  if (!qword_100090278)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100090278);
  }
  return result;
}

uint64_t sub_100017A78()
{
  return sub_100017AD0(&qword_100090280, type metadata accessor for AEAParticipant.Process, (uint64_t)&unk_100066420);
}

uint64_t sub_100017AA4()
{
  return sub_100017AD0(&qword_100090288, type metadata accessor for AEAParticipant, (uint64_t)&unk_1000664E8);
}

uint64_t sub_100017AD0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_100017B10()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_BYTE *)v0 + 16);
  Hasher.init(_seed:)(v5, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v5, v1, v2);
  swift_bridgeObjectRelease(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100017B80(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt8 v5;

  v3 = *v1;
  v4 = v1[1];
  v5 = *((_BYTE *)v1 + 16);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
}

Swift::Int sub_100017BD8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt8 v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = *((_BYTE *)v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_100017C44(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char v10;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == *(_QWORD *)a2 && v5 == v7)
    return v6 ^ v8 ^ 1u;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v7, 0);
  result = 0;
  if ((v10 & 1) != 0)
    return v6 ^ v8 ^ 1u;
  return result;
}

Swift::Int sub_100017CA0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_100017670((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100017CE0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_100017670((uint64_t)v2);
  return Hasher._finalize()();
}

unint64_t sub_100017D1C()
{
  unint64_t result;

  result = sub_100058A64((uint64_t)_swiftEmptyArrayStorage);
  byte_100093EA8 = 1;
  qword_100093EB0 = result;
  return result;
}

Swift::Int sub_100017D4C(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  _QWORD v7[9];
  char v8;
  uint64_t v9;

  v5 = *((_QWORD *)v2 + 1);
  v8 = *v2;
  v9 = v5;
  Hasher.init(_seed:)(v7, 0);
  dispatch thunk of Hashable.hash(into:)(v7, a1, a2);
  return Hasher._finalize()();
}

void sub_100017DB4()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Class isa;
  Swift::UInt v3;

  v1 = Bool.hashValue.getter(*v0);
  Hasher._combine(_:)(v1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v3 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v3);
}

Swift::Int sub_100017E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  _QWORD v8[9];
  char v9;
  uint64_t v10;

  v6 = *((_QWORD *)v3 + 1);
  v9 = *v3;
  v10 = v6;
  Hasher.init(_seed:)(v8, a1);
  dispatch thunk of Hashable.hash(into:)(v8, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100017E90(unsigned __int8 *a1, unsigned __int8 *a2)
{
  Class isa;
  Class v4;
  char v5;

  if (*a1 != *a2)
    return 0;
  sub_10001880C();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  v5 = static NSObject.== infix(_:_:)(isa, v4);

  return v5 & 1;
}

unint64_t sub_100017F5C()
{
  unint64_t result;

  result = qword_100090290;
  if (!qword_100090290)
  {
    result = swift_getWitnessTable(&unk_1000665B0, &type metadata for AEAParticipant.Configuration);
    atomic_store(result, (unint64_t *)&qword_100090290);
  }
  return result;
}

uint64_t sub_100017FA0()
{
  return sub_100017AD0(&qword_100090298, type metadata accessor for AEAParticipant.SecurityInfo, (uint64_t)&unk_100066618);
}

Swift::Int sub_100017FCC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v1 = v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = *v0;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  v4 = v1[3];
  if (v4)
  {
    v5 = v1[2];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(v7, v5, v4);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1[4] & 1);
  return Hasher._finalize()();
}

void sub_100018090(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt8 v7;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = *((_BYTE *)v1 + 32);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(a1, v6, v5);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v7);
}

Swift::Int sub_10001813C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt8 v6;
  _QWORD v8[9];

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v6 = *((_BYTE *)v1 + 32);
  Hasher.init(_seed:)(v8, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v8, v2, v3);
  swift_bridgeObjectRelease(v3);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(v8, v5, v4);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t sub_1000181F0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  char v6;
  _OWORD v7[2];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_BYTE *)(a2 + 32);
  return sub_100018280((uint64_t *)v5, (uint64_t)v7) & 1;
}

unint64_t sub_10001823C()
{
  unint64_t result;

  result = qword_1000902A0;
  if (!qword_1000902A0)
  {
    result = swift_getWitnessTable(&unk_100066680, &type metadata for AEAParticipant.ApplicationDescriptor);
    atomic_store(result, (unint64_t *)&qword_1000902A0);
  }
  return result;
}

uint64_t sub_100018280(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  if (v4 != *(_QWORD *)a2 || v5 != v6)
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0);
    v9 = 0;
    if ((v8 & 1) == 0)
      return v9 & 1;
  }
  v10 = a1[3];
  v11 = *(_QWORD *)(a2 + 24);
  if (!v10)
  {
    if (!v11)
    {
LABEL_16:
      v9 = ((a1[4] & 1) == 0) ^ *(_BYTE *)(a2 + 32);
      return v9 & 1;
    }
LABEL_15:
    v9 = 0;
    return v9 & 1;
  }
  if (!v11)
    goto LABEL_15;
  v12 = a1[2];
  v13 = *(_QWORD *)(a2 + 16);
  if (v12 == v13 && v10 == v11)
    goto LABEL_16;
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0);
  v9 = 0;
  if ((v15 & 1) != 0)
    goto LABEL_16;
  return v9 & 1;
}

uint64_t sub_100018324(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  Class isa;
  Class v13;
  uint64_t v15;

  v4 = type metadata accessor for AEAParticipant(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v15 - v8;
  sub_10001880C();
  v10 = static NSObject.== infix(_:_:)(*a1, *a2);
  sub_100018848((uint64_t)a1, (uint64_t)v9);
  sub_100018848((uint64_t)a2, (uint64_t)v7);
  if ((v10 & 1) != 0 && v9[*(int *)(v4 + 20)] == v7[*(int *)(v4 + 20)])
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v13 = Dictionary._bridgeToObjectiveC()().super.isa;
    v11 = static NSObject.== infix(_:_:)(isa, v13);

  }
  else
  {
    v11 = 0;
  }
  sub_10001888C((uint64_t)v9);
  sub_10001888C((uint64_t)v7);
  return v11 & 1;
}

BOOL sub_10001848C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _BOOL8 result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004D20(&qword_1000902B0);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004D20(&qword_10008F508);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v33 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v33 - v18;
  if (*a1 != *a2)
    return 0;
  v21 = *((_QWORD *)a1 + 2);
  v22 = *((_QWORD *)a2 + 2);
  if (!v21)
  {
    if (v22)
      return 0;
    goto LABEL_11;
  }
  if (!v22)
    return 0;
  v23 = *((_QWORD *)a1 + 1);
  v24 = *((_QWORD *)a2 + 1);
  if (v23 == v24 && v21 == v22
    || (v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v21, v24, v22, 0), result = 0, (v25 & 1) != 0))
  {
LABEL_11:
    v34 = v7;
    v26 = type metadata accessor for AEAParticipant.SecurityInfo(0);
    sub_10000615C((uint64_t)&a1[*(int *)(v26 + 24)], (uint64_t)v19);
    sub_10000615C((uint64_t)&a2[*(int *)(v26 + 24)], (uint64_t)v17);
    v27 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_10000615C((uint64_t)v19, (uint64_t)v10);
    sub_10000615C((uint64_t)v17, v27);
    v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v28((uint64_t)v10, 1, v4) == 1)
    {
      sub_1000187D0((uint64_t)v17, &qword_10008F508);
      sub_1000187D0((uint64_t)v19, &qword_10008F508);
      if (v28(v27, 1, v4) == 1)
      {
        sub_1000187D0((uint64_t)v10, &qword_10008F508);
        return 1;
      }
      goto LABEL_16;
    }
    sub_10000615C((uint64_t)v10, (uint64_t)v14);
    if (v28(v27, 1, v4) == 1)
    {
      sub_1000187D0((uint64_t)v17, &qword_10008F508);
      sub_1000187D0((uint64_t)v19, &qword_10008F508);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_16:
      sub_1000187D0((uint64_t)v10, &qword_1000902B0);
      return 0;
    }
    v29 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v34, v27, v4);
    v30 = sub_100017AD0(&qword_1000902B8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v31 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v29, v4, v30);
    v32 = *(void (**)(char *, uint64_t))(v5 + 8);
    v32(v29, v4);
    sub_1000187D0((uint64_t)v17, &qword_10008F508);
    sub_1000187D0((uint64_t)v19, &qword_10008F508);
    v32(v14, v4);
    sub_1000187D0((uint64_t)v10, &qword_10008F508);
    return (v31 & 1) != 0;
  }
  return result;
}

uint64_t sub_1000187D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100004D20(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10001880C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000902C0;
  if (!qword_1000902C0)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000902C0);
  }
  return result;
}

uint64_t sub_100018848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001888C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000188CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for AEAParticipant.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for AEAParticipant.Metadata(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AEAParticipant.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAParticipant.Metadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAParticipant.Metadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAParticipant.Metadata()
{
  return &type metadata for AEAParticipant.Metadata;
}

unint64_t sub_100018A40()
{
  unint64_t result;

  result = qword_1000902C8;
  if (!qword_1000902C8)
  {
    result = swift_getWitnessTable(&unk_1000666F4, &type metadata for AEAParticipant.Metadata);
    atomic_store(result, (unint64_t *)&qword_1000902C8);
  }
  return result;
}

uint64_t sub_100018A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  unint64_t v9;
  id v10;
  id v11;
  id v13;
  __int128 v14;
  __int128 v15;

  if (!*(_QWORD *)(a4 + 16))
  {
    v14 = 0u;
    v15 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain(a2);
  v7 = sub_10005A2B4(a1, a2);
  if ((v8 & 1) == 0)
  {
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }
  sub_1000154A8(*(_QWORD *)(a4 + 56) + 32 * v7, (uint64_t)&v14);
  swift_bridgeObjectRelease(a2);
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_8:
    sub_100018B78((uint64_t)&v14);
    return 2;
  }
  v9 = sub_10000622C();
  if ((swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    return 2;
  v10 = v13;
  v11 = objc_msgSend(v13, "BOOLValue");

  return (uint64_t)v11;
}

uint64_t sub_100018B78(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20((uint64_t *)&unk_1000902D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100018BB8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

id sub_100018C0C()
{
  char *v0;
  void *v1;
  uint64_t v2;
  objc_super v4;

  v1 = v0;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC15assessmentagent8AEAAgent_sourceRegisteringXPCListener], "invalidate");
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC15assessmentagent8AEAAgent_sigtermSourceSignal];
  swift_getObjectType(v2);
  swift_unknownObjectRetain(v2);
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease(v2);
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for AEAAgent();
  return objc_msgSendSuper2(&v4, "dealloc");
}

id sub_100018DB4(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  id v16;
  objc_super v18;
  _OWORD v19[10];

  *(_QWORD *)&v1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_clientConnection] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_languagePreferencesChangedObservation] = 0;
  v1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_shouldKillAgentAfterSessionEnds] = 0;
  sub_10001BC14((uint64_t)a1, (uint64_t)&v1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_args]);
  v3 = type metadata accessor for AEATaskQueue();
  swift_allocObject(v3, 32, 7);
  v4 = v1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskQueue] = sub_100044648();
  v5 = &v4[OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskSource];
  sub_100008380((uint64_t)(a1 + 7), (uint64_t)&v4[OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskSource]);
  v6 = a1[12];
  sub_100008380((uint64_t)(a1 + 13), (uint64_t)(v5 + 48));
  *((_QWORD *)v5 + 5) = v6;
  v7 = *(void **)(*sub_1000060F4(a1, a1[3]) + 152);
  swift_retain(v6);
  v8 = objc_msgSend(v7, "makeSourceRegisteringListener");
  *(_QWORD *)&v4[OBJC_IVAR____TtC15assessmentagent8AEAAgent_sourceRegisteringXPCListener] = v8;
  sub_10001BC14((uint64_t)a1, (uint64_t)v19);
  v9 = (_OWORD *)swift_allocObject(&unk_100083908, 176, 7);
  v10 = v19[7];
  v9[7] = v19[6];
  v9[8] = v10;
  v11 = v19[9];
  v9[9] = v19[8];
  v9[10] = v11;
  v12 = v19[3];
  v9[3] = v19[2];
  v9[4] = v12;
  v13 = v19[5];
  v9[5] = v19[4];
  v9[6] = v13;
  v14 = v19[1];
  v9[1] = v19[0];
  v9[2] = v14;
  v15 = sub_10002D0FC((uint64_t)sub_10001BC94, (uint64_t)v9);
  swift_release(v9);
  *(_QWORD *)&v4[OBJC_IVAR____TtC15assessmentagent8AEAAgent_sigtermSourceSignal] = v15;

  v18.receiver = v4;
  v18.super_class = (Class)type metadata accessor for AEAAgent();
  v16 = objc_msgSendSuper2(&v18, "init");
  sub_10001B9A8(a1);
  return v16;
}

void sub_100018F54()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v0 = type metadata accessor for Logger(0);
  sub_10000B164(v0, (uint64_t)qword_100093E18);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received SIGINT. Tearing down.", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

  exit(2);
}

__CFNotificationCenter *sub_100019018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  const void *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __CFNotificationCenter *result;
  __CFNotificationCenter *v46;
  __CFString *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void **aBlock;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t (*v63)();
  _QWORD *v64;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args;
  if (objc_msgSend(*(id *)(*sub_1000060F4((_QWORD *)(v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args), *(_QWORD *)(v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args + 24))+ 104), "shouldEnterSandbox"))sub_10001989C();
  v49 = v9;
  v50 = v7;
  v51 = v6;
  v11 = v2;
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v12 = qword_100093EB8;
  v63 = (uint64_t (*)())sub_10005C03C;
  v64 = 0;
  aBlock = _NSConcreteStackBlock;
  v60 = 1107296256;
  v61 = sub_10001B160;
  v62 = &unk_100083808;
  v13 = _Block_copy(&aBlock);
  swift_release(v64);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v12, v13);
  _Block_release(v13);
  v14 = qword_100093EB8;
  v63 = (uint64_t (*)())sub_10005C084;
  v64 = 0;
  aBlock = _NSConcreteStackBlock;
  v60 = 1107296256;
  v61 = sub_10001B160;
  v62 = &unk_100083830;
  v15 = _Block_copy(&aBlock);
  swift_release(v64);
  xpc_set_event_stream_handler("com.apple.fsevents.matching", v14, v15);
  _Block_release(v15);
  v16 = *(uint64_t (**)(uint64_t))(v10 + 144);
  v53 = v1;
  v52 = v16(v1 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskSource);
  v17 = *(_QWORD *)(v52 + 16);
  v18 = v11;
  v20 = v50;
  v19 = v51;
  v21 = v49;
  if (v17)
  {
    v54 = *(_QWORD *)(v53 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskQueue);
    v55 = v3;
    v22 = (uint64_t *)(v52 + 32);
    do
    {
      v23 = *v22++;
      v24 = v54;
      v57 = *(_QWORD *)(v54 + 16);
      v25 = (_QWORD *)swift_allocObject(&unk_100083868, 48, 7);
      v25[2] = v24;
      v25[3] = v23;
      v56 = v23;
      v25[4] = 0;
      v25[5] = 0;
      v63 = sub_10001BA48;
      v64 = v25;
      aBlock = _NSConcreteStackBlock;
      v60 = 1107296256;
      v61 = sub_10002448C;
      v62 = &unk_100083880;
      v26 = _Block_copy(&aBlock);
      swift_retain_n(v23, 2);
      v27 = swift_retain(v24);
      static DispatchQoS.unspecified.getter(v27);
      v58 = &_swiftEmptyArrayStorage;
      v28 = v18;
      v29 = sub_10000ACBC();
      v30 = v21;
      v31 = v20;
      v32 = v19;
      v33 = sub_100004D20(&qword_10008F748);
      v34 = sub_10000AD04();
      v35 = v33;
      v19 = v32;
      v20 = v31;
      v21 = v30;
      v36 = v29;
      v18 = v28;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v35, v34, v28, v36);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v30, v5, v26);
      v37 = v26;
      v38 = v55;
      _Block_release(v37);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v28);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v30, v19);
      v39 = v64;
      swift_release(v56);
      swift_release(v39);
      --v17;
    }
    while (v17);
  }
  swift_bridgeObjectRelease(v52);
  v40 = v53;
  v41 = *(void **)(v53 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_sourceRegisteringXPCListener);
  objc_msgSend(v41, "setDelegate:", v53);
  objc_msgSend(v41, "resume");
  v42 = swift_allocObject(&unk_1000838B8, 24, 7);
  swift_unknownObjectWeakInit(v42 + 16, v40);
  v43 = type metadata accessor for AEAConcreteSystemNotificationPrimitives.NotificationCenterObservation();
  v44 = (_QWORD *)swift_allocObject(v43, 64, 7);
  v44[2] = sub_10005C190;
  v44[3] = 0;
  v44[4] = 0xD00000000000002BLL;
  v44[5] = 0x800000010006C3E0;
  v44[6] = sub_10001BC04;
  v44[7] = v42;
  swift_retain_n(v42, 3);
  result = CFNotificationCenterGetDarwinNotifyCenter();
  if (result)
  {
    v46 = result;
    v47 = (__CFString *)String._bridgeToObjectiveC()();
    CFNotificationCenterAddObserver(v46, v44, (CFNotificationCallback)sub_10005C2EC, v47, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    swift_release_n(v42, 3);

    v48 = *(_QWORD *)(v40 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_languagePreferencesChangedObservation);
    *(_QWORD *)(v40 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_languagePreferencesChangedObservation) = v44;
    return (__CFNotificationCenter *)swift_unknownObjectRelease(v48);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000194C8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v4 = type metadata accessor for Logger(0);
  sub_10000B164(v4, (uint64_t)qword_100093E18);
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v11 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain(a2);
    v10 = sub_100059C74(a1, a2, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received notification: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
}

uint64_t sub_100019664(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  aBlock[4] = sub_10001BC0C;
  v19 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002448C;
  aBlock[3] = &unk_1000838D0;
  v10 = _Block_copy(aBlock);
  v11 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v11);
  v17 = &_swiftEmptyArrayStorage;
  v12 = sub_10000ACBC();
  v13 = sub_100004D20(&qword_10008F748);
  v14 = sub_10000AD04();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v2, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v19);
}

void sub_10001982C(uint64_t a1)
{
  uint64_t v1;
  _BYTE *Strong;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  Strong = (_BYTE *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    if (!*(_QWORD *)&Strong[OBJC_IVAR____TtC15assessmentagent8AEAAgent_clientConnection])
      exit(0);
    Strong[OBJC_IVAR____TtC15assessmentagent8AEAAgent_shouldKillAgentAfterSessionEnds] = 1;

  }
}

id sub_10001989C()
{
  uint64_t v0;
  id result;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[16];
  id v17;

  result = *(id *)(*sub_1000060F4((_QWORD *)(v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args), *(_QWORD *)(v0 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args + 24))+ 16);
  if (result)
  {
    v17 = 0;
    if (!objc_msgSend(result, "enterSandboxWithError:", &v17))
    {
      v13 = v17;
      v2 = v17;
      v3 = _convertNSErrorToError(_:)(v13);

      swift_willThrow();
      if (qword_10008E5E0 != -1)
        swift_once(&qword_10008E5E0, sub_10001552C);
      v4 = type metadata accessor for Logger(0);
      sub_10000B164(v4, (uint64_t)qword_100093E18);
      swift_errorRetain(v3);
      v5 = swift_errorRetain(v3);
      v6 = Logger.logObject.getter(v5);
      v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(12, -1);
        v9 = (void *)swift_slowAlloc(32, -1);
        v17 = v9;
        *(_DWORD *)v8 = 136446210;
        swift_getErrorValue(v3, v16, v15);
        v10 = sub_10004CCD0(v15[1], v15[2]);
        v12 = v11;
        v14 = sub_100059C74(v10, v11, (uint64_t *)&v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v8 + 4, v8 + 12);
        swift_bridgeObjectRelease(v12);
        swift_errorRelease(v3);
        swift_errorRelease(v3);
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to enter sandbox. Error: %{public}s", v8, 0xCu);
        swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v9, -1, -1);
        swift_slowDealloc(v8, -1, -1);
      }
      else
      {
        swift_errorRelease(v3);
        swift_errorRelease(v3);
      }

      exit(1);
    }
    return v17;
  }
  return result;
}

uint64_t type metadata accessor for AEAAgent()
{
  return objc_opt_self(_TtC15assessmentagent8AEAAgent);
}

uint64_t sub_100019B68()
{
  uint64_t v0;

  if (qword_10008E658 != -1)
    swift_once(&qword_10008E658, sub_100031A10);
  v0 = qword_100093F30;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100093F38);
  return v0;
}

uint64_t sub_100019C20(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  _QWORD *v24;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v14 = (_QWORD *)swift_allocObject(&unk_1000835E8, 48, 7);
  v14[2] = v3;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a1;
  aBlock[4] = sub_10001ACB8;
  v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002448C;
  aBlock[3] = &unk_100083600;
  v15 = _Block_copy(aBlock);
  v16 = v3;
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(a1);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_10000ACBC();
  v18 = sub_100004D20(&qword_10008F748);
  v19 = sub_10000AD04();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

void sub_100019E1C(char *a1, void (*a2)(_QWORD, uint64_t), uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  id v24;
  _QWORD v25[5];
  _QWORD *v26;

  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10000B164(v8, (uint64_t)qword_100093E18);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Publisher attempting to connect", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  if (*(_QWORD *)&a1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_clientConnection])
  {
    v13 = sub_10001A58C();
    v14 = swift_allocError(&type metadata for AEAAgent.AgentError, v13, 0, 0);
    a2(0, v14);
    swift_errorRelease(v14);
  }
  else
  {
    v15 = *(_QWORD *)(*sub_1000060F4(&a1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_args], *(_QWORD *)&a1[OBJC_IVAR____TtC15assessmentagent8AEAAgent_args + 24])+ 152);
    v16 = (_QWORD *)swift_allocObject(&unk_100083638, 40, 7);
    v16[2] = a2;
    v16[3] = a3;
    v16[4] = a1;
    v17 = qword_10008E618;
    swift_unknownObjectRetain(v15);
    swift_retain(a3);
    v18 = a1;
    v19 = a4;
    if (v17 != -1)
      swift_once(&qword_10008E618, sub_10003015C);
    v20 = objc_msgSend((id)objc_opt_self(AELifecycleEventHandlingProxy), "proxyWithEndpoint:queue:", v19, qword_100093EB8);

    v21 = (_QWORD *)swift_allocObject(&unk_100083660, 48, 7);
    v21[2] = sub_10001AD08;
    v21[3] = v16;
    v21[4] = v15;
    v21[5] = v20;
    v25[4] = sub_10001AD4C;
    v26 = v21;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 1107296256;
    v25[2] = sub_100018BB8;
    v25[3] = &unk_100083678;
    v22 = _Block_copy(v25);
    v23 = v26;
    swift_unknownObjectRetain(v15);
    swift_retain(v16);
    v24 = v20;
    swift_release(v23);
    objc_msgSend(v24, "handleEventDidBeginWithCompletion:", v22);
    _Block_release(v22);
    swift_unknownObjectRelease(v15);
    swift_release(v16);

  }
}

void sub_10001A0E4(void *a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  void *v8;
  char *v9;
  id v10;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    ((void (*)(_QWORD, void *))a3)(0, a1);
  }
  else
  {
    v8 = *(void **)(a5 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_clientConnection);
    *(_QWORD *)(a5 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_clientConnection) = a1;
    v9 = a1;

    *(_QWORD *)&v9[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate + 8] = &off_100083598;
    swift_unknownObjectWeakAssign();
    sub_1000091F4();
    v10 = objc_msgSend(*(id *)&v9[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_publicationListener], "endpoint");
    a3();

  }
  sub_10001B1A8(a1, a2 & 1);
}

uint64_t destroy for AEAAgent.Arguments(_QWORD *a1)
{
  sub_100004D60(a1);
  swift_unknownObjectRelease(a1[5]);
  sub_100004D60(a1 + 7);
  swift_release(a1[12]);
  sub_100004D60(a1 + 13);
  return swift_release(a1[19]);
}

uint64_t initializeWithCopy for AEAAgent.Arguments(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_unknownObjectRetain(v5);
  v8(a1 + 56, a2 + 56, v7);
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 128) = v10;
  v11 = v10;
  v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
  swift_retain(v9);
  v12(a1 + 104, a2 + 104, v11);
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  swift_retain(v13);
  return a1;
}

_QWORD *assignWithCopy for AEAAgent.Arguments(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10000C54C(a1, a2);
  v4 = a2[5];
  v5 = a2[6];
  v6 = a1[5];
  a1[5] = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[6] = v5;
  sub_10000C54C(a1 + 7, a2 + 7);
  v7 = a2[12];
  v8 = a1[12];
  a1[12] = v7;
  swift_retain(v7);
  swift_release(v8);
  sub_10000C54C(a1 + 13, a2 + 13);
  v10 = a2[18];
  v9 = a2[19];
  v11 = a1[19];
  a1[18] = v10;
  a1[19] = v9;
  swift_retain(v9);
  swift_release(v11);
  return a1;
}

__n128 initializeWithTake for AEAAgent.Arguments(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for AEAAgent.Arguments(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100004D60((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_unknownObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = v6;
  sub_100004D60((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_release(v9);
  sub_100004D60((_QWORD *)(a1 + 104));
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v10 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_release(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAAgent.Arguments(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAAgent.Arguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAAgent.Arguments()
{
  return &type metadata for AEAAgent.Arguments;
}

unint64_t sub_10001A58C()
{
  unint64_t result;

  result = qword_1000903A8;
  if (!qword_1000903A8)
  {
    result = swift_getWitnessTable(&unk_1000667FC, &type metadata for AEAAgent.AgentError);
    atomic_store(result, (unint64_t *)&qword_1000903A8);
  }
  return result;
}

void sub_10001A5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

uint64_t sub_10001A628(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  uint64_t (*v19)(void);
  uint64_t v20;
  _QWORD v21[3];
  char v22[8];
  uint64_t v23;

  if (*((_BYTE *)a1 + 8) == 1)
  {
    v5 = *a1;
    swift_errorRetain(*a1);
    if (qword_10008E5E0 != -1)
      swift_once(&qword_10008E5E0, sub_10001552C);
    v6 = type metadata accessor for Logger(0);
    sub_10000B164(v6, (uint64_t)qword_100093E18);
    swift_errorRetain(v5);
    v7 = swift_errorRetain(v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v19 = a3;
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v23 = v11;
      *(_DWORD *)v10 = 136446210;
      swift_getErrorValue(v5, v22, v21);
      v12 = sub_10004CCD0(v21[1], v21[2]);
      v14 = v13;
      v20 = sub_100059C74(v12, v13, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v14);
      sub_10001BAE0(v5, 1);
      sub_10001BAE0(v5, 1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Found error while cleaning up from disconnect. Error: %{public}s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      v15 = v10;
      a3 = v19;
      swift_slowDealloc(v15, -1, -1);

      sub_10001BAE0(v5, 1);
    }
    else
    {
      sub_10001BAE0(v5, 1);
      sub_10001BAE0(v5, 1);
      swift_errorRelease(v5);

    }
  }
  v16 = OBJC_IVAR____TtC15assessmentagent8AEAAgent_clientConnection;
  v17 = *(void **)(a2 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_clientConnection);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_clientConnection) = 0;

  result = a3();
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_shouldKillAgentAfterSessionEnds) == 1)
  {
    if (!*(_QWORD *)(a2 + v16))
      exit(0);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_shouldKillAgentAfterSessionEnds) = 1;
  }
  return result;
}

uint64_t sub_10001A880(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject **v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  NSObject *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v39;
  NSObject **v40;
  uint8_t *v41;
  uint64_t v42;
  void *v43;
  _OWORD v44[4];
  uint64_t v45;
  NSObject *v46;
  _QWORD v47[9];

  v6 = v5;
  v43 = a1;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v15 = (void *)qword_100093EB8;
  *v14 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v17 & 1) != 0)
  {
    if (qword_10008E5E0 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_10008E5E0, sub_10001552C);
LABEL_5:
  v18 = type metadata accessor for Logger(0);
  sub_10000B164(v18, (uint64_t)qword_100093E18);
  v19 = a2;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = (NSObject **)swift_slowAlloc(8, -1);
    v41 = v22;
    *(_DWORD *)v22 = 138543362;
    v46 = v19;
    v23 = v19;
    v42 = a4;
    v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v22 + 4, v22 + 12);
    v25 = v40;
    *v40 = v19;

    v26 = v41;
    a4 = v42;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Client did publish state: %{public}@", v41, 0xCu);
    v27 = sub_100004D20(&qword_1000903C8);
    swift_arrayDestroy(v25, 1, v27);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {

    v20 = v19;
  }

  v28 = *(_QWORD *)(v6 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskSource + 40);
  sub_100008380(v6 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskSource + 48, (uint64_t)v47);
  v46 = v28;
  v29 = v43;
  v47[5] = v43;
  v47[6] = a3;
  v47[7] = v19;
  sub_10001BAEC((uint64_t *)&v46, (uint64_t)v44);
  v30 = sub_100004D20(&qword_1000903C0);
  v31 = swift_allocObject(v30, 88, 7);
  v32 = v44[3];
  *(_OWORD *)(v31 + 48) = v44[2];
  *(_OWORD *)(v31 + 64) = v32;
  *(_QWORD *)(v31 + 80) = v45;
  v33 = v44[1];
  *(_OWORD *)(v31 + 16) = v44[0];
  *(_OWORD *)(v31 + 32) = v33;
  v34 = v19;
  swift_retain(v28);
  v35 = v29;
  v36 = a3;
  sub_10001BB28((uint64_t)&v46);
  v37 = swift_allocObject(&unk_1000837C8, 32, 7);
  *(_QWORD *)(v37 + 16) = a4;
  *(_QWORD *)(v37 + 24) = a5;
  swift_retain(a5);
  sub_10001AD58(v31, (uint64_t)sub_10001BB5C, v37);
  swift_release(v31);
  return swift_release(v37);
}

uint64_t sub_10001ABF0(_QWORD *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  if (*((_BYTE *)a1 + 8) != 1)
    return a2(0);
  v3 = *a1;
  swift_errorRetain(*a1);
  a2(v3);
  return sub_10001BAE0(v3, 1);
}

uint64_t sub_10001AC58()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10001AC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10001A5D0(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10001AC84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10001ACB8()
{
  uint64_t v0;

  sub_100019E1C(*(char **)(v0 + 16), *(void (**)(_QWORD, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10001ACC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001ACD4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001ACDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10001AD08(void *a1, char a2)
{
  uint64_t v2;

  sub_10001A0E4(a1, a2 & 1, *(void (**)(void))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10001AD18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10001AD4C(uint64_t a1)
{
  uint64_t v1;

  sub_10000AB10(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10001AD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  void *v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(_QWORD *)(v4 + 16);
  v15 = (_QWORD *)swift_allocObject(&unk_100083700, 48, 7);
  v15[2] = v4;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = sub_10001BA48;
  v26 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002448C;
  aBlock[3] = &unk_100083718;
  v16 = _Block_copy(aBlock);
  swift_retain(a1);
  swift_retain(v4);
  v17 = sub_10000828C(a2, a3);
  static DispatchQoS.unspecified.getter(v17);
  v24 = &_swiftEmptyArrayStorage;
  v18 = sub_10000ACBC();
  v19 = sub_100004D20(&qword_10008F748);
  v20 = sub_10000AD04();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v19, v20, v8, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release(v26);
}

void sub_10001AF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 24));
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v20 = qword_100093EB8;
  v14 = (_QWORD *)swift_allocObject(&unk_100083750, 48, 7);
  v14[2] = a2;
  v14[3] = a1;
  v14[4] = a3;
  v14[5] = a4;
  aBlock[4] = sub_10001BA50;
  v25 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002448C;
  aBlock[3] = &unk_100083768;
  v15 = _Block_copy(aBlock);
  swift_retain(a2);
  swift_retain(a1);
  v16 = sub_10000828C(a3, a4);
  static DispatchQoS.unspecified.getter(v16);
  v23 = _swiftEmptyArrayStorage;
  v17 = sub_10000ACBC();
  v18 = sub_100004D20(&qword_10008F748);
  v19 = sub_10000AD04();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v8, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  swift_release(v25);
  OS_dispatch_group.wait()();
}

uint64_t sub_10001B160(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_10001B1A8(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_10001B1B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  void (*v9)(void (*)(uint64_t *), _QWORD *);

  v7 = *a1;
  v8 = (_QWORD *)swift_allocObject(&unk_1000837A0, 40, 7);
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v9 = *(void (**)(void (*)(uint64_t *), _QWORD *))(*(_QWORD *)v7 + 88);
  swift_retain(a2);
  sub_10000828C(a3, a4);
  v9(sub_10001BA94, v8);
  return swift_release(v8);
}

void sub_10001B23C(void *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  char *v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v8 = qword_100093EB8;
  *v7 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (qword_10008E5E0 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_10008E5E0, sub_10001552C);
LABEL_5:
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10000B164(v10, (uint64_t)qword_100093E18);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Assessment source did disconnect", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = *(void **)&a2[OBJC_IVAR____TtC15assessmentagent8AEAAgent_clientConnection];
  if (v15)
  {
    type metadata accessor for AEAClientConnection();
    v16 = a1;
    v17 = v15;
    v18 = static NSObject.== infix(_:_:)();

    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)&a2[OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskSource + 40];
      v20 = sub_100004D20(&qword_1000903B8);
      v21 = swift_allocObject(v20, 24, 7);
      *(_QWORD *)(v21 + 16) = v19;
      *(_QWORD *)&v16[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate + 8] = 0;
      swift_unknownObjectWeakAssign();
      v22 = (_QWORD *)swift_allocObject(&unk_1000837F0, 40, 7);
      v22[2] = a2;
      v22[3] = Publishers.AEACombineLatestMany.init(_:);
      v22[4] = 0;
      swift_retain(v19);
      v23 = a2;
      sub_10001AD58(v21, (uint64_t)sub_10001BD80, (uint64_t)v22);
      swift_release(v21);
      swift_release(v22);
    }
  }
}

uint64_t sub_10001B4C0(void *a1, char *a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  char *v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v32;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = swift_allocObject(&unk_1000836B0, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  v13 = qword_10008E618;
  swift_retain(a4);
  if (v13 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v14 = qword_100093EB8;
  *v11 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) != 0)
  {
    if (qword_10008E5E0 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_10008E5E0, sub_10001552C);
LABEL_5:
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000B164(v16, (uint64_t)qword_100093E18);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Assessment source did disconnect", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = *(void **)&a2[OBJC_IVAR____TtC15assessmentagent8AEAAgent_clientConnection];
  if (v21
    && (type metadata accessor for AEAClientConnection(),
        v22 = a1,
        v23 = v21,
        v24 = static NSObject.== infix(_:_:)(),
        v23,
        v22,
        (v24 & 1) != 0))
  {
    v25 = *(_QWORD *)&a2[OBJC_IVAR____TtC15assessmentagent8AEAAgent_taskSource + 40];
    v26 = sub_100004D20(&qword_1000903B8);
    v27 = swift_allocObject(v26, 24, 7);
    *(_QWORD *)(v27 + 16) = v25;
    *(_QWORD *)&v22[OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_delegate + 8] = 0;
    swift_unknownObjectWeakAssign();
    v28 = (_QWORD *)swift_allocObject(&unk_1000836D8, 40, 7);
    v28[2] = a2;
    v28[3] = sub_10001BA2C;
    v28[4] = v12;
    swift_retain(v25);
    v29 = a2;
    swift_retain(v12);
    sub_10001AD58(v27, (uint64_t)sub_10001BA38, (uint64_t)v28);
    swift_release(v12);
    swift_release(v27);
    v30 = v28;
  }
  else
  {
    a3(0);
    v30 = (_QWORD *)v12;
  }
  return swift_release(v30);
}

id sub_10001B7A4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  char **v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;

  v2 = v1;
  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000B164(v4, (uint64_t)qword_100093E18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received incoming connection", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = objc_msgSend(*(id *)(*sub_1000060F4((_QWORD *)(v1 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args), *(_QWORD *)(v1 + OBJC_IVAR____TtC15assessmentagent8AEAAgent_args + 24))+ 152), "connectionCanRegisterAsAssessmentSource:", a1);
  v10 = v9;
  if ((_DWORD)v9)
  {
    v11 = objc_msgSend(objc_allocWithZone((Class)AEAssessmentStateSourceRegisteringXPCInterfaceFactory), "init");
    v12 = objc_msgSend(v11, "makeInterface");

    objc_msgSend(a1, "setExportedInterface:", v12);
    objc_msgSend(a1, "setExportedObject:", v2);
    v13 = &selRef_resume;
  }
  else
  {
    v14 = Logger.logObject.getter(v9);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Invalid assessment course. Invalidating connection.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v13 = &selRef_invalidate;
  }
  objc_msgSend(a1, *v13);
  return v10;
}

_QWORD *sub_10001B9A8(_QWORD *a1)
{
  destroy for AEAAgent.Arguments(a1);
  return a1;
}

_QWORD *sub_10001B9D4(_QWORD *a1)
{
  destroy for AEATaskSource(a1);
  return a1;
}

uint64_t sub_10001BA08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001BA2C()
{
  uint64_t v0;

  return sub_10000A128(*(uint64_t (**)(_QWORD))(v0 + 16));
}

uint64_t sub_10001BA38(uint64_t *a1)
{
  uint64_t v1;

  return sub_10001A628(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t sub_10001BA50()
{
  uint64_t *v0;

  return sub_10001B1B4(v0 + 2, v0[3], v0[4], v0[5]);
}

uint64_t sub_10001BA60()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_10001BA94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t *);
  char v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(void (**)(uint64_t *))(v1 + 24);
  v4 = *((_BYTE *)a1 + 8);
  v5 = *a1;
  v6 = v4;
  dispatch_group_leave(*(dispatch_group_t *)(v2 + 24));
  if (v3)
    v3(&v5);
}

uint64_t sub_10001BAE0(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_10001BAEC(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for AEAUpdateAssessmentModeTask(a2, a1);
  return a2;
}

uint64_t sub_10001BB28(uint64_t a1)
{
  destroy for AEAUpdateAssessmentModeTask(a1);
  return a1;
}

uint64_t sub_10001BB5C(_QWORD *a1)
{
  uint64_t v1;

  return sub_10001ABF0(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10001BB68()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001BB98()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10001BBD4()
{
  uint64_t *v0;

  sub_10001AF3C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10001BBE0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001BC04()
{
  uint64_t v0;

  return sub_100019664(v0);
}

void sub_10001BC0C()
{
  uint64_t v0;

  sub_10001982C(v0);
}

uint64_t sub_10001BC14(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEAAgent.Arguments(a2, a1);
  return a2;
}

uint64_t sub_10001BC48()
{
  _QWORD *v0;

  sub_100004D60(v0 + 2);
  swift_unknownObjectRelease(v0[7]);
  sub_100004D60(v0 + 9);
  swift_release(v0[14]);
  sub_100004D60(v0 + 15);
  swift_release(v0[21]);
  return swift_deallocObject(v0, 176, 7);
}

void sub_10001BC94()
{
  sub_100018F54();
}

uint64_t storeEnumTagSinglePayload for AEAAgent.AgentError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10001BCDC + 4 * byte_100066768[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10001BCFC + 4 * byte_10006676D[v4]))();
}

_BYTE *sub_10001BCDC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10001BCFC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10001BD04(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10001BD0C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10001BD14(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10001BD1C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AEAAgent.AgentError()
{
  return &type metadata for AEAAgent.AgentError;
}

unint64_t sub_10001BD3C()
{
  unint64_t result;

  result = qword_1000903D0[0];
  if (!qword_1000903D0[0])
  {
    result = swift_getWitnessTable(&unk_10006688C, &type metadata for AEAAgent.AgentError);
    atomic_store(result, qword_1000903D0);
  }
  return result;
}

uint64_t sub_10001BDC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 88));
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.RawPointer + 64;
      v5[3] = &unk_1000668E8;
      v5[4] = &unk_100066900;
      v5[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      result = swift_initClassMetadata2(a1, 0, 6, v5, a1 + 136);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_10001BE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  v13[0] = *(_QWORD *)(a2 + 16);
  v13[1] = a3;
  v13[2] = v8;
  v14 = a4;
  v15 = *(_OWORD *)(a2 + 32);
  v16 = v9;
  v10 = _s17AEADeltaPublisherV17DeltaSubscriptionCMa(0, (uint64_t)v13);
  v11 = sub_10001DF08(v4, a1);
  v14 = v10;
  *(_QWORD *)&v15 = swift_getWitnessTable(&unk_100066AA8, v10);
  v13[0] = v11;
  dispatch thunk of Subscriber.receive(subscription:)(v13, a3, a4);
  return sub_100004D60(v13);
}

uint64_t sub_10001BF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = *(_QWORD *)(a9 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a8, a7, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v19 = swift_getAssociatedTypeWitness(0, v17, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  if ((static Array<A>.== infix(_:_:)(a1, a4, v19, a10) & 1) == 0
    || (static Array<A>.== infix(_:_:)(a2, a5, v19, a10) & 1) == 0)
  {
    return 0;
  }
  v20 = swift_getAssociatedTypeWitness(0, a11, v19, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v21 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a11, v19, v20, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable)+ 8);
  return static Array<A>.== infix(_:_:)(a3, a6, v20, v21);
}

uint64_t sub_10001C078(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return sub_10001BF34(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4], a3[5], a3[6]) & 1;
}

uint64_t sub_10001C0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001BE80(a1, a4, a2, a3);
}

uint64_t *sub_10001C0DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  swift_slowDealloc(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 152)), -1, -1);
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v3 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = (uint64_t)v0 + *(_QWORD *)(*v0 + 144);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 88));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_10000849C((uint64_t)v0 + *(_QWORD *)(*v0 + 168));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 176)));
  return v0;
}

uint64_t sub_10001C190()
{
  uint64_t *v0;

  v0 = sub_10001C0DC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t _s17AEADeltaPublisherV17DeltaSubscriptionCMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s17AEADeltaPublisherV17DeltaSubscriptionCMn);
}

void sub_10001C1BC()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  os_unfair_lock_lock(v1);
  sub_10001C208(v0);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_10001C208(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedConformanceWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  char v36[24];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v40 = type metadata accessor for Optional(0, v4);
  v5 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v7 = (char *)&v29 - v6;
  v8 = v3[11];
  v9 = type metadata accessor for Optional(0, v8);
  result = __chkstk_darwin(v9);
  v13 = (char *)&v29 - v12;
  v14 = v3[20];
  if ((*(_BYTE *)(a1 + v14) & 1) == 0)
  {
    v31 = v11;
    v32 = v1;
    *(_BYTE *)(a1 + v14) = 1;
    v15 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 168);
    swift_beginAccess(v15, v36, 0, 0);
    sub_100008454(v15, (uint64_t)&v37);
    if (*((_QWORD *)&v38 + 1))
    {
      sub_100008380((uint64_t)&v37, (uint64_t)v33);
      sub_10000849C((uint64_t)&v37);
      v29 = v9;
      v30 = v5;
      v16 = v7;
      v17 = v4;
      v19 = v34;
      v18 = v35;
      sub_1000060F4(v33, v34);
      v20 = v19;
      v4 = v17;
      v7 = v16;
      v9 = v29;
      dispatch thunk of Cancellable.cancel()(v20, *(_QWORD *)(v18 + 8));
      v5 = v30;
      sub_100004D60(v33);
    }
    else
    {
      sub_10000849C((uint64_t)&v37);
    }
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    swift_beginAccess(v15, v33, 33, 0);
    sub_10000840C((uint64_t)&v37, v15);
    swift_endAccess(v33);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v13, 1, 1, v8);
    v21 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 144);
    swift_beginAccess(v21, &v37, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 40))(v21, v13, v9);
    swift_endAccess(&v37);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v7, 1, 1, v4);
    v22 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 136);
    swift_beginAccess(v22, &v37, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v22, v7, v40);
    swift_endAccess(&v37);
    swift_beginAccess(a1 + *(_QWORD *)(*(_QWORD *)a1 + 176), &v37, 33, 0);
    v23 = v3[16];
    v24 = *(_QWORD *)(v3[14] + 8);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3[12], v4, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
    v26 = swift_getAssociatedTypeWitness(255, v24, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
    v27 = swift_getAssociatedTypeWitness(255, v23, v26, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v23, v26, v27, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
    type metadata accessor for Dictionary(0, v27, v26, AssociatedConformanceWitness);
    Dictionary.removeAll(keepingCapacity:)(0);
    return swift_endAccess(&v37);
  }
  return result;
}

uint64_t sub_10001C548(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t (*v4)();
  uint64_t (*v6[2])();

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
  os_unfair_lock_lock(v3);
  sub_10001C5B0(v1, a1, v6);
  os_unfair_lock_unlock(v3);
  v4 = v6[1];
  v6[0]();
  return swift_release(v4);
}

uint64_t sub_10001C5B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];

  if ((*(_BYTE *)(result + *(_QWORD *)(*(_QWORD *)result + 160)) & 1) == 0)
  {
    v5 = result + *(_QWORD *)(*(_QWORD *)result + 168);
    swift_beginAccess(v5, v7, 0, 0);
    sub_100008454(v5, (uint64_t)&v8);
    if (v9)
    {
      sub_1000084DC(&v8, (uint64_t)v10);
      sub_1000084DC(v10, (uint64_t)&v8);
      v6 = swift_allocObject(&unk_100083BE8, 64, 7);
      result = sub_1000084DC(&v8, v6 + 16);
      *(_QWORD *)(v6 + 56) = a2;
      *a3 = sub_100008518;
      a3[1] = (uint64_t (*)())v6;
      return result;
    }
    result = sub_10000849C((uint64_t)&v8);
  }
  *a3 = Publishers.AEACombineLatestMany.init(_:);
  a3[1] = 0;
  return result;
}

void sub_10001C68C(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
  os_unfair_lock_lock(v3);
  sub_10001C6E0(v1, a1);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_10001C6E0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE v5[40];
  _BYTE v6[40];

  if ((*(_BYTE *)(result + *(_QWORD *)(*(_QWORD *)result + 160)) & 1) == 0)
  {
    v2 = result;
    sub_100008380(a2, (uint64_t)v6);
    sub_1000083C4((uint64_t)v6, (uint64_t)v5);
    v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 168);
    swift_beginAccess(v3, v4, 33, 0);
    sub_10000840C((uint64_t)v5, v3);
    return swift_endAccess(v4);
  }
  return result;
}

void sub_10001C76C(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
  os_unfair_lock_lock(v3);
  sub_10001C7C0(v1, a1);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_10001C7C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v15[24];
  uint64_t v16;

  v16 = a2;
  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for Optional(0, v4);
  v9 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v12 = &v15[-v11 - 8];
  if ((*(_BYTE *)(a1 + v3[20]) & 1) == 0)
  {
    v13 = a1 + v3[18];
    swift_beginAccess(v13, v15, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v13, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
    {
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v12, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      dispatch thunk of Subscriber.receive(completion:)(v16, v4, v3[13]);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return result;
}

uint64_t (*sub_10001C928(void (*a1)(char *, uint64_t)))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  os_unfair_lock_s *v3;
  uint64_t (*v4)@<X0>(uint64_t *@<X8>);
  uint64_t (*v6[2])@<X0>(uint64_t *@<X8>);

  v3 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 152));
  os_unfair_lock_lock(v3);
  sub_10001C99C(v1, a1, v6);
  os_unfair_lock_unlock(v3);
  v4 = v6[1];
  ((void (*)(uint64_t (**__return_ptr)@<X0>(uint64_t *@<X8>)))v6[0])(v6);
  swift_release(v4);
  return v6[0];
}

uint64_t sub_10001C99C@<X0>(uint64_t *a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t (**a3)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)@<X0>(uint64_t *@<X8>);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t (**v32)@<X0>(uint64_t *@<X8>);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char v38[24];
  uint64_t (**v39)@<X0>(uint64_t *@<X8>);

  v36 = a2;
  v39 = a3;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 88);
  v7 = type metadata accessor for Optional(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v33 - v10;
  v37 = *(_QWORD *)(v6 - 8);
  v12 = *(_QWORD *)(v37 + 64);
  v13 = __chkstk_darwin(v9);
  result = __chkstk_darwin(v13);
  v17 = (char *)&v33 - v16;
  if ((*((_BYTE *)a1 + *(_QWORD *)(v5 + 160)) & 1) != 0)
  {
    v18 = 0;
    v19 = sub_1000078C8;
  }
  else
  {
    v34 = v15;
    v35 = v3;
    v20 = (uint64_t)a1 + *(_QWORD *)(v5 + 144);
    swift_beginAccess(v20, v38, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v20, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v11, 1, v6) == 1)
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v18 = 0;
      v19 = sub_1000078C8;
    }
    else
    {
      v21 = v37;
      v22 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
      v22(v17, v11, v6);
      v36 = (void (*)(char *, uint64_t))sub_10001CBDC(v36);
      v33 = v23;
      v25 = v24;
      v26 = v34;
      v22(v34, v17, v6);
      v27 = *(unsigned __int8 *)(v21 + 80);
      v28 = (v27 + 72) & ~v27;
      v29 = (v12 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
      v18 = swift_allocObject(&unk_100083BC0, v29 + 24, v27 | 7);
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v5 + 80);
      *(_QWORD *)(v18 + 24) = v6;
      *(_QWORD *)(v18 + 32) = *(_QWORD *)(v5 + 96);
      *(_QWORD *)(v18 + 40) = *(_QWORD *)(v5 + 104);
      *(_OWORD *)(v18 + 48) = *(_OWORD *)(v5 + 112);
      *(_QWORD *)(v18 + 64) = *(_QWORD *)(v5 + 128);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v22)(v18 + v28, v26, v6);
      v30 = (_QWORD *)(v18 + v29);
      v31 = v33;
      *v30 = v36;
      v30[1] = v31;
      v30[2] = v25;
      v19 = sub_10001DFF8;
    }
  }
  v32 = v39;
  *v39 = v19;
  v32[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v18;
  return result;
}

_QWORD *sub_10001CBDC(void (*a1)(char *, uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  uint64_t *v34;
  void (*v35)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *result;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  int v66;
  char *v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  void (*v94)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v95)(char *, uint64_t, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116[24];
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[5];

  v111 = a1;
  v2 = *(_QWORD *)(*v1 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)(*v1 + 112) + 8);
  v4 = *(_QWORD *)(*v1 + 96);
  v92 = *v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, *(_QWORD *)(v92 + 80), &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v100 = v3;
  v6 = swift_getAssociatedTypeWitness(255, v3, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v7 = swift_getAssociatedTypeWitness(255, v2, v6, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v8 = type metadata accessor for Optional(0, v7);
  v9 = __chkstk_darwin(v8);
  v91 = (char *)&v89 - v10;
  v107 = *(_QWORD *)(v7 - 8);
  v11 = __chkstk_darwin(v9);
  v106 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v103 = (char *)&v89 - v13;
  v14 = swift_checkMetadataState(0, v6);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v93 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v99 = (char *)&v89 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v89 - v20;
  v110 = type metadata accessor for Optional(0, v14);
  v98 = *(_QWORD *)(v110 - 8);
  v22 = __chkstk_darwin(v110);
  v102 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v89 - v25;
  __chkstk_darwin(v24);
  v105 = (char *)&v89 - v27;
  v28 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v89 - v30;
  v108 = swift_getAssociatedTypeWitness(0, v3, v28, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Iterator);
  v90 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v109 = (char *)&v89 - v32;
  v101 = v2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v14, v7, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v118 = Dictionary.init()(v7, v14, AssociatedConformanceWitness);
  v34 = (uint64_t *)(v104 + *(_QWORD *)(*(_QWORD *)v104 + 176));
  swift_beginAccess(v34, v116, 1, 0);
  v89 = v34;
  v117 = *v34;
  swift_bridgeObjectRetain(v117);
  v115 = Array.init()(v14);
  v114 = Array.init()(v14);
  v113 = Array.init()(v7);
  v35 = *(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v29 + 16);
  v36 = v105;
  v35(v31, (void (*)(_QWORD, _QWORD))v111, v28);
  v37 = v100;
  dispatch thunk of Sequence.makeIterator()(v28, v100);
  v38 = v37;
  v39 = v108;
  v100 = swift_getAssociatedConformanceWitness(v38, v28, v108, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  dispatch thunk of IteratorProtocol.next()(v39);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v41 = v40(v36, 1, v14);
  v104 = AssociatedConformanceWitness;
  if (v41 != 1)
  {
    v49 = *(void (**)(_QWORD, _QWORD, _QWORD))(v15 + 32);
    v97 = v7;
    v96 = v26;
    v94 = v49;
    v112 = v15;
    v95 = v40;
    v49(v21, v36, v14);
    while (1)
    {
      v63 = v103;
      v64 = v101;
      dispatch thunk of Identifiable.id.getter(v14, v101);
      Dictionary.subscript.getter(v63, v117, v7, v14, AssociatedConformanceWitness);
      v65 = *(void (**)(char *, uint64_t))(v107 + 8);
      v65(v63, v7);
      v66 = v40(v26, 1, v14);
      v111 = v65;
      if (v66 == 1)
      {
        v50 = v98;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v26, v110);
        v51 = v112;
        v52 = v50;
        v53 = v93;
        (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v93, v21, v14);
        v54 = type metadata accessor for Array(0, v14);
        Array.append(_:)(v53, v54);
      }
      else
      {
        v67 = v99;
        v49(v99, v26, v14);
        v68 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v21, v14, *(_QWORD *)(v92 + 120));
        v51 = v112;
        if ((v68 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v112 + 8))(v99, v14);
          v52 = v98;
        }
        else
        {
          v52 = v98;
          v69 = v93;
          (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v93, v21, v14);
          v70 = type metadata accessor for Array(0, v14);
          Array.append(_:)(v69, v70);
          (*(void (**)(char *, uint64_t))(v51 + 8))(v99, v14);
        }
      }
      v55 = v106;
      dispatch thunk of Identifiable.id.getter(v14, v64);
      v56 = v21;
      v57 = v102;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v102, v56, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v57, 0, 1, v14);
      v7 = v97;
      AssociatedConformanceWitness = v104;
      v58 = type metadata accessor for Dictionary(0, v97, v14, v104);
      Dictionary.subscript.setter(v57, v55, v58);
      dispatch thunk of Identifiable.id.getter(v14, v64);
      v59 = v112;
      Dictionary.removeValue(forKey:)(v55, v58);
      v111(v55, v7);
      v60 = v57;
      v21 = v56;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v60, v110);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v14);
      v61 = v105;
      dispatch thunk of IteratorProtocol.next()(v108);
      v40 = v95;
      v62 = v95(v61, 1, v14);
      v26 = v96;
      v49 = v94;
      if (v62 == 1)
        break;
      v94(v21, v61, v14);
    }
  }
  (*(void (**)(char *, uint64_t))(v90 + 8))(v109, v108);
  v42 = v117;
  v111 = (void (*)(char *, uint64_t))v117;
  if ((v117 & 0xC000000000000001) != 0)
  {
    if (v117 < 0)
      v43 = v117;
    else
      v43 = v117 & 0xFFFFFFFFFFFFFF8;
    v44 = __CocoaDictionary.makeIterator()(v43) | 0x8000000000000000;
    result = (_QWORD *)swift_bridgeObjectRetain(v42);
    v112 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
  }
  else
  {
    v71 = swift_bridgeObjectRetain(v117);
    result = _NativeDictionary.makeIterator()(v119, v71, v7, v14, v104);
    v44 = v119[0];
    v112 = v119[1];
    v46 = v119[2];
    v47 = v119[3];
    v48 = v119[4];
  }
  v72 = v91;
  v73 = v106;
  v74 = v107;
  v110 = v46;
  v75 = (unint64_t)(v46 + 64) >> 6;
  while ((v44 & 0x8000000000000000) != 0)
  {
    v83 = __CocoaDictionary.Iterator.nextKey()(result);
    if (!v83)
      goto LABEL_40;
    v84 = v83;
    _forceBridgeFromObjectiveC<A>(_:_:)(v83, v7, v7);
    swift_unknownObjectRelease(v84);
LABEL_19:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v72, 0, 1, v7);
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v73, v72, v7);
    v78 = type metadata accessor for Array(0, v7);
    result = (_QWORD *)Array.append(_:)(v73, v78);
  }
  if (v48)
  {
    v76 = __clz(__rbit64(v48));
    v48 &= v48 - 1;
    v77 = v76 | (v47 << 6);
LABEL_18:
    (*(void (**)(char *, unint64_t, uint64_t))(v74 + 16))(v72, *(_QWORD *)(v44 + 48) + *(_QWORD *)(v74 + 72) * v77, v7);
    goto LABEL_19;
  }
  v79 = v47 + 1;
  if (!__OFADD__(v47, 1))
  {
    if (v79 >= v75)
      goto LABEL_40;
    v80 = *(_QWORD *)(v112 + 8 * v79);
    v81 = v47 + 1;
    if (!v80)
    {
      v81 = v47 + 2;
      if (v47 + 2 >= v75)
        goto LABEL_40;
      v80 = *(_QWORD *)(v112 + 8 * v81);
      if (!v80)
      {
        v81 = v47 + 3;
        if (v47 + 3 >= v75)
          goto LABEL_40;
        v80 = *(_QWORD *)(v112 + 8 * v81);
        if (!v80)
        {
          v81 = v47 + 4;
          if (v47 + 4 >= v75)
            goto LABEL_40;
          v80 = *(_QWORD *)(v112 + 8 * v81);
          if (!v80)
          {
            v81 = v47 + 5;
            if (v47 + 5 >= v75)
              goto LABEL_40;
            v80 = *(_QWORD *)(v112 + 8 * v81);
            if (!v80)
            {
              v82 = v47 + 6;
              while (v75 != v82)
              {
                v80 = *(_QWORD *)(v112 + 8 * v82++);
                if (v80)
                {
                  v81 = v82 - 1;
                  goto LABEL_37;
                }
              }
LABEL_40:
              v85 = v89;
              v86 = v111;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v72, 1, 1, v7);
              sub_100013A7C(v44);
              v87 = *v85;
              *v85 = v118;
              swift_bridgeObjectRelease(v87);
              v88 = v115;
              swift_bridgeObjectRelease(v86);
              return (_QWORD *)v88;
            }
          }
        }
      }
    }
LABEL_37:
    v48 = (v80 - 1) & v80;
    v77 = __clz(__rbit64(v80)) + (v81 << 6);
    v47 = v81;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001D588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_10001D594(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *sub_10001D5C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *sub_10001D610(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for AEARunningBoardApplication(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *sub_10001D698(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_10001D6E4(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10001D72C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t _s17AEADeltaPublisherV5DeltaVMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s17AEADeltaPublisherV5DeltaVMn);
}

uint64_t sub_10001D778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_10001D780(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 56);
    return 0;
  }
  return result;
}

uint64_t sub_10001D7EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10001D89C + 4 * byte_1000668C0[(v7 - 1)]))();
}

void sub_10001D8EC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_100000004;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t _s17AEADeltaPublisherVMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s17AEADeltaPublisherVMn);
}

uint64_t sub_10001DAA8(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16), a1, &protocol requirements base descriptor for Publisher, &associated conformance descriptor for Publisher.Publisher.Failure: Error);
}

uint64_t sub_10001DAC4(uint64_t a1)
{
  return sub_10001C548(a1);
}

void sub_10001DAE4(uint64_t a1)
{
  sub_10001C68C(a1);
}

uint64_t (*sub_10001DB04(void (*a1)(char *, uint64_t)))@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001C928(a1);
}

void sub_10001DB24(uint64_t a1)
{
  sub_10001C76C(a1);
}

void sub_10001DB44()
{
  sub_10001C1BC();
}

uint64_t sub_10001DB64(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100066A00, a1);
}

uint64_t sub_10001DB74(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 80), a1, &protocol requirements base descriptor for Publisher, &associated conformance descriptor for Publisher.Publisher.Failure: Error);
}

uint64_t sub_10001DB94(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100066A28, a1);
}

uint64_t sub_10001DBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t WitnessTable;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[7];
  uint64_t v48;

  v3 = v2;
  v44 = a2;
  v42 = a1;
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v6 = type metadata accessor for Optional(0, v5);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v43 = (char *)&v34 - v7;
  v8 = v4[10];
  v9 = type metadata accessor for Optional(0, v8);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - v10;
  v12 = v2 + v4[17];
  v34 = *(_QWORD *)(v8 - 8);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  v35(v12, 1, 1, v8);
  v13 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 144);
  v37 = *(_QWORD *)(v5 - 8);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
  v38(v13, 1, 1, v5);
  v14 = *(_QWORD *)(*(_QWORD *)v2 + 152);
  v15 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v3 + v14) = v15;
  *v15 = 0;
  *(_BYTE *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 160)) = 0;
  v16 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 168);
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)(v16 + 32) = 0;
  v17 = *(_QWORD *)(*(_QWORD *)v3 + 176);
  v18 = v4[16];
  v39 = v4[14];
  v19 = *(_QWORD *)(v39 + 8);
  v36 = v4[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v36, v8, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v21 = swift_getAssociatedTypeWitness(255, v19, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v22 = swift_getAssociatedTypeWitness(0, v18, v21, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v23 = swift_checkMetadataState(0, v21);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v18, v23, v22, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  *(_QWORD *)(v3 + v17) = Dictionary.init()(v22, v23, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v11, v42, v8);
  v35((uint64_t)v11, 0, 1, v8);
  v25 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 136);
  swift_beginAccess(v25, v47, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 40))(v25, v11, v41);
  swift_endAccess(v47);
  v26 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v44, v5);
  v38((uint64_t)v26, 0, 1, v5);
  v27 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 144);
  swift_beginAccess(v27, v47, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 40))(v27, v26, v46);
  swift_endAccess(v47);
  v47[6] = v18;
  v48 = v3;
  v28 = v4[13];
  v29 = v4[15];
  v47[0] = v8;
  v47[1] = v5;
  v30 = v36;
  v47[2] = v36;
  v47[3] = v28;
  v47[4] = v39;
  v47[5] = v29;
  v31 = _s17AEADeltaPublisherV17DeltaSubscriptionCMa(0, (uint64_t)v47);
  WitnessTable = swift_getWitnessTable(&unk_100066A50, v31);
  dispatch thunk of Publisher.receive<A>(subscriber:)(&v48, v31, WitnessTable, v8, v30);
  return v3;
}

uint64_t sub_10001DF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[3];
  uint64_t v10;

  v5 = *(_QWORD *)(v2 + 128);
  v6 = *(_OWORD *)(v2 + 96);
  v9[0] = *(_OWORD *)(v2 + 80);
  v9[1] = v6;
  v9[2] = *(_OWORD *)(v2 + 112);
  v10 = v5;
  v7 = _s17AEADeltaPublisherV17DeltaSubscriptionCMa(0, (uint64_t)v9);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  return sub_10001DBA4(a1, a2);
}

uint64_t sub_10001DF78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 72) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 24;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  v7 = (_QWORD *)(v0 + v5);
  swift_bridgeObjectRelease(*v7);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[2]);
  return swift_deallocObject(v0, v6, v4);
}

uint64_t sub_10001DFF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  __int128 *v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v3 = (__int128 *)(v1
                  + ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 64)
                    + ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 80))
                    + 7) & 0xFFFFFFFFFFFFFFF8));
  v4 = *((_QWORD *)v3 + 2);
  v6 = *v3;
  v7 = v4;
  result = dispatch thunk of Subscriber.receive(_:)(&v6);
  *a1 = result;
  return result;
}

uint64_t sub_10001E06C()
{
  uint64_t v0;

  sub_100004D60((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10001E090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (qword_10008E5F0 != -1)
    swift_once(&qword_10008E5F0, sub_1000155B4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000B164(v4, (uint64_t)qword_100093E48);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Main participant did change", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  return sub_10001E174(a1, a2);
}

uint64_t sub_10001E174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100093970);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E1BC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_100004D20(&qword_100090790);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_10001E230(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = sub_10001F494(0, &qword_1000907C8, SBSConnectedDisplayInfo_ptr);
  **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  return swift_continuation_resume(v3);
}

uint64_t type metadata accessor for AEAConcreteSpringBoardPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent32AEAConcreteSpringBoardPrimitives);
}

id sub_10001E2A4()
{
  char *v0;
  char *v1;
  void *v2;
  objc_super v4;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion];
  if (v2)
  {
    *(_QWORD *)&v1[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion] = 0;
    objc_msgSend(v2, "invalidate");
    swift_unknownObjectRelease(v2);
  }
  CATAsyncStreamMulticaster.finish()();
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for AEAConcreteSpringBoardPrimitives.AppRestrictionsMonitoringSession();
  return objc_msgSendSuper2(&v4, "dealloc");
}

char *sub_10001E390(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  id v17;
  void *v18;
  char *v19;
  id v20;
  uint64_t v21;
  objc_super v23;

  v3 = v2;
  v6 = sub_100004D20(&qword_1000907B0);
  __chkstk_darwin(v6);
  v8 = (id *)((char *)&v23.receiver - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (uint64_t *)&v3[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_invalidationHandler];
  *v9 = 0;
  v9[1] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion] = 0;
  v10 = OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_streamMulticaster;
  *v8 = 1;
  (*(void (**)(_QWORD *, _QWORD))(v11 + 104))(v8, enum case for CATAsyncStreamMulticaster.BufferingPolicy.bufferingNewest<A>(_:));
  v12 = sub_100004D20(&qword_1000907B8);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = v3;
  *(_QWORD *)&v3[v10] = CATAsyncStreamMulticaster.init(bufferingPolicy:)(v8);
  v14 = *v9;
  v15 = v9[1];
  *v9 = a1;
  v9[1] = a2;
  swift_retain(a2);
  sub_100008370(v14, v15);

  v16 = (objc_class *)type metadata accessor for AEAConcreteSpringBoardPrimitives.AppRestrictionsMonitoringSession();
  v23.receiver = v13;
  v23.super_class = v16;
  v17 = objc_msgSendSuper2(&v23, "init");
  v18 = (void *)objc_opt_self(SBSApplicationRestrictionMonitoringService);
  v19 = (char *)v17;
  v20 = objc_msgSend(v18, "registerMonitor:", v19);

  swift_release(a2);
  v21 = *(_QWORD *)&v19[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion];
  *(_QWORD *)&v19[OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion] = v20;
  swift_unknownObjectRelease(v21);
  return v19;
}

void sub_10001E528()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0
                + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion);
  if (v1)
  {
    *(_QWORD *)(v0
              + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion) = 0;
    objc_msgSend(v1, "invalidate");
    swift_unknownObjectRelease(v1);
  }
  CATAsyncStreamMulticaster.finish()();
}

void sub_10001E6B0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion);
  if (v2)
  {
    *(_QWORD *)(v1
              + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_monitoringAssertion) = 0;
    objc_msgSend(v2, "invalidate");
    swift_unknownObjectRelease(v2);
  }
  CATAsyncStreamMulticaster.finish()();
  v3 = (_QWORD *)(v1
                + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_invalidationHandler);
  v4 = *(void (**)(uint64_t))(v1
                                      + OBJC_IVAR____TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession_invalidationHandler);
  if (v4)
  {
    v5 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    swift_retain(v5);
    v6 = sub_100008370((uint64_t)v4, v5);
    v4(v6);
    sub_100008370((uint64_t)v4, v5);
  }
}

uint64_t type metadata accessor for AEAConcreteSpringBoardPrimitives.AppRestrictionsMonitoringSession()
{
  return objc_opt_self(_TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907732AppRestrictionsMonitoringSession);
}

uint64_t sub_10001E7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return swift_task_switch(sub_10001E7EC, 0, 0);
}

uint64_t sub_10001E7EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[18];
  v2 = v0[17];
  *(_QWORD *)(v0[19] + 16) = 0;
  v3 = (void *)objc_opt_self(SBSHomeScreenConfigurationService);
  v0[14] = v2;
  v0[15] = v1;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256;
  v0[12] = sub_10002448C;
  v0[13] = &unk_100083D48;
  v4 = _Block_copy(v0 + 10);
  v0[20] = v4;
  v5 = v0[15];
  swift_retain(v1);
  swift_release(v5);
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_10001E904;
  v6 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10001EA18;
  v0[13] = &unk_100083D70;
  v0[14] = v6;
  objc_msgSend(v3, "beginConfigurationSessionWithInvalidationHandler:completion:", v4, v0 + 10);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_10001E904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 168) = v1;
  if (v1)
    v2 = sub_10001E9B8;
  else
    v2 = sub_10001E964;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001E964()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(const void **)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 144));
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 128);
  swift_unknownObjectRelease(v3);
  _Block_release(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 152));
}

uint64_t sub_10001E9B8()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(const void **)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  swift_willThrow();
  swift_release(v3);
  swift_release(v2);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EA18(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100004D20(&qword_100090790);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    swift_unknownObjectRetain(a2);
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001EAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  return swift_task_switch(sub_10001EAC8, 0, 0);
}

uint64_t sub_10001EAC8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void **)(*(_QWORD *)(v0 + 152) + 16);
  *(_QWORD *)(v0 + 160) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  if (*(_QWORD *)(v0 + 128))
  {
    v3 = *(_QWORD *)(v0 + 136);
    v2 = *(_QWORD *)(v0 + 144);
    v4 = objc_allocWithZone((Class)SBSHomeScreenConfiguration);
    swift_unknownObjectRetain(v1);
    v5 = objc_msgSend(v4, "init");
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "setName:", v6);

    v7 = sub_10001EEFC(v3, v2);
    objc_msgSend(v5, "setLayout:", v7);

  }
  else
  {
    swift_unknownObjectRetain(v1);
    v5 = 0;
  }
  v9 = v0 + 16;
  *(_QWORD *)(v0 + 168) = v5;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10001EC30;
  v10 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v11 = (_QWORD *)(v0 + 80);
  v11[1] = 0x40000000;
  v11[2] = sub_10001E1BC;
  v11[3] = &unk_100083D30;
  v11[4] = v10;
  objc_msgSend(v1, "applyConfiguration:completion:", v5, v11);
  return swift_continuation_await(v9);
}

uint64_t sub_10001EC30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 176) = v1;
  if (v1)
    v2 = sub_10001ECCC;
  else
    v2 = sub_10001EC90;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001EC90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);

  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001ECCC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 160);
  swift_willThrow();
  swift_unknownObjectRelease(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001ED18()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return swift_task_switch(sub_10001ED30, 0, 0);
}

uint64_t sub_10001ED30()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v0 + 128) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = v0 + 16;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10001EDE0;
  v4 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v5 = (_QWORD *)(v0 + 80);
  v5[1] = 0x40000000;
  v5[2] = sub_10001E1BC;
  v5[3] = &unk_100083D18;
  v5[4] = v4;
  objc_msgSend(v2, "endConfigurationSessionWithCompletion:", v5);
  return swift_continuation_await(v3);
}

uint64_t sub_10001EDE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_10001EE74;
  else
    v2 = sub_10001EE40;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001EE40()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EE74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_willThrow();
  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EEB8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for AEAConcreteSpringBoardPrimitives.HomeScreenConfigurationSession()
{
  return objc_opt_self(_TtCC15assessmentagent32AEAConcreteSpringBoardPrimitivesP33_045FAD156806D8E8B8D6866051B4907730HomeScreenConfigurationSession);
}

id sub_10001EEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Class isa;
  Class v22;
  id v23;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v5 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *v5;
      v7 = objc_allocWithZone((Class)SBSHomeScreenItemApplication);
      swift_bridgeObjectRetain(v6);
      v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
      v9 = objc_msgSend(v7, "initWithBundleIdentifier:", v8);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
      specialized ContiguousArray._endMutation()(v11);
      v5 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(a1);
  }
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain(a2);
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    v13 = (uint64_t *)(a2 + 40);
    do
    {
      v14 = *v13;
      v15 = objc_allocWithZone((Class)SBSHomeScreenItemApplication);
      swift_bridgeObjectRetain(v14);
      v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
      v17 = objc_msgSend(v15, "initWithBundleIdentifier:", v16);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v18 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v17);
      specialized ContiguousArray._endMutation()(v19);
      v13 += 2;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(a2);
  }
  v20 = objc_allocWithZone((Class)SBSHomeScreenConfigurationLayout);
  sub_10001F494(0, &qword_100090798, SBSHomeScreenItem_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v22 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v23 = objc_msgSend(v20, "initWithItems:dockItems:", isa, v22);

  return v23;
}

uint64_t sub_10001F14C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001F15C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001F164()
{
  return swift_task_switch(sub_10001F178, 0, 0);
}

uint64_t sub_10001F178()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = objc_msgSend(objc_allocWithZone((Class)SBSExternalDisplayService), "init");
  v0[16] = v2;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_10001F230;
  v3 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_10001E230;
  v4[3] = &unk_100083D88;
  v4[4] = v3;
  objc_msgSend(v2, "getConnectedDisplayInfoWithCompletionHandler:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_10001F230()
{
  return swift_task_switch(sub_10001F27C, 0, 0);
}

void sub_10001F27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __objc2_prop *v4;
  __objc2_prop *v5;
  id v6;
  void *v7;
  __objc2_prop *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *(_QWORD *)(v0 + 120);
  if (!((unint64_t)v22 >> 62))
  {
    v1 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v1)
      goto LABEL_3;
LABEL_21:
    v3 = _swiftEmptyArrayStorage;
LABEL_22:
    v20 = *(void **)(v21 + 128);
    swift_bridgeObjectRelease(v22);

    (*(void (**)(_QWORD *))(v21 + 8))(v3);
    return;
  }
  if (v22 < 0)
    v19 = *(_QWORD *)(v0 + 120);
  else
    v19 = v22 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v22);
  v1 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v22);
  if (!v1)
    goto LABEL_21;
LABEL_3:
  if (v1 >= 1)
  {
    v2 = 0;
    v3 = _swiftEmptyArrayStorage;
    v4 = &stru_10008D000;
    v5 = &stru_10008D000;
    do
    {
      if ((v22 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v22);
      else
        v6 = *(id *)(v22 + 8 * v2 + 32);
      v7 = v6;
      if ((objc_msgSend(v6, v4[117].attr) & 1) == 0)
      {
        v8 = v5;
        v9 = objc_msgSend(v7, v5[118].name);
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v12 = v11;

        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = sub_10005431C(0, v3[2] + 1, 1, v3);
        v14 = v3[2];
        v13 = v3[3];
        if (v14 >= v13 >> 1)
          v3 = sub_10005431C((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
        v3[2] = v14 + 1;
        v15 = &v3[2 * v14];
        v15[4] = v10;
        v15[5] = v12;
        v5 = v8;
        v16 = objc_msgSend(v7, v8[118].name);
        if (!v16)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v18 = v17;
          v16 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v18);
        }
        objc_msgSend(*(id *)(v21 + 128), "setMirroringEnabled:forDisplay:", 1, v16);

        v4 = &stru_10008D000;
      }
      ++v2;

    }
    while (v1 != v2);
    goto LABEL_22;
  }
  __break(1u);
}

uint64_t sub_10001F494(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10001F4CC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
  return swift_task_switch(sub_10001F4E4, 0, 0);
}

uint64_t sub_10001F4E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 16);
  *(_QWORD *)(v0 + 136) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = v0 + 16;
  v3 = objc_msgSend(objc_allocWithZone((Class)SBSExternalDisplayService), "init");
  *(_QWORD *)(v0 + 144) = v3;
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10001F5C4;
  v4 = swift_continuation_init(v0 + 16, 0);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v5 = (_QWORD *)(v0 + 80);
  v5[1] = 0x40000000;
  v5[2] = sub_10001E230;
  v5[3] = &unk_100083DA0;
  v5[4] = v4;
  objc_msgSend(v3, "getConnectedDisplayInfoWithCompletionHandler:", v5);
  return swift_continuation_await(v2);
}

uint64_t sub_10001F5C4()
{
  return swift_task_switch(sub_10001F610, 0, 0);
}

uint64_t sub_10001F610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  void *v9;
  id v10;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 120);
  if ((unint64_t)v1 >> 62)
    goto LABEL_38;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    v3 = 0;
    v4 = *(_QWORD **)(v38 + 128);
    v36 = v1 & 0xFFFFFFFFFFFFFF8;
    v37 = v1 & 0xC000000000000001;
    v5 = v4[4];
    v6 = v4[5];
    v34 = *(_QWORD *)(v38 + 136);
    v35 = v1 + 32;
    v33 = v4;
    v32 = v4 + 9;
    while (1)
    {
      if (v37)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
      }
      else
      {
        if (v3 >= *(_QWORD *)(v36 + 16))
          goto LABEL_36;
        v10 = *(id *)(v35 + 8 * v3);
      }
      v9 = v10;
      if (__OFADD__(v3++, 1))
      {
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      v12 = objc_msgSend(v10, "identifier");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16 = v5 == v13 && v6 == v15;
      v7 = v6;
      if (v16)
        goto LABEL_5;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v13, v15, 0) & 1) != 0)
        goto LABEL_4;
      if (v34 != 1)
      {
        v19 = v33[6];
        v20 = v33[7];
        if (v19 == v13 && v20 == v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v13, v15, 0) & 1) != 0)
        {
LABEL_4:
          v7 = v15;
LABEL_5:
          swift_bridgeObjectRelease(v7);
          v8 = objc_msgSend(v9, "identifier");
          if (!v8)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(0);
            v18 = v17;
            v8 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v18);
          }
          objc_msgSend(*(id *)(v38 + 144), "setMirroringEnabled:forDisplay:", 0, v8, v30, v31);

          v9 = v8;
          goto LABEL_8;
        }
        if (v34 != 2)
          break;
      }
      swift_bridgeObjectRelease(v15);
LABEL_8:

      if (v3 == v2)
        goto LABEL_41;
    }
    v30 = v2;
    v31 = v1;
    v21 = v32;
    v22 = 2;
    while (1)
    {
      v1 = v22 + 1;
      if (__OFADD__(v22, 1))
        break;
      v23 = *(v21 - 1);
      v24 = *v21;
      v25 = v23 == v13 && v24 == v15;
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v13, v15, 0) & 1) != 0)
      {
        v7 = v15;
        v2 = v30;
        v1 = v31;
        goto LABEL_5;
      }
      ++v22;
      v21 += 2;
      if (v1 == *(_QWORD *)(v38 + 136))
      {
        swift_bridgeObjectRelease(v15);
        v2 = v30;
        v1 = v31;
        goto LABEL_8;
      }
    }
LABEL_37:
    __break(1u);
LABEL_38:
    v26 = v1;
    if (v1 >= 0)
      v1 &= 0xFFFFFFFFFFFFFF8uLL;
    swift_bridgeObjectRetain(v26);
    v27 = v1;
    v1 = v26;
    v2 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v1);
  }
LABEL_41:
  v28 = *(void **)(v38 + 144);
  swift_bridgeObjectRelease(v1);

  return (*(uint64_t (**)(void))(v38 + 8))();
}

uint64_t type metadata accessor for AEAConcreteExternalSubsystemRestrictionPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent49AEAConcreteExternalSubsystemRestrictionPrimitives);
}

uint64_t sub_10001F8E4()
{
  return sub_10001F90C((uint64_t)&unk_100066D60, (uint64_t)&unk_100066D88);
}

uint64_t sub_10001F8F8()
{
  return sub_10001F90C((uint64_t)&unk_100066DA8, (uint64_t)&unk_100066DD0);
}

uint64_t sub_10001F90C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v7;

  v4 = ((uint64_t (*)(void))swift_getKeyPath)();
  KeyPath = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, v4, KeyPath);
  swift_release(v4);
  swift_release(KeyPath);
  return v7;
}

uint64_t sub_10001F974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(uint64_t@<X8>);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v0 = sub_100004D20(&qword_100090B58);
  v53 = *(_QWORD *)(v0 - 8);
  v54 = v0;
  __chkstk_darwin(v0);
  v52 = (char *)&v50 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100004D20(&qword_100090B60);
  v2 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100004D20(&qword_100090B68);
  __chkstk_darwin(v51);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008E5F0 != -1)
    swift_once(&qword_10008E5F0, sub_1000155B4);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000B164(v7, (uint64_t)qword_100093E48);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Resuming participant matching", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = v55;
  v13 = *(_QWORD *)(v55 + 16);
  v14 = sub_100062EE4();
  *(_QWORD *)&v57 = v14;
  v15 = sub_100004D20(&qword_100090B70);
  v16 = sub_1000057A4(&qword_100090B78, &qword_100090B70, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v17 = sub_1000057A4(&qword_100090B80, &qword_100090B88, (uint64_t)&protocol conformance descriptor for Set<A>);
  Publisher<>.removeDuplicates()(v15, v16, v17);
  swift_release(v14);
  sub_100008380(v12 + 64, (uint64_t)&v57);
  v18 = swift_allocObject(&unk_100083E50, 64, 7);
  *(_QWORD *)(v18 + 16) = v13;
  sub_1000084DC(&v57, v18 + 24);
  v19 = v50;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v6, v4, v50);
  v20 = v51;
  v21 = (void (**)(uint64_t@<X8>))&v6[*(int *)(v51 + 76)];
  *v21 = sub_100021898;
  v21[1] = (void (*)(uint64_t@<X8>))v18;
  v22 = *(void (**)(char *, uint64_t))(v2 + 8);
  swift_unknownObjectRetain(v13);
  v22(v4, v19);
  v23 = swift_allocObject(&unk_100083E78, 24, 7);
  swift_weakInit(v23 + 16, v12);
  v24 = sub_1000057A4(&qword_100090B90, &qword_100090B68, (uint64_t)&unk_100065758);
  v25 = Publisher<>.sink(receiveValue:)(sub_1000218C8, v23, v20, v24);
  swift_release(v23);
  sub_1000187D0((uint64_t)v6, &qword_100090B68);
  v26 = v12 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager_subscriptions;
  swift_beginAccess(v12 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager_subscriptions, &v57, 33, 0);
  v27 = sub_100004D20((uint64_t *)&unk_100093280);
  v28 = sub_1000057A4(&qword_10008FE58, (uint64_t *)&unk_100093280, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v26, v27, v28);
  swift_endAccess(&v57);
  swift_release(v25);
  v29 = sub_100020B30();
  v30 = v29;
  v31 = *(_QWORD *)(v29 + 16);
  if (v31)
  {
    v32 = v27;
    v56 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v31);
    v33 = v30 + 32;
    do
    {
      sub_100008380(v33, (uint64_t)&v57);
      v34 = v58;
      v35 = v59;
      sub_1000060F4(&v57, v58);
      v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v34, v35);
      v37 = sub_100004D60(&v57);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v37);
      v38 = v56[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v38);
      v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
      specialized ContiguousArray._endMutation()(v39);
      v33 += 40;
      --v31;
    }
    while (v31);
    v40 = v56;
    swift_bridgeObjectRelease(v30);
    v27 = v32;
  }
  else
  {
    swift_bridgeObjectRelease(v29);
    v40 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)&v57 = v40;
  v41 = sub_100004D20(&qword_100090B98);
  v42 = sub_100004D20(&qword_10008F308);
  v43 = sub_1000057A4(&qword_100090BA0, &qword_100090B98, (uint64_t)&protocol conformance descriptor for Publishers.AEACombineLatestMany<A>);
  v44 = v52;
  Publisher.map<A>(_:)(sub_100020054, 0, v41, v42, v43);
  swift_bridgeObjectRelease(v40);
  v45 = swift_allocObject(&unk_100083E78, 24, 7);
  swift_weakInit(v45 + 16, v55);
  v46 = sub_1000057A4(&qword_100090BA8, &qword_100090B58, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v47 = v54;
  v48 = Publisher<>.sink(receiveValue:)(sub_1000218D0, v45, v54, v46);
  swift_release(v45);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v44, v47);
  swift_beginAccess(v26, &v57, 33, 0);
  AnyCancellable.store<A>(in:)(v26, v27, v28);
  swift_endAccess(&v57);
  return swift_release(v48);
}

void sub_10001FEF0(void *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  Class isa;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(a1, "auditTokenForData:", isa);

  if (v10)
  {
    v7 = a2[3];
    v8 = a2[4];
    sub_1000060F4(a2, v7);
    (*(void (**)(id, uint64_t, uint64_t))(v8 + 8))(v10, v7, v8);

  }
  else
  {
    v9 = type metadata accessor for AEAParticipant.Process(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a3, 1, 1, v9);
  }
}

uint64_t sub_10001FFC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_100066D60);
    v7 = swift_getKeyPath(&unk_100066D88);
    v8 = v2;
    swift_bridgeObjectRetain(v2);
    return static Published.subscript.setter(&v8, v5, KeyPath, v7);
  }
  return result;
}

uint64_t sub_100020054@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(v3);
    for (i = 0; i != v4; ++i)
    {
      v6 = *(_QWORD *)(v3 + 8 * i + 32);
      v7 = swift_bridgeObjectRetain(v6);
      sub_10003DD84(v7);
    }
    swift_bridgeObjectRelease(v3);
  }
  v8 = sub_1000415C4((uint64_t)_swiftEmptyArrayStorage);
  result = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  *a2 = v8;
  return result;
}

uint64_t sub_1000200F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = swift_bridgeObjectRetain(v2);
    sub_100021624(v6);
    KeyPath = swift_getKeyPath(&unk_100066DA8);
    v8 = swift_getKeyPath(&unk_100066DD0);
    v9 = v2;
    return static Published.subscript.setter(&v9, v5, KeyPath, v8);
  }
  return result;
}

uint64_t sub_100020184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v30[3];

  v1 = v0;
  v2 = sub_100004D20(&qword_100093970);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v30[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v30[-1] - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v30[-1] - v9;
  if (qword_10008E5F0 != -1)
    swift_once(&qword_10008E5F0, sub_1000155B4);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10000B164(v11, (uint64_t)qword_100093E48);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Suspending participant matching", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  swift_beginAccess(v1 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager_subscriptions, v30, 33, 0);
  sub_100051D40();
  swift_endAccess(v30);
  KeyPath = swift_getKeyPath(&unk_100066D60);
  v17 = swift_getKeyPath(&unk_100066D88);
  v30[0] = &_swiftEmptySetSingleton;
  swift_retain(v1);
  static Published.subscript.setter(v30, v1, KeyPath, v17);
  sub_100021624((uint64_t)&_swiftEmptySetSingleton);
  v18 = swift_getKeyPath(&unk_100066DA8);
  v19 = swift_getKeyPath(&unk_100066DD0);
  v30[0] = &_swiftEmptySetSingleton;
  swift_retain(v1);
  static Published.subscript.setter(v30, v1, v18, v19);
  v20 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 1, 1, v20);
  v21 = sub_100020494();
  sub_10001E174((uint64_t)v10, (uint64_t)v8);
  v22 = swift_getKeyPath(&unk_100066D18);
  v23 = swift_getKeyPath(&unk_100066D40);
  sub_10001E174((uint64_t)v8, (uint64_t)v5);
  swift_retain(v21);
  static Published.subscript.setter(v5, v21, v22, v23);
  sub_1000187D0((uint64_t)v8, &qword_100093970);
  swift_release(v21);
  sub_1000187D0((uint64_t)v10, &qword_100093970);
  v24 = sub_100058D08((uint64_t)_swiftEmptyArrayStorage);
  v25 = sub_100020624();
  v26 = swift_getKeyPath(&unk_100066CD0);
  v27 = swift_getKeyPath(&unk_100066CF8);
  v30[0] = v24;
  return static Published.subscript.setter(v30, v25, v26, v27);
}

uint64_t sub_100020494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = sub_100004D20(&qword_100090B48);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004D20(&qword_100093970);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___mainParticipantSource;
  v12 = *(_QWORD *)(v0
                  + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___mainParticipantSource);
  if (v12)
  {
    v13 = *(_QWORD *)(v0
                    + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___mainParticipantSource);
  }
  else
  {
    v14 = type metadata accessor for AEAMainParticipantSource(0);
    v13 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v15 = v13 + OBJC_IVAR____TtC15assessmentagent24AEAMainParticipantSource__mainParticipant;
    v16 = type metadata accessor for AEAParticipant(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
    sub_10001E174((uint64_t)v10, (uint64_t)v8);
    Published.init(initialValue:)(v8, v5);
    sub_1000187D0((uint64_t)v10, &qword_100093970);
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v15, v4, v1);
    v17 = *(_QWORD *)(v0 + v11);
    *(_QWORD *)(v0 + v11) = v13;
    swift_retain(v13);
    swift_release(v17);
    v12 = 0;
  }
  swift_retain(v12);
  return v13;
}

uint64_t sub_100020624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[3];

  v1 = v0;
  v2 = sub_100004D20(&qword_10008F2F0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___configurationParticipantSource;
  v7 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___configurationParticipantSource);
  if (v7)
  {
    v8 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___configurationParticipantSource);
  }
  else
  {
    swift_beginAccess(v0 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager__candidateProcesses, v15, 33, 0);
    v9 = sub_100004D20(&qword_100090B38);
    Published.projectedValue.getter(v9);
    swift_endAccess(v15);
    v10 = type metadata accessor for AEAConfigurationParticipantSource(0);
    v8 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v15[0] = _swiftEmptyDictionarySingleton;
    v11 = sub_100004D20(&qword_100090B40);
    Published.init(initialValue:)(v15, v11);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource_candidateProcesses, v5, v2);
    v12 = *(_QWORD *)(v1 + v6);
    *(_QWORD *)(v1 + v6) = v8;
    swift_retain(v8);
    swift_release(v12);
    v7 = 0;
  }
  swift_retain(v7);
  return v8;
}

uint64_t sub_10002077C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  _BYTE v15[24];

  v1 = v0;
  v2 = sub_100004D20(&qword_10008F2F0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___voiceOverParticipantSource;
  v7 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___voiceOverParticipantSource);
  if (v7)
  {
    v8 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___voiceOverParticipantSource);
  }
  else
  {
    swift_beginAccess(v0 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager__candidateProcesses, v15, 33, 0);
    v9 = sub_100004D20(&qword_100090B38);
    Published.projectedValue.getter(v9);
    swift_endAccess(v15);
    v10 = type metadata accessor for AEACandidateMatchingParticipantSource(0);
    v8 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))(v8 + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_candidateProcesses, v5, v2);
    v11 = (uint64_t (**)(uint64_t))(v8
                                           + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_configurationBuilder);
    *v11 = sub_1000208B0;
    v11[1] = 0;
    v12 = *(_QWORD *)(v1 + v6);
    *(_QWORD *)(v1 + v6) = v8;
    swift_retain(v8);
    swift_release(v12);
    v7 = 0;
  }
  swift_retain(v7);
  return v8;
}

uint64_t sub_1000208B0(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 24) != 1)
    return 0;
  if (qword_10008E610 != -1)
    swift_once(&qword_10008E610, sub_100017D1C);
  v1 = byte_100093EA8;
  swift_bridgeObjectRetain(qword_100093EB0);
  return v1;
}

uint64_t sub_100020928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  _BYTE v15[24];

  v1 = v0;
  v2 = sub_100004D20(&qword_10008F2F0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___assessmentServicesParticipantSource;
  v7 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___assessmentServicesParticipantSource);
  if (v7)
  {
    v8 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___assessmentServicesParticipantSource);
  }
  else
  {
    swift_beginAccess(v0 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager__candidateProcesses, v15, 33, 0);
    v9 = sub_100004D20(&qword_100090B38);
    Published.projectedValue.getter(v9);
    swift_endAccess(v15);
    v10 = type metadata accessor for AEACandidateMatchingParticipantSource(0);
    v8 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))(v8 + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_candidateProcesses, v5, v2);
    v11 = (uint64_t (**)(uint64_t))(v8
                                           + OBJC_IVAR____TtC15assessmentagent37AEACandidateMatchingParticipantSource_configurationBuilder);
    *v11 = sub_100020A5C;
    v11[1] = 0;
    v12 = *(_QWORD *)(v1 + v6);
    *(_QWORD *)(v1 + v6) = v8;
    swift_retain(v8);
    swift_release(v12);
    v7 = 0;
  }
  swift_retain(v7);
  return v8;
}

uint64_t sub_100020A5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_10008E708 != -1)
    swift_once(&qword_10008E708, sub_10006095C);
  v2 = qword_100094070;
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(v3);
  LOBYTE(v2) = sub_1000244B8(v4, v3, v2);
  swift_bridgeObjectRelease(v3);
  if ((v2 & 1) == 0)
    return 0;
  if (qword_10008E610 != -1)
    swift_once(&qword_10008E610, sub_100017D1C);
  v5 = byte_100093EA8;
  swift_bridgeObjectRetain(qword_100093EB0);
  return v5;
}

uint64_t sub_100020B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___participantSources;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___participantSources);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___participantSources);
  }
  else
  {
    v4 = sub_100004D20(&qword_100090B30);
    v3 = swift_allocObject(v4, 192, 7);
    *(_OWORD *)(v3 + 16) = xmmword_100066C20;
    v5 = sub_100020494();
    *(_QWORD *)(v3 + 56) = type metadata accessor for AEAMainParticipantSource(0);
    *(_QWORD *)(v3 + 64) = &off_1000853D8;
    *(_QWORD *)(v3 + 32) = v5;
    v6 = sub_100020624();
    *(_QWORD *)(v3 + 96) = type metadata accessor for AEAConfigurationParticipantSource(0);
    *(_QWORD *)(v3 + 104) = &off_1000851C8;
    *(_QWORD *)(v3 + 72) = v6;
    v7 = sub_10002077C();
    v8 = type metadata accessor for AEACandidateMatchingParticipantSource(0);
    *(_QWORD *)(v3 + 136) = v8;
    *(_QWORD *)(v3 + 144) = &off_100081B60;
    *(_QWORD *)(v3 + 112) = v7;
    v9 = sub_100020928();
    *(_QWORD *)(v3 + 176) = v8;
    *(_QWORD *)(v3 + 184) = &off_100081B60;
    *(_QWORD *)(v3 + 152) = v9;
    v10 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v10);
    v2 = 0;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

_QWORD *sub_100020C2C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  swift_unknownObjectRelease(v0[2]);
  sub_100004D60(v0 + 3);
  sub_100004D60(v0 + 8);
  v1 = (char *)v0 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager__candidateProcesses;
  v2 = sub_100004D20(&qword_100090B38);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager__participants;
  v4 = sub_100004D20(&qword_100090B18);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager_subscriptions));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___mainParticipantSource));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___configurationParticipantSource));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___voiceOverParticipantSource));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___assessmentServicesParticipantSource));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager____lazy_storage___participantSources));
  return v0;
}

uint64_t sub_100020D18()
{
  uint64_t v0;

  sub_100020C2C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100020D3C()
{
  return type metadata accessor for AEAmacOSParticipantManager(0);
}

uint64_t type metadata accessor for AEAmacOSParticipantManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1000908E8;
  if (!qword_1000908E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAmacOSParticipantManager);
  return result;
}

void sub_100020D80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v6[0] = "\b";
  v6[1] = &unk_100066C88;
  v6[2] = &unk_100066C88;
  sub_100020E5C(319, &qword_1000908F8, (uint64_t *)&unk_10008F250);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_100020E5C(319, (unint64_t *)&unk_100090900, &qword_10008F308);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[6] = &unk_100066CA0;
      v6[7] = &unk_100066CA0;
      v6[8] = &unk_100066CA0;
      v6[9] = &unk_100066CA0;
      v6[10] = &unk_100066CA0;
      swift_updateClassMetadata2(a1, 256, 11, v6, a1 + 80);
    }
  }
}

void sub_100020E5C(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_100005520(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100020EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = sub_100004D20(&qword_100090B08);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_100004D20(&qword_100090B10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + OBJC_IVAR____TtC15assessmentagent26AEAmacOSParticipantManager__participants, v16, 33, 0);
  v9 = sub_100004D20(&qword_100090B18);
  Published.projectedValue.getter(v9);
  swift_endAccess(v16);
  v10 = sub_1000057A4(&qword_100090B20, &qword_100090B08, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v11 = sub_1000057A4(&qword_10008F300, &qword_10008F308, (uint64_t)&protocol conformance descriptor for Set<A>);
  Publisher<>.removeDuplicates()(v1, v10, v11);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  v12 = sub_1000057A4(&qword_100090B28, &qword_100090B10, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v13 = Publisher.eraseToAnyPublisher()(v5, v12);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  return v13;
}

uint64_t sub_100021044@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;

  v2 = sub_100020494();
  KeyPath = swift_getKeyPath(&unk_100066D18);
  v4 = swift_getKeyPath(&unk_100066D40);
  static Published.subscript.getter(a1, v2, KeyPath, v4);
  swift_release(v2);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_1000210B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v2 = sub_100004D20(&qword_100093970);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v12 - v6;
  v8 = sub_100020494();
  sub_10001E174(a1, (uint64_t)v7);
  KeyPath = swift_getKeyPath(&unk_100066D18);
  v10 = swift_getKeyPath(&unk_100066D40);
  sub_10001E174((uint64_t)v7, (uint64_t)v5);
  swift_retain(v8);
  static Published.subscript.setter(v5, v8, KeyPath, v10);
  sub_1000187D0((uint64_t)v7, &qword_100093970);
  swift_release(v8);
  return sub_1000187D0(a1, &qword_100093970);
}

uint64_t sub_1000211C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_100020624();
  KeyPath = swift_getKeyPath(&unk_100066CD0);
  v4 = swift_getKeyPath(&unk_100066CF8);
  v6 = a1;
  return static Published.subscript.setter(&v6, v2, KeyPath, v4);
}

uint64_t sub_100021234(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100066D60);
  v5 = swift_getKeyPath(&unk_100066D88);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000212AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_100021324(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  v4 = swift_bridgeObjectRetain(*a1);
  sub_100021624(v4);
  KeyPath = swift_getKeyPath(&unk_100066DA8);
  v6 = swift_getKeyPath(&unk_100066DD0);
  v8 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

uint64_t sub_1000213A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100066CD0);
  v5 = swift_getKeyPath(&unk_100066CF8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100021420(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100066CD0);
  v5 = swift_getKeyPath(&unk_100066CF8);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10002149C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100066D18);
  v5 = swift_getKeyPath(&unk_100066D40);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_100021508(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100004D20(&qword_100093970);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  sub_10001E174(a1, (uint64_t)&v14 - v8);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_100066D18);
  v12 = swift_getKeyPath(&unk_100066D40);
  sub_10001E174((uint64_t)v9, (uint64_t)v7);
  swift_retain(v10);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_1000187D0((uint64_t)v9, &qword_100093970);
}

uint64_t sub_1000215FC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000212AC(a1, (uint64_t)&unk_100066D60, (uint64_t)&unk_100066D88, a2);
}

void sub_100021624(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_10008E5F0 != -1)
    swift_once(&qword_10008E5F0, sub_1000155B4);
  v2 = type metadata accessor for Logger(0);
  sub_10000B164(v2, (uint64_t)qword_100093E48);
  v3 = swift_bridgeObjectRetain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = type metadata accessor for AEAParticipant(0);
    v9 = sub_100021824();
    v10 = swift_bridgeObjectRetain(a1);
    v11 = Set.description.getter(v10, v8, v9);
    v13 = v12;
    swift_bridgeObjectRelease(a1);
    v14 = sub_100059C74(v11, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Publishing Participants: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
}

uint64_t sub_1000217FC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000212AC(a1, (uint64_t)&unk_100066DA8, (uint64_t)&unk_100066DD0, a2);
}

unint64_t sub_100021824()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090B50;
  if (!qword_100090B50)
  {
    v1 = type metadata accessor for AEAParticipant(255);
    result = swift_getWitnessTable(&unk_100066570, v1);
    atomic_store(result, (unint64_t *)&qword_100090B50);
  }
  return result;
}

uint64_t sub_10002186C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100004D60((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100021898(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10001FEF0(*(void **)(v1 + 16), (_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000218A4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000218C8(uint64_t *a1)
{
  uint64_t v1;

  return sub_10001FFC0(a1, v1);
}

uint64_t sub_1000218D0(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000200F0(a1, v1);
}

uint64_t sub_1000218D8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t destroy for AEARunningApplication(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  return sub_100006118(a1[2], a1[3]);
}

uint64_t initializeWithCopy for AEARunningApplication(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v4);
  sub_1000218D8(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for AEARunningApplication(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_1000218D8(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  sub_100006118(v8, v9);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AEARunningApplication(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AEARunningApplication(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_100006118(v6, v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARunningApplication(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARunningApplication(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEARunningApplication()
{
  return &type metadata for AEARunningApplication;
}

Swift::Int sub_100021B04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt32 v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((_DWORD *)v0 + 8);
  Hasher.init(_seed:)(v7, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v1, v2);
  swift_bridgeObjectRelease(v2);
  sub_1000218D8(v3, v4);
  Data.hash(into:)(v7, v3, v4);
  sub_100006118(v3, v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void sub_100021BA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  Swift::UInt32 v7;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = *((_DWORD *)v1 + 8);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  sub_1000218D8(v5, v6);
  Data.hash(into:)(a1, v5, v6);
  sub_100006118(v5, v6);
  Hasher._combine(_:)(v7);
}

Swift::Int sub_100021C34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt32 v6;
  _QWORD v8[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = *((_DWORD *)v1 + 8);
  Hasher.init(_seed:)(v8, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v8, v2, v3);
  swift_bridgeObjectRelease(v3);
  sub_1000218D8(v4, v5);
  Data.hash(into:)(v8, v4, v5);
  sub_100006118(v4, v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t sub_100021CD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  return sub_1000218D8(v2, v3);
}

uint64_t sub_100021CE0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  int v6;
  _OWORD v7[2];
  int v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_DWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_DWORD *)(a2 + 32);
  return sub_100022048((uint64_t *)v5, v7) & 1;
}

unint64_t sub_100021D2C()
{
  unint64_t result;

  result = qword_100090BB0;
  if (!qword_100090BB0)
  {
    result = swift_getWitnessTable(&unk_100066E28, &type metadata for AEARunningApplication);
    atomic_store(result, (unint64_t *)&qword_100090BB0);
  }
  return result;
}

void sub_100021D70(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100021DCC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_10005B298((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_100006118(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_100021F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10005B298(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

uint64_t sub_100022048(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
    __asm { BR              X11 }
  return result;
}

void *sub_1000221C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *result;

  v3 = swift_bridgeObjectRetain(*a1);
  result = sub_100022FF8(v3);
  *a2 = result;
  return result;
}

uint64_t sub_100022204(uint64_t a1)
{
  NSURL *v1;
  Class isa;
  NSURL *baseURL;
  _QWORD *v5;
  Class v6;
  _QWORD *v7;
  Class v8;
  objc_class *v9;
  Class v10;
  _QWORD *v12;
  _QWORD *v13;

  isa = v1[2].super.isa;
  if (isa)
    -[objc_class releaseRestrictions](isa, "releaseRestrictions");
  baseURL = v1->_baseURL;
  -[NSURL clearUUIDCache](baseURL, "clearUUIDCache");
  v12 = _swiftEmptyArrayStorage;
  v13 = _swiftEmptyArrayStorage;
  swift_retain(v1);
  sub_100023814(a1, &v12, v1, (uint64_t)&v13);
  swift_release(v1);
  v5 = v12;
  sub_10000622C();
  swift_bridgeObjectRetain(v5);
  v6 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  v7 = v13;
  type metadata accessor for UUID(0);
  swift_bridgeObjectRetain(v7);
  v8 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  v9 = (objc_class *)-[NSURL restrictNetworkExcludingProcessesWithIdentifiers:machOUUIDs:](baseURL, "restrictNetworkExcludingProcessesWithIdentifiers:machOUUIDs:", v6, v8);

  v10 = v1[2].super.isa;
  v1[2].super.isa = v9;
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v5);
  return swift_unknownObjectRelease(v10);
}

uint64_t sub_100022334(id *a1, _QWORD *a2, NSURL *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  id *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(_QWORD, _QWORD, _QWORD);
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  __n128 v60;
  void (*v61)(char *, _QWORD *);
  __n128 v62;
  void (*v63)(char *, uint64_t, uint64_t, _QWORD *, __n128);
  NSURL *baseURL;
  char *v65;
  void *v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  NSObject *v74;
  os_log_type_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  __n128 v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  os_log_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  __n128 v93;
  char *v94;
  os_log_t v95;
  uint64_t v96;
  int v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id *v102;
  _QWORD *v103;
  id *v104;
  NSURL *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v99 = a4;
  v105 = a3;
  v6 = sub_100004D20(&qword_10008F508);
  v7 = __chkstk_darwin(v6);
  v108 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v103 = (_QWORD **)((char *)&v91 - v9);
  v109 = (_QWORD *)type metadata accessor for URL(0);
  v10 = *(v109 - 1);
  v11 = __chkstk_darwin(v109);
  v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v106 = (char *)&v91 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v91 - v16;
  v18 = type metadata accessor for AEAParticipant(0);
  v19 = __chkstk_darwin(v18);
  v104 = (id *)((char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  v22 = (char *)&v91 - v21;
  if (qword_10008E5E8 != -1)
    swift_once(&qword_10008E5E8, sub_100015588);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10000B164(v23, (uint64_t)qword_100093E30);
  v25 = sub_100018848((uint64_t)a1, (uint64_t)v22);
  v101 = v24;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter();
  v28 = os_log_type_enabled(v26, v27);
  v107 = v10;
  v94 = v17;
  v98 = v13;
  if (v28)
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v112 = v30;
    *(_DWORD *)v29 = 136446210;
    v102 = (id *)a2;
    v31 = sub_100017208();
    v33 = v32;
    v110 = sub_100059C74(v31, v32, &v112);
    a2 = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v33);
    sub_10001888C((uint64_t)v22);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Creating policy for %{public}s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    v34 = v30;
    v10 = v107;
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    sub_10001888C((uint64_t)v22);
  }

  v35 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInt:", objc_msgSend(*a1, "processIdentifier"));
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
  v37 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v36 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18);
  v38 = v108;
  if (v37 >= v36 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
  v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
  specialized Array._endMutation()(v39);
  v40 = v104;
  v41 = sub_100018848((uint64_t)a1, (uint64_t)v104);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v102 = a1;
    v44 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v44 = 67240192;
    v45 = objc_msgSend(*v40, "processIdentifier");
    sub_10001888C((uint64_t)v40);
    LODWORD(v112) = v45;
    a1 = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 4, v44 + 4, v44 + 8);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Granting access for process %{public}d", v44, 8u);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    sub_10001888C((uint64_t)v40);
  }
  v46 = v109;
  v47 = (uint64_t)v94;

  v48 = (char *)a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v49 = (uint64_t)&v48[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
  v50 = (void (*)(_QWORD, _QWORD, _QWORD))v103;
  sub_10000615C(v49, (uint64_t)v103);
  v104 = *(id **)(v10 + 48);
  if (((unsigned int (*)(_QWORD, uint64_t, _QWORD *))v104)(v50, 1, v46) == 1)
    return sub_1000061A4((uint64_t)v50);
  v103 = *(_QWORD **)(v10 + 32);
  ((void (*)(uint64_t, _QWORD, _QWORD *))v103)(v47, v50, v46);
  if ((sub_100023588(v47) & 1) != 0)
  {
    sub_1000060F4(&v105->_clients, (uint64_t)v105[1]._urlString);
    v52 = sub_100015088(v47);
  }
  else
  {
    v53 = sub_100004D20(&qword_100090CC0);
    v54 = *(unsigned __int8 *)(v10 + 80);
    v55 = (v54 + 32) & ~v54;
    v52 = (_QWORD *)swift_allocObject(v53, v55 + *(_QWORD *)(v10 + 72), v54 | 7);
    *((_OWORD *)v52 + 1) = xmmword_100065EB0;
    (*(void (**)(char *, uint64_t, _QWORD *))(v10 + 16))((char *)v52 + v55, v47, v46);
  }
  v56 = v106;
  v57 = v52[2];
  v91 = v52;
  if (v57)
  {
    v58 = v52;
    v59 = (char *)v52 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v102 = *(id **)(v10 + 72);
    v109 = *(_QWORD **)(v10 + 16);
    v60 = swift_bridgeObjectRetain(v58);
    v60.n128_u64[0] = 136446466;
    v93 = v60;
    v92 = (char *)&type metadata for Any + 8;
    while (1)
    {
      ((void (*)(char *, char *, _QWORD *))v109)(v38, v59, v46);
      v63 = *(void (**)(char *, uint64_t, uint64_t, _QWORD *, __n128))(v10 + 56);
      ((void (*)(char *, _QWORD, uint64_t, _QWORD *))v63)(v38, 0, 1, v46);
      if (((unsigned int (*)(char *, uint64_t, _QWORD *))v104)(v38, 1, v46) == 1)
        goto LABEL_28;
      ((void (*)(char *, char *, _QWORD *))v103)(v56, v38, v46);
      baseURL = v105->_baseURL;
      v65 = v56;
      URL._bridgeToObjectiveC()(v105);
      v67 = v66;
      v68 = -[NSURL machOUUIDsForExecutableURL:](baseURL, "machOUUIDsForExecutableURL:", v66);

      if (v68)
      {
        v100 = type metadata accessor for UUID(0);
        v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, v100);

        swift_bridgeObjectRetain(v69);
        sub_10003E4C8(v70);
        v71 = v98;
        ((void (*)(char *, char *, _QWORD *))v109)(v98, v65, v46);
        swift_bridgeObjectRetain(v69);
        v73 = v46;
        v74 = Logger.logObject.getter(v72);
        v75 = static os_log_type_t.info.getter();
        v76 = v75;
        if (os_log_type_enabled(v74, v75))
        {
          v77 = swift_slowAlloc(22, -1);
          v97 = v76;
          v78 = v77;
          v96 = swift_slowAlloc(64, -1);
          v112 = v96;
          *(_DWORD *)v78 = v93.n128_u32[0];
          v79 = sub_100023A8C();
          v95 = v74;
          v46 = v73;
          v80 = dispatch thunk of CustomStringConvertible.description.getter(v73, v79);
          v82 = v81;
          *(_QWORD *)(v78 + 4) = sub_100059C74(v80, v81, &v112);
          swift_bridgeObjectRelease(v82);
          v61 = *(void (**)(char *, _QWORD *))(v10 + 8);
          v61(v71, v46);
          *(_WORD *)(v78 + 12) = 2082;
          v83 = swift_bridgeObjectRetain(v69);
          v84 = Array.description.getter(v83);
          v86 = v85;
          swift_bridgeObjectRelease(v69);
          *(_QWORD *)(v78 + 14) = sub_100059C74(v84, v86, &v112);
          swift_bridgeObjectRelease_n(v69, 2);
          swift_bridgeObjectRelease(v86);
          v87 = v95;
          _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v97, "Granting access for executable at %{public}s with UUIDs %{public}s", (uint8_t *)v78, 0x16u);
          v88 = v96;
          swift_arrayDestroy(v96, 2, v92);
          swift_slowDealloc(v88, -1, -1);
          v89 = v78;
          v38 = v108;
          swift_slowDealloc(v89, -1, -1);

          goto LABEL_20;
        }
        v61 = *(void (**)(char *, _QWORD *))(v10 + 8);
        v61(v71, v73);

        swift_bridgeObjectRelease_n(v69, 2);
        v46 = v73;
      }
      else
      {
        v61 = *(void (**)(char *, _QWORD *))(v10 + 8);
      }
      v38 = v108;
LABEL_20:
      v56 = v106;
      v61(v106, v46);
      v59 = (char *)v102 + (_QWORD)v59;
      --v57;
      v10 = v107;
      if (!v57)
        goto LABEL_27;
    }
  }
  v63 = *(void (**)(char *, uint64_t, uint64_t, _QWORD *, __n128))(v10 + 56);
  v62 = swift_bridgeObjectRetain(v52);
LABEL_27:
  v63(v38, 1, 1, v46, v62);
LABEL_28:
  v90 = v91;
  swift_bridgeObjectRelease(v91);
  (*(void (**)(char *, _QWORD *))(v10 + 8))(v94, v46);
  return swift_bridgeObjectRelease(v90);
}

uint64_t sub_100022BB8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_100004D60(v0 + 3);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_unknownObjectRelease(v0[10]);
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for AEANetworkAssertion()
{
  return objc_opt_self(_TtC15assessmentagentP33_FFB78CD65631B764937338653272C3FE19AEANetworkAssertion);
}

uint64_t sub_100022C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_100090D24);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100014AC4;
  v3[2] = v2;
  return swift_task_switch(sub_100024068, 0, 0);
}

uint64_t sub_100022C7C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[13] = a1;
  v2[14] = v1;
  v3 = sub_100004D20(&qword_100090CF8);
  v2[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[16] = v4;
  v2[17] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100022CE0, 0, 0);
}

uint64_t sub_100022CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = *(_QWORD *)(v0 + 112);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 120);
  v26 = *(_QWORD *)(v0 + 128);
  v27 = *(_QWORD **)(v0 + 104);
  v23 = *(_QWORD *)(v1 + 24);
  sub_100008380(v1 + 32, v0 + 16);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = sub_100013D84(v0 + 16, v3);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v6, v4, v3);
  v7 = *v6;
  v8 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  *(_QWORD *)(v0 + 80) = v8;
  *(_QWORD *)(v0 + 88) = &off_1000832C0;
  *(_QWORD *)(v0 + 56) = v7;
  v9 = type metadata accessor for AEANetworkAssertion();
  v10 = (_QWORD *)swift_allocObject(v9, 88, 7);
  v11 = sub_100013D84(v0 + 56, v8);
  v12 = *(_QWORD *)(v8 - 8);
  v13 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(v13, v11, v8);
  v14 = *v13;
  v10[6] = v8;
  v10[7] = &off_1000832C0;
  v10[8] = v2;
  v10[9] = 0;
  v10[10] = 0;
  v10[2] = v23;
  v10[3] = v14;
  swift_unknownObjectRetain(v23);
  swift_retain(v2);
  sub_100004D60((_QWORD *)(v0 + 56));
  swift_task_dealloc(v13);
  sub_100004D60((_QWORD *)(v0 + 16));
  swift_task_dealloc(v6);
  *(_QWORD *)(v0 + 96) = v2;
  swift_retain(v2);
  v15 = sub_100004D20(&qword_100090D00);
  v16 = sub_100004D20(&qword_10008F308);
  v17 = sub_1000057A4((unint64_t *)&qword_100090D08, &qword_100090D00, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_1000221C4, 0, v15, v16, v17);
  swift_release(v2);
  v18 = sub_1000057A4(&qword_100090D10, &qword_100090CF8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  swift_retain(v10);
  v19 = Publisher<>.sink(receiveValue:)(sub_100023EF8, v10, v25, v18);
  swift_release(v10);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  v20 = v10[9];
  v10[9] = v19;
  swift_release(v20);
  v27[3] = &type metadata for AEANetworkDeactivation;
  v27[4] = &off_100084118;
  v21 = (_QWORD *)swift_allocObject(&unk_100084060, 48, 7);
  *v27 = v21;
  v21[2] = 0xD000000000000024;
  v21[3] = 0x800000010006C940;
  v21[4] = 4;
  v21[5] = v10;
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100022FA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100090CF4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000CB20;
  return sub_100022C7C(a1);
}

void *sub_100022FF8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_100023154((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = swift_release(v2);
    if (v1)
      swift_willThrow(v9);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v7, -1);
    bzero(v10, v7);
    v8 = sub_100023154((unint64_t *)v10, v6, v2);
    swift_release(v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v8;
}

void *sub_100023154(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a2;
  v23 = a1;
  v4 = type metadata accessor for AEAParticipant(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = (void *)__chkstk_darwin(v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = 0;
  v9 = 0;
  v10 = *(_QWORD *)(a3 + 56);
  v25 = a3 + 56;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v9 << 6);
      goto LABEL_5;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v14)
      goto LABEL_24;
    v19 = *(_QWORD *)(v25 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_24;
      v19 = *(_QWORD *)(v25 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v14)
          goto LABEL_24;
        v19 = *(_QWORD *)(v25 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_5:
    sub_100018848(*(_QWORD *)(a3 + 48) + *(_QWORD *)(v5 + 72) * v16, (uint64_t)v8);
    v17 = v8[*(int *)(v4 + 20)];
    result = (void *)sub_10001888C((uint64_t)v8);
    if (v17 == 1)
    {
      *(unint64_t *)((char *)v23 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return sub_1000263CC(v23, v22, v24, a3);
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v14)
    goto LABEL_24;
  v19 = *(_QWORD *)(v25 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v14)
      goto LABEL_24;
    v19 = *(_QWORD *)(v25 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

void *sub_10002335C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Swift::Int v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100004D20(&qword_100090CD8);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v38 = v1;
    v39 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v39 + 8 * v4);
      v7 = *(_QWORD *)(v3 + 40);
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v10 = v9;
      Hasher.init(_seed:)(v40, v7);
      v11 = v6;
      String.hash(into:)(v40, v8, v10);
      v12 = Hasher._finalize()();
      result = (void *)swift_bridgeObjectRelease(v10);
      v14 = -1 << *(_BYTE *)(v3 + 32);
      v15 = v12 & ~v14;
      v16 = v15 >> 6;
      v17 = *(_QWORD *)(v5 + 8 * (v15 >> 6));
      v18 = 1 << v15;
      if (((1 << v15) & v17) != 0)
      {
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15));
        v21 = v20;
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        if (v19 == v22 && v21 == v23)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v21, 2);
LABEL_4:

          goto LABEL_5;
        }
        v25 = v23;
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0);
        swift_bridgeObjectRelease(v21);
        result = (void *)swift_bridgeObjectRelease(v25);
        if ((v26 & 1) != 0)
          goto LABEL_4;
        v27 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v27;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)(v5 + 8 * (v15 >> 6));
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15));
          v21 = v29;
          v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
          if (v28 == v30 && v21 == v31)
            goto LABEL_3;
          v33 = v31;
          v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v21, v30, v31, 0);
          swift_bridgeObjectRelease(v21);
          result = (void *)swift_bridgeObjectRelease(v33);
          if ((v34 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v16) = v18 | v17;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15) = v11;
      v35 = *(_QWORD *)(v3 + 16);
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v37;
LABEL_5:
      if (++v4 == v38)
        return (void *)v3;
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_100023588(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t inited;
  NSString *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  _BYTE v26[40];
  __int128 v27;
  uint64_t v28;
  _UNKNOWN **v29;
  _QWORD v30[5];

  v25 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLResourceValues(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v24 - v10;
  v12 = sub_100004D20(&qword_100090CD0);
  inited = swift_initStackObject(v12, v26);
  *(_OWORD *)(inited + 16) = xmmword_100065EB0;
  *(_QWORD *)(inited + 32) = NSURLIsDirectoryKey;
  v14 = NSURLIsDirectoryKey;
  v15 = sub_10002335C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy(inited + 32, 1, v16);
  URL.resourceValues(forKeys:)(v15);
  v17 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, a1, v25);
  v24 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v24(v9, v11, v5);
  v18 = type metadata accessor for AEAConcreteFileSystemPrimitives.ConcreteURLResourceValues(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v19 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingURL, v4, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v19 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues, v9, v5);
  v28 = v18;
  v29 = &off_100083290;
  *(_QWORD *)&v27 = v19;
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v11, v5);
  swift_bridgeObjectRelease(v15);
  sub_1000084DC(&v27, (uint64_t)v30);
  v21 = *sub_1000060F4(v30, v30[3])
      + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues;
  swift_beginAccess(v21, &v27, 0, 0);
  v22 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v9, v21, v5);
  LOBYTE(v21) = URLResourceValues.isDirectory.getter(v22);
  v20(v9, v5);
  sub_100004D60(v30);
  return v21 & 1;
}

void sub_100023814(uint64_t a1, _QWORD *a2, NSURL *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;

  v27 = a4;
  v8 = type metadata accessor for AEAParticipant(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (id *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (char *)&v25 - v13;
  v15 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v26 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v19 = 0;
  while (v18)
  {
    v20 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v21 = v20 | (v19 << 6);
LABEL_5:
    sub_100018848(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v9 + 72) * v21, (uint64_t)v14);
    sub_100023A48((uint64_t)v14, (uint64_t)v12);
    sub_100022334(v12, a2, a3, v27);
    sub_10001888C((uint64_t)v12);
    if (v4)
      goto LABEL_24;
  }
  if (__OFADD__(v19++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v19 >= v26)
    goto LABEL_24;
  v23 = *(_QWORD *)(v25 + 8 * v19);
  if (v23)
  {
LABEL_19:
    v18 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
    goto LABEL_5;
  }
  v24 = v19 + 1;
  if (v19 + 1 >= v26)
    goto LABEL_24;
  v23 = *(_QWORD *)(v25 + 8 * v24);
  if (v23)
    goto LABEL_18;
  v24 = v19 + 2;
  if (v19 + 2 >= v26)
    goto LABEL_24;
  v23 = *(_QWORD *)(v25 + 8 * v24);
  if (v23)
    goto LABEL_18;
  v24 = v19 + 3;
  if (v19 + 3 >= v26)
    goto LABEL_24;
  v23 = *(_QWORD *)(v25 + 8 * v24);
  if (v23)
    goto LABEL_18;
  v24 = v19 + 4;
  if (v19 + 4 >= v26)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v23 = *(_QWORD *)(v25 + 8 * v24);
  if (v23)
  {
LABEL_18:
    v19 = v24;
    goto LABEL_19;
  }
  while (1)
  {
    v19 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v19 >= v26)
      goto LABEL_24;
    v23 = *(_QWORD *)(v25 + 8 * v19);
    ++v24;
    if (v23)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_100023A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100023A8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090CC8;
  if (!qword_100090CC8)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_100090CC8);
  }
  return result;
}

Swift::Int sub_100023AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100004D20(&qword_100090CE0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t destroy for AEANetworkActivation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_unknownObjectRelease(a1[3]);
  sub_100004D60(a1 + 4);
  return swift_release(a1[9]);
}

uint64_t initializeWithCopy for AEANetworkActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2 + 32;
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain(v4);
  swift_unknownObjectRetain(v5);
  v9(a1 + 32, v6, v8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_retain(v10);
  return a1;
}

_QWORD *assignWithCopy for AEANetworkActivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  sub_10000C54C(a1 + 4, a2 + 4);
  v8 = a2[9];
  v9 = a1[9];
  a1[9] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for AEANetworkActivation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for AEANetworkActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_unknownObjectRelease(v7);
  sub_100004D60((_QWORD *)(a1 + 32));
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  swift_release(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEANetworkActivation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEANetworkActivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEANetworkActivation()
{
  return &type metadata for AEANetworkActivation;
}

uint64_t sub_100023EF8(uint64_t *a1)
{
  return sub_100022204(*a1);
}

uint64_t sub_100023F00()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t destroy for AEANetworkDeactivation(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for AEANetworkDeactivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for AEANetworkDeactivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for AEANetworkDeactivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_release(v7);
  return a1;
}

ValueMetadata *type metadata accessor for AEANetworkDeactivation()
{
  return &type metadata for AEANetworkDeactivation;
}

uint64_t sub_100024050(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100024068, 0, 0);
}

uint64_t sub_100024068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 72);
  if (v2)
  {
    swift_retain(*(_QWORD *)(v1 + 72));
    AnyCancellable.cancel()();
    swift_release(v2);
    v1 = *(_QWORD *)(v0 + 16);
  }
  v3 = *(void **)(v1 + 80);
  if (v3)
    objc_msgSend(v3, "releaseRestrictions");
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ValueMetadata *type metadata accessor for AEADisableAssessmentModeTask()
{
  return &type metadata for AEADisableAssessmentModeTask;
}

uint64_t sub_1000240DC(void (*a1)(void ***), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = *v2;
  swift_retain(a2);
  sub_100024124(v5, a1, a2);
  return swift_release(a2);
}

uint64_t sub_100024124(uint64_t a1, void (*a2)(void ***), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  void **aBlock;
  uint64_t v24;
  void (*v25)(uint64_t, void *);
  void *v26;
  uint64_t (*v27)(uint64_t);
  _QWORD *v28;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (void ***)((char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = swift_allocObject(&unk_100084188, 32, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject(&unk_1000841B0, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_10000B480;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = qword_10008E618;
  swift_retain_n(v10, 2);
  swift_retain(a3);
  if (v12 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v13 = qword_100093EB8;
  *v9 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v13 & 1) != 0)
  {
    v16 = *(void **)(a1 + 128);
    if (v16)
    {
      if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      {
        v17 = sub_100024444();
        v18 = swift_allocError(&type metadata for AEAAssessmentSessionManager.SessionManagerError, v17, 0, 0);
        *v19 = 0;
        aBlock = (void **)v18;
        LOBYTE(v24) = 1;
        swift_unknownObjectRetain(v16);
        a2(&aBlock);
        swift_errorRelease(v18);
      }
      else
      {
        *(_BYTE *)(a1 + 136) = 1;
        swift_unknownObjectRetain(v16);
        sub_10004285C();
        v20 = (_QWORD *)swift_allocObject(&unk_1000841D8, 40, 7);
        v20[2] = a1;
        v20[3] = sub_10000B48C;
        v20[4] = v11;
        v27 = sub_100024420;
        v28 = v20;
        aBlock = _NSConcreteStackBlock;
        v24 = 1107296256;
        v25 = sub_100018BB8;
        v26 = &unk_1000841F0;
        v21 = _Block_copy(&aBlock);
        v22 = v28;
        swift_retain(a1);
        swift_retain(v11);
        swift_release(v22);
        objc_msgSend(v16, "deactivateWithCompletion:", v21);
        _Block_release(v21);
      }
      swift_release_n(v10, 2);
      swift_release(v11);
      return swift_unknownObjectRelease(v16);
    }
    else
    {
      aBlock = 0;
      LOBYTE(v24) = 0;
      a2(&aBlock);
      swift_release_n(v10, 2);
      return swift_release(v11);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000243D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000243F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100024420(uint64_t a1)
{
  uint64_t v1;

  return sub_10004222C(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10002442C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002443C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100024444()
{
  unint64_t result;

  result = qword_100090D40;
  if (!qword_100090D40)
  {
    result = swift_getWitnessTable(&unk_100068290, &type metadata for AEAAssessmentSessionManager.SessionManagerError);
    atomic_store(result, (unint64_t *)&qword_100090D40);
  }
  return result;
}

uint64_t sub_10002448C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000244B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t type metadata accessor for AEAConcreteRunningBoardPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent33AEAConcreteRunningBoardPrimitives);
}

uint64_t sub_10002460C()
{
  uint64_t v0;

  sub_100025498();

  swift_release(*(_QWORD *)(v0 + 24));
  sub_1000187D0(v0 + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken, &qword_100090F20);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100024668()
{
  return type metadata accessor for AEAConcreteRunningBoardPrimitives.RunningApplicationMonitor(0);
}

uint64_t type metadata accessor for AEAConcreteRunningBoardPrimitives.RunningApplicationMonitor(uint64_t a1)
{
  uint64_t result;

  result = qword_100090E20;
  if (!qword_100090E20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAConcreteRunningBoardPrimitives.RunningApplicationMonitor);
  return result;
}

void sub_1000246AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000258CC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t sub_100024740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t (*v21)(_QWORD *, uint64_t);
  uint64_t result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char isEscapingClosureAtFileLocation;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(_QWORD *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD aBlock[5];
  uint64_t v53;

  v2 = v1;
  v51 = a1;
  v3 = sub_100004D20(&qword_100090F20);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v43 - v7;
  v9 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  v10 = __chkstk_darwin(v9);
  v46 = v11;
  v47 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v43 - v12;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v18 = qword_100093EB8;
  *v17 = qword_100093EB8;
  v19 = enum case for DispatchPredicate.onQueue(_:);
  v48 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v15 + 104);
  v48(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v20 = (id)v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  v21 = *(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8);
  result = v21(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  UUID.init()(result);
  v23 = v49;
  v44 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  v45 = v13;
  v24 = v13;
  v25 = v50;
  v44(v8, v24, v50);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v8, 0, 1, v25);
  sub_1000260F0((uint64_t)v8, (uint64_t)v6);
  v26 = v2
      + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken;
  swift_beginAccess(v2 + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken, aBlock, 33, 0);
  sub_1000260A8((uint64_t)v6, v26);
  swift_endAccess(aBlock);
  v27 = *(_QWORD *)(v2
                  + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs);
  v28 = v51;
  *(_QWORD *)(v2
            + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs) = v51;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v27);
  v29 = qword_100093EB8;
  *v17 = qword_100093EB8;
  v48(v17, v19, v14);
  v30 = (id)v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)(v17);
  result = v21(v17, v14);
  if ((v29 & 1) == 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  CurrentValueSubject.value.getter(aBlock);
  v31 = aBlock[0];
  swift_retain(v2);
  v32 = sub_100026B68(v31, v2);
  swift_release(v2);
  aBlock[0] = v32;
  CurrentValueSubject.send(_:)(aBlock);
  swift_release(v32);
  v33 = *(void **)(v2 + 16);
  v34 = v47;
  v35 = v45;
  v44(v47, v45, v25);
  v36 = *(unsigned __int8 *)(v23 + 80);
  v37 = (v36 + 32) & ~v36;
  v38 = swift_allocObject(&unk_100084260, v37 + v46, v36 | 7);
  *(_QWORD *)(v38 + 16) = v28;
  *(_QWORD *)(v38 + 24) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v38 + v37, v34, v25);
  v39 = swift_allocObject(&unk_100084288, 32, 7);
  *(_QWORD *)(v39 + 16) = sub_100026DA8;
  *(_QWORD *)(v39 + 24) = v38;
  aBlock[4] = sub_100026DF8;
  v53 = v39;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002545C;
  aBlock[3] = &unk_1000842A0;
  v40 = _Block_copy(aBlock);
  v41 = v53;
  swift_bridgeObjectRetain(v28);
  swift_retain(v2);
  swift_retain(v39);
  swift_release(v41);
  objc_msgSend(v33, "updateConfiguration:", v40);
  _Block_release(v40);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v35, v25);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v39, "", 140, 49, 41, 1);
  swift_release(v38);
  result = swift_release(v39);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_9:
    __break(1u);
  return result;
}

void sub_100024B70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Class v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v24 = a4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = sub_100004D20(&qword_100090F88);
  v11 = swift_allocObject(v10, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100066FF0;
  swift_bridgeObjectRetain(a2);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  v13 = objc_msgSend((id)objc_opt_self(RBSProcessPredicate), "predicateMatchingBundleIdentifiers:", isa);

  *(_QWORD *)(v11 + 32) = v13;
  aBlock[0] = v11;
  specialized Array._endMutation()(v14);
  v15 = v11;
  sub_10001F494(0, &qword_100090F90, RBSProcessPredicate_ptr);
  v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  objc_msgSend(a1, "setPredicates:", v16);

  v17 = objc_msgSend(objc_allocWithZone((Class)RBSProcessStateDescriptor), "init");
  objc_msgSend(a1, "setStateDescriptor:", v17);

  v18 = swift_allocObject(&unk_1000842D8, 24, 7);
  swift_weakInit(v18 + 16, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v7);
  v19 = *(unsigned __int8 *)(v8 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = swift_allocObject(&unk_100084300, v20 + v9, v19 | 7);
  *(_QWORD *)(v21 + 16) = v18;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21 + v20, (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_100026EC8;
  v26 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000253D4;
  aBlock[3] = &unk_100084318;
  v22 = _Block_copy(aBlock);
  swift_release(v26);
  objc_msgSend(a1, "setUpdateHandler:", v22);
  _Block_release(v22);
}

uint64_t sub_100024DE0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v32 = a4;
  v33 = a2;
  v34 = a3;
  v31 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v30[1] = qword_100093EB8;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_100084350, v18 + 8, v15 | 7);
  v20 = v32;
  *(_QWORD *)(v19 + 16) = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + v16, v14, v11);
  v22 = v33;
  v21 = v34;
  *(_QWORD *)(v19 + v17) = v33;
  *(_QWORD *)(v19 + v18) = v21;
  aBlock[4] = sub_100026FC0;
  v40 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002448C;
  aBlock[3] = &unk_100084368;
  v23 = _Block_copy(aBlock);
  swift_retain(v20);
  v24 = v22;
  static DispatchQoS.unspecified.getter(v21);
  v38 = _swiftEmptyArrayStorage;
  v25 = sub_100017AD0((unint64_t *)&qword_10008F740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_100004D20(&qword_10008F748);
  v27 = sub_10000AD04();
  v28 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v26, v27, v31, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v28);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
  return swift_release(v40);
}

uint64_t sub_10002508C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  void *v30;
  void *v31;
  _BYTE v32[24];
  _BYTE v33[24];

  v30 = a3;
  v31 = a4;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004D20(&qword_100090F98);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004D20(&qword_100090F20);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v30 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v30 - v20;
  a1 += 16;
  swift_beginAccess(a1, v33, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v23 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v21, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v21, 0, 1, v6);
    v24 = v23
        + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken;
    swift_beginAccess(v23+ OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken, v32, 0, 0);
    sub_100027010(v24, (uint64_t)v19);
    v25 = (uint64_t)&v12[*(int *)(v10 + 48)];
    sub_100027010((uint64_t)v21, (uint64_t)v12);
    sub_100027010((uint64_t)v19, v25);
    v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    if (v26((uint64_t)v12, 1, v6) == 1)
    {
      sub_1000187D0((uint64_t)v19, &qword_100090F20);
      sub_1000187D0((uint64_t)v21, &qword_100090F20);
      if (v26(v25, 1, v6) == 1)
      {
        sub_1000187D0((uint64_t)v12, &qword_100090F20);
LABEL_9:
        sub_100025644(v30, v31);
        return swift_release(v23);
      }
    }
    else
    {
      sub_100027010((uint64_t)v12, (uint64_t)v16);
      if (v26(v25, 1, v6) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v9, v25, v6);
        v27 = sub_100017AD0(&qword_100090FA0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v28 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v9, v6, v27);
        v29 = *(void (**)(char *, uint64_t))(v7 + 8);
        v29(v9, v6);
        sub_1000187D0((uint64_t)v19, &qword_100090F20);
        sub_1000187D0((uint64_t)v21, &qword_100090F20);
        v29(v16, v6);
        sub_1000187D0((uint64_t)v12, &qword_100090F20);
        if ((v28 & 1) != 0)
          goto LABEL_9;
        return swift_release(v23);
      }
      sub_1000187D0((uint64_t)v19, &qword_100090F20);
      sub_1000187D0((uint64_t)v21, &qword_100090F20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    }
    sub_1000187D0((uint64_t)v12, &qword_100090F98);
    return swift_release(v23);
  }
  return result;
}

void sub_1000253D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(id, id, id);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(id, id, id))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v11 = a2;
  v9 = a3;
  v10 = a4;
  v8(v11, v9, v10);
  swift_release(v7);

}

uint64_t sub_10002545C(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100025498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];

  v1 = sub_100004D20(&qword_100090F20);
  __chkstk_darwin(v1);
  v3 = (char *)&v15[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v8 = qword_100093EB8;
  *v7 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    objc_msgSend(*(id *)(v0 + 16), "invalidate");
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v3, 1, 1, v11);
    v12 = v0
        + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken;
    swift_beginAccess(v0+ OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken, v15, 33, 0);
    sub_1000260A8((uint64_t)v3, v12);
    swift_endAccess(v15);
    v13 = *(_QWORD *)(v0
                    + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs);
    *(_QWORD *)(v0
              + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(v13);
    v15[0] = &_swiftEmptySetSingleton;
    return CurrentValueSubject.send(_:)(v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100025644(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v8 = qword_100093EB8;
  *v7 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    v10 = objc_msgSend(a1, "bundle");
    if (v10)
    {
      v11 = v10;
      v12 = objc_msgSend(v10, "identifier");

      if (v12)
      {
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v15 = v14;

        objc_msgSend(a1, "auditToken");
        v28 = v32;
        v29 = v31;
        v16 = objc_allocWithZone((Class)AEAConcreteAuditToken);
        v31 = v29;
        v32 = v28;
        v17 = objc_msgSend(v16, "initWithAuditToken:", &v31);
        CurrentValueSubject.value.getter(&v30);
        v18 = objc_msgSend(a2, "state");
        if (v18 && (v19 = v18, v20 = objc_msgSend(v18, "isRunning"), v19, v20))
        {
          swift_bridgeObjectRetain(v15);
          sub_100032F2C((uint64_t *)&v31, v13, v15, v17);
          swift_bridgeObjectRelease(*((_QWORD *)&v31 + 1));

        }
        else
        {
          v21 = sub_100025AAC(v13, v15, v17);
          sub_100025CB4(v21, v22, v23);
        }
        v24 = v30;
        v25 = *(_QWORD *)(v30 + 16);
        CurrentValueSubject.value.getter(&v31);
        v26 = *(_QWORD *)(v31 + 16);
        swift_bridgeObjectRelease(v31);
        if (v25 == v26)
        {

          swift_bridgeObjectRelease(v15);
          v27 = v24;
        }
        else
        {
          *(_QWORD *)&v31 = v24;
          CurrentValueSubject.send(_:)(&v31);
          swift_bridgeObjectRelease(v24);

          v27 = v15;
        }
        swift_bridgeObjectRelease(v27);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000258CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100090E30)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100090E30);
  }
}

uint64_t sub_100025920(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100034A78();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_100025CE4(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_100025AAC(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  _QWORD v26[9];

  v4 = v3;
  v8 = *v4;
  Hasher.init(_seed:)(v26, *(_QWORD *)(*v4 + 40));
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v26, a1, a2);
  swift_bridgeObjectRelease(a2);
  v9 = a3;
  NSObject.hash(into:)(v26);

  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v25 = v4;
    v13 = ~v11;
    while (1)
    {
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 24 * v12);
      v17 = v16[1];
      v18 = (void *)v16[2];
      v19 = *v16 == a1 && v17 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v16[1], a1, a2, 0) & 1) != 0)
      {
        sub_10001F494(0, (unint64_t *)&qword_1000902C0, NSObject_ptr);
        swift_bridgeObjectRetain(v17);
        v14 = v18;
        v15 = static NSObject.== infix(_:_:)(v14, v9);

        swift_bridgeObjectRelease(v17);
        if ((v15 & 1) != 0)
          break;
      }
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease(v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v25);
    v22 = *v25;
    v26[0] = *v25;
    *v25 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100034FB4();
      v22 = v26[0];
    }
    v20 = *(_QWORD *)(*(_QWORD *)(v22 + 48) + 24 * v12);
    sub_100025EA8(v12);
    v23 = *v25;
    *v25 = v26[0];
    swift_bridgeObjectRelease(v23);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease(v8);
    return 0;
  }
  return v20;
}

void sub_100025CB4(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);

  }
}

unint64_t sub_100025CE4(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_100025EA8(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  Swift::Int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 24 * v6);
        v12 = *v11;
        v13 = v11[1];
        v14 = (void *)v11[2];
        Hasher.init(_seed:)(v25, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v13);
        v15 = v14;
        String.hash(into:)(v25, v12, v13);
        v16 = v15;
        NSObject.hash(into:)(v25);

        v17 = Hasher._finalize()();
        swift_bridgeObjectRelease(v13);
        v18 = v17 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v18 < v9)
            goto LABEL_5;
        }
        else if (v18 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v18)
        {
LABEL_11:
          v19 = *(_QWORD *)(v3 + 48);
          v20 = v19 + 24 * v2;
          v21 = (__int128 *)(v19 + 24 * v6);
          if (v2 != v6 || (v2 = v6, v20 >= (unint64_t)v21 + 24))
          {
            v10 = *v21;
            *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
            *(_OWORD *)v20 = v10;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v22 = *(_QWORD *)(v3 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v24;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000260A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100090F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000260F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100090F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Int sub_100026138(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100004D20(&qword_100090CE0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void *sub_1000263CC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  void *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v8 = type metadata accessor for AEAParticipant(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (id *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a3)
  {
    swift_release(a4);
    return &_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return (void *)a4;
  sub_100004D20(qword_100090FB0);
  result = (void *)static _SetStorage.allocate(capacity:)(a3);
  v12 = (uint64_t)result;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v15 << 6);
    }
    else
    {
      v18 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_30;
      if (v18 >= a2)
      {
LABEL_27:
        swift_release(a4);
        return (void *)v12;
      }
      v19 = a1[v18];
      ++v15;
      if (!v19)
      {
        v15 = v18 + 1;
        if (v18 + 1 >= a2)
          goto LABEL_27;
        v19 = a1[v15];
        if (!v19)
        {
          v15 = v18 + 2;
          if (v18 + 2 >= a2)
            goto LABEL_27;
          v19 = a1[v15];
          if (!v19)
          {
            v20 = v18 + 3;
            if (v20 >= a2)
              goto LABEL_27;
            v19 = a1[v20];
            if (!v19)
            {
              while (1)
              {
                v15 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_31;
                if (v15 >= a2)
                  goto LABEL_27;
                v19 = a1[v15];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v15 = v20;
          }
        }
      }
LABEL_24:
      v14 = (v19 - 1) & v19;
      v17 = __clz(__rbit64(v19)) + (v15 << 6);
    }
    sub_100018848(*(_QWORD *)(a4 + 48) + *(_QWORD *)(v9 + 72) * v17, (uint64_t)v11);
    result = (void *)sub_100033F74(v11, v12);
    if (__OFSUB__(a3--, 1))
      break;
    if (!a3)
      goto LABEL_27;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

Swift::Int sub_10002659C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[9];

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100004D20(&qword_100090FA8);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v32 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= v32)
      goto LABEL_36;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v32)
        goto LABEL_36;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v32)
          goto LABEL_36;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v4 + 48) + 24 * v14;
    v19 = *(_QWORD *)v18;
    v33 = *(_OWORD *)(v18 + 8);
    Hasher.init(_seed:)(v34, v9[5]);
    swift_bridgeObjectRetain_n(v33, 2);
    v20 = *((id *)&v33 + 1);
    String.hash(into:)(v34, v19, v33);
    swift_bridgeObjectRelease(v33);
    v21 = v20;
    NSObject.hash(into:)(v34);

    result = Hasher._finalize()();
    v22 = -1 << *((_BYTE *)v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = v9[6] + 24 * v25;
    *(_QWORD *)v30 = v19;
    *(_OWORD *)(v30 + 8) = v33;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= v32)
    goto LABEL_36;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v32)
      goto LABEL_36;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_100026870(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v35;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v42[9];
  id v43;

  v35 = 0;
  v4 = 0;
  v7 = *(_QWORD *)(a3 + 56);
  v5 = a3 + 56;
  v6 = v7;
  v8 = 1 << *(_BYTE *)(v5 - 24);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & v6;
  v40 = OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs;
  v37 = v5;
  v38 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v12 = v11 | (v4 << 6);
LABEL_22:
    v16 = *(_QWORD *)(a4 + v40);
    if (*(_QWORD *)(v16 + 16))
    {
      v39 = v12;
      v17 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 24 * v12);
      v19 = *v17;
      v18 = v17[1];
      v20 = (void *)v17[2];
      Hasher.init(_seed:)(v42, *(_QWORD *)(v16 + 40));
      v43 = v20;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v16);
      String.hash(into:)(v42, v19, v18);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v16 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v16 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        goto LABEL_5;
      v24 = *(_QWORD *)(v16 + 48);
      v25 = (_QWORD *)(v24 + 16 * v23);
      v26 = v25[1];
      v27 = *v25 == v19 && v26 == v18;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, v19, v18, 0) & 1) != 0)
      {
LABEL_36:
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v16);

        *(unint64_t *)((char *)a1 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
        if (__OFADD__(v35++, 1))
        {
          __break(1u);
LABEL_39:
          swift_retain(a3);
          sub_10002659C(a1, a2, v35, a3);
          return;
        }
      }
      else
      {
        v28 = ~v22;
        while (1)
        {
          v23 = (v23 + 1) & v28;
          if (((*(_QWORD *)(v16 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            break;
          v29 = (_QWORD *)(v24 + 16 * v23);
          v30 = v29[1];
          v31 = *v29 == v19 && v30 == v18;
          if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v29, v30, v19, v18, 0) & 1) != 0)
            goto LABEL_36;
        }
LABEL_5:

        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v16);
      }
    }
  }
  v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v13 >= v38)
    goto LABEL_39;
  v14 = *(_QWORD *)(v37 + 8 * v13);
  ++v4;
  if (v14)
    goto LABEL_21;
  v4 = v13 + 1;
  if (v13 + 1 >= v38)
    goto LABEL_39;
  v14 = *(_QWORD *)(v37 + 8 * v4);
  if (v14)
    goto LABEL_21;
  v4 = v13 + 2;
  if (v13 + 2 >= v38)
    goto LABEL_39;
  v14 = *(_QWORD *)(v37 + 8 * v4);
  if (v14)
  {
LABEL_21:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_22;
  }
  v15 = v13 + 3;
  if (v15 >= v38)
    goto LABEL_39;
  v14 = *(_QWORD *)(v37 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v38)
      goto LABEL_39;
    v14 = *(_QWORD *)(v37 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_100026B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;

  v3 = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n(a2, 2);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v9, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v17 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain(a2);
    sub_100026870((unint64_t *)((char *)&v17 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    v12 = v11;
    swift_release(a1);
    v13 = swift_release(a2);
    if (v3)
      swift_willThrow(v13);
    swift_release_n(a2, 2);
  }
  else
  {
    v14 = (void *)swift_slowAlloc(v9, -1);
    bzero(v14, v9);
    swift_retain(a2);
    sub_100026870((unint64_t *)v14, v8, a1, a2);
    v12 = v15;
    swift_release(a1);
    swift_release(a2);
    swift_slowDealloc(v14, -1, -1);
    swift_release_n(a2, 2);
  }
  return v12;
}

uint64_t sub_100026D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100026DA8(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_100024B70(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_100026DE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100026DF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100026E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100026E28(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100026E30()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100026E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100026EC8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100024DE0(a1, a2, a3, *(_QWORD *)(v3 + 16), v3 + ((v7 + 24) & ~v7));
}

uint64_t sub_100026F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100026FC0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10002508C(*(_QWORD *)(v0 + 16), v0 + v2, *(void **)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100027010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100090F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027068(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 88));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = "\b";
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 104);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *sub_1000270FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return sub_10002714C(a1, a2, a3);
}

uint64_t *sub_10002714C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v20 = a2;
  v21 = a3;
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 88);
  v7 = type metadata accessor for Optional(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - v9;
  v11 = (uint64_t)v3 + *(_QWORD *)(v5 + 104);
  v12 = *(_QWORD *)(v6 - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v14 = v13(v11, 1, 1, v6);
  v15 = *(_QWORD *)(*v3 + 120);
  *(uint64_t *)((char *)v3 + v15) = static Subscribers.Demand.none.getter(v14);
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 128)) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v10, a1, v6);
  v13((uint64_t)v10, 0, 1, v6);
  swift_beginAccess(v11, v22, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v11, v10, v7);
  swift_endAccess(v22);
  v16 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 112));
  v17 = v21;
  *v16 = v20;
  v16[1] = v17;
  return v3;
}

uint64_t sub_100027288(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  _BYTE v13[24];

  v3 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
  v4 = swift_beginAccess(v3, v13, 33, 0);
  v5 = *v3;
  v6 = static Subscribers.Demand.unlimited.getter(v4);
  v7 = static Subscribers.Demand.== infix(_:_:)(v5, v6);
  if ((v7 & 1) != 0)
    goto LABEL_10;
  v8 = static Subscribers.Demand.unlimited.getter(v7);
  v9 = static Subscribers.Demand.== infix(_:_:)(v5, v8);
  v10 = v9;
  v11 = static Subscribers.Demand.unlimited.getter(v9);
  if ((v10 & 1) != 0)
  {
LABEL_9:
    *v3 = v11;
LABEL_10:
    swift_endAccess(v13);
    return sub_100027444();
  }
  result = static Subscribers.Demand.== infix(_:_:)(a1, v11);
  if ((result & 1) != 0)
    goto LABEL_7;
  if ((v5 | a1) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v11 = v5 + a1;
  if (__OFADD__(v5, a1))
  {
LABEL_7:
    v11 = static Subscribers.Demand.unlimited.getter(result);
    goto LABEL_9;
  }
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_9;
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_100027358()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _BYTE v12[24];

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  v3 = type metadata accessor for Optional(0, v2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v12[-v5 - 8];
  v7 = *(_QWORD *)(v1 + 128);
  v8 = *(void **)((char *)v0 + v7);
  if (v8)
  {
    objc_msgSend(v8, "cancel");
    v8 = *(void **)((char *)v0 + v7);
  }
  *(uint64_t *)((char *)v0 + v7) = 0;
  swift_unknownObjectRelease(v8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v6, 1, 1, v2);
  v9 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  swift_beginAccess(v9, v12, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 40))(v9, v6, v3);
  return swift_endAccess(v12);
}

uint64_t sub_100027444()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  v2 = swift_beginAccess(v1, v11, 0, 0);
  v3 = *v1;
  v4 = static Subscribers.Demand.unlimited.getter(v2);
  result = static Subscribers.Demand.== infix(_:_:)(v3, v4);
  if ((result & 1) != 0)
    goto LABEL_4;
  if (v3 < 0)
  {
    __break(1u);
    return result;
  }
  if (v3)
  {
LABEL_4:
    v6 = *(_QWORD *)(*(_QWORD *)v0 + 128);
    if (!*(_QWORD *)(v0 + v6))
    {
      v7 = sub_10002750C();
      v8 = *(_QWORD *)(v0 + v6);
      *(_QWORD *)(v0 + v6) = v7;
      swift_unknownObjectRelease(v8);
      result = *(_QWORD *)(v0 + v6);
      if (result)
        return (uint64_t)objc_msgSend((id)result, "resume");
    }
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)v0 + 128);
    result = *(_QWORD *)(v0 + v9);
    if (result)
    {
      objc_msgSend((id)result, "cancel");
      v10 = *(_QWORD *)(v0 + v9);
      *(_QWORD *)(v0 + v9) = 0;
      return swift_unknownObjectRelease(v10);
    }
  }
  return result;
}

uint64_t sub_10002750C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((char *)v0 + *(_QWORD *)(*v0 + 112));
  v3 = swift_allocObject(&unk_100084468, 24, 7);
  swift_weakInit(v3 + 16, v0);
  v4 = swift_allocObject(&unk_100084490, 48, 7);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v1 + 80);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v4 + 40) = v3;
  swift_retain(v3);
  v5 = v2(sub_100027994, v4);
  swift_release(v3);
  swift_release(v4);
  return v5;
}

uint64_t sub_1000275C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[24];
  char v37[24];
  char v38[24];

  v7 = type metadata accessor for Optional(0, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v36[-v10 - 8];
  v12 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v9);
  v14 = &v36[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v38, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v16 = result;
    v17 = result + *(_QWORD *)(*(_QWORD *)result + 104);
    swift_beginAccess(v17, v37, 0, 0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, v17, v7);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a4) == 1)
    {
      swift_release(v16);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
    }
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v14, v11, a4);
    v18 = (uint64_t *)(v16 + *(_QWORD *)(*(_QWORD *)v16 + 120));
    v19 = swift_beginAccess(v18, v36, 33, 0);
    v20 = *v18;
    v21 = static Subscribers.Demand.unlimited.getter(v19);
    v22 = static Subscribers.Demand.== infix(_:_:)(v20, v21);
    if ((v22 & 1) != 0)
      goto LABEL_11;
    v23 = static Subscribers.Demand.unlimited.getter(v22);
    result = static Subscribers.Demand.== infix(_:_:)(v20, v23);
    if ((result & 1) != 0)
    {
      v24 = static Subscribers.Demand.unlimited.getter(result);
LABEL_10:
      *v18 = v24;
LABEL_11:
      swift_endAccess(v36);
      v25 = dispatch thunk of Subscriber.receive(_:)(a1);
      v26 = swift_beginAccess(v18, v36, 33, 0);
      v27 = *v18;
      v28 = static Subscribers.Demand.unlimited.getter(v26);
      v29 = static Subscribers.Demand.== infix(_:_:)(v27, v28);
      if ((v29 & 1) != 0)
      {
LABEL_20:
        v34 = swift_endAccess(v36);
        sub_100027444(v34);
        swift_release(v16);
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, a4);
      }
      v30 = static Subscribers.Demand.unlimited.getter(v29);
      v31 = static Subscribers.Demand.== infix(_:_:)(v27, v30);
      v32 = v31;
      v33 = static Subscribers.Demand.unlimited.getter(v31);
      if ((v32 & 1) != 0)
      {
LABEL_19:
        *v18 = v33;
        goto LABEL_20;
      }
      result = static Subscribers.Demand.== infix(_:_:)(v25, v33);
      if ((result & 1) != 0)
      {
LABEL_17:
        v33 = static Subscribers.Demand.unlimited.getter(result);
        goto LABEL_19;
      }
      if (((v27 | v25) & 0x8000000000000000) == 0)
      {
        v33 = v27 + v25;
        if (!__OFADD__(v27, v25))
        {
          if ((v33 & 0x8000000000000000) == 0)
            goto LABEL_19;
LABEL_25:
          __break(1u);
          return result;
        }
        goto LABEL_17;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v20 < 0)
    {
      __break(1u);
    }
    else if (v20)
    {
      v24 = v20 - 1;
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_100027854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = type metadata accessor for Optional(0, *(_QWORD *)(*(_QWORD *)v0 + 88));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112) + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128)));
  return v0;
}

uint64_t sub_1000278C0()
{
  uint64_t v0;

  v0 = sub_100027854();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for AEASubscriptionPublisher.AEASubscriptionSubscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C170(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AEASubscriptionPublisher.AEASubscriptionSubscription);
}

uint64_t sub_1000278EC(uint64_t a1)
{
  return sub_100027288(a1);
}

uint64_t sub_10002790C()
{
  return sub_100027358();
}

uint64_t sub_10002792C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100067144, a1);
}

uint64_t sub_10002793C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10006711C, a1);
}

uint64_t sub_10002794C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100027970()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100027994(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000275C4(a1, v1[5], v1[2], v1[3]);
}

unint64_t sub_1000279A4()
{
  unint64_t result;

  result = qword_100091038;
  if (!qword_100091038)
  {
    result = swift_getWitnessTable(&unk_100067204, &type metadata for AEAUserConfirmationActionError);
    atomic_store(result, (unint64_t *)&qword_100091038);
  }
  return result;
}

uint64_t sub_1000279E8()
{
  uint64_t v0;

  if (qword_10008E670 != -1)
    swift_once(&qword_10008E670, sub_100031D40);
  v0 = qword_100093F60;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100093F68);
  return v0;
}

uint64_t sub_100027A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[4] = a4;
  v5[5] = v4;
  v5[2] = a1;
  v5[3] = a3;
  v6 = sub_100004D20(&qword_100093970);
  v5[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AEAParticipant(0);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100027ACC, 0, 0);
}

uint64_t sub_100027ACC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;

  v1 = v0[7];
  v2 = v0[8];
  v4 = v0[5];
  v3 = v0[6];
  v5 = type metadata accessor for AEAUserConfirmationActivation(0);
  sub_10001E174(v4 + *(int *)(v5 + 32), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100029144(v0[6]);
    if (qword_10008E6B0 != -1)
      swift_once(&qword_10008E6B0, sub_10005B70C);
    v10 = unk_100093FD0;
    v32 = qword_100093FC8;
    swift_bridgeObjectRetain(unk_100093FD0);
  }
  else
  {
    v6 = v0[9];
    sub_100023A48(v0[6], v6);
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 16);
    v9 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain_n(v7, 2);
    v20 = sub_100043238(v8, v7, 0);
    v21 = objc_msgSend(v20, "localizedName");

    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    swift_bridgeObjectRelease(v7);
    if (qword_10008E6A8 != -1)
      swift_once(&qword_10008E6A8, sub_10005B608);
    v25 = v0[9];
    v26 = qword_100093FB8;
    v27 = unk_100093FC0;
    v28 = sub_100004D20(&qword_100091100);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100065EB0;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_100029184();
    *(_QWORD *)(v29 + 32) = v22;
    *(_QWORD *)(v29 + 40) = v24;
    v32 = String.init(format:_:)(v26, v27, v29);
    v10 = v30;
    sub_10001888C(v25);
  }
  v0[10] = v10;
  v11 = *(int **)(v0[5] + 64);
  if (qword_10008E6A0 != -1)
    swift_once(&qword_10008E6A0, sub_10005B500);
  v12 = qword_100093FA8;
  v13 = unk_100093FB0;
  if (qword_10008E6B8 != -1)
    swift_once(&qword_10008E6B8, sub_10005B810);
  v14 = qword_100093FD8;
  v15 = unk_100093FE0;
  if (qword_10008E6C0 != -1)
    swift_once(&qword_10008E6C0, sub_10005B90C);
  v16 = qword_100093FE8;
  v17 = unk_100093FF0;
  v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
  v18 = (_QWORD *)swift_task_alloc(v11[1]);
  v0[11] = v18;
  *v18 = v0;
  v18[1] = sub_100027DC4;
  return v31(v12, v13, v32, v10, v14, v15, v16, v17);
}

uint64_t sub_100027DC4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100027ED4;
  }
  else
  {
    *(_BYTE *)(v4 + 104) = a1 & 1;
    v6 = sub_100027E3C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100027E3C()
{
  uint64_t v0;
  char v1;
  void (*v2)(void);
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 104);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  if ((v1 & 1) == 0)
  {
    v2 = *(void (**)(void))(v0 + 24);
    v3 = sub_1000279A4();
    v4 = swift_allocError(&type metadata for AEAUserConfirmationActionError, v3, 0, 0);
    v2();
    swift_errorRelease(v4);
  }
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v7 + 32) = 0;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100027ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100027F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_task_alloc(dword_1000910FC);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_10000CB20;
  return sub_100027A44(a1, v9, a3, a4);
}

uint64_t storeEnumTagSinglePayload for AEAUserConfirmationActionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100027FC4 + 4 * byte_1000671B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100027FE4 + 4 * byte_1000671B5[v4]))();
}

_BYTE *sub_100027FC4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100027FE4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100027FEC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100027FF4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100027FFC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100028004(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AEAUserConfirmationActionError()
{
  return &type metadata for AEAUserConfirmationActionError;
}

unint64_t sub_100028024()
{
  unint64_t result;

  result = qword_100091040;
  if (!qword_100091040)
  {
    result = swift_getWitnessTable(&unk_1000672B0, &type metadata for AEAUserConfirmationActionError);
    atomic_store(result, (unint64_t *)&qword_100091040);
  }
  return result;
}

uint64_t sub_100028068(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(void **, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t, __n128);
  id v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(void **, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v40;
  char *__dst;
  void *v43;
  __int128 v44;
  uint64_t v45;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 48) = v8;
    v9 = v8;
    v10 = **(void (***)(uint64_t, uint64_t *, uint64_t, __n128))(v8 - 8);
    v11 = swift_bridgeObjectRetain(v7);
    v10(a1 + 24, a2 + 3, v9, v11);
    *(_QWORD *)(a1 + 64) = a2[8];
    v12 = a2[11];
    v44 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 72) = v44;
    *(_QWORD *)(a1 + 88) = v12;
    v13 = *(int *)(a3 + 32);
    v14 = (void **)(a1 + v13);
    v15 = (void **)((char *)a2 + v13);
    v16 = type metadata accessor for AEAParticipant(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v17 + 48);
    swift_retain(v44);
    swift_retain(v12);
    if (v18(v15, 1, v16))
    {
      v19 = sub_100004D20(&qword_100093970);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = v15[1];
      v43 = *v15;
      v45 = v17;
      *v14 = *v15;
      v14[1] = v21;
      v22 = v15[2];
      v14[2] = v22;
      *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
      v23 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      v24 = (char *)v14 + v23;
      v25 = (char *)v15 + v23;
      *v24 = *((_BYTE *)v15 + v23);
      v26 = *(uint64_t *)((char *)v15 + v23 + 16);
      *((_QWORD *)v24 + 1) = *(void **)((char *)v15 + v23 + 8);
      *((_QWORD *)v24 + 2) = v26;
      v27 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dst = &v24[v27];
      v28 = &v25[v27];
      v29 = type metadata accessor for URL(0);
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v30 + 48);
      v32 = v43;
      swift_bridgeObjectRetain(v22);
      v33 = swift_bridgeObjectRetain(v26);
      if (v31(v28, 1, v29, v33))
      {
        v34 = sub_100004D20(&qword_10008F508);
        memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(__dst, v28, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
      }
      v35 = *(int *)(v16 + 20);
      v36 = (char *)v14 + v35;
      v37 = (char *)v15 + v35;
      *v36 = *v37;
      v38 = *((_QWORD *)v37 + 1);
      *((_QWORD *)v36 + 1) = v38;
      v39 = *(void (**)(void **, _QWORD, uint64_t, uint64_t, __n128))(v45 + 56);
      v40 = swift_bridgeObjectRetain(v38);
      v39(v14, 0, 1, v16, v40);
    }
  }
  return a1;
}

uint64_t sub_1000282D4(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t result;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease(a1[1]);
  sub_100004D60(a1 + 3);
  swift_release(a1[9]);
  swift_release(a1[11]);
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for AEAParticipant(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {

    swift_bridgeObjectRelease(*((_QWORD *)v4 + 2));
    v7 = &v4[*(int *)(type metadata accessor for AEAParticipant.Process(0) + 24)];
    swift_bridgeObjectRelease(*((_QWORD *)v7 + 2));
    v8 = &v7[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    return swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v5 + 20) + 8]);
  }
  return result;
}

uint64_t sub_1000283E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(void **, uint64_t, uint64_t);
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t, __n128);
  id v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(void **, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v39;
  void *v41;
  char *__dst;
  __int128 v43;
  uint64_t v44;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = a2 + 24;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v8 - 8);
  v11 = swift_bridgeObjectRetain(v6);
  v10(a1 + 24, v7, v9, v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 88);
  v43 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v43;
  *(_QWORD *)(a1 + 88) = v12;
  v13 = *(int *)(a3 + 32);
  v14 = (void **)(a1 + v13);
  v15 = (void **)(a2 + v13);
  v16 = type metadata accessor for AEAParticipant(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v17 + 48);
  swift_retain(v43);
  swift_retain(v12);
  if (v18(v15, 1, v16))
  {
    v19 = sub_100004D20(&qword_100093970);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v44 = v17;
    v20 = v15[1];
    v41 = *v15;
    *v14 = *v15;
    v14[1] = v20;
    v21 = v15[2];
    v14[2] = v21;
    *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
    v22 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v23 = (char *)v14 + v22;
    v24 = (char *)v15 + v22;
    *v23 = *((_BYTE *)v15 + v22);
    v25 = *(uint64_t *)((char *)v15 + v22 + 16);
    *((_QWORD *)v23 + 1) = *(void **)((char *)v15 + v22 + 8);
    *((_QWORD *)v23 + 2) = v25;
    v26 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v23[v26];
    v27 = &v24[v26];
    v28 = type metadata accessor for URL(0);
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v29 + 48);
    v31 = v41;
    swift_bridgeObjectRetain(v21);
    v32 = swift_bridgeObjectRetain(v25);
    if (v30(v27, 1, v28, v32))
    {
      v33 = sub_100004D20(&qword_10008F508);
      memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
    }
    v34 = *(int *)(v16 + 20);
    v35 = (char *)v14 + v34;
    v36 = (char *)v15 + v34;
    *v35 = *v36;
    v37 = *((_QWORD *)v36 + 1);
    *((_QWORD *)v35 + 1) = v37;
    v38 = *(void (**)(void **, _QWORD, uint64_t, uint64_t, __n128))(v44 + 56);
    v39 = swift_bridgeObjectRetain(v37);
    v38(v14, 0, 1, v16, v39);
  }
  return a1;
}

_QWORD *sub_100028628(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t, __n128);
  id v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  void *v65;
  void *__dst;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  sub_10000C54C(a1 + 3, a2 + 3);
  v8 = a2[9];
  v9 = a1[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[11];
  v11 = a1[11];
  a1[10] = a2[10];
  a1[11] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(int *)(a3 + 32);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for AEAParticipant(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17((uint64_t)v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      sub_10001888C(v13);
      goto LABEL_7;
    }
    v33 = *(void **)v14;
    v34 = *(void **)v13;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v35 = v33;

    *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
    v36 = *((_QWORD *)v14 + 2);
    v37 = *(_QWORD *)(v13 + 16);
    *(_QWORD *)(v13 + 16) = v36;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRelease(v37);
    *(_BYTE *)(v13 + 24) = v14[24];
    v38 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v39 = v13 + v38;
    v40 = &v14[v38];
    *(_BYTE *)v39 = v14[v38];
    *(_QWORD *)(v39 + 8) = *(_QWORD *)&v14[v38 + 8];
    v41 = *(_QWORD *)&v14[v38 + 16];
    v42 = *(_QWORD *)(v13 + v38 + 16);
    *(_QWORD *)(v39 + 16) = v41;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRelease(v42);
    v43 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v44 = (void *)(v39 + v43);
    v45 = &v40[v43];
    v46 = type metadata accessor for URL(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v47 + 48);
    v49 = v48(v44, 1, v46);
    v50 = v48(v45, 1, v46);
    if (v49)
    {
      if (!v50)
      {
        (*(void (**)(void *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
LABEL_16:
        v58 = *(int *)(v15 + 20);
        v59 = v13 + v58;
        v60 = &v14[v58];
        *(_BYTE *)v59 = *v60;
        v61 = *((_QWORD *)v60 + 1);
        v62 = *(_QWORD *)(v59 + 8);
        *(_QWORD *)(v59 + 8) = v61;
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRelease(v62);
        return a1;
      }
    }
    else
    {
      if (!v50)
      {
        (*(void (**)(void *, char *, uint64_t))(v47 + 24))(v44, v45, v46);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v47 + 8))(v44, v46);
    }
    v57 = sub_100004D20(&qword_10008F508);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_16;
  }
  if (v19)
  {
LABEL_7:
    v32 = sub_100004D20(&qword_100093970);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  v65 = *(void **)v14;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
  v64 = *((_QWORD *)v14 + 2);
  *(_QWORD *)(v13 + 16) = v64;
  *(_BYTE *)(v13 + 24) = v14[24];
  v20 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v21 = v13 + v20;
  v22 = &v14[v20];
  *(_BYTE *)v21 = v14[v20];
  *(_QWORD *)(v21 + 8) = *(_QWORD *)&v14[v20 + 8];
  v23 = *(_QWORD *)&v14[v20 + 16];
  *(_QWORD *)(v21 + 16) = v23;
  v24 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  __dst = (void *)(v21 + v24);
  v25 = &v22[v24];
  v26 = type metadata accessor for URL(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v27 + 48);
  v29 = v65;
  swift_bridgeObjectRetain(v64);
  v30 = swift_bridgeObjectRetain(v23);
  if (v28(v25, 1, v26, v30))
  {
    v31 = sub_100004D20(&qword_10008F508);
    memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
  }
  v51 = *(int *)(v15 + 20);
  v52 = v13 + v51;
  v53 = &v14[v51];
  *(_BYTE *)v52 = *v53;
  v54 = *((_QWORD *)v53 + 1);
  *(_QWORD *)(v52 + 8) = v54;
  v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v16 + 56);
  v56 = swift_bridgeObjectRetain(v54);
  v55(v13, 0, 1, v15, v56);
  return a1;
}

uint64_t sub_100028A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 80);
  v5 = *(int *)(a3 + 32);
  v6 = (_QWORD *)(a1 + v5);
  v7 = (_QWORD *)(a2 + v5);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v8 = type metadata accessor for AEAParticipant(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_100004D20(&qword_100093970);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    *v6 = *v7;
    *(_OWORD *)(v6 + 1) = *(_OWORD *)(v7 + 1);
    *((_BYTE *)v6 + 24) = *((_BYTE *)v7 + 24);
    v11 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v12 = (char *)v6 + v11;
    v13 = (char *)v7 + v11;
    *v12 = *((_BYTE *)v7 + v11);
    *(_OWORD *)(v12 + 8) = *(_OWORD *)((char *)v7 + v11 + 8);
    v14 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v15 = &v12[v14];
    v16 = &v13[v14];
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_100004D20(&qword_10008F508);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    *(_OWORD *)((char *)v6 + *(int *)(v8 + 20)) = *(_OWORD *)((char *)v7 + *(int *)(v8 + 20));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_100028BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  sub_100004D60((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release(v9);
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for AEAParticipant(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      sub_10001888C(v11);
      goto LABEL_7;
    }
    v28 = *(void **)v11;
    *(_QWORD *)v11 = *(_QWORD *)v12;

    v29 = *(_QWORD *)(v12 + 16);
    v30 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(v11 + 16) = v29;
    swift_bridgeObjectRelease(v30);
    *(_BYTE *)(v11 + 24) = *(_BYTE *)(v12 + 24);
    v31 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v32 = v11 + v31;
    v33 = v12 + v31;
    *(_BYTE *)v32 = *(_BYTE *)(v12 + v31);
    v34 = *(_QWORD *)(v12 + v31 + 16);
    v35 = *(_QWORD *)(v11 + v31 + 16);
    *(_QWORD *)(v32 + 8) = *(_QWORD *)(v12 + v31 + 8);
    *(_QWORD *)(v32 + 16) = v34;
    swift_bridgeObjectRelease(v35);
    v36 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v37 = (void *)(v32 + v36);
    v38 = (void *)(v33 + v36);
    v39 = type metadata accessor for URL(0);
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
    v42 = v41(v37, 1, v39);
    v43 = v41(v38, 1, v39);
    if (v42)
    {
      if (!v43)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 32))(v37, v38, v39);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
LABEL_16:
        v45 = *(int *)(v13 + 20);
        v46 = v11 + v45;
        v47 = v12 + v45;
        *(_BYTE *)v46 = *(_BYTE *)v47;
        v48 = *(_QWORD *)(v46 + 8);
        *(_QWORD *)(v46 + 8) = *(_QWORD *)(v47 + 8);
        swift_bridgeObjectRelease(v48);
        return a1;
      }
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 40))(v37, v38, v39);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v40 + 8))(v37, v39);
    }
    v44 = sub_100004D20(&qword_10008F508);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_16;
  }
  if (v17)
  {
LABEL_7:
    v27 = sub_100004D20(&qword_100093970);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(v12 + 8);
  *(_BYTE *)(v11 + 24) = *(_BYTE *)(v12 + 24);
  v18 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v19 = v11 + v18;
  v20 = v12 + v18;
  *(_BYTE *)v19 = *(_BYTE *)(v12 + v18);
  *(_OWORD *)(v19 + 8) = *(_OWORD *)(v12 + v18 + 8);
  v21 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v22 = (void *)(v19 + v21);
  v23 = (const void *)(v20 + v21);
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_100004D20(&qword_10008F508);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  *(_OWORD *)(v11 + *(int *)(v13 + 20)) = *(_OWORD *)(v12 + *(int *)(v13 + 20));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_100028F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100028F1C);
}

uint64_t sub_100028F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004D20(&qword_100093970);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_100028F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100028FA8);
}

uint64_t sub_100028FA8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004D20(&qword_100093970);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AEAUserConfirmationActivation(uint64_t a1)
{
  uint64_t result;

  result = qword_1000910A0;
  if (!qword_1000910A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAUserConfirmationActivation);
  return result;
}

void sub_10002905C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100067300;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_100067318;
  v4[3] = &unk_100067330;
  sub_1000290F0(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_1000290F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000910B0)
  {
    v2 = type metadata accessor for AEAParticipant(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000910B0);
  }
}

uint64_t sub_100029144(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20(&qword_100093970);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100029184()
{
  unint64_t result;

  result = qword_100091108[0];
  if (!qword_100091108[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, qword_100091108);
  }
  return result;
}

uint64_t Publishers.AEACombineLatestMany.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t WitnessTable;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;

  v54 = a1;
  v55 = a6;
  v53 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5, a3, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Failure);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Publisher, &associated conformance descriptor for Publisher.Publisher.Failure: Error);
  v12 = type metadata accessor for Subscribers.Completion(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v50 = *(_QWORD *)(v12 - 8);
  v51 = v12;
  __chkstk_darwin(v12);
  v49 = (char *)&v47 - v13;
  v14 = swift_getAssociatedTypeWitness(255, a5, a3, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v64 = a3;
  v65 = v14;
  v66 = AssociatedTypeWitness;
  v67 = a4;
  v68 = a5;
  v69 = a6;
  v15 = _s20AEACombineLatestManyV5InnerC4SideVMa(0, (uint64_t)&v64);
  v57 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v47 - v17);
  v56 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v16);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, a3, "offset element ", 0);
  v22 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v60 = *(_QWORD *)(v22 - 8);
  v61 = v22;
  v23 = __chkstk_darwin(v22);
  v59 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v47 - v25);
  v64 = a3;
  v65 = v14;
  v48 = v14;
  v47 = AssociatedTypeWitness;
  v66 = AssociatedTypeWitness;
  v67 = a4;
  v52 = a4;
  v58 = a5;
  v68 = a5;
  v69 = v55;
  v27 = _s20AEACombineLatestManyV5InnerCMa(0, (uint64_t)&v64);
  v28 = v53;
  v29 = Array.count.getter(v53, a3);
  v30 = sub_10002B0E8(v54, v29);
  v64 = v28;
  v31 = type metadata accessor for Array(0, a3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v31);
  if ((Collection.isEmpty.getter(v31, WitnessTable) & 1) != 0)
  {
    v67 = v27;
    v68 = swift_getWitnessTable(&unk_1000675E0, v27);
    v64 = (uint64_t)v30;
    swift_retain(v30);
    v33 = v55;
    v34 = v52;
    dispatch thunk of Subscriber.receive(subscription:)(&v64, v52, v55);
    sub_100004D60(&v64);
    v35 = static Array._allocateUninitialized(_:)(0, v48);
    v64 = v35;
    dispatch thunk of Subscriber.receive(_:)(&v64);
    swift_bridgeObjectRelease(v35);
    v36 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v49, 1, 1);
    dispatch thunk of Subscriber.receive(completion:)(v36, v34, v33);
    swift_release(v30);
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v36, v51);
  }
  else
  {
    v55 = v30;
    v64 = v53;
    v38 = swift_getWitnessTable(&protocol conformance descriptor for [A], v31);
    Sequence.enumerated()(&v63, v31, v38);
    v62 = v63;
    v39 = type metadata accessor for EnumeratedSequence(0, v31, v38);
    EnumeratedSequence.makeIterator()(&v64, v39);
    v40 = type metadata accessor for EnumeratedSequence.Iterator(0, v31, v38);
    v41 = v55;
    while (1)
    {
      v42 = v59;
      EnumeratedSequence.Iterator.next()(v40);
      (*(void (**)(uint64_t *, char *, uint64_t))(v60 + 32))(v26, v42, v61);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v26, 1, TupleTypeMetadata2) == 1)break;
      v43 = *v26;
      v44 = v56;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v20, (char *)v26 + *(int *)(TupleTypeMetadata2 + 48), a3);
      swift_retain(v41);
      sub_100029680(v43, v41, v18);
      v45 = swift_getWitnessTable(&unk_100067618, v15);
      Publisher.subscribe<A>(_:)(v18, a3, v15, v58, v45);
      (*(void (**)(_QWORD *, uint64_t))(v57 + 8))(v18, v15);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v20, a3);
    }
    v46 = v64;
    swift_release(v55);
    return swift_bridgeObjectRelease(v46);
  }
}

uint64_t _s20AEACombineLatestManyV5InnerC4SideVMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s20AEACombineLatestManyV5InnerC4SideVMn);
}

uint64_t _s20AEACombineLatestManyV5InnerCMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s20AEACombineLatestManyV5InnerCMn);
}

uint64_t sub_100029680@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v4;
  __int128 v5;
  _OWORD v7[3];

  v4 = (_OWORD *)*a2;
  *a3 = a1;
  a3[1] = a2;
  v5 = v4[6];
  v7[0] = v4[5];
  v7[1] = v5;
  v7[2] = v4[7];
  _s20AEACombineLatestManyV5InnerC4SideVMa(0, (uint64_t)v7);
  return CombineIdentifier.init()();
}

uint64_t sub_1000296D4@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  _QWORD v22[2];
  _OWORD v23[3];

  v22[1] = a2;
  v4 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004D20(&qword_100091290);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, _OWORD *))(v14 + 16))(v13, v2, a1);
  v15 = sub_100004D20(&qword_100091298);
  v16 = swift_allocObject(v15, 80, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100065EB0;
  *(_QWORD *)(v16 + 32) = 0xD000000000000012;
  *(_QWORD *)(v16 + 40) = 0x800000010006CB80;
  *(_QWORD *)(v16 + 72) = type metadata accessor for CombineIdentifier(0);
  sub_10002B8E4((_QWORD *)(v16 + 48));
  v17 = a1[2];
  v23[0] = a1[1];
  v23[1] = v17;
  v23[2] = a1[3];
  v18 = _s20AEACombineLatestManyV5InnerCMa(0, (uint64_t)v23);
  WitnessTable = swift_getWitnessTable(&unk_100067518, v18);
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter(v18, WitnessTable);
  v20 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v11, 1, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Mirror.AncestorRepresentation.generated(_:), v4);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v13, v16, v11, v7, a1);
}

void sub_1000298CC(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for String;
  strcpy((char *)a1, "CombineLatest");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_100029900(_QWORD *a1)
{
  uint64_t *v1;

  sub_100029C7C(a1, *v1);
}

void sub_100029924(uint64_t a1)
{
  int64_t *v1;

  sub_100029F14(a1, *v1);
}

void sub_100029948(uint64_t a1)
{
  unint64_t *v1;

  sub_10002A488(a1, *v1);
}

uint64_t sub_100029978()
{
  return 0x4C656E69626D6F43;
}

uint64_t sub_1000299A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 72);
  v5 = type metadata accessor for CombineIdentifier(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000299E4()
{
  _QWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v13[3];
  _QWORD *v14;

  v1 = (_OWORD *)*v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004D20(&qword_100091290);
  __chkstk_darwin(v6);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v0;
  v9 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v1[6];
  v13[0] = v1[5];
  v13[1] = v10;
  v13[2] = v1[7];
  v11 = _s20AEACombineLatestManyV5InnerCMa(0, (uint64_t)v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  swift_retain(v0);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(&v14, _swiftEmptyArrayStorage, v8, v5, v11);
}

uint64_t sub_100029B20(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    v2 = a2;
    if (a2)
    {
      v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for SubscriptionStatus);
      v4[2] = v2;
      v5 = (uint64_t)(v4 + 4);
      do
      {
        sub_10002B920(a1, v5);
        v5 += 40;
        --v2;
      }
      while (v2);
    }
    else
    {
      v4 = _swiftEmptyArrayStorage;
    }
    sub_10002B980(a1);
    return (uint64_t)v4;
  }
  return result;
}

uint64_t *sub_100029BEC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_slowDealloc(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 184)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 104) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 136)));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 144)));
  return v0;
}

uint64_t sub_100029C5C()
{
  uint64_t *v0;

  v0 = sub_100029BEC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

void sub_100029C7C(_QWORD *a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  _BYTE v25[24];

  v7 = *v3;
  if (*(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 176)) <= a2)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v4 = a2;
  v6 = a1;
  v2 = *(os_unfair_lock_s **)((char *)v3 + *(_QWORD *)(v7 + 184));
  os_unfair_lock_lock(v2);
  v8 = (_QWORD *)*v3;
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 + 152)) & 1) != 0
    || (*((_BYTE *)v3 + v8[20]) & 1) != 0
    || (*((_BYTE *)v3 + v8[21]) & 1) != 0)
  {
    goto LABEL_8;
  }
  v5 = (uint64_t *)((char *)v3 + v8[18]);
  swift_beginAccess(v5, v25, 0, 0);
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_22;
  if (*(_QWORD *)(*v5 + 16) <= v4)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    v6 = sub_10002AEC0(v6);
    *v5 = v6;
    goto LABEL_11;
  }
  sub_10002B920((__int128 *)(*v5 + 40 * v4 + 32), (uint64_t)&v19);
  v9 = v21;
  sub_10002B980(&v19);
  if (v9)
  {
LABEL_8:
    os_unfair_lock_unlock(v2);
    v10 = v6[3];
    v11 = v6[4];
    sub_1000060F4(v6, v10);
    dispatch thunk of Cancellable.cancel()(v10, *(_QWORD *)(v11 + 8));
    return;
  }
  sub_100008380((uint64_t)v6, (uint64_t)&v19);
  swift_beginAccess(v5, v23, 33, 0);
  v6 = (_QWORD *)*v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  *v5 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_24;
LABEL_11:
  if (v6[2] > v4)
  {
    sub_10002BA00(&v19, (uint64_t)&v6[5 * v4 + 4]);
    v13 = *v5;
    swift_endAccess(v23);
    v14 = *(_QWORD *)(v13 + 16);
    if (!v14)
    {
LABEL_19:
      os_unfair_lock_unlock(v2);
      v16 = *(_QWORD *)(v7 + 120);
      v17 = *(_OWORD *)(v7 + 80);
      v20 = *(_QWORD *)(v7 + 96);
      v18 = *(_OWORD *)(v7 + 104);
      v19 = v17;
      v21 = v18;
      v22 = v16;
      *(_QWORD *)&v21 = _s20AEACombineLatestManyV5InnerCMa(0, (uint64_t)&v19);
      *((_QWORD *)&v21 + 1) = swift_getWitnessTable(&unk_1000675E0, v21);
      *(_QWORD *)&v19 = v3;
      swift_retain(v3);
      dispatch thunk of Subscriber.receive(subscription:)(&v19, v18, v16);
      sub_100004D60(&v19);
      return;
    }
    v15 = (__int128 *)(v13 + 32);
    swift_bridgeObjectRetain(v13);
    while (1)
    {
      sub_10002B920(v15, (uint64_t)&v19);
      sub_10002B920(&v19, (uint64_t)v23);
      if (v24 != 1)
      {
        if (!v24)
        {
          sub_10002B980(&v19);
          swift_bridgeObjectRelease(v13);
          os_unfair_lock_unlock(v2);
          return;
        }
        sub_10002B980(v23);
      }
      sub_10002B980(&v19);
      v15 = (__int128 *)((char *)v15 + 40);
      if (!--v14)
      {
        swift_bridgeObjectRelease(v13);
        goto LABEL_19;
      }
    }
  }
  __break(1u);
}

void sub_100029F14(uint64_t a1, int64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 *v37;
  char *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 *v41;
  __int128 *v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63[3];
  uint64_t v64;
  _QWORD v65[4];
  char v66[8];

  v3 = v2;
  v6 = (_QWORD *)*v3;
  v7 = *(_QWORD *)(*v3 + 88);
  v8 = type metadata accessor for Optional(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - v10;
  if (*(uint64_t *)((char *)v3 + v6[22]) <= a2)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v12 = *(os_unfair_lock_s **)((char *)v3 + v6[23]);
  os_unfair_lock_lock(v12);
  v13 = *v3;
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 + 152)) & 1) != 0
    || (*((_BYTE *)v3 + *(_QWORD *)(v13 + 160)) & 1) != 0
    || (*((_BYTE *)v3 + *(_QWORD *)(v13 + 168)) & 1) != 0)
  {
    os_unfair_lock_unlock(v12);
    static Subscribers.Demand.none.getter(v14);
    return;
  }
  v15 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v7);
  v16 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 136));
  swift_beginAccess(v16, &v64, 33, 0);
  *(_QWORD *)&v56 = type metadata accessor for Array(0, v8);
  Array._makeMutableAndUnique()();
  v17 = *v16;
  sub_10002AE70(a2, *v16, v8);
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 40))(v17+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * a2, v11, v8);
  swift_endAccess(&v64);
  v55 = (uint64_t)&v50;
  v54 = v16;
  v64 = *v16;
  v18 = __chkstk_darwin(v64);
  v52 = v6[10];
  *(&v50 - 6) = v52;
  *(&v50 - 5) = v7;
  v19 = v6[13];
  v51 = v6[12];
  *(&v50 - 4) = v51;
  *(&v50 - 3) = v19;
  v21 = v6[14];
  v20 = v6[15];
  *(&v50 - 2) = v21;
  *(&v50 - 1) = v20;
  v53 = v20;
  swift_bridgeObjectRetain(v18);
  v22 = v56;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v56);
  LOBYTE(v17) = Sequence.allSatisfy(_:)(sub_10002BA4C, &v50 - 8, v22, WitnessTable);
  swift_bridgeObjectRelease(v64);
  if ((v17 & 1) == 0)
  {
    os_unfair_lock_unlock(v12);
    goto LABEL_22;
  }
  v55 = (uint64_t)&v50;
  v64 = *v54;
  v24 = __chkstk_darwin(v64);
  v50 = v19;
  *(&v50 - 6) = v52;
  *(&v50 - 5) = v7;
  *(&v50 - 4) = v51;
  *(&v50 - 3) = v19;
  v25 = v53;
  *(&v50 - 2) = v21;
  *(&v50 - 1) = v25;
  v26 = swift_bridgeObjectRetain(v24);
  v27 = Sequence.compactMap<A>(_:)(sub_10002BA88, &v50 - 8, v56, v7, WitnessTable, v26);
  swift_bridgeObjectRelease(v64);
  os_unfair_lock_unlock(v12);
  v64 = v27;
  v28 = dispatch thunk of Subscriber.receive(_:)(&v64);
  v29 = swift_bridgeObjectRelease(v27);
  v30 = static Subscribers.Demand.unlimited.getter(v29);
  v55 = v28;
  v31 = static Subscribers.Demand.== infix(_:_:)(v28, v30);
  if ((v31 & 1) != 0)
    goto LABEL_10;
  if (v55 < 0)
  {
LABEL_26:
    __break(1u);
    return;
  }
  if (!v55)
  {
LABEL_22:
    v55 = static Subscribers.Demand.none.getter(v31);
    return;
  }
LABEL_10:
  os_unfair_lock_lock(v12);
  v32 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 144));
  swift_beginAccess(v32, v66, 0, 0);
  v33 = *v32;
  swift_bridgeObjectRetain(*v32);
  os_unfair_lock_unlock(v12);
  v34 = 0;
  v35 = *(uint64_t **)(v33 + 16);
  v36 = v33 + 32;
  v37 = (__int128 *)&v60;
  v38 = (char *)v63 + 8;
  v39 = (__int128 *)v65;
  v56 = xmmword_100067370;
  v54 = v35;
  while (1)
  {
    if (v34 == v35)
    {
      memset(v63, 0, 32);
      v34 = v35;
      v63[2] = v56;
    }
    else
    {
      if ((unint64_t)v34 >= *(_QWORD *)(v33 + 16))
        goto LABEL_25;
      sub_10002B920((__int128 *)(v36 + 40 * (_QWORD)v34), (uint64_t)v37);
      *(_QWORD *)&v63[0] = v34;
      sub_1000084DC(v37, (uint64_t)v38);
      v34 = (uint64_t *)((char *)v34 + 1);
    }
    sub_10002B9B8((uint64_t)v63, (uint64_t)&v64);
    if (v65[3] == 2)
      break;
    v40 = v64;
    sub_1000084DC(v39, (uint64_t)v63);
    if (v40 == a2)
    {
      sub_10002B980(v63);
    }
    else
    {
      sub_10002B920(v63, (uint64_t)&v57);
      if (v58 > 1)
      {
        sub_1000084DC(&v57, (uint64_t)&v59);
        v41 = v39;
        v42 = v37;
        v43 = a2;
        v44 = v33;
        v45 = v38;
        v46 = v36;
        v47 = v61;
        v48 = v62;
        sub_1000060F4(&v59, v61);
        v49 = v47;
        v36 = v46;
        v38 = v45;
        v33 = v44;
        a2 = v43;
        v37 = v42;
        v39 = v41;
        v35 = v54;
        dispatch thunk of Subscription.request(_:)(v55, v49, v48);
        sub_10002B980(v63);
        sub_100004D60(&v59);
      }
      else
      {
        sub_10002B980(v63);
        sub_10002B980(&v57);
      }
    }
  }
  swift_bridgeObjectRelease(v33);
}

void sub_10002A488(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 96);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(_QWORD *)(*v2 + 120), *(_QWORD *)(*v2 + 104), v6, &protocol requirements base descriptor for Subscriber, &associated conformance descriptor for Subscriber.Subscriber.Failure: Error);
  v8 = type metadata accessor for Subscribers.Completion(0, v6, AssociatedConformanceWitness);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v24 - v13;
  v15 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v5 + 184));
  os_unfair_lock_lock(v15);
  v16 = *v2;
  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 + 152)) & 1) != 0
    || (v17 = *(_QWORD *)(v16 + 160), (*((_BYTE *)v2 + v17) & 1) != 0)
    || (*((_BYTE *)v2 + *(_QWORD *)(v16 + 168)) & 1) != 0)
  {
    os_unfair_lock_unlock(v15);
    return;
  }
  v25 = *(_QWORD *)(v16 + 168);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a1, v8);
  v24 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v14, 1, v6) != 1)
  {
    *((_BYTE *)v2 + v17) = 1;
    sub_10002A75C(a1, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return;
  }
  v28 = 0uLL;
  v29 = 0;
  v30 = xmmword_100065EA0;
  v18 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 144));
  swift_beginAccess(v18, v26, 33, 0);
  v19 = (_QWORD *)*v18;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
  *v18 = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_8;
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v19 = sub_10002AEC0(v19);
  *v18 = v19;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_22;
LABEL_8:
  if (v19[2] <= a2)
  {
LABEL_23:
    __break(1u);
    return;
  }
  sub_10002BA00(&v28, (uint64_t)&v19[5 * a2 + 4]);
  v21 = *v18;
  swift_endAccess(v26);
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v23 = (__int128 *)(v21 + 32);
    swift_bridgeObjectRetain(v21);
    while (1)
    {
      sub_10002B920(v23, (uint64_t)&v28);
      sub_10002B920(&v28, (uint64_t)v26);
      if (v27 != 1)
        break;
      sub_10002B980(&v28);
      v23 = (__int128 *)((char *)v23 + 40);
      if (!--v22)
      {
        swift_bridgeObjectRelease(v21);
        goto LABEL_14;
      }
    }
    if (v27)
      sub_10002B980(v26);
    sub_10002B980(&v28);
    swift_bridgeObjectRelease(v21);
    os_unfair_lock_unlock(v15);
  }
  else
  {
LABEL_14:
    *((_BYTE *)v2 + v25) = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v12, 1, 1, v6);
    sub_10002A75C((uint64_t)v12, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

void sub_10002A75C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34[3];
  __int128 v35[2];
  uint64_t v36;
  char v37[24];
  char v38[8];

  v26 = a1;
  v24 = *(_QWORD **)v2;
  v4 = v24[11];
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)&v23 - v7, 1, 1, v4);
  v9 = *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 176));
  v10 = sub_10002AED4((uint64_t)v8, v9, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v11 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 136));
  swift_beginAccess(v11, v38, 1, 0);
  v12 = *v11;
  *v11 = v10;
  swift_bridgeObjectRelease(v12);
  v13 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 144));
  swift_beginAccess(v13, v37, 1, 0);
  v14 = *v13;
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  swift_bridgeObjectRetain(v14);
  v15 = sub_100029B20(v35, v9);
  v16 = *v13;
  *v13 = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(*(_QWORD *)v2 + 184);
  v25 = v2;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + v17));
  v18 = 0;
  v19 = *(_QWORD *)(v14 + 16);
  v27 = xmmword_100067370;
  while (1)
  {
    if (v18 == v19)
    {
      memset(v34, 0, 32);
      v18 = v19;
      v34[2] = v27;
      goto LABEL_7;
    }
    if (v18 >= *(_QWORD *)(v14 + 16))
      break;
    sub_10002B920((__int128 *)(v14 + 32 + 40 * v18), (uint64_t)&v31);
    *(_QWORD *)&v34[0] = v18;
    sub_1000084DC(&v31, (uint64_t)v34 + 8);
    ++v18;
LABEL_7:
    sub_10002B9B8((uint64_t)v34, (uint64_t)v35);
    if (v36 == 2)
    {
      swift_bridgeObjectRelease(v14);
      dispatch thunk of Subscriber.receive(completion:)(v26, v24[13], v24[15]);
      return;
    }
    v20 = *(_QWORD *)&v35[0];
    sub_1000084DC((__int128 *)((char *)v35 + 8), (uint64_t)v34);
    if (v20 == a2)
    {
      sub_10002B980(v34);
    }
    else
    {
      sub_10002B920(v34, (uint64_t)&v28);
      if (v29 > 1)
      {
        sub_1000084DC(&v28, (uint64_t)&v30);
        v21 = v32;
        v22 = v33;
        sub_1000060F4(&v30, v32);
        dispatch thunk of Cancellable.cancel()(v21, *(_QWORD *)(v22 + 8));
        sub_10002B980(v34);
        sub_100004D60(&v30);
      }
      else
      {
        sub_10002B980(v34);
        sub_10002B980(&v28);
      }
    }
  }
  __break(1u);
}

void sub_10002AA54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  char v22[24];
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  char v26[24];

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  v3 = type metadata accessor for Optional(0, v2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - v5;
  v7 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(v1 + 184));
  os_unfair_lock_lock(v7);
  v8 = *(_QWORD *)(*v0 + 152);
  if ((*((_BYTE *)v0 + v8) & 1) != 0)
  {
    os_unfair_lock_unlock(v7);
  }
  else
  {
    v9 = (uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 144));
    swift_beginAccess(v9, v26, 1, 0);
    v10 = *v9;
    *((_BYTE *)v0 + v8) = 1;
    v23 = 0uLL;
    v24 = 0;
    v25 = xmmword_100065EA0;
    v11 = *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 176));
    swift_bridgeObjectRetain(v10);
    v12 = sub_100029B20(&v23, v11);
    v13 = *v9;
    *v9 = v12;
    swift_bridgeObjectRelease(v13);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v6, 1, 1, v2);
    v14 = sub_10002AED4((uint64_t)v6, v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v15 = (uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 136));
    swift_beginAccess(v15, v22, 1, 0);
    v16 = *v15;
    *v15 = v14;
    swift_bridgeObjectRelease(v16);
    os_unfair_lock_unlock(v7);
    v17 = *(_QWORD *)(v10 + 16);
    if (v17)
    {
      v18 = (__int128 *)(v10 + 32);
      do
      {
        sub_10002B920(v18, (uint64_t)&v20);
        if (v21 <= 1)
        {
          sub_10002B980(&v20);
        }
        else
        {
          sub_1000084DC(&v20, (uint64_t)&v23);
          v19 = v25;
          sub_1000060F4(&v23, v25);
          dispatch thunk of Cancellable.cancel()(v19, *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8));
          sub_100004D60(&v23);
        }
        v18 = (__int128 *)((char *)v18 + 40);
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease(v10);
  }
}

void sub_10002AC70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v3 = static Subscribers.Demand.unlimited.getter(a1);
  if ((static Subscribers.Demand.== infix(_:_:)(a1, v3) & 1) == 0)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    return;
  }
LABEL_4:
  v4 = *(os_unfair_lock_s **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 184));
  os_unfair_lock_lock(v4);
  v5 = *(_QWORD **)v1;
  if ((*(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152)) & 1) != 0
    || (*(_BYTE *)(v1 + v5[20]) & 1) != 0
    || (*(_BYTE *)(v1 + v5[21]) & 1) != 0)
  {
    os_unfair_lock_unlock(v4);
  }
  else
  {
    v6 = (_QWORD *)(v1 + v5[18]);
    swift_beginAccess(v6, v17, 0, 0);
    v7 = *v6;
    swift_bridgeObjectRetain(*v6);
    os_unfair_lock_unlock(v4);
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = (__int128 *)(v7 + 32);
      do
      {
        sub_10002B920(v9, (uint64_t)&v12);
        if (v13 <= 1)
        {
          sub_10002B980(&v12);
        }
        else
        {
          sub_1000084DC(&v12, (uint64_t)v14);
          v10 = v15;
          v11 = v16;
          sub_1000060F4(v14, v15);
          dispatch thunk of Subscription.request(_:)(a1, v10, v11);
          sub_100004D60(v14);
        }
        v9 = (__int128 *)((char *)v9 + 40);
        --v8;
      }
      while (v8);
    }
    swift_bridgeObjectRelease(v7);
  }
}

void sub_10002ADD8(uint64_t a1)
{
  sub_10002AC70(a1);
}

uint64_t sub_10002ADF8()
{
  return sub_1000299E4();
}

void sub_10002AE18(uint64_t a1@<X8>)
{
  sub_1000298CC(a1);
}

void sub_10002AE38()
{
  sub_10002AA54();
}

uint64_t sub_10002AE58(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;

  return Publishers.AEACombineLatestMany.receive<A>(subscriber:)(a1, *v4, *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3);
}

uint64_t sub_10002AE70(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = _swift_isClassOrObjCExistentialType(a3, a3);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v6 = a2;
  if (*(_QWORD *)(v6 + 16) <= a1)
    goto LABEL_7;
  return result;
}

_QWORD *sub_10002AEC0(_QWORD *a1)
{
  return sub_1000540DC(0, a1[2], 0, a1);
}

uint64_t sub_10002AED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = static Array._allocateUninitialized(_:)(a2, a3);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    if (a2)
    {
      v9 = v7;
      v10 = *(_QWORD *)(a3 - 8);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      v12 = a2 - 1;
      if (v12)
      {
        v13 = *(_QWORD *)(v10 + 72);
        v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    type metadata accessor for Array(0, a3);
    return v8;
  }
  return result;
}

uint64_t *sub_10002AF84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  __int128 v15[2];
  uint64_t v16;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 88);
  v7 = type metadata accessor for Optional(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v15 - v9;
  *((_BYTE *)v2 + *(_QWORD *)(v5 + 152)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 160)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 168)) = 0;
  v11 = *(_QWORD *)(*v2 + 184);
  v12 = (_DWORD *)swift_slowAlloc(4, -1);
  *v12 = 0;
  *(uint64_t *)((char *)v2 + v11) = (uint64_t)v12;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 104) - 8) + 16))((uint64_t)v2 + *(_QWORD *)(*v2 + 128), a1);
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 176)) = a2;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v10, 1, 1, v6);
  v13 = sub_10002AED4((uint64_t)v10, a2, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 136)) = v13;
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 144)) = sub_100029B20(v15, a2);
  return v2;
}

uint64_t *sub_10002B0E8(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  __int128 v5;
  uint64_t v6;
  _OWORD v8[3];

  v5 = v2[6];
  v8[0] = v2[5];
  v8[1] = v5;
  v8[2] = v2[7];
  v6 = _s20AEACombineLatestManyV5InnerCMa(0, (uint64_t)v8);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  return sub_10002AF84(a1, a2);
}

uint64_t sub_10002B150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for Publishers.AEACombineLatestMany(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C170(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.AEACombineLatestMany);
}

uint64_t sub_10002B164(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 104));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_100067408;
    v4[4] = &unk_100067408;
    v4[5] = &unk_100067408;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = (char *)&value witness table for Builtin.RawPointer + 64;
    result = swift_initClassMetadata2(a1, 0, 8, v4, a1 + 128);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *destroy for SubscriptionStatus(_QWORD *a1)
{
  if (a1[3] >= 0xFFFFFFFFuLL)
    return (_QWORD *)sub_100004D60(a1);
  return a1;
}

uint64_t initializeWithCopy for SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for SubscriptionStatus(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    sub_100004D60((_QWORD *)a1);
    goto LABEL_7;
  }
  sub_10000C54C((_QWORD *)a1, a2);
  return a1;
}

uint64_t assignWithTake for SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    sub_100004D60((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionStatus(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SubscriptionStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

uint64_t sub_10002B41C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_10002B434(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionStatus()
{
  return &type metadata for SubscriptionStatus;
}

uint64_t sub_10002B470(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for CombineIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 64);
    return 0;
  }
  return result;
}

uint64_t *sub_10002B4F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 72);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for CombineIdentifier(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10002B590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 72);
  v5 = type metadata accessor for CombineIdentifier(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_10002B5D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 72);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for CombineIdentifier(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_10002B648(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(a3 + 72);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for CombineIdentifier(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_10002B6C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 72);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for CombineIdentifier(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *sub_10002B720(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release(v7);
  v8 = *(int *)(a3 + 72);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for CombineIdentifier(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10002B78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002B798);
}

uint64_t sub_10002B798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CombineIdentifier(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 72), a2, v8);
  }
}

uint64_t sub_10002B814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002B820);
}

uint64_t sub_10002B820(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CombineIdentifier(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 72), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10002B894(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100067540, a1);
}

uint64_t sub_10002B8A4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100067518, a1);
}

uint64_t sub_10002B8B4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100067478, a1);
}

uint64_t sub_10002B8C4(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 40), a1, &protocol requirements base descriptor for Subscriber, &associated conformance descriptor for Subscriber.Subscriber.Failure: Error);
}

_QWORD *sub_10002B8E4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10002B920(__int128 *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 4);
    *(_QWORD *)(a2 + 24) = v3;
    *(_QWORD *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

_QWORD *sub_10002B980(_QWORD *a1)
{
  if (a1[3] >= 0xFFFFFFFFuLL)
    sub_100004D60(a1);
  return a1;
}

uint64_t sub_10002B9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_1000912A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002BA00(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_QWORD *)(a2 + 24) >= 0xFFFFFFFFuLL)
    sub_100004D60((_QWORD *)a2);
  v4 = *a1;
  v5 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  return a2;
}

BOOL sub_10002BA4C(uint64_t a1)
{
  uint64_t v1;

  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 48))(a1, 1) != 1;
}

uint64_t sub_10002BA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v2 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
}

uint64_t sub_10002BADC(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100004D20(&qword_100090790);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AEAConcreteFrontBoardPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent31AEAConcreteFrontBoardPrimitives);
}

uint64_t sub_10002BB88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch(sub_10002BBA0, 0, 0);
}

uint64_t sub_10002BBA0()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;
  NSString v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationService), "serviceWithDefaultShellEndpoint");
  *(_QWORD *)(v0 + 144) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = v0 + 16;
  v3 = v1;
  v4 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10002BCB0;
  v5 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v6 = (_QWORD *)(v0 + 80);
  v6[1] = 0x40000000;
  v6[2] = sub_10002BADC;
  v6[3] = &unk_1000848E8;
  v6[4] = v5;
  objc_msgSend(v3, "openApplication:withOptions:completion:", v4, 0, v6);
  return swift_continuation_await(v2);
}

uint64_t sub_10002BCB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    v2 = sub_10002BD54;
  else
    v2 = sub_10002BD10;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10002BD10()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 144);
  v2 = *(void **)(v0 + 152);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002BD54()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 152);
  v2 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002BDA0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  v2 = (_QWORD *)(v0 + 16);
  v3 = *(void (**)(uint64_t))(v0 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 24);
    *v2 = 0;
    v2[1] = 0;
    swift_retain(v4);
    v5 = sub_100008370((uint64_t)v3, v4);
    v3(v5);
    sub_100008370((uint64_t)v3, v4);
    v6 = *(_QWORD *)(v1 + 16);
  }
  else
  {
    v6 = 0;
  }
  sub_100008370(v6, *(_QWORD *)(v1 + 24));
  return swift_deallocClassInstance(v1, 32, 7);
}

uint64_t type metadata accessor for AEABlockCancelable()
{
  return objc_opt_self(_TtC15assessmentagent18AEABlockCancelable);
}

uint64_t sub_10002BEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  _OWORD v11[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_10002D050((_OWORD *)a1, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_100055F40(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_1000187D0(a1, (uint64_t *)&unk_1000902D0);
    sub_10002CD60(a2, a3, v11);
    swift_bridgeObjectRelease(a3);
    return sub_1000187D0((uint64_t)v11, (uint64_t *)&unk_1000902D0);
  }
}

uint64_t sub_10002BF88(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = sub_100004D20(&qword_100093970);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AEAParticipant(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_1000187D0(a1, &qword_100093970);
    sub_10002CF28(a2, a3, (uint64_t)v10);
    sub_100006118(a2, a3);
    return sub_1000187D0((uint64_t)v10, &qword_100093970);
  }
  else
  {
    sub_100023A48(a1, (uint64_t)v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v19 = *v4;
    *v4 = 0x8000000000000000;
    sub_1000564B0((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    v17 = *v4;
    *v4 = v19;
    swift_bridgeObjectRelease(v17);
    return sub_100006118(a2, a3);
  }
}

id sub_10002C0EC(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;
  int v21;
  int v22;

  v2 = v1;
  v4 = sub_100004D20(&qword_100093970);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = objc_msgSend(*a1, "processIdentifier");
  v9 = objc_msgSend(v7, "dataRepresentation");
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  sub_100018848((uint64_t)a1, (uint64_t)v6);
  v13 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 0, 1, v13);
  swift_beginAccess(v2 + 48, &v21, 33, 0);
  sub_10002BF88((uint64_t)v6, v10, v12);
  swift_endAccess(&v21);
  swift_beginAccess(v2 + 56, &v21, 33, 0);
  sub_100033154((_DWORD *)&v20 + 1, (uint64_t)v8);
  swift_endAccess(&v21);
  sub_10002C578();
  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10000B164(v14, (uint64_t)qword_100093E18);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v18 = 67240192;
    v21 = (int)v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v18 + 4, v18 + 8);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Adding PID %{public}d to exclusive frontmost list", v18, 8u);
    swift_slowDealloc(v18, -1, -1);
  }

  return objc_msgSend(*(id *)(v2 + 16), "startFrontmostForPID:", v8);
}

void sub_10002C328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v1 = v0;
  if (qword_10008E5E0 != -1)
LABEL_27:
    swift_once(&qword_10008E5E0, sub_10001552C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000B164(v2, (uint64_t)qword_100093E18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Removing all exclusive frontmost processes", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_beginAccess(v1 + 56, v22, 1, 0);
  v7 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = &_swiftEmptySetSingleton;
  v8 = sub_100058E5C((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess(v1 + 48, &v21, 1, 0);
  v9 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = 0;
  v11 = v7 + 56;
  v12 = 1 << *(_BYTE *)(v7 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v7 + 56);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v10 << 6);
      goto LABEL_8;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v18 >= v15)
      goto LABEL_24;
    v19 = *(_QWORD *)(v11 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v15)
        goto LABEL_24;
      v19 = *(_QWORD *)(v11 + 8 * v10);
      if (!v19)
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v15)
          goto LABEL_24;
        v19 = *(_QWORD *)(v11 + 8 * v10);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v14 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_8:
    objc_msgSend(*(id *)(v1 + 16), "stopFrontmostForPID:", *(unsigned int *)(*(_QWORD *)(v7 + 48) + 4 * v17));
  }
  v20 = v18 + 3;
  if (v20 < v15)
  {
    v19 = *(_QWORD *)(v11 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v10 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_26;
        if (v10 >= v15)
          goto LABEL_24;
        v19 = *(_QWORD *)(v11 + 8 * v10);
        ++v20;
        if (v19)
          goto LABEL_23;
      }
    }
    v10 = v20;
    goto LABEL_23;
  }
LABEL_24:
  swift_release(v7);
  sub_10002C578();
}

void sub_10002C578()
{
  uint64_t v0;
  __objc2_prop *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  Class isa;
  NSString v19;
  unsigned __int8 v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __objc2_prop *v34;
  uint64_t v35;
  _QWORD v36[3];
  char v37[16];
  _QWORD *v38;
  char v39[24];

  v1 = *(__objc2_prop **)(v0 + 32);
  if (v1)
  {
    swift_beginAccess(v0 + 56, v39, 0, 0);
    v2 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v38 = _swiftEmptyArrayStorage;
      v34 = v1;
      swift_unknownObjectRetain(v1);
      swift_bridgeObjectRetain(v2);
      specialized ContiguousArray.reserveCapacity(_:)(v3);
      v4 = sub_10004D54C(v2);
      v6 = v5;
      v8 = v7 & 1;
      v9 = (char *)(v2 + 56);
      v1 = &stru_10008D000;
      while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v2 + 32))
      {
        if (((*(_QWORD *)&v9[((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8] >> v4) & 1) == 0)
          goto LABEL_19;
        if (*(_DWORD *)(v2 + 36) != (_DWORD)v6)
          goto LABEL_20;
        v10 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInt:", *(unsigned int *)(*(_QWORD *)(v2 + 48) + 4 * v4));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v11 = v38[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
        v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
        specialized ContiguousArray._endMutation()(v12);
        v13 = sub_10004D5F0(v4, v6, v8 & 1, v2);
        v4 = v13;
        v6 = v14;
        v8 = v15 & 1;
        if (!--v3)
        {
          sub_100013A70(v13, v14, v15 & 1);
          v16 = v38;
          swift_bridgeObjectRelease(v2);
          v1 = v34;
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
    else
    {
      swift_unknownObjectRetain(v1);
      v16 = _swiftEmptyArrayStorage;
LABEL_11:
      v17 = sub_10002C9A0((uint64_t)v16);
      swift_bridgeObjectRelease(v16);
      v9 = (char *)&type metadata for Any;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v17);
      v19 = String._bridgeToObjectiveC()();
      -[__objc2_prop setArray:forKey:](v1, "setArray:forKey:", isa, v19);

      v38 = 0;
      v20 = -[__objc2_prop persistWithError:](v1, "persistWithError:", &v38);
      v21 = v38;
      if ((v20 & 1) != 0)
      {
        v22 = v38;
        swift_unknownObjectRelease(v1);
        return;
      }
      v23 = v38;
      v3 = _convertNSErrorToError(_:)(v21);

      swift_willThrow(v24);
      if (qword_10008E5E0 == -1)
        goto LABEL_14;
    }
    swift_once(&qword_10008E5E0, sub_10001552C);
LABEL_14:
    v25 = type metadata accessor for Logger(0);
    sub_10000B164(v25, (uint64_t)qword_100093E18);
    swift_errorRetain(v3);
    v26 = swift_errorRetain(v3);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (_QWORD *)swift_slowAlloc(32, -1);
      v38 = v30;
      *(_DWORD *)v29 = 136446210;
      swift_getErrorValue(v3, v37, v36);
      v31 = sub_10004CCD0(v36[1], v36[2]);
      v33 = v32;
      v35 = sub_100059C74(v31, v32, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to persist frontmost app scratchpad. Error %{public}s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, v9 + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
      swift_unknownObjectRelease(v1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_unknownObjectRelease(v1);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
  }
}

uint64_t sub_10002C9A0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id *v9;
  unint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  _OWORD v16[2];
  _QWORD *v17;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v17 = _swiftEmptyArrayStorage;
  result = sub_10003FF24(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v6 = sub_10000622C();
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_10003FF24(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10003FF24(v7 > 1, v8 + 1, 1);
          v3 = v17;
        }
        v3[2] = v8 + 1;
        sub_10002D050(v16, &v3[4 * v8 + 4]);
      }
    }
    else
    {
      v9 = (id *)(a1 + 32);
      v10 = sub_10000622C();
      do
      {
        v15 = *v9;
        v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_10003FF24(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v13 = v3[2];
        v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_10003FF24(v12 > 1, v13 + 1, 1);
          v3 = v17;
        }
        v3[2] = v13 + 1;
        sub_10002D050(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10002CBD0(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = _swiftEmptyArrayStorage;
    sub_10003FF24(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10003FF24(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10003FF24(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v4 += 2;
      v2[2] = v7 + 1;
      sub_10002D050(v10, &v2[4 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_10002CCF4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for AEAFrontmostAppAssertion()
{
  return objc_opt_self(_TtC15assessmentagentP33_0107916BBC0B03F4F3F796004AF215D824AEAFrontmostAppAssertion);
}

double sub_10002CD60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10005A2B4(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000567C4();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_10002D050((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_1000393C0(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10002CE50(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10005A2C8(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000569A8();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_100039594(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10002CF28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10005A3FC(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v19 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100056F70();
      v12 = v19;
    }
    sub_100006118(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = *(_QWORD *)(v12 + 56);
    v14 = type metadata accessor for AEAParticipant(0);
    v15 = *(_QWORD *)(v14 - 8);
    sub_100023A48(v13 + *(_QWORD *)(v15 + 72) * v9, a3);
    sub_1000397F8(v9, v12);
    v16 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a3, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for AEAParticipant(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a3, 1, 1, v18);
  }
}

_OWORD *sub_10002D050(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10002D060()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = &_swiftEmptyArrayStorage;
  v1 = sub_10000ACBC();
  v2 = sub_100004D20(&qword_10008F748);
  v3 = sub_10000AD04();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t type metadata accessor for AEAConcreteSignalPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent27AEAConcreteSignalPrimitives);
}

uint64_t sub_10002D0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v19 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F494(0, &qword_1000915F8, OS_dispatch_source_ptr);
  sub_10001F494(0, (unint64_t *)&qword_100091600, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter();
  v12 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15, v11);

  ObjectType = swift_getObjectType(v12);
  v14 = swift_allocObject(&unk_100084930, 32, 7);
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  aBlock[4] = sub_100026DF8;
  v21 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002448C;
  aBlock[3] = &unk_100084948;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  sub_10002D060();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v10, v6, v15, ObjectType);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release(v21);
  OS_dispatch_source.resume()();
  return v12;
}

uint64_t sub_10002D2E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002D304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002D314(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10002D320()
{
  unint64_t result;

  result = qword_100091608;
  if (!qword_100091608)
  {
    result = swift_getWitnessTable(&unk_1000677F4, &type metadata for AEAExpirationActionError);
    atomic_store(result, (unint64_t *)&qword_100091608);
  }
  return result;
}

uint64_t sub_10002D364()
{
  uint64_t v0;

  if (qword_10008E668 != -1)
    swift_once(&qword_10008E668, sub_100031C30);
  v0 = qword_100093F50;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100093F58);
  return v0;
}

uint64_t sub_10002D3C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_1000916E4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100014AC4;
  v3[2] = v2;
  return swift_task_switch(sub_10002F6B0, 0, 0);
}

uint64_t sub_10002D420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  v6 = type metadata accessor for AEAExpirationActivation(0);
  v5[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[25] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[26] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[27] = swift_task_alloc(v9);
  v5[28] = swift_task_alloc(v9);
  v10 = sub_100004D20(&qword_100093970);
  v5[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002D4C0, 0, 0);
}

uint64_t sub_10002D4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  _QWORD *v45;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  sub_100008380(v3 + 32, v0 + 64);
  sub_10001E174(v3 + *(int *)(v2 + 36), v1);
  v4 = type metadata accessor for AEAParticipant(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v1, 1, v4);
  v6 = *(_QWORD *)(v0 + 232);
  if (v5 == 1)
  {
    sub_100029144(*(_QWORD *)(v0 + 232));
    v47 = 0;
    v7 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 16);
    v47 = *(_QWORD *)(v6 + 8);
    swift_bridgeObjectRetain(v7);
    sub_10002F554(v6, type metadata accessor for AEAParticipant);
  }
  v8 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 208);
  v11 = *(_QWORD *)(v0 + 176);
  v48 = *(_OWORD *)(v0 + 160);
  sub_10002F2EC(*(_QWORD *)(v0 + 184), v8);
  sub_100008380(v0 + 64, v0 + 104);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_100084A50, v16 + 40, v12 | 7);
  sub_10002F4AC(v8, v17 + v13);
  v18 = v17 + v14;
  *(_OWORD *)v18 = v48;
  *(_QWORD *)(v18 + 16) = v11;
  v19 = (_QWORD *)(v17 + v15);
  *v19 = v47;
  v19[1] = v7;
  sub_1000084DC((__int128 *)(v0 + 104), v17 + v16);
  v20 = qword_10008E608;
  swift_unknownObjectRetain(v48);
  swift_retain(v11);
  if (v20 != -1)
    swift_once(&qword_10008E608, sub_100015628);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 184);
  v23 = type metadata accessor for Logger(0);
  sub_10000B164(v23, (uint64_t)qword_100093E90);
  v24 = sub_10002F2EC(v22, v21);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  v27 = os_log_type_enabled(v25, v26);
  v28 = *(_QWORD *)(v0 + 216);
  if (v27)
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v49 = v30;
    *(_DWORD *)v29 = 136446210;
    v31 = Double.description.getter(*(double *)(v28 + 72));
    v33 = v32;
    *(_QWORD *)(v0 + 144) = sub_100059C74(v31, v32, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v33);
    sub_10002F554(v28, type metadata accessor for AEAExpirationActivation);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Starting expiration timer -- the session will expire in %{public}s seconds", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    sub_10002F554(*(_QWORD *)(v0 + 216), type metadata accessor for AEAExpirationActivation);
  }

  v34 = *(_QWORD *)(v0 + 184);
  v35 = *(void **)(v34 + 24);
  v36 = *(double *)(v34 + 72);
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v37 = *(_QWORD *)(v0 + 224);
  v38 = *(_QWORD *)(v0 + 232);
  v39 = *(_QWORD *)(v0 + 216);
  v40 = *(_QWORD **)(v0 + 152);
  v41 = qword_100093EB8;
  *(_QWORD *)(v0 + 48) = sub_10002F4F0;
  *(_QWORD *)(v0 + 56) = v17;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_10002448C;
  *(_QWORD *)(v0 + 40) = &unk_100084A68;
  v42 = _Block_copy((const void *)(v0 + 16));
  v43 = *(_QWORD *)(v0 + 56);
  swift_retain(v17);
  swift_release(v43);
  v44 = objc_msgSend(v35, "scheduledTimerWithDuration:queue:handler:", v41, v42, v36);
  _Block_release(v42);
  v40[3] = &type metadata for AEAExpirationDeactivation;
  v40[4] = &off_100084B80;
  v45 = (_QWORD *)swift_allocObject(&unk_100084AA0, 48, 7);
  *v40 = v45;
  swift_release(v17);
  v45[2] = 0xD000000000000024;
  v45[3] = 0x800000010006CDC0;
  v45[4] = 5;
  v45[5] = v44;
  sub_100004D60((_QWORD *)(v0 + 64));
  swift_task_dealloc(v38);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002D91C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43[2];

  v40 = a6;
  v41 = a7;
  v10 = sub_100004D20(&qword_100091B00);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AEAExpirationActivation(0);
  __chkstk_darwin(v13);
  v15 = (double *)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008E608 != -1)
    swift_once(&qword_10008E608, sub_100015628);
  v16 = type metadata accessor for Logger(0);
  sub_10000B164(v16, (uint64_t)qword_100093E90);
  v17 = sub_10002F2EC(a1, (uint64_t)v15);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v38 = v12;
    v20 = swift_slowAlloc(12, -1);
    v39 = a5;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v43[0] = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = Double.description.getter(v15[9]);
    v24 = a3;
    v26 = v25;
    v42 = sub_100059C74(v23, v25, (uint64_t *)v43);
    v12 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v21 + 4, v21 + 12);
    v27 = v26;
    a3 = v24;
    swift_bridgeObjectRelease(v27);
    sub_10002F554((uint64_t)v15, type metadata accessor for AEAExpirationActivation);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "The session expired after %{public}s seconds", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v28 = v21;
    a5 = v39;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    sub_10002F554((uint64_t)v15, type metadata accessor for AEAExpirationActivation);
  }

  v29 = sub_10002D320();
  v30 = swift_allocError(&type metadata for AEAExpirationActionError, v29, 0, 0);
  a3();
  swift_errorRelease(v30);
  v31 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v12, 1, 1, v31);
  sub_100008380(v41, (uint64_t)v43);
  type metadata accessor for MainActor(0);
  v32 = v40;
  swift_bridgeObjectRetain(v40);
  v34 = static MainActor.shared.getter(v33);
  v35 = (_QWORD *)swift_allocObject(&unk_100084AC8, 88, 7);
  v35[2] = v34;
  v35[3] = &protocol witness table for MainActor;
  v35[4] = a5;
  v35[5] = v32;
  sub_1000084DC(v43, (uint64_t)(v35 + 6));
  v36 = sub_100052094((uint64_t)v12, (uint64_t)&unk_1000916D0, (uint64_t)v35);
  return swift_release(v36);
}

uint64_t sub_10002DC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[9] = a4;
  v5[10] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[11] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[12] = v7;
  v5[13] = v8;
  return swift_task_switch(sub_10002DC94, v7, v8);
}

uint64_t sub_10002DC94()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1)
  {
    v2 = qword_10008E608;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
    if (v2 != -1)
      swift_once(&qword_10008E608, sub_100015628);
    v3 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 112) = sub_10000B164(v3, (uint64_t)qword_100093E90);
    v4 = swift_bridgeObjectRetain_n(v1, 2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v11 = *(_QWORD *)(v0 + 72);
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v13 = v8;
      *(_DWORD *)v7 = 136446210;
      swift_bridgeObjectRetain(v1);
      *(_QWORD *)(v0 + 64) = sub_100059C74(v11, v1, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease_n(v1, 3);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Opening %{public}s because session expired", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v1, 2);
    }

    v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100091348 + dword_100091348);
    v10 = (_QWORD *)swift_task_alloc(unk_10009134C);
    *(_QWORD *)(v0 + 120) = v10;
    *v10 = v0;
    v10[1] = sub_10002DEBC;
    return v12(*(_QWORD *)(v0 + 72), v1);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002DEBC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[12];
    v5 = v2[13];
    v6 = sub_10002DF58;
  }
  else
  {
    swift_bridgeObjectRelease(v2[10]);
    v4 = v2[12];
    v5 = v2[13];
    v6 = sub_10002DF28;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10002DF28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002DF58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v17 = v10;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 40) = sub_100059C74(v8, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v9 + 12) = 2082;
    swift_getErrorValue(v6, v0 + 48, v0 + 16);
    v11 = sub_10004CCD0(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v13 = v12;
    *(_QWORD *)(v0 + 56) = sub_100059C74(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to open %{public}s: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 80);
    swift_errorRelease(v14);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_errorRelease(v14);
    swift_errorRelease(v14);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002E174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_1000916C4);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10000CB20;
  return sub_10002D420(a1, a2, a3, a4);
}

uint64_t storeEnumTagSinglePayload for AEAExpirationActionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10002E22C + 4 * byte_1000677A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10002E24C + 4 * byte_1000677A5[v4]))();
}

_BYTE *sub_10002E22C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10002E24C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002E254(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002E25C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002E264(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002E26C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AEAExpirationActionError()
{
  return &type metadata for AEAExpirationActionError;
}

unint64_t sub_10002E28C()
{
  unint64_t result;

  result = qword_100091610;
  if (!qword_100091610)
  {
    result = swift_getWitnessTable(&unk_10006789C, &type metadata for AEAExpirationActionError);
    atomic_store(result, (unint64_t *)&qword_100091610);
  }
  return result;
}

uint64_t sub_10002E2D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t, __n128);
  id v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(void **, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v38;
  char *__dst;
  void *v41;
  uint64_t v42;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 56) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v7);
    swift_unknownObjectRetain(v8);
    v11(a1 + 32, a2 + 4, v10);
    *(_QWORD *)(a1 + 72) = a2[9];
    v12 = *(int *)(a3 + 36);
    v13 = (void **)(a1 + v12);
    v14 = (void **)((char *)a2 + v12);
    v15 = type metadata accessor for AEAParticipant(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_100004D20(&qword_100093970);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = v14[1];
      v41 = *v14;
      v42 = v16;
      *v13 = *v14;
      v13[1] = v19;
      v20 = v14[2];
      v13[2] = v20;
      *((_BYTE *)v13 + 24) = *((_BYTE *)v14 + 24);
      v21 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      v22 = (char *)v13 + v21;
      v23 = (char *)v14 + v21;
      *v22 = *((_BYTE *)v14 + v21);
      v24 = *(uint64_t *)((char *)v14 + v21 + 16);
      *((_QWORD *)v22 + 1) = *(void **)((char *)v14 + v21 + 8);
      *((_QWORD *)v22 + 2) = v24;
      v25 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dst = &v22[v25];
      v26 = &v23[v25];
      v27 = type metadata accessor for URL(0);
      v28 = *(_QWORD *)(v27 - 8);
      v29 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v28 + 48);
      v30 = v41;
      swift_bridgeObjectRetain(v20);
      v31 = swift_bridgeObjectRetain(v24);
      if (v29(v26, 1, v27, v31))
      {
        v32 = sub_100004D20(&qword_10008F508);
        memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v26, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
      }
      v33 = *(int *)(v15 + 20);
      v34 = (char *)v13 + v33;
      v35 = (char *)v14 + v33;
      *v34 = *v35;
      v36 = *((_QWORD *)v35 + 1);
      *((_QWORD *)v34 + 1) = v36;
      v37 = *(void (**)(void **, _QWORD, uint64_t, uint64_t, __n128))(v42 + 56);
      v38 = swift_bridgeObjectRetain(v36);
      v37(v13, 0, 1, v15, v38);
    }
  }
  return a1;
}

uint64_t sub_10002E51C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t result;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease(a1[1]);
  swift_unknownObjectRelease(a1[3]);
  sub_100004D60(a1 + 4);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for AEAParticipant(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {

    swift_bridgeObjectRelease(*((_QWORD *)v4 + 2));
    v7 = &v4[*(int *)(type metadata accessor for AEAParticipant.Process(0) + 24)];
    swift_bridgeObjectRelease(*((_QWORD *)v7 + 2));
    v8 = &v7[*(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24)];
    v9 = type metadata accessor for URL(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    return swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v5 + 20) + 8]);
  }
  return result;
}

uint64_t sub_10002E624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t, __n128);
  id v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(void **, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v37;
  void *v39;
  char *__dst;
  uint64_t v41;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2 + 32;
  v9 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v9;
  v10 = v9;
  v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  swift_bridgeObjectRetain(v6);
  swift_unknownObjectRetain(v7);
  v11(a1 + 32, v8, v10);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(int *)(a3 + 36);
  v13 = (void **)(a1 + v12);
  v14 = (void **)(a2 + v12);
  v15 = type metadata accessor for AEAParticipant(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100004D20(&qword_100093970);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v41 = v16;
    v18 = v14[1];
    v39 = *v14;
    *v13 = *v14;
    v13[1] = v18;
    v19 = v14[2];
    v13[2] = v19;
    *((_BYTE *)v13 + 24) = *((_BYTE *)v14 + 24);
    v20 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v21 = (char *)v13 + v20;
    v22 = (char *)v14 + v20;
    *v21 = *((_BYTE *)v14 + v20);
    v23 = *(uint64_t *)((char *)v14 + v20 + 16);
    *((_QWORD *)v21 + 1) = *(void **)((char *)v14 + v20 + 8);
    *((_QWORD *)v21 + 2) = v23;
    v24 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v21[v24];
    v25 = &v22[v24];
    v26 = type metadata accessor for URL(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v27 + 48);
    v29 = v39;
    swift_bridgeObjectRetain(v19);
    v30 = swift_bridgeObjectRetain(v23);
    if (v28(v25, 1, v26, v30))
    {
      v31 = sub_100004D20(&qword_10008F508);
      memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
    }
    v32 = *(int *)(v15 + 20);
    v33 = (char *)v13 + v32;
    v34 = (char *)v14 + v32;
    *v33 = *v34;
    v35 = *((_QWORD *)v34 + 1);
    *((_QWORD *)v33 + 1) = v35;
    v36 = *(void (**)(void **, _QWORD, uint64_t, uint64_t, __n128))(v41 + 56);
    v37 = swift_bridgeObjectRetain(v35);
    v36(v13, 0, 1, v15, v37);
  }
  return a1;
}

_QWORD *sub_10002E848(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t, __n128);
  id v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(uint64_t, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  void *v63;
  void *__dst;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRelease(v9);
  sub_10000C54C(a1 + 4, a2 + 4);
  a1[9] = a2[9];
  v10 = *(int *)(a3 + 36);
  v11 = (uint64_t)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for AEAParticipant(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15((uint64_t)v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      sub_10002F554(v11, type metadata accessor for AEAParticipant);
      goto LABEL_7;
    }
    v31 = *(void **)v12;
    v32 = *(void **)v11;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v33 = v31;

    *(_QWORD *)(v11 + 8) = *((_QWORD *)v12 + 1);
    v34 = *((_QWORD *)v12 + 2);
    v35 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 16) = v34;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(v35);
    *(_BYTE *)(v11 + 24) = v12[24];
    v36 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v37 = v11 + v36;
    v38 = &v12[v36];
    *(_BYTE *)v37 = v12[v36];
    *(_QWORD *)(v37 + 8) = *(_QWORD *)&v12[v36 + 8];
    v39 = *(_QWORD *)&v12[v36 + 16];
    v40 = *(_QWORD *)(v11 + v36 + 16);
    *(_QWORD *)(v37 + 16) = v39;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRelease(v40);
    v41 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v42 = (void *)(v37 + v41);
    v43 = &v38[v41];
    v44 = type metadata accessor for URL(0);
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v45 + 48);
    v47 = v46(v42, 1, v44);
    v48 = v46(v43, 1, v44);
    if (v47)
    {
      if (!v48)
      {
        (*(void (**)(void *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
LABEL_16:
        v56 = *(int *)(v13 + 20);
        v57 = v11 + v56;
        v58 = &v12[v56];
        *(_BYTE *)v57 = *v58;
        v59 = *((_QWORD *)v58 + 1);
        v60 = *(_QWORD *)(v57 + 8);
        *(_QWORD *)(v57 + 8) = v59;
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRelease(v60);
        return a1;
      }
    }
    else
    {
      if (!v48)
      {
        (*(void (**)(void *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v45 + 8))(v42, v44);
    }
    v55 = sub_100004D20(&qword_10008F508);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_16;
  }
  if (v17)
  {
LABEL_7:
    v30 = sub_100004D20(&qword_100093970);
    memcpy((void *)v11, v12, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  v63 = *(void **)v12;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = *((_QWORD *)v12 + 1);
  v62 = *((_QWORD *)v12 + 2);
  *(_QWORD *)(v11 + 16) = v62;
  *(_BYTE *)(v11 + 24) = v12[24];
  v18 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v19 = v11 + v18;
  v20 = &v12[v18];
  *(_BYTE *)v19 = v12[v18];
  *(_QWORD *)(v19 + 8) = *(_QWORD *)&v12[v18 + 8];
  v21 = *(_QWORD *)&v12[v18 + 16];
  *(_QWORD *)(v19 + 16) = v21;
  v22 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  __dst = (void *)(v19 + v22);
  v23 = &v20[v22];
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v25 + 48);
  v27 = v63;
  swift_bridgeObjectRetain(v62);
  v28 = swift_bridgeObjectRetain(v21);
  if (v26(v23, 1, v24, v28))
  {
    v29 = sub_100004D20(&qword_10008F508);
    memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v25 + 16))(__dst, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
  }
  v49 = *(int *)(v13 + 20);
  v50 = v11 + v49;
  v51 = &v12[v49];
  *(_BYTE *)v50 = *v51;
  v52 = *((_QWORD *)v51 + 1);
  *(_QWORD *)(v50 + 8) = v52;
  v53 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v14 + 56);
  v54 = swift_bridgeObjectRetain(v52);
  v53(v11, 0, 1, v13, v54);
  return a1;
}

uint64_t sub_10002EC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(int *)(a3 + 36);
  v8 = (_QWORD *)(a2 + v7);
  v9 = (_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v10 = type metadata accessor for AEAParticipant(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
  {
    v12 = sub_100004D20(&qword_100093970);
    memcpy(v9, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v9 = *v8;
    *(_OWORD *)(v9 + 1) = *(_OWORD *)(v8 + 1);
    *((_BYTE *)v9 + 24) = *((_BYTE *)v8 + 24);
    v13 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v14 = (char *)v9 + v13;
    v15 = (char *)v8 + v13;
    *v14 = *((_BYTE *)v8 + v13);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)((char *)v8 + v13 + 8);
    v16 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v17 = &v14[v16];
    v18 = &v15[v16];
    v19 = type metadata accessor for URL(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_100004D20(&qword_10008F508);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_OWORD *)((char *)v9 + *(int *)(v10 + 20)) = *(_OWORD *)((char *)v8 + *(int *)(v10 + 20));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_10002EDC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_unknownObjectRelease(v9);
  sub_100004D60((_QWORD *)(a1 + 32));
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v11 = *(int *)(a3 + 36);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for AEAParticipant(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (v18)
    {
      sub_10002F554(v12, type metadata accessor for AEAParticipant);
      goto LABEL_7;
    }
    v29 = *(void **)v12;
    *(_QWORD *)v12 = *(_QWORD *)v13;

    v30 = *(_QWORD *)(v13 + 16);
    v31 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(v12 + 16) = v30;
    swift_bridgeObjectRelease(v31);
    *(_BYTE *)(v12 + 24) = *(_BYTE *)(v13 + 24);
    v32 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v33 = v12 + v32;
    v34 = v13 + v32;
    *(_BYTE *)v33 = *(_BYTE *)(v13 + v32);
    v35 = *(_QWORD *)(v13 + v32 + 16);
    v36 = *(_QWORD *)(v12 + v32 + 16);
    *(_QWORD *)(v33 + 8) = *(_QWORD *)(v13 + v32 + 8);
    *(_QWORD *)(v33 + 16) = v35;
    swift_bridgeObjectRelease(v36);
    v37 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v38 = (void *)(v33 + v37);
    v39 = (void *)(v34 + v37);
    v40 = type metadata accessor for URL(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
    v43 = v42(v38, 1, v40);
    v44 = v42(v39, 1, v40);
    if (v43)
    {
      if (!v44)
      {
        (*(void (**)(void *, void *, uint64_t))(v41 + 32))(v38, v39, v40);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
LABEL_16:
        v46 = *(int *)(v14 + 20);
        v47 = v12 + v46;
        v48 = v13 + v46;
        *(_BYTE *)v47 = *(_BYTE *)v48;
        v49 = *(_QWORD *)(v47 + 8);
        *(_QWORD *)(v47 + 8) = *(_QWORD *)(v48 + 8);
        swift_bridgeObjectRelease(v49);
        return a1;
      }
    }
    else
    {
      if (!v44)
      {
        (*(void (**)(void *, void *, uint64_t))(v41 + 40))(v38, v39, v40);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v41 + 8))(v38, v40);
    }
    v45 = sub_100004D20(&qword_10008F508);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_16;
  }
  if (v18)
  {
LABEL_7:
    v28 = sub_100004D20(&qword_100093970);
    memcpy((void *)v12, (const void *)v13, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(v13 + 8);
  *(_BYTE *)(v12 + 24) = *(_BYTE *)(v13 + 24);
  v19 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v20 = v12 + v19;
  v21 = v13 + v19;
  *(_BYTE *)v20 = *(_BYTE *)(v13 + v19);
  *(_OWORD *)(v20 + 8) = *(_OWORD *)(v13 + v19 + 8);
  v22 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v23 = (void *)(v20 + v22);
  v24 = (const void *)(v21 + v22);
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = sub_100004D20(&qword_10008F508);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  *(_OWORD *)(v12 + *(int *)(v14 + 20)) = *(_OWORD *)(v13 + *(int *)(v14 + 20));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_10002F108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002F114);
}

uint64_t sub_10002F114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004D20(&qword_100093970);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_10002F194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002F1A0);
}

uint64_t sub_10002F1A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004D20(&qword_100093970);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AEAExpirationActivation(uint64_t a1)
{
  uint64_t result;

  result = qword_100091670;
  if (!qword_100091670)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAExpirationActivation);
  return result;
}

void sub_10002F254(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1000678E8;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_100067900;
  v4[3] = &unk_100067918;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000290F0(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_10002F2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AEAExpirationActivation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for AEAExpirationActivation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  sub_100004D60((_QWORD *)(v0 + v4 + 32));
  v6 = v0 + v4 + *(int *)(v1 + 36);
  v7 = type metadata accessor for AEAParticipant(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {

    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 16));
    v8 = v6 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 16));
    v9 = v8 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v7 + 20) + 8));
  }
  v12 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = v3 | 7;
  v16 = v0 + v12;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v12));
  swift_release(*(_QWORD *)(v16 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + 8));
  sub_100004D60((_QWORD *)(v0 + v14));
  return swift_deallocObject(v0, v14 + 40, v15);
}

uint64_t sub_10002F4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AEAExpirationActivation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F4F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for AEAExpirationActivation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10002D91C(v0 + v2, *(_QWORD *)(v0 + v3), *(void (**)(void))(v0 + v3 + 8), *(_QWORD *)(v0 + v3 + 16), *(_QWORD *)(v0 + ((v3 + 31) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 31) & 0xFFFFFFFFFFFFFFF8) + 8), v0 + ((((v3 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_10002F554(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002F590(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002F5A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002F5A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002F5D4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  sub_100004D60(v0 + 6);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10002F608(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1000916CC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000CB20;
  return sub_10002DC28(a1, v4, v5, v6, v7);
}

ValueMetadata *type metadata accessor for AEAExpirationDeactivation()
{
  return &type metadata for AEAExpirationDeactivation;
}

uint64_t sub_10002F698(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10002F6B0, 0, 0);
}

uint64_t sub_10002F6B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;

  if (qword_10008E608 != -1)
    swift_once(&qword_10008E608, sub_100015628);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000B164(v1, (uint64_t)qword_100093E90);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Cancelling expiration timer", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void **)(v0 + 16);

  objc_msgSend(v6, "cancel");
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_10002F9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[5];
  _QWORD v26[5];

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008380(v2 + 16, (uint64_t)v26);
  v9 = objc_msgSend((id)objc_opt_self(AEFileSystem), "assessmentAgentPolicyStoreDirectoryURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v10 = sub_100013D84((uint64_t)v26, v26[3]);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = *v12;
  v15 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  v25[3] = v15;
  v25[4] = &off_1000832C0;
  v25[0] = v14;
  v16 = _s17WritingScratchpadCMa(0);
  v17 = (_QWORD *)swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v18 = sub_100013D84((uint64_t)v25, v15);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = *v20;
  v17[5] = v15;
  v17[6] = &off_1000832C0;
  v17[2] = v22;
  *(_QWORD *)((char *)v17 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_backing) = _swiftEmptyDictionarySingleton;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))((uint64_t)v17 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad____lazy_storage___fileURL, 1, 1, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))((uint64_t)v17 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_directoryURL, v8, v5);
  v23 = (_QWORD *)((char *)v17 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17WritingScratchpad_fileName);
  *v23 = a1;
  v23[1] = a2;
  swift_bridgeObjectRetain(a2);
  sub_100004D60(v25);
  sub_100004D60(v26);
  return v17;
}

uint64_t sub_10002FC28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[5];
  _QWORD v25[5];

  v5 = type metadata accessor for URL(0);
  __chkstk_darwin(v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008380(v2 + 16, (uint64_t)v25);
  v8 = objc_msgSend((id)objc_opt_self(AEFileSystem), "assessmentAgentPolicyStoreDirectoryURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v9 = sub_100013D84((uint64_t)v25, v25[3]);
  __chkstk_darwin(v9);
  v11 = (_QWORD *)((char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = *v11;
  v14 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  v24[3] = v14;
  v24[4] = &off_1000832C0;
  v24[0] = v13;
  v15 = _s17ReadingScratchpadCMa(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v17 = sub_100013D84((uint64_t)v24, v14);
  __chkstk_darwin(v17);
  v19 = (_QWORD *)((char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  v21 = *v19;
  swift_bridgeObjectRetain(a2);
  v22 = sub_10002FFC8(v21, v7, a1, a2, v16);
  sub_100004D60(v24);
  sub_100004D60(v25);
  return v22;
}

uint64_t sub_10002FF84()
{
  uint64_t v0;

  sub_100004D60((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for AEAPolicyStore()
{
  return objc_opt_self(_TtC15assessmentagent14AEAPolicyStore);
}

uint64_t sub_10002FFC8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  void (*v21)(char *, uint64_t);
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v24[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  v26 = &off_1000832C0;
  v24[0] = a1;
  *(_QWORD *)(a5 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___backing) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___fileURL, 1, 1, v10);
  sub_100008380((uint64_t)v24, a5 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a5 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad_directoryURL, a2, v10);
  v14 = (_QWORD *)(a5 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad_fileName);
  *v14 = a3;
  v14[1] = a4;
  v15 = sub_1000060F4(v24, v25);
  v16 = sub_100059070((uint64_t)v13);
  v17 = *(void **)(*v15 + 16);
  URL.path.getter(v16);
  v19 = v18;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  LODWORD(v19) = objc_msgSend(v17, "fileExistsAtPath:", v20);

  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(a2, v10);
  v21(v13, v10);
  if (!(_DWORD)v19)
  {
    swift_release(a5);
    a5 = 0;
  }
  sub_100004D60(v24);
  return a5;
}

uint64_t sub_10003015C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  void *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000302EC();
  static DispatchQoS.userInteractive.getter();
  v15 = &_swiftEmptyArrayStorage;
  v10 = sub_100030328();
  v11 = sub_100004D20(&qword_1000917B8);
  v12 = sub_100030370();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000025, 0x800000010006CE60, v9, v6, v3, 0);
  qword_100093EB8 = result;
  return result;
}

unint64_t sub_1000302EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091600;
  if (!qword_100091600)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100091600);
  }
  return result;
}

unint64_t sub_100030328()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000917B0;
  if (!qword_1000917B0)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1000917B0);
  }
  return result;
}

unint64_t sub_100030370()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000917C0;
  if (!qword_1000917C0)
  {
    v1 = sub_100005520(&qword_1000917B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000917C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAFailingDeactivationAction()
{
  return &type metadata for AEAFailingDeactivationAction;
}

uint64_t sub_1000303E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch(sub_1000303F8, 0, 0);
}

uint64_t sub_1000303F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Logger(0);
  sub_10000B164(v2, (uint64_t)qword_100093E18);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 24);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v12 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 16) = sub_100059C74(v8, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%s] Deactivation succeeding in recovery", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 32), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000305B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *v0;
  v3 = v0[1];
  v4 = (_QWORD *)swift_task_alloc(dword_1000917FC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100014AC4;
  v4[3] = v2;
  v4[4] = v3;
  return swift_task_switch(sub_1000303F8, 0, 0);
}

uint64_t sub_100030614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch(sub_10003062C, 0, 0);
}

uint64_t sub_10003062C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Logger(0);
  sub_10000B164(v2, (uint64_t)qword_100093E18);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 24);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v14 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 16) = sub_100059C74(v8, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%s] Deactivation failing here", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 32), 2);
  }

  v11 = sub_100030E00();
  v12 = swift_allocError(&type metadata for AEAFailingDeactivationActionError, v11, 0, 0);
  swift_willThrow(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003080C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *v0;
  v3 = v0[1];
  v4 = (_QWORD *)swift_task_alloc(dword_1000917EC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000CB20;
  v4[3] = v2;
  v4[4] = v3;
  return swift_task_switch(sub_10003062C, 0, 0);
}

uint64_t sub_10003086C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch(sub_1000308D0, 0, 0);
}

uint64_t sub_1000308D0()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 32);
  swift_getObjectType(v1);
  swift_unknownObjectRetain(v1);
  sub_10000C19C(1);
  *(_QWORD *)(v0 + 16) = 0;
  v2 = objc_msgSend(v1, "persistWithError:", v0 + 16);
  v3 = *(void **)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 32);
  if (v2)
  {
    v5 = *(uint64_t **)(v0 + 24);
    v5[3] = (uint64_t)&type metadata for AEAFailingDeactivation;
    v5[4] = (uint64_t)&off_100084E80;
    v6 = swift_allocObject(&unk_100084D10, 41, 7);
    *v5 = v6;
    v7 = v3;
    swift_unknownObjectRelease(v4);
    *(_QWORD *)(v6 + 16) = 0xD000000000000036;
    *(_QWORD *)(v6 + 24) = 0x800000010006CE90;
    *(_QWORD *)(v6 + 32) = 4;
    *(_BYTE *)(v6 + 40) = 0;
  }
  else
  {
    v8 = v3;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v9);
    swift_unknownObjectRelease(v4);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100030A54(_QWORD *a1@<X8>)
{
  a1[3] = &type metadata for AEASuccedingDeactivation;
  a1[4] = &off_100084E60;
  *a1 = 0xD00000000000003FLL;
  a1[1] = 0x800000010006CED0;
  a1[2] = 4;
}

uint64_t sub_100030A90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000917D4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100014AC4;
  v5[3] = a1;
  v5[4] = a2;
  return swift_task_switch(sub_1000308D0, 0, 0);
}

uint64_t sub_100030AF4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 41, 7);
}

_QWORD *_s15assessmentagent28AEAFailingDeactivationActionVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *_s15assessmentagent28AEAFailingDeactivationActionVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *_s15assessmentagent28AEAFailingDeactivationActionVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARunningBoardApplication(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARunningBoardApplication(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEASuccedingDeactivation()
{
  return &type metadata for AEASuccedingDeactivation;
}

uint64_t initializeWithCopy for AEAFailingDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for AEAFailingDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for AEAFailingDeactivation(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AEAFailingDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAFailingDeactivation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAFailingDeactivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAFailingDeactivation()
{
  return &type metadata for AEAFailingDeactivation;
}

unint64_t sub_100030E00()
{
  unint64_t result;

  result = qword_1000917F0;
  if (!qword_1000917F0)
  {
    result = swift_getWitnessTable(&unk_100067B3C, &type metadata for AEAFailingDeactivationActionError);
    atomic_store(result, &qword_1000917F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AEAFailingDeactivationActionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100030E84 + 4 * asc_1000679E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100030EA4 + 4 * byte_1000679E5[v4]))();
}

_BYTE *sub_100030E84(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100030EA4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100030EAC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100030EB4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100030EBC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100030EC4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AEAFailingDeactivationActionError()
{
  return &type metadata for AEAFailingDeactivationActionError;
}

unint64_t sub_100030EE4()
{
  unint64_t result;

  result = qword_100091800;
  if (!qword_100091800)
  {
    result = swift_getWitnessTable(&unk_100067B14, &type metadata for AEAFailingDeactivationActionError);
    atomic_store(result, (unint64_t *)&qword_100091800);
  }
  return result;
}

void destroy for AEARunningBoardApplication(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

_QWORD *_s15assessmentagent26AEARunningBoardApplicationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for AEARunningBoardApplication(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  return a1;
}

_QWORD *assignWithTake for AEARunningBoardApplication(_QWORD *a1, uint64_t a2)
{
  void *v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for AEARunningBoardApplication()
{
  return &type metadata for AEARunningBoardApplication;
}

Swift::Int sub_100031040()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = (void *)v0[2];
  Hasher.init(_seed:)(v6, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  v4 = v3;
  NSObject.hash(into:)(v6);

  return Hasher._finalize()();
}

void sub_1000310B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *v1;
  v4 = v1[1];
  v5 = (void *)v1[2];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  v6 = v5;
  NSObject.hash(into:)(a1);

}

Swift::Int sub_100031128(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD v7[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = (void *)v1[2];
  Hasher.init(_seed:)(v7, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  v5 = v4;
  NSObject.hash(into:)(v7);

  return Hasher._finalize()();
}

void sub_10003119C(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*(id *)(v1 + 16), "dataRepresentation");
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t sub_1000311F0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a2[1];
  v8 = a2[2];
  v9 = v4 == *a2 && v5 == v7;
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v7, 0) & 1) == 0)
    return 0;
  sub_10001880C();
  return static NSObject.== infix(_:_:)(v6, v8) & 1;
}

unint64_t sub_100031264()
{
  unint64_t result;

  result = qword_100091808;
  if (!qword_100091808)
  {
    result = swift_getWitnessTable(&unk_100067BFC, &type metadata for AEARunningBoardApplication);
    atomic_store(result, (unint64_t *)&qword_100091808);
  }
  return result;
}

void sub_1000312A8()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093EC0 = v5;
  *(_QWORD *)algn_100093EC8 = v7;
}

void sub_1000313B8()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093ED0 = v5;
  *(_QWORD *)algn_100093ED8 = v7;
}

void sub_1000314C8()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093EE0 = v5;
  *(_QWORD *)algn_100093EE8 = v7;
}

void sub_1000315D8()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093EF0 = v5;
  *(_QWORD *)algn_100093EF8 = v7;
}

void sub_1000316E4()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093F00 = v5;
  *(_QWORD *)algn_100093F08 = v7;
}

void sub_1000317F0()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093F10 = v5;
  *(_QWORD *)algn_100093F18 = v7;
}

void sub_100031900()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093F20 = v5;
  *(_QWORD *)algn_100093F28 = v7;
}

void sub_100031A10()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093F30 = v5;
  *(_QWORD *)algn_100093F38 = v7;
}

void sub_100031B20()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093F40 = v5;
  *(_QWORD *)algn_100093F48 = v7;
}

void sub_100031C30()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093F50 = v5;
  *(_QWORD *)algn_100093F58 = v7;
}

void sub_100031D40()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093F60 = v5;
  *(_QWORD *)algn_100093F68 = v7;
}

void sub_100031E4C()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093F70 = v5;
  *(_QWORD *)algn_100093F78 = v7;
}

void sub_100031F5C()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093F80 = v5;
  *(_QWORD *)algn_100093F88 = v7;
}

void sub_10003206C()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  qword_100093F90 = v5;
  *(_QWORD *)algn_100093F98 = v7;
}

id sub_10003217C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE v9[24];

  v1 = v0;
  swift_beginAccess(v0 + 40, v9, 33, 0);
  sub_100051D40();
  swift_endAccess(v9);
  swift_beginAccess(v0 + 32, v9, 1, 0);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 32) = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v2);
  if (qword_10008E5F8 != -1)
    swift_once(&qword_10008E5F8, sub_1000155D8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000B164(v3, (uint64_t)qword_100093E60);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Removing all windows from assessment mode", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  return objc_msgSend(*(id *)(v1 + 16), "removeAllWindowsFromAssessmentMode");
}

uint64_t sub_1000322B0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for AEAWindowServerAssertion()
{
  return objc_opt_self(_TtC15assessmentagentP33_13E14DB96F147EC8F811772C6826926524AEAWindowServerAssertion);
}

void sub_10003230C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;

  v5 = v4;
  v9 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = &_swiftEmptySetSingleton;
  v12 = sub_100004D20(&qword_100091908);
  v13 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100065EB0;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v5, a3);
  v14 = _getErrorEmbeddedNSError<A>(_:)(v11, a3, a4);
  if (v14)
  {
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
    v16 = 1;
  }
  else
  {
    v15 = swift_allocError(a3, a4, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v17, v11, a3);
    v16 = *(_QWORD *)(v13 + 16);
  }
  *(_QWORD *)(v13 + 32) = v15;
  v33 = v13;
  v34 = v13 + 32;
  if (!v16)
  {
LABEL_21:
    swift_unknownObjectRelease(v13);
    swift_bridgeObjectRelease(v37);
    return;
  }
  v18 = 0;
  v19 = (2 * v16) | 1;
  while (v18 < (uint64_t)(v19 >> 1))
  {
    if (v16 <= v18)
      goto LABEL_25;
    if (v19 >> 1 < v16)
      goto LABEL_26;
    v20 = v33;
    v21 = *(_QWORD *)(v34 + 8 * v18++);
    v19 = v19 & 1 | (2 * v16);
    v35 = v18;
    v36 = v19;
    swift_errorRetain(v21);
    v22 = (void *)_convertErrorToNSError(_:)(v21);
    v23 = v37;
    if (v37[2])
    {
      v24 = static Hasher._hash(seed:_:)(v37[5], v22);
      v25 = -1 << *((_BYTE *)v23 + 32);
      v26 = v24 & ~v25;
      if (((*(_QWORD *)((char *)v23 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v26) & 1) != 0)
      {
        v27 = v23[6];
        if (*(void **)(v27 + 8 * v26) == v22)
        {
LABEL_6:

          swift_errorRelease(v21);
          goto LABEL_7;
        }
        v28 = ~v25;
        while (1)
        {
          v26 = (v26 + 1) & v28;
          if (((*(_QWORD *)((char *)v23 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v26) & 1) == 0)
            break;
          if (*(void **)(v27 + 8 * v26) == v22)
            goto LABEL_6;
        }
      }
    }
    if ((a1(v21) & 1) != 0)
    {
      swift_errorRelease(v21);
      swift_bridgeObjectRelease(v23);
      swift_unknownObjectRelease(v20);

      return;
    }
    sub_100032E34(&v32, (uint64_t)v22);
    v29 = objc_msgSend(v22, "underlyingErrors");
    v30 = sub_100004D20(&qword_100090790);
    v31 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

    sub_1000325F8(v31);
    swift_errorRelease(v21);

    v18 = v35;
    v19 = v36;
LABEL_7:
    v16 = v19 >> 1;
    if (v18 == v19 >> 1)
    {
      v13 = v33;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
}

_QWORD *sub_1000325F8(_QWORD *a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *result;

  v3 = v1[2];
  v2 = v1[3];
  v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_36;
  }
  v6 = a1[2];
  if ((v2 & 1) == 0)
    goto LABEL_7;
  v7 = *v1;
  v8 = v1[1];
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain(v7);
  v11 = (_QWORD *)swift_dynamicCastClass(v10, v9);
  if (!v11)
  {
    swift_unknownObjectRelease(v7);
    v11 = _swiftEmptyArrayStorage;
  }
  v12 = v11[2];
  if ((_QWORD *)(v8 + 8 * v3 + 8 * v4) != &v11[v12 + 4])
  {
    swift_release(v11);
LABEL_7:
    v13 = v4;
    goto LABEL_9;
  }
  v14 = v11[3];
  swift_release(v11);
  v15 = (v14 >> 1) - v12;
  v16 = __OFADD__(v4, v15);
  v13 = v4 + v15;
  if (v16)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_9:
  v17 = v4 + v6;
  if (__OFADD__(v4, v6))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v13 < v17)
  {
    if (v13 + 0x4000000000000000 < 0)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v18 = 2 * v13;
    if (v18 > v17)
      v17 = v18;
  }
  sub_100036374(v17);
  v20 = v1[2];
  v19 = v1[3];
  v21 = (v19 >> 1) - v20;
  if (__OFSUB__(v19 >> 1, v20))
    goto LABEL_37;
  v22 = v1[1] + 8 * v20 + 8 * v21;
  if ((v19 & 1) == 0)
  {
LABEL_20:
    v28 = v21;
    goto LABEL_22;
  }
  v23 = *v1;
  v24 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v25 = swift_unknownObjectRetain(v23);
  v26 = (_QWORD *)swift_dynamicCastClass(v25, v24);
  if (!v26)
  {
    swift_unknownObjectRelease(v23);
    v26 = _swiftEmptyArrayStorage;
  }
  v27 = v26[2];
  if ((_QWORD *)v22 != &v26[v27 + 4])
  {
    swift_release(v26);
    goto LABEL_20;
  }
  v29 = v26[3];
  swift_release(v26);
  v30 = (v29 >> 1) - v27;
  v16 = __OFADD__(v21, v30);
  v28 = v21 + v30;
  if (v16)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
    __break(1u);
    return result;
  }
LABEL_22:
  v31 = v28 - v21;
  if (__OFSUB__(v28, v21))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v32 = a1[2];
  if (v32)
  {
    if (v31 >= v6)
    {
      if ((unint64_t)(a1 + 4) < v22 + 8 * v6 && v22 < (unint64_t)&a1[v6 + 4])
        goto LABEL_45;
      sub_100004D20(&qword_100090790);
      swift_arrayInitWithCopy(v22);
      if (v6 <= 0)
        goto LABEL_32;
      if (!__OFADD__(v21, v6))
      {
        sub_100035F88((_QWORD *)(v21 + v6));
        goto LABEL_32;
      }
      goto LABEL_42;
    }
    goto LABEL_40;
  }
  if (v6 > 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v6 = 0;
LABEL_32:
  if (v6 == v31)
    return sub_10003603C(a1, v32);
  else
    return (_QWORD *)swift_bridgeObjectRelease(a1);
}

uint64_t sub_100032890(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1000340E4(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100032A3C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt v25;
  Class isa;
  Swift::UInt v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  Class v38;
  Class v39;
  char v40;
  uint64_t v42;
  _QWORD *v43;
  id *v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  id *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD v56[9];

  v49 = a1;
  v4 = type metadata accessor for AEAParticipant(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v47 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (id **)((char *)&v47 - v13);
  __chkstk_darwin(v12);
  v47 = (id *)((char *)&v47 - v15);
  v48 = v2;
  v16 = *v2;
  Hasher.init(_seed:)(v56, *(_QWORD *)(*v2 + 40));
  v17 = (void *)*a2;
  swift_bridgeObjectRetain(v16);
  v18 = objc_msgSend(v17, "dataRepresentation");
  v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  Data.hash(into:)(v56, v19, v21);
  sub_100006118(v19, v21);
  v22 = (unsigned __int8 *)a2 + *(int *)(v4 + 20);
  v23 = *v22;
  v24 = *((_QWORD *)v22 + 1);
  swift_bridgeObjectRetain(v24);
  v25 = Bool.hashValue.getter(v23);
  Hasher._combine(_:)(v25);
  v51 = (char *)&type metadata for Any + 8;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v27 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v27);
  swift_bridgeObjectRelease(v24);
  v28 = Hasher._finalize()();
  v29 = -1 << *(_BYTE *)(v16 + 32);
  v30 = v28 & ~v29;
  v54 = v16 + 56;
  if (((*(_QWORD *)(v16 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
  {
    v52 = ~v29;
    v55 = sub_10001880C();
    v53 = *(_QWORD *)(v5 + 72);
    v31 = v16;
    v50 = v16;
    do
    {
      v32 = v53 * v30;
      sub_100018848(*(_QWORD *)(v31 + 48) + v53 * v30, (uint64_t)v14);
      v33 = static NSObject.== infix(_:_:)(*v14, *a2);
      sub_100018848((uint64_t)v14, (uint64_t)v11);
      sub_100018848((uint64_t)a2, (uint64_t)v8);
      if ((v33 & 1) != 0 && v11[*(int *)(v4 + 20)] == v8[*(int *)(v4 + 20)])
      {
        v34 = v11;
        v35 = v8;
        v36 = v4;
        v37 = a2;
        v38 = Dictionary._bridgeToObjectiveC()().super.isa;
        v39 = Dictionary._bridgeToObjectiveC()().super.isa;
        v40 = static NSObject.== infix(_:_:)(v38, v39);

        a2 = v37;
        v4 = v36;
        v8 = v35;
        v11 = v34;
        v31 = v50;

        sub_10001888C((uint64_t)v11);
        sub_10001888C((uint64_t)v8);
        sub_10001888C((uint64_t)v14);
        if ((v40 & 1) != 0)
        {
          swift_bridgeObjectRelease(v31);
          sub_10001888C((uint64_t)a2);
          sub_100018848(*(_QWORD *)(*v48 + 48) + v32, v49);
          return 0;
        }
      }
      else
      {
        sub_10001888C((uint64_t)v11);
        sub_10001888C((uint64_t)v8);
        sub_10001888C((uint64_t)v14);
      }
      v30 = (v30 + 1) & v52;
    }
    while (((*(_QWORD *)(v54 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0);
    swift_bridgeObjectRelease(v31);
    v43 = v48;
    v42 = v49;
    v44 = v47;
  }
  else
  {
    swift_bridgeObjectRelease(v16);
    v44 = v47;
    v43 = v48;
    v42 = v49;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v43);
  sub_100018848((uint64_t)a2, (uint64_t)v44);
  v56[0] = *v43;
  *v43 = 0x8000000000000000;
  sub_10003427C(v44, v30, isUniquelyReferenced_nonNull_native);
  v46 = *v43;
  *v43 = v56[0];
  swift_bridgeObjectRelease(v46);
  sub_100023A48((uint64_t)a2, v42);
  return 1;
}

uint64_t sub_100032E34(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_100034638(a2, v9, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v15;
    swift_bridgeObjectRelease(v14);
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100032F2C(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t *v4;
  uint64_t v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  id v21;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  id v27;
  _QWORD *v28;
  _QWORD v30[9];

  v8 = *v4;
  Hasher.init(_seed:)(v30, *(_QWORD *)(*v4 + 40));
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v30, a2, a3);
  swift_bridgeObjectRelease(a3);
  v9 = a4;
  NSObject.hash(into:)(v30);

  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    while (1)
    {
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 24 * v12);
      v17 = v16[1];
      v18 = (void *)v16[2];
      v19 = *v16 == a2 && v17 == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v16[1], a2, a3, 0) & 1) != 0)
      {
        sub_10001880C();
        swift_bridgeObjectRetain(v17);
        v14 = v18;
        v15 = static NSObject.== infix(_:_:)(v14, v9);

        swift_bridgeObjectRelease(v17);
        if ((v15 & 1) != 0)
          break;
      }
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_11;
    }

    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
    v24 = (uint64_t *)(*(_QWORD *)(*v28 + 48) + 24 * v12);
    v25 = v24[1];
    v26 = (void *)v24[2];
    *a1 = *v24;
    a1[1] = v25;
    a1[2] = (uint64_t)v26;
    swift_bridgeObjectRetain(v25);
    v27 = v26;
    return 0;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease(v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v28);
    v30[0] = *v28;
    *v28 = 0x8000000000000000;
    swift_bridgeObjectRetain(a3);
    v21 = v9;
    sub_100034758(a2, a3, v21, v12, isUniquelyReferenced_nonNull_native);
    v22 = *v28;
    *v28 = v30[0];
    swift_bridgeObjectRelease(v22);
    *a1 = a2;
    a1[1] = a3;
    result = 1;
    a1[2] = (uint64_t)v21;
  }
  return result;
}

uint64_t sub_100033154(_DWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v6 + 40), a2, 4);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_100034954(a2, v9, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v15;
    swift_bridgeObjectRelease(v14);
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_100033254(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100004D20(&qword_100090CE0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100033530(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for AEAParticipant(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (id *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100004D20(qword_100090FB0);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_28;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = (_QWORD *)(v8 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & *(_QWORD *)(v8 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  result = swift_retain(v8);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_8;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    if (v19 >= v14)
      goto LABEL_24;
    v20 = v11[v19];
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_24;
      v20 = v11[v16];
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_24;
        v20 = v11[v16];
        if (!v20)
          break;
      }
    }
LABEL_23:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_8:
    sub_100023A48(*(_QWORD *)(v8 + 48) + *(_QWORD *)(v5 + 72) * v18, (uint64_t)v7);
    result = sub_100033F74(v7, v9);
  }
  v21 = v19 + 3;
  if (v21 < v14)
  {
    v20 = v11[v21];
    if (!v20)
    {
      while (1)
      {
        v16 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_30;
        if (v16 >= v14)
          goto LABEL_24;
        v20 = v11[v16];
        ++v21;
        if (v20)
          goto LABEL_23;
      }
    }
    v16 = v21;
    goto LABEL_23;
  }
LABEL_24:
  swift_release(v8);
  v22 = 1 << *(_BYTE *)(v8 + 32);
  if (v22 > 63)
    bzero((void *)(v8 + 56), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v22;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_28:
  result = swift_release(v8);
  *v2 = v9;
  return result;
}

uint64_t sub_10003374C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100004D20(&qword_100091910);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1000339CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100004D20(&qword_100090FA8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v32[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v32[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v32[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v32, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v32[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = *(_QWORD *)(v3 + 48) + 24 * v17;
      v22 = *(_QWORD *)v21;
      v33 = *(_OWORD *)(v21 + 8);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      swift_bridgeObjectRetain(v33);
      String.hash(into:)(v34, v22, v33);
      swift_bridgeObjectRelease(v33);
      v23 = *((id *)&v33 + 1);
      NSObject.hash(into:)(v34);

      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v6 + 48) + 24 * v14;
      *(_QWORD *)v15 = v22;
      *(_OWORD *)(v15 + 8) = v33;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100033CF0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100004D20(&qword_100091918);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v16);
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v6 + 40), v20, 4);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100033F74(id *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt v12;
  Class isa;
  Swift::UInt v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t result;
  _QWORD v18[9];

  Hasher.init(_seed:)(v18, *(_QWORD *)(a2 + 40));
  v4 = objc_msgSend(*a1, "dataRepresentation");
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  Data.hash(into:)(v18, v5, v7);
  sub_100006118(v5, v7);
  v8 = type metadata accessor for AEAParticipant(0);
  v9 = (unsigned __int8 *)a1 + *(int *)(v8 + 20);
  v10 = *v9;
  v11 = *((_QWORD *)v9 + 1);
  swift_bridgeObjectRetain(v11);
  v12 = Bool.hashValue.getter(v10);
  Hasher._combine(_:)(v12);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v14 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v14);
  swift_bridgeObjectRelease(v11);
  v15 = Hasher._finalize()();
  v16 = _HashTable.nextHole(atOrAfter:)(v15 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
  result = sub_100023A48((uint64_t)a1, *(_QWORD *)(a2 + 48) + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * v16);
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_1000340E4(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100033254(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100034A78();
      goto LABEL_22;
    }
    sub_100035320(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_10003427C(id *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  Class isa;
  Swift::UInt v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  Class v37;
  Class v38;
  char v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  id *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD v54[9];

  v50 = type metadata accessor for AEAParticipant(0);
  v7 = *(_QWORD *)(v50 - 8);
  v8 = __chkstk_darwin(v50);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v45 - v14);
  v16 = *(_QWORD *)(*v3 + 16);
  v17 = *(_QWORD *)(*v3 + 24);
  v46 = v7;
  v47 = v3;
  if (v17 > v16 && (a3 & 1) != 0)
    goto LABEL_17;
  v18 = v16 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100033530(v18);
  }
  else
  {
    if (v17 > v16)
    {
      sub_100034C28();
      goto LABEL_17;
    }
    sub_1000355CC(v18);
  }
  v19 = *v3;
  Hasher.init(_seed:)(v54, *(_QWORD *)(*v3 + 40));
  v20 = objc_msgSend(*a1, "dataRepresentation");
  v21 = a1;
  v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v24 = v23;

  Data.hash(into:)(v54, v22, v24);
  sub_100006118(v22, v24);
  v25 = *(int *)(v50 + 20);
  v49 = v21;
  v26 = (unsigned __int8 *)v21 + v25;
  v27 = *v26;
  v28 = *((_QWORD *)v26 + 1);
  swift_bridgeObjectRetain(v28);
  v29 = Bool.hashValue.getter(v27);
  Hasher._combine(_:)(v29);
  v48 = (char *)&type metadata for Any + 8;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v31 = NSObject.hashValue.getter();

  Hasher._combine(_:)(v31);
  swift_bridgeObjectRelease(v28);
  v32 = Hasher._finalize()();
  v33 = -1 << *(_BYTE *)(v19 + 32);
  a2 = v32 & ~v33;
  v51 = v19 + 56;
  v52 = v19;
  if (((*(_QWORD *)(v19 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_16;
  v34 = ~v33;
  v53 = sub_10001880C();
  v35 = *(_QWORD *)(v7 + 72);
  a1 = v49;
  while (1)
  {
    sub_100018848(*(_QWORD *)(v52 + 48) + v35 * a2, (uint64_t)v15);
    v36 = static NSObject.== infix(_:_:)(*v15, *a1);
    sub_100018848((uint64_t)v15, (uint64_t)v13);
    sub_100018848((uint64_t)a1, (uint64_t)v10);
    if ((v36 & 1) != 0 && v13[*(int *)(v50 + 20)] == v10[*(int *)(v50 + 20)])
      break;
    sub_10001888C((uint64_t)v13);
    sub_10001888C((uint64_t)v10);
    sub_10001888C((uint64_t)v15);
LABEL_11:
    a2 = (a2 + 1) & v34;
    if (((*(_QWORD *)(v51 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
      goto LABEL_17;
  }
  v37 = Dictionary._bridgeToObjectiveC()().super.isa;
  v38 = Dictionary._bridgeToObjectiveC()().super.isa;
  v39 = static NSObject.== infix(_:_:)(v37, v38);

  a1 = v49;
  sub_10001888C((uint64_t)v13);
  sub_10001888C((uint64_t)v10);
  sub_10001888C((uint64_t)v15);
  if ((v39 & 1) == 0)
    goto LABEL_11;
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v50);
  __break(1u);
LABEL_16:
  a1 = v49;
LABEL_17:
  v40 = *v47;
  *(_QWORD *)(*v47 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_100023A48((uint64_t)a1, *(_QWORD *)(v40 + 48) + *(_QWORD *)(v46 + 72) * a2);
  v42 = *(_QWORD *)(v40 + 16);
  v43 = __OFADD__(v42, 1);
  v44 = v42 + 1;
  if (v43)
    __break(1u);
  else
    *(_QWORD *)(v40 + 16) = v44;
  return result;
}

uint64_t sub_100034638(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10003374C(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_100034E20();
      goto LABEL_14;
    }
    sub_1000357B4(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_100034758(uint64_t result, uint64_t a2, void *a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD v30[9];

  v9 = result;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0)
    goto LABEL_18;
  v12 = v10 + 1;
  if ((a5 & 1) != 0)
  {
    sub_1000339CC(v12);
  }
  else
  {
    if (v11 > v10)
    {
      result = (uint64_t)sub_100034FB4();
      goto LABEL_18;
    }
    sub_100035A14(v12);
  }
  v13 = *v5;
  Hasher.init(_seed:)(v30, *(_QWORD *)(*v5 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v30, v9, a2);
  swift_bridgeObjectRelease(a2);
  v14 = a3;
  NSObject.hash(into:)(v30);

  result = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a4 = result & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v16 = ~v15;
    do
    {
      v19 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 24 * a4);
      v20 = v19[1];
      v21 = (void *)v19[2];
      v22 = *v19 == v9 && v20 == a2;
      if (v22 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v19, v19[1], v9, a2, 0), (result & 1) != 0))
      {
        sub_10001880C();
        swift_bridgeObjectRetain(v20);
        v17 = v21;
        v18 = static NSObject.== infix(_:_:)(v17, v14);

        result = swift_bridgeObjectRelease(v20);
        if ((v18 & 1) != 0)
          goto LABEL_21;
      }
      a4 = (a4 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_18:
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 24 * a4);
  *v24 = v9;
  v24[1] = a2;
  v24[2] = (uint64_t)a3;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_21:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AEARunningBoardApplication);
  __break(1u);
  return result;
}

uint64_t sub_100034954(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100033CF0(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_10003518C();
      goto LABEL_14;
    }
    sub_100035D24(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(*v3 + 40), v5, 4);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_DWORD *)(v11 + 4 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_DWORD *)(v11 + 4 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(_QWORD *)(v13 + 48) + 4 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

void *sub_100034A78()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100004D20(&qword_100090CE0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100034C28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for AEAParticipant(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004D20(qword_100090FB0);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v6);
    *v1 = v8;
    return result;
  }
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    sub_100018848(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5);
    result = (void *)sub_100023A48((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
    goto LABEL_28;
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100034E20()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100004D20(&qword_100091910);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100034FB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22;

  v1 = v0;
  sub_100004D20(&qword_100090FA8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_28;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_28;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v13)
          goto LABEL_28;
        v20 = *(_QWORD *)(v6 + 8 * v9);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v22 = *(_OWORD *)(v17 + 8);
    *(_QWORD *)v18 = *(_QWORD *)v17;
    *(_OWORD *)(v18 + 8) = v22;
    swift_bridgeObjectRetain(v22);
    result = *((id *)&v22 + 1);
  }
  v21 = v19 + 3;
  if (v21 >= v13)
    goto LABEL_28;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10003518C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100004D20(&qword_100091918);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100035320(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100004D20(&qword_100090CE0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000355CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for AEAParticipant(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (id *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100004D20(qword_100090FB0);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_26:
    *v2 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = v8 + 56;
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & *(_QWORD *)(v8 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  result = swift_retain(v8);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_8;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v11 + 8 * v19);
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_24;
      v20 = *(_QWORD *)(v11 + 8 * v16);
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_24;
        v20 = *(_QWORD *)(v11 + 8 * v16);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_8:
    sub_100018848(*(_QWORD *)(v8 + 48) + *(_QWORD *)(v5 + 72) * v18, (uint64_t)v7);
    result = sub_100033F74(v7, v9);
  }
  v21 = v19 + 3;
  if (v21 >= v14)
  {
LABEL_24:
    result = swift_release_n(v8, 2);
    goto LABEL_26;
  }
  v20 = *(_QWORD *)(v11 + 8 * v21);
  if (v20)
  {
    v16 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v11 + 8 * v16);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000357B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100004D20(&qword_100091910);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100035A14(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  __int128 v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100004D20(&qword_100090FA8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v31 = v2;
  v32 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v33 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v33)
      goto LABEL_36;
    v18 = *(_QWORD *)(v32 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_36;
      v18 = *(_QWORD *)(v32 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v33)
          goto LABEL_36;
        v18 = *(_QWORD *)(v32 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v3 + 48) + 24 * v16;
    v21 = *(_QWORD *)v20;
    v34 = *(_OWORD *)(v20 + 8);
    Hasher.init(_seed:)(v35, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain_n(v34, 2);
    v22 = *((id *)&v34 + 1);
    String.hash(into:)(v35, v21, v34);
    swift_bridgeObjectRelease(v34);
    v23 = v22;
    NSObject.hash(into:)(v35);

    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v10 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 24 * v13;
    *(_QWORD *)v14 = v21;
    *(_OWORD *)(v14 + 8) = v34;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v33)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v32 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v33)
      goto LABEL_36;
    v18 = *(_QWORD *)(v32 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100035D24(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100004D20(&qword_100091918);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v16);
    result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v6 + 40), v20, 4);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

_QWORD *sub_100035F88(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v3 >> 1;
  v5 = __OFSUB__(v3 >> 1, v2);
  v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = (char *)result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7)
    return result;
  v8 = *v1;
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain(v8);
  result = (_QWORD *)swift_dynamicCastClass(v10, v9);
  if (!result)
  {
    swift_unknownObjectRelease(v8);
    result = &_swiftEmptyArrayStorage;
  }
  v11 = result[2];
  v5 = __OFADD__(v11, v7);
  v12 = &v7[v11];
  if (v5)
    goto LABEL_13;
  result[2] = v12;
  result = (_QWORD *)swift_release(result);
  v13 = &v7[v4];
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (((unint64_t)v13 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v1[3] = v3 & 1 | (2 * (_QWORD)v13);
  return result;
}

_QWORD *sub_10003603C(_QWORD *result, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;

  v4 = v2[2];
  v3 = v2[3];
  v5 = (_QWORD *)((v3 >> 1) - v4);
  if (__OFSUB__(v3 >> 1, v4))
    goto LABEL_51;
  v6 = result[2];
  if (v6 == a2)
  {
LABEL_42:
    swift_bridgeObjectRelease(result);
    return (_QWORD *)swift_errorRelease(0);
  }
  if (v6 <= a2)
    goto LABEL_52;
  v44 = a2 + 1;
  v37 = result + 4;
  v38 = result;
  v7 = result[a2 + 4];
  result = (_QWORD *)swift_errorRetain(v7);
  v36 = 1 - v6;
  v39 = v6;
  while (1)
  {
    v8 = (_QWORD *)((char *)v5 + 1);
    if (__OFADD__(v5, 1))
      break;
    v9 = (uint64_t)v5;
    v10 = sub_1000365F8(v5, (uint64_t)v5 + 1, *v2, v2[1], v4, v3);
    v45 = v10;
    v11 = sub_1000367F8();
    v13 = v12;
    v43 = v9;
    sub_100036808((uint64_t *)&v45, v9, 0, (void (*)(uint64_t, uint64_t))v11);
    swift_release(v13);
    result = (_QWORD *)swift_release(v10);
    v4 = v2[2];
    v3 = v2[3];
    v14 = (v3 >> 1) - v4;
    if (__OFSUB__(v3 >> 1, v4))
      goto LABEL_45;
    v15 = v7;
    v16 = *v2;
    v17 = v2[1];
    v41 = v3 >> 1;
    v42 = *v2;
    if ((v3 & 1) == 0)
      goto LABEL_14;
    v18 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v19 = swift_unknownObjectRetain(v16);
    v20 = (_QWORD *)swift_dynamicCastClass(v19, v18);
    if (!v20)
    {
      swift_unknownObjectRelease(v16);
      v20 = _swiftEmptyArrayStorage;
    }
    v21 = v20[2];
    if ((_QWORD *)(v17 + 8 * v4 + 8 * v14) != &v20[v21 + 4])
    {
      result = (_QWORD *)swift_release(v20);
LABEL_14:
      v22 = (v3 >> 1) - v4;
      goto LABEL_16;
    }
    v23 = v20[3];
    result = (_QWORD *)swift_release(v20);
    v24 = (v23 >> 1) - v21;
    v22 = v14 + v24;
    if (__OFADD__(v14, v24))
      goto LABEL_49;
LABEL_16:
    v5 = (_QWORD *)v43;
    if (v43 >= v22)
    {
      v7 = v15;
      v25 = __OFSUB__(v43, v14);
      v26 = (char *)(v43 - v14);
      if (v25)
        goto LABEL_46;
    }
    else
    {
      *(_QWORD *)(v17 + 8 * v4 + 8 * v43) = v15;
      if (v44 == v6)
      {
        v7 = 0;
        v5 = v8;
        v44 = v6;
        v25 = __OFSUB__(v8, v14);
        v26 = (char *)v8 - v14;
        if (v25)
          goto LABEL_46;
      }
      else
      {
        if ((v44 & 0x8000000000000000) != 0)
          goto LABEL_50;
        v40 = v4;
        if (v44 >= v38[2])
        {
LABEL_43:
          __break(1u);
          break;
        }
        v27 = 0;
        v29 = v17 + 8 * v43 + 8 * v4 + 8;
        while (1)
        {
          v28 = &v37[v44];
          v30 = v28[v27];
          if (!(v43 - v22 + 1 + v27))
          {
            v44 += v27 + 1;
            v7 = v28[v27];
            goto LABEL_33;
          }
          *(_QWORD *)(v29 + 8 * v27) = v30;
          if (!(v36 + v44 + v27))
            break;
          result = (_QWORD *)swift_errorRetain(v30);
          ++v27;
          if (v44 + v27 >= v38[2])
            goto LABEL_43;
        }
        v7 = 0;
        v22 = v43 + v27 + 2;
        v44 = v39;
LABEL_33:
        result = (_QWORD *)swift_errorRetain(v30);
        v5 = (_QWORD *)v22;
        v6 = v39;
        v4 = v40;
        v25 = __OFSUB__(v22, v14);
        v26 = (char *)(v22 - v14);
        if (v25)
          goto LABEL_46;
      }
    }
    if (v26)
    {
      v31 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v32 = swift_unknownObjectRetain(v42);
      result = (_QWORD *)swift_dynamicCastClass(v32, v31);
      if (!result)
      {
        swift_unknownObjectRelease(v42);
        result = _swiftEmptyArrayStorage;
      }
      v33 = result[2];
      v25 = __OFADD__(v33, v26);
      v34 = &v26[v33];
      if (v25)
        goto LABEL_47;
      result[2] = v34;
      result = (_QWORD *)swift_release(result);
      v35 = &v26[v41];
      if (__OFADD__(v41, v26))
        goto LABEL_48;
      if (((unint64_t)v35 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_41:
        result = v38;
        goto LABEL_42;
      }
      v3 = v3 & 1 | (2 * (_QWORD)v35);
      v2[3] = v3;
    }
    if (!v7)
      goto LABEL_41;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

int64_t sub_100036374(int64_t result)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;

  v2 = result;
  v3 = v1[3];
  v4 = (_QWORD *)*v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(*v1), *v1 = v4, (result & 1) == 0))
  {
    v11 = v4;
    goto LABEL_9;
  }
  v6 = v1[2];
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
    goto LABEL_39;
  v8 = v1[1];
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain(v4);
  result = swift_dynamicCastClass(v10, v9);
  if (!result)
  {
    swift_unknownObjectRelease(v4);
    result = (int64_t)_swiftEmptyArrayStorage;
  }
  v11 = *(_QWORD **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (_QWORD)v11 + 32)
    goto LABEL_31;
  result = swift_release(result);
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_28;
    v11 = (_QWORD *)*v1;
LABEL_9:
    v12 = v1[2];
    v7 = v5 - v12;
    if (__OFSUB__(v5, v12))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    v13 = v1[1];
    v14 = v7 <= v2 ? v2 : v5 - v12;
    if (v14)
      break;
    v4 = _swiftEmptyArrayStorage;
    if (v5 >= v12)
      goto LABEL_17;
LABEL_30:
    __break(1u);
LABEL_31:
    v22 = *(_QWORD *)(result + 24);
    result = swift_release(result);
    v23 = (v22 >> 1) - (_QWORD)v11;
    v24 = __OFADD__(v7, v23);
    v7 += v23;
    if (v24)
      goto LABEL_40;
  }
  v15 = sub_100004D20(&qword_100091908);
  v4 = (_QWORD *)swift_allocObject(v15, 8 * v14 + 32, 7);
  result = j__malloc_size(v4);
  v16 = result - 32;
  if (result < 32)
    v16 = result - 25;
  v4[2] = v7;
  v4[3] = 2 * (v16 >> 3);
  if (v5 < v12)
    goto LABEL_30;
LABEL_17:
  if (v7 < 0)
    goto LABEL_41;
  v17 = (unint64_t)(v4 + 4);
  v18 = v13 + 8 * v12;
  if (v18 < (unint64_t)&v4[v7 + 4] && v17 < v18 + 8 * v7)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
    goto LABEL_42;
  }
  sub_100004D20(&qword_100090790);
  swift_arrayInitWithCopy(v4 + 4);
  if (__OFSUB__(0, v12))
    goto LABEL_35;
  v20 = v4[2];
  v21 = v12 + v20;
  if (__OFADD__(v12, v20))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v21 < v12)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  result = swift_unknownObjectRelease(v11);
  if ((v21 & 0x8000000000000000) == 0)
  {
    v1[1] = v17 - 8 * v12;
    v1[2] = v12;
    v1[3] = (2 * v21) | 1;
LABEL_28:
    *v1 = v4;
    return result;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1000365F8(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  v12 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v13 = swift_unknownObjectRetain(a3);
  v14 = (_QWORD *)swift_dynamicCastClass(v13, v12);
  if (!v14)
  {
    swift_unknownObjectRelease(a3);
    v14 = _swiftEmptyArrayStorage;
  }
  v15 = v14[2];
  v16 = a4 + 8 * a5 + 8 * v8;
  if ((_QWORD *)v16 == &v14[v15 + 4])
  {
    v18 = v14[3];
    result = (_QWORD *)swift_release(v14);
    v19 = (v18 >> 1) - v15;
    v17 = v8 + v19;
    if (__OFADD__(v8, v19))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release(v14);
    v17 = v8;
  }
  v20 = swift_unknownObjectRetain(a3);
  v21 = (_QWORD *)swift_dynamicCastClass(v20, v12);
  if (v17 < v7)
  {
    if (!v21)
    {
      swift_unknownObjectRelease(a3);
      v21 = _swiftEmptyArrayStorage;
    }
    v22 = v21[2];
    if ((_QWORD *)v16 == &v21[v22 + 4])
    {
      v24 = v21[3];
      result = (_QWORD *)swift_release(v21);
      v25 = (v24 >> 1) - v22;
      v26 = __OFADD__(v8, v25);
      v8 += v25;
      if (v26)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = (_QWORD *)swift_release(v21);
    }
    goto LABEL_18;
  }
  if (!v21)
  {
    swift_unknownObjectRelease(a3);
    v21 = _swiftEmptyArrayStorage;
  }
  v23 = v21[2];
  if ((_QWORD *)v16 == &v21[v23 + 4])
  {
    v27 = v21[3];
    result = (_QWORD *)swift_release(v21);
    v28 = (v27 >> 1) - v23;
    v26 = __OFADD__(v8, v28);
    v8 += v28;
    if (!v26)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release(v21);
LABEL_21:
  if (v8 <= v7)
    v29 = v7;
  else
    v29 = v8;
  if (v29 <= (uint64_t)v6)
    v30 = (uint64_t)v6;
  else
    v30 = v29;
  if (!v30)
    return _swiftEmptyArrayStorage;
  v31 = sub_100004D20(&qword_100091908);
  v32 = (_QWORD *)swift_allocObject(v31, 8 * v30 + 32, 7);
  v33 = j__malloc_size(v32);
  v34 = v33 - 32;
  if (v33 < 32)
    v34 = v33 - 25;
  v32[2] = v6;
  v32[3] = 2 * (v34 >> 3);
  return v32;
}

uint64_t (*sub_1000367F8())()
{
  return Publishers.AEACombineLatestMany.init(_:);
}

uint64_t sub_100036808(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(uint64_t, uint64_t);
  char *v40;
  char *__dst;

  v5 = v4[2];
  v6 = (unint64_t)v4[3] >> 1;
  v7 = (_QWORD *)(v6 - v5);
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_29;
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v15 = (char *)v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v40 = &v15[-v14];
  if (__OFSUB__(v15, v14))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v16 = v4;
  __dst = (char *)(v9 + 32);
  v18 = v9 + 32 + 8 * a2;
  v38 = (char *)(v18 + 8 * a3);
  v19 = sub_100036B14(v7);
  v39 = a4;
  if (v19)
  {
    v20 = v19;
    v35 = v7;
    v36 = v9;
    v21 = v4[2];
    v22 = (char *)(v4[1] + 8 * v21);
    v23 = v19 + 32;
    v24 = (uint64_t)&v22[-v19 - 32] / 8;
    v34 = v19 + 32;
    v37 = sub_100004D20(&qword_100090790);
    swift_arrayDestroy(v23, v24, v37);
    if (a2 < 0)
      goto LABEL_43;
    v25 = &v22[8 * a2];
    if (__dst != v22 || __dst >= v25)
      memmove(__dst, v22, 8 * a2);
    swift_arrayDestroy(&v22[8 * a2], v40, v37);
    v39(v18, a3);
    if (v14 < 0)
      goto LABEL_43;
    v26 = &v25[8 * (_QWORD)v40];
    if (v38 != v26 || v38 >= &v26[8 * v14])
      memmove(v38, v26, 8 * v14);
    swift_arrayDestroy(&v22[8 * (_QWORD)v35], (v34 + 8 * *(_QWORD *)(v20 + 16) - (uint64_t)&v22[8 * (_QWORD)v35]) / 8, v37);
    *(_QWORD *)(v20 + 16) = 0;
    swift_release(v20);
    v9 = v36;
LABEL_23:
    v30 = *v16;
    swift_retain(v9);
    result = swift_unknownObjectRelease(v30);
    if (!__OFSUB__(0, v21))
    {
      v32 = *(_QWORD *)(v9 + 16);
      v11 = __OFADD__(v21, v32);
      v33 = v21 + v32;
      if (!v11)
      {
        if (v33 >= v21)
        {
          if ((v33 & 0x8000000000000000) == 0)
          {
            *v16 = v9;
            v16[1] = (uint64_t)&__dst[-8 * v21];
            v16[2] = v21;
            v16[3] = (2 * v33) | 1;
            return result;
          }
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v21 = v4[2];
  v11 = __OFADD__(v21, a2);
  v27 = v21 + a2;
  if (v11)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v27 < v21)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (__OFSUB__(v27, v21))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  sub_100004D20(&qword_100090790);
  swift_arrayInitWithCopy(__dst);
  a4((uint64_t)&__dst[8 * (v27 - v21)], a3);
  v28 = &v40[v27];
  if (__OFADD__(v27, v40))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v29 = (char *)((unint64_t)v4[3] >> 1);
  if ((uint64_t)v29 < (uint64_t)v28)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!__OFSUB__(v29, v28))
  {
    swift_arrayInitWithCopy(v38);
    goto LABEL_23;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100036B14(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  v9 = *v1;
  v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v11 = swift_unknownObjectRetain(v9);
  v12 = (_QWORD *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(v9);
    v12 = _swiftEmptyArrayStorage;
  }
  v13 = v12[2];
  if ((_QWORD *)(v8 + 8 * v6 + 8 * v7) != &v12[v13 + 4])
  {
    swift_release(v12);
LABEL_8:
    v14 = v7;
    goto LABEL_10;
  }
  v15 = v12[3];
  result = swift_release(v12);
  v17 = (v15 >> 1) - v13;
  v18 = __OFADD__(v7, v17);
  v14 = v7 + v17;
  if (!v18)
  {
LABEL_10:
    if (v14 < (uint64_t)a1)
      return 0;
    v19 = *v1;
    v20 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v21 = swift_unknownObjectRetain(v19);
    a1 = (_QWORD *)swift_dynamicCastClass(v21, v20);
    if (!a1)
    {
      swift_unknownObjectRelease(v19);
      a1 = _swiftEmptyArrayStorage;
    }
    v22 = v8 + 8 * v6 - (_QWORD)a1;
    v23 = v22 - 32;
    v24 = v22 - 25;
    if (v23 >= 0)
      v24 = v23;
    isUniquelyReferenced_nonNull = v7 + (v24 >> 3);
    if (!__OFADD__(v7, v24 >> 3))
    {
      v4 = a1[2];
      if (isUniquelyReferenced_nonNull >= v4)
        return (uint64_t)a1;
LABEL_21:
      sub_100036C80(isUniquelyReferenced_nonNull, v4, 0);
      return (uint64_t)a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

char *sub_100036C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v7 = *v3;
  v8 = v7 + 32 + 8 * a1;
  v9 = sub_100004D20(&qword_100090790);
  result = (char *)swift_arrayDestroy(v8, v4, v9);
  v11 = __OFSUB__(a3, v4);
  v12 = a3 - v4;
  if (v11)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v12)
    goto LABEL_14;
  v13 = *(_QWORD *)(v7 + 16);
  v11 = __OFSUB__(v13, a2);
  v14 = v13 - a2;
  if (v11)
    goto LABEL_18;
  if (v14 < 0)
  {
LABEL_21:
    v19 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
    __break(1u);
    return result;
  }
  result = (char *)(v8 + 8 * a3);
  v15 = (char *)(v7 + 32 + 8 * a2);
  if (result != v15 || result >= &v15[8 * v14])
    result = (char *)memmove(result, v15, 8 * v14);
  v17 = *(_QWORD *)(v7 + 16);
  v11 = __OFADD__(v17, v12);
  v18 = v17 + v12;
  if (v11)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v18;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_100036D9C(uint64_t a1, uint64_t a2)
{
  return sub_100036DB0(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for AEAPolicyActivationRunner, (void (*)(_QWORD *, uint64_t))sub_1000084DC);
}

uint64_t sub_100036DB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD *, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v12(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a1);
  return sub_100037F74((uint64_t)v11, v13, a1, a2, a3, a4);
}

uint64_t sub_100036E64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = v1[5];
  v4 = v1[6];
  sub_1000060F4(v1 + 2, v3);
  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6 = swift_unknownObjectRetain(a1);
  v5(v10, v6, v3, v4);
  v7 = v11;
  if (v11)
  {
    v8 = v12;
    sub_1000060F4(v10, v11);
    v7 = sub_100036DB0(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for AEAPolicyDeactivationRunner, (void (*)(_QWORD *, uint64_t))sub_1000084DC);
    swift_unknownObjectRelease(a1);
    sub_100004D60(v10);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    sub_1000187D0((uint64_t)v10, &qword_100091B60);
  }
  return v7;
}

uint64_t sub_100036F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v20[2];
  uint64_t v21;
  _BYTE v22[40];

  v11 = sub_100004D20(&qword_100091B00);
  __chkstk_darwin(v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008380(v5 + 16, (uint64_t)v22);
  v14 = swift_allocObject(&unk_100085130, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  sub_100037E68((uint64_t)v22, (uint64_t)v20);
  v16 = swift_allocObject(&unk_100085158, 112, 7);
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  v17 = v20[1];
  *(_OWORD *)(v16 + 32) = v20[0];
  *(_OWORD *)(v16 + 48) = v17;
  *(_QWORD *)(v16 + 64) = v21;
  *(_QWORD *)(v16 + 72) = a1;
  *(_QWORD *)(v16 + 80) = a2;
  *(_QWORD *)(v16 + 88) = a3;
  *(_QWORD *)(v16 + 96) = sub_100037E40;
  *(_QWORD *)(v16 + 104) = v14;
  swift_unknownObjectRetain_n(a1, 3);
  swift_retain_n(a3, 3);
  swift_retain(a5);
  swift_retain(v14);
  v18 = sub_100052094((uint64_t)v13, (uint64_t)&unk_100091B58, v16);
  swift_release_n(a3, 2);
  swift_unknownObjectRelease_n(a1, 2);
  swift_release(v14);
  swift_release(v18);
  return sub_1000187D0((uint64_t)v22, &qword_100091B50);
}

uint64_t sub_100037120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[16] = a8;
  v8[17] = v10;
  v8[14] = a6;
  v8[15] = a7;
  v8[12] = a4;
  v8[13] = a5;
  return swift_task_switch(sub_100037148, 0, 0);
}

uint64_t sub_100037148()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  int *v9;

  v1 = v0[15];
  v2 = v0[13];
  sub_100008380(v0[12], (uint64_t)(v0 + 2));
  v3 = v0[5];
  v4 = v0[6];
  sub_1000060F4(v0 + 2, v3);
  v5 = *(int **)(v4 + 24);
  v6 = v5[1];
  v9 = (int *)((char *)v5 + *v5);
  swift_unknownObjectRetain(v2);
  swift_retain(v1);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[18] = v7;
  *v7 = v0;
  v7[1] = sub_10003720C;
  return ((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v9)(v0 + 7, v0[13], v0[14], v0[15], v3, v4);
}

uint64_t sub_10003720C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10003734C;
  else
    v3 = sub_100037270;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100037270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 88);
    sub_1000060F4((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v3 = sub_100036DB0(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for AEAPolicyDeactivationRunner, (void (*)(_QWORD *, uint64_t))sub_1000084DC);
    sub_100004D60((_QWORD *)(v0 + 56));
  }
  else
  {
    sub_1000187D0(v0 + 56, &qword_100091B60);
    v3 = 0;
  }
  v4 = *(void (**)(uint64_t *, uint64_t *))(v0 + 128);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = v3;
  v9 = 0;
  v4(&v8, &v9);
  swift_unknownObjectRelease(v6);
  swift_release(v5);
  swift_unknownObjectRelease(v3);
  sub_100004D60((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003734C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *, uint64_t *);
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(void (**)(uint64_t *, uint64_t *))(v0 + 128);
  v3 = *(_QWORD *)(v0 + 120);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 104));
  swift_release(v3);
  sub_100004D60((_QWORD *)(v0 + 16));
  v5 = 0;
  v6 = v1;
  swift_errorRetain(v1);
  v2(&v5, &v6);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for AEAPolicyActivationRunner()
{
  return objc_opt_self(_TtC15assessmentagentP33_50FAD1B370C7E2B8F911A0A6002AA64D25AEAPolicyActivationRunner);
}

uint64_t sub_100037748(const void *a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  swift_retain(a2);
  return swift_task_switch(sub_100037794, 0, 0);
}

uint64_t sub_100037794()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[5];
  v3 = v1[6];
  sub_1000060F4(v1 + 2, v2);
  v4 = *(int **)(v3 + 24);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 32) = v5;
  *v5 = v0;
  v5[1] = sub_100037810;
  return v7(v2, v3);
}

uint64_t sub_100037810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000378BC;
  else
    v3 = sub_100037874;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100037874()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, _QWORD))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000378BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 16));
  v3 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  _Block_release(*(const void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for AEAPolicyDeactivationRunner()
{
  return objc_opt_self(_TtC15assessmentagentP33_50FAD1B370C7E2B8F911A0A6002AA64D27AEAPolicyDeactivationRunner);
}

uint64_t sub_100037948()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100037974()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100091B0C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100014AC4;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_100091B08 + dword_100091B08))(v2, v3);
}

uint64_t sub_1000379D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100014AC4;
  return v6();
}

uint64_t sub_100037A30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100091B1C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100014AC4;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100091B18 + dword_100091B18))(v2, v3, v4);
}

uint64_t sub_100037AA8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100014AC4;
  return v7();
}

uint64_t sub_100037B00()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100037B2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100091B2C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100014AC4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100091B28 + dword_100091B28))(a1, v4, v5, v6);
}

uint64_t sub_100037BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000187D0(a1, &qword_100091B00);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100085108, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100091B40, v16);
}

uint64_t sub_100037CFC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100037D60;
  return v6(a1);
}

uint64_t sub_100037D60()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100037DAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100037DD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100091B3C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000CB20;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100091B38 + dword_100091B38))(a1, v4);
}

uint64_t sub_100037E40(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_100037E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100091B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037EB0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_100004D60(v0 + 4);
  swift_unknownObjectRelease(v0[9]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100037EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 104);
  v3 = swift_task_alloc(dword_100091B4C);
  v4 = *(_OWORD *)(v0 + 72);
  v5 = *(_OWORD *)(v0 + 88);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_10000CB20;
  *(_QWORD *)(v3 + 136) = v2;
  *(_OWORD *)(v3 + 120) = v5;
  *(_OWORD *)(v3 + 104) = v4;
  *(_QWORD *)(v3 + 96) = v0 + 32;
  return swift_task_switch(sub_100037148, 0, 0);
}

uint64_t sub_100037F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(_QWORD *, uint64_t))
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  v14[3] = a3;
  v14[4] = a4;
  v10 = sub_10002B8E4(v14);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v10, a1, a3);
  v11 = a5(0);
  v12 = swift_allocObject(v11, 56, 7);
  a6(v14, v12 + 16);
  return v12;
}

uint64_t sub_100037FF4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100038018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = (id)_convertErrorToNSError(_:)(a1);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

uint64_t sub_100038064()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100067DF8);
  v2 = swift_getKeyPath(&unk_100067E20);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000380D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];

  v1 = v0;
  v51 = sub_100004D20(&qword_10008F2F0);
  v49 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v48 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004D20(&qword_100091CB0);
  v42 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004D20(&qword_100091CB8);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004D20(&qword_100091CC0);
  v44 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100004D20(&qword_100091CC8);
  __chkstk_darwin(v45);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100004D20(&qword_100091CD0);
  v52 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100004D20(&qword_100091CD8);
  v55 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v46 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100004D20(&qword_100091CE0);
  v56 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v47 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v0 + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource__configurationsByApplicationDescriptor, v57, 33, 0);
  v18 = sub_100004D20(&qword_100091CE8);
  Published.projectedValue.getter(v18);
  swift_endAccess(v57);
  v19 = sub_1000057A4(&qword_100091CF0, &qword_100091CB0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v20 = sub_10003B68C();
  Publisher<>.removeDuplicates()(v3, v19, v20);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v5, v3);
  v21 = sub_100004D20(&qword_100090B40);
  v22 = sub_1000057A4(&qword_100091D00, &qword_100091CB8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  Publisher.map<A>(_:)(sub_10003B524, 0, v6, v21, v22);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v6);
  v23 = sub_100004D20(&qword_100091D08);
  Publishers.Map.map<A>(_:)(sub_100038700, 0, v9, v23);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v9);
  v24 = v48;
  v25 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v1 + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource_candidateProcesses, v51);
  v26 = sub_1000057A4(&qword_100091D10, &qword_100091CC8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v27 = sub_1000057A4(&qword_100091D18, &qword_10008F2F0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publishers.CombineLatest.init(_:_:)(v13, v24, v45, v25, v26, v27);
  v28 = swift_allocObject(&unk_1000851E8, 24, 7);
  swift_weakInit(v28 + 16, v1);
  v29 = swift_allocObject(&unk_100085210, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_10003B714;
  *(_QWORD *)(v29 + 24) = v28;
  v30 = sub_100004D20(&qword_10008F308);
  v31 = sub_1000057A4(&qword_100091D20, &qword_100091CD0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v32 = v46;
  v33 = v50;
  Publisher.map<A>(_:)(sub_10003B740, v29, v50, v30, v31);
  swift_release(v29);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v33);
  v34 = sub_1000057A4(&qword_100091D28, &qword_100091CD8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v35 = sub_1000057A4(&qword_10008F300, &qword_10008F308, (uint64_t)&protocol conformance descriptor for Set<A>);
  v36 = v47;
  v37 = v53;
  Publisher<>.removeDuplicates()(v53, v34, v35);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v37);
  v38 = sub_1000057A4(&qword_100091D30, &qword_100091CE0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v39 = v54;
  v40 = Publisher.eraseToAnyPublisher()(v54, v38);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v39);
  return v40;
}

void *sub_100038648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v12, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (!Strong)
    return &_swiftEmptySetSingleton;
  v7 = Strong;
  swift_retain(Strong);
  swift_bridgeObjectRetain(a1);
  sub_10003B770(a2, v7, a1);
  v9 = v8;
  swift_release(v7);
  swift_bridgeObjectRelease(a1);
  v10 = sub_1000415C4(v9);
  swift_release(v7);
  swift_bridgeObjectRelease(v9);
  return (void *)v10;
}

uint64_t sub_100038700@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  _QWORD v66[4];
  _QWORD *v67;
  __int128 v68;
  __int128 v69;
  char v70;
  _BYTE v71[24];

  v2 = *a1;
  v67 = _swiftEmptyDictionarySingleton;
  v61 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v62 = (unint64_t)(v3 + 63) >> 6;
  v63 = v2;
  swift_bridgeObjectRetain(v2);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v8 = v7 | (v6 << 6);
      goto LABEL_22;
    }
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_54;
    if (v9 >= v62)
    {
LABEL_51:
      result = swift_release(v63);
      *a2 = v67;
      return result;
    }
    v10 = *(_QWORD *)(v61 + 8 * v9);
    ++v6;
    if (!v10)
    {
      v6 = v9 + 1;
      if (v9 + 1 >= v62)
        goto LABEL_51;
      v10 = *(_QWORD *)(v61 + 8 * v6);
      if (!v10)
      {
        v6 = v9 + 2;
        if (v9 + 2 >= v62)
          goto LABEL_51;
        v10 = *(_QWORD *)(v61 + 8 * v6);
        if (!v10)
          break;
      }
    }
LABEL_21:
    v5 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_22:
    v12 = *(_QWORD *)(v63 + 48) + 40 * v8;
    v13 = *(_BYTE *)(v12 + 32);
    v14 = *(_OWORD *)(v12 + 16);
    v68 = *(_OWORD *)v12;
    v69 = v14;
    v70 = v13;
    v15 = v68;
    sub_10003B61C((uint64_t)&v69, (uint64_t)v71);
    v16 = *(_QWORD *)(v63 + 56) + 16 * v8;
    v17 = *(_BYTE *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = v67;
    v20 = v67[2];
    swift_bridgeObjectRetain(*((_QWORD *)&v15 + 1));
    v64 = v17;
    if (!v20)
    {
      sub_10003B664((uint64_t)v71);
      swift_bridgeObjectRetain(v18);
LABEL_26:
      swift_bridgeObjectRetain(*((_QWORD *)&v15 + 1));
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      v66[0] = v19;
      v25 = sub_10005A2B4(v15, *((uint64_t *)&v15 + 1));
      v26 = v19[2];
      v27 = (v24 & 1) == 0;
      v28 = v26 + v27;
      if (__OFADD__(v26, v27))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      v29 = v24;
      if (v19[3] < v28)
      {
        sub_100055C24(v28, isUniquelyReferenced_nonNull_native);
        v30 = sub_10005A2B4(v15, *((uint64_t *)&v15 + 1));
        if ((v29 & 1) != (v31 & 1))
          goto LABEL_58;
        v25 = v30;
        v32 = (_QWORD *)v66[0];
        if ((v29 & 1) == 0)
          goto LABEL_35;
LABEL_33:
        v33 = v32[7];
        v34 = 8 * v25;
        swift_bridgeObjectRelease(*(_QWORD *)(v33 + v34));
        *(_QWORD *)(v33 + v34) = _swiftEmptyDictionarySingleton;
LABEL_37:
        v67 = v32;
        swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
        goto LABEL_38;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v32 = (_QWORD *)v66[0];
        if ((v24 & 1) != 0)
          goto LABEL_33;
      }
      else
      {
        sub_1000573A0();
        v32 = (_QWORD *)v66[0];
        if ((v29 & 1) != 0)
          goto LABEL_33;
      }
LABEL_35:
      v32[(v25 >> 6) + 8] |= 1 << v25;
      *(_OWORD *)(v32[6] + 16 * v25) = v15;
      *(_QWORD *)(v32[7] + 8 * v25) = _swiftEmptyDictionarySingleton;
      v35 = v32[2];
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
        goto LABEL_55;
      v32[2] = v37;
      swift_bridgeObjectRetain(*((_QWORD *)&v15 + 1));
      goto LABEL_37;
    }
    swift_bridgeObjectRetain(*((_QWORD *)&v15 + 1));
    sub_10003B664((uint64_t)v71);
    swift_bridgeObjectRetain(v18);
    sub_10005A2B4(v15, *((uint64_t *)&v15 + 1));
    v22 = v21;
    swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
    if ((v22 & 1) == 0)
      goto LABEL_26;
LABEL_38:
    swift_bridgeObjectRetain(*((_QWORD *)&v15 + 1));
    sub_100038CB4(v66, v15, *((uint64_t *)&v15 + 1));
    if (!*v38)
    {
      swift_bridgeObjectRelease(v18);
      goto LABEL_5;
    }
    v39 = v38;
    swift_bridgeObjectRetain(*((_QWORD *)&v15 + 1));
    sub_10003B664((uint64_t)v71);
    v40 = swift_isUniquelyReferenced_nonNull_native(*v39);
    v41 = *v39;
    v65 = (_QWORD *)*v39;
    *v39 = 0x8000000000000000;
    v43 = sub_10005A32C((uint64_t)&v68);
    v44 = *(_QWORD *)(v41 + 16);
    v45 = (v42 & 1) == 0;
    v46 = v44 + v45;
    if (__OFADD__(v44, v45))
      goto LABEL_53;
    v47 = v42;
    if (*(_QWORD *)(v41 + 24) >= v46)
    {
      if ((v40 & 1) != 0)
      {
        v50 = v65;
        if ((v42 & 1) == 0)
          goto LABEL_48;
      }
      else
      {
        sub_1000571B8();
        v50 = v65;
        if ((v47 & 1) == 0)
          goto LABEL_48;
      }
    }
    else
    {
      sub_1000559E4(v46, v40);
      v48 = sub_10005A32C((uint64_t)&v68);
      if ((v47 & 1) != (v49 & 1))
        goto LABEL_59;
      v43 = v48;
      v50 = v65;
      if ((v47 & 1) == 0)
      {
LABEL_48:
        v50[(v43 >> 6) + 8] |= 1 << v43;
        v52 = v50[6] + 40 * v43;
        v53 = v68;
        v54 = v69;
        *(_BYTE *)(v52 + 32) = v70;
        *(_OWORD *)v52 = v53;
        *(_OWORD *)(v52 + 16) = v54;
        v55 = v50[7] + 16 * v43;
        *(_BYTE *)v55 = v64;
        *(_QWORD *)(v55 + 8) = v18;
        v56 = v50[2];
        v36 = __OFADD__(v56, 1);
        v57 = v56 + 1;
        if (v36)
          goto LABEL_56;
        v50[2] = v57;
        swift_bridgeObjectRetain(*((_QWORD *)&v15 + 1));
        sub_10003B664((uint64_t)v71);
        goto LABEL_50;
      }
    }
    v51 = v50[7] + 16 * v43;
    swift_bridgeObjectRelease(*(_QWORD *)(v51 + 8));
    *(_BYTE *)v51 = v64;
    *(_QWORD *)(v51 + 8) = v18;
LABEL_50:
    v58 = *v39;
    *v39 = v50;
    swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
    swift_bridgeObjectRelease(v58);
    sub_10003BB70((uint64_t)v71);
LABEL_5:
    ((void (*)(_QWORD *, _QWORD))v15)(v66, 0);
    swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
    sub_10003BB70((uint64_t)v71);
    swift_bridgeObjectRelease(*((_QWORD *)&v15 + 1));
  }
  v11 = v9 + 3;
  if (v11 >= v62)
    goto LABEL_51;
  v10 = *(_QWORD *)(v61 + 8 * v11);
  if (v10)
  {
    v6 = v11;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v6 >= v62)
      goto LABEL_51;
    v10 = *(_QWORD *)(v61 + 8 * v6);
    ++v11;
    if (v10)
      goto LABEL_21;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_59:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AEAParticipant.ApplicationDescriptor);
  __break(1u);
  return result;
}

void (*sub_100038C44(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_100039E20(v6, a2, a3);
  return sub_100038CB0;
}

void (*sub_100038CB4(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_100039EB4(v6, a2, a3);
  return sub_100038CB0;
}

void sub_100038D20(_QWORD *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

uint64_t sub_100038D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v53 = type metadata accessor for AEAParticipant(0);
  v6 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v54 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a2 + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, 1, 1, v53);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(v8);
  v10 = sub_10005A2B4(v9, v8);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease(v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, 1, 1, v53);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v8);
  v13 = 0;
  v14 = v12 + 64;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v12 + 64);
  v18 = (unint64_t)(v15 + 63) >> 6;
  do
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v13 << 6);
    }
    else
    {
      v21 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        goto LABEL_59;
      }
      if (v21 >= v18)
        goto LABEL_32;
      v22 = *(_QWORD *)(v14 + 8 * v21);
      ++v13;
      if (!v22)
      {
        v13 = v21 + 1;
        if (v21 + 1 >= v18)
          goto LABEL_32;
        v22 = *(_QWORD *)(v14 + 8 * v13);
        if (!v22)
        {
          v13 = v21 + 2;
          if (v21 + 2 >= v18)
            goto LABEL_32;
          v22 = *(_QWORD *)(v14 + 8 * v13);
          if (!v22)
          {
            v13 = v21 + 3;
            if (v21 + 3 >= v18)
              goto LABEL_32;
            v22 = *(_QWORD *)(v14 + 8 * v13);
            if (!v22)
            {
              v13 = v21 + 4;
              if (v21 + 4 >= v18)
                goto LABEL_32;
              v22 = *(_QWORD *)(v14 + 8 * v13);
              if (!v22)
              {
                v23 = v21 + 5;
                if (v23 >= v18)
                  goto LABEL_32;
                v22 = *(_QWORD *)(v14 + 8 * v23);
                if (!v22)
                {
                  while (1)
                  {
                    v13 = v23 + 1;
                    if (__OFADD__(v23, 1))
                      break;
                    if (v13 >= v18)
                      goto LABEL_32;
                    v22 = *(_QWORD *)(v14 + 8 * v13);
                    ++v23;
                    if (v22)
                      goto LABEL_26;
                  }
LABEL_59:
                  __break(1u);
                  result = swift_release(v55);
                  __break(1u);
                  return result;
                }
                v13 = v23;
              }
            }
          }
        }
      }
LABEL_26:
      v17 = (v22 - 1) & v22;
      v20 = __clz(__rbit64(v22)) + (v13 << 6);
    }
  }
  while (*(_BYTE *)(*(_QWORD *)(v12 + 48) + 40 * v20 + 32) != 1);
  if ((*(_BYTE *)(a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24)) & 1) == 0)
  {
    v25 = sub_10003A320(v12);
    swift_bridgeObjectRelease(v12);
    v12 = v25;
  }
LABEL_32:
  swift_bridgeObjectRetain(v12);
  v27 = sub_100039D28(v26);
  swift_bridgeObjectRelease(v12);
  v55 = v27;
  sub_10003A470(&v55);
  swift_bridgeObjectRelease(v12);
  v28 = v55;
  v29 = v55[2];
  if (!v29)
  {
    swift_release(v55);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, 1, 1, v53);
  }
  v49 = v6;
  v50 = a3;
  v30 = 0;
  v51 = v55;
  v31 = v54;
  while (1)
  {
    v52 = v29;
    v32 = v28[v30 + 4];
    v33 = v28[v30 + 5];
    v35 = v28[v30 + 6];
    v34 = v28[v30 + 7];
    v36 = v28[v30 + 10];
    v37 = v28[v30 + 9];
    v38 = v28[v30 + 8];
    sub_1000057E4(a1, v31);
    v39 = v31 + *(int *)(v53 + 20);
    *(_BYTE *)v39 = v37;
    *(_QWORD *)(v39 + 8) = v36;
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v34);
      goto LABEL_57;
    }
    v40 = *(_QWORD *)(a1 + 8);
    v41 = *(_QWORD *)(a1 + 16);
    v42 = v32 == v40 && v33 == v41;
    if (!v42 && (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v40, v41, 0) & 1) == 0)
    {
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v33);
      sub_10002F554(v54, type metadata accessor for AEAParticipant);
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v33);
      goto LABEL_36;
    }
    if (!v34)
    {
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v33);
      goto LABEL_57;
    }
    v43 = a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v44 = *(_QWORD *)(v43 + 16);
    if (v44)
      break;
    swift_bridgeObjectRetain(v36);
LABEL_35:
    sub_10002F554(v54, type metadata accessor for AEAParticipant);
LABEL_36:
    v30 += 7;
    v28 = v51;
    v29 = v52 - 1;
    if (v52 == 1)
    {
      swift_release(v51);
      v6 = v49;
      a3 = v50;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, 1, 1, v53);
    }
  }
  v45 = *(_QWORD *)(v43 + 8);
  if (v35 != v45 || v34 != v44)
  {
    v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v34, v45, v44, 0);
    swift_bridgeObjectRetain(v36);
    if ((v47 & 1) != 0)
      goto LABEL_57;
    goto LABEL_35;
  }
  swift_bridgeObjectRetain(v36);
LABEL_57:
  swift_release(v51);
  v48 = v50;
  sub_10003BB2C(v54, v50, type metadata accessor for AEAParticipant);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v48, 0, 1, v53);
}

uint64_t sub_1000391CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource_candidateProcesses;
  v2 = sub_100004D20(&qword_10008F2F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource__configurationsByApplicationDescriptor;
  v4 = sub_100004D20(&qword_100091CE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10003924C()
{
  return type metadata accessor for AEAConfigurationParticipantSource(0);
}

uint64_t type metadata accessor for AEAConfigurationParticipantSource(uint64_t a1)
{
  uint64_t result;

  result = qword_100091BA0;
  if (!qword_100091BA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAConfigurationParticipantSource);
  return result;
}

void sub_100039290(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_100039348(319, (unint64_t *)&qword_10008F248, (uint64_t *)&unk_10008F250, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published.Publisher);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100039348(319, (unint64_t *)&unk_100091BB0, &qword_100090B40, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

void sub_100039348(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = sub_100005520(a3);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1000393A0()
{
  return sub_1000380D4();
}

unint64_t sub_1000393C0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100039594(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v35 = a2 + 64;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v8);
    v11 = v35;
    if ((*(_QWORD *)(v35 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (result + 1) & v10;
      v13 = *(_QWORD *)(v34 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      do
      {
        v14 = v13 * v9;
        v33(v7, *(_QWORD *)(a2 + 48) + v13 * v9, v4);
        v15 = *(_QWORD *)(a2 + 40);
        v16 = sub_10000D004();
        v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v4, v16);
        result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v7, v4);
        v18 = v17 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v18 >= v12 && a1 >= (uint64_t)v18)
          {
LABEL_17:
            v21 = *(_QWORD *)(a2 + 48);
            result = v21 + v13 * a1;
            v22 = v21 + v14;
            if (v13 * a1 < v14 || result >= v22 + v13)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v22, 1, v4);
            }
            else if (v13 * a1 != v14)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v9);
            v11 = v35;
            if (a1 != v9 || (a1 = v9, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v12 || a1 >= (uint64_t)v18)
        {
          goto LABEL_17;
        }
        v11 = v35;
LABEL_5:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v11 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v26 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000397F8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD v31[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v31, *(_QWORD *)(a2 + 40));
        sub_1000218D8(v10, v11);
        Data.hash(into:)(v31, v10, v11);
        v12 = Hasher._finalize()();
        result = sub_100006118(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_OWORD *)(v14 + 16 * v3);
        v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = type metadata accessor for AEAParticipant(0);
        v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72);
        v20 = v19 * v3;
        result = v17 + v19 * v3;
        v21 = v19 * v6;
        v22 = v17 + v19 * v6;
        v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v22, 1, v18);
        }
        else
        {
          v3 = v6;
          if (v20 == v21)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100039A04(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

__n128 sub_100039BD8(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  __n128 result;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[9];

  Hasher.init(_seed:)(v18, *(_QWORD *)(a4 + 40));
  v8 = *a1;
  v9 = a1[1];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(v18, v8, v9);
  swift_bridgeObjectRelease(v9);
  v10 = a1[3];
  if (v10)
  {
    v11 = a1[2];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(v18, v11, v10);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(a1[4] & 1);
  v12 = Hasher._finalize()();
  v13 = _HashTable.nextHole(atOrAfter:)(v12 & ~(-1 << *(_BYTE *)(a4 + 32)), a4 + 64, ~(-1 << *(_BYTE *)(a4 + 32)));
  *(_QWORD *)(a4 + 64 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  v14 = *(_QWORD *)(a4 + 48) + 40 * v13;
  result = *(__n128 *)a1;
  v16 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v14 = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 16) = v16;
  *(_BYTE *)(v14 + 32) = *((_BYTE *)a1 + 32);
  v17 = *(_QWORD *)(a4 + 56) + 16 * v13;
  *(_BYTE *)v17 = a2 & 1;
  *(_QWORD *)(v17 + 8) = a3;
  ++*(_QWORD *)(a4 + 16);
  return result;
}

_QWORD *sub_100039D28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100004D20(&qword_100091C88);
  v4 = (_QWORD *)swift_allocObject(v3, 56 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 56);
  v6 = sub_1000409D4(&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_100013A7C(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

void (*sub_100039E20(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_10003A238(v7);
  v7[10] = sub_100039F94(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100039EB0;
}

void (*sub_100039EB4(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_10003A258(v7);
  v7[10] = sub_10003A0CC(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100039EB0;
}

void sub_100039F44(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_100039F94(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*result)(uint64_t **, uint64_t);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_10005A2B4(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_10003A0C0;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_100056B5C();
      goto LABEL_7;
    }
    sub_100054F94(v16, a4 & 1);
    v20 = sub_10005A2B4(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10003A0C0(uint64_t **a1, uint64_t a2)
{
  sub_10003A1F8(a1, a2, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100056650);
}

void (*sub_10003A0CC(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*result)(uint64_t **, uint64_t);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_10005A2B4(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_10003A0C0;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1000573A0();
      goto LABEL_7;
    }
    sub_100055C24(v16, a4 & 1);
    v20 = sub_10005A2B4(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10003A1F8(uint64_t **a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v3;

  v3 = *a1;
  sub_10003A284(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2], a3);
  swift_bridgeObjectRelease(*v3);
  free(v3);
}

uint64_t (*sub_10003A238(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_10003BBA0;
}

uint64_t (*sub_10003A258(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_10003A278;
}

uint64_t sub_10003A278(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_10003A284(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v9;
    }
    else
    {
      a7(a4, a5, a6, v9, *a3);
      swift_bridgeObjectRetain(a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for String);
    sub_100039A04(a4, *a3);
  }
  return swift_bridgeObjectRetain(v9);
}

uint64_t sub_10003A320(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_10003B1E8((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    sub_10003B1E8((unint64_t *)v9, v6, v2);
    v2 = v10;
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

_OWORD *sub_10003A470(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_10003B608(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_10003A4D8(v5);
  *a1 = v2;
  return result;
}

_OWORD *sub_10003A4D8(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  _OWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  int v16;
  uint64_t v17;
  Swift::Int v18;
  _BOOL4 v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  Swift::Int v38;
  uint64_t v39;
  int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  __int128 v117;
  __int128 v118;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  _QWORD *v129;
  _OWORD *v130;
  Swift::Int v131;
  uint64_t v132;
  char *__dst;
  uint64_t v134;

  v3 = a1[1];
  result = (_OWORD *)_minimumMergeRunLength(_:)(v3);
  if ((uint64_t)result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v104 = *a1;
      v105 = *a1 + 104;
      v106 = -1;
      v107 = 1;
      while (1)
      {
        v108 = *(unsigned __int8 *)(v104 + 56 * v107 + 32);
        v109 = v106;
        v110 = v105;
        do
        {
          if (((v108 ^ 1 | *(unsigned __int8 *)(v110 - 72)) & 1) != 0
            && (!*(_QWORD *)(v110 - 24) || *(_QWORD *)(v110 - 80) != 0))
          {
            break;
          }
          if (!v104)
            goto LABEL_170;
          v112 = v110 - 48;
          result = (_OWORD *)(v110 - 104);
          v113 = *(_QWORD *)(v110 - 56);
          *(_QWORD *)(v110 - 56) = *(_QWORD *)v110;
          v110 -= 56;
          v115 = *(_QWORD *)(v110 + 8);
          v114 = *(_QWORD *)(v110 + 16);
          v116 = *(_BYTE *)(v110 + 48);
          v117 = *(_OWORD *)(v110 + 24);
          v118 = result[1];
          *(_OWORD *)v112 = *result;
          *(_OWORD *)(v112 + 16) = v118;
          *(_OWORD *)(v112 + 32) = result[2];
          *(_QWORD *)(v112 + 48) = v113;
          *(_QWORD *)(v110 - 48) = v115;
          *(_QWORD *)(v110 - 40) = v114;
          *(_OWORD *)(v110 - 32) = v117;
          *(_BYTE *)(v110 - 16) = v108;
          *(_BYTE *)(v110 - 8) = v116;
        }
        while (!__CFADD__(v109++, 1));
        ++v107;
        v105 += 56;
        --v106;
        if (v107 == v3)
          return result;
      }
    }
    goto LABEL_168;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_177:
    result = (_OWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v130 = result;
  v134 = v1;
  v127 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_134:
      v103 = v12;
      v129 = v9;
      if (v13 < 2)
        goto LABEL_119;
      v120 = *v127;
      while (1)
      {
        v121 = v13 - 2;
        if (v13 < 2)
          goto LABEL_163;
        if (!v120)
          goto LABEL_176;
        v102 = v103;
        v122 = *(_QWORD *)&v103[16 * v121 + 32];
        v123 = *(_QWORD *)&v103[16 * v13 + 24];
        sub_10003AD14((char *)(v120 + 56 * v122), (char *)(v120 + 56 * *(_QWORD *)&v103[16 * v13 + 16]), v120 + 56 * v123, __dst);
        if (v134)
          goto LABEL_118;
        if (v123 < v122)
          goto LABEL_164;
        if ((swift_isUniquelyReferenced_nonNull_native(v102) & 1) == 0)
          v102 = sub_10003B1D4((uint64_t)v102);
        if (v121 >= *((_QWORD *)v102 + 2))
          goto LABEL_165;
        v124 = &v102[16 * v121 + 32];
        *(_QWORD *)v124 = v122;
        *((_QWORD *)v124 + 1) = v123;
        v125 = *((_QWORD *)v102 + 2);
        if (v13 > v125)
          goto LABEL_166;
        memmove(&v102[16 * v13 + 16], &v102[16 * v13 + 32], 16 * (v125 - v13));
        v103 = v102;
        *((_QWORD *)v102 + 2) = v125 - 1;
        v13 = v125 - 1;
        if (v125 <= 2)
          goto LABEL_119;
      }
    }
    v129 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_100004D20(&qword_100091C90);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(v8 + 16) = v6;
    v129 = (_QWORD *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v128 = *a1 + 32;
  v126 = *a1 + 48;
  v12 = (char *)_swiftEmptyArrayStorage;
  v131 = v3;
  v132 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 >= v3)
      goto LABEL_49;
    v15 = v11 + 56 * v10;
    v16 = *(unsigned __int8 *)(v15 + 32);
    v17 = v11 + 56 * v14;
    if (v16 != 1 || (*(_BYTE *)(v17 + 32) & 1) != 0)
    {
      if (*(_QWORD *)(v15 + 24))
      {
        v19 = *(_QWORD *)(v17 + 24) == 0;
        v18 = v14 + 2;
        if (v14 + 2 >= v3)
          goto LABEL_40;
      }
      else
      {
        v18 = v14 + 2;
        if (v14 + 2 >= v3)
          goto LABEL_48;
        v19 = 0;
      }
    }
    else
    {
      v18 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_42;
      v19 = 1;
    }
    v20 = v3 <= v18 + 1 ? v18 + 1 : v3;
    v21 = (_BYTE *)(v128 + 56 * v18);
    do
    {
      v22 = v16;
      LOBYTE(v16) = *v21;
      if ((v22 & 1) == 0 && *v21)
      {
        if (!v19)
          goto LABEL_48;
      }
      else if (*((_QWORD *)v21 - 1))
      {
        if (((v19 ^ (*(_QWORD *)(v11 + 56 * v10 + 24) != 0)) & 1) == 0)
          goto LABEL_40;
      }
      else if (v19)
      {
        goto LABEL_41;
      }
      v10 = v18;
      v21 += 56;
      ++v18;
    }
    while (v18 < v3);
    v18 = v20;
LABEL_40:
    v10 = v18;
    if (v19)
    {
LABEL_41:
      if (v18 < v14)
        goto LABEL_169;
LABEL_42:
      if (v14 < v18)
      {
        v23 = 56 * v18;
        v24 = v18;
        v25 = v14;
        v26 = 56 * v14;
        do
        {
          if (v25 != --v24)
          {
            if (!v11)
              goto LABEL_175;
            v27 = v11 + v26;
            v28 = v11 + v23;
            v29 = *(_QWORD *)(v11 + v26);
            v30 = *(_QWORD *)(v11 + v26 + 8);
            v31 = *(_BYTE *)(v11 + v26 + 32);
            v32 = *(_BYTE *)(v11 + v26 + 40);
            v33 = *(_QWORD *)(v11 + v26 + 48);
            v34 = *(_OWORD *)(v11 + v26 + 16);
            v35 = *(_OWORD *)(v11 + v23 - 40);
            v36 = *(_OWORD *)(v11 + v23 - 24);
            v37 = *(_OWORD *)(v11 + v23 - 56);
            *(_QWORD *)(v27 + 48) = *(_QWORD *)(v11 + v23 - 8);
            *(_OWORD *)(v27 + 16) = v35;
            *(_OWORD *)(v27 + 32) = v36;
            *(_OWORD *)v27 = v37;
            *(_QWORD *)(v28 - 56) = v29;
            *(_QWORD *)(v28 - 48) = v30;
            *(_OWORD *)(v28 - 40) = v34;
            *(_BYTE *)(v28 - 24) = v31;
            *(_BYTE *)(v28 - 16) = v32;
            *(_QWORD *)(v28 - 8) = v33;
          }
          ++v25;
          v23 -= 56;
          v26 += 56;
        }
        while (v25 < v24);
      }
LABEL_48:
      v10 = v18;
    }
LABEL_49:
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_167;
      if (v10 - v14 < (uint64_t)v130)
      {
        v38 = (Swift::Int)v130 + v14;
        if (__OFADD__(v14, v130))
          goto LABEL_171;
        if (v38 >= v3)
          v38 = v3;
        if (v38 < v14)
          goto LABEL_172;
        if (v10 != v38)
        {
          v39 = v126 + 56 * v10;
          do
          {
            v40 = *(unsigned __int8 *)(v11 + 56 * v10 + 32);
            v41 = v14;
            v42 = v39;
            do
            {
              if (((v40 ^ 1 | *(unsigned __int8 *)(v42 - 72)) & 1) != 0
                && (!*(_QWORD *)(v42 - 24) || *(_QWORD *)(v42 - 80) != 0))
              {
                break;
              }
              if (!v11)
                goto LABEL_173;
              v44 = v42 - 48;
              v45 = (_OWORD *)(v42 - 104);
              v46 = *(_QWORD *)(v42 - 56);
              *(_QWORD *)(v42 - 56) = *(_QWORD *)v42;
              v42 -= 56;
              v47 = *(_QWORD *)(v42 + 8);
              v48 = *(_QWORD *)(v42 + 16);
              v49 = *(_BYTE *)(v42 + 48);
              v50 = *(_OWORD *)(v42 + 24);
              v51 = v45[1];
              *(_OWORD *)v44 = *v45;
              *(_OWORD *)(v44 + 16) = v51;
              *(_OWORD *)(v44 + 32) = v45[2];
              *(_QWORD *)(v44 + 48) = v46;
              *(_QWORD *)(v42 - 48) = v47;
              *(_QWORD *)(v42 - 40) = v48;
              *(_OWORD *)(v42 - 32) = v50;
              *(_BYTE *)(v42 - 16) = v40;
              *(_BYTE *)(v42 - 8) = v49;
              ++v41;
            }
            while (v10 != v41);
            ++v10;
            v39 += 56;
          }
          while (v10 != v38);
          v10 = v38;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_10003B01C(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v53 = *((_QWORD *)v12 + 2);
    v52 = *((_QWORD *)v12 + 3);
    v13 = v53 + 1;
    v11 = v132;
    if (v53 >= v52 >> 1)
    {
      v101 = sub_10003B01C((char *)(v52 > 1), v53 + 1, 1, v12);
      v11 = v132;
      v12 = v101;
    }
    *((_QWORD *)v12 + 2) = v13;
    v54 = v12 + 32;
    v55 = &v12[16 * v53 + 32];
    *(_QWORD *)v55 = v14;
    *((_QWORD *)v55 + 1) = v10;
    if (v53)
      break;
    v13 = 1;
LABEL_15:
    v3 = v131;
    if (v10 >= v131)
    {
      v9 = v129;
      goto LABEL_134;
    }
  }
  while (1)
  {
    v56 = v13 - 1;
    if (v13 >= 4)
    {
      v61 = &v54[16 * v13];
      v62 = *((_QWORD *)v61 - 8);
      v63 = *((_QWORD *)v61 - 7);
      v67 = __OFSUB__(v63, v62);
      v64 = v63 - v62;
      if (v67)
        goto LABEL_151;
      v66 = *((_QWORD *)v61 - 6);
      v65 = *((_QWORD *)v61 - 5);
      v67 = __OFSUB__(v65, v66);
      v59 = v65 - v66;
      v60 = v67;
      if (v67)
        goto LABEL_152;
      v68 = v13 - 2;
      v69 = &v54[16 * v13 - 32];
      v71 = *(_QWORD *)v69;
      v70 = *((_QWORD *)v69 + 1);
      v67 = __OFSUB__(v70, v71);
      v72 = v70 - v71;
      if (v67)
        goto LABEL_154;
      v67 = __OFADD__(v59, v72);
      v73 = v59 + v72;
      if (v67)
        goto LABEL_157;
      if (v73 >= v64)
      {
        v91 = &v54[16 * v56];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v67 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v67)
          goto LABEL_161;
        v84 = v59 < v94;
        goto LABEL_107;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v85 = *((_QWORD *)v12 + 4);
        v86 = *((_QWORD *)v12 + 5);
        v67 = __OFSUB__(v86, v85);
        v78 = v86 - v85;
        v79 = v67;
        goto LABEL_101;
      }
      v58 = *((_QWORD *)v12 + 4);
      v57 = *((_QWORD *)v12 + 5);
      v67 = __OFSUB__(v57, v58);
      v59 = v57 - v58;
      v60 = v67;
    }
    if ((v60 & 1) != 0)
      goto LABEL_153;
    v68 = v13 - 2;
    v74 = &v54[16 * v13 - 32];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v77 = __OFSUB__(v75, v76);
    v78 = v75 - v76;
    v79 = v77;
    if (v77)
      goto LABEL_156;
    v80 = &v54[16 * v56];
    v82 = *(_QWORD *)v80;
    v81 = *((_QWORD *)v80 + 1);
    v67 = __OFSUB__(v81, v82);
    v83 = v81 - v82;
    if (v67)
      goto LABEL_159;
    if (__OFADD__(v78, v83))
      goto LABEL_160;
    if (v78 + v83 >= v59)
    {
      v84 = v59 < v83;
LABEL_107:
      if (v84)
        v56 = v68;
      goto LABEL_109;
    }
LABEL_101:
    if ((v79 & 1) != 0)
      goto LABEL_155;
    v87 = &v54[16 * v56];
    v89 = *(_QWORD *)v87;
    v88 = *((_QWORD *)v87 + 1);
    v67 = __OFSUB__(v88, v89);
    v90 = v88 - v89;
    if (v67)
      goto LABEL_158;
    if (v90 < v78)
      goto LABEL_15;
LABEL_109:
    v95 = v56 - 1;
    if (v56 - 1 >= v13)
    {
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if (!v11)
      goto LABEL_174;
    v96 = &v54[16 * v95];
    v97 = *(_QWORD *)v96;
    v98 = &v54[16 * v56];
    v99 = *((_QWORD *)v98 + 1);
    sub_10003AD14((char *)(v11 + 56 * *(_QWORD *)v96), (char *)(v11 + 56 * *(_QWORD *)v98), v11 + 56 * v99, __dst);
    if (v134)
      break;
    if (v99 < v97)
      goto LABEL_148;
    if (v56 > *((_QWORD *)v12 + 2))
      goto LABEL_149;
    *(_QWORD *)v96 = v97;
    *(_QWORD *)&v54[16 * v95 + 8] = v99;
    v100 = *((_QWORD *)v12 + 2);
    if (v56 >= v100)
      goto LABEL_150;
    v13 = v100 - 1;
    memmove(&v54[16 * v56], v98 + 16, 16 * (v100 - 1 - v56));
    *((_QWORD *)v12 + 2) = v100 - 1;
    v11 = v132;
    if (v100 <= 2)
      goto LABEL_15;
  }
  v102 = v12;
LABEL_118:
  v103 = v102;
LABEL_119:
  swift_bridgeObjectRelease(v103);
  v129[2] = 0;
  return (_OWORD *)swift_bridgeObjectRelease(v129);
}

uint64_t sub_10003AD14(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  BOOL v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  unint64_t v22;
  char *v23;
  BOOL v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t result;
  char *v34;
  const void *v35;
  char *v36;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 56;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 56;
  v36 = __src;
  v35 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -55)
    {
      if (__dst != a2 || &a2[56 * v11] <= __dst)
        memmove(__dst, a2, 56 * v11);
      v21 = &v4[56 * v11];
      v34 = v21;
      v36 = v6;
      if (v7 < v6 && v10 >= 56)
      {
        v22 = a3 - 56;
        do
        {
          v23 = (char *)(v22 + 56);
          v24 = *(v21 - 24) == 1 && *(v6 - 24) == 0;
          if (v24 || (*((_QWORD *)v21 - 4) ? (v25 = *((_QWORD *)v6 - 4) == 0) : (v25 = 0), v25))
          {
            v29 = v6 - 56;
            if (v23 != v6 || v22 >= (unint64_t)v6)
            {
              v30 = *(_OWORD *)v29;
              v31 = *(_OWORD *)(v6 - 40);
              v32 = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(v22 + 48) = *((_QWORD *)v6 - 1);
              *(_OWORD *)(v22 + 16) = v31;
              *(_OWORD *)(v22 + 32) = v32;
              *(_OWORD *)v22 = v30;
            }
            v36 = v6 - 56;
            if (v29 <= v7)
              break;
          }
          else
          {
            v34 = v21 - 56;
            if (v23 < v21 || v22 >= (unint64_t)v21 || v23 != v21)
            {
              v26 = *(_OWORD *)(v21 - 56);
              v27 = *(_OWORD *)(v21 - 40);
              v28 = *(_OWORD *)(v21 - 24);
              *(_QWORD *)(v22 + 48) = *((_QWORD *)v21 - 1);
              *(_OWORD *)(v22 + 16) = v27;
              *(_OWORD *)(v22 + 32) = v28;
              *(_OWORD *)v22 = v26;
            }
            v29 = v6;
            v21 -= 56;
            if (v6 <= v7)
              break;
          }
          v22 -= 56;
          v6 = v29;
        }
        while (v21 > v4);
      }
LABEL_54:
      sub_10003B114((void **)&v36, &v35, &v34);
      return 1;
    }
  }
  else if (v8 >= -55)
  {
    if (__dst != __src || &__src[56 * v9] <= __dst)
      memmove(__dst, __src, 56 * v9);
    v12 = &v4[56 * v9];
    v34 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 56)
    {
      v13 = v4;
      while (1)
      {
        v14 = v6[32] == 1 && v13[32] == 0;
        if (v14 || (*((_QWORD *)v6 + 3) ? (v15 = *((_QWORD *)v13 + 3) == 0) : (v15 = 0), v15))
        {
          v17 = v6 + 56;
          v16 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_25;
        }
        else
        {
          v4 = v13 + 56;
          v16 = v13;
          v17 = v6;
          if (v7 == v13)
          {
            v13 += 56;
            if (v7 < v4)
              goto LABEL_25;
          }
          else
          {
            v13 += 56;
          }
        }
        v18 = *(_OWORD *)v16;
        v19 = *((_OWORD *)v16 + 1);
        v20 = *((_OWORD *)v16 + 2);
        *((_QWORD *)v7 + 6) = *((_QWORD *)v16 + 6);
        *((_OWORD *)v7 + 1) = v19;
        *((_OWORD *)v7 + 2) = v20;
        *(_OWORD *)v7 = v18;
LABEL_25:
        v7 += 56;
        if (v13 < v12)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v35 = v4;
        v36 = v7;
        goto LABEL_54;
      }
    }
    goto LABEL_54;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10003B01C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004D20(&qword_100091C98);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10003B114(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -56)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6])
      return (char *)memmove(result, v3, 56 * v6);
  }
  return result;
}

char *sub_10003B1D4(uint64_t a1)
{
  return sub_10003B01C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_10003B1E8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      goto LABEL_24;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        goto LABEL_24;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          goto LABEL_24;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if ((*(_BYTE *)(*(_QWORD *)(a3 + 48) + 40 * v12 + 32) & 1) == 0)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_24:
        sub_10003B338(a1, a2, v4, (_QWORD *)a3);
        return;
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    goto LABEL_24;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_24;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

void sub_10003B338(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  _BYTE v27[16];

  if (!a3)
    return;
  v5 = a3;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return;
  }
  sub_100004D20(&qword_100091CA0);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_25;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_29;
    if (v13 >= a2)
      return;
    v14 = a1[v13];
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= a2)
        return;
      v14 = a1[v10];
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= a2)
          return;
        v14 = a1[v10];
        if (!v14)
          break;
      }
    }
LABEL_24:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_25:
    v16 = a4[6] + 40 * v12;
    v17 = *(_BYTE *)(v16 + 32);
    v18 = *(_OWORD *)(v16 + 16);
    v23 = *(_OWORD *)v16;
    v24 = v18;
    v25 = v17;
    v26 = *(_OWORD *)v16;
    sub_10003B61C((uint64_t)&v24, (uint64_t)v27);
    v19 = a4[7] + 16 * v12;
    v20 = *(_BYTE *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    sub_10003B664((uint64_t)&v26);
    sub_10003B664((uint64_t)v27);
    swift_bridgeObjectRetain(v21);
    sub_100039BD8((uint64_t *)&v23, v20, v21, v8);
    if (__OFSUB__(v5--, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (!v5)
      return;
  }
  v15 = v13 + 3;
  if (v15 >= a2)
    return;
  v14 = a1[v15];
  if (v14)
  {
    v10 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= a2)
      return;
    v14 = a1[v10];
    ++v15;
    if (v14)
      goto LABEL_24;
  }
LABEL_30:
  __break(1u);
}

double sub_10003B524@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  double result;

  v3 = *a1;
  if (qword_10008E5F0 != -1)
    swift_once(&qword_10008E5F0, sub_1000155B4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000B164(v4, (uint64_t)qword_100093E48);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Participant configuration did change", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  *a2 = v3;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v3).n128_u64[0];
  return result;
}

uint64_t sub_10003B608(_QWORD *a1)
{
  return sub_10004058C(0, a1[2], 0, a1);
}

uint64_t sub_10003B61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100091CA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003B664(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_10003B68C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091CF8;
  if (!qword_100091CF8)
  {
    v1 = sub_100005520(&qword_100090B40);
    sub_100017F5C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100091CF8);
  }
  return result;
}

uint64_t sub_10003B6F0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void *sub_10003B714(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100038648(a1, a2, v2);
}

uint64_t sub_10003B71C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003B740@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, a1[1]);
  *a2 = result;
  return result;
}

void sub_10003B770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t i;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a3;
  v4 = sub_100004D20(&qword_100093970);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for AEAParticipant(0);
  v7 = *(_QWORD *)(v43 - 8);
  v8 = __chkstk_darwin(v43);
  v39 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v38 = (uint64_t)&v35 - v10;
  v11 = type metadata accessor for AEAParticipant.Process(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v35 - v16;
  v18 = *(_QWORD *)(a1 + 56);
  v41 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v42 = (unint64_t)(v19 + 63) >> 6;
  v22 = a1;
  swift_bridgeObjectRetain(a1);
  v23 = 0;
  v40 = _swiftEmptyArrayStorage;
  if (!v21)
    goto LABEL_7;
LABEL_4:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (i = v24 | (v23 << 6); ; i = __clz(__rbit64(v27)) + (v23 << 6))
  {
    sub_1000057E4(*(_QWORD *)(v22 + 48) + *(_QWORD *)(v12 + 72) * i, (uint64_t)v17);
    sub_10003BB2C((uint64_t)v17, (uint64_t)v15, type metadata accessor for AEAParticipant.Process);
    sub_100038D58((uint64_t)v15, v44, (uint64_t)v6);
    sub_10002F554((uint64_t)v15, type metadata accessor for AEAParticipant.Process);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v43) == 1)
    {
      sub_100029144((uint64_t)v6);
      if (v21)
        goto LABEL_4;
    }
    else
    {
      sub_10003BB2C((uint64_t)v6, v38, type metadata accessor for AEAParticipant);
      sub_10003BB2C(v38, v39, type metadata accessor for AEAParticipant);
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
        v40 = (_QWORD *)sub_100054544(0, v40[2] + 1, 1, (unint64_t)v40);
      v30 = v40[2];
      v29 = v40[3];
      v31 = v30 + 1;
      if (v30 >= v29 >> 1)
      {
        v36 = v40[2];
        v37 = v30 + 1;
        v34 = (_QWORD *)sub_100054544(v29 > 1, v30 + 1, 1, (unint64_t)v40);
        v30 = v36;
        v31 = v37;
        v40 = v34;
      }
      v32 = v39;
      v33 = v40;
      v40[2] = v31;
      sub_10003BB2C(v32, (uint64_t)v33+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v30, type metadata accessor for AEAParticipant);
      if (v21)
        goto LABEL_4;
    }
LABEL_7:
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v26 >= v42)
      goto LABEL_29;
    v27 = *(_QWORD *)(v41 + 8 * v26);
    ++v23;
    if (!v27)
    {
      v23 = v26 + 1;
      if (v26 + 1 >= v42)
        goto LABEL_29;
      v27 = *(_QWORD *)(v41 + 8 * v23);
      if (!v27)
      {
        v23 = v26 + 2;
        if (v26 + 2 >= v42)
          goto LABEL_29;
        v27 = *(_QWORD *)(v41 + 8 * v23);
        if (!v27)
        {
          v23 = v26 + 3;
          if (v26 + 3 >= v42)
            goto LABEL_29;
          v27 = *(_QWORD *)(v41 + 8 * v23);
          if (!v27)
            break;
        }
      }
    }
LABEL_22:
    v21 = (v27 - 1) & v27;
  }
  v28 = v26 + 4;
  if (v28 >= v42)
  {
LABEL_29:
    swift_release(v22);
    return;
  }
  v27 = *(_QWORD *)(v41 + 8 * v28);
  if (v27)
  {
    v23 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    v23 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v23 >= v42)
      goto LABEL_29;
    v27 = *(_QWORD *)(v41 + 8 * v23);
    ++v28;
    if (v27)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_10003BB2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003BB70(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

char *sub_10003BBA4(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t, __n128);
  char *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *__dst;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v8;
    a1[24] = *((_BYTE *)a2 + 24);
    v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v10 = &v7[v9];
    v11 = (uint64_t)a2 + v9;
    *v10 = *((_BYTE *)a2 + v9);
    v12 = *(uint64_t *)((char *)a2 + v9 + 16);
    *((_QWORD *)v10 + 1) = *(char **)((char *)a2 + v9 + 8);
    *((_QWORD *)v10 + 2) = v12;
    v13 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v10[v13];
    v14 = (const void *)(v11 + v13);
    v15 = type metadata accessor for URL(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v16 + 48);
    v18 = v4;
    swift_bridgeObjectRetain(v8);
    v19 = swift_bridgeObjectRetain(v12);
    if (v17(v14, 1, v15, v19))
    {
      v20 = sub_100004D20(&qword_10008F508);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v21 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
    v22 = &v7[v21];
    v23 = (uint64_t)a2 + v21;
    *v22 = *(_BYTE *)v23;
    v24 = *(_QWORD *)(v23 + 8);
    *((_QWORD *)v22 + 1) = v24;
    v25 = a3[5];
    v26 = a3[6];
    v27 = *(uint64_t *)((char *)a2 + v25);
    *(_QWORD *)&v7[v25] = v27;
    v7[v26] = *((_BYTE *)a2 + v26);
    v28 = a3[8];
    v7[a3[7]] = *((_BYTE *)a2 + a3[7]);
    v7[v28] = *((_BYTE *)a2 + v28);
    v29 = a3[10];
    v7[a3[9]] = *((_BYTE *)a2 + a3[9]);
    v7[v29] = *((_BYTE *)a2 + v29);
    v30 = a3[12];
    v7[a3[11]] = *((_BYTE *)a2 + a3[11]);
    v7[v30] = *((_BYTE *)a2 + v30);
    v31 = a3[14];
    v7[a3[13]] = *((_BYTE *)a2 + a3[13]);
    v7[v31] = *((_BYTE *)a2 + v31);
    v7[a3[15]] = *((_BYTE *)a2 + a3[15]);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v27);
  }
  return v7;
}

uint64_t sub_10003BDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 16));
  v5 = v4 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v8 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_10003BE60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t, __n128);
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *__dst;

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_BYTE *)v10 = *(_BYTE *)(a2 + v9);
  v12 = *(_QWORD *)(a2 + v9 + 16);
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(a2 + v9 + 8);
  *(_QWORD *)(v10 + 16) = v12;
  v13 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  __dst = (void *)(v10 + v13);
  v14 = (const void *)(v11 + v13);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v16 + 48);
  v18 = v7;
  swift_bridgeObjectRetain(v8);
  v19 = swift_bridgeObjectRetain(v12);
  if (v17(v14, 1, v15, v19))
  {
    v20 = sub_100004D20(&qword_10008F508);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v21 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_BYTE *)v22 = *(_BYTE *)v23;
  v24 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v22 + 8) = v24;
  v25 = a3[5];
  v26 = a3[6];
  v27 = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(a1 + v25) = v27;
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  v28 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  v29 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v30 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v31 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v31) = *(_BYTE *)(a2 + v31);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v27);
  return a1;
}

uint64_t sub_10003C034(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v11 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)v12 = *(_BYTE *)(a2 + v11);
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(a2 + v11 + 8);
  v14 = *(_QWORD *)(a2 + v11 + 16);
  v15 = *(_QWORD *)(a1 + v11 + 16);
  *(_QWORD *)(v12 + 16) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v17 = (void *)(v12 + v16);
  v18 = (void *)(v13 + v16);
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v24 = sub_100004D20(&qword_10008F508);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  v25 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  v28 = *(_QWORD *)(v27 + 8);
  v29 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = a3[5];
  v31 = *(_QWORD *)(a2 + v30);
  v32 = *(_QWORD *)(a1 + v30);
  *(_QWORD *)(a1 + v30) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_10003C28C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_BYTE *)v7 = *(_BYTE *)(a2 + v6);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + v6 + 8);
  v9 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v10 = (void *)(v7 + v9);
  v11 = (const void *)(v8 + v9);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100004D20(&qword_10008F508);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = type metadata accessor for AEAParticipant(0);
  *(_OWORD *)(a1 + *(int *)(v15 + 20)) = *(_OWORD *)(a2 + *(int *)(v15 + 20));
  v16 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_10003C418(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_BYTE *)v10 = *(_BYTE *)(a2 + v9);
  v12 = *(_QWORD *)(a2 + v9 + 16);
  v13 = *(_QWORD *)(a1 + v9 + 16);
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(a2 + v9 + 8);
  *(_QWORD *)(v10 + 16) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v15 = (void *)(v10 + v14);
  v16 = (void *)(v11 + v14);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_100004D20(&qword_10008F508);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  swift_bridgeObjectRelease(v26);
  v27 = a3[5];
  v28 = *(_QWORD *)(a1 + v27);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  swift_bridgeObjectRelease(v28);
  v29 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v30 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v31 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v31) = *(_BYTE *)(a2 + v31);
  v32 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v32) = *(_BYTE *)(a2 + v32);
  v33 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  return a1;
}

uint64_t sub_10003C628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003C634);
}

uint64_t sub_10003C634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for AEAParticipant(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10003C6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003C6BC);
}

uint64_t sub_10003C6BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AEAParticipant(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AEAAssessmentSessionConfiguration(uint64_t a1)
{
  uint64_t result;

  result = qword_100091D90;
  if (!qword_100091D90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAAssessmentSessionConfiguration);
  return result;
}

uint64_t sub_10003C770(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  result = type metadata accessor for AEAParticipant(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = &unk_100067E78;
    v4[3] = &unk_100067E78;
    v4[4] = &unk_100067E78;
    v4[5] = &unk_100067E78;
    v4[6] = &unk_100067E78;
    v4[7] = &unk_100067E78;
    v4[8] = &unk_100067E78;
    v4[9] = &unk_100067E78;
    v4[10] = &unk_100067E78;
    v4[11] = &unk_100067E78;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10003C800(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  void (*v36)(_QWORD *, _QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;

  v1 = a1;
  v40 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = __CocoaDictionary.count.getter(a1);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 16);
  }
  result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    v50 = _swiftEmptyArrayStorage;
    sub_10003FF40(0, v2 & ~(v2 >> 63), 0);
    result = sub_10003D824(v1);
    v47 = result;
    v48 = v4;
    v49 = v5 & 1;
    if (v2 < 0)
    {
      __break(1u);
LABEL_28:
      __break(1u);
    }
    else
    {
      v6 = v1 & 0xFFFFFFFFFFFFFF8;
      if (v1 < 0)
        v6 = v1;
      v38 = v6;
      v39 = v1;
      do
      {
        while (1)
        {
          v13 = v47;
          v14 = v49;
          v41 = v48;
          sub_10003D8E4(v46, v47, v48, v49, v1);
          v16 = v15;
          v17 = (void *)v46[0];
          v18 = objc_msgSend(v15, "bundleIdentifier");
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          v44 = v20;
          v45 = v19;

          v21 = objc_msgSend(v16, "teamIdentifier");
          if (v21)
          {
            v22 = v21;
            v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
            v42 = v24;
            v43 = v23;

          }
          else
          {
            v42 = 0;
            v43 = 0;
          }
          v25 = objc_msgSend(v16, "requiresSignatureValidation");
          v26 = objc_msgSend(v17, "allowsNetworkAccess");
          v27 = objc_msgSend(v17, "configurationInfo");
          v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v27, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

          v29 = v50;
          result = swift_isUniquelyReferenced_nonNull_native(v50);
          if ((result & 1) == 0)
          {
            result = sub_10003FF40(0, v29[2] + 1, 1);
            v29 = v50;
          }
          v31 = v29[2];
          v30 = v29[3];
          if (v31 >= v30 >> 1)
          {
            result = sub_10003FF40(v30 > 1, v31 + 1, 1);
            v29 = v50;
          }
          v29[2] = v31 + 1;
          v32 = &v29[7 * v31];
          v32[4] = v45;
          v32[5] = v44;
          v32[6] = v43;
          v32[7] = v42;
          *((_BYTE *)v32 + 64) = v25;
          *((_BYTE *)v32 + 72) = v26;
          v32[10] = v28;
          if (v40)
            break;
          v1 = v39;
          sub_10003D688(v13, v41, v14, v39);
          v8 = v7;
          v10 = v9;
          v12 = v11;
          sub_100013A70(v13, v41, v14);
          v47 = v8;
          v48 = v10;
          v49 = v12 & 1;
          if (!--v2)
            goto LABEL_25;
        }
        v1 = v39;
        if ((v14 & 1) == 0)
          goto LABEL_28;
        v33 = __CocoaDictionary.Index.handleBitPattern.getter(v13, v41);
        if (v33)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v35 = sub_100004D20(&qword_100091E20);
        v36 = (void (*)(_QWORD *, _QWORD))Dictionary.Index._asCocoa.modify(v46, v35);
        __CocoaDictionary.formIndex(after:isUnique:)(v37, isUniquelyReferenced_nonNull_native, v38);
        v36(v46, 0);
        --v2;
      }
      while (v2);
LABEL_25:
      sub_100013A70(v47, v48, v49);
      return (uint64_t)v50;
    }
  }
  return result;
}

uint64_t sub_10003CB30@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  int *v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t result;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unsigned __int8 v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  id v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[24];

  v66 = a5;
  v69 = a3;
  v64 = type metadata accessor for AEAParticipant(0);
  __chkstk_darwin(v64);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004D20(&qword_100091DF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004D20(&qword_100091DF8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v67 = (char *)&v58 - v17;
  v18 = type metadata accessor for AEAParticipant.Process(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v68 = (uint64_t)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(a2, "isEnabled"))
    goto LABEL_7;
  v21 = objc_msgSend(a2, "configurationsByApplicationDescriptor");
  if (!v21)
    goto LABEL_7;
  v22 = v21;
  v62 = a4;
  v63 = a1;
  v23 = sub_10001F494(0, &qword_100091E08, AEAssessmentApplicationDescriptor_ptr);
  v24 = sub_10001F494(0, &qword_100091E10, AEAssessmentIndividualConfiguration_ptr);
  v25 = sub_10003D230();
  v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v22, v23, v24, v25);

  v27 = objc_msgSend(a2, "mainIndividualConfiguration");
  if (!v27)
  {
    swift_bridgeObjectRelease(v26);
    a4 = v62;
    a1 = v63;
LABEL_7:
    v31 = sub_10003D1EC();
    v32 = swift_allocError(&type metadata for AEAAssessmentSessionConfiguration.ConfigurationError, v31, 0, 0);
    *v33 = 0;
    swift_willThrow(v32);

    swift_release(v69);
LABEL_8:

    return sub_100004D60(a4);
  }
  v59 = v26;
  v60 = v27;
  v61 = a2;
  v28 = *(_QWORD *)(v69 + 112) + *(_QWORD *)(**(_QWORD **)(v69 + 112) + 112);
  swift_beginAccess(v28, v73, 0, 0);
  sub_10003D288(v28, (uint64_t)v12);
  v29 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v29 - 1) + 48))(v12, 1, v29) == 1)
  {
    sub_1000187D0((uint64_t)v12, &qword_100091DF0);
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v30(v16, 1, 1, v18);
  }
  else
  {
    sub_10003D644((uint64_t)v12, (uint64_t)v9, type metadata accessor for AEAParticipant);
    sub_10002F554((uint64_t)v12, type metadata accessor for AEAAssessmentSessionConfiguration);
    sub_10003D644((uint64_t)v9, (uint64_t)v16, type metadata accessor for AEAParticipant.Process);
    sub_10002F554((uint64_t)v9, type metadata accessor for AEAParticipant);
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v30(v16, 0, 1, v18);
  }
  a4 = v62;
  v35 = (uint64_t)v67;
  sub_100008380((uint64_t)v62, (uint64_t)v70);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v36(v16, 1, v18) == 1)
  {
    v37 = v71;
    v38 = v72;
    sub_1000060F4(v70, v71);
    (*(void (**)(void *, uint64_t, uint64_t))(v38 + 8))(v63, v37, v38);
    sub_1000187D0((uint64_t)v16, &qword_100091DF8);
  }
  else
  {
    sub_10003D2D0((uint64_t)v16, v35);
    v30((char *)v35, 0, 1, v18);
  }
  v40 = v59;
  v39 = v60;
  sub_100004D60(v70);
  if (v36((char *)v35, 1, v18) == 1)
  {
    swift_bridgeObjectRelease(v40);
    sub_1000187D0(v35, &qword_100091DF8);
    v41 = sub_10003D1EC();
    v42 = swift_allocError(&type metadata for AEAAssessmentSessionConfiguration.ConfigurationError, v41, 0, 0);
    *v43 = 1;
    swift_willThrow(v42);

    swift_release(v69);
    a1 = v63;
    goto LABEL_8;
  }
  v44 = v68;
  sub_10003D2D0(v35, v68);
  v45 = objc_msgSend(v39, "allowsNetworkAccess");
  v46 = objc_msgSend(v39, "configurationInfo");
  v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v46, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v48 = v66;
  sub_10003D644(v44, v66, type metadata accessor for AEAParticipant.Process);
  v49 = v65;
  v50 = v48 + *(int *)(v64 + 20);
  *(_BYTE *)v50 = v45;
  *(_QWORD *)(v50 + 8) = v47;
  v51 = sub_10003C800(v40);
  swift_bridgeObjectRelease(v40);
  v52 = *(_QWORD *)(v51 + 16);
  if (v52)
  {
    sub_100004D20(&qword_100091CA0);
    v53 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v52);
  }
  else
  {
    v53 = _swiftEmptyDictionarySingleton;
  }
  v54 = v63;
  v70[0] = v53;
  swift_bridgeObjectRetain(v51);
  sub_10003D314(v55, 1, v70);
  if (v49)
  {
    result = swift_unexpectedError(v49, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v51);
    *(_QWORD *)(v48 + v29[5]) = v70[0];
    v56 = v61;
    *(_BYTE *)(v48 + v29[6]) = objc_msgSend(v61, "allowsAutoCorrection");
    *(_BYTE *)(v48 + v29[7]) = objc_msgSend(v56, "allowsSmartPunctuation");
    *(_BYTE *)(v48 + v29[8]) = objc_msgSend(v56, "allowsSpellCheck");
    *(_BYTE *)(v48 + v29[9]) = objc_msgSend(v56, "allowsPredictiveKeyboard");
    *(_BYTE *)(v48 + v29[10]) = objc_msgSend(v56, "allowsKeyboardShortcuts");
    *(_BYTE *)(v48 + v29[11]) = objc_msgSend(v56, "allowsActivityContinuation");
    *(_BYTE *)(v48 + v29[12]) = objc_msgSend(v56, "allowsDictation");
    *(_BYTE *)(v48 + v29[13]) = objc_msgSend(v56, "allowsAccessibilitySpeech");
    *(_BYTE *)(v48 + v29[14]) = objc_msgSend(v56, "allowsPasswordAutoFill");
    v57 = objc_msgSend(v56, "allowsContinuousPathKeyboard");

    swift_release(v69);
    sub_100004D60(a4);
    result = sub_10002F554(v68, type metadata accessor for AEAParticipant.Process);
    *(_BYTE *)(v48 + v29[15]) = v57;
  }
  return result;
}

unint64_t sub_10003D1EC()
{
  unint64_t result;

  result = qword_100091E00;
  if (!qword_100091E00)
  {
    result = swift_getWitnessTable(&unk_100067F0C, &type metadata for AEAAssessmentSessionConfiguration.ConfigurationError);
    atomic_store(result, (unint64_t *)&qword_100091E00);
  }
  return result;
}

unint64_t sub_10003D230()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091E18;
  if (!qword_100091E18)
  {
    v1 = sub_10001F494(255, &qword_100091E08, AEAssessmentApplicationDescriptor_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100091E18);
  }
  return result;
}

uint64_t sub_10003D288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100091DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003D2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AEAParticipant.Process(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003D314(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  __int128 v44;
  char v45;
  uint64_t v46;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v35 = v4;
  if (!v4)
    return swift_bridgeObjectRelease_n(a1, 2);
  v5 = 0;
  v6 = 0;
  while (1)
  {
    if (v6 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AEAParticipant.ApplicationDescriptor);
      __break(1u);
      goto LABEL_24;
    }
    v8 = *(_QWORD *)(a1 + v5 + 32);
    v7 = *(_QWORD *)(a1 + v5 + 40);
    v10 = *(_QWORD *)(a1 + v5 + 48);
    v9 = *(_QWORD *)(a1 + v5 + 56);
    v11 = *(_BYTE *)(a1 + v5 + 64);
    v12 = *(_BYTE *)(a1 + v5 + 72);
    v13 = *(_QWORD *)(a1 + v5 + 80);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v13);
    if (!v7)
      return swift_bridgeObjectRelease_n(a1, 2);
    *(_QWORD *)&v43 = v8;
    *((_QWORD *)&v43 + 1) = v7;
    *(_QWORD *)&v44 = v10;
    *((_QWORD *)&v44 + 1) = v9;
    v45 = v11;
    v42 = v11;
    v40 = v43;
    v41 = v44;
    v14 = (_QWORD *)*a3;
    v16 = sub_10005A32C((uint64_t)&v43);
    v17 = v14[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      goto LABEL_21;
    v20 = v15;
    if (v14[3] < v19)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_1000571B8();
      if ((v20 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v23 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v24 = v23[6] + 40 * v16;
    v25 = v44;
    *(_OWORD *)v24 = v43;
    *(_OWORD *)(v24 + 16) = v25;
    *(_BYTE *)(v24 + 32) = v45;
    v26 = v23[7] + 16 * v16;
    *(_BYTE *)v26 = v12;
    *(_QWORD *)(v26 + 8) = v13;
    v27 = v23[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_22;
    ++v6;
    v23[2] = v29;
    v5 += 56;
    a2 = 1;
    if (v35 == v6)
      return swift_bridgeObjectRelease_n(a1, 2);
  }
  sub_1000559E4(v19, a2 & 1);
  v21 = sub_10005A32C((uint64_t)&v43);
  if ((v20 & 1) != (v22 & 1))
    goto LABEL_23;
  v16 = v21;
  if ((v20 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v30 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v30);
  v46 = v30;
  swift_errorRetain(v30);
  v31 = sub_100004D20(&qword_100090790);
  if ((swift_dynamicCast(v31, &v46, v31, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(*((_QWORD *)&v40 + 1));
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(*((_QWORD *)&v41 + 1));
    return swift_errorRelease(v46);
  }
LABEL_24:
  v38 = 0;
  v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v33._object = (void *)0x800000010006D530;
  v33._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v33);
  _print_unlocked<A, B>(_:_:)(&v40, &v38, &type metadata for AEAParticipant.ApplicationDescriptor, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v34._countAndFlagsBits = 39;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v38, v39, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003D644(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_10003D688(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + 64 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
      {
        _HashTable.occupiedBucket(after:)(a1);
        return;
      }
      goto LABEL_12;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (__CocoaDictionary.Index.age.getter(a1, a2) != *(_DWORD *)(a4 + 36))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v6 = __CocoaDictionary.Index.key.getter(a1, a2);
  v12 = v6;
  sub_10003DB10(a1, a2, 1);
  v7 = sub_10001F494(0, &qword_100091E08, AEAssessmentApplicationDescriptor_ptr);
  swift_unknownObjectRetain(v6);
  swift_dynamicCast(&v13, &v12, (char *)&type metadata for Swift.AnyObject + 8, v7, 7);
  v8 = v13;
  swift_unknownObjectRelease(v6);
  sub_10005A488((uint64_t)v8);
  v10 = v9;

  if ((v10 & 1) != 0)
  {
    v11 = __CocoaDictionary.Index.dictionary.getter(a1, a2);
    __CocoaDictionary.index(after:)(a1, a2, v11);
    sub_100013A70(a1, a2, 1);
    swift_unknownObjectRelease(v11);
    return;
  }
LABEL_14:
  __break(1u);
}

uint64_t sub_10003D824(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    return __CocoaDictionary.startIndex.getter(a1);
  }
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = 0;
    return __clz(__rbit64(v2)) + v3;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v1 = 1 << v5;
  if (v6 < 7)
    return v1;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = 64;
    return __clz(__rbit64(v2)) + v3;
  }
  v7 = (unint64_t)(v1 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v3 = 64;
  while (v8)
  {
    v10 = *v9++;
    v2 = v10;
    --v8;
    v3 += 64;
    if (v10)
      return __clz(__rbit64(v2)) + v3;
  }
  return v1;
}

void sub_10003D8E4(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;

  v7 = a2;
  if ((a5 & 0xC000000000000001) == 0)
  {
    if ((a4 & 1) != 0)
      goto LABEL_13;
    if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) != 0)
    {
      if (*(_DWORD *)(a5 + 36) == (_DWORD)a3)
      {
LABEL_15:
        v20 = *(void **)(*(_QWORD *)(a5 + 48) + 8 * v7);
        v21 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * v7);
        *a1 = v21;
        v20;
        v22 = v21;
        return;
      }
      __break(1u);
LABEL_13:
      if (__CocoaDictionary.Index.age.getter(a2, a3) == *(_DWORD *)(a5 + 36))
      {
        v15 = __CocoaDictionary.Index.key.getter(v7, a3);
        v23 = v15;
        v16 = sub_10001F494(0, &qword_100091E08, AEAssessmentApplicationDescriptor_ptr);
        swift_unknownObjectRetain(v15);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        v17 = v24;
        swift_unknownObjectRelease(v15);
        v7 = sub_10005A488((uint64_t)v17);
        v19 = v18;

        if ((v19 & 1) != 0)
          goto LABEL_15;
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_19;
  }
  if ((a4 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    return;
  }
  if (a5 < 0)
    v9 = a5;
  else
    v9 = a5 & 0xFFFFFFFFFFFFFF8;
  v10 = __CocoaDictionary.lookup(_:)(a2, a3, v9);
  v12 = v11;
  v23 = v10;
  v13 = sub_10001F494(0, &qword_100091E08, AEAssessmentApplicationDescriptor_ptr);
  swift_unknownObjectRetain(v10);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
  swift_unknownObjectRelease(v10);
  v23 = v12;
  v14 = sub_10001F494(0, &qword_100091E10, AEAssessmentIndividualConfiguration_ptr);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
  *a1 = v24;
  swift_unknownObjectRelease(v12);
}

uint64_t sub_10003DB10(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t storeEnumTagSinglePayload for AEAAssessmentSessionConfiguration.ConfigurationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003DB68 + 4 * byte_100067E45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003DB9C + 4 * byte_100067E40[v4]))();
}

uint64_t sub_10003DB9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003DBA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003DBACLL);
  return result;
}

uint64_t sub_10003DBB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003DBC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003DBC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003DBCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AEAAssessmentSessionConfiguration.ConfigurationError()
{
  return &type metadata for AEAAssessmentSessionConfiguration.ConfigurationError;
}

unint64_t sub_10003DBEC()
{
  unint64_t result;

  result = qword_100091E28;
  if (!qword_100091E28)
  {
    result = swift_getWitnessTable(&unk_100067EE4, &type metadata for AEAAssessmentSessionConfiguration.ConfigurationError);
    atomic_store(result, (unint64_t *)&qword_100091E28);
  }
  return result;
}

uint64_t sub_10003DC30(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_10005431C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003DD84(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  int isUniquelyReferenced_nonNull_native;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;

  v66 = type metadata accessor for AEAParticipant(0);
  v4 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v65 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004D20(&qword_100093970);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v64 = (uint64_t)&v56 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v56 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *v1;
  v17 = *(_QWORD *)(*v1 + 16);
  v18 = v17 + v15;
  if (__OFADD__(v17, v15))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v16;
  if (!isUniquelyReferenced_nonNull_native || (v20 = *(_QWORD *)(v16 + 24) >> 1, v20 < v18))
  {
    if (v17 <= v18)
      v21 = v17 + v15;
    else
      v21 = v17;
    v16 = sub_100054544(isUniquelyReferenced_nonNull_native, v21, 1, v16);
    *v1 = v16;
    v20 = *(_QWORD *)(v16 + 24) >> 1;
  }
  v22 = *(_QWORD *)(v16 + 16);
  v2 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v17 = *(_QWORD *)(v4 + 72);
  v23 = v20 - v22;
  v24 = sub_10004074C(&v67, v16 + v2 + v17 * v22, v20 - v22, a1);
  if (v24 < v15)
    goto LABEL_15;
  if (v24)
  {
    v26 = *(_QWORD *)(v16 + 16);
    v27 = __OFADD__(v26, v24);
    v28 = v26 + v24;
    if (v27)
    {
      __break(1u);
      goto LABEL_20;
    }
    *(_QWORD *)(v16 + 16) = v28;
  }
  if (v24 != v23)
    return sub_100013A7C(v67);
LABEL_16:
  v16 = *(_QWORD *)(v16 + 16);
  v15 = v67;
  v25 = v69;
  v23 = v70;
  v62 = v69;
  v63 = v68;
  if (v71)
  {
    v61 = (v71 - 1) & v71;
    v30 = __clz(__rbit64(v71)) | (v70 << 6);
LABEL_18:
    sub_100018848(*(_QWORD *)(v15 + 48) + v30 * v17, (uint64_t)v14);
    v31 = v15;
    v32 = v66;
    v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v56(v14, 0, 1, v66);
    v33 = v23;
    goto LABEL_42;
  }
LABEL_20:
  v34 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
    __break(1u);
LABEL_40:
    v15 = v12;
    goto LABEL_41;
  }
  v35 = (unint64_t)(v25 + 64) >> 6;
  v58 = v23;
  if (v34 < v35)
  {
    v36 = *(_QWORD *)(v63 + 8 * v34);
    if (v36)
    {
LABEL_23:
      v61 = (v36 - 1) & v36;
      v30 = __clz(__rbit64(v36)) + (v34 << 6);
      v23 = v34;
      goto LABEL_18;
    }
    v37 = v23 + 2;
    v58 = v23 + 1;
    if (v23 + 2 < v35)
    {
      v12 = v15;
      v36 = *(_QWORD *)(v63 + 8 * v37);
      if (v36)
      {
LABEL_26:
        v34 = v37;
        goto LABEL_23;
      }
      v58 = v23 + 2;
      if (v23 + 3 < v35)
      {
        v36 = *(_QWORD *)(v63 + 8 * (v23 + 3));
        if (v36)
        {
          v34 = v23 + 3;
          goto LABEL_23;
        }
        v37 = v23 + 4;
        v58 = v23 + 3;
        if (v23 + 4 < v35)
        {
          v36 = *(_QWORD *)(v63 + 8 * v37);
          if (v36)
            goto LABEL_26;
          v34 = v23 + 5;
          v58 = v23 + 4;
          if (v23 + 5 < v35)
          {
            v36 = *(_QWORD *)(v63 + 8 * v34);
            if (v36)
              goto LABEL_23;
            v58 = v35 - 1;
            v38 = v23 + 6;
            while (v35 != v38)
            {
              v36 = *(_QWORD *)(v63 + 8 * v38++);
              if (v36)
              {
                v34 = v38 - 1;
                goto LABEL_23;
              }
            }
            goto LABEL_40;
          }
        }
      }
    }
  }
LABEL_41:
  v31 = v15;
  v32 = v66;
  v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v56(v14, 1, 1, v66);
  v61 = 0;
  v33 = v58;
LABEL_42:
  v57 = v31;
  v58 = v33;
  v39 = v64;
  v67 = v31;
  v68 = v63;
  v69 = v62;
  v70 = v33;
  v71 = v61;
  sub_10003FDE0((uint64_t)v14, v64, &qword_100093970);
  v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v60(v39, 1, v32) == 1)
  {
LABEL_43:
    sub_1000187D0((uint64_t)v14, &qword_100093970);
    sub_100013A7C(v57);
    return sub_1000187D0(v39, &qword_100093970);
  }
  v40 = v65;
  while (1)
  {
    sub_1000187D0(v39, &qword_100093970);
    v42 = *v1;
    v43 = *(_QWORD *)(*v1 + 24);
    v44 = v43 >> 1;
    if ((uint64_t)(v43 >> 1) < v16 + 1)
    {
      v42 = sub_100054544(v43 > 1, v16 + 1, 1, *v1);
      *v1 = v42;
      v44 = *(_QWORD *)(v42 + 24) >> 1;
    }
    sub_10003FDE0((uint64_t)v14, (uint64_t)v9, &qword_100093970);
    if (v60((uint64_t)v9, 1, v66) == 1)
    {
      v39 = v64;
LABEL_83:
      sub_1000187D0((uint64_t)v9, &qword_100093970);
      v41 = v66;
      goto LABEL_46;
    }
    v59 = v42 + v2;
    sub_100023A48((uint64_t)v9, v40);
    v45 = v16 < v44;
    if (v16 > v44)
      v44 = v16;
    v46 = v62;
    if (v45)
      break;
LABEL_45:
    v62 = v46;
    sub_10001888C(v40);
    v16 = v44;
    v41 = v66;
    v39 = v64;
LABEL_46:
    *(_QWORD *)(*v1 + 16) = v16;
    sub_10003FDE0((uint64_t)v14, v39, &qword_100093970);
    if (v60(v39, 1, v41) == 1)
      goto LABEL_43;
  }
  while (1)
  {
    sub_1000187D0((uint64_t)v14, &qword_100093970);
    result = sub_100023A48(v40, v59 + v16 * v17);
    v47 = v67;
    v48 = v70;
    v62 = v69;
    v63 = v68;
    if (v71)
    {
      v61 = (v71 - 1) & v71;
      v49 = __clz(__rbit64(v71)) | (v70 << 6);
      goto LABEL_57;
    }
    v51 = v70 + 1;
    if (__OFADD__(v70, 1))
      break;
    v52 = (unint64_t)(v69 + 64) >> 6;
    v53 = v70;
    if (v51 < v52)
    {
      v54 = *(_QWORD *)(v63 + 8 * v51);
      if (v54)
        goto LABEL_61;
      v53 = v70 + 1;
      if (v70 + 2 < v52)
      {
        v54 = *(_QWORD *)(v63 + 8 * (v70 + 2));
        if (v54)
        {
          v51 = v70 + 2;
          goto LABEL_61;
        }
        v53 = v70 + 2;
        if (v70 + 3 < v52)
        {
          v54 = *(_QWORD *)(v63 + 8 * (v70 + 3));
          if (v54)
          {
            v51 = v70 + 3;
            goto LABEL_61;
          }
          v53 = v70 + 3;
          if (v70 + 4 < v52)
          {
            v54 = *(_QWORD *)(v63 + 8 * (v70 + 4));
            if (v54)
            {
              v51 = v70 + 4;
LABEL_61:
              v61 = (v54 - 1) & v54;
              v49 = __clz(__rbit64(v54)) + (v51 << 6);
              v48 = v51;
LABEL_57:
              sub_100018848(*(_QWORD *)(v67 + 48) + v49 * v17, (uint64_t)v14);
              v50 = v66;
              v56(v14, 0, 1, v66);
              goto LABEL_79;
            }
            v51 = v70 + 5;
            v53 = v70 + 4;
            if (v70 + 5 < v52)
            {
              v54 = *(_QWORD *)(v63 + 8 * v51);
              if (v54)
                goto LABEL_61;
              v55 = v70 + 6;
              while (v52 != v55)
              {
                v54 = *(_QWORD *)(v63 + 8 * v55++);
                if (v54)
                {
                  v51 = v55 - 1;
                  goto LABEL_61;
                }
              }
              v53 = v52 - 1;
            }
          }
        }
      }
    }
    v50 = v66;
    v48 = v53;
    v56(v14, 1, 1, v66);
    v61 = 0;
LABEL_79:
    ++v16;
    v57 = v47;
    v58 = v48;
    v67 = v47;
    v68 = v63;
    v46 = v62;
    v69 = v62;
    v70 = v48;
    v71 = v61;
    sub_10003FDE0((uint64_t)v14, (uint64_t)v9, &qword_100093970);
    if (v60((uint64_t)v9, 1, v50) == 1)
    {
      v39 = v64;
      v40 = v65;
      goto LABEL_83;
    }
    v40 = v65;
    sub_100023A48((uint64_t)v9, v65);
    if (v16 == v44)
      goto LABEL_45;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003E4C8(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;
  char v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_100054558(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for UUID(0);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003E63C()
{
  return sub_10001F90C((uint64_t)&unk_100068040, (uint64_t)&unk_100068068);
}

uint64_t sub_10003E650()
{
  return sub_10001F90C((uint64_t)&unk_100068088, (uint64_t)&unk_1000680B0);
}

uint64_t sub_10003E664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[5];
  _BYTE v12[24];
  _QWORD v13[5];

  v3 = sub_10003F584();
  KeyPath = swift_getKeyPath(&unk_1000680D0);
  v5 = swift_getKeyPath(&unk_1000680F8);
  v13[0] = a1;
  swift_bridgeObjectRetain(a1);
  static Published.subscript.setter(v13, v3, KeyPath, v5);
  v6 = v1 + 96;
  swift_beginAccess(v6, v12, 0, 0);
  sub_10003FDE0(v6, (uint64_t)v13, &qword_100092070);
  if (v13[3])
  {
    sub_100008380((uint64_t)v13, (uint64_t)v11);
    sub_1000187D0((uint64_t)v13, &qword_100092070);
    sub_1000060F4(v11, v11[3]);
    swift_bridgeObjectRetain(a1);
    v8 = sub_10000D04C(v7);
    swift_bridgeObjectRelease(a1);
    v9 = sub_100041530((uint64_t)v8);
    swift_bridgeObjectRelease(v8);
    sub_100024740(v9);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v9);
    return sub_100004D60(v11);
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    return sub_1000187D0((uint64_t)v13, &qword_100092070);
  }
}

uint64_t sub_10003E7B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (**v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[24];
  _QWORD v66[5];
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  _UNKNOWN **v72;

  v1 = v0;
  v64 = sub_100004D20(&qword_100090B58);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v62 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004D20(&qword_100092078);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100004D20(&qword_100092080);
  __chkstk_darwin(v61);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008E5F0 != -1)
    swift_once(&qword_10008E5F0, sub_1000155B4);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000B164(v9, (uint64_t)qword_100093E48);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Resuming participant matching", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = type metadata accessor for AEAConcreteRunningBoardPrimitives.RunningApplicationMonitor(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  *(_QWORD *)(v15 + 16) = objc_msgSend(objc_allocWithZone((Class)RBSProcessMonitor), "init");
  v70[0] = &_swiftEmptySetSingleton;
  v16 = sub_100004D20(&qword_100092088);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v15 + 24) = CurrentValueSubject.init(_:)(v70);
  v17 = v15
      + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_browsingToken;
  v18 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_QWORD *)(v15
            + OBJC_IVAR____TtCC15assessmentagent33AEAConcreteRunningBoardPrimitives25RunningApplicationMonitor_currentMonitoredBundleIDs) = &_swiftEmptySetSingleton;
  v71 = v14;
  v72 = &off_100084220;
  v70[0] = v15;
  sub_1000060F4(v70, v14);
  v19 = sub_10003F584();
  KeyPath = swift_getKeyPath(&unk_1000680D0);
  v21 = swift_getKeyPath(&unk_1000680F8);
  static Published.subscript.getter(&v67, v19, KeyPath, v21);
  swift_release(v19);
  swift_release(KeyPath);
  swift_release(v21);
  v22 = v67;
  swift_bridgeObjectRetain(v67);
  v24 = sub_10000D04C(v23);
  swift_bridgeObjectRelease(v22);
  v25 = sub_100041530((uint64_t)v24);
  swift_bridgeObjectRelease(v24);
  sub_100024740(v25);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v25);
  sub_100008380((uint64_t)v70, (uint64_t)&v67);
  sub_100040CFC((uint64_t)&v67, (uint64_t)v66);
  swift_beginAccess(v1 + 96, v65, 33, 0);
  sub_10003FE24((uint64_t)v66, v1 + 96);
  swift_endAccess(v65);
  *(_QWORD *)&v67 = *(_QWORD *)(*sub_1000060F4(v70, v71) + 24);
  v26 = sub_1000057A4(&qword_100092090, &qword_100092088, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v27 = Publisher.eraseToAnyPublisher()(v16, v26);
  *(_QWORD *)&v67 = v27;
  v28 = sub_100004D20(&qword_100092098);
  v29 = sub_1000057A4(&qword_1000920A0, &qword_100092098, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v30 = sub_1000057A4(&qword_1000920A8, &qword_1000920B0, (uint64_t)&protocol conformance descriptor for Set<A>);
  Publisher<>.removeDuplicates()(v28, v29, v30);
  swift_release(v27);
  sub_100008380(v1 + 56, (uint64_t)&v67);
  v31 = swift_allocObject(&unk_100085380, 56, 7);
  sub_1000084DC(&v67, v31 + 16);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v3);
  v32 = v61;
  v33 = (uint64_t (**)(uint64_t))&v8[*(int *)(v61 + 76)];
  *v33 = sub_100040D68;
  v33[1] = (uint64_t (*)(uint64_t))v31;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v34 = swift_allocObject(&unk_1000853A8, 24, 7);
  swift_weakInit(v34 + 16, v1);
  v35 = sub_1000057A4(&qword_1000920B8, &qword_100092080, (uint64_t)&unk_100065758);
  v36 = Publisher<>.sink(receiveValue:)(sub_100040DEC, v34, v32, v35);
  swift_release(v34);
  sub_1000187D0((uint64_t)v8, &qword_100092080);
  v37 = v1 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager_subscriptions;
  swift_beginAccess(v1 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager_subscriptions, &v67, 33, 0);
  v38 = sub_100004D20((uint64_t *)&unk_100093280);
  v39 = sub_1000057A4(&qword_10008FE58, (uint64_t *)&unk_100093280, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v37, v38, v39);
  swift_endAccess(&v67);
  swift_release(v36);
  v40 = sub_10003F6DC();
  v41 = v40;
  v42 = *(_QWORD *)(v40 + 16);
  if (v42)
  {
    v66[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v42);
    v43 = v41 + 32;
    do
    {
      sub_100008380(v43, (uint64_t)&v67);
      v44 = v68;
      v45 = v69;
      sub_1000060F4(&v67, v68);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45);
      v47 = sub_100004D60(&v67);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v47);
      v48 = *(_QWORD *)(v66[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v48);
      v49 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v46);
      specialized ContiguousArray._endMutation()(v49);
      v43 += 40;
      --v42;
    }
    while (v42);
    v50 = (_QWORD *)v66[0];
    swift_bridgeObjectRelease(v41);
  }
  else
  {
    swift_bridgeObjectRelease(v40);
    v50 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)&v67 = v50;
  v51 = sub_100004D20(&qword_100090B98);
  v52 = sub_100004D20(&qword_10008F308);
  v53 = sub_1000057A4(&qword_100090BA0, &qword_100090B98, (uint64_t)&protocol conformance descriptor for Publishers.AEACombineLatestMany<A>);
  v54 = v62;
  Publisher.map<A>(_:)(sub_100020054, 0, v51, v52, v53);
  swift_bridgeObjectRelease(v50);
  v55 = swift_allocObject(&unk_1000853A8, 24, 7);
  swift_weakInit(v55 + 16, v1);
  v56 = sub_1000057A4(&qword_100090BA8, &qword_100090B58, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v57 = v64;
  v58 = Publisher<>.sink(receiveValue:)(sub_100040DF4, v55, v64, v56);
  swift_release(v55);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v54, v57);
  swift_beginAccess(v37, &v67, 33, 0);
  AnyCancellable.store<A>(in:)(v37, v38, v39);
  swift_endAccess(&v67);
  swift_release(v58);
  return sub_100004D60(v70);
}

uint64_t sub_10003EF2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_100068040);
    v7 = swift_getKeyPath(&unk_100068068);
    v8 = v2;
    swift_bridgeObjectRetain(v2);
    return static Published.subscript.setter(&v8, v5, KeyPath, v7);
  }
  return result;
}

uint64_t sub_10003EFC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    swift_bridgeObjectRetain(v2);
    sub_100021624(v6);
    KeyPath = swift_getKeyPath(&unk_100068088);
    v8 = swift_getKeyPath(&unk_1000680B0);
    v9 = v2;
    return static Published.subscript.setter(&v9, v5, KeyPath, v8);
  }
  return result;
}

uint64_t sub_10003F054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v26[5];
  _BYTE v27[24];
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v1 = v0;
  v2 = sub_100004D20(&qword_100093970);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)v26 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)v26 - v9;
  if (qword_10008E5F0 != -1)
    swift_once(&qword_10008E5F0, sub_1000155B4);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10000B164(v11, (uint64_t)qword_100093E48);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Suspending participant matching", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  swift_beginAccess(v1 + 96, v27, 0, 0);
  sub_10003FDE0(v1 + 96, (uint64_t)&v28, &qword_100092070);
  if (*((_QWORD *)&v29 + 1))
  {
    sub_100008380((uint64_t)&v28, (uint64_t)v26);
    sub_1000187D0((uint64_t)&v28, &qword_100092070);
    sub_1000060F4(v26, v26[3]);
    sub_100025498();
    sub_100004D60(v26);
  }
  else
  {
    sub_1000187D0((uint64_t)&v28, &qword_100092070);
  }
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  swift_beginAccess(v1 + 96, v26, 33, 0);
  sub_10003FE24((uint64_t)&v28, v1 + 96);
  swift_endAccess(v26);
  swift_beginAccess(v1 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager_subscriptions, &v28, 33, 0);
  sub_100051D40();
  swift_endAccess(&v28);
  KeyPath = swift_getKeyPath(&unk_100068040);
  v17 = swift_getKeyPath(&unk_100068068);
  *(_QWORD *)&v28 = &_swiftEmptySetSingleton;
  swift_retain(v1);
  static Published.subscript.setter(&v28, v1, KeyPath, v17);
  sub_100021624((uint64_t)&_swiftEmptySetSingleton);
  v18 = swift_getKeyPath(&unk_100068088);
  v19 = swift_getKeyPath(&unk_1000680B0);
  *(_QWORD *)&v28 = &_swiftEmptySetSingleton;
  swift_retain(v1);
  static Published.subscript.setter(&v28, v1, v18, v19);
  v20 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 1, 1, v20);
  v21 = sub_10003F3E4();
  sub_10003FDE0((uint64_t)v10, (uint64_t)v8, &qword_100093970);
  v22 = swift_getKeyPath(&unk_100067FF8);
  v23 = swift_getKeyPath(&unk_100068020);
  sub_10003FDE0((uint64_t)v8, (uint64_t)v5, &qword_100093970);
  swift_retain(v21);
  static Published.subscript.setter(v5, v21, v22, v23);
  sub_1000187D0((uint64_t)v8, &qword_100093970);
  swift_release(v21);
  sub_1000187D0((uint64_t)v10, &qword_100093970);
  v24 = sub_100058D08((uint64_t)_swiftEmptyArrayStorage);
  return sub_10003E664(v24);
}

uint64_t sub_10003F3E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = sub_100004D20(&qword_100090B48);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004D20(&qword_100093970);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  v11 = OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___mainParticipantSource;
  v12 = *(_QWORD *)(v0
                  + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___mainParticipantSource);
  if (v12)
  {
    v13 = *(_QWORD *)(v0
                    + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___mainParticipantSource);
  }
  else
  {
    v14 = type metadata accessor for AEAMainParticipantSource(0);
    v13 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v19 = v13 + OBJC_IVAR____TtC15assessmentagent24AEAMainParticipantSource__mainParticipant;
    v15 = type metadata accessor for AEAParticipant(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
    sub_10003FDE0((uint64_t)v10, (uint64_t)v8, &qword_100093970);
    Published.init(initialValue:)(v8, v5);
    sub_1000187D0((uint64_t)v10, &qword_100093970);
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v19, v4, v1);
    v16 = *(_QWORD *)(v0 + v11);
    *(_QWORD *)(v0 + v11) = v13;
    swift_retain(v13);
    swift_release(v16);
    v12 = 0;
  }
  swift_retain(v12);
  return v13;
}

uint64_t sub_10003F584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[3];

  v1 = v0;
  v2 = sub_100004D20(&qword_10008F2F0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___configurationParticipantSource;
  v7 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___configurationParticipantSource);
  if (v7)
  {
    v8 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___configurationParticipantSource);
  }
  else
  {
    swift_beginAccess(v0 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager__candidateProcesses, v15, 33, 0);
    v9 = sub_100004D20(&qword_100090B38);
    Published.projectedValue.getter(v9);
    swift_endAccess(v15);
    v10 = type metadata accessor for AEAConfigurationParticipantSource(0);
    v8 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v15[0] = _swiftEmptyDictionarySingleton;
    v11 = sub_100004D20(&qword_100090B40);
    Published.init(initialValue:)(v15, v11);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + OBJC_IVAR____TtC15assessmentagent33AEAConfigurationParticipantSource_candidateProcesses, v5, v2);
    v12 = *(_QWORD *)(v1 + v6);
    *(_QWORD *)(v1 + v6) = v8;
    swift_retain(v8);
    swift_release(v12);
    v7 = 0;
  }
  swift_retain(v7);
  return v8;
}

uint64_t sub_10003F6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___participantSources;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___participantSources);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___participantSources);
  }
  else
  {
    v4 = sub_100004D20(&qword_100090B30);
    v3 = swift_allocObject(v4, 112, 7);
    *(_OWORD *)(v3 + 16) = xmmword_100067F50;
    v5 = sub_10003F3E4();
    *(_QWORD *)(v3 + 56) = type metadata accessor for AEAMainParticipantSource(0);
    *(_QWORD *)(v3 + 64) = &off_1000853D8;
    *(_QWORD *)(v3 + 32) = v5;
    v6 = sub_10003F584();
    *(_QWORD *)(v3 + 96) = type metadata accessor for AEAConfigurationParticipantSource(0);
    *(_QWORD *)(v3 + 104) = &off_1000851C8;
    *(_QWORD *)(v3 + 72) = v6;
    v7 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v7);
    v2 = 0;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_10003F7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100004D60((_QWORD *)(v0 + 16));
  sub_100004D60((_QWORD *)(v0 + 56));
  sub_1000187D0(v0 + 96, &qword_100092070);
  v1 = v0 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager__candidateProcesses;
  v2 = sub_100004D20(&qword_100090B38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager__participants;
  v4 = sub_100004D20(&qword_100090B18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager_subscriptions));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___mainParticipantSource));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___configurationParticipantSource));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___participantSources));
  return v0;
}

uint64_t sub_10003F874()
{
  uint64_t v0;

  sub_10003F7A0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10003F898()
{
  return type metadata accessor for AEAiOSParticipantManager(0);
}

uint64_t type metadata accessor for AEAiOSParticipantManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100091E88;
  if (!qword_100091E88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAiOSParticipantManager);
  return result;
}

void sub_10003F8DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v6[0] = "(";
  v6[1] = "(";
  v6[2] = &unk_100067FB8;
  sub_100020E5C(319, &qword_1000908F8, (uint64_t *)&unk_10008F250);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_100020E5C(319, (unint64_t *)&unk_100090900, &qword_10008F308);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[6] = &unk_100067FD0;
      v6[7] = &unk_100067FD0;
      v6[8] = &unk_100067FD0;
      swift_updateClassMetadata2(a1, 256, 9, v6, a1 + 80);
    }
  }
}

uint64_t sub_10003F9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = sub_100004D20(&qword_100090B08);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_100004D20(&qword_100090B10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager__participants, v16, 33, 0);
  v9 = sub_100004D20(&qword_100090B18);
  Published.projectedValue.getter(v9);
  swift_endAccess(v16);
  v10 = sub_1000057A4(&qword_100090B20, &qword_100090B08, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v11 = sub_1000057A4(&qword_10008F300, &qword_10008F308, (uint64_t)&protocol conformance descriptor for Set<A>);
  Publisher<>.removeDuplicates()(v1, v10, v11);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  v12 = sub_1000057A4(&qword_100090B28, &qword_100090B10, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v13 = Publisher.eraseToAnyPublisher()(v5, v12);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  return v13;
}

uint64_t sub_10003FB50@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;

  v2 = sub_10003F3E4();
  KeyPath = swift_getKeyPath(&unk_100067FF8);
  v4 = swift_getKeyPath(&unk_100068020);
  static Published.subscript.getter(a1, v2, KeyPath, v4);
  swift_release(v2);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_10003FBC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v2 = sub_100004D20(&qword_100093970);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v12 - v6;
  v8 = sub_10003F3E4();
  sub_10003FDE0(a1, (uint64_t)v7, &qword_100093970);
  KeyPath = swift_getKeyPath(&unk_100067FF8);
  v10 = swift_getKeyPath(&unk_100068020);
  sub_10003FDE0((uint64_t)v7, (uint64_t)v5, &qword_100093970);
  swift_retain(v8);
  static Published.subscript.setter(v5, v8, KeyPath, v10);
  sub_1000187D0((uint64_t)v7, &qword_100093970);
  swift_release(v8);
  return sub_1000187D0(a1, &qword_100093970);
}

uint64_t sub_10003FCE4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100068040);
  v5 = swift_getKeyPath(&unk_100068068);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10003FD5C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  swift_bridgeObjectRetain(*a1);
  sub_100021624(v4);
  KeyPath = swift_getKeyPath(&unk_100068088);
  v6 = swift_getKeyPath(&unk_1000680B0);
  v8 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

uint64_t sub_10003FDE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004D20(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003FE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100092070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003FE6C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000212AC(a1, (uint64_t)&unk_100068040, (uint64_t)&unk_100068068, a2);
}

uint64_t sub_10003FE94(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10003FF6C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10003FEB0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000400D4(a1, a2, a3, *v3, &qword_1000920D0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10003FEDC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000400D4(a1, a2, a3, *v3, &qword_1000920C8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10003FF08(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100040240(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10003FF24(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100040420(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10003FF40(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000405A0(a1, a2, a3, (_QWORD *)*v3, &qword_1000920D8, &qword_1000920E0);
  *v3 = result;
  return result;
}

uint64_t sub_10003FF6C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004D20(&qword_100093360);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000400D4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100004D20(a5);
    v12 = (char *)swift_allocObject(v11, 16 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v9])
      memmove(v15, v16, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v9] || v15 >= &v16[16 * v9])
  {
    swift_arrayInitWithCopy(v15);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100040240(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100004D20(&qword_100090CC0);
  v11 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100040420(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004D20(&qword_1000920C0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004058C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000405A0(a1, a2, a3, a4, &qword_100091C88, &qword_100091C90);
}

uint64_t sub_1000405A0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100004D20(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 56 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 56);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 56 * v11)
      memmove(v14 + 4, a4 + 4, 56 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 56 * v11 || v16 >= v17 + 56 * v11)
  {
    sub_100004D20(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004074C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for AEAParticipant(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v30 - v14;
  v35 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 24);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_100018848(*(_QWORD *)(v35 + 48) + v29 * v25, (uint64_t)v12);
    sub_100023A48((uint64_t)v12, (uint64_t)v15);
    result = sub_100023A48((uint64_t)v15, a2);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v17 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v17 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1000409D4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  v28 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = *(_QWORD *)(a4 + 48) + 40 * v15;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v23 = *(_QWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    LOBYTE(v19) = *(_BYTE *)(v19 + 32);
    v24 = *(_QWORD *)(a4 + 56) + 16 * v15;
    v25 = *(_BYTE *)v24;
    v26 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)v10 = v20;
    *(_QWORD *)(v10 + 8) = v21;
    *(_QWORD *)(v10 + 16) = v23;
    *(_QWORD *)(v10 + 24) = v22;
    *(_BYTE *)(v10 + 32) = v19;
    *(_BYTE *)(v10 + 40) = v25;
    *(_QWORD *)(v10 + 48) = v26;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v10 += 56;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    result = (_QWORD *)swift_bridgeObjectRetain(v21);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v27;
      result = v28;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100040C1C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100040CCC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000212AC(a1, (uint64_t)&unk_100068088, (uint64_t)&unk_1000680B0, a2);
}

uint64_t sub_100040CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100092070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040D44()
{
  uint64_t v0;

  sub_100004D60((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100040D68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v1[5];
  v4 = v1[6];
  sub_1000060F4(v1 + 2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v2, v3, v4);
}

uint64_t sub_100040DC8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100040DEC(uint64_t *a1)
{
  uint64_t v1;

  return sub_10003EF2C(a1, v1);
}

uint64_t sub_100040DF4(uint64_t *a1)
{
  uint64_t v1;

  return sub_10003EFC0(a1, v1);
}

uint64_t sub_100040DFC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100068150);
  v4 = swift_getKeyPath(&unk_100068178);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_100040E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];

  v1 = sub_100004D20(&qword_1000921E0);
  v28 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004D20(&qword_1000921E8);
  v29 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004D20(&qword_1000921F0);
  v30 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004D20(&qword_1000921F8);
  v32 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100004D20(&qword_100092200);
  v33 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v0 + OBJC_IVAR____TtC15assessmentagent24AEAMainParticipantSource__mainParticipant, v34, 33, 0);
  v15 = sub_100004D20(&qword_100090B48);
  Published.projectedValue.getter(v15);
  swift_endAccess(v34);
  v16 = sub_1000057A4(&qword_100092208, &qword_1000921E0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v17 = sub_1000414BC();
  Publisher<>.removeDuplicates()(v1, v16, v17);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v3, v1);
  v18 = sub_100004D20(&qword_100093970);
  v19 = sub_1000057A4(&qword_100092218, &qword_1000921E8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  Publisher.map<A>(_:)(sub_10001E090, 0, v4, v18, v19);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v4);
  v20 = sub_100004D20(&qword_10008F308);
  Publishers.Map.map<A>(_:)(sub_1000411C4, 0, v7, v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v7);
  v21 = sub_1000057A4(&qword_100092220, &qword_1000921F8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v22 = sub_1000057A4(&qword_10008F300, &qword_10008F308, (uint64_t)&protocol conformance descriptor for Set<A>);
  Publisher<>.removeDuplicates()(v10, v21, v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v10);
  v23 = sub_1000057A4(&qword_100092228, &qword_100092200, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v24 = v31;
  v25 = Publisher.eraseToAnyPublisher()(v31, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v24);
  return v25;
}

uint64_t sub_1000411C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_100004D20(&qword_100093970);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AEAParticipant(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E174(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100029144((uint64_t)v6);
    result = sub_1000415C4((uint64_t)_swiftEmptyArrayStorage);
    v12 = result;
  }
  else
  {
    sub_100023A48((uint64_t)v6, (uint64_t)v10);
    v13 = sub_100004D20(&qword_100092230);
    v14 = *(unsigned __int8 *)(v8 + 80);
    v15 = (v14 + 32) & ~v14;
    v16 = swift_allocObject(v13, v15 + *(_QWORD *)(v8 + 72), v14 | 7);
    *(_OWORD *)(v16 + 16) = xmmword_100065EB0;
    v17 = v16 + v15;
    sub_100018848((uint64_t)v10, v16 + v15);
    v12 = sub_1000415C4(v16);
    swift_setDeallocating(v16);
    swift_arrayDestroy(v17, 1, v7);
    swift_deallocClassInstance(v16, 32, 7);
    result = sub_10001888C((uint64_t)v10);
  }
  *a2 = v12;
  return result;
}

uint64_t sub_100041340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15assessmentagent24AEAMainParticipantSource__mainParticipant;
  v2 = sub_100004D20(&qword_100090B48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100041394()
{
  return type metadata accessor for AEAMainParticipantSource(0);
}

uint64_t type metadata accessor for AEAMainParticipantSource(uint64_t a1)
{
  uint64_t result;

  result = qword_100092118;
  if (!qword_100092118)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAMainParticipantSource);
  return result;
}

void sub_1000413D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100041444(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_100041444(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100092128)
  {
    v2 = sub_100005520(&qword_100093970);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100092128);
  }
}

uint64_t sub_10004149C()
{
  return sub_100040E60();
}

unint64_t sub_1000414BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092210;
  if (!qword_100092210)
  {
    v1 = sub_100005520(&qword_100093970);
    sub_1000416C4(&qword_100090288, (uint64_t)&unk_1000664E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100092210);
  }
  return result;
}

uint64_t sub_100041530(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100032890(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000415C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for AEAParticipant(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (char *)&v14 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = sub_1000416C4((unint64_t *)&qword_100090B50, (uint64_t)&unk_100066570);
  result = Set.init(minimumCapacity:)(v9, v2, v10);
  v15 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_100018848(v12, (uint64_t)v6);
      sub_100032A3C((uint64_t)v8, v6);
      sub_10001888C((uint64_t)v8);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v15;
  }
  return result;
}

uint64_t sub_1000416C4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AEAParticipant(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004170C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void (*v29)(_QWORD);
  id v30;
  id v31;
  uint64_t v33;
  void (*v34)(_QWORD);
  uint64_t v35;
  _QWORD v36[3];
  _BYTE v37[8];
  uint64_t v38;

  v34 = a4;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v17 = qword_100093EB8;
  *v16 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_10008E5E0, sub_10001552C);
    goto LABEL_6;
  }
  if (!a2)
  {
    sub_1000425FC();
    v28 = (_QWORD *)swift_allocObject(&unk_1000855A8, 56, 7);
    v28[2] = a3;
    v28[3] = a1;
    v29 = v34;
    v28[4] = a7;
    v28[5] = v29;
    v28[6] = a5;
    v30 = a1;
    v31 = a7;
    swift_retain(a5);
    swift_retain(a3);
    sub_100046420(a6, (uint64_t)sub_100044160, (uint64_t)v28);
    return swift_release(v28);
  }
  *(_BYTE *)(a3 + 136) = 0;
  swift_errorRetain(a2);
  if (qword_10008E5E0 != -1)
    goto LABEL_12;
LABEL_6:
  v19 = type metadata accessor for Logger(0);
  sub_10000B164(v19, (uint64_t)qword_100093E18);
  swift_errorRetain(a2);
  v20 = swift_errorRetain(a2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v38 = v24;
    *(_DWORD *)v23 = 136446210;
    swift_getErrorValue(a2, v37, v36);
    v25 = sub_10004CCD0(v36[1], v36[2]);
    v27 = v26;
    v35 = sub_100059C74(v25, v26, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v27);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "An error occured while beginning the session. Error: %{public}s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  swift_errorRetain(a2);
  v34(a2);
  swift_errorRelease(a2);
  return swift_errorRelease(a2);
}

uint64_t sub_100041A38(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  _QWORD v36[2];
  void *v37;
  uint64_t v38;
  _QWORD v39[3];
  char v40[8];
  uint64_t aBlock[5];
  uint64_t v42;

  v37 = a4;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (_QWORD *)((char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v15 = (void *)qword_100093EB8;
  *v14 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_10008E5E0, sub_10001552C);
    goto LABEL_6;
  }
  *(_BYTE *)(a2 + 136) = 0;
  if (!a1)
    goto LABEL_9;
  v36[1] = a6;
  swift_errorRetain(a1);
  if (qword_10008E5E0 != -1)
    goto LABEL_13;
LABEL_6:
  v18 = type metadata accessor for Logger(0);
  sub_10000B164(v18, (uint64_t)qword_100093E18);
  swift_errorRetain(a1);
  v19 = swift_errorRetain(a1);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    aBlock[0] = v23;
    v36[0] = a5;
    *(_DWORD *)v22 = 136446210;
    swift_getErrorValue(a1, v40, v39);
    v24 = sub_10004CCD0(v39[1], v39[2]);
    v26 = v25;
    v38 = sub_100059C74(v24, v25, aBlock);
    a5 = (uint64_t (*)(uint64_t))v36[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v26);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "An error occured while beginning the session. Error: %{public}s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    swift_errorRelease(a1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
LABEL_9:
  if (a3)
  {
    v27 = swift_allocObject(&unk_1000855D0, 24, 7);
    swift_weakInit(v27 + 16, a2);
    v28 = swift_allocObject(&unk_1000855F8, 32, 7);
    v29 = v37;
    *(_QWORD *)(v28 + 16) = v27;
    *(_QWORD *)(v28 + 24) = v29;
    aBlock[4] = (uint64_t)sub_1000441C0;
    v42 = v28;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100041EBC;
    aBlock[3] = (uint64_t)&unk_100085610;
    v30 = _Block_copy(aBlock);
    v31 = v42;
    v32 = v29;
    swift_release(v31);
    objc_msgSend(a3, "setInvalidationHandler:", v30);
    _Block_release(v30);
  }
  v33 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = a3;
  v34 = a3;
  swift_unknownObjectRelease(v33);
  return a5(a1);
}

void sub_100041DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD aBlock[6];
  _BYTE v13[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(Strong + 176);
    *(_QWORD *)(Strong + 176) = a1;
    swift_errorRetain(a1);
    swift_errorRelease(v8);
    swift_release(v7);
  }
  v9 = *(void **)(a3 + OBJC_IVAR____TtC15assessmentagent19AEAClientConnection_lifecycleEventHandlingProxy);
  v10 = (void *)_convertErrorToNSError(_:)(a1);
  aBlock[4] = sub_100009530;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018BB8;
  aBlock[3] = &unk_100085638;
  v11 = _Block_copy(aBlock);
  objc_msgSend(v9, "handleEventDidInvalidateWithError:completion:", v10, v11);
  _Block_release(v11);

}

void sub_100041EBC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_100041F0C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_100041F80(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD v23[3];
  _BYTE v24[8];
  uint64_t v25;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v10 = qword_100093EB8;
  *v9 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_10008E5E0, sub_10001552C);
    goto LABEL_6;
  }
  *(_BYTE *)(a2 + 136) = 0;
  if (!a1)
    return a3(a1);
  swift_errorRetain(a1);
  if (qword_10008E5E0 != -1)
    goto LABEL_11;
LABEL_6:
  v12 = type metadata accessor for Logger(0);
  sub_10000B164(v12, (uint64_t)qword_100093E18);
  swift_errorRetain(a1);
  v13 = swift_errorRetain(a1);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v25 = v17;
    *(_DWORD *)v16 = 136446210;
    swift_getErrorValue(a1, v24, v23);
    v18 = sub_10004CCD0(v23[1], v23[2]);
    v20 = v19;
    v22 = sub_100059C74(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "An error occured while updating the session. Error: %{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(a1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
  return a3(a1);
}

uint64_t sub_10004222C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t (*v43)(_QWORD);
  uint64_t v44;
  _QWORD v45[3];
  char v46[8];
  _BYTE v47[24];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[3];

  v8 = sub_100004D20(&qword_100091DF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v15 = (void *)qword_100093EB8;
  *v14 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_10008E5E0, sub_10001552C);
    goto LABEL_6;
  }
  if (!a1)
    goto LABEL_9;
  v44 = a4;
  swift_errorRetain(a1);
  if (qword_10008E5E0 != -1)
    goto LABEL_11;
LABEL_6:
  v18 = type metadata accessor for Logger(0);
  sub_10000B164(v18, (uint64_t)qword_100093E18);
  swift_errorRetain(a1);
  v19 = swift_errorRetain(a1);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v43 = a3;
    v24 = v23;
    v50[0] = v23;
    *(_DWORD *)v22 = 136446210;
    swift_getErrorValue(a1, v46, v45);
    v25 = sub_10004CCD0(v45[1], v45[2]);
    v27 = v26;
    v48 = sub_100059C74(v25, v26, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v27);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "An error occured while ending the session. Error: %{public}s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v28 = v24;
    a3 = v43;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    swift_errorRelease(a1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
LABEL_9:
  v29 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  swift_unknownObjectRelease(v29);
  *(_BYTE *)(a2 + 136) = 0;
  v30 = *(_QWORD *)(a2 + 144);
  v31 = *(_QWORD *)(a2 + 152);
  v32 = *(_QWORD *)(a2 + 160);
  v33 = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  sub_1000433F8(v30, v31, v32, v33);
  v34 = *(_QWORD *)(a2 + 64);
  ObjectType = swift_getObjectType(*(_QWORD *)(a2 + 56));
  (*(void (**)(uint64_t, uint64_t))(v34 + 72))(ObjectType, v34);
  v36 = *(_QWORD **)(a2 + 112);
  swift_beginAccess(v36 + 3, v50, 1, 0);
  v37 = v36[3];
  v36[3] = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v37);
  swift_beginAccess(v36 + 4, &v48, 1, 0);
  v38 = v36[4];
  v36[4] = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v38);
  v39 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v10, 1, 1, v39);
  v40 = (uint64_t)v36 + *(_QWORD *)(*v36 + 112);
  swift_beginAccess(v40, v47, 33, 0);
  sub_100043630((uint64_t)v10, v40);
  swift_endAccess(v47);
  return a3(a1);
}

uint64_t sub_1000425FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;

  v1 = sub_100004D20(&qword_100091B00);
  __chkstk_darwin(v1);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100042F20();
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    if (qword_10008E6C8 != -1)
      swift_once(&qword_10008E6C8, sub_10005BA04);
    v8 = qword_100093FF8;
    v9 = unk_100094000;
    v10 = sub_100004D20(&qword_100091100);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100065EB0;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_100029184();
    *(_QWORD *)(v11 + 32) = v6;
    *(_QWORD *)(v11 + 40) = v7;
    v12 = String.init(format:_:)(v8, v9, v11);
    v14 = v13;
    v15 = *(_QWORD *)(v0 + 144);
    if (!v15)
      return swift_bridgeObjectRelease(v14);
  }
  else
  {
    if (qword_10008E6D0 != -1)
      swift_once(&qword_10008E6D0, sub_10005BB08);
    v12 = qword_100094008;
    v14 = unk_100094010;
    swift_bridgeObjectRetain(unk_100094010);
    v15 = *(_QWORD *)(v0 + 144);
    if (!v15)
      return swift_bridgeObjectRelease(v14);
  }
  if ((*(_BYTE *)(v0 + 120) & 1) != 0)
  {
    v16 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 168);
    v19 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v3, 1, 1, v19);
    type metadata accessor for MainActor(0);
    sub_100043310(v15, v16, v17, v18);
    sub_100043310(v15, v16, v17, v18);
    swift_bridgeObjectRetain(v14);
    v21 = static MainActor.shared.getter(v20);
    v22 = (_QWORD *)swift_allocObject(&unk_100085428, 88, 7);
    v22[2] = v21;
    v22[3] = &protocol witness table for MainActor;
    v22[4] = v15;
    v22[5] = v16;
    v22[6] = v17;
    v22[7] = v18;
    v22[8] = v12;
    v22[9] = v14;
    v22[10] = 0x4008000000000000;
    v23 = sub_100052094((uint64_t)v3, (uint64_t)&unk_1000923D0, (uint64_t)v22);
    sub_1000433F8(v15, v16, v17, v18);
    swift_bridgeObjectRelease(v14);
    return swift_release(v23);
  }
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_10004285C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t ErrorValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41[8];

  v1 = v0;
  v2 = sub_100004D20(&qword_100091B00);
  __chkstk_darwin(v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 176);
  if (v5)
  {
    ErrorValue = swift_getErrorValue(v5, v41, &v38);
    v7 = v39;
    v8 = v40;
    v9 = *(_QWORD *)(v39 - 8);
    __chkstk_darwin(ErrorValue);
    v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    sub_10003230C(sub_1000431F4, 0, v7, v8);
    LOBYTE(v8) = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    if ((v8 & 1) != 0)
    {
      v13 = sub_100042F20();
      if (v14)
      {
        v15 = v13;
        v16 = v14;
        if (qword_10008E6E8 != -1)
          swift_once(&qword_10008E6E8, sub_10005BE14);
        v17 = &qword_100094038;
        goto LABEL_11;
      }
      if (qword_10008E6F0 != -1)
        swift_once(&qword_10008E6F0, sub_10005BF18);
      v28 = &qword_100094048;
LABEL_19:
      v24 = *v28;
      v26 = v28[1];
      swift_bridgeObjectRetain(v26);
      v27 = *(_QWORD *)(v1 + 144);
      if (!v27)
        return swift_bridgeObjectRelease(v26);
      goto LABEL_20;
    }
  }
  v18 = sub_100042F20();
  if (!v19)
  {
    if (qword_10008E6E0 != -1)
      swift_once(&qword_10008E6E0, sub_10005BD10);
    v28 = &qword_100094028;
    goto LABEL_19;
  }
  v15 = v18;
  v16 = v19;
  if (qword_10008E6D8 != -1)
    swift_once(&qword_10008E6D8, sub_10005BC0C);
  v17 = &qword_100094018;
LABEL_11:
  v20 = *v17;
  v21 = v17[1];
  v22 = sub_100004D20(&qword_100091100);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100065EB0;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = sub_100029184();
  *(_QWORD *)(v23 + 32) = v15;
  *(_QWORD *)(v23 + 40) = v16;
  v24 = String.init(format:_:)(v20, v21, v23);
  v26 = v25;
  v27 = *(_QWORD *)(v1 + 144);
  if (!v27)
    return swift_bridgeObjectRelease(v26);
LABEL_20:
  if ((*(_BYTE *)(v1 + 120) & 1) != 0)
  {
    v29 = *(_QWORD *)(v1 + 152);
    v30 = *(_QWORD *)(v1 + 160);
    v31 = *(_QWORD *)(v1 + 168);
    v32 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v4, 1, 1, v32);
    type metadata accessor for MainActor(0);
    sub_100043310(v27, v29, v30, v31);
    sub_100043310(v27, v29, v30, v31);
    swift_bridgeObjectRetain(v26);
    v34 = static MainActor.shared.getter(v33);
    v35 = (_QWORD *)swift_allocObject(&unk_100085400, 88, 7);
    v35[2] = v34;
    v35[3] = &protocol witness table for MainActor;
    v35[4] = v27;
    v35[5] = v29;
    v35[6] = v30;
    v35[7] = v31;
    v35[8] = v24;
    v35[9] = v26;
    v35[10] = 0x4000CCCCCCCCCCCDLL;
    v36 = sub_100052094((uint64_t)v4, (uint64_t)&unk_1000923C8, (uint64_t)v35);
    sub_1000433F8(v27, v29, v30, v31);
    swift_bridgeObjectRelease(v26);
    return swift_release(v36);
  }
  return swift_bridgeObjectRelease(v26);
}

uint64_t sub_100042BCC(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, double);
  uint64_t v17;

  v13 = type metadata accessor for MainActor(0);
  v9[7] = v13;
  v9[8] = static MainActor.shared.getter(v13);
  v16 = (uint64_t (*)(uint64_t, uint64_t, double))((char *)a7 + *a7);
  v14 = (_QWORD *)swift_task_alloc(a7[1]);
  v9[9] = v14;
  *v14 = v9;
  v14[1] = sub_100042C70;
  return v16(a9, v17, a1);
}

uint64_t sub_100042C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_100042D28;
  else
    v6 = sub_100042CF8;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_100042CF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  swift_release(*(_QWORD *)(v0 + 64));
  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  sub_10000B164(v2, (uint64_t)qword_100093E18);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = sub_10004CCD0(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v12 = v11;
    *(_QWORD *)(v0 + 48) = sub_100059C74(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to present banner with error: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  _BYTE v17[16];

  v1 = sub_100004D20(&qword_100093970);
  __chkstk_darwin(v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for AEAParticipant(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(v0 + 64);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100029144((uint64_t)v3);
    return 0;
  }
  else
  {
    sub_10003BB2C((uint64_t)v3, (uint64_t)v7, type metadata accessor for AEAParticipant);
    v10 = *((_QWORD *)v7 + 1);
    v11 = *((_QWORD *)v7 + 2);
    v12 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain_n(v11, 2);
    v14 = sub_100043238(v10, v11, 0);
    v15 = objc_msgSend(v14, "localizedName");

    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    sub_10002F554((uint64_t)v7, type metadata accessor for AEAParticipant);
    swift_bridgeObjectRelease(v11);
  }
  return v13;
}

uint64_t sub_1000430E0()
{
  _QWORD *v0;

  sub_100004D60(v0 + 2);
  swift_unknownObjectRelease(v0[7]);
  sub_100004D60(v0 + 9);
  swift_release(v0[14]);
  swift_unknownObjectRelease(v0[16]);
  sub_1000433F8(v0[18], v0[19], v0[20], v0[21]);
  swift_errorRelease(v0[22]);
  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t type metadata accessor for AEAAssessmentSessionManager()
{
  return objc_opt_self(_TtC15assessmentagent27AEAAssessmentSessionManager);
}

uint64_t sub_10004315C()
{
  _BYTE *v0;
  uint64_t *v1;
  uint64_t v2;

  if ((*v0 & 1) != 0)
  {
    if (qword_10008E648 != -1)
      swift_once(&qword_10008E648, sub_1000317F0);
    v1 = &qword_100093F10;
  }
  else
  {
    if (qword_10008E640 != -1)
      swift_once(&qword_10008E640, sub_1000316E4);
    v1 = &qword_100093F00;
  }
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1000431F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  swift_errorRetain(a1);
  v1 = sub_100004D20(&qword_100090790);
  return swift_dynamicCast(v1, &v3, v1, &type metadata for AEAExpirationActionError, 6);
}

id sub_100043238(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

uint64_t sub_100043310(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_retain(a2);
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_100043344(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  _QWORD *v11;
  uint64_t v13;

  v4 = *((_QWORD *)v1 + 3);
  v13 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 4);
  v6 = *((_QWORD *)v1 + 5);
  v7 = (int *)*((_QWORD *)v1 + 6);
  v8 = *((_QWORD *)v1 + 7);
  v9 = *((_QWORD *)v1 + 8);
  v10 = v1[10];
  v11 = (_QWORD *)swift_task_alloc(dword_1000923C4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100014AC4;
  return sub_100042BCC(v10, a1, v13, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000433F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_release(a2);
    return swift_release(a4);
  }
  return result;
}

uint64_t sub_10004342C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100043468(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  _QWORD *v11;
  uint64_t v13;

  v4 = *((_QWORD *)v1 + 3);
  v13 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 4);
  v6 = *((_QWORD *)v1 + 5);
  v7 = (int *)*((_QWORD *)v1 + 6);
  v8 = *((_QWORD *)v1 + 7);
  v9 = *((_QWORD *)v1 + 8);
  v10 = v1[10];
  v11 = (_QWORD *)swift_task_alloc(dword_1000923C4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10000CB20;
  return sub_100042BCC(v10, a1, v13, v4, v5, v6, v7, v8, v9);
}

uint64_t storeEnumTagSinglePayload for AEAAssessmentSessionManager.SessionManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100043568 + 4 * byte_1000681C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004359C + 4 * asc_1000681C0[v4]))();
}

uint64_t sub_10004359C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000435A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000435ACLL);
  return result;
}

uint64_t sub_1000435B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000435C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000435C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000435CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AEAAssessmentSessionManager.SessionManagerError()
{
  return &type metadata for AEAAssessmentSessionManager.SessionManagerError;
}

unint64_t sub_1000435EC()
{
  unint64_t result;

  result = qword_1000923D8;
  if (!qword_1000923D8)
  {
    result = swift_getWitnessTable(&unk_100068324, &type metadata for AEAAssessmentSessionManager.SessionManagerError);
    atomic_store(result, (unint64_t *)&qword_1000923D8);
  }
  return result;
}

uint64_t sub_100043630(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100091DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100043678(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void ***), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(__n128);
  __n128 v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  _QWORD *v67;
  id v68;
  void (*v69)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void **aBlock;
  uint64_t v85;
  void (*v86)(uint64_t, void *, void *);
  void *v87;
  uint64_t (*v88)(void *, uint64_t);
  _QWORD *v89;

  v81 = a1;
  v82 = a2;
  v8 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v77 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v78 = v9;
  v79 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for AEAPolicyBundleArguments(0);
  __chkstk_darwin(v76);
  v80 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004D20(&qword_100093970);
  __chkstk_darwin(v11);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (void (**)(char *, _QWORD, uint64_t, uint64_t))((char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = swift_allocObject(&unk_1000854E0, 32, 7);
  *(_QWORD *)(v18 + 16) = a4;
  *(_QWORD *)(v18 + 24) = a5;
  v19 = swift_allocObject(&unk_100085508, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10000B480;
  *(_QWORD *)(v19 + 24) = v18;
  v83 = v19;
  v20 = qword_10008E618;
  swift_retain_n(a5, 2);
  swift_retain(v18);
  if (v20 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v21 = qword_100093EB8;
  *v17 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v22 = (id)v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v17);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v21 & 1) != 0)
  {
    if (*(_QWORD *)(a3 + 128))
    {
      aBlock = 0;
      LOBYTE(v85) = 0;
      swift_retain(a5);
      a4(&aBlock);
      swift_release(v18);
      swift_release(v83);
      return swift_release_n(a5, 2);
    }
    else
    {
      if ((*(_BYTE *)(a3 + 136) & 1) != 0)
      {
        v24 = sub_100024444();
        v25 = swift_allocError(&type metadata for AEAAssessmentSessionManager.SessionManagerError, v24, 0, 0);
        *v26 = 0;
        aBlock = (void **)v25;
        LOBYTE(v85) = 1;
        swift_retain(a5);
        a4(&aBlock);
        swift_release(a5);
        swift_errorRelease(v25);
        swift_release(a5);
        swift_release(v18);
        v27 = v83;
      }
      else
      {
        *(_BYTE *)(a3 + 136) = 1;
        v28 = *(_QWORD *)(a3 + 176);
        *(_QWORD *)(a3 + 176) = 0;
        swift_errorRelease(v28);
        v29 = *(_QWORD *)(a3 + 64);
        v75 = *(_QWORD *)(a3 + 56);
        ObjectType = swift_getObjectType(v75);
        v74 = ObjectType;
        v31 = v81;
        sub_10003D644(v81, (uint64_t)v13, type metadata accessor for AEAParticipant);
        v32 = type metadata accessor for AEAParticipant(0);
        v69 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
        v70 = v32;
        v69(v13, 0, 1, v32);
        v33 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 24);
        v71 = v29;
        v33(v13, ObjectType, v29);
        v34 = *(_QWORD *)(v31 + *(int *)(v8 + 20));
        v35 = *(void (**)(__n128))(v29 + 48);
        v36 = swift_bridgeObjectRetain(v34);
        v35(v36);
        v37 = swift_allocObject(&unk_100085530, 24, 7);
        v38 = v82;
        swift_unknownObjectWeakInit(v37 + 16, v82);
        v39 = swift_allocObject(&unk_100085530, 24, 7);
        v72 = v39;
        swift_unknownObjectWeakInit(v39 + 16, v38);
        v40 = *(_QWORD *)(a3 + 144);
        v41 = *(_QWORD *)(a3 + 152);
        v43 = *(_QWORD *)(a3 + 160);
        v42 = *(_QWORD *)(a3 + 168);
        *(_QWORD *)(a3 + 144) = &unk_1000923E0;
        *(_QWORD *)(a3 + 152) = v37;
        v73 = v37;
        *(_QWORD *)(a3 + 160) = &unk_1000923E8;
        *(_QWORD *)(a3 + 168) = v39;
        swift_retain(v37);
        swift_retain(v39);
        sub_1000433F8(v40, v41, v43, v42);
        sub_10003D644(v81, (uint64_t)v13, type metadata accessor for AEAParticipant);
        v69(v13, 0, 1, v70);
        v44 = (*(uint64_t (**)(uint64_t))(v71 + 8))(v74);
        v70 = *(_QWORD *)(a3 + 112);
        v45 = v70;
        v46 = swift_allocObject(&unk_100085530, 24, 7);
        v47 = v82;
        swift_unknownObjectWeakInit(v46 + 16, v82);
        v48 = swift_allocObject(&unk_100085530, 24, 7);
        swift_unknownObjectWeakInit(v48 + 16, v47);
        v49 = v80;
        sub_100043F34((uint64_t)v13, v80);
        v50 = (int *)v76;
        *(_QWORD *)(v49 + *(int *)(v76 + 20)) = v44;
        *(_QWORD *)(v49 + v50[6]) = v45;
        v51 = (_QWORD *)(v49 + v50[7]);
        *v51 = &unk_1000923F0;
        v51[1] = v46;
        v51[2] = &unk_1000923F8;
        v51[3] = v48;
        v52 = (_QWORD *)(v49 + v50[8]);
        v54 = v72;
        v53 = v73;
        *v52 = &unk_1000923E0;
        v52[1] = v53;
        v52[2] = &unk_1000923E8;
        v52[3] = v54;
        v55 = *(_QWORD *)(a3 + 96);
        v56 = *(_QWORD *)(a3 + 104);
        sub_1000060F4((_QWORD *)(a3 + 72), v55);
        v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 8);
        swift_retain(v53);
        swift_retain(v54);
        swift_retain(v70);
        v58 = (void *)v57(v49, v55, v56);
        (*(void (**)(uint64_t))(v71 + 64))(v74);
        v59 = v79;
        sub_10003D644(v81, v79, type metadata accessor for AEAAssessmentSessionConfiguration);
        v60 = *(unsigned __int8 *)(v77 + 80);
        v61 = (v60 + 40) & ~v60;
        v62 = (v78 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
        v63 = (_QWORD *)swift_allocObject(&unk_100085558, v62 + 8, v60 | 7);
        v63[2] = a3;
        v63[3] = sub_10000B48C;
        v64 = v83;
        v63[4] = v83;
        sub_10003BB2C(v59, (uint64_t)v63 + v61, type metadata accessor for AEAAssessmentSessionConfiguration);
        v65 = v82;
        *(_QWORD *)((char *)v63 + v62) = v82;
        v88 = sub_1000440A4;
        v89 = v63;
        aBlock = _NSConcreteStackBlock;
        v85 = 1107296256;
        v86 = sub_100041F0C;
        v87 = &unk_100085570;
        v66 = _Block_copy(&aBlock);
        v67 = v89;
        swift_retain(a3);
        swift_retain(v64);
        v68 = v65;
        swift_release(v67);
        objc_msgSend(v58, "activateSessionWithCompletion:", v66);
        _Block_release(v66);
        swift_release(v72);
        swift_release(v73);

        sub_10002F554(v80, type metadata accessor for AEAPolicyBundleArguments);
        swift_release(a5);
        swift_release(v18);
        v27 = v64;
      }
      return swift_release(v27);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100043CFC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100043D20()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100043D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc(dword_10008F784);
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_100043DEC;
  return sub_10000A548(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100043DEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_100043E3C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_10008F774);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_10000CB20;
  return sub_10000A8C0(a1, a2, v3, a3);
}

uint64_t sub_100043EA4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10008F76C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100014AC4;
  return sub_10000A204(v0);
}

uint64_t sub_100043EEC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10008F764);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100014AC4;
  return sub_10000A36C(v0);
}

uint64_t sub_100043F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100093970);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100043F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  v7 = v0 + v4 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 16));
  v8 = v7 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v12 + 20) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v1 + 20)));

  return swift_deallocObject(v0, v11 + 8, v3 | 7);
}

uint64_t sub_1000440A4(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_10004170C(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32), v2 + v6, *(void **)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10004410C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004411C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100044124()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100044160(uint64_t a1)
{
  uint64_t v1;

  return sub_100041A38(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100044170()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100044194()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000441C0(uint64_t a1)
{
  uint64_t v1;

  sub_100041DC4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000441DC(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + 88);
}

void sub_100044210()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000021, 0x800000010006D7B0, "assessmentagent/AEATaskQueue.swift", 34, 2, 21, 0);
  __break(1u);
}

uint64_t type metadata accessor for AEABoxedTaskBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C170(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AEABoxedTaskBase);
}

uint64_t sub_100044274(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 104));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v4, a1 + 120);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000442E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t sub_10004430C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v2 + 112) + 16))(a1, a2, *(_QWORD *)(*(_QWORD *)v2 + 104));
}

uint64_t sub_10004433C()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t sub_100044358()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for AEABoxedTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C170(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AEABoxedTask);
}

uint64_t sub_1000443A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 88))();
}

uint64_t sub_1000443C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1000443A0(a1, a2, *v2);
}

uint64_t sub_1000443D0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for AEATaskQueue()
{
  return objc_opt_self(_TtC15assessmentagent12AEATaskQueue);
}

uint64_t destroy for AEATaskSource(_QWORD *a1)
{
  sub_100004D60(a1);
  swift_release(a1[5]);
  return sub_100004D60(a1 + 6);
}

uint64_t initializeWithCopy for AEATaskSource(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a2 + 48;
  v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain(v5);
  v9(a1 + 48, v6, v8);
  return a1;
}

_QWORD *assignWithCopy for AEATaskSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10000C54C(a1, a2);
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_retain(v4);
  swift_release(v5);
  sub_10000C54C(a1 + 6, a2 + 6);
  return a1;
}

__n128 initializeWithTake for AEATaskSource(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AEATaskSource(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  sub_100004D60((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release(v6);
  sub_100004D60((_QWORD *)(a1 + 48));
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEATaskSource(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEATaskSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEATaskSource()
{
  return &type metadata for AEATaskSource;
}

uint64_t sub_100044648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000302EC();
  static DispatchQoS.unspecified.getter(v16);
  v17 = &_swiftEmptyArrayStorage;
  v12 = sub_100030328();
  v13 = sub_100004D20(&qword_1000917B8);
  v14 = sub_1000057A4((unint64_t *)&qword_1000917C0, &qword_1000917B8, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v6, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  *(_QWORD *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000023, 0x800000010006D7E0, v11, v8, v5, 0);
  *(_QWORD *)(v1 + 24) = dispatch_group_create();
  return v1;
}

uint64_t sub_1000447FC()
{
  _QWORD *v0;
  _QWORD *v1;
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  void *v29;

  v1 = v0;
  v2 = (int *)type metadata accessor for AEAPolicyBundleArguments(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004D20(&qword_1000925E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = &_swiftEmptySetSingleton;
  v9 = sub_100004D20(&qword_10008F308);
  Just.init(_:)(&v29, v9);
  v10 = sub_1000057A4(&qword_1000925E8, &qword_1000925E0, (uint64_t)&protocol conformance descriptor for Just<A>);
  v11 = Publisher.eraseToAnyPublisher()(v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = qword_10008E618;
  swift_retain(v11);
  if (v13 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v14 = (void *)qword_100093EB8;
  v15 = sub_100004D20(&qword_1000925F0);
  v16 = (_QWORD *)swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16[3] = &_swiftEmptyDictionarySingleton;
  v16[4] = &_swiftEmptyDictionarySingleton;
  v17 = (char *)v16 + *(_QWORD *)(*v16 + 112);
  v18 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v16[2] = v14;
  *(_QWORD *)&v4[v2[5]] = v11;
  *(_QWORD *)&v4[v2[6]] = v16;
  v19 = &v4[v2[7]];
  *(_QWORD *)v19 = &unk_1000925F8;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = &unk_100092600;
  *((_QWORD *)v19 + 3) = 0;
  v20 = &v4[v2[8]];
  *(_QWORD *)v20 = &unk_100092608;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = &unk_100092610;
  *((_QWORD *)v20 + 3) = 0;
  v21 = v1[3];
  v22 = v1[4];
  sub_1000060F4(v1, v21);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 8);
  v24 = v14;
  v25 = v23(v4, v21, v22);
  swift_release(v11);
  sub_100044A9C((uint64_t)v4);
  v26 = sub_100004D20(qword_100092618);
  result = swift_allocObject(v26, 24, 7);
  *(_QWORD *)(result + 16) = v25;
  return result;
}

uint64_t sub_100044A78()
{
  uint64_t v0;

  return sub_100044AD8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100044A88()
{
  uint64_t v0;

  return sub_100044AE4(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t sub_100044A9C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AEAPolicyBundleArguments(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100044AD8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100044AE4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t type metadata accessor for AEAAnyTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000C170(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AEAAnyTask);
}

uint64_t *sub_100044B08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_bridgeObjectRetain(v9);
  }
  return a1;
}

uint64_t sub_100044B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_100044BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_100044C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_100044CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100044D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_100044D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100044D9C);
}

uint64_t sub_100044D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100044E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100044E24);
}

uint64_t sub_100044E24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AEAConfigurationProfile(uint64_t a1)
{
  return sub_100016918(a1, qword_1000926F8, (uint64_t)&nominal type descriptor for AEAConfigurationProfile);
}

uint64_t sub_100044EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000458B4(a1, a2, a3, (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t getEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.CalculatorSetting(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x79)
    goto LABEL_17;
  if (a2 + 135 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 135) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 135;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 135;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 135;
  }
LABEL_17:
  v6 = ((*a1 >> 5) & 0xFFFFFF87 | (8 * ((*a1 >> 1) & 0xF))) ^ 0x7F;
  if (v6 >= 0x78)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.CalculatorSetting(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 135 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 135) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x79)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x78)
    return ((uint64_t (*)(void))((char *)&loc_100044FAC + 4 * byte_100068485[v4]))();
  *a1 = a2 - 121;
  return ((uint64_t (*)(void))((char *)sub_100044FE0 + 4 * byte_100068480[v4]))();
}

uint64_t sub_100044FE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044FE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100044FF0);
  return result;
}

uint64_t sub_100045008(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100045010);
  *(_BYTE *)result = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
  return result;
}

uint64_t sub_100045014(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004501C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100045028(unsigned __int8 *a1)
{
  return *a1 >> 5;
}

_BYTE *sub_100045034(_BYTE *result)
{
  *result &= 0x1Fu;
  return result;
}

_BYTE *sub_100045044(_BYTE *result, char a2)
{
  *result = *result & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for AEAConfigurationProfile.Payload.Settings.CalculatorSetting()
{
  return &type metadata for AEAConfigurationProfile.Payload.Settings.CalculatorSetting;
}

uint64_t getEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.NotesSetting(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.NotesSetting(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100045154 + 4 * byte_10006848F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100045188 + 4 * byte_10006848A[v4]))();
}

uint64_t sub_100045188(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100045190(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100045198);
  return result;
}

uint64_t sub_1000451A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000451ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000451B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000451B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AEAConfigurationProfile.Payload.Settings.NotesSetting()
{
  return &type metadata for AEAConfigurationProfile.Payload.Settings.NotesSetting;
}

uint64_t initializeBufferWithCopyOfBuffer for AEAConfigurationProfile.Payload.Settings(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for AEAConfigurationProfile.Payload.Settings(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for AEAConfigurationProfile.Payload.Settings(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t initializeWithTake for AEAConfigurationProfile.Payload.Settings(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for AEAConfigurationProfile.Payload.Settings(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;

  v3 = *((_BYTE *)a2 + 8);
  v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100045328(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100045330(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AEAConfigurationProfile.Payload.Settings()
{
  return &type metadata for AEAConfigurationProfile.Payload.Settings;
}

uint64_t getEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.AppAccessSetting(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x78)
    goto LABEL_17;
  if (a2 + 136 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 136) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 136;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 136;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 136;
  }
LABEL_17:
  v6 = ((*a1 >> 4) & 0xFFFFFF8F | (16 * ((*a1 >> 1) & 7))) ^ 0x7F;
  if (v6 >= 0x77)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for AEAConfigurationProfile.Payload.Settings.AppAccessSetting(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 136 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 136) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x78)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x77)
    return ((uint64_t (*)(void))((char *)&loc_100045434 + 4 * byte_100068499[v4]))();
  *a1 = a2 - 120;
  return ((uint64_t (*)(void))((char *)sub_100045468 + 4 * byte_100068494[v4]))();
}

uint64_t sub_100045468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100045470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100045478);
  return result;
}

uint64_t sub_100045490(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100045498);
  *(_BYTE *)result = 2 * (((-a2 >> 4) & 7) - 8 * a2);
  return result;
}

uint64_t sub_10004549C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000454A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000454B0(unsigned __int8 *a1)
{
  return *a1 >> 4;
}

_BYTE *sub_1000454BC(_BYTE *result)
{
  *result &= 0xFu;
  return result;
}

_BYTE *sub_1000454CC(_BYTE *result, char a2)
{
  *result = *result & 1 | (16 * a2);
  return result;
}

ValueMetadata *type metadata accessor for AEAConfigurationProfile.Payload.Settings.AppAccessSetting()
{
  return &type metadata for AEAConfigurationProfile.Payload.Settings.AppAccessSetting;
}

uint64_t *sub_1000454F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    LOBYTE(v10) = v10[8];
    *(_QWORD *)v9 = v11;
    v9[8] = (char)v10;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_100045594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = (_BYTE)v9;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_10004560C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  v11 = *v8;
  *v8 = v10;
  *((_BYTE *)v8 + 8) = (_BYTE)v9;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_100045694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t sub_100045708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  v11 = *v8;
  *v8 = v10;
  *((_BYTE *)v8 + 8) = (_BYTE)v9;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_100045784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100045790);
}

uint64_t sub_100045790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 > 2)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10004580C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100045818);
}

uint64_t sub_100045818(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for AEAConfigurationProfile.Payload(uint64_t a1)
{
  return sub_100016918(a1, qword_100092790, (uint64_t)&nominal type descriptor for AEAConfigurationProfile.Payload);
}

uint64_t sub_1000458A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000458B4(a1, a2, a3, (uint64_t)"\t");
}

uint64_t sub_1000458B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[3];

  result = type metadata accessor for UUID(319);
  if (v7 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[2] = a4;
    swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
    return 0;
  }
  return result;
}

id sub_100045934()
{
  unint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id result;

  v0 = sub_100045988();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  result = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  qword_100093FA0 = (uint64_t)result;
  return result;
}

unint64_t sub_100045988()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000927D0;
  if (!qword_1000927D0)
  {
    v1 = objc_opt_self(AEPolicyBundle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000927D0);
  }
  return result;
}

uint64_t type metadata accessor for AEAConcreteSecurityTaskPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent33AEAConcreteSecurityTaskPrimitives);
}

uint64_t sub_1000459E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CFStringRef v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = v1;
  if (v2 == 1)
  {
    v4 = SecTaskCopySigningIdentifier(*(SecTaskRef *)(v0 + 16), 0);
    if (v4)
    {
      v5 = (__CFString *)v4;
      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v7 = v6;

    }
    else
    {
      v3 = 0;
      v7 = 0;
    }
    v8 = *(_QWORD *)(v0 + 24);
    v9 = *(_QWORD *)(v0 + 32);
    *(_QWORD *)(v0 + 24) = v3;
    *(_QWORD *)(v0 + 32) = v7;
    swift_bridgeObjectRetain(v7);
    sub_100045AD4(v8, v9);
  }
  sub_100045AE8(v1, v2);
  return v3;
}

uint64_t sub_100045A88()
{
  uint64_t v0;

  sub_100045AD4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for AEAConcreteSecurityTaskPrimitives.ConcreteSecurityTask()
{
  return objc_opt_self(_TtCC15assessmentagent33AEAConcreteSecurityTaskPrimitivesP33_7BBE22FEF63A46741E6E3846089B947720ConcreteSecurityTask);
}

uint64_t sub_100045AD4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_100045AE8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

id sub_100045AFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Class isa;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;

  v45 = a1;
  v4 = sub_100004D20(&qword_10008F508);
  __chkstk_darwin(v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AEAParticipant.SecurityInfo(0);
  __chkstk_darwin(v7);
  v9 = (unsigned __int8 *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v2 + 16);
  v11 = objc_msgSend(v45, "dataRepresentation");
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100006118(v12, v14);
  v16 = objc_msgSend(v10, "codeForAuditTokenData:", isa);

  if (!v16)
    goto LABEL_6;
  v17 = objc_msgSend(v16, "bundleIdentifier");
  if (!v17)
  {
    swift_unknownObjectRelease(v16);
LABEL_6:
    v24 = type metadata accessor for AEAParticipant.Process(0);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 1, 1, v24);
  }
  v18 = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v43 = v20;
  v44 = v19;

  v21 = objc_msgSend(v16, "entitlements");
  if (v21)
  {
    v22 = v21;
    v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  }
  else
  {
    v23 = 0;
  }
  v26 = sub_100051734(v23);
  if (!v26)
  {
    v26 = sub_100058BB4((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(0);
  }
  if (*(_QWORD *)(v26 + 16))
  {
    v27 = sub_10005A2B4(0xD00000000000002BLL, 0x800000010006D960);
    if ((v28 & 1) != 0)
    {
      v29 = *(_QWORD *)(v26 + 56) + 24 * v27;
      v30 = *(unsigned __int8 *)(v29 + 16);
      sub_100006A5C(*(_QWORD *)v29, *(_QWORD *)(v29 + 8), *(_BYTE *)(v29 + 16));
      swift_bridgeObjectRelease(v26);
      __asm { BR              X9 }
    }
  }
  swift_bridgeObjectRelease(v26);
  v31 = objc_msgSend(v16, "isTrusted");
  v32 = objc_msgSend(v16, "teamIdentifier");
  if (v32)
  {
    v33 = v32;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v36 = v35;

  }
  else
  {
    v34 = 0;
    v36 = 0;
  }
  v37 = objc_msgSend(v16, "url");
  if (v37)
  {
    v38 = v37;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    swift_unknownObjectRelease(v16);
    v39 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v6, 0, 1, v39);
  }
  else
  {
    swift_unknownObjectRelease(v16);
    v40 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v6, 1, 1, v40);
  }
  *v9 = v31;
  *((_QWORD *)v9 + 1) = v34;
  *((_QWORD *)v9 + 2) = v36;
  sub_100045F5C((uint64_t)v6, (uint64_t)&v9[*(int *)(v7 + 24)]);
  v41 = v44;
  *(_QWORD *)a2 = v45;
  *(_QWORD *)(a2 + 8) = v41;
  *(_QWORD *)(a2 + 16) = v43;
  *(_BYTE *)(a2 + 24) = 0;
  v42 = type metadata accessor for AEAParticipant.Process(0);
  sub_100045FA4((uint64_t)v9, a2 + *(int *)(v42 + 24));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a2, 0, 1, v42);
  return v45;
}

void sub_100045EE4()
{
  uint64_t v0;
  uint64_t v1;

  sub_100006A80(v0, v1, 2);
  JUMPOUT(0x100045D88);
}

void sub_100045EF8()
{
  uint64_t v0;
  uint64_t v1;

  sub_100006A80(v0, v1, 3);
  JUMPOUT(0x100045D88);
}

uint64_t type metadata accessor for AEAmacOSProcessLift()
{
  return objc_opt_self(_TtC15assessmentagent19AEAmacOSProcessLift);
}

id sub_100045F3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100045AFC(a1, a2);
}

uint64_t sub_100045F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_10008F508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100045FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AEAParticipant.SecurityInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for AEAUpdateAssessmentModeTask(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  sub_100004D60((_QWORD *)(a1 + 8));

}

uint64_t initializeWithCopy for AEAUpdateAssessmentModeTask(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t *, uint64_t);
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v6 - 8);
  swift_retain(v4);
  v8(a1 + 8, v5, v7);
  v9 = (void *)a2[6];
  v10 = (void *)a2[7];
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  v11 = (void *)a2[8];
  *(_QWORD *)(a1 + 64) = v11;
  v12 = v9;
  v13 = v10;
  v14 = v11;
  return a1;
}

uint64_t *assignWithCopy for AEAUpdateAssessmentModeTask(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  sub_10000C54C(a1 + 1, a2 + 1);
  v6 = (void *)a2[6];
  v7 = (void *)a1[6];
  a1[6] = (uint64_t)v6;
  v8 = v6;

  v9 = (void *)a2[7];
  v10 = (void *)a1[7];
  a1[7] = (uint64_t)v9;
  v11 = v9;

  v12 = (void *)a2[8];
  v13 = (void *)a1[8];
  a1[8] = (uint64_t)v12;
  v14 = v12;

  return a1;
}

__n128 initializeWithTake for AEAUpdateAssessmentModeTask(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for AEAUpdateAssessmentModeTask(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  sub_100004D60(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  v5 = a2[6];
  v6 = (void *)a1[6];
  a1[5] = a2[5];
  a1[6] = v5;

  v7 = (void *)a1[7];
  a1[7] = a2[7];

  v8 = (void *)a1[8];
  a1[8] = a2[8];

  return a1;
}

uint64_t getEnumTagSinglePayload for AEAUpdateAssessmentModeTask(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAUpdateAssessmentModeTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAUpdateAssessmentModeTask()
{
  return &type metadata for AEAUpdateAssessmentModeTask;
}

uint64_t sub_100046284(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v12 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * i);
    v20 = v18;
    swift_retain(v18);
    a1(&v20);
    if (v3)
    {
      swift_release(a3);
      v19 = v18;
      return swift_release(v19);
    }
    result = swift_release(v18);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
      break;
    if (v12 >= v10)
      goto LABEL_26;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    if (!v16)
    {
      v17 = v12 + 1;
      if (v12 + 1 >= v10)
        goto LABEL_26;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (v16)
        goto LABEL_16;
      v17 = v12 + 2;
      if (v12 + 2 >= v10)
        goto LABEL_26;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (v16)
        goto LABEL_16;
      v17 = v12 + 3;
      if (v12 + 3 >= v10)
        goto LABEL_26;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (v16)
      {
LABEL_16:
        v12 = v17;
        goto LABEL_17;
      }
      v17 = v12 + 4;
      if (v12 + 4 < v10)
      {
        v16 = *(_QWORD *)(v6 + 8 * v17);
        if (!v16)
        {
          while (1)
          {
            v12 = v17 + 1;
            if (__OFADD__(v17, 1))
              goto LABEL_29;
            if (v12 >= v10)
              goto LABEL_26;
            v16 = *(_QWORD *)(v6 + 8 * v12);
            ++v17;
            if (v16)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_26:
      v19 = a3;
      return swift_release(v19);
    }
LABEL_17:
    v9 = (v16 - 1) & v16;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100046420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[16];
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[4];
  uint64_t v54[3];
  uint64_t v55;

  v4 = v3;
  v47 = a2;
  v48 = a3;
  v44 = a1;
  v5 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v46 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v46 + 64);
  __chkstk_darwin(v5);
  v45 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v41 + 64);
  v9 = __chkstk_darwin(v7);
  v10 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v41 - v11;
  v13 = sub_100004D20(&qword_100092A00);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = Future.init(_:)(sub_10000CD98, 0);
  v54[0] = v14;
  v15 = sub_1000057A4(&qword_100092A08, &qword_100092A00, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v16 = Publisher.eraseToAnyPublisher()(v13, v15);
  swift_release(v14);
  v55 = v16;
  swift_beginAccess(v4 + 24, v54, 0, 0);
  v17 = *(_QWORD *)(v4 + 24);
  v18 = v44;
  v50 = &v55;
  v51 = v44;
  swift_bridgeObjectRetain(v17);
  sub_100046284((void (*)(uint64_t *))sub_100047AA4, (uint64_t)v49, v17);
  v19 = swift_bridgeObjectRelease(v17);
  v20 = v12;
  v42 = v12;
  UUID.init()(v19);
  v21 = v55;
  v53[0] = v55;
  v22 = v41;
  v43 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  v43(v10, v20, v7);
  v23 = v18;
  v24 = v45;
  sub_10003D644(v23, v45, type metadata accessor for AEAAssessmentSessionConfiguration);
  v25 = *(unsigned __int8 *)(v22 + 80);
  v26 = (v25 + 24) & ~v25;
  v27 = *(unsigned __int8 *)(v46 + 80);
  v28 = (v8 + v27 + v26) & ~v27;
  v29 = (v6 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = swift_allocObject(&unk_100085CE0, v29 + 16, v25 | v27 | 7);
  *(_QWORD *)(v30 + 16) = v4;
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v30 + v26, v10, v7);
  sub_100013C28(v24, v30 + v28);
  v31 = (_QWORD *)(v30 + v29);
  v32 = v48;
  *v31 = v47;
  v31[1] = v32;
  swift_retain(v21);
  swift_retain(v4);
  swift_retain(v32);
  v33 = sub_100004D20(&qword_100092A10);
  v34 = sub_1000057A4(&qword_100092A18, &qword_100092A10, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v35 = Publisher.sink(receiveCompletion:receiveValue:)(sub_100047C1C, v30, Publishers.AEACombineLatestMany.init(_:), 0, v33, v34);
  swift_release(v30);
  swift_release(v53[0]);
  v36 = v42;
  v43(v10, v42, v7);
  swift_beginAccess(v4 + 32, v53, 33, 0);
  swift_retain(v35);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + 32));
  v52 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 32) = 0x8000000000000000;
  sub_100056070(v35, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
  v38 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 32) = v52;
  swift_bridgeObjectRelease(v38);
  v39 = *(void (**)(char *, uint64_t))(v22 + 8);
  v39(v10, v7);
  swift_endAccess(v53);
  swift_release(v35);
  v39(v36, v7);
  return swift_release(v55);
}

uint64_t sub_1000467A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v6 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_100004D20(&qword_100092A20);
  v29 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a2;
  v30 = v12;
  sub_10003D644(a3, (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AEAAssessmentSessionConfiguration);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(&unk_100085D58, v14 + v8, v13 | 7);
  *(_QWORD *)(v15 + 16) = a1;
  sub_100013C28((uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14);
  v16 = swift_allocObject(&unk_100085D80, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100047EE8;
  *(_QWORD *)(v16 + 24) = v15;
  swift_retain(v12);
  v17 = swift_retain(a1);
  v18 = static Subscribers.Demand.unlimited.getter(v17);
  v19 = sub_100004D20(&qword_100092A10);
  v20 = sub_100004D20(&qword_100092A00);
  v21 = sub_1000057A4(&qword_100092A18, &qword_100092A10, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v22 = sub_1000057A4(&qword_100092A08, &qword_100092A00, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v18, sub_100047F18, v16, v19, (char *)&type metadata for () + 8, v20, v21, v22);
  swift_release(v16);
  swift_release(v30);
  v23 = sub_1000057A4(&qword_100092A28, &qword_100092A20, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v24 = Publisher.eraseToAnyPublisher()(v9, v23);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v9);
  v25 = *v28;
  *v28 = v24;
  return swift_release(v25);
}

uint64_t sub_1000469F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_10003D644(a2, (uint64_t)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_100085DA8, v9 + v6, v8 | 7);
  *(_QWORD *)(v10 + 16) = a1;
  sub_100013C28((uint64_t)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  v11 = sub_100004D20(&qword_100092A00);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  swift_retain(a1);
  return Future.init(_:)(sub_100048050, v10);
}

uint64_t sub_100046AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (**v14)(uint64_t, char);
  uint64_t (**v15)(uint64_t);
  uint64_t v16;
  uint64_t v18;

  v7 = sub_100004D20((uint64_t *)&unk_100093290);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v18 - v11;
  v13 = swift_allocObject(&unk_100085DD0, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  v14 = (uint64_t (**)(uint64_t, char))&v10[*(int *)(v7 + 48)];
  sub_10003D644(a4, (uint64_t)v10, type metadata accessor for AEAAssessmentSessionConfiguration);
  *v14 = sub_1000496E0;
  v14[1] = (uint64_t (*)(uint64_t, char))v13;
  sub_100013C28((uint64_t)v10, (uint64_t)v12);
  v15 = (uint64_t (**)(uint64_t))&v12[*(int *)(v7 + 48)];
  v16 = swift_allocObject(&unk_100085DF8, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_1000496E0;
  *(_QWORD *)(v16 + 24) = v13;
  *v15 = sub_1000480A0;
  v15[1] = (uint64_t (*)(uint64_t))v16;
  swift_retain(a2);
  PassthroughSubject.send(_:)(v12);
  return sub_1000480CC((uint64_t)v12);
}

uint64_t sub_100046C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD aBlock[5];
  uint64_t v52;

  v42 = a5;
  v43 = a6;
  v40 = a1;
  v46 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  __chkstk_darwin(v10);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a3, v16);
  sub_10003D644(a4, (uint64_t)v15, type metadata accessor for AEAAssessmentSessionConfiguration);
  v20 = *(unsigned __int8 *)(v17 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(unsigned __int8 *)(v13 + 80);
  v24 = (v23 + v22 + 8) & ~v23;
  v25 = (v14 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_100085D08, v25 + 16, v20 | v23 | 7);
  *(_QWORD *)(v26 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v26 + v21, v19, v16);
  v27 = v40;
  *(_QWORD *)(v26 + v22) = v40;
  sub_100013C28((uint64_t)v15, v26 + v24);
  v28 = (_QWORD *)(v26 + v25);
  v29 = v43;
  *v28 = v42;
  v28[1] = v29;
  aBlock[4] = sub_100047E10;
  v52 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002448C;
  aBlock[3] = &unk_100085D20;
  v30 = _Block_copy(aBlock);
  swift_retain(a2);
  swift_errorRetain(v27);
  v31 = swift_retain(v29);
  v32 = v41;
  static DispatchQoS.unspecified.getter(v31);
  v50 = _swiftEmptyArrayStorage;
  v33 = sub_10000ACBC();
  v34 = sub_100004D20(&qword_10008F748);
  v35 = sub_1000057A4((unint64_t *)&qword_10008F750, &qword_10008F748, (uint64_t)&protocol conformance descriptor for [A]);
  v37 = v45;
  v36 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v34, v35, v46, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v37, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v36);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v32, v48);
  return swift_release(v52);
}

uint64_t sub_100046F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[24];

  v10 = sub_100004D20(&qword_100091DF0);
  v11 = __chkstk_darwin(v10);
  v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11);
  v15 = &v21[-v14 - 8];
  swift_beginAccess(a1 + 32, v21, 33, 0);
  v16 = sub_10002CE50(a2);
  swift_endAccess(v21);
  swift_release(v16);
  if (a3)
  {
    swift_errorRetain(a3);
    a5(a3);
    return swift_errorRelease(a3);
  }
  else
  {
    sub_10003D644(a4, (uint64_t)v15, type metadata accessor for AEAAssessmentSessionConfiguration);
    v18 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, 0, 1, v18);
    sub_100047E9C((uint64_t)v15, (uint64_t)v13);
    v19 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 112);
    swift_beginAccess(v19, v21, 33, 0);
    sub_100043630((uint64_t)v13, v19);
    swift_endAccess(v21);
    return ((uint64_t (*)(_QWORD))a5)(0);
  }
}

uint64_t sub_1000470A8@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t updated;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[5];

  v13 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v23[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((objc_msgSend(a1, "isEnabled") & 1) != 0)
  {
    sub_100008380((uint64_t)a5, (uint64_t)v23);
    swift_retain(a4);
    sub_10003CB30(a3, a1, a4, v23, (uint64_t)v15);
    if (v6)
    {

      swift_release(a4);
      return sub_100004D60(a5);
    }
    sub_100004D60(a5);
    v20 = *(_QWORD *)(a4 + 128);
    swift_release(a4);
    if (v20)
    {

      sub_100013C28((uint64_t)v15, a6);
      updated = type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction(0);
      v18 = a6;
      v19 = 0;
    }
    else
    {
      v21 = *(int *)(sub_100004D20(&qword_1000929F8) + 48);
      sub_100013C28((uint64_t)v15, a6);
      *(_QWORD *)(a6 + v21) = a2;
      updated = type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction(0);
      v18 = a6;
      v19 = 1;
    }
  }
  else
  {

    swift_release(a4);
    sub_100004D60(a5);
    updated = type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction(0);
    v18 = a6;
    v19 = 2;
  }
  return swift_storeEnumTagMultiPayload(v18, updated, v19);
}

uint64_t sub_100047244(void (*a1)(void ***), uint64_t a2)
{
  uint64_t *v2;

  swift_retain(a2);
  sub_100047288(v2, a1, a2);
  return swift_release(a2);
}

uint64_t sub_100047288(uint64_t *a1, void (*a2)(void ***), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(void ***);
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t result;
  void *v48;
  void (*v49)(void ***);
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ObjectType;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(__n128);
  __n128 v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t updated;
  void (*v80)(void ***);
  void **aBlock;
  uint64_t v82;
  void (*v83)(uint64_t, void *);
  void *v84;
  uint64_t (*v85)(uint64_t);
  _QWORD *v86;

  v6 = sub_100004D20(&qword_100093970);
  __chkstk_darwin(v6);
  v72 = (uint64_t)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v8 = __chkstk_darwin(v73);
  v78 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v74 = (uint64_t)&v70 - v10;
  v11 = type metadata accessor for DispatchPredicate(0);
  v76 = *(_QWORD *)(v11 - 8);
  v77 = v11;
  __chkstk_darwin(v11);
  v75 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction(0);
  v13 = __chkstk_darwin(updated);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v70 - v16;
  v18 = (void (*)(void ***))swift_allocObject(&unk_100085C18, 32, 7);
  v80 = a2;
  *((_QWORD *)v18 + 2) = a2;
  *((_QWORD *)v18 + 3) = a3;
  v19 = (void *)a1[7];
  v20 = (void *)a1[8];
  v21 = (void *)a1[6];
  v22 = *a1;
  sub_100008380((uint64_t)(a1 + 1), (uint64_t)&aBlock);
  swift_retain_n(a3, 2);
  v23 = v20;
  v24 = v21;
  v25 = v19;
  swift_retain(v22);
  sub_1000470A8(v23, v24, v25, v22, &aBlock, (uint64_t)v17);
  v26 = v77;
  v27 = (uint64_t)v78;
  v28 = v75;
  v29 = v76;
  v30 = swift_allocObject(&unk_100085C40, 32, 7);
  *(_QWORD *)(v30 + 16) = sub_10000B480;
  *(_QWORD *)(v30 + 24) = v18;
  v71 = v30;
  sub_10003D644((uint64_t)v17, (uint64_t)v15, type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, updated);
  if (!EnumCaseMultiPayload)
  {
    v34 = v74;
    sub_100013C28((uint64_t)v15, v74);
    v35 = *a1;
    v36 = qword_10008E618;
    swift_retain_n(v18, 3);
    if (v36 != -1)
      swift_once(&qword_10008E618, sub_10003015C);
    v37 = qword_100093EB8;
    *v28 = qword_100093EB8;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v29 + 104))(v28, enum case for DispatchPredicate.onQueue(_:), v26);
    v38 = (id)v37;
    LOBYTE(v37) = _dispatchPreconditionTest(_:)(v28);
    (*(void (**)(_QWORD *, uint64_t))(v29 + 8))(v28, v26);
    if ((v37 & 1) != 0)
    {
      v39 = a3;
      if ((*(_BYTE *)(v35 + 136) & 1) != 0)
      {
        v40 = sub_100024444();
        v41 = swift_allocError(&type metadata for AEAAssessmentSessionManager.SessionManagerError, v40, 0, 0);
        *v42 = 0;
        aBlock = (void **)v41;
        LOBYTE(v82) = 1;
        v80(&aBlock);
        swift_errorRelease(v41);
        swift_release_n(v18, 2);
        v43 = (_QWORD *)v71;
      }
      else
      {
        *(_BYTE *)(v35 + 136) = 1;
        v54 = *(_QWORD *)(v35 + 64);
        ObjectType = swift_getObjectType(*(_QWORD *)(v35 + 56));
        v80 = v18;
        v56 = ObjectType;
        v57 = v72;
        sub_10003D644(v34, v72, type metadata accessor for AEAParticipant);
        v58 = type metadata accessor for AEAParticipant(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 24))(v57, v56, v54);
        v59 = *(void (**)(__n128))(v54 + 48);
        v60 = swift_bridgeObjectRetain(*(_QWORD *)(v34 + *(int *)(v73 + 20)));
        v18 = v80;
        v59(v60);
        v61 = v74;
        v62 = (_QWORD *)swift_allocObject(&unk_100085C68, 40, 7);
        v62[2] = v35;
        v62[3] = sub_10000B48C;
        v63 = v71;
        v62[4] = v71;
        swift_retain(v63);
        swift_retain(v35);
        sub_100046420(v61, (uint64_t)sub_100047A50, (uint64_t)v62);
        swift_release_n(v18, 2);
        v64 = v63;
        v34 = v61;
        swift_release(v64);
        v43 = v62;
      }
      swift_release(v43);
      sub_10002F554(v34, type metadata accessor for AEAAssessmentSessionConfiguration);
      sub_10002F554((uint64_t)v17, type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
      v65 = v39;
      goto LABEL_20;
    }
    __break(1u);
LABEL_22:
    swift_once(&qword_10008E618, sub_10003015C);
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v32 = *(void **)&v15[*(int *)(sub_100004D20(&qword_1000929F8) + 48)];
    sub_100013C28((uint64_t)v15, v27);
    v33 = *a1;
    swift_retain_n(v18, 3);
    swift_retain(a3);
    sub_100043678(v27, v32, v33, v80, a3);

    swift_release_n(v18, 2);
    swift_release(v71);
    swift_release(a3);
    sub_10002F554(v27, type metadata accessor for AEAAssessmentSessionConfiguration);
LABEL_19:
    sub_10002F554((uint64_t)v17, type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
    v65 = a3;
LABEL_20:
    swift_release(v65);
    return swift_release(v18);
  }
  v15 = (char *)*a1;
  v44 = qword_10008E618;
  swift_retain_n(v18, 3);
  if (v44 != -1)
    goto LABEL_22;
LABEL_10:
  v45 = qword_100093EB8;
  *v28 = qword_100093EB8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v29 + 104))(v28, enum case for DispatchPredicate.onQueue(_:), v26);
  v46 = (id)v45;
  LOBYTE(v45) = _dispatchPreconditionTest(_:)(v28);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v29 + 8))(v28, v26);
  if ((v45 & 1) != 0)
  {
    v48 = (void *)*((_QWORD *)v15 + 16);
    if (v48)
    {
      v49 = v80;
      if ((v15[136] & 1) != 0)
      {
        v50 = sub_100024444();
        v51 = swift_allocError(&type metadata for AEAAssessmentSessionManager.SessionManagerError, v50, 0, 0);
        *v52 = 0;
        aBlock = (void **)v51;
        LOBYTE(v82) = 1;
        swift_unknownObjectRetain(v48);
        v49(&aBlock);
        swift_errorRelease(v51);
        swift_release_n(v18, 2);
        v53 = v71;
      }
      else
      {
        v15[136] = 1;
        swift_unknownObjectRetain(v48);
        sub_10004285C();
        v66 = (_QWORD *)swift_allocObject(&unk_100085C90, 40, 7);
        v66[2] = v15;
        v66[3] = sub_10000B48C;
        v67 = v71;
        v66[4] = v71;
        v85 = sub_100024420;
        v86 = v66;
        aBlock = _NSConcreteStackBlock;
        v82 = 1107296256;
        v83 = sub_100018BB8;
        v84 = &unk_100085CA8;
        v68 = _Block_copy(&aBlock);
        v69 = v86;
        swift_retain(v15);
        swift_retain(v67);
        swift_release(v69);
        objc_msgSend(v48, "deactivateWithCompletion:", v68);
        _Block_release(v68);
        swift_release_n(v18, 2);
        v53 = v67;
      }
      swift_release(v53);
      swift_unknownObjectRelease(v48);
    }
    else
    {
      aBlock = 0;
      LOBYTE(v82) = 0;
      v80(&aBlock);
      swift_release_n(v18, 2);
      swift_release(v71);
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction(uint64_t a1)
{
  uint64_t result;

  result = qword_100092AA0;
  if (!qword_100092AA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAUpdateAssessmentModeTask.UpdateAction);
  return result;
}

uint64_t sub_100047A28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100047A50(uint64_t a1)
{
  uint64_t v1;

  return sub_100041F80(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100047A60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100047A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100047A9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100047AA4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000467A4(*a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100047AC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v11 = v0 + v9;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 16));
  v12 = v0 + v9 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 16));
  v13 = v12 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v16 = (v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v17 + 20) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v6 + 20)));
  swift_release(*(_QWORD *)(v0 + v16 + 8));
  return swift_deallocObject(v0, v16 + 16, v3 | v8 | 7);
}

uint64_t sub_100047C1C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (uint64_t *)(v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100046C10(*a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + v7, *v8, v8[1]);
}

uint64_t sub_100047CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(_QWORD *)(v0 + v5));
  v11 = v0 + v9;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 16));
  v12 = v0 + v9 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 16));
  v13 = v12 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v16 = (v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v17 + 20) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v6 + 20)));
  swift_release(*(_QWORD *)(v0 + v16 + 8));
  return swift_deallocObject(v0, v16 + 16, v3 | v8 | 7);
}

uint64_t sub_100047E10()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_100046F1C(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), v0 + v5, *(void (**)(uint64_t))(v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100047E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100091DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047EE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) - 8) + 80);
  return sub_1000469F8(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100047F18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_100047F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  v7 = v0 + v4 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 16));
  v8 = v7 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v11 + 20) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100048050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) - 8) + 80);
  return sub_100046AE0(a1, a2, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_1000480A0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000480CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20((uint64_t *)&unk_100093290);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10004810C(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t, __n128);
  char *v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t, __n128);
  char *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  char *__dst;
  char *__dsta;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v24 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v24[(v6 + 16) & ~(unint64_t)v6];
    swift_retain(v24);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v26 = *a2;
      v25 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v25;
      v27 = a2[2];
      *((_QWORD *)a1 + 2) = v27;
      a1[24] = *((_BYTE *)a2 + 24);
      v28 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      v29 = &a1[v28];
      v30 = (char *)a2 + v28;
      *v29 = *((_BYTE *)a2 + v28);
      v31 = *(uint64_t *)((char *)a2 + v28 + 16);
      *((_QWORD *)v29 + 1) = *(char **)((char *)a2 + v28 + 8);
      *((_QWORD *)v29 + 2) = v31;
      v32 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dsta = &v29[v32];
      v33 = &v30[v32];
      v34 = type metadata accessor for URL(0);
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v35 + 48);
      v37 = v26;
      swift_bridgeObjectRetain(v27);
      v38 = swift_bridgeObjectRetain(v31);
      if (v36(v33, 1, v34, v38))
      {
        v39 = sub_100004D20(&qword_10008F508);
        memcpy(__dsta, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dsta, v33, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dsta, 0, 1, v34);
      }
      v50 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
      v51 = &a1[v50];
      v52 = (char *)a2 + v50;
      *v51 = *v52;
      v53 = *((_QWORD *)v52 + 1);
      *((_QWORD *)v51 + 1) = v53;
      v54 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
      v55 = v54[5];
      v56 = *(uint64_t *)((char *)a2 + v55);
      *(_QWORD *)&a1[v55] = v56;
      a1[v54[6]] = *((_BYTE *)a2 + v54[6]);
      a1[v54[7]] = *((_BYTE *)a2 + v54[7]);
      a1[v54[8]] = *((_BYTE *)a2 + v54[8]);
      a1[v54[9]] = *((_BYTE *)a2 + v54[9]);
      a1[v54[10]] = *((_BYTE *)a2 + v54[10]);
      a1[v54[11]] = *((_BYTE *)a2 + v54[11]);
      a1[v54[12]] = *((_BYTE *)a2 + v54[12]);
      a1[v54[13]] = *((_BYTE *)a2 + v54[13]);
      a1[v54[14]] = *((_BYTE *)a2 + v54[14]);
      a1[v54[15]] = *((_BYTE *)a2 + v54[15]);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v56);
      v57 = *(int *)(sub_100004D20(&qword_1000929F8) + 48);
      v58 = *(char **)((char *)a2 + v57);
      *(_QWORD *)&a1[v57] = v58;
      v59 = v58;
      v47 = a1;
      v48 = a3;
      v49 = 1;
      goto LABEL_14;
    }
    if (!EnumCaseMultiPayload)
    {
      v10 = *a2;
      v9 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v9;
      v11 = a2[2];
      *((_QWORD *)a1 + 2) = v11;
      a1[24] = *((_BYTE *)a2 + 24);
      v12 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      v13 = &a1[v12];
      v14 = (char *)a2 + v12;
      *v13 = *((_BYTE *)a2 + v12);
      v15 = *(uint64_t *)((char *)a2 + v12 + 16);
      *((_QWORD *)v13 + 1) = *(char **)((char *)a2 + v12 + 8);
      *((_QWORD *)v13 + 2) = v15;
      v16 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dst = &v13[v16];
      v17 = &v14[v16];
      v18 = type metadata accessor for URL(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v19 + 48);
      v21 = v10;
      swift_bridgeObjectRetain(v11);
      v22 = swift_bridgeObjectRetain(v15);
      if (v20(v17, 1, v18, v22))
      {
        v23 = sub_100004D20(&qword_10008F508);
        memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      }
      v40 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
      v41 = &a1[v40];
      v42 = (char *)a2 + v40;
      *v41 = *v42;
      v43 = *((_QWORD *)v42 + 1);
      *((_QWORD *)v41 + 1) = v43;
      v44 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
      v45 = v44[5];
      v46 = *(uint64_t *)((char *)a2 + v45);
      *(_QWORD *)&a1[v45] = v46;
      a1[v44[6]] = *((_BYTE *)a2 + v44[6]);
      a1[v44[7]] = *((_BYTE *)a2 + v44[7]);
      a1[v44[8]] = *((_BYTE *)a2 + v44[8]);
      a1[v44[9]] = *((_BYTE *)a2 + v44[9]);
      a1[v44[10]] = *((_BYTE *)a2 + v44[10]);
      a1[v44[11]] = *((_BYTE *)a2 + v44[11]);
      a1[v44[12]] = *((_BYTE *)a2 + v44[12]);
      a1[v44[13]] = *((_BYTE *)a2 + v44[13]);
      a1[v44[14]] = *((_BYTE *)a2 + v44[14]);
      a1[v44[15]] = *((_BYTE *)a2 + v44[15]);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v46);
      v47 = a1;
      v48 = a3;
      v49 = 0;
LABEL_14:
      swift_storeEnumTagMultiPayload(v47, v48, v49);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

void sub_100048538(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 1)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
    v10 = a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + 16));
    v11 = v10 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    v14 = type metadata accessor for AEAParticipant(0);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v14 + 20) + 8));
    v15 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v15 + 20)));

  }
  else if (!EnumCaseMultiPayload)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
    v4 = a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 16));
    v5 = v4 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v6 = type metadata accessor for URL(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    v8 = type metadata accessor for AEAParticipant(0);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v8 + 20) + 8));
    v9 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) + 20));
    swift_bridgeObjectRelease(v9);
  }
}

_QWORD *sub_1000486D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t, __n128);
  id v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v60;
  uint64_t v61;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v61 = a3;
    v24 = (void *)*a2;
    v23 = a2[1];
    *a1 = *a2;
    a1[1] = v23;
    v25 = a2[2];
    a1[2] = v25;
    *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
    v26 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    *v27 = *((_BYTE *)a2 + v26);
    v29 = *(_QWORD *)((char *)a2 + v26 + 16);
    *((_QWORD *)v27 + 1) = *(_QWORD *)((char *)a2 + v26 + 8);
    *((_QWORD *)v27 + 2) = v29;
    v30 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v31 = &v27[v30];
    v32 = &v28[v30];
    v33 = type metadata accessor for URL(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v34 + 48);
    v36 = v24;
    swift_bridgeObjectRetain(v25);
    v37 = swift_bridgeObjectRetain(v29);
    if (v35(v32, 1, v33, v37))
    {
      v38 = sub_100004D20(&qword_10008F508);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    v49 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
    v50 = (char *)a1 + v49;
    v51 = (char *)a2 + v49;
    *v50 = *v51;
    v52 = *((_QWORD *)v51 + 1);
    *((_QWORD *)v50 + 1) = v52;
    v53 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
    v54 = v53[5];
    v55 = *(_QWORD *)((char *)a2 + v54);
    *(_QWORD *)((char *)a1 + v54) = v55;
    *((_BYTE *)a1 + v53[6]) = *((_BYTE *)a2 + v53[6]);
    *((_BYTE *)a1 + v53[7]) = *((_BYTE *)a2 + v53[7]);
    *((_BYTE *)a1 + v53[8]) = *((_BYTE *)a2 + v53[8]);
    *((_BYTE *)a1 + v53[9]) = *((_BYTE *)a2 + v53[9]);
    *((_BYTE *)a1 + v53[10]) = *((_BYTE *)a2 + v53[10]);
    *((_BYTE *)a1 + v53[11]) = *((_BYTE *)a2 + v53[11]);
    *((_BYTE *)a1 + v53[12]) = *((_BYTE *)a2 + v53[12]);
    *((_BYTE *)a1 + v53[13]) = *((_BYTE *)a2 + v53[13]);
    *((_BYTE *)a1 + v53[14]) = *((_BYTE *)a2 + v53[14]);
    *((_BYTE *)a1 + v53[15]) = *((_BYTE *)a2 + v53[15]);
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v55);
    v56 = *(int *)(sub_100004D20(&qword_1000929F8) + 48);
    v57 = *(void **)((char *)a2 + v56);
    *(_QWORD *)((char *)a1 + v56) = v57;
    v58 = v57;
    v46 = a1;
    v47 = v61;
    v48 = 1;
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    v60 = a3;
    v8 = (void *)*a2;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2[2];
    a1[2] = v9;
    *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
    v10 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    *v11 = *((_BYTE *)a2 + v10);
    v13 = *(_QWORD *)((char *)a2 + v10 + 16);
    *((_QWORD *)v11 + 1) = *(_QWORD *)((char *)a2 + v10 + 8);
    *((_QWORD *)v11 + 2) = v13;
    v14 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v15 = &v11[v14];
    v16 = &v12[v14];
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
    v20 = v8;
    swift_bridgeObjectRetain(v9);
    v21 = swift_bridgeObjectRetain(v13);
    if (v19(v16, 1, v17, v21))
    {
      v22 = sub_100004D20(&qword_10008F508);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v39 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    *v40 = *v41;
    v42 = *((_QWORD *)v41 + 1);
    *((_QWORD *)v40 + 1) = v42;
    v43 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
    v44 = v43[5];
    v45 = *(_QWORD *)((char *)a2 + v44);
    *(_QWORD *)((char *)a1 + v44) = v45;
    *((_BYTE *)a1 + v43[6]) = *((_BYTE *)a2 + v43[6]);
    *((_BYTE *)a1 + v43[7]) = *((_BYTE *)a2 + v43[7]);
    *((_BYTE *)a1 + v43[8]) = *((_BYTE *)a2 + v43[8]);
    *((_BYTE *)a1 + v43[9]) = *((_BYTE *)a2 + v43[9]);
    *((_BYTE *)a1 + v43[10]) = *((_BYTE *)a2 + v43[10]);
    *((_BYTE *)a1 + v43[11]) = *((_BYTE *)a2 + v43[11]);
    *((_BYTE *)a1 + v43[12]) = *((_BYTE *)a2 + v43[12]);
    *((_BYTE *)a1 + v43[13]) = *((_BYTE *)a2 + v43[13]);
    *((_BYTE *)a1 + v43[14]) = *((_BYTE *)a2 + v43[14]);
    *((_BYTE *)a1 + v43[15]) = *((_BYTE *)a2 + v43[15]);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v45);
    v46 = a1;
    v47 = v60;
    v48 = 0;
LABEL_12:
    swift_storeEnumTagMultiPayload(v46, v47, v48);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *sub_100048AD8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t, __n128);
  id v19;
  __n128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t, __n128);
  id v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v58;
  uint64_t v59;

  if (a1 != a2)
  {
    sub_10002F554((uint64_t)a1, type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v59 = a3;
      v22 = (void *)*a2;
      *a1 = *a2;
      a1[1] = a2[1];
      v23 = a2[2];
      a1[2] = v23;
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      v24 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      *v25 = *((_BYTE *)a2 + v24);
      *((_QWORD *)v25 + 1) = *(_QWORD *)((char *)a2 + v24 + 8);
      v27 = *(_QWORD *)((char *)a2 + v24 + 16);
      *((_QWORD *)v25 + 2) = v27;
      v28 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      v29 = &v25[v28];
      v30 = &v26[v28];
      v31 = type metadata accessor for URL(0);
      v32 = *(_QWORD *)(v31 - 8);
      v33 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v32 + 48);
      v34 = v22;
      swift_bridgeObjectRetain(v23);
      v35 = swift_bridgeObjectRetain(v27);
      if (v33(v30, 1, v31, v35))
      {
        v36 = sub_100004D20(&qword_10008F508);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      v47 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
      v48 = (char *)a1 + v47;
      v49 = (char *)a2 + v47;
      *v48 = *v49;
      v50 = *((_QWORD *)v49 + 1);
      *((_QWORD *)v48 + 1) = v50;
      v51 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
      v52 = v51[5];
      v53 = *(_QWORD *)((char *)a2 + v52);
      *(_QWORD *)((char *)a1 + v52) = v53;
      *((_BYTE *)a1 + v51[6]) = *((_BYTE *)a2 + v51[6]);
      *((_BYTE *)a1 + v51[7]) = *((_BYTE *)a2 + v51[7]);
      *((_BYTE *)a1 + v51[8]) = *((_BYTE *)a2 + v51[8]);
      *((_BYTE *)a1 + v51[9]) = *((_BYTE *)a2 + v51[9]);
      *((_BYTE *)a1 + v51[10]) = *((_BYTE *)a2 + v51[10]);
      *((_BYTE *)a1 + v51[11]) = *((_BYTE *)a2 + v51[11]);
      *((_BYTE *)a1 + v51[12]) = *((_BYTE *)a2 + v51[12]);
      *((_BYTE *)a1 + v51[13]) = *((_BYTE *)a2 + v51[13]);
      *((_BYTE *)a1 + v51[14]) = *((_BYTE *)a2 + v51[14]);
      *((_BYTE *)a1 + v51[15]) = *((_BYTE *)a2 + v51[15]);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v53);
      v54 = *(int *)(sub_100004D20(&qword_1000929F8) + 48);
      v55 = *(void **)((char *)a2 + v54);
      *(_QWORD *)((char *)a1 + v54) = v55;
      v56 = v55;
      v44 = a1;
      v45 = v59;
      v46 = 1;
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      v58 = a3;
      v7 = (void *)*a2;
      *a1 = *a2;
      a1[1] = a2[1];
      v8 = a2[2];
      a1[2] = v8;
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      *v10 = *((_BYTE *)a2 + v9);
      *((_QWORD *)v10 + 1) = *(_QWORD *)((char *)a2 + v9 + 8);
      v12 = *(_QWORD *)((char *)a2 + v9 + 16);
      *((_QWORD *)v10 + 2) = v12;
      v13 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      v14 = &v10[v13];
      v15 = &v11[v13];
      v16 = type metadata accessor for URL(0);
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v17 + 48);
      v19 = v7;
      swift_bridgeObjectRetain(v8);
      v20 = swift_bridgeObjectRetain(v12);
      if (v18(v15, 1, v16, v20))
      {
        v21 = sub_100004D20(&qword_10008F508);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      v37 = *(int *)(type metadata accessor for AEAParticipant(0) + 20);
      v38 = (char *)a1 + v37;
      v39 = (char *)a2 + v37;
      *v38 = *v39;
      v40 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v38 + 1) = v40;
      v41 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
      v42 = v41[5];
      v43 = *(_QWORD *)((char *)a2 + v42);
      *(_QWORD *)((char *)a1 + v42) = v43;
      *((_BYTE *)a1 + v41[6]) = *((_BYTE *)a2 + v41[6]);
      *((_BYTE *)a1 + v41[7]) = *((_BYTE *)a2 + v41[7]);
      *((_BYTE *)a1 + v41[8]) = *((_BYTE *)a2 + v41[8]);
      *((_BYTE *)a1 + v41[9]) = *((_BYTE *)a2 + v41[9]);
      *((_BYTE *)a1 + v41[10]) = *((_BYTE *)a2 + v41[10]);
      *((_BYTE *)a1 + v41[11]) = *((_BYTE *)a2 + v41[11]);
      *((_BYTE *)a1 + v41[12]) = *((_BYTE *)a2 + v41[12]);
      *((_BYTE *)a1 + v41[13]) = *((_BYTE *)a2 + v41[13]);
      *((_BYTE *)a1 + v41[14]) = *((_BYTE *)a2 + v41[14]);
      *((_BYTE *)a1 + v41[15]) = *((_BYTE *)a2 + v41[15]);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v43);
      v44 = a1;
      v45 = v58;
      v46 = 0;
LABEL_13:
      swift_storeEnumTagMultiPayload(v44, v45, v46);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_100048F14(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    a1[24] = a2[24];
    v16 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v17 = &a1[v16];
    v18 = &a2[v16];
    *v17 = a2[v16];
    *(_OWORD *)(v17 + 8) = *(_OWORD *)&a2[v16 + 8];
    v19 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v20 = &v17[v19];
    v21 = &v18[v19];
    v22 = type metadata accessor for URL(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_100004D20(&qword_10008F508);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v30 = type metadata accessor for AEAParticipant(0);
    *(_OWORD *)&a1[*(int *)(v30 + 20)] = *(_OWORD *)&a2[*(int *)(v30 + 20)];
    v31 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
    *(_QWORD *)&a1[v31[5]] = *(_QWORD *)&a2[v31[5]];
    a1[v31[6]] = a2[v31[6]];
    a1[v31[7]] = a2[v31[7]];
    a1[v31[8]] = a2[v31[8]];
    a1[v31[9]] = a2[v31[9]];
    a1[v31[10]] = a2[v31[10]];
    a1[v31[11]] = a2[v31[11]];
    a1[v31[12]] = a2[v31[12]];
    a1[v31[13]] = a2[v31[13]];
    a1[v31[14]] = a2[v31[14]];
    a1[v31[15]] = a2[v31[15]];
    v32 = sub_100004D20(&qword_1000929F8);
    *(_QWORD *)&a1[*(int *)(v32 + 48)] = *(_QWORD *)&a2[*(int *)(v32 + 48)];
    v27 = a1;
    v28 = a3;
    v29 = 1;
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    a1[24] = a2[24];
    v7 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v8 = &a1[v7];
    v9 = &a2[v7];
    *v8 = a2[v7];
    *(_OWORD *)(v8 + 8) = *(_OWORD *)&a2[v7 + 8];
    v10 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v11 = &v8[v10];
    v12 = &v9[v10];
    v13 = type metadata accessor for URL(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_100004D20(&qword_10008F508);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v25 = type metadata accessor for AEAParticipant(0);
    *(_OWORD *)&a1[*(int *)(v25 + 20)] = *(_OWORD *)&a2[*(int *)(v25 + 20)];
    v26 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
    *(_QWORD *)&a1[v26[5]] = *(_QWORD *)&a2[v26[5]];
    a1[v26[6]] = a2[v26[6]];
    a1[v26[7]] = a2[v26[7]];
    a1[v26[8]] = a2[v26[8]];
    a1[v26[9]] = a2[v26[9]];
    a1[v26[10]] = a2[v26[10]];
    a1[v26[11]] = a2[v26[11]];
    a1[v26[12]] = a2[v26[12]];
    a1[v26[13]] = a2[v26[13]];
    a1[v26[14]] = a2[v26[14]];
    a1[v26[15]] = a2[v26[15]];
    v27 = a1;
    v28 = a3;
    v29 = 0;
LABEL_12:
    swift_storeEnumTagMultiPayload(v27, v28, v29);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_10004928C(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;

  if (a1 != a2)
  {
    sub_10002F554((uint64_t)a1, type metadata accessor for AEAUpdateAssessmentModeTask.UpdateAction);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      a1[24] = a2[24];
      v16 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      v17 = &a1[v16];
      v18 = &a2[v16];
      *v17 = a2[v16];
      *(_OWORD *)(v17 + 8) = *(_OWORD *)&a2[v16 + 8];
      v19 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      v20 = &v17[v19];
      v21 = &v18[v19];
      v22 = type metadata accessor for URL(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = sub_100004D20(&qword_10008F508);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v30 = type metadata accessor for AEAParticipant(0);
      *(_OWORD *)&a1[*(int *)(v30 + 20)] = *(_OWORD *)&a2[*(int *)(v30 + 20)];
      v31 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
      *(_QWORD *)&a1[v31[5]] = *(_QWORD *)&a2[v31[5]];
      a1[v31[6]] = a2[v31[6]];
      a1[v31[7]] = a2[v31[7]];
      a1[v31[8]] = a2[v31[8]];
      a1[v31[9]] = a2[v31[9]];
      a1[v31[10]] = a2[v31[10]];
      a1[v31[11]] = a2[v31[11]];
      a1[v31[12]] = a2[v31[12]];
      a1[v31[13]] = a2[v31[13]];
      a1[v31[14]] = a2[v31[14]];
      a1[v31[15]] = a2[v31[15]];
      v32 = sub_100004D20(&qword_1000929F8);
      *(_QWORD *)&a1[*(int *)(v32 + 48)] = *(_QWORD *)&a2[*(int *)(v32 + 48)];
      v27 = a1;
      v28 = a3;
      v29 = 1;
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      a1[24] = a2[24];
      v7 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      v8 = &a1[v7];
      v9 = &a2[v7];
      *v8 = a2[v7];
      *(_OWORD *)(v8 + 8) = *(_OWORD *)&a2[v7 + 8];
      v10 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      v11 = &v8[v10];
      v12 = &v9[v10];
      v13 = type metadata accessor for URL(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = sub_100004D20(&qword_10008F508);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      v25 = type metadata accessor for AEAParticipant(0);
      *(_OWORD *)&a1[*(int *)(v25 + 20)] = *(_OWORD *)&a2[*(int *)(v25 + 20)];
      v26 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
      *(_QWORD *)&a1[v26[5]] = *(_QWORD *)&a2[v26[5]];
      a1[v26[6]] = a2[v26[6]];
      a1[v26[7]] = a2[v26[7]];
      a1[v26[8]] = a2[v26[8]];
      a1[v26[9]] = a2[v26[9]];
      a1[v26[10]] = a2[v26[10]];
      a1[v26[11]] = a2[v26[11]];
      a1[v26[12]] = a2[v26[12]];
      a1[v26[13]] = a2[v26[13]];
      a1[v26[14]] = a2[v26[14]];
      a1[v26[15]] = a2[v26[15]];
      v27 = a1;
      v28 = a3;
      v29 = 0;
LABEL_13:
      swift_storeEnumTagMultiPayload(v27, v28, v29);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10004961C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100049628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100049638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100049648(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  result = type metadata accessor for AEAAssessmentSessionConfiguration(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2(v4);
    v5[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
    return 0;
  }
  return result;
}

uint64_t sub_1000496E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD v73[5];
  __int128 v74;
  uint64_t v75;
  _UNKNOWN **v76;
  __int128 v77;
  uint64_t v78;
  _UNKNOWN **v79;
  _QWORD v80[3];
  ValueMetadata *v81;
  _UNKNOWN **v82;

  v6 = sub_1000060F4(a1, a1[3]);
  sub_100008380(*v6 + 176, (uint64_t)v80);
  v7 = sub_100013D84((uint64_t)v80, (uint64_t)v81);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  v11 = *v9;
  v12 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  v78 = v12;
  v79 = &off_1000832C0;
  *(_QWORD *)&v77 = v11;
  v13 = type metadata accessor for AEAPolicyStore();
  v14 = (_QWORD *)swift_allocObject(v13, 56, 7);
  v15 = sub_100013D84((uint64_t)&v77, v12);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = *v17;
  v14[5] = v12;
  v14[6] = &off_1000832C0;
  v14[2] = v19;
  sub_100004D60(&v77);
  sub_100004D60(v80);
  sub_100049D48(a2, (uint64_t)&v77);
  sub_100008380((uint64_t)a1, (uint64_t)&v74);
  v72 = v14;
  if (v78)
  {
    sub_100004D60(&v74);
    sub_1000084DC(&v77, (uint64_t)v80);
  }
  else
  {
    v81 = &type metadata for AEAiOSPolicyBundleFactory;
    v82 = &off_100087290;
    v20 = swift_allocObject(&unk_100085E28, 64, 7);
    v80[0] = v20;
    sub_1000084DC(&v74, v20 + 16);
    *(_QWORD *)(v20 + 56) = v14;
    swift_retain(v14);
    sub_100004CE0((uint64_t)&v77);
  }
  v21 = sub_1000060F4(a1, a1[3]);
  sub_100008380(*v21 + 400, (uint64_t)&v77);
  v22 = sub_100013D84((uint64_t)&v77, v78);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = *v24;
  v27 = type metadata accessor for AEAConcreteSecurityTaskPrimitives();
  v75 = v27;
  v76 = &off_100085B40;
  *(_QWORD *)&v74 = v26;
  v71 = type metadata accessor for AEAiOSOSProcessLift();
  v28 = (_QWORD *)swift_allocObject(v71, 56, 7);
  v29 = sub_100013D84((uint64_t)&v74, v27);
  __chkstk_darwin(v29);
  v31 = (uint64_t *)((char *)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v32 + 16))(v31);
  v33 = *v31;
  v28[5] = v27;
  v28[6] = &off_100085B40;
  v28[2] = v33;
  sub_100004D60(&v74);
  sub_100004D60(&v77);
  v34 = sub_1000060F4(a1, a1[3]);
  sub_100008380(*v34 + 440, (uint64_t)&v77);
  v35 = sub_100013D84((uint64_t)&v77, v78);
  __chkstk_darwin(v35);
  v37 = (uint64_t *)((char *)&v70 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v38 + 16))(v37);
  v39 = *v37;
  v40 = type metadata accessor for AEAConcreteRunningBoardPrimitives();
  v75 = v40;
  v76 = &off_100084240;
  *(_QWORD *)&v74 = v39;
  v41 = type metadata accessor for AEAiOSParticipantManager(0);
  v42 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  v43 = sub_100013D84((uint64_t)&v74, v40);
  __chkstk_darwin(v43);
  v45 = (uint64_t *)((char *)&v70 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v46 + 16))(v45);
  v47 = *v45;
  swift_retain(v28);
  v48 = sub_100049EC8(v47, (uint64_t)v28, v42);
  sub_100004D60(&v74);
  sub_100004D60(&v77);
  v49 = sub_1000060F4(a1, a1[3]);
  sub_100008380(*v49 + 360, (uint64_t)&v77);
  sub_100008380((uint64_t)v80, (uint64_t)&v74);
  v50 = *(void **)(*sub_1000060F4(a1, a1[3]) + 104);
  swift_retain(v28);
  swift_retain(v48);
  LOBYTE(v50) = objc_msgSend(v50, "shouldShowPromptsAndBanners");
  v51 = sub_100013D84((uint64_t)&v77, v78);
  __chkstk_darwin(v51);
  v53 = (uint64_t *)((char *)&v70 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v54 + 16))(v53);
  v55 = *v53;
  v56 = type metadata accessor for AEAConcreteLaunchServicesPrimitives();
  v73[3] = v56;
  v73[4] = &off_100087860;
  v73[0] = v55;
  v57 = type metadata accessor for AEAAssessmentSessionManager();
  v58 = swift_allocObject(v57, 184, 7);
  v59 = sub_100013D84((uint64_t)v73, v56);
  __chkstk_darwin(v59);
  v61 = (uint64_t *)((char *)&v70 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v62 + 16))(v61);
  v63 = sub_10004A3B8(*v61, v48, &v74, (char)v50, v58);
  sub_100004D60(v73);
  swift_release(v28);
  sub_100004D60(&v77);
  sub_100008380((uint64_t)a1, (uint64_t)&v77);
  v64 = swift_allocObject(&unk_100085E50, 56, 7);
  sub_1000084DC(&v77, v64 + 16);
  v66 = a1[3];
  v65 = a1[4];
  v67 = sub_1000060F4(a1, v66);
  a3[3] = v66;
  a3[4] = *(_QWORD *)(v65 + 8);
  v68 = sub_10002B8E4(a3);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v68, v67, v66);
  sub_100008380((uint64_t)v80, (uint64_t)(a3 + 7));
  a3[16] = v71;
  a3[17] = &off_1000874B8;
  swift_release(v72);
  a3[5] = v48;
  a3[6] = &off_100085320;
  a3[12] = v63;
  a3[13] = v28;
  a3[18] = sub_10004A518;
  a3[19] = v64;
  return sub_100004D60(v80);
}

uint64_t sub_100049D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_10008E718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100049D90()
{
  uint64_t v0;

  sub_100004D60((_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100049DBC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = sub_100004D20(&qword_100092AD8);
  v4 = swift_allocObject(v3, 48, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100067F50;
  v5 = *sub_1000060F4(a2, a2[3]);
  v6 = *sub_1000060F4(a2, a2[3]);
  v7 = *(_QWORD *)(*sub_1000060F4(a2, a2[3]) + 520);
  v8 = sub_1000060F4((_QWORD *)(v5 + 176), *(_QWORD *)(v5 + 200));
  v9 = sub_1000060F4((_QWORD *)(v6 + 608), *(_QWORD *)(v6 + 632));
  v10 = *v8;
  v11 = *v9;
  swift_unknownObjectRetain(v7);
  v12 = sub_10004A21C(v10, v11, v7);
  swift_unknownObjectRelease(v7);
  *(_QWORD *)(v4 + 32) = v12;
  *(_QWORD *)(v4 + 40) = sub_1000447FC();
  specialized Array._endMutation()();
  return v4;
}

uint64_t sub_100049EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;

  v6 = sub_100004D20(&qword_100090B18);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004D20(&qword_100090B38);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for AEAiOSOSProcessLift();
  v26 = &off_1000874B8;
  *(_QWORD *)&v24 = a2;
  v22 = type metadata accessor for AEAConcreteRunningBoardPrimitives();
  v23 = &off_100084240;
  *(_QWORD *)&v21 = a1;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_QWORD *)(a3 + 128) = 0;
  v14 = a3 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager__candidateProcesses;
  v20 = &_swiftEmptySetSingleton;
  v15 = sub_100004D20((uint64_t *)&unk_10008F250);
  Published.init(initialValue:)(&v20, v15);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14, v13, v10);
  v16 = a3 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager__participants;
  v20 = &_swiftEmptySetSingleton;
  v17 = sub_100004D20(&qword_10008F308);
  Published.init(initialValue:)(&v20, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v16, v9, v6);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager_subscriptions) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(a3 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___mainParticipantSource) = 0;
  *(_QWORD *)(a3
            + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___configurationParticipantSource) = 0;
  *(_QWORD *)(a3 + OBJC_IVAR____TtC15assessmentagent24AEAiOSParticipantManager____lazy_storage___participantSources) = 0;
  sub_1000084DC(&v24, a3 + 56);
  sub_1000084DC(&v21, a3 + 16);
  return a3;
}

uint64_t sub_10004A0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t PermissionTask;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;
  _QWORD v24[5];

  v6 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  v24[3] = v6;
  v24[4] = &off_1000832C0;
  v24[0] = a1;
  v7 = type metadata accessor for AEAConcreteMobileKeyBagPrimitives();
  v22 = v7;
  v23 = &off_100081BA0;
  v21[0] = a2;
  PermissionTask = type metadata accessor for AEAWaitForReadPermissionTask();
  v9 = swift_allocObject(PermissionTask, 144, 7);
  v10 = sub_100013D84((uint64_t)v24, v6);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_100013D84((uint64_t)v21, v22);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = *v12;
  v19 = *v16;
  *(_QWORD *)(v9 + 40) = v6;
  *(_QWORD *)(v9 + 48) = &off_1000832C0;
  *(_QWORD *)(v9 + 16) = v18;
  *(_QWORD *)(v9 + 80) = v7;
  *(_QWORD *)(v9 + 88) = &off_100081BA0;
  *(_QWORD *)(v9 + 56) = v19;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_QWORD *)(v9 + 136) = 0;
  *(_QWORD *)(v9 + 96) = a3;
  sub_100004D60(v21);
  sub_100004D60(v24);
  return v9;
}

uint64_t sub_10004A21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[5];

  v23[3] = type metadata accessor for AEAConcreteFileSystemPrimitives();
  v23[4] = &off_1000832C0;
  v23[0] = a1;
  v22[3] = type metadata accessor for AEAConcreteMobileKeyBagPrimitives();
  v22[4] = &off_100081BA0;
  v22[0] = a2;
  sub_100008380((uint64_t)v23, (uint64_t)v21);
  sub_100008380((uint64_t)v22, (uint64_t)v20);
  v6 = sub_100013D84((uint64_t)v21, v21[3]);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  v10 = sub_100013D84((uint64_t)v20, v20[3]);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = *v8;
  v15 = *v12;
  swift_retain(a1);
  swift_retain(a2);
  swift_unknownObjectRetain(a3);
  v16 = sub_10004A0A4(v14, v15, a3);
  sub_100004D60(v20);
  sub_100004D60(v21);
  v17 = sub_100004D20(&qword_100092AE0);
  v18 = swift_allocObject(v17, 24, 7);
  *(_QWORD *)(v18 + 16) = v16;
  sub_100004D60(v23);
  sub_100004D60(v22);
  return v18;
}

uint64_t sub_10004A3B8(uint64_t a1, uint64_t a2, __int128 *a3, char a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  id v15;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v18 = type metadata accessor for AEAConcreteLaunchServicesPrimitives();
  v19 = &off_100087860;
  *(_QWORD *)&v17 = a1;
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v10 = (void *)qword_100093EB8;
  v11 = sub_100004D20(&qword_1000925F0);
  v12 = (_QWORD *)swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12[3] = &_swiftEmptyDictionarySingleton;
  v12[4] = &_swiftEmptyDictionarySingleton;
  v13 = (char *)v12 + *(_QWORD *)(*v12 + 112);
  v14 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v12[2] = v10;
  *(_QWORD *)(a5 + 112) = v12;
  *(_QWORD *)(a5 + 128) = 0;
  *(_BYTE *)(a5 + 136) = 0;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_QWORD *)(a5 + 176) = 0;
  sub_1000084DC(&v17, a5 + 16);
  *(_QWORD *)(a5 + 56) = a2;
  *(_QWORD *)(a5 + 64) = &off_100085320;
  sub_1000084DC(a3, a5 + 72);
  *(_BYTE *)(a5 + 120) = a4 & 1;
  v15 = v10;
  return a5;
}

uint64_t sub_10004A4F4()
{
  uint64_t v0;

  sub_100004D60((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004A518(uint64_t a1)
{
  uint64_t v1;

  return sub_100049DBC(a1, (_QWORD *)(v1 + 16));
}

uint64_t destroy for AEAManagedConfigurationRestrictions(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for AEAManagedConfigurationRestrictions(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AEAManagedConfigurationRestrictions(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for AEAManagedConfigurationRestrictions(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AEAManagedConfigurationRestrictions(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAManagedConfigurationRestrictions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAManagedConfigurationRestrictions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAManagedConfigurationRestrictions()
{
  return &type metadata for AEAManagedConfigurationRestrictions;
}

void sub_10004A72C(uint64_t a1, unint64_t a2)
{
  Swift::UInt8 v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == 2)
  {
    v3 = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v3 = a2 & 1;
  }
  Hasher._combine(_:)(v3);
  if ((a2 & 0xFF00) == 0x200)
  {
    LOBYTE(v4) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v4 = (a2 >> 8) & 1;
  }
  Hasher._combine(_:)(v4);
  if ((a2 & 0xFF0000) == 0x20000)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v5 = WORD1(a2) & 1;
  }
  Hasher._combine(_:)(v5);
  if ((a2 & 0xFF000000) == 0x2000000)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v6 = BYTE3(a2) & 1;
  }
  Hasher._combine(_:)(v6);
  if ((a2 & 0xFF00000000) == 0x200000000)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v7 = HIDWORD(a2) & 1;
  }
  Hasher._combine(_:)(v7);
  if ((a2 & 0xFF0000000000) == 0x20000000000)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v8 = (a2 >> 40) & 1;
  }
  Hasher._combine(_:)(v8);
}

BOOL sub_10004A830(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_10004B248((uint64_t *)v5, (uint64_t *)v7);
}

uint64_t sub_10004A888(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  char v6;
  _OWORD v7[2];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_BYTE *)(a2 + 32);
  return sub_10004ABFC((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

Swift::Int sub_10004A8D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_10004A928(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10004A96C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10004A9C0()
{
  unsigned __int16 *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *(unsigned int *)(v0 + 1);
  v2 = *v0;
  Hasher.init(_seed:)(v4, 0);
  sub_10004A72C((uint64_t)v4, v2 | (v1 << 16));
  return Hasher._finalize()();
}

void sub_10004AA08(uint64_t a1)
{
  unsigned __int16 *v1;

  sub_10004A72C(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Int sub_10004AA18(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *(unsigned int *)(v1 + 1);
  v3 = *v1;
  Hasher.init(_seed:)(v5, a1);
  sub_10004A72C((uint64_t)v5, v3 | (v2 << 16));
  return Hasher._finalize()();
}

uint64_t sub_10004AA5C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10004AA78(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16), *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16));
}

uint64_t sub_10004AA78(uint64_t a1, unint64_t a2)
{
  if (a1 == 2)
  {
    if (a2 != 2)
      return 0;
  }
  else if (a2 == 2 || ((((a1 & 1) == 0) ^ a2) & 1) == 0)
  {
    return 0;
  }
  if ((a1 & 0xFF00) == 0x200)
  {
    if (BYTE1(a2) != 2)
      return 0;
  }
  else if (BYTE1(a2) == 2 || ((a1 & 0x100) == 0) == ((a2 >> 8) & 1))
  {
    return 0;
  }
  if ((a1 & 0xFF0000) == 0x20000)
  {
    if (BYTE2(a2) != 2)
      return 0;
  }
  else if (BYTE2(a2) == 2 || ((a1 & 0x10000) == 0) == ((a2 >> 16) & 1))
  {
    return 0;
  }
  if ((a1 & 0xFF000000) == 0x2000000)
  {
    if (BYTE3(a2) != 2)
      return 0;
  }
  else if (BYTE3(a2) == 2 || ((a1 & 0x1000000) == 0) == ((a2 >> 24) & 1))
  {
    return 0;
  }
  if ((a1 & 0xFF00000000) == 0x200000000)
  {
    if (BYTE4(a2) != 2)
      return 0;
  }
  else if (BYTE4(a2) == 2 || ((a1 & (unint64_t)&_mh_execute_header) == 0) == (BYTE4(a2) & 1))
  {
    return 0;
  }
  if ((a1 & 0xFF0000000000) == 0x20000000000)
  {
    if (BYTE5(a2) == 2)
      return 1;
  }
  else if (BYTE5(a2) != 2 && ((a1 & 0x10000000000) == 0) != ((a2 >> 40) & 1))
  {
    return 1;
  }
  return 0;
}

uint64_t sub_10004ABFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  _BOOL4 v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  _BOOL4 v17;
  int v18;
  int v19;
  _BOOL4 v20;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  int v34;
  _BOOL4 v35;
  int v36;
  int v37;
  _BOOL4 v38;
  int v39;
  int v40;
  _BOOL4 v41;
  int v42;
  int v43;
  _BOOL4 v44;
  int v45;
  int v46;
  _BOOL4 v47;
  int v48;
  int v49;
  _BOOL4 v50;
  int v51;
  int v52;
  _BOOL4 v53;
  int v54;
  int v55;
  _BOOL4 v56;
  int v57;
  int v58;
  _BOOL4 v59;
  int v60;
  int v61;
  _BOOL4 v62;
  int v63;
  int v64;
  _BOOL4 v65;
  int v66;
  int v67;
  _BOOL4 v68;
  int v69;
  int v70;
  _BOOL4 v71;
  int v72;
  int v73;
  _BOOL4 v74;
  int v75;
  int v76;
  _BOOL4 v77;
  int v78;
  int v79;
  _BOOL4 v80;
  int v81;
  int v82;
  _BOOL4 v83;
  unint64_t v84;
  unint64_t v85;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 2)
  {
    if (v3 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v5 = (v2 & 1) == 0;
    if (v3 == 2 || ((v5 ^ v3) & 1) == 0)
      return v4;
  }
  v6 = a1[1];
  v7 = a2[1];
  if (v6 == 2)
  {
    if (v7 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v8 = (v6 & 1) == 0;
    if (v7 == 2 || ((v8 ^ v7) & 1) == 0)
      return v4;
  }
  v9 = a1[2];
  v10 = a2[2];
  if (v9 == 2)
  {
    if (v10 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v11 = (v9 & 1) == 0;
    if (v10 == 2 || ((v11 ^ v10) & 1) == 0)
      return v4;
  }
  v12 = a1[3];
  v13 = a2[3];
  if (v12 == 2)
  {
    if (v13 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v14 = (v12 & 1) == 0;
    if (v13 == 2 || ((v14 ^ v13) & 1) == 0)
      return v4;
  }
  v15 = a1[4];
  v16 = a2[4];
  if (v15 == 2)
  {
    if (v16 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v17 = (v15 & 1) == 0;
    if (v16 == 2 || ((v17 ^ v16) & 1) == 0)
      return v4;
  }
  v18 = a1[5];
  v19 = a2[5];
  if (v18 == 2)
  {
    if (v19 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v20 = (v18 & 1) == 0;
    if (v19 == 2 || ((v20 ^ v19) & 1) == 0)
      return v4;
  }
  v21 = a1[6];
  v22 = a2[6];
  if (v21 == 2)
  {
    if (v22 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v23 = (v21 & 1) == 0;
    if (v22 == 2 || ((v23 ^ v22) & 1) == 0)
      return v4;
  }
  v24 = a1[7];
  v25 = a2[7];
  if (v24 == 2)
  {
    if (v25 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v26 = (v24 & 1) == 0;
    if (v25 == 2 || ((v26 ^ v25) & 1) == 0)
      return v4;
  }
  v27 = a1[8];
  v28 = a2[8];
  if (v27 == 2)
  {
    if (v28 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v29 = (v27 & 1) == 0;
    if (v28 == 2 || ((v29 ^ v28) & 1) == 0)
      return v4;
  }
  v30 = a1[9];
  v31 = a2[9];
  if (v30 == 2)
  {
    if (v31 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v32 = (v30 & 1) == 0;
    if (v31 == 2 || ((v32 ^ v31) & 1) == 0)
      return v4;
  }
  v33 = a1[10];
  v34 = a2[10];
  if (v33 == 2)
  {
    if (v34 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v35 = (v33 & 1) == 0;
    if (v34 == 2 || ((v35 ^ v34) & 1) == 0)
      return v4;
  }
  v36 = a1[11];
  v37 = a2[11];
  if (v36 == 2)
  {
    if (v37 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v38 = (v36 & 1) == 0;
    if (v37 == 2 || ((v38 ^ v37) & 1) == 0)
      return v4;
  }
  v39 = a1[12];
  v40 = a2[12];
  if (v39 == 2)
  {
    if (v40 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v41 = (v39 & 1) == 0;
    if (v40 == 2 || ((v41 ^ v40) & 1) == 0)
      return v4;
  }
  v42 = a1[13];
  v43 = a2[13];
  if (v42 == 2)
  {
    if (v43 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v44 = (v42 & 1) == 0;
    if (v43 == 2 || ((v44 ^ v43) & 1) == 0)
      return v4;
  }
  v45 = a1[14];
  v46 = a2[14];
  if (v45 == 2)
  {
    if (v46 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v47 = (v45 & 1) == 0;
    if (v46 == 2 || ((v47 ^ v46) & 1) == 0)
      return v4;
  }
  v48 = a1[15];
  v49 = a2[15];
  if (v48 == 2)
  {
    if (v49 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v50 = (v48 & 1) == 0;
    if (v49 == 2 || ((v50 ^ v49) & 1) == 0)
      return v4;
  }
  v51 = a1[16];
  v52 = a2[16];
  if (v51 == 2)
  {
    if (v52 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v53 = (v51 & 1) == 0;
    if (v52 == 2 || ((v53 ^ v52) & 1) == 0)
      return v4;
  }
  v54 = a1[17];
  v55 = a2[17];
  if (v54 == 2)
  {
    if (v55 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v56 = (v54 & 1) == 0;
    if (v55 == 2 || ((v56 ^ v55) & 1) == 0)
      return v4;
  }
  v57 = a1[18];
  v58 = a2[18];
  if (v57 == 2)
  {
    if (v58 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v59 = (v57 & 1) == 0;
    if (v58 == 2 || ((v59 ^ v58) & 1) == 0)
      return v4;
  }
  v60 = a1[19];
  v61 = a2[19];
  if (v60 == 2)
  {
    if (v61 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v62 = (v60 & 1) == 0;
    if (v61 == 2 || ((v62 ^ v61) & 1) == 0)
      return v4;
  }
  v63 = a1[20];
  v64 = a2[20];
  if (v63 == 2)
  {
    if (v64 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v65 = (v63 & 1) == 0;
    if (v64 == 2 || ((v65 ^ v64) & 1) == 0)
      return v4;
  }
  v66 = a1[21];
  v67 = a2[21];
  if (v66 == 2)
  {
    if (v67 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v68 = (v66 & 1) == 0;
    if (v67 == 2 || ((v68 ^ v67) & 1) == 0)
      return v4;
  }
  v69 = a1[22];
  v70 = a2[22];
  if (v69 == 2)
  {
    if (v70 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v71 = (v69 & 1) == 0;
    if (v70 == 2 || ((v71 ^ v70) & 1) == 0)
      return v4;
  }
  v72 = a1[23];
  v73 = a2[23];
  if (v72 == 2)
  {
    if (v73 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v74 = (v72 & 1) == 0;
    if (v73 == 2 || ((v74 ^ v73) & 1) == 0)
      return v4;
  }
  v75 = a1[24];
  v76 = a2[24];
  if (v75 == 2)
  {
    if (v76 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v77 = (v75 & 1) == 0;
    if (v76 == 2 || ((v77 ^ v76) & 1) == 0)
      return v4;
  }
  v78 = a1[25];
  v79 = a2[25];
  if (v78 == 2)
  {
    if (v79 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v80 = (v78 & 1) == 0;
    if (v79 == 2 || ((v80 ^ v79) & 1) == 0)
      return v4;
  }
  v81 = a1[26];
  v82 = a2[26];
  if (v81 == 2)
  {
    if (v82 != 2)
      return 0;
  }
  else
  {
    v4 = 0;
    v83 = (v81 & 1) == 0;
    if (v82 == 2 || ((v83 ^ v82) & 1) == 0)
      return v4;
  }
  v84 = *(unsigned int *)(a1 + 27) | ((unint64_t)*(unsigned __int16 *)(a1 + 31) << 32);
  v85 = *(unsigned int *)(a2 + 27) | ((unint64_t)*(unsigned __int16 *)(a2 + 31) << 32);
  if (v84 == 3)
  {
    if (v85 != 3)
      return 0;
  }
  else if (v85 == 3 || (sub_10004AA78(v84, v85) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

BOOL sub_10004B248(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  __int16 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  __int16 v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  __int16 v41;
  char v42;
  int v43;
  __int16 v44;
  __int16 v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  __int16 v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  __int16 v60;
  char v61;
  int v62;
  __int16 v63;

  v4 = *a1;
  v5 = *a2;
  v6 = *a2;
  if (*a1 == 3)
  {
    if (v6 != 3)
      return 0;
  }
  else
  {
    if (v6 == 3)
      return 0;
    v21 = BYTE2(*a1);
    v22 = BYTE3(v4);
    v23 = BYTE4(v4);
    v24 = BYTE5(v4);
    v25 = BYTE6(v4);
    v7 = a1[1];
    v8 = a1[2];
    v20 = v4;
    v26 = HIBYTE(v4);
    v28 = BYTE2(v7);
    v29 = BYTE3(v7);
    v30 = BYTE4(v7);
    v31 = BYTE5(v7);
    v32 = BYTE6(v7);
    v9 = a1[3];
    v27 = v7;
    v33 = HIBYTE(v7);
    v35 = BYTE2(v8);
    v36 = BYTE3(v8);
    v37 = BYTE4(v8);
    v38 = BYTE5(v8);
    v39 = BYTE6(v8);
    v10 = *((unsigned __int8 *)a1 + 32);
    v34 = v8;
    v40 = HIBYTE(v8);
    *((_QWORD *)&v11 + 1) = v10;
    *(_QWORD *)&v11 = v9;
    v41 = v9;
    v42 = BYTE2(v9);
    v43 = v9 >> 24;
    v44 = (unint64_t)(v11 >> 24) >> 32;
    v46 = BYTE2(v5);
    v47 = BYTE3(v5);
    v48 = BYTE4(v5);
    v49 = BYTE5(v5);
    v50 = BYTE6(v5);
    v12 = a2[1];
    v13 = a2[2];
    v45 = v5;
    v51 = HIBYTE(v5);
    v52 = v12;
    v54 = BYTE2(v13);
    v55 = BYTE3(v13);
    v56 = BYTE4(v13);
    v57 = BYTE5(v13);
    v58 = BYTE6(v13);
    v14 = a2[3];
    v53 = v13;
    v59 = HIBYTE(v13);
    *((_QWORD *)&v11 + 1) = *((unsigned __int8 *)a2 + 32);
    *(_QWORD *)&v11 = v14;
    v60 = v14;
    v61 = BYTE2(v14);
    v63 = (unint64_t)(v11 >> 24) >> 32;
    v62 = v14 >> 24;
    if ((sub_10004ABFC((unsigned __int8 *)&v20, (unsigned __int8 *)&v45) & 1) == 0)
      return 0;
  }
  v15 = (_QWORD *)a1[5];
  v16 = (_QWORD *)a2[5];
  if (v15)
  {
    if (!v16 || (sub_100006568(v15, v16) & 1) == 0)
      return 0;
  }
  else if (v16)
  {
    return 0;
  }
  v17 = (_QWORD *)a1[6];
  v18 = (_QWORD *)a2[6];
  if (v17)
    return v18 && (sub_100006568(v17, v18) & 1) != 0;
  return !v18;
}

uint64_t initializeBufferWithCopyOfBuffer for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[6])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 6) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 6) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures()
{
  return &type metadata for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures;
}

ValueMetadata *type metadata accessor for AEAManagedConfigurationRestrictions.Application()
{
  return &type metadata for AEAManagedConfigurationRestrictions.Application;
}

__n128 initializeWithCopy for AEAManagedConfigurationRestrictions.Features(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AEAManagedConfigurationRestrictions.Features(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[33])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAManagedConfigurationRestrictions.Features(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAManagedConfigurationRestrictions.Features()
{
  return &type metadata for AEAManagedConfigurationRestrictions.Features;
}

unint64_t sub_10004B664()
{
  unint64_t result;

  result = qword_100092AE8;
  if (!qword_100092AE8)
  {
    result = swift_getWitnessTable(&unk_100068790, &type metadata for AEAManagedConfigurationRestrictions.Application);
    atomic_store(result, (unint64_t *)&qword_100092AE8);
  }
  return result;
}

unint64_t sub_10004B6AC()
{
  unint64_t result;

  result = qword_100092AF0;
  if (!qword_100092AF0)
  {
    result = swift_getWitnessTable(&unk_1000687F8, &type metadata for AEAManagedConfigurationRestrictions.Features.CalculatorFeatures);
    atomic_store(result, (unint64_t *)&qword_100092AF0);
  }
  return result;
}

unint64_t sub_10004B6F4()
{
  unint64_t result;

  result = qword_100092AF8;
  if (!qword_100092AF8)
  {
    result = swift_getWitnessTable(&unk_1000688B4, &type metadata for AEAAssessmentStateActionError);
    atomic_store(result, (unint64_t *)&qword_100092AF8);
  }
  return result;
}

uint64_t sub_10004B738()
{
  _BYTE *v0;
  uint64_t *v1;
  uint64_t v2;

  if ((*v0 & 1) != 0)
  {
    if (qword_10008E630 != -1)
      swift_once(&qword_10008E630, sub_1000314C8);
    v1 = &qword_100093EE0;
  }
  else
  {
    if (qword_10008E628 != -1)
      swift_once(&qword_10008E628, sub_1000313B8);
    v1 = &qword_100093ED0;
  }
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t storeEnumTagSinglePayload for AEAAssessmentStateActionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10004B81C + 4 * byte_100068865[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004B850 + 4 * byte_100068860[v4]))();
}

uint64_t sub_10004B850(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004B858(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004B860);
  return result;
}

uint64_t sub_10004B86C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004B874);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10004B878(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004B880(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AEAAssessmentStateActionError()
{
  return &type metadata for AEAAssessmentStateActionError;
}

unint64_t sub_10004B8A0()
{
  unint64_t result;

  result = qword_100092B00;
  if (!qword_100092B00)
  {
    result = swift_getWitnessTable(&unk_100068960, &type metadata for AEAAssessmentStateActionError);
    atomic_store(result, (unint64_t *)&qword_100092B00);
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAAssessmentStateActivation()
{
  return &type metadata for AEAAssessmentStateActivation;
}

uint64_t sub_10004B90C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = type metadata accessor for URL(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004B96C, 0, 0);
}

uint64_t sub_10004B96C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFNotificationCenter *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(AEFileSystem), "assessmentModeFileURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = sub_1000060F4((_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 48));
  v4 = *(void **)(*v3 + 16);
  URL.path.getter(v3);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  LODWORD(v6) = objc_msgSend(v4, "fileExistsAtPath:", v7);

  if ((_DWORD)v6)
  {
    sub_1000060F4((_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 48));
    sub_100014F24();
    v9 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 24);
    v11 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(v11, AEAssessmentStateDidChangeNotificationName, 0, 0, 1u);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_task_dealloc(v8);
  }
  else
  {
    v12 = sub_10004B6F4();
    v13 = swift_allocError(&type metadata for AEAAssessmentStateActionError, v12, 0, 0);
    *v14 = 1;
    swift_willThrow(v13);
    v15 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(v15, *(_QWORD *)(v0 + 24));
    swift_task_dealloc(v15);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BAFC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100092B2C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100014AC4;
  return sub_10004B90C();
}

double sub_10004BB40@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  NSString v5;
  id v6;
  _QWORD *v7;
  double result;

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(a1, "numberForKey:", v5);

  if (v6)
  {
    if (objc_msgSend(v6, "BOOLValue"))
    {
      *(_QWORD *)(a2 + 24) = &type metadata for AEAAssessmentStateDeactivation;
      *(_QWORD *)(a2 + 32) = &off_100086338;
      v7 = (_QWORD *)swift_allocObject(&unk_100086280, 120, 7);
      *(_QWORD *)a2 = v7;
      sub_100008380(v2 + 24, (uint64_t)(v7 + 5));
      sub_100008380(v2 + 64, (uint64_t)(v7 + 10));

      v7[2] = 0xD00000000000002CLL;
      v7[3] = 0x800000010006D990;
      v7[4] = 5;
      return result;
    }

  }
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_10004BC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for URL(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004BCEC, 0, 0);
}

uint64_t sub_10004BCEC()
{
  _QWORD *v0;
  void *v1;
  Class isa;
  NSString v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD *v29;
  __CFNotificationCenter *v30;
  _QWORD *v31;
  uint64_t (*v32)(void);

  v1 = (void *)v0[4];
  sub_10000622C();
  isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setNumber:forKey:", isa, v3);

  v0[2] = 0;
  v4 = objc_msgSend(v1, "persistWithError:", v0 + 2);
  v5 = (void *)v0[2];
  if (!v4)
  {
    v22 = v5;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v23);
    goto LABEL_6;
  }
  v6 = v0[5];
  v7 = (void *)objc_opt_self(AEFileSystem);
  v8 = v5;
  v9 = objc_msgSend(v7, "assessmentModeFileURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v10 = v6 + 24;
  v11 = sub_1000060F4((_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 48));
  v12 = *(void **)(*v11 + 16);
  URL.path.getter(v11);
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  LOBYTE(v12) = objc_msgSend(v12, "fileExistsAtPath:", v15);

  v16 = v0[8];
  if ((v12 & 1) != 0)
  {
    v18 = v0[6];
    v17 = v0[7];
    v19 = sub_10004B6F4();
    v20 = swift_allocError(&type metadata for AEAAssessmentStateActionError, v19, 0, 0);
    *v21 = 0;
    swift_willThrow(v20);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
LABEL_6:
    swift_task_dealloc(v0[8]);
    v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  sub_1000060F4((_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 48));
  sub_10004C010(v16, 0, 0xC000000000000000);
  v25 = v0[7];
  v24 = v0[8];
  v26 = v0[6];
  v28 = v0[5];
  v29 = (_QWORD *)v0[3];
  v30 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(v30, AEAssessmentStateDidChangeNotificationName, 0, 0, 1u);

  v29[3] = &type metadata for AEAAssessmentStateDeactivation;
  v29[4] = &off_100086338;
  v31 = (_QWORD *)swift_allocObject(&unk_100086280, 120, 7);
  *v29 = v31;
  sub_100008380(v10, (uint64_t)(v31 + 5));
  sub_100008380(v28 + 64, (uint64_t)(v31 + 10));
  v31[2] = 0xD00000000000002CLL;
  v31[3] = 0x800000010006D990;
  v31[4] = 5;
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  swift_task_dealloc(v24);
  v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

uint64_t sub_10004C010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t inited;
  NSString *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  _BYTE v58[24];
  _BYTE v59[24];
  char v60[40];
  _QWORD v61[3];
  uint64_t v62;
  _UNKNOWN **v63;
  uint64_t v64;

  v7 = sub_100004D20(&qword_100092B18);
  v8 = __chkstk_darwin(v7);
  v54 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v55 = (char *)&v49 - v10;
  v53 = type metadata accessor for URL(0);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v50 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for URLResourceValues(0);
  v52 = *(_QWORD *)(v64 - 8);
  v12 = __chkstk_darwin(v64);
  v56 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v57 = (char *)&v49 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v49 - v16;
  v18 = type metadata accessor for CocoaError.Code(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_100014DC0(a2, a3, a1, 2);
  if (v3)
  {
    v23 = swift_errorRetain(v3);
    static CocoaError.fileWriteFileExists.getter(v23);
    v24 = sub_1000154E4();
    v25 = static _ErrorCodeProtocol.~= infix(_:_:)(v21, v3, v18, v24);
    swift_errorRelease(v3);
    result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    if ((v25 & 1) != 0)
    {
      swift_errorRelease(v3);
      v26 = sub_100004D20(&qword_100090CD0);
      inited = swift_initStackObject(v26, v60);
      *(_OWORD *)(inited + 16) = xmmword_100065EB0;
      *(_QWORD *)(inited + 32) = NSURLContentModificationDateKey;
      v28 = NSURLContentModificationDateKey;
      v29 = sub_10002335C(inited);
      swift_setDeallocating(inited);
      type metadata accessor for URLResourceKey(0);
      swift_arrayDestroy(inited + 32, 1, v30);
      URL.resourceValues(forKeys:)(v29);
      v31 = v51;
      v32 = v50;
      v33 = a1;
      v34 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v33, v53);
      v35 = v52;
      v49 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
      v49(v57, v17, v64);
      v36 = type metadata accessor for AEAConcreteFileSystemPrimitives.ConcreteURLResourceValues(0);
      v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
      (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v37 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingURL, v32, v34);
      v38 = v64;
      (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v37+ OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues, v57, v64);
      v62 = v36;
      v63 = &off_100083290;
      v61[0] = v37;
      v39 = *(void (**)(char *, uint64_t))(v35 + 8);
      v39(v17, v38);
      v40 = swift_bridgeObjectRelease(v29);
      v41 = (uint64_t)v55;
      Date.init()(v40);
      v42 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 0, 1, v42);
      v43 = *(_QWORD *)sub_100013D84((uint64_t)v61, v62);
      v44 = v54;
      sub_10004C550(v41, v54);
      swift_beginAccess(v43+ OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues, v59, 33, 0);
      URLResourceValues.contentModificationDate.setter(v44);
      swift_endAccess(v59);
      sub_10004C598(v41);
      v45 = sub_1000060F4(v61, v62);
      v46 = *v45;
      v47 = *v45
          + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingValues;
      swift_beginAccess(v47, v59, 0, 0);
      v48 = v56;
      v49(v56, (char *)v47, v38);
      swift_beginAccess(v46 + OBJC_IVAR____TtCC15assessmentagent31AEAConcreteFileSystemPrimitives25ConcreteURLResourceValues_backingURL, v58, 33, 0);
      URL.setResourceValues(_:)(v48);
      v39(v48, v38);
      swift_endAccess(v58);
      return sub_100004D60(v61);
    }
  }
  return result;
}

uint64_t sub_10004C4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100092B14);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000CB20;
  return sub_10004BC5C(a1, a2);
}

uint64_t sub_10004C51C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_100004D60(v0 + 5);
  sub_100004D60(v0 + 10);
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10004C550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100092B18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004C598(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20(&qword_100092B18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for AEAAssessmentStateDeactivation()
{
  return &type metadata for AEAAssessmentStateDeactivation;
}

uint64_t destroy for AEAStageManagerActivation(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return sub_100004D60((_QWORD *)(a1 + 24));
}

__n128 initializeWithTake for AEAStageManagerActivation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AEAStageManagerActivation()
{
  return &type metadata for AEAStageManagerActivation;
}

uint64_t sub_10004C648()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_10004C660, 0, 0);
}

uint64_t sub_10004C660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100008380(*(_QWORD *)(v0 + 56) + 24, v0 + 16);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  sub_100013D84(v0 + 16, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(1, v1, v2);
  sub_100004D60((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C6D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v5;

  swift_getObjectType(a1);
  result = sub_10000C220();
  if ((result & 1) != 0)
  {
    *(_QWORD *)(a2 + 24) = &type metadata for AEAStageManagerDeactivation;
    *(_QWORD *)(a2 + 32) = &off_100086588;
    v5 = (_QWORD *)swift_allocObject(&unk_1000864D0, 80, 7);
    *(_QWORD *)a2 = v5;
    result = sub_100008380(v2 + 24, (uint64_t)(v5 + 5));
    v5[2] = 0xD00000000000002ALL;
    v5[3] = 0x800000010006DA00;
    v5[4] = 5;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10004C7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return swift_task_switch(sub_10004C80C, 0, 0);
}

uint64_t sub_10004C80C()
{
  _QWORD *v0;
  void *v1;
  NSString v2;
  void *v3;
  unsigned int v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD, uint64_t, uint64_t);
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  id v14;
  uint64_t v15;

  sub_100008380(v0[10] + 24, (uint64_t)(v0 + 2));
  if (qword_10008E6F8 != -1)
    swift_once(&qword_10008E6F8, sub_1000605EC);
  v1 = (void *)qword_100094058;
  v2 = String._bridgeToObjectiveC()();
  LODWORD(v1) = objc_msgSend(v1, "BOOLForKey:", v2);

  if ((_DWORD)v1)
  {
    v3 = (void *)v0[9];
    swift_getObjectType(v3);
    sub_10000C19C(1);
    v0[7] = 0;
    v4 = objc_msgSend(v3, "persistWithError:", v0 + 7);
    v5 = (void *)v0[7];
    if (!v4)
    {
      v14 = v5;
      _convertNSErrorToError(_:)(v5);

      swift_willThrow(v15);
      sub_100004D60(v0 + 2);
      v13 = (uint64_t (*)(void))v0[1];
      return v13();
    }
    v6 = (_QWORD *)v0[8];
    v7 = v0[5];
    v8 = v0[6];
    sub_100013D84((uint64_t)(v0 + 2), v7);
    v9 = *(void (**)(_QWORD, uint64_t, uint64_t))(v8 + 16);
    v10 = v5;
    v9(0, v7, v8);
    v6[3] = &type metadata for AEAStageManagerDeactivation;
    v6[4] = &off_100086588;
    v11 = (_QWORD *)swift_allocObject(&unk_1000864D0, 80, 7);
    *v6 = v11;
    sub_100008380((uint64_t)(v0 + 2), (uint64_t)(v11 + 5));
    v11[2] = 0xD00000000000002ALL;
    v11[3] = 0x800000010006DA00;
    v11[4] = 5;
  }
  else
  {
    v12 = v0[8];
    *(_QWORD *)(v12 + 32) = 0;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
  }
  sub_100004D60(v0 + 2);
  v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10004CA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100092B3C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10000CB20;
  v6[9] = a2;
  v6[10] = v2;
  v6[8] = a1;
  return swift_task_switch(sub_10004C80C, 0, 0);
}

uint64_t sub_10004CACC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_100004D60((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t initializeWithCopy for AEAExternalDisplayActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = a2 + 24;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain(v3);
  v7(a1 + 24, v4, v6);
  return a1;
}

_QWORD *assignWithCopy for AEAExternalDisplayActivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  sub_10000C54C(a1 + 3, a2 + 3);
  return a1;
}

uint64_t assignWithTake for AEAExternalDisplayActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  sub_100004D60((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAExternalDisplayActivation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAExternalDisplayActivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAStageManagerDeactivation()
{
  return &type metadata for AEAStageManagerDeactivation;
}

uint64_t sub_10004CCD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  v8 = _getErrorEmbeddedNSError<A>(_:)(v6, a1, a2);
  if (v8)
  {
    v9 = v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    v9 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a1);
  }
  v11 = (void *)_convertErrorToNSError(_:)(v9);
  swift_errorRelease(v9);
  v12 = objc_msgSend(v11, "ae_verboseDescription");

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  return v13;
}

uint64_t sub_10004CDF0()
{
  uint64_t v0;

  if (qword_10008E638 != -1)
    swift_once(&qword_10008E638, sub_1000315D8);
  v0 = qword_100093EF0;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100093EF8);
  return v0;
}

uint64_t sub_10004CE4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  v1 = (_QWORD *)v0;
  if (*(_BYTE *)(v0 + 64) == 1)
  {
    *(_BYTE *)(v0 + 64) = 0;
    v2 = *(_QWORD *)(v0 + 72);
    if (v2)
    {
      swift_retain(v1[9]);
      AnyCancellable.cancel()();
      swift_release(v2);
      v3 = v1[9];
    }
    else
    {
      v3 = 0;
    }
    v1[9] = 0;
    swift_release(v3);
    if (qword_10008E5E0 != -1)
      swift_once(&qword_10008E5E0, sub_10001552C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000B164(v4, (uint64_t)qword_100093E18);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Restoring media commands to all processes", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_10004F7EC((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v9);
  }
  sub_100004D60(v1 + 2);
  swift_release(v1[7]);
  swift_release(v1[9]);
  return swift_deallocClassInstance(v1, 80, 7);
}

uint64_t type metadata accessor for AEARestrictMediaAssertion()
{
  return objc_opt_self(_TtC15assessmentagentP33_805CA3E2EA204F0AE738F6962258085725AEARestrictMediaAssertion);
}

void sub_10004CFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(v0 + 64) & 1) == 0)
  {
    v1 = v0;
    *(_BYTE *)(v0 + 64) = 1;
    v7 = *(_QWORD *)(v0 + 56);
    v2 = swift_allocObject(&unk_1000865D0, 24, 7);
    swift_weakInit(v2 + 16, v0);
    swift_retain(v7);
    v3 = sub_100004D20(&qword_100090D00);
    v4 = sub_10004D140();
    v5 = Publisher<>.sink(receiveValue:)(sub_10004D138, v2, v3, v4);
    swift_release(v2);
    swift_release(v7);
    v6 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 72) = v5;
    swift_release(v6);
  }
}

unint64_t sub_10004D074()
{
  unint64_t result;

  result = qword_100092C50;
  if (!qword_100092C50)
  {
    result = swift_getWitnessTable(&unk_100068B24, &type metadata for AEAMediaActionError);
    atomic_store(result, (unint64_t *)&qword_100092C50);
  }
  return result;
}

uint64_t sub_10004D0B8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004D0DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10004D824(v2);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10004D138(uint64_t *a1)
{
  uint64_t v1;

  return sub_10004D0DC(a1, v1);
}

unint64_t sub_10004D140()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090D08;
  if (!qword_100090D08)
  {
    v1 = sub_100005520(&qword_100090D00);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100090D08);
  }
  return result;
}

uint64_t sub_10004D18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_100092C84);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100014AC4;
  v3[2] = v2;
  return swift_task_switch(sub_10004D6F0, 0, 0);
}

uint64_t sub_10004D1EC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[12] = a1;
  v2[13] = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v2[14] = v3;
  *v3 = v2;
  v3[1] = sub_10004D270;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0x6C6C416573756170, 0xEA00000000002928, sub_10004F638, 0, (char *)&type metadata for () + 8);
}

uint64_t sub_10004D270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10004D494;
  else
    v3 = sub_10004D2D4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10004D2D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v17;

  v1 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD **)(v0 + 96);
  sub_100008380(v1 + 24, v0 + 16);
  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = sub_100013D84(v0 + 16, v3);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v6, v4, v3);
  v7 = *v6;
  v8 = type metadata accessor for AEAConcreteMediaPrimitives();
  *(_QWORD *)(v0 + 80) = v8;
  *(_QWORD *)(v0 + 88) = &off_100086B58;
  *(_QWORD *)(v0 + 56) = v7;
  v9 = type metadata accessor for AEARestrictMediaAssertion();
  v10 = swift_allocObject(v9, 80, 7);
  v11 = sub_100013D84(v0 + 56, v8);
  v12 = *(_QWORD *)(v8 - 8);
  v13 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(v13, v11, v8);
  v14 = *v13;
  *(_QWORD *)(v10 + 40) = v8;
  *(_QWORD *)(v10 + 48) = &off_100086B58;
  *(_QWORD *)(v10 + 56) = v2;
  *(_QWORD *)(v10 + 16) = v14;
  *(_BYTE *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = 0;
  swift_retain(v2);
  sub_100004D60((_QWORD *)(v0 + 56));
  swift_task_dealloc(v13);
  sub_100004D60((_QWORD *)(v0 + 16));
  swift_task_dealloc(v6);
  sub_10004CFB0();
  v17[3] = &type metadata for AEARestrictMediaDeactivation;
  v17[4] = &off_100086800;
  v15 = (_QWORD *)swift_allocObject(&unk_100086748, 48, 7);
  *v17 = v15;
  v15[2] = 0xD000000000000022;
  v15[3] = 0x800000010006DAB0;
  v15[4] = 4;
  v15[5] = v10;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D494()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = sub_10004D074();
  v3 = swift_allocError(&type metadata for AEAMediaActionError, v2, 0, 0);
  swift_willThrow(v3);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D4FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100092C74);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000CB20;
  return sub_10004D1EC(a1);
}

uint64_t sub_10004D550(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_10004D5F4(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10004D6D8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10004D6F0, 0, 0);
}

uint64_t sub_10004D6F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v1 + 64) == 1)
  {
    *(_BYTE *)(v1 + 64) = 0;
    v2 = *(_QWORD *)(v1 + 72);
    if (v2)
    {
      swift_retain(*(_QWORD *)(v1 + 72));
      AnyCancellable.cancel()();
      swift_release(v2);
      v3 = *(_QWORD *)(v1 + 72);
    }
    else
    {
      v3 = 0;
    }
    *(_QWORD *)(v1 + 72) = 0;
    swift_release(v3);
    if (qword_10008E5E0 != -1)
      swift_once(&qword_10008E5E0, sub_10001552C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000B164(v4, (uint64_t)qword_100093E18);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Restoring media commands to all processes", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_10004F7EC((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v9);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004D824(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int64_t v20;
  int v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD *v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v2 = type metadata accessor for AEAParticipant(0);
  v46 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (id *)((char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v45 = (uint64_t)&v43 - v6;
  if (qword_10008E5E0 != -1)
    goto LABEL_19;
  while (1)
  {
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000B164(v7, (uint64_t)qword_100093E18);
    v9 = swift_bridgeObjectRetain_n(a1, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = (_QWORD *)swift_slowAlloc(32, -1);
      v48 = v13;
      *(_DWORD *)v12 = 136446210;
      v44 = v12 + 4;
      v14 = sub_100021824();
      swift_bridgeObjectRetain(a1);
      v16 = Set.description.getter(v15, v2, v14);
      v18 = v17;
      swift_bridgeObjectRelease(a1);
      v47 = sub_100059C74(v16, v18, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v44, v12 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Restricting media commands to participants: %{public}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    v2 = *(_QWORD *)(a1 + 16);
    v19 = _swiftEmptyArrayStorage;
    if (!v2)
      break;
    v44 = (uint8_t *)v8;
    v48 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v20 = sub_10004D550(a1);
    v22 = v21;
    v24 = v23 & 1;
    while ((v20 & 0x8000000000000000) == 0 && v20 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        goto LABEL_17;
      if (*(_DWORD *)(a1 + 36) != v22)
        goto LABEL_18;
      v25 = v45;
      sub_100018848(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v46 + 72) * v20, v45);
      sub_100023A48(v25, (uint64_t)v5);
      v26 = *v5;
      v27 = sub_10001888C((uint64_t)v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      v28 = v48[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
      v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      specialized ContiguousArray._endMutation()(v29);
      v30 = sub_10004D5F4(v20, v22, v24 & 1, a1);
      v20 = v30;
      v22 = v31;
      v24 = v32 & 1;
      if (!--v2)
      {
        sub_100013A70(v30, v31, v32 & 1);
        v19 = v48;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    swift_once(&qword_10008E5E0, sub_10001552C);
  }
LABEL_13:
  v33 = sub_10004F7EC((uint64_t)v19);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRetain(v33);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = (_QWORD *)swift_slowAlloc(32, -1);
    v48 = v38;
    *(_DWORD *)v37 = 136446210;
    sub_10004DCC8();
    v39 = swift_bridgeObjectRetain(v33);
    v40 = Array.description.getter(v39);
    v42 = v41;
    swift_bridgeObjectRelease(v33);
    v47 = sub_100059C74(v40, v42, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease_n(v33, 2);
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Successfully restricted media commands to participants with audit tokens: %{public}s", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v33, 2);
  }
}

unint64_t sub_10004DCC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092C58;
  if (!qword_100092C58)
  {
    v1 = objc_opt_self(AEAAuditToken);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100092C58);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AEAMediaActionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10004DD44 + 4 * byte_100068A90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10004DD64 + 4 * byte_100068A95[v4]))();
}

_BYTE *sub_10004DD44(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10004DD64(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10004DD6C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10004DD74(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10004DD7C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10004DD84(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AEAMediaActionError()
{
  return &type metadata for AEAMediaActionError;
}

unint64_t sub_10004DDA4()
{
  unint64_t result;

  result = qword_100092C60;
  if (!qword_100092C60)
  {
    result = swift_getWitnessTable(&unk_100068BC4, &type metadata for AEAMediaActionError);
    atomic_store(result, (unint64_t *)&qword_100092C60);
  }
  return result;
}

uint64_t destroy for AEARestrictMediaActivation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  sub_100004D60(a1 + 3);
  return swift_release(a1[8]);
}

uint64_t initializeWithCopy for AEARestrictMediaActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = a2 + 24;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain(v4);
  v8(a1 + 24, v5, v7);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  swift_retain(v9);
  return a1;
}

_QWORD *assignWithCopy for AEARestrictMediaActivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  sub_10000C54C(a1 + 3, a2 + 3);
  v6 = a2[8];
  v7 = a1[8];
  a1[8] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

uint64_t assignWithTake for AEARestrictMediaActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  sub_100004D60((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEARestrictMediaActivation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEARestrictMediaActivation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEARestrictMediaActivation()
{
  return &type metadata for AEARestrictMediaActivation;
}

uint64_t sub_10004E01C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

ValueMetadata *type metadata accessor for AEARestrictMediaDeactivation()
{
  return &type metadata for AEARestrictMediaDeactivation;
}

uint64_t sub_10004E058(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4;
  char v5;

  v4 = a1;
  v5 = a2 & 1;
  return a3(&v4);
}

uint64_t sub_10004E090(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  NSString v28;
  void *v29;
  id v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  uint64_t (*v36)();
  uint64_t v37;

  v3 = v2;
  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000B164(v6, (uint64_t)qword_100093E18);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Beginning task for verifying agent read permission before proceeding", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = v3[16];
  v12 = v3[17];
  v3[16] = a1;
  v3[17] = a2;
  swift_retain(a2);
  sub_100008370(v11, v12);
  sub_10004E450();
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v13 = (void *)qword_100093EB8;
  v14 = swift_allocObject(&unk_100086900, 24, 7);
  result = swift_weakInit(v14 + 16, v3);
  v16 = kMobileKeyBagLockStatusNotifyToken;
  if (kMobileKeyBagLockStatusNotifyToken)
  {
    swift_retain(v14);
    String.init(cString:)(v16);
    v18 = v17;
    v19 = v13;
    swift_retain(v14);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    v36 = sub_10004F0D4;
    v37 = v14;
    v32 = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_10002448C;
    v35 = &unk_100086940;
    v21 = _Block_copy(&v32);
    v22 = (void *)objc_opt_self(AESystemNotificationObservation);
    v23 = objc_msgSend(v22, "observationWithNotificationName:queue:notificationHandler:", v20, v19, v21);

    _Block_release(v21);
    swift_release(v37);
    swift_release_n(v14, 2);
    v24 = v3[14];
    v3[14] = v23;
    swift_unknownObjectRelease(v24);
    v25 = (void *)qword_100093EB8;
    v26 = swift_allocObject(&unk_100086900, 24, 7);
    swift_weakInit(v26 + 16, v3);
    swift_retain_n(v26, 2);
    v27 = v25;
    v28 = String._bridgeToObjectiveC()();
    v36 = sub_10004F0D4;
    v37 = v26;
    v32 = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_10002448C;
    v35 = &unk_100086968;
    v29 = _Block_copy(&v32);
    v30 = objc_msgSend(v22, "observationWithNotificationName:queue:notificationHandler:", v28, v27, v29);

    _Block_release(v29);
    swift_release(v37);
    swift_release_n(v26, 2);
    v31 = v3[15];
    v3[15] = v30;
    swift_unknownObjectRelease(v31);
    result = sub_10004E9D4();
    if ((result & 1) != 0)
      return sub_10004E728();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004E3F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    if ((sub_10004E9D4() & 1) != 0)
      sub_10004E728();
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_10004E450()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10;

  v1 = *(void **)(v0 + 104);
  if (v1)
    objc_msgSend(v1, "cancel");
  v2 = *(void **)(v0 + 96);
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v3 = qword_100093EB8;
  v4 = swift_allocObject(&unk_100086900, 24, 7);
  swift_weakInit(v4 + 16, v0);
  v9[4] = sub_10004F0B4;
  v10 = v4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_10002448C;
  v9[3] = &unk_100086918;
  v5 = _Block_copy(v9);
  swift_release(v10);
  v6 = objc_msgSend(v2, "scheduledTimerWithDuration:queue:handler:", v3, v5, 1800.0);
  _Block_release(v5);
  v7 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 104) = v6;
  return swift_unknownObjectRelease(v7);
}

uint64_t sub_10004E574(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_10004E5C8();
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_10004E5C8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000B164(v0, (uint64_t)qword_100093E18);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Permission polling timer did fire", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = sub_10004E9D4();
  if ((v5 & 1) != 0)
    return sub_10004E728();
  v7 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Agent still does not have read permission. Restarting timer…", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  return sub_10004E450();
}

uint64_t sub_10004E728()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t result;
  void (*v11)(_QWORD, _QWORD);
  uint64_t v12;

  v1 = v0;
  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000B164(v2, (uint64_t)qword_100093E18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Agent has read permission. Proceeding…", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = (void *)v1[13];
  if (v7)
  {
    objc_msgSend(v7, "cancel");
    v7 = (void *)v1[13];
  }
  v1[13] = 0;
  swift_unknownObjectRelease(v7);
  v8 = (void *)v1[14];
  if (v8)
  {
    objc_msgSend(v8, "invalidate");
    v8 = (void *)v1[14];
  }
  v1[14] = 0;
  swift_unknownObjectRelease(v8);
  v9 = (void *)v1[15];
  if (v9)
  {
    objc_msgSend(v9, "invalidate");
    v9 = (void *)v1[15];
  }
  v1[15] = 0;
  result = swift_unknownObjectRelease(v9);
  v11 = (void (*)(_QWORD, _QWORD))v1[16];
  if (v11)
  {
    v12 = v1[17];
    v1[16] = 0;
    v1[17] = 0;
    swift_retain(v12);
    sub_100008370((uint64_t)v11, v12);
    v11(0, 0);
    return sub_100008370((uint64_t)v11, v12);
  }
  return result;
}

uint64_t sub_10004E8A0()
{
  _QWORD *v0;

  sub_100004D60(v0 + 2);
  sub_100004D60(v0 + 7);
  swift_unknownObjectRelease(v0[12]);
  swift_unknownObjectRelease(v0[13]);
  swift_unknownObjectRelease(v0[14]);
  swift_unknownObjectRelease(v0[15]);
  sub_100008370(v0[16], v0[17]);
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t type metadata accessor for AEAWaitForReadPermissionTask()
{
  return objc_opt_self(_TtC15assessmentagent28AEAWaitForReadPermissionTask);
}

uint64_t sub_10004E914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject(&unk_1000868D8, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_retain(a2);
  sub_10004E090((uint64_t)sub_10004E99C, v4);
  return swift_release(v4);
}

uint64_t sub_10004E978()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004E99C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_10004E9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;

  v0 = type metadata accessor for CocoaError.Code(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(AEFileSystem), "assessmentModeFileURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = Data.init(contentsOf:options:)(v4, 0);
  sub_100006118(v6, v7);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10000B164(v8, (uint64_t)qword_100093E18);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Agent has read permission and needs recovery", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  return 1;
}

uint64_t sub_10004F090()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004F0B4()
{
  uint64_t v0;

  return sub_10004E574(v0);
}

uint64_t sub_10004F0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004F0CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004F0D4()
{
  uint64_t v0;

  return sub_10004E3F4(v0);
}

ValueMetadata *type metadata accessor for AEAPasteboardActivation()
{
  return &type metadata for AEAPasteboardActivation;
}

uint64_t sub_10004F10C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10004F124, 0, 0);
}

uint64_t sub_10004F124()
{
  uint64_t v0;

  sub_1000060F4((_QWORD *)(*(_QWORD *)(v0 + 16) + 24), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 48));
  type metadata accessor for AEAConcretePasteboardPrimitives();
  sub_10000B1EC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch(sub_10004F1F0, 0, 0);
}

uint64_t sub_10004F1F0()
{
  _QWORD *v0;
  void *v1;
  id v2;
  Class isa;
  unsigned int v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t (*v10)(void);
  id v11;
  uint64_t v12;
  uint64_t (*v14)(void);

  v1 = (void *)v0[4];
  v2 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
  sub_100004D20(&qword_10008F828);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setItems:", isa);

  swift_getObjectType(v1);
  sub_10000C19C(1);
  v0[2] = 0;
  v4 = objc_msgSend(v1, "persistWithError:", v0 + 2);
  v5 = (void *)v0[2];
  if (v4)
  {
    v6 = (_QWORD *)v0[3];
    v7 = v0[5] + 24;
    v6[3] = &type metadata for AEAPasteboardDeactivation;
    v6[4] = &off_100086B20;
    v8 = (_QWORD *)swift_allocObject(&unk_100086A68, 80, 7);
    *v6 = v8;
    sub_100008380(v7, (uint64_t)(v8 + 5));
    v8[2] = 0xD00000000000002ALL;
    v8[3] = 0x800000010006DBE0;
    v8[4] = 5;
    v14 = (uint64_t (*)(void))v0[1];
    v9 = v5;
    v10 = v14;
  }
  else
  {
    v11 = v5;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v12);
    v10 = (uint64_t (*)(void))v0[1];
  }
  return v10();
}

uint64_t sub_10004F3C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  a1[3] = &type metadata for AEAPasteboardDeactivation;
  a1[4] = &off_100086B20;
  v3 = (_QWORD *)swift_allocObject(&unk_100086A68, 80, 7);
  *a1 = v3;
  result = sub_100008380(v1 + 24, (uint64_t)(v3 + 5));
  v3[2] = 0xD00000000000002ALL;
  v3[3] = 0x800000010006DBE0;
  v3[4] = 5;
  return result;
}

uint64_t sub_10004F450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100092E04);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10000CB20;
  v6[4] = a2;
  v6[5] = v2;
  v6[3] = a1;
  return swift_task_switch(sub_10004F1F0, 0, 0);
}

uint64_t sub_10004F4C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_100004D60((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 80, 7);
}

ValueMetadata *type metadata accessor for AEAPasteboardDeactivation()
{
  return &type metadata for AEAPasteboardDeactivation;
}

unint64_t sub_10004F4FC()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_100004D20(&qword_100091298);
  inited = swift_initStackObject(v0, &v4);
  *(_OWORD *)(inited + 16) = xmmword_100065EB0;
  result = kMRMediaRemoteOptionAssistantSetQueueTrueCompletion;
  if (kMRMediaRemoteOptionAssistantSetQueueTrueCompletion)
  {
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMRMediaRemoteOptionAssistantSetQueueTrueCompletion);
    *(_QWORD *)(inited + 40) = v3;
    *(_QWORD *)(inited + 72) = &type metadata for Bool;
    *(_BYTE *)(inited + 48) = 1;
    result = sub_100058A64(inited);
    qword_100092E10 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AEAConcreteMediaPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent26AEAConcreteMediaPrimitives);
}

id sub_10004F5E4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AEAConcreteMediaPrimitives.MediaRemoteAuditToken();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AEAConcreteMediaPrimitives.MediaRemoteAuditToken()
{
  return objc_opt_self(_TtCC15assessmentagent26AEAConcreteMediaPrimitivesP33_620CDB64FB7B028F5CC03EEF5D4C490C21MediaRemoteAuditToken);
}

void sub_10004F638(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[5];
  uint64_t v12;

  v2 = sub_100004D20(&qword_100092EF8);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  if (qword_10008E698 != -1)
    swift_once(&qword_10008E698, sub_10004F4FC);
  v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v6 = qword_100093EB8;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_100086B80, v8 + v4, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v9 + v8, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_10004FBD0;
  v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018BB8;
  aBlock[3] = &unk_100086B98;
  v10 = _Block_copy(aBlock);
  swift_release(v12);
  MRMediaRemoteSendCommandWithReply(1, v5.super.isa, v6, v10);
  _Block_release(v10);

}

uint64_t sub_10004F7EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  id v20;
  uint64_t v21;
  uint64_t result;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  objc_super v36;
  _OWORD v37[2];
  _QWORD *v38;

  v1 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v30 = a1;
    else
      v30 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    v38 = _swiftEmptyArrayStorage;
    v4 = &v38;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_34;
    }
    v5 = (void *)objc_opt_self(AEAAuditTokenSwiftUtility);
    v6 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v1);
      else
        v7 = *(id *)(v1 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      objc_msgSend(v5, "underlyingAuditTokenFromAuditToken:", v7, v34, v35);
      v9 = (objc_class *)type metadata accessor for AEAConcreteMediaPrimitives.MediaRemoteAuditToken();
      v34 = v37[1];
      v35 = v37[0];
      v10 = (char *)objc_allocWithZone(v9);
      v11 = &v10[OBJC_IVAR____TtCC15assessmentagent26AEAConcreteMediaPrimitivesP33_620CDB64FB7B028F5CC03EEF5D4C490C21MediaRemoteAuditToken_realToken];
      *(_OWORD *)v11 = v35;
      *((_OWORD *)v11 + 1) = v34;
      v36.receiver = v10;
      v36.super_class = v9;
      v12 = objc_msgSendSuper2(&v36, "init");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = v38[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized ContiguousArray._endMutation()(v15);
    }
    while (v2 != v6);
    v3 = (uint64_t)v38;
  }
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v31 = v3;
    else
      v31 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v32 = sub_100004D20(&qword_100092EF0);
    v17 = _bridgeCocoaArray<A>(_:)(v31, v32);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v16 = swift_bridgeObjectRetain(v3);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v16);
    v17 = v3;
  }
  swift_bridgeObjectRelease(v3);
  v18 = sub_100004D20(&qword_100092EF0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  v20 = (id)MRMediaRemoteRestrictCommandClients(isa);

  v4 = _swiftEmptyArrayStorage;
  if (!v20)
    return (uint64_t)v4;
  v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v18);

  if (!((unint64_t)v1 >> 62))
  {
    v21 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v21)
      goto LABEL_16;
LABEL_23:
    swift_bridgeObjectRelease(v1);
    return (uint64_t)v4;
  }
LABEL_34:
  if (v1 < 0)
    v33 = v1;
  else
    v33 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v21 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_bridgeObjectRelease(v1);
  if (!v21)
    goto LABEL_23;
LABEL_16:
  v38 = v4;
  result = specialized ContiguousArray.reserveCapacity(_:)(v21);
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = (void *)objc_opt_self(AEAAuditTokenSwiftUtility);
    v24 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v25 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v1);
      }
      else
      {
        v25 = *(void **)(v1 + 8 * v24 + 32);
        swift_unknownObjectRetain(v25);
      }
      ++v24;
      objc_msgSend(v25, "realToken", v34, v35);
      v26 = objc_msgSend(v23, "auditTokenWithUnderlyingAuditToken:", v37);
      v27 = swift_unknownObjectRelease(v25);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      v28 = v38[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
      v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      specialized ContiguousArray._endMutation()(v29);
    }
    while (v21 != v24);
    v4 = v38;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004FB6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100004D20(&qword_100092EF8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004FBD0()
{
  uint64_t v0;

  v0 = sub_100004D20(&qword_100092EF8);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_10004FC10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004FC20(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_10004FC28()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_100004D60(v0 + 3);
  sub_100004D60(v0 + 8);
  swift_unknownObjectRelease(v0[13]);
  sub_100004D60(v0 + 14);
  swift_unknownObjectRelease(v0[19]);
  swift_unknownObjectRelease(v0[20]);
  swift_unknownObjectRelease(v0[21]);
  sub_100004D60(v0 + 22);
  sub_100004D60(v0 + 27);
  swift_unknownObjectRelease(v0[32]);
  sub_100004D60(v0 + 33);
  swift_unknownObjectRelease(v0[38]);
  swift_unknownObjectRelease(v0[39]);
  sub_100004D60(v0 + 40);
  sub_100004D60(v0 + 45);
  sub_100004D60(v0 + 50);
  sub_100004D60(v0 + 55);
  sub_100004D60(v0 + 60);
  swift_unknownObjectRelease(v0[65]);
  sub_100004D60(v0 + 66);
  sub_100004D60(v0 + 71);
  sub_100004D60(v0 + 76);
  sub_100004D60(v0 + 81);
  sub_100004D60(v0 + 86);
  return v0;
}

uint64_t sub_10004FD04()
{
  uint64_t v0;

  sub_10004FC28();
  return swift_deallocClassInstance(v0, 728, 7);
}

uint64_t type metadata accessor for AEAConcreteEnvironment()
{
  return objc_opt_self(_TtC15assessmentagent22AEAConcreteEnvironment);
}

_QWORD *sub_10004FD44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v0[2] = 0;
  v1 = type metadata accessor for AEAConcreteXPCEventStreamPrimitives();
  v2 = swift_allocObject(v1, 16, 7);
  v0[6] = v1;
  v0[7] = &off_1000871B0;
  v0[3] = v2;
  v3 = type metadata accessor for AEAConcreteSignalPrimitives();
  v4 = swift_allocObject(v3, 16, 7);
  v0[11] = v3;
  v0[12] = &off_100084910;
  v0[8] = v4;
  v5 = objc_msgSend(objc_allocWithZone((Class)AEPreferencesProvider), "init");
  v6 = objc_msgSend(v5, "makePreferences");

  v0[13] = v6;
  v7 = type metadata accessor for AEAConcreteProcessPrimitives();
  v8 = swift_allocObject(v7, 16, 7);
  v0[17] = v7;
  v0[18] = &off_1000871D0;
  v0[14] = v8;
  v0[19] = objc_msgSend(objc_allocWithZone((Class)AEAConcreteXPCConnectionPrimitives), "init");
  v9 = objc_msgSend(objc_allocWithZone((Class)AEPerformancePrimitivesProvider), "init");
  v10 = objc_msgSend(v9, "makePrimitives");

  v0[20] = v10;
  v0[21] = objc_msgSend(objc_allocWithZone((Class)AEAConcreteOSTransactionPrimitives), "init");
  v11 = type metadata accessor for AEAConcreteFileSystemPrimitives();
  v12 = swift_allocObject(v11, 24, 7);
  *(_QWORD *)(v12 + 16) = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v0[25] = v11;
  v0[26] = &off_1000832C0;
  v0[22] = v12;
  v13 = type metadata accessor for AEAConcreteSystemNotificationPrimitives();
  v14 = swift_allocObject(v13, 16, 7);
  v0[30] = v13;
  v0[31] = &off_1000871E8;
  v0[27] = v14;
  v15 = objc_msgSend(objc_allocWithZone((Class)AEFeatureFlagsProvider), "init");
  v16 = objc_msgSend(v15, "makeFeatureFlags");

  v0[32] = v16;
  v17 = type metadata accessor for AEAConcretePasteboardPrimitives();
  v18 = swift_allocObject(v17, 16, 7);
  v0[36] = v17;
  v0[37] = &off_1000823B0;
  v0[33] = v18;
  v0[38] = objc_msgSend(objc_allocWithZone((Class)AEAConcreteAirPlayPrimitives), "init");
  v0[39] = objc_msgSend(objc_allocWithZone((Class)AEAConcreteNetworkPrimitives), "init");
  v19 = type metadata accessor for AEAConcreteMediaPrimitives();
  v20 = swift_allocObject(v19, 16, 7);
  v0[43] = v19;
  v0[44] = &off_100086B58;
  v0[40] = v20;
  v21 = type metadata accessor for AEAConcreteLaunchServicesPrimitives();
  v22 = swift_allocObject(v21, 16, 7);
  v0[48] = v21;
  v0[49] = &off_100087860;
  v0[45] = v22;
  v23 = type metadata accessor for AEAConcreteSecurityTaskPrimitives();
  v24 = swift_allocObject(v23, 16, 7);
  v0[53] = v23;
  v0[54] = &off_100085B40;
  v0[50] = v24;
  v25 = type metadata accessor for AEAConcreteRunningBoardPrimitives();
  v26 = swift_allocObject(v25, 16, 7);
  v0[58] = v25;
  v0[59] = &off_100084240;
  v0[55] = v26;
  v27 = type metadata accessor for AEAConcreteManagedConfigurationPrimitives();
  v28 = swift_allocObject(v27, 16, 7);
  v0[63] = v27;
  v0[64] = &off_100087470;
  v0[60] = v28;
  v0[65] = objc_msgSend(objc_allocWithZone((Class)AEAConcreteTimerPrimitives), "init");
  v29 = type metadata accessor for AEAConcreteExternalSubsystemRestrictionPrimitives();
  v30 = swift_allocObject(v29, 16, 7);
  v0[69] = v29;
  v0[70] = &off_100083DD8;
  v0[66] = v30;
  v31 = type metadata accessor for AEAConcreteSpringBoardPrimitives();
  v32 = swift_allocObject(v31, 16, 7);
  v0[74] = v31;
  v0[75] = &off_100083CF0;
  v0[71] = v32;
  v33 = type metadata accessor for AEAConcreteMobileKeyBagPrimitives();
  v34 = swift_allocObject(v33, 16, 7);
  v0[79] = v33;
  v0[80] = &off_100081BA0;
  v0[76] = v34;
  v35 = type metadata accessor for AEAConcreteFrontBoardPrimitives();
  v36 = swift_allocObject(v35, 16, 7);
  v0[84] = v35;
  v0[85] = &off_1000848D8;
  v0[81] = v36;
  v37 = type metadata accessor for AEAConcreteUserDefaultsPrimitives();
  v38 = swift_allocObject(v37, 16, 7);
  v0[89] = v37;
  v0[90] = &off_100087490;
  v0[86] = v38;
  return v0;
}

uint64_t destroy for AEASingleAppModeToggler(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for AEASingleAppModeToggler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain(v4);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for AEASingleAppModeToggler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

uint64_t assignWithTake for AEASingleAppModeToggler(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEASingleAppModeToggler(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEASingleAppModeToggler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAClientUIPresenter()
{
  return &type metadata for AEAClientUIPresenter;
}

void sub_1000502F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  _QWORD *v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD v31[2];
  _QWORD v32[5];
  _OWORD v33[2];
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[2];
  uint64_t v38;
  uint64_t v39;

  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(v1 + 63) >> 6;
  v39 = a1;
  swift_bridgeObjectRetain(a1);
  v4 = 0;
  v5 = _swiftEmptyArrayStorage;
  if (v3)
    goto LABEL_29;
LABEL_6:
  v6 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    return;
  }
  if (v6 >= v30)
    goto LABEL_31;
  v7 = *(_QWORD *)(v29 + 8 * v6);
  ++v4;
  if (v7)
    goto LABEL_21;
  v4 = v6 + 1;
  if (v6 + 1 >= v30)
    goto LABEL_31;
  v7 = *(_QWORD *)(v29 + 8 * v4);
  if (v7)
    goto LABEL_21;
  v4 = v6 + 2;
  if (v6 + 2 >= v30)
    goto LABEL_31;
  v7 = *(_QWORD *)(v29 + 8 * v4);
  if (v7)
    goto LABEL_21;
  v4 = v6 + 3;
  if (v6 + 3 >= v30)
    goto LABEL_31;
  v7 = *(_QWORD *)(v29 + 8 * v4);
  if (v7)
    goto LABEL_21;
  v8 = v6 + 4;
  if (v8 >= v30)
  {
LABEL_31:
    swift_release(v39);
    return;
  }
  v7 = *(_QWORD *)(v29 + 8 * v8);
  if (!v7)
  {
    while (1)
    {
      v4 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_33;
      if (v4 >= v30)
        goto LABEL_31;
      v7 = *(_QWORD *)(v29 + 8 * v4);
      ++v8;
      if (v7)
        goto LABEL_21;
    }
  }
  v4 = v8;
LABEL_21:
  v3 = (v7 - 1) & v7;
  for (i = __clz(__rbit64(v7)) + (v4 << 6); ; i = v23 | (v4 << 6))
  {
    v10 = v39;
    sub_100051804(*(_QWORD *)(v39 + 48) + 40 * i, (uint64_t)v36);
    sub_1000154A8(*(_QWORD *)(v10 + 56) + 32 * i, (uint64_t)v37 + 8);
    v34[0] = v37[0];
    v34[1] = v37[1];
    v35 = v38;
    v33[0] = v36[0];
    v33[1] = v36[1];
    sub_100051804((uint64_t)v33, (uint64_t)v32);
    if (!swift_dynamicCast(v31, v32, &type metadata for AnyHashable, &type metadata for String, 6))
      break;
    v11 = v31[0];
    v12 = v31[1];
    sub_1000154A8((uint64_t)v34 + 8, (uint64_t)v32);
    v13 = sub_10005065C(v32);
    if (v15 == -1)
    {
      swift_bridgeObjectRelease(v12);
      sub_1000518A8((uint64_t)v33);
      if (!v3)
        goto LABEL_6;
    }
    else
    {
      v16 = v13;
      v17 = v14;
      v18 = v15;
      sub_1000518A8((uint64_t)v33);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        v5 = sub_100054428(0, v5[2] + 1, 1, v5);
      v20 = v5[2];
      v19 = v5[3];
      v21 = v5;
      if (v20 >= v19 >> 1)
        v21 = sub_100054428((_QWORD *)(v19 > 1), v20 + 1, 1, v5);
      v21[2] = v20 + 1;
      v5 = v21;
      v22 = &v21[5 * v20];
      v22[4] = v11;
      v22[5] = v12;
      v22[6] = v16;
      v22[7] = v17;
      *((_BYTE *)v22 + 64) = v18;
      if (!v3)
        goto LABEL_6;
    }
LABEL_29:
    v23 = __clz(__rbit64(v3));
    v3 &= v3 - 1;
  }
  v24 = sub_100051840();
  swift_allocError(&type metadata for AEAPropertyList.ParsingError, v24, 0, 0);
  v26 = v25;
  *(_QWORD *)(v25 + 24) = &type metadata for AnyHashable;
  v27 = swift_allocObject(&unk_100086D50, 56, 7);
  *(_QWORD *)v26 = v27;
  v28 = sub_100051804((uint64_t)v33, v27 + 16);
  *(_BYTE *)(v26 + 32) = 0;
  swift_willThrow(v28);
  sub_1000518A8((uint64_t)v33);
  swift_bridgeObjectRelease(v5);
  swift_release(v39);
}

unint64_t sub_10005065C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[4];

  sub_1000154A8((uint64_t)a1, (uint64_t)v19);
  if ((swift_dynamicCast(&v18, v19, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
  {
    v2 = v18;
    sub_100004D60(a1);
  }
  else
  {
    sub_1000154A8((uint64_t)a1, (uint64_t)v19);
    if ((swift_dynamicCast(&v18, v19, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0
      || (sub_1000154A8((uint64_t)a1, (uint64_t)v19),
          (swift_dynamicCast(&v18, v19, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0))
    {
      v2 = (unint64_t)v18;
      sub_100004D60(a1);
    }
    else
    {
      sub_1000154A8((uint64_t)a1, (uint64_t)v19);
      v3 = sub_100004D20(&qword_10008F510);
      if ((swift_dynamicCast(&v18, v19, (char *)&type metadata for Any + 8, v3, 6) & 1) != 0)
      {
        v4 = v18;
        v5 = v18[2];
        if (v5)
        {
          v6 = (uint64_t)(v18 + 4);
          v17 = v18;
          swift_bridgeObjectRetain(v18);
          v2 = (unint64_t)_swiftEmptyArrayStorage;
          do
          {
            sub_1000154A8(v6, (uint64_t)v19);
            sub_1000154A8((uint64_t)v19, (uint64_t)&v18);
            v8 = sub_10005065C(&v18);
            v10 = v9;
            v12 = v11;
            v13 = ~v11;
            sub_100004D60(v19);
            if (v13)
            {
              if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
                v2 = (unint64_t)sub_100054778(0, *(_QWORD *)(v2 + 16) + 1, 1, (_QWORD *)v2);
              v15 = *(_QWORD *)(v2 + 16);
              v14 = *(_QWORD *)(v2 + 24);
              if (v15 >= v14 >> 1)
                v2 = (unint64_t)sub_100054778((_QWORD *)(v14 > 1), v15 + 1, 1, (_QWORD *)v2);
              *(_QWORD *)(v2 + 16) = v15 + 1;
              v7 = (_QWORD *)(v2 + 24 * v15);
              v7[4] = v8;
              v7[5] = v10;
              *((_BYTE *)v7 + 48) = v12;
            }
            v6 += 32;
            --v5;
          }
          while (v5);
          v4 = v17;
          swift_bridgeObjectRelease(v17);
        }
        else
        {
          v2 = (unint64_t)_swiftEmptyArrayStorage;
        }
        sub_100004D60(a1);
        swift_bridgeObjectRelease(v4);
      }
      else
      {
        sub_100004D60(a1);
        return 0;
      }
    }
  }
  return v2;
}

void sub_1000508DC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  __asm { BR              X10 }
}

Swift::Int sub_100050924()
{
  char v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0 & 1);
  return Hasher._finalize()();
}

uint64_t sub_1000509B0(uint64_t a1)
{
  return sub_100051690(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_1000509CC()
{
  uint64_t v0;

  sub_1000508DC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void sub_1000509D8()
{
  __asm { BR              X10 }
}

void sub_100050A0C()
{
  char v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0 & 1);
}

void sub_100050A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *(unsigned __int8 *)(v1 + 16);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_100050AD4()
{
  char v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0 & 1);
  return Hasher._finalize()();
}

Swift::Int sub_100050B60()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  swift_bridgeObjectRetain(v1);
  sub_100051328((uint64_t)v3, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

uint64_t sub_100050BB4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain(v3);
  sub_100051328(a1, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100050BEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  swift_bridgeObjectRetain(v2);
  sub_100051328((uint64_t)v4, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_100050C3C(uint64_t *a1, uint64_t *a2)
{
  return sub_100050C48(*a1, *a2);
}

uint64_t sub_100050C48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  int64_t v21;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = 1 << *(_BYTE *)(a1 + 32);
    v5 = -1;
    if (v4 < 64)
      v5 = ~(-1 << v4);
    v21 = (unint64_t)(v4 + 63) >> 6;
    if ((v5 & v3) != 0)
    {
      v6 = __clz(__rbit64(v5 & v3));
LABEL_22:
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
      v11 = *v10;
      v12 = v10[1];
      v13 = *(_QWORD *)(a1 + 56) + 24 * v6;
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)(v13 + 8);
      v16 = *(_BYTE *)(v13 + 16);
      swift_bridgeObjectRetain(v12);
      sub_100006A5C(v14, v15, v16);
      v17 = sub_10005A2B4(v11, v12);
      v19 = v18;
      swift_bridgeObjectRelease(v12);
      if ((v19 & 1) != 0)
        __asm { BR              X9 }
      sub_100006A80(v14, v15, v16);
      return 0;
    }
    if ((unint64_t)(v4 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 72);
      v8 = 1;
      if (v7)
        goto LABEL_21;
      v8 = 2;
      if (v21 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_21;
      v8 = 3;
      if (v21 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        goto LABEL_21;
      v8 = 4;
      if (v21 <= 4)
        return 1;
      v7 = *(_QWORD *)(a1 + 96);
      if (v7)
      {
LABEL_21:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_22;
      }
      v9 = 5;
      if (v21 > 5)
      {
        v7 = *(_QWORD *)(a1 + 104);
        if (v7)
        {
          v8 = 5;
          goto LABEL_21;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x100050F3CLL);
          }
          if (v8 >= v21)
            break;
          v7 = *(_QWORD *)(a1 + 64 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_21;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_100050F4C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char *i;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (!*(_QWORD *)(a1 + 16))
    return swift_bridgeObjectRelease(a1);
  v47 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 64);
  swift_bridgeObjectRetain(a1);
  v51 = v6;
  v52 = v5;
  v10 = *a3;
  swift_bridgeObjectRetain(v5);
  sub_100006A5C(v8, v7, v9);
  v12 = sub_10005A2B4(v6, v5);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (*(_QWORD *)(v10 + 24) >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_100056D98();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = a3;
    v23 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v24 = (uint64_t *)(v23[6] + 16 * v12);
    *v24 = v6;
    v24[1] = v5;
    v25 = v23[7] + 24 * v12;
    *(_QWORD *)v25 = v8;
    *(_QWORD *)(v25 + 8) = v7;
    *(_BYTE *)(v25 + 16) = v9;
    v26 = v23[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v23[2] = v28;
    v29 = v47 - 1;
    if (v47 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = (char *)(a1 + 104); ; i += 40)
    {
      v5 = *((_QWORD *)i - 3);
      v8 = *((_QWORD *)i - 2);
      v7 = *((_QWORD *)i - 1);
      v9 = *i;
      v51 = *((_QWORD *)i - 4);
      v31 = v51;
      v52 = v5;
      v32 = *v22;
      swift_bridgeObjectRetain(v5);
      sub_100006A5C(v8, v7, v9);
      v33 = sub_10005A2B4(v51, v5);
      v35 = *(_QWORD *)(v32 + 16);
      v36 = (v34 & 1) == 0;
      v27 = __OFADD__(v35, v36);
      v37 = v35 + v36;
      if (v27)
        break;
      v38 = v34;
      if (*(_QWORD *)(v32 + 24) < v37)
      {
        sub_100055334(v37, 1);
        v33 = sub_10005A2B4(v51, v5);
        if ((v38 & 1) != (v39 & 1))
          goto LABEL_25;
      }
      if ((v38 & 1) != 0)
        goto LABEL_10;
      v22 = a3;
      v40 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      v41 = (uint64_t *)(v40[6] + 16 * v33);
      *v41 = v31;
      v41[1] = v5;
      v42 = v40[7] + 24 * v33;
      *(_QWORD *)v42 = v8;
      *(_QWORD *)(v42 + 8) = v7;
      *(_BYTE *)(v42 + 16) = v9;
      v43 = v40[2];
      v27 = __OFADD__(v43, 1);
      v44 = v43 + 1;
      if (v27)
        goto LABEL_24;
      v40[2] = v44;
      if (!--v29)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100055334(v15, a2 & 1);
  v17 = sub_10005A2B4(v6, v5);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v20);
    v53 = v20;
    swift_errorRetain(v20);
    v21 = sub_100004D20(&qword_100090790);
    if ((swift_dynamicCast(v21, &v53, v21, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(a1);
      sub_100006A80(v8, v7, v9);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v5);
      return swift_errorRelease(v53);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v49 = 0;
  v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v45._object = (void *)0x800000010006D530;
  v45._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  _print_unlocked<A, B>(_:_:)(&v51, &v49, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v46._countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v49, v50, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

void sub_100051328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  _QWORD *v22;
  _OWORD v23[4];
  uint64_t v24;

  v22 = (_QWORD *)(a2 + 64);
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v21 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  if (v6)
  {
    v7 = __clz(__rbit64(v6));
    goto LABEL_16;
  }
  if (v21 > 1)
  {
    v8 = v22[1];
    v9 = 1;
    if (v8)
      goto LABEL_15;
    v9 = 2;
    if (v21 <= 2)
      goto LABEL_17;
    v8 = v22[2];
    if (v8)
    {
LABEL_15:
      v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_16:
      v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = *(_QWORD *)(a2 + 56) + 24 * v7;
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(v14 + 8);
      v17 = *(unsigned __int8 *)(v14 + 16);
      v18 = *(_QWORD *)(a1 + 64);
      v19 = *(_OWORD *)(a1 + 16);
      v23[0] = *(_OWORD *)a1;
      v23[1] = v19;
      v20 = *(_OWORD *)(a1 + 48);
      v23[2] = *(_OWORD *)(a1 + 32);
      v23[3] = v20;
      v24 = v18;
      swift_bridgeObjectRetain(v13);
      sub_100006A5C(v15, v16, v17);
      String.hash(into:)(v23, v12, v13);
      swift_bridgeObjectRelease(v13);
      __asm { BR              X8 }
    }
    v10 = 3;
    if (v21 > 3)
    {
      v8 = v22[3];
      if (v8)
      {
        v9 = 3;
        goto LABEL_15;
      }
      while (1)
      {
        v9 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          JUMPOUT(0x10005158CLL);
        }
        if (v9 >= v21)
          break;
        v8 = v22[v9];
        ++v10;
        if (v8)
          goto LABEL_15;
      }
    }
  }
LABEL_17:
  swift_release(a2);
  Hasher._combine(_:)(0);
}

void sub_10005159C(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
    __asm { BR              X9 }
}

uint64_t sub_100051690(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_1000516AC + 4 * byte_100068F38[a3]))();
}

uint64_t sub_1000516AC(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  char v6;

  v6 = ((a1 & 1) == 0) ^ a4;
  if (a6)
    v6 = 0;
  return v6 & 1;
}

BOOL sub_1000516F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return a6 == 1 && a1 == a4;
}

uint64_t sub_100051708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 == 3)
    return sub_100006908(a1, a4);
  else
    return 0;
}

uint64_t sub_100051734(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (result)
  {
    v2 = result;
    sub_1000502F4(result);
    v4 = v3;
    result = swift_bridgeObjectRelease(v2);
    if (!v1)
    {
      v5 = *(_QWORD *)(v4 + 16);
      if (v5)
      {
        sub_100004D20(&qword_100093060);
        v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v5);
      }
      else
      {
        v6 = _swiftEmptyDictionarySingleton;
      }
      v8 = v6;
      swift_bridgeObjectRetain(v4);
      sub_100050F4C(v7, 1, (uint64_t *)&v8);
      swift_bridgeObjectRelease(v4);
      return (uint64_t)v8;
    }
  }
  return result;
}

uint64_t sub_100051804(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

unint64_t sub_100051840()
{
  unint64_t result;

  result = qword_100093068;
  if (!qword_100093068)
  {
    result = swift_getWitnessTable(&unk_100069030, &type metadata for AEAPropertyList.ParsingError);
    atomic_store(result, (unint64_t *)&qword_100093068);
  }
  return result;
}

uint64_t sub_100051884()
{
  uint64_t v0;

  sub_100004D60((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000518A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20(&qword_100093070);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for AEAPropertyList.ParsingError(_QWORD *a1)
{
  return sub_100004D60(a1);
}

uint64_t initializeWithCopy for AEAPropertyList.ParsingError(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  v4 = v3 == 1;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  (**(void (***)(uint64_t))(v5 - 8))(a1);
  *(_BYTE *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithCopy for AEAPropertyList.ParsingError(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sub_100004D60((_QWORD *)a1);
    v4 = *(unsigned __int8 *)(a2 + 32);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    v5 = v4 == 1;
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    *(_BYTE *)(a1 + 32) = v5;
  }
  return a1;
}

uint64_t assignWithTake for AEAPropertyList.ParsingError(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;

  if (a1 != a2)
  {
    sub_100004D60((_QWORD *)a1);
    v4 = *(unsigned __int8 *)(a2 + 32);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 32) = v4 == 1;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAPropertyList.ParsingError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AEAPropertyList.ParsingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_100051AB0(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 32);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_100051ACC(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AEAPropertyList.ParsingError()
{
  return &type metadata for AEAPropertyList.ParsingError;
}

ValueMetadata *type metadata accessor for AEAPropertyList()
{
  return &type metadata for AEAPropertyList;
}

uint64_t destroy for AEAPropertyList.Value(uint64_t a1)
{
  return sub_100006A80(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s15assessmentagent15AEAPropertyListV5ValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100006A5C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AEAPropertyList.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100006A5C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100006A80(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AEAPropertyList.Value(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100006A80(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAPropertyList.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAPropertyList.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100051C90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100051C98(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AEAPropertyList.Value()
{
  return &type metadata for AEAPropertyList.Value;
}

unint64_t sub_100051CB4()
{
  unint64_t result;

  result = qword_100093078;
  if (!qword_100093078)
  {
    result = swift_getWitnessTable(&unk_100068FA0, &type metadata for AEAPropertyList.Value);
    atomic_store(result, (unint64_t *)&qword_100093078);
  }
  return result;
}

unint64_t sub_100051CFC()
{
  unint64_t result;

  result = qword_100093080;
  if (!qword_100093080)
  {
    result = swift_getWitnessTable(&unk_100068FC8, &type metadata for AEAPropertyList);
    atomic_store(result, (unint64_t *)&qword_100093080);
  }
  return result;
}

uint64_t sub_100051D40()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  v2 = *v0;
  if (!(*v0 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n(*v0, 2);
    if (v3)
      goto LABEL_3;
LABEL_13:
    result = swift_bridgeObjectRelease_n(v2, 3);
    *v1 = &_swiftEmptyArrayStorage;
    return result;
  }
  if (v2 < 0)
    v7 = *v0;
  else
    v7 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v2, 2);
  result = _CocoaArrayWrapper.endIndex.getter(v7);
  v3 = result;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
      }
      else
      {
        v6 = *(_QWORD *)(v2 + 8 * i + 32);
        swift_retain(v6);
      }
      AnyCancellable.cancel()();
      swift_release(v6);
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100051E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  _QWORD v27[3];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD **)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v24 - v8;
  UUID.init()(v7);
  v10 = sub_100004D20(&qword_1000932C0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = PassthroughSubject.init()();
  v12 = (void (*)(char *, char *, uint64_t))v3[2];
  v12(v6, v9, v2);
  swift_beginAccess(v0 + 24, v27, 33, 0);
  swift_retain(v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 24));
  v26 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 24) = 0x8000000000000000;
  sub_100056340(v11, (uint64_t)v6, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_1000932E0);
  v14 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 24) = v26;
  swift_bridgeObjectRelease(v14);
  v25 = (void (*)(char *, uint64_t))v3[1];
  v25(v6, v2);
  swift_endAccess(v27);
  v12(v6, v9, v2);
  v15 = sub_100004D20(&qword_1000932C8);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  *(_QWORD *)(v16 + 16) = v1;
  v17 = v16 + qword_10008F9C8;
  v18 = (void (*)(uint64_t, char *, uint64_t))v3[4];
  swift_retain(v1);
  v18(v17, v6, v2);
  v27[0] = v16;
  v19 = type metadata accessor for AnyCancellable(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = sub_1000057A4(&qword_1000932D0, &qword_1000932C8, (uint64_t)&unk_100065E38);
  swift_retain(v16);
  v21 = AnyCancellable.init<A>(_:)(v27, v15, v20);
  v27[0] = v11;
  v22 = sub_1000057A4(&qword_1000932D8, &qword_1000932C0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Publisher.eraseToAnyPublisher()(v10, v22);
  swift_release(v16);
  v25(v9, v2);
  swift_release(v11);
  return v21;
}

uint64_t sub_100052094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000187D0(a1, &qword_100091B00);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100086FC0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1000932B8, v16);
}

uint64_t sub_1000521E0(uint64_t a1, void (*a2)(uint64_t, uint64_t (*)(uint64_t a1, char a2), uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (uint64_t *)(a1 + *(int *)(sub_100004D20((uint64_t *)&unk_100093290) + 48));
  v6 = *v4;
  v5 = v4[1];
  v7 = swift_allocObject(&unk_100086F70, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  swift_retain(v5);
  a2(a1, sub_10004E99C, v7);
  return swift_release(v7);
}

uint64_t sub_100052268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  os_log_type_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41[3];
  _BYTE v42[24];
  uint64_t v43;
  uint64_t v44;

  v2 = v1;
  v3 = v0;
  v4 = sub_100004D20(&qword_100093268);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v35 - v8;
  swift_beginAccess(v0+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_subscriptions, v42, 33, 0);
  sub_100051D40();
  swift_endAccess(v42);
  v10 = (_QWORD *)(v0
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  v11 = *(_QWORD *)(v0
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  v12 = *(_QWORD *)(v0
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler
                  + 8);
  *v10 = 0;
  v10[1] = 0;
  sub_100008370(v11, v12);
  v13 = v0
      + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_currentProfile;
  swift_beginAccess(v0+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_currentProfile, v42, 0, 0);
  sub_100057C44(v13, (uint64_t)v9);
  v14 = type metadata accessor for AEAConfigurationProfile(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14);
  result = sub_1000187D0((uint64_t)v9, &qword_100093268);
  if (v16 != 1)
  {
    v40 = v15;
    if (qword_10008E5E0 != -1)
      swift_once(&qword_10008E5E0, sub_10001552C);
    v39 = v7;
    v18 = type metadata accessor for Logger(0);
    sub_10000B164(v18, (uint64_t)qword_100093E18);
    v19 = swift_retain_n(v3, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v41[0] = v37;
      v38 = v1;
      *(_DWORD *)v22 = 136446210;
      v36 = v22 + 4;
      v23 = type metadata accessor for UUID(0);
      v24 = sub_100058000((unint64_t *)&unk_1000932F0, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      v27 = v26;
      v43 = sub_100059C74(v25, v26, v41);
      v2 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v36, v22 + 12);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v27);
      v28 = v21;
      v29 = (_QWORD *)&unk_100093000;
      _os_log_impl((void *)&_mh_execute_header, v20, v28, "Uninstalling profile with ID: %{public}s", v22, 0xCu);
      v30 = v37;
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      v31 = v40;
    }
    else
    {

      swift_release_n(v3, 2);
      v31 = v40;
      v29 = &unk_100093000;
    }
    v32 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles
                    + 24);
    v33 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles
                    + 32);
    sub_1000060F4((_QWORD *)(v3+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles), v32);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 24))(v3 + v29[18], v32, v33);
    if (!v2)
    {
      v34 = (uint64_t)v39;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v39, 1, 1, v14);
      swift_beginAccess(v13, v41, 33, 0);
      sub_100057D10(v34, v13);
      return swift_endAccess(v41);
    }
  }
  return result;
}

uint64_t sub_1000525F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];

  v3 = v2;
  v4 = (_QWORD *)(v2
                + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  v5 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  v6 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler
                 + 8);
  *v4 = a1;
  v4[1] = a2;
  swift_retain(a2);
  sub_100008370(v5, v6);
  v7 = sub_100051E28();
  v9 = v8;
  v10 = (_QWORD *)(v3
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_subscriptions);
  swift_beginAccess(v3+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_subscriptions, v23, 33, 0);
  v11 = swift_retain(v7);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
  v13 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v12 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v13 >= v12 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
  v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v7);
  specialized Array._endMutation()(v14);
  swift_endAccess(v23);
  v23[0] = v9;
  v15 = swift_allocObject(&unk_100086F20, 24, 7);
  swift_weakInit(v15 + 16, v3);
  v16 = swift_allocObject(&unk_100086F48, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100057D7C;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = sub_100004D20((uint64_t *)&unk_100093270);
  v18 = sub_1000057A4(&qword_10008FE50, (uint64_t *)&unk_100093270, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v19 = Publisher<>.sink(receiveValue:)(sub_100013AB0, v16, v17, v18);
  swift_release(v16);
  swift_beginAccess(v10, v23, 33, 0);
  v20 = sub_100004D20((uint64_t *)&unk_100093280);
  v21 = sub_1000057A4(&qword_10008FE58, (uint64_t *)&unk_100093280, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v10, v20, v21);
  swift_endAccess(v23);
  swift_release(v7);
  swift_release(v9);
  return swift_release(v19);
}

uint64_t sub_1000527F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE v27[24];

  v8 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_100004D20(&qword_100091B00);
  __chkstk_darwin(v12);
  v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a4 += 16;
  swift_beginAccess(a4, v27, 0, 0);
  result = swift_weakLoadStrong(a4);
  if (result)
  {
    v16 = result;
    v17 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
    sub_10003D644(a1, (uint64_t)&v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], type metadata accessor for AEAAssessmentSessionConfiguration);
    type metadata accessor for MainActor(0);
    swift_retain(v16);
    v18 = swift_retain(a3);
    v19 = static MainActor.shared.getter(v18);
    v20 = *(unsigned __int8 *)(v9 + 80);
    v21 = (v20 + 40) & ~v20;
    v22 = (v10 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = (_QWORD *)swift_allocObject(&unk_100086F98, v22 + 16, v20 | 7);
    v23[2] = v19;
    v23[3] = &protocol witness table for MainActor;
    v23[4] = v16;
    sub_10003BB2C((uint64_t)v11, (uint64_t)v23 + v21, type metadata accessor for AEAAssessmentSessionConfiguration);
    v24 = (_QWORD *)((char *)v23 + v22);
    *v24 = a2;
    v24[1] = a3;
    v25 = sub_100052094((uint64_t)v14, (uint64_t)&unk_1000932A8, (uint64_t)v23);
    swift_release(v25);
    return swift_release(v16);
  }
  return result;
}

uint64_t sub_1000529B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v9 = type metadata accessor for MainActor(0);
  v7[6] = v9;
  v7[7] = static MainActor.shared.getter(v9);
  return swift_task_switch(sub_100052A08, a4, 0);
}

uint64_t sub_100052A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  sub_100052AA0(*(_QWORD *)(v0 + 24), *(void (**)(_QWORD, _QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100052A70, v2, v3);
}

uint64_t sub_100052A70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052AA0(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint8_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  os_log_type_t v60;
  _QWORD *v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_QWORD, _QWORD);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84[3];
  char v85[32];

  v79 = a3;
  v80 = a2;
  v5 = sub_100004D20(&qword_100093268);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v71 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v71 - v12;
  v14 = type metadata accessor for AEAConfigurationProfile(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v74 = (uint64_t)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v75 = (uint64_t)&v71 - v19;
  v20 = __chkstk_darwin(v18);
  v73 = (uint64_t)&v71 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v71 - v22;
  sub_1000533B0(a1, (uint64_t)&v71 - v22);
  v25 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles
                  + 24);
  v24 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles
                  + 32);
  v77 = (_QWORD *)(v3
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles);
  sub_1000060F4((_QWORD *)(v3+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles), v25);
  v81 = v23;
  sub_10003D644((uint64_t)v23, (uint64_t)v13, type metadata accessor for AEAConfigurationProfile);
  v76 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
  v76(v13, 0, 1, v14);
  v78 = v3;
  v26 = v3
      + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_currentProfile;
  swift_beginAccess(v3+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_currentProfile, v85, 0, 0);
  sub_100057C44(v26, (uint64_t)v11);
  v27 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v24 + 8))(v13, v11, v25, v24);
  sub_1000187D0((uint64_t)v11, &qword_100093268);
  sub_1000187D0((uint64_t)v13, &qword_100093268);
  if ((v27 & 1) != 0)
  {
    if (qword_10008E5E0 != -1)
      swift_once(&qword_10008E5E0, sub_10001552C);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10000B164(v28, (uint64_t)qword_100093E18);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter();
    v32 = os_log_type_enabled(v30, v31);
    v33 = (uint64_t)v81;
    if (v32)
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Skipping configuration profile installation/update", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    goto LABEL_24;
  }
  sub_100057C44(v26, (uint64_t)v8);
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v14);
  sub_1000187D0((uint64_t)v8, &qword_100093268);
  if (v35 == 1)
  {
    v33 = (uint64_t)v81;
    if (qword_10008E5E0 != -1)
      swift_once(&qword_10008E5E0, sub_10001552C);
    v36 = type metadata accessor for Logger(0);
    sub_10000B164(v36, (uint64_t)qword_100093E18);
    v37 = v73;
    v38 = sub_10003D644(v33, v73, type metadata accessor for AEAConfigurationProfile);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v74 = swift_slowAlloc(32, -1);
      v84[0] = v74;
      *(_DWORD *)v41 = 136446210;
      v72 = v41 + 4;
      v42 = v75;
      sub_10003D644(v37, v75, type metadata accessor for AEAConfigurationProfile);
      v43 = String.init<A>(describing:)(v42, v14);
      v45 = v44;
      v82 = sub_100059C74(v43, v44, v84);
      v33 = (uint64_t)v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v72, v41 + 12);
      swift_bridgeObjectRelease(v45);
      sub_100057C8C(v37);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Installing configuration profile with descriptor: %{public}s", v41, 0xCu);
      v46 = v74;
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      sub_100057C8C(v37);
    }

  }
  else
  {
    v73 = v26;
    v47 = v14;
    v33 = (uint64_t)v81;
    if (qword_10008E5E0 != -1)
      swift_once(&qword_10008E5E0, sub_10001552C);
    v48 = type metadata accessor for Logger(0);
    sub_10000B164(v48, (uint64_t)qword_100093E18);
    v49 = v74;
    v50 = sub_10003D644(v33, v74, type metadata accessor for AEAConfigurationProfile);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v84[0] = v54;
      *(_DWORD *)v53 = 136446210;
      v72 = v53 + 4;
      v55 = v75;
      sub_10003D644(v49, v75, type metadata accessor for AEAConfigurationProfile);
      v56 = String.init<A>(describing:)(v55, v47);
      v58 = v57;
      v82 = sub_100059C74(v56, v57, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v72, v53 + 12);
      v59 = v58;
      v33 = (uint64_t)v81;
      swift_bridgeObjectRelease(v59);
      sub_100057C8C(v49);
      v60 = v52;
      v14 = v47;
      _os_log_impl((void *)&_mh_execute_header, v51, v60, "Updating configuration profile with descriptor: %{public}s", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {
      sub_100057C8C(v49);

      v14 = v47;
    }
    v26 = v73;
  }
  sub_10003D644(v33, (uint64_t)v13, type metadata accessor for AEAConfigurationProfile);
  v76(v13, 0, 1, v14);
  sub_100057CC8((uint64_t)v13, (uint64_t)v11);
  swift_beginAccess(v26, v84, 33, 0);
  sub_100057D10((uint64_t)v11, v26);
  swift_endAccess(v84);
  v61 = (_QWORD *)(v78
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  v62 = *(void (**)(uint64_t))(v78
                                       + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler);
  if (v62)
  {
    v63 = v61[1];
    *v61 = 0;
    v61[1] = 0;
    swift_retain(v63);
    v64 = sub_100008370((uint64_t)v62, v63);
    v62(v64);
    sub_100008370((uint64_t)v62, v63);
  }
  v65 = v77[3];
  v66 = v77[4];
  sub_1000060F4(v77, v65);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v33, v65, v66);
  v68 = *(_QWORD *)(v78
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_version);
  v69 = __OFADD__(v68, 1);
  v70 = v68 + 1;
  if (!v69)
  {
    *(_QWORD *)(v78
              + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_version) = v70;
LABEL_24:
    v80(0, 0);
    return sub_100057C8C(v33);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000533B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int *v20;
  uint64_t (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a2;
  v4 = type metadata accessor for AEAConfigurationProfile.Payload(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v42 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004D20(&qword_100093248);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v11, v14 + 2 * v12, v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_100067F50;
  v40 = v14;
  v46 = v15;
  v16 = v15 + v14;
  UUID.init()(v15);
  v17 = sub_100004D20(&qword_100093250);
  v18 = swift_allocObject(v17, 41, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100069070;
  v44 = v2;
  v19 = *(void **)(v2
                 + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_preferences);
  *(_BYTE *)(v18 + 32) = objc_msgSend(v19, "shouldDisableContinuity") ^ 1;
  *(_BYTE *)(v18 + 33) = objc_msgSend(v19, "shouldDisableDictation") ^ 1 | 0x10;
  *(_WORD *)(v18 + 34) = 12320;
  v20 = (int *)type metadata accessor for AEAAssessmentSessionConfiguration(0);
  *(_BYTE *)(v18 + 36) = *(_BYTE *)(a1 + v20[8]) | 0x40;
  *(_BYTE *)(v18 + 37) = *(_BYTE *)(a1 + v20[10]) | 0x50;
  *(_BYTE *)(v18 + 38) = *(_BYTE *)(a1 + v20[6]) | 0x60;
  *(_BYTE *)(v18 + 39) = *(_BYTE *)(a1 + v20[9]) | 0x70;
  *(_BYTE *)(v18 + 40) = 0x80;
  v43 = v8;
  v21 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v22 = v21(v16, v10, v7);
  *(_QWORD *)(v16 + *(int *)(v4 + 20)) = 1;
  v23 = v16 + *(int *)(v4 + 24);
  *(_QWORD *)v23 = v18;
  *(_BYTE *)(v23 + 8) = 0;
  v41 = v12;
  v24 = v16 + v12;
  UUID.init()(v22);
  v25 = sub_100004D20(&qword_100093258);
  v26 = swift_allocObject(v25, 33, 7);
  *(_OWORD *)(v26 + 16) = xmmword_100065EB0;
  *(_BYTE *)(v26 + 32) = objc_msgSend(v19, "shouldDisableQuickNote") ^ 1;
  v21(v24, v10, v7);
  *(_QWORD *)(v24 + *(int *)(v4 + 20)) = 1;
  v27 = v24 + *(int *)(v4 + 24);
  *(_QWORD *)v27 = v26;
  *(_BYTE *)(v27 + 8) = 1;
  sub_100053718();
  if (v28)
  {
    v29 = v28;
    v30 = (uint64_t)v42;
    UUID.init()(v28);
    *(_QWORD *)(v30 + *(int *)(v4 + 20)) = 1;
    v31 = v30 + *(int *)(v4 + 24);
    *(_QWORD *)v31 = v29;
    *(_BYTE *)(v31 + 8) = 2;
    v32 = v46;
    v34 = *(_QWORD *)(v46 + 16);
    v33 = *(_QWORD *)(v46 + 24);
    if (v34 >= v33 >> 1)
      v32 = sub_10005456C(v33 > 1, v34 + 1, 1, v46, &qword_100093248, type metadata accessor for AEAConfigurationProfile.Payload);
    *(_QWORD *)(v32 + 16) = v34 + 1;
    sub_10003BB2C(v30, v32 + v40 + v34 * v41, type metadata accessor for AEAConfigurationProfile.Payload);
  }
  else
  {
    v32 = v46;
  }
  v35 = v44;
  v36 = v45;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v45, v44+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_profileID, v7);
  v37 = *(_QWORD *)(v35
                  + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_version);
  result = type metadata accessor for AEAConfigurationProfile(0);
  *(_QWORD *)(v36 + *(int *)(result + 20)) = v37;
  *(_QWORD *)(v36 + *(int *)(result + 24)) = v32;
  return result;
}

void sub_100053718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  int64_t v24;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) + 20));
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v24 = (unint64_t)(v3 + 63) >> 6;
  v6 = AECalculatorBundleIdentifier;
  swift_bridgeObjectRetain(v1);
  v7 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v8 | (v7 << 6); ; i = __clz(__rbit64(v11)) + (v7 << 6))
  {
    v13 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 40 * i);
    v15 = *v13;
    v14 = v13[1];
    v16 = (unsigned __int8 *)(*(_QWORD *)(v1 + 56) + 16 * i);
    v17 = *v16;
    v18 = *((_QWORD *)v16 + 1);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v15 == v19 && v14 == v20)
    {
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v14);
LABEL_27:
      sub_100053B58(v17, v18);
      swift_release(v1);
      swift_bridgeObjectRelease(v18);
      return;
    }
    v22 = v20;
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v19, v20, 0);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) != 0)
      goto LABEL_27;
    swift_bridgeObjectRelease(v18);
    if (v5)
      goto LABEL_4;
LABEL_5:
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v10 >= v24)
      goto LABEL_28;
    v11 = *(_QWORD *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v24)
        goto LABEL_28;
      v11 = *(_QWORD *)(v2 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v24)
          goto LABEL_28;
        v11 = *(_QWORD *)(v2 + 8 * v7);
        if (!v11)
          break;
      }
    }
LABEL_18:
    v5 = (v11 - 1) & v11;
  }
  v12 = v10 + 3;
  if (v12 >= v24)
  {
LABEL_28:
    swift_release(v1);
    return;
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_18;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v24)
      goto LABEL_28;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_18;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_100053934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_profileID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_preferences));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationAntiphony));
  sub_100004D60((_QWORD *)(v0
                         + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_configurationProfiles));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_subscriptions));
  sub_100008370(*(_QWORD *)(v0+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler), *(_QWORD *)(v0+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_initialUpdateHandler+ 8));
  sub_1000187D0(v0+ OBJC_IVAR____TtC15assessmentagentP33_A3D1504CA0901FB458370B6BEA11AE1F32AEAConfigurationProfileAssertion_currentProfile, &qword_100093268);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000539EC()
{
  return type metadata accessor for AEAConfigurationProfileAssertion(0);
}

uint64_t type metadata accessor for AEAConfigurationProfileAssertion(uint64_t a1)
{
  uint64_t result;

  result = qword_1000930F8;
  if (!qword_1000930F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAConfigurationProfileAssertion);
  return result;
}

void sub_100053A30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_1000690C0;
    v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[4] = &unk_1000690D8;
    v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[6] = &unk_1000690F0;
    sub_100053B04(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      v6[8] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_updateClassMetadata2(a1, 256, 9, v6, a1 + 80);
    }
  }
}

void sub_100053B04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100093108)
  {
    v2 = type metadata accessor for AEAConfigurationProfile(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100093108);
  }
}

_QWORD *sub_100053B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorRPNInputModeEnabledKey);
  v6 = v5;
  v7 = sub_100018A8C(v4, v5, a1, a2);
  swift_bridgeObjectRelease(v6);
  if (v7 == 2)
  {
    v8 = _swiftEmptyArrayStorage;
  }
  else
  {
    v9 = v7 & 1;
    v8 = sub_100054898(0, 1, 1, _swiftEmptyArrayStorage);
    v11 = v8[2];
    v10 = v8[3];
    if (v11 >= v10 >> 1)
      v8 = sub_100054898((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8[2] = v11 + 1;
    *((_BYTE *)v8 + v11 + 32) = v9;
  }
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorUnitConversionInputModeEnabledKey);
  v14 = v13;
  v15 = sub_100018A8C(v12, v13, a1 & 1, a2);
  swift_bridgeObjectRelease(v14);
  if (v15 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_100054898(0, v8[2] + 1, 1, v8);
    v17 = v8[2];
    v16 = v8[3];
    if (v17 >= v16 >> 1)
      v8 = sub_100054898((_QWORD *)(v16 > 1), v17 + 1, 1, v8);
    v8[2] = v17 + 1;
    *((_BYTE *)v8 + v17 + 32) = v15 & 1 | 0x20;
  }
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorMathPaperModeEnabledKey);
  v20 = v19;
  v21 = sub_100018A8C(v18, v19, a1 & 1, a2);
  swift_bridgeObjectRelease(v20);
  if (v21 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_100054898(0, v8[2] + 1, 1, v8);
    v23 = v8[2];
    v22 = v8[3];
    if (v23 >= v22 >> 1)
      v8 = sub_100054898((_QWORD *)(v22 > 1), v23 + 1, 1, v8);
    v8[2] = v23 + 1;
    *((_BYTE *)v8 + v23 + 32) = v21 & 1 | 0x40;
  }
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorProgrammerModeEnabledKey);
  v26 = v25;
  v27 = sub_100018A8C(v24, v25, a1 & 1, a2);
  swift_bridgeObjectRelease(v26);
  if (v27 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_100054898(0, v8[2] + 1, 1, v8);
    v29 = v8[2];
    v28 = v8[3];
    if (v29 >= v28 >> 1)
      v8 = sub_100054898((_QWORD *)(v28 > 1), v29 + 1, 1, v8);
    v8[2] = v29 + 1;
    *((_BYTE *)v8 + v29 + 32) = v27 & 1 | 0x60;
  }
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorScientificModeEnabledKey);
  v32 = v31;
  v33 = sub_100018A8C(v30, v31, a1 & 1, a2);
  swift_bridgeObjectRelease(v32);
  if (v33 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_100054898(0, v8[2] + 1, 1, v8);
    v35 = v8[2];
    v34 = v8[3];
    if (v35 >= v34 >> 1)
      v8 = sub_100054898((_QWORD *)(v34 > 1), v35 + 1, 1, v8);
    v8[2] = v35 + 1;
    *((_BYTE *)v8 + v35 + 32) = v33 & 1 | 0x80;
  }
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorKeyboardMathSolvingEnabledKey);
  v38 = v37;
  v39 = sub_100018A8C(v36, v37, a1 & 1, a2);
  swift_bridgeObjectRelease(v38);
  if (v39 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_100054898(0, v8[2] + 1, 1, v8);
    v41 = v8[2];
    v40 = v8[3];
    if (v41 >= v40 >> 1)
      v8 = sub_100054898((_QWORD *)(v40 > 1), v41 + 1, 1, v8);
    v8[2] = v41 + 1;
    *((_BYTE *)v8 + v41 + 32) = v39 & 1 | 0xA0;
  }
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorMathPaperSolvingEnabledKey);
  v44 = v43;
  v45 = sub_100018A8C(v42, v43, a1 & 1, a2);
  swift_bridgeObjectRelease(v44);
  if (v45 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_100054898(0, v8[2] + 1, 1, v8);
    v47 = v8[2];
    v46 = v8[3];
    if (v47 >= v46 >> 1)
      v8 = sub_100054898((_QWORD *)(v46 > 1), v47 + 1, 1, v8);
    v8[2] = v47 + 1;
    *((_BYTE *)v8 + v47 + 32) = v45 & 1 | 0xC0;
  }
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(AECalculatorSquareRootOnBasicForcedKey);
  v50 = v49;
  v51 = sub_100018A8C(v48, v49, a1 & 1, a2);
  swift_bridgeObjectRelease(v50);
  if (v51 != 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_100054898(0, v8[2] + 1, 1, v8);
    v53 = v8[2];
    v52 = v8[3];
    if (v53 >= v52 >> 1)
      v8 = sub_100054898((_QWORD *)(v52 > 1), v53 + 1, 1, v8);
    v8[2] = v53 + 1;
    *((_BYTE *)v8 + v53 + 32) = v51 & 1 | 0xE0;
  }
  return v8;
}

_QWORD *sub_1000540DC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004D20(&qword_100093338);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100057558(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000541FC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004D20(&qword_100093368);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10005764C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10005431C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004D20(&qword_100093360);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100057758(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100054428(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004D20(&qword_100093300);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10005793C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100054544(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005456C(a1, a2, a3, a4, &qword_100092230, type metadata accessor for AEAParticipant);
}

uint64_t sub_100054558(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005456C(a1, a2, a3, a4, &qword_100093340, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_10005456C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100004D20(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100057B2C(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_100054778(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004D20((uint64_t *)&unk_100093310);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100057848(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100054898(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004D20(&qword_100093260);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100057A48(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100054990(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004D20(&qword_100093348);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10002D050(v25, v38);
      }
      else
      {
        sub_1000154A8((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_10002D050(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100054C8C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004D20(&qword_100093350);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100054F94(uint64_t a1, uint64_t a2)
{
  return sub_100055C30(a1, a2, &qword_100093358);
}

uint64_t sub_100054FA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t i;
  int v48;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_100004D20(a3);
  v48 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v12;
  v15 = v13;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v14 + 32);
  v17 = *(_QWORD *)(v14 + 64);
  v46 = (_QWORD *)(v14 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v44 = v5;
  v45 = (unint64_t)(v16 + 63) >> 6;
  v20 = v13 + 64;
  result = swift_retain(v14);
  v22 = 0;
  for (i = v14; ; v14 = i)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v45)
      break;
    v27 = v46;
    v28 = v46[v26];
    ++v22;
    if (!v28)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v45)
        goto LABEL_36;
      v28 = v46[v22];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_36:
          swift_release(v14);
          v5 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            v22 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v22 >= v45)
              goto LABEL_36;
            v28 = v46[v22];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v22 = v29;
      }
    }
LABEL_23:
    v19 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    v30 = *(_QWORD *)(v9 + 72);
    v31 = *(_QWORD *)(v14 + 48) + v30 * v25;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v31, v8);
      v32 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v25);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v31, v8);
      v32 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v25);
      swift_retain(v32);
    }
    v33 = *(_QWORD *)(v15 + 40);
    v34 = sub_100058000((unint64_t *)&qword_10008FA58, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v8, v34);
    v35 = -1 << *(_BYTE *)(v15 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v20 + 8 * (v36 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v20 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v20 + 8 * v37);
      }
      while (v41 == -1);
      v23 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v15 + 48) + v30 * v23, v11, v8);
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v23) = v32;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v14);
  v5 = v44;
  v27 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v14 + 32);
  if (v42 >= 64)
    bzero(v27, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v42;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_43:
  result = swift_release(v14);
  *v5 = v15;
  return result;
}

Swift::Int sub_100055334(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t i;
  char v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004D20(&qword_100093060);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v39 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v23 >= v38)
          goto LABEL_36;
        v24 = v39[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v38)
            goto LABEL_36;
          v24 = v39[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_36:
              swift_release(v5);
              v3 = v2;
              if ((v41 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v14 >= v38)
                  goto LABEL_36;
                v24 = v39[v14];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v14 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v31 = *v30;
      v32 = v30[1];
      v33 = *(_QWORD *)(v5 + 56) + 24 * v22;
      v35 = *(_QWORD *)v33;
      v34 = *(_QWORD *)(v33 + 8);
      v36 = *(_BYTE *)(v33 + 16);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain(v30[1]);
        sub_100006A5C(v35, v34, v36);
      }
      Hasher.init(_seed:)(v42, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v42, v31, v32);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v31;
      v19[1] = v32;
      v20 = *(_QWORD *)(v8 + 56) + 24 * v18;
      *(_QWORD *)v20 = v35;
      *(_QWORD *)(v20 + 8) = v34;
      *(_BYTE *)(v20 + 16) = v36;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10005565C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for AEAParticipant(0);
  v42 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100004D20(&qword_100093330);
  v43 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v39 = v3;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v41 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_36;
      v25 = v41[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release(v9);
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v40)
              goto LABEL_36;
            v25 = v41[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v42 + 72);
    v28 = *(_QWORD *)(v9 + 56) + v27 * v22;
    v29 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v22 + 8);
    v44 = *(_OWORD *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    if ((v43 & 1) != 0)
    {
      sub_10003BB2C(v28, (uint64_t)v8, type metadata accessor for AEAParticipant);
    }
    else
    {
      sub_10003D644(v28, (uint64_t)v8, type metadata accessor for AEAParticipant);
      sub_1000218D8(v44, v29);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v11 + 40));
    Data.hash(into:)(v45, v44, v29);
    result = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      v20 = v44;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      v20 = v44;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      v19 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19) = v20;
    result = sub_10003BB2C((uint64_t)v8, *(_QWORD *)(v11 + 56) + v27 * v19, type metadata accessor for AEAParticipant);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v39;
  v24 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v9 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

void sub_1000559E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int64_t v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t v31[4];
  char v32;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004D20(&qword_100091CA0);
  v29 = a2;
  v30 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v28 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v26 = v3;
    v27 = (unint64_t)(v7 + 63) >> 6;
    swift_retain(v5);
    v10 = 0;
    while (1)
    {
      if (v9)
      {
        v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v12 = v11 | (v10 << 6);
      }
      else
      {
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v13 >= v27)
          goto LABEL_25;
        v14 = v28[v13];
        ++v10;
        if (!v14)
        {
          v10 = v13 + 1;
          if (v13 + 1 >= v27)
            goto LABEL_25;
          v14 = v28[v10];
          if (!v14)
          {
            v15 = v13 + 2;
            if (v15 >= v27)
            {
LABEL_25:
              swift_release(v5);
              v3 = v26;
              if ((v29 & 1) != 0)
              {
                v25 = 1 << *(_BYTE *)(v5 + 32);
                if (v25 > 63)
                  bzero(v28, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v28 = -1 << v25;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v14 = v28[v15];
            if (!v14)
            {
              while (1)
              {
                v10 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_32;
                if (v10 >= v27)
                  goto LABEL_25;
                v14 = v28[v10];
                ++v15;
                if (v14)
                  goto LABEL_22;
              }
            }
            v10 = v15;
          }
        }
LABEL_22:
        v9 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      v16 = *(_QWORD *)(v5 + 48) + 40 * v12;
      v18 = *(_QWORD *)v16;
      v17 = *(_QWORD *)(v16 + 8);
      v19 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      v21 = *(_BYTE *)(v16 + 32);
      v22 = *(_QWORD *)(v5 + 56) + 16 * v12;
      v23 = *(_BYTE *)v22;
      v24 = *(_QWORD *)(v22 + 8);
      if ((v29 & 1) == 0)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v16 + 24));
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v17);
      }
      v31[0] = v18;
      v31[1] = v17;
      v31[2] = v19;
      v31[3] = v20;
      v32 = v21;
      sub_100039BD8(v31, v23, v24, v30);
    }
  }
  swift_release(v5);
  *v3 = v30;
}

Swift::Int sub_100055C24(uint64_t a1, uint64_t a2)
{
  return sub_100055C30(a1, a2, (uint64_t *)&unk_100093320);
}

Swift::Int sub_100055C30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100004D20(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

_OWORD *sub_100055F40(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10005A2B4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_100004D60(v19);
        return sub_10002D050(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000567C4();
      goto LABEL_7;
    }
    sub_100054990(v15, a4 & 1);
    v21 = sub_10005A2B4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000565E8(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100056070(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100056340(a1, a2, a3, &qword_100093378);
}

uint64_t sub_10005607C(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10005A2B4(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1000569B4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v18[7] + v12) = a1 & 1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_BYTE *)(v18[7] + v12) = a1 & 1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_100054C8C(result, a4 & 1);
  result = sub_10005A2B4(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000561D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10005A2B4(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000573AC(&qword_100093358);
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_100055C30(v15, a4 & 1, &qword_100093358);
  v21 = sub_10005A2B4(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100056340(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v6 = (_QWORD **)v4;
  v27 = a1;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_10005A2C8(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];
      result = swift_release(*(_QWORD *)(v22 + 8 * v15));
      *(_QWORD *)(v22 + 8 * v15) = v27;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100056B68(a4);
    goto LABEL_7;
  }
  sub_100054FA0(v18, a3 & 1, a4);
  v24 = sub_10005A2C8(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v15 = v24;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return sub_100056654(v15, (uint64_t)v12, v27, v21);
}

uint64_t sub_1000564B0(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10005A3FC(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for AEAParticipant(0) - 8) + 72) * v12;
        return sub_100058040(a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100056F70();
      goto LABEL_7;
    }
    sub_10005565C(v15, a4 & 1);
    v22 = sub_10005A3FC(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000566EC(v12, a2, a3, a1, v18);
      return sub_1000218D8(a2, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

_OWORD *sub_1000565E8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10002D050(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_100056654(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1000566EC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for AEAParticipant(0);
  result = sub_10003BB2C(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, type metadata accessor for AEAParticipant);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

unint64_t sub_10005677C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

void *sub_1000567C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100004D20(&qword_100093348);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1000154A8(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10002D050(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000569A8()
{
  return sub_100056B68(&qword_100093378);
}

void *sub_1000569B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100004D20(&qword_100093350);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    result = (void *)swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100056B5C()
{
  return sub_1000573AC(&qword_100093358);
}

void *sub_100056B68(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004D20(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)(*v1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v7);
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = (void *)swift_retain(v21);
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100056D98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  sub_100004D20(&qword_100093060);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_BYTE *)(v21 + 16);
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v23;
    *(_BYTE *)(v26 + 16) = v25;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_100006A5C(v22, v23, v25);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100056F70()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for AEAParticipant(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004D20(&qword_100093330);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v26 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_10003D644(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for AEAParticipant);
    v22 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    sub_10003BB2C((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, type metadata accessor for AEAParticipant);
    result = (void *)sub_1000218D8(v19, v20);
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    result = (void *)swift_release(v5);
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1000571B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  sub_100004D20(&qword_100091CA0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 40 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v21 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 24);
    LOBYTE(v17) = *(_BYTE *)(v17 + 32);
    v22 = 16 * v15;
    v23 = *(_QWORD *)(v2 + 56) + v22;
    v24 = *(_BYTE *)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v26 = v18;
    *(_QWORD *)(v26 + 8) = v19;
    *(_QWORD *)(v26 + 16) = v21;
    *(_QWORD *)(v26 + 24) = v20;
    *(_BYTE *)(v26 + 32) = v17;
    v27 = *(_QWORD *)(v4 + 56) + v22;
    *(_BYTE *)v27 = v24;
    *(_QWORD *)(v27 + 8) = v25;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v19);
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1000573A0()
{
  return sub_1000573AC((uint64_t *)&unk_100093320);
}

void *sub_1000573AC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100004D20(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = (void *)swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100057558(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005764C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100004D20(&qword_100093370);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100057758(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100057848(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005793C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100004D20(&qword_100093308);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100057A48(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100057B2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100057C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100093268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057C8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AEAConfigurationProfile(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100057CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100093268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004D20(&qword_100093268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057D58()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100057D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000527F4(a1, a2, a3, v3);
}

uint64_t sub_100057D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for AEAAssessmentSessionConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  v7 = v0 + v4 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 16));
  v8 = v7 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = type metadata accessor for AEAParticipant(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v12 + 20) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v1 + 20)));
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v3 | 7);
}

uint64_t sub_100057EB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for AEAAssessmentSessionConfiguration(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1000932A4);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10000CB20;
  return sub_1000529B0(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100057F6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100057F90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000932B4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000CB20;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000932B0 + dword_1000932B0))(a1, v4);
}

uint64_t sub_100058000(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100058040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AEAParticipant(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AEAExternalDisplayActivation()
{
  return &type metadata for AEAExternalDisplayActivation;
}

uint64_t sub_10005809C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000580B4, 0, 0);
}

uint64_t sub_1000580B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 64);
  v4 = (uint64_t (*)(uint64_t))((char *)&dword_1000907D0 + dword_1000907D0);
  v2 = (_QWORD *)swift_task_alloc(unk_1000907D4);
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_100058118;
  return v4(v1);
}

uint64_t sub_100058118()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_100058164@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  NSString v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  double result;

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(a1, "arrayForKey:", v5);

  if (v6
    && (v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, (char *)&type metadata for Any + 8),
        v6,
        v8 = sub_1000151AC(v7),
        swift_bridgeObjectRelease(v7),
        v8))
  {
    *(_QWORD *)(a2 + 24) = &type metadata for AEAExternalDisplayDeactivation;
    *(_QWORD *)(a2 + 32) = &off_100087170;
    v9 = (_QWORD *)swift_allocObject(&unk_1000870B8, 88, 7);
    *(_QWORD *)a2 = v9;
    sub_100008380(v2 + 24, (uint64_t)(v9 + 5));
    v9[2] = 0xD000000000000045;
    v9[3] = 0x800000010006DFC0;
    v9[4] = 4;
    v9[10] = v8;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10005828C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = dword_1000907C0;
  v5 = (_QWORD *)swift_task_alloc(unk_1000907C4);
  v3[6] = v5;
  *v5 = v3;
  v5[1] = sub_100058318;
  return ((uint64_t (__cdecl *)())((char *)&dword_1000907C0 + v4))();
}

uint64_t sub_100058318(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000583A0, 0, 0);
}

uint64_t sub_1000583A0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  Class isa;
  NSString v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  id v15;
  uint64_t v16;

  v1 = v0[7];
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = (void *)v0[4];
    v3 = sub_10002CBD0(v1);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setArray:forKey:", isa, v5);

    v0[2] = 0;
    v6 = objc_msgSend(v2, "persistWithError:", v0 + 2);
    v7 = (void *)v0[2];
    v8 = v0[7];
    if (!v6)
    {
      v15 = v7;
      swift_bridgeObjectRelease(v8);
      _convertNSErrorToError(_:)(v7);

      swift_willThrow(v16);
      v14 = (uint64_t (*)(void))v0[1];
      return v14();
    }
    v9 = (_QWORD *)v0[3];
    v10 = v0[5] + 24;
    v9[3] = &type metadata for AEAExternalDisplayDeactivation;
    v9[4] = &off_100087170;
    v11 = (_QWORD *)swift_allocObject(&unk_1000870B8, 88, 7);
    *v9 = v11;
    sub_100008380(v10, (uint64_t)(v11 + 5));
    v11[2] = 0xD000000000000045;
    v11[3] = 0x800000010006DFC0;
    v11[4] = 4;
    v11[10] = v8;
    v12 = v7;
  }
  else
  {
    v13 = v0[3];
    *(_QWORD *)(v13 + 32) = 0;
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    swift_bridgeObjectRelease(v1);
  }
  v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100058588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  v6 = (_QWORD *)swift_task_alloc(dword_10009338C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10000CB20;
  v6[4] = a2;
  v6[5] = v2;
  v6[3] = a1;
  v9 = (uint64_t (*)(void))((char *)&dword_1000907C0 + dword_1000907C0);
  v7 = (_QWORD *)swift_task_alloc(unk_1000907C4);
  v6[6] = v7;
  *v7 = v6;
  v7[1] = sub_100058318;
  return v9();
}

uint64_t sub_10005861C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_100004D60(v0 + 5);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t destroy for AEAExternalDisplayDeactivation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  sub_100004D60(a1 + 3);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for AEAExternalDisplayDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = a2 + 24;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain(v4);
  v8(a1 + 24, v5, v7);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *assignWithCopy for AEAExternalDisplayDeactivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  sub_10000C54C(a1 + 3, a2 + 3);
  v6 = a2[8];
  v7 = a1[8];
  a1[8] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for AEAExternalDisplayDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  sub_100004D60((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for AEAExternalDisplayDeactivation()
{
  return &type metadata for AEAExternalDisplayDeactivation;
}

unint64_t sub_1000587EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004D20(&qword_100093350);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v16 = v1;
  v6 = (_BYTE *)(v1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10005A410(v7, v8, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10005A4B8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v16;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100058924(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004D20(&qword_1000935B8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10005A410(v7, v8, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10005A4B8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100058A64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100004D20(&qword_100093348);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v17 = a1;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10003FDE0(v7, (uint64_t)&v18, &qword_1000935A8);
    v8 = v18;
    v9 = v19;
    result = sub_10005A410(v18, v19, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10005A4B8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10002D050(&v20, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      v16 = v17;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100058BB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004D20(&qword_100093060);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v19 = v1;
  v6 = (char *)(v1 + 64);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 4);
    v8 = *((_QWORD *)v6 - 3);
    v9 = *((_QWORD *)v6 - 2);
    v10 = *((_QWORD *)v6 - 1);
    v11 = *v6;
    swift_bridgeObjectRetain(v8);
    sub_100006A5C(v9, v10, v11);
    result = sub_10005A410(v7, v8, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10005A4B8);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v4[6] + 16 * result);
    *v14 = v7;
    v14[1] = v8;
    v15 = v4[7] + 24 * result;
    *(_QWORD *)v15 = v9;
    *(_QWORD *)(v15 + 8) = v10;
    *(_BYTE *)(v15 + 16) = v11;
    v16 = v4[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v6 += 40;
    v4[2] = v18;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v19;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100058D08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004D20(&qword_100091CA0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v9 = v6[1];
    v8 = v6[2];
    v10 = *((_BYTE *)v6 + 24);
    v11 = *((_BYTE *)v6 + 32);
    v12 = v6[5];
    *(_QWORD *)&v21 = *(v6 - 1);
    *((_QWORD *)&v21 + 1) = v7;
    *(_QWORD *)&v22 = v9;
    *((_QWORD *)&v22 + 1) = v8;
    v23 = v10;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v7);
    result = sub_10005A32C((uint64_t)&v21);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = v4[6] + 40 * result;
    v16 = v22;
    *(_OWORD *)v15 = v21;
    *(_OWORD *)(v15 + 16) = v16;
    *(_BYTE *)(v15 + 32) = v23;
    v17 = v4[7] + 16 * result;
    *(_BYTE *)v17 = v11;
    *(_QWORD *)(v17 + 8) = v12;
    v18 = v4[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v4[2] = v20;
    v6 += 7;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100058E5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100004D20(&qword_1000935B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100004D20(&qword_100093330);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10003FDE0(v13, (uint64_t)v5, &qword_1000935B0);
    v16 = *v5;
    v15 = v5[1];
    result = sub_10005A410(*v5, v15, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10005A7F0);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v16;
    v20[1] = v15;
    v21 = v8[7];
    v22 = type metadata accessor for AEAParticipant(0);
    result = sub_100023A48(v10, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100059000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___backing;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___backing);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___backing);
  }
  else
  {
    v4 = sub_100059788();
    if (!v4)
      v4 = sub_100058A64((uint64_t)_swiftEmptyArrayStorage);
    v3 = v4;
    v5 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(v5);
    v2 = 0;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_100059070@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE v14[24];

  v3 = sub_100004D20(&qword_10008F508);
  v4 = __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___fileURL;
  swift_beginAccess(v1 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___fileURL, v14, 0, 0);
  sub_10003FDE0(v9, (uint64_t)v8, &qword_10008F508);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  sub_1000187D0((uint64_t)v8, &qword_10008F508);
  URL.appendingPathComponent(_:)(*(_QWORD *)(v1 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad_fileName), *(_QWORD *)(v1 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad_fileName + 8));
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess(v9, v13, 33, 0);
  sub_1000061E4((uint64_t)v6, v9);
  return swift_endAccess(v13);
}

uint64_t sub_100059204(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  swift_bridgeObjectRetain(a2);
  v4 = sub_100059000();
  if (!*(_QWORD *)(v4 + 16)
    || (v5 = sub_10005A410(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10005A4B8), (v6 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v4);
    goto LABEL_8;
  }
  sub_1000154A8(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v10);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v4);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_8:
    sub_1000187D0((uint64_t)&v10, (uint64_t *)&unk_1000902D0);
    return 0;
  }
  v7 = sub_10001F494(0, qword_10008F518, NSNumber_ptr);
  if (swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, v7, 6))
    return v9;
  else
    return 0;
}

uint64_t sub_100059368(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  swift_bridgeObjectRetain(a2);
  v4 = sub_100059000();
  if (!*(_QWORD *)(v4 + 16)
    || (v5 = sub_10005A410(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10005A4B8), (v6 & 1) == 0))
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v4);
    goto LABEL_9;
  }
  sub_1000154A8(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v4);
  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_9:
    sub_1000187D0((uint64_t)&v9, (uint64_t *)&unk_1000902D0);
    return 0;
  }
  if (swift_dynamicCast(&v8, &v9, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v8;
  else
    return 0;
}

uint64_t sub_1000594EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  swift_bridgeObjectRetain(a2);
  v4 = sub_100059000();
  if (!*(_QWORD *)(v4 + 16)
    || (v5 = sub_10005A410(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10005A4B8), (v6 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v4);
    goto LABEL_8;
  }
  sub_1000154A8(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v10);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v4);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_8:
    sub_1000187D0((uint64_t)&v10, (uint64_t *)&unk_1000902D0);
    return 0;
  }
  v7 = sub_100004D20(&qword_10008F510);
  if (swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, v7, 6))
    return v9;
  else
    return 0;
}

uint64_t sub_100059788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  Class isa;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  _BYTE v28[16];
  _OWORD v29[2];
  _OWORD v30[2];

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100059070((uint64_t)v3);
  v14 = Data.init(contentsOf:options:)(v3, 0);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v17 = (void *)objc_opt_self(NSPropertyListSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v29[0] = 0;
  v19 = objc_msgSend(v17, "propertyListWithData:options:format:error:", isa, 2, 0, v29);

  v20 = *(id *)&v29[0];
  if (v19)
  {
    _bridgeAnyObjectToAny(_:)(v30, v19);
    sub_100006118(v14, v16);
    swift_unknownObjectRelease(v19);
    sub_10002D050(v30, v29);
    v21 = sub_100004D20(&qword_10008F828);
    if (swift_dynamicCast(&v26, v29, (char *)&type metadata for Any + 8, v21, 6))
      return v26;
    else
      return 0;
  }
  else
  {
    v22 = v20;
    v23 = _convertNSErrorToError(_:)(v20);

    swift_willThrow(v24);
    sub_100006118(v14, v16);
    if (qword_10008E5E0 != -1)
      swift_once(&qword_10008E5E0, sub_10001552C);
    v4 = type metadata accessor for Logger(0);
    sub_10000B164(v4, (uint64_t)qword_100093E18);
    swift_errorRetain(v23);
    v5 = swift_errorRetain(v23);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v30[0] = v9;
      *(_DWORD *)v8 = 136446210;
      swift_getErrorValue(v23, v28, v27);
      v10 = sub_10004CCD0(v27[1], v27[2]);
      v12 = v11;
      *(_QWORD *)&v29[0] = sub_100059C74(v10, v11, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, (char *)v29 + 8, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to read property list. Error: %{public}s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(v23);
    }
    else
    {
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      swift_errorRelease(v23);

    }
    return 0;
  }
}

uint64_t sub_100059AF4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100004D60(v0 + 2);
  v1 = (char *)v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad_directoryURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad_fileName
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___backing));
  sub_1000187D0((uint64_t)v0 + OBJC_IVAR____TtCC15assessmentagent14AEAPolicyStore17ReadingScratchpad____lazy_storage___fileURL, &qword_10008F508);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100059B88()
{
  return _s17ReadingScratchpadCMa(0);
}

uint64_t _s17ReadingScratchpadCMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1000934A0;
  if (!qword_1000934A0)
    return swift_getSingletonMetadata(a1, &_s17ReadingScratchpadCMn);
  return result;
}

void sub_100059BCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = "(";
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_100069200;
    v6[3] = &unk_100069218;
    sub_1000060A0(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

uint64_t sub_100059C74(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100059D44(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000154A8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000154A8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100004D60(v12);
  return v7;
}

uint64_t sub_100059D44(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100059EFC(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100059EFC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100059F90(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_10005A168(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10005A168(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100059F90(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10005A104(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10005A104(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100004D20(&qword_1000935A0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10005A168(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004D20(&qword_1000935A0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005A2B4(uint64_t a1, uint64_t a2)
{
  return sub_10005A410(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10005A4B8);
}

unint64_t sub_10005A2C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100058000((unint64_t *)&qword_10008FA58, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10005A598(a1, v7);
}

unint64_t sub_10005A32C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, *(_QWORD *)(v1 + 40));
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v9, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 16);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(v9, v6, v5);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(_BYTE *)(a1 + 32) & 1);
  v7 = Hasher._finalize()();
  return sub_10005A6D0((uint64_t *)a1, v7);
}

uint64_t sub_10005A3FC(uint64_t a1, uint64_t a2)
{
  return sub_10005A410(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10005A7F0);
}

uint64_t sub_10005A410(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  uint64_t v4;
  Swift::Int v8;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, *(_QWORD *)(v4 + 40));
  a3(v11, a1, a2);
  v8 = Hasher._finalize()();
  return a4(a1, a2, v8);
}

unint64_t sub_10005A488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10005B180(a1, v4);
}

unint64_t sub_10005A4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10005A598(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100058000(&qword_100090FA0, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10005A6D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = ~v4;
    v8 = *(_QWORD *)(v2 + 48);
    v9 = *a1;
    v10 = a1[1];
    do
    {
      v11 = v8 + 40 * v5;
      v12 = *(_QWORD *)(v11 + 8);
      v14 = *(_QWORD *)(v11 + 16);
      v13 = *(_QWORD *)(v11 + 24);
      v15 = *(unsigned __int8 *)(v11 + 32);
      v16 = *(_QWORD *)v11 == v9 && v12 == v10;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v11, v12, v9, v10, 0) & 1) != 0)
      {
        v17 = a1[3];
        if (v13)
        {
          if (v17)
          {
            v18 = a1[2];
            v19 = v14 == v18 && v13 == v17;
            if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, v18, v17, 0) & 1) != 0)
            {
LABEL_3:
              if (v15 == (a1[4] & 1))
                return v5;
            }
          }
        }
        else if (!v17)
        {
          goto LABEL_3;
        }
      }
      v5 = (v5 + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

uint64_t sub_10005A7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_10005B180(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10001F494(0, &qword_100091E08, AEAssessmentApplicationDescriptor_ptr);
    v7 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

void sub_10005B298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10005B2F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10005B4DCLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_10005B500()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100093FA8 = v5;
    unk_100093FB0 = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_10005B608()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100093FB8 = v5;
    unk_100093FC0 = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_10005B70C()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100093FC8 = v5;
    unk_100093FD0 = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_10005B810()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100093FD8 = v5;
    unk_100093FE0 = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_10005B90C()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100093FE8 = v5;
    unk_100093FF0 = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_10005BA04()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100093FF8 = v5;
    unk_100094000 = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_10005BB08()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100094008 = v5;
    unk_100094010 = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_10005BC0C()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100094018 = v5;
    unk_100094020 = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_10005BD10()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100094028 = v5;
    unk_100094030 = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_10005BE14()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100094038 = v5;
    unk_100094040 = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_10005BF18()
{
  NSString v0;
  NSString v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = String._bridgeToObjectiveC()();
  v1 = String._bridgeToObjectiveC()();
  if (qword_10008E690 != -1)
    swift_once(&qword_10008E690, sub_100045934);
  v2 = qword_100093FA0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (id)AELocalizedStringFromTableInBundle(v0, v1, v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    qword_100094048 = v5;
    unk_100094050 = v7;
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for AEALocalizedStrings()
{
  return objc_opt_self(_TtC15assessmentagent19AEALocalizedStrings);
}

const char *sub_10005C03C(void *a1)
{
  const char *result;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    v2 = String.init(cString:)();
    v4 = v3;
    sub_1000194C8(v2, v3);
    return (const char *)swift_bridgeObjectRelease(v4);
  }
  return result;
}

void sub_10005C084()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000B164(v0, (uint64_t)qword_100093E18);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Received filepath keepalive event", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t type metadata accessor for AEAConcreteXPCEventStreamPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent35AEAConcreteXPCEventStreamPrimitives);
}

uint64_t type metadata accessor for AEAConcreteProcessPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent28AEAConcreteProcessPrimitives);
}

__CFNotificationCenter *sub_10005C194()
{
  __CFNotificationCenter *result;

  result = CFNotificationCenterGetDarwinNotifyCenter();
  if (!result)
    __break(1u);
  return result;
}

uint64_t type metadata accessor for AEAConcreteSystemNotificationPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent39AEAConcreteSystemNotificationPrimitives);
}

uint64_t sub_10005C1D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  __CFNotificationCenter *v4;
  uint64_t v5;
  __CFString *v6;

  v1 = (_QWORD *)v0;
  v2 = *(uint64_t (**)(void))(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (__CFNotificationCenter *)v2();
  v5 = v1[5];
  v6 = (__CFString *)String._bridgeToObjectiveC()();
  CFNotificationCenterRemoveObserver(v4, v1, v6, 0);
  swift_bridgeObjectRelease(v5);
  swift_release(v3);

  swift_release(v1[7]);
  return swift_deallocClassInstance(v1, 64, 7);
}

uint64_t type metadata accessor for AEAConcreteSystemNotificationPrimitives.NotificationCenterObservation()
{
  return objc_opt_self(_TtCC15assessmentagent39AEAConcreteSystemNotificationPrimitivesP33_C0269155FA60FFFC5ADB9CC530115DE329NotificationCenterObservation);
}

void *sub_10005C2EC(void *result, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  void (*v9)(uint64_t);
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  if (a2)
  {
    v9 = *(void (**)(uint64_t))(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    v10 = result;
    v11 = a3;
    v12 = a5;
    swift_retain(v8);
    v13 = swift_retain(a2);
    v9(v13);

    swift_release(a2);
    return (void *)swift_release(v8);
  }
  return result;
}

uint64_t destroy for AEAiOSPolicyBundleFactory(_QWORD *a1)
{
  sub_100004D60(a1);
  return swift_unknownObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for AEAiOSPolicyBundleFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_unknownObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for AEAiOSPolicyBundleFactory(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10000C54C(a1, a2);
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  return a1;
}

__n128 initializeWithTake for AEAiOSPolicyBundleFactory(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AEAiOSPolicyBundleFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  sub_100004D60((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_unknownObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AEAiOSPolicyBundleFactory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AEAiOSPolicyBundleFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEAiOSPolicyBundleFactory()
{
  return &type metadata for AEAiOSPolicyBundleFactory;
}

id sub_10005C520(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  _QWORD *v39;
  Swift::String v40;
  Swift::String v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  void *v91;
  id v92;
  id v93;
  Class isa;
  id v95;
  uint64_t v97;
  _QWORD *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  __int128 v104;
  ValueMetadata *v105;
  _UNKNOWN **v106;
  __int128 v107;
  __int128 v108;
  unint64_t v109;
  _BYTE v110[24];
  _QWORD v111[2];
  _QWORD v112[7];
  __int128 v113;
  uint64_t v114;
  char v115;
  char v116;

  v2 = v1;
  v103 = a1;
  v101 = type metadata accessor for AEAExpirationActivation(0);
  __chkstk_darwin(v101);
  v4 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AEAUserConfirmationActivation(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(*sub_1000060F4(v2, v2[3]) + 104);
  v9 = *(_QWORD *)(*sub_1000060F4(v2, v2[3]) + 168);
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRetain(v9);
  v10 = sub_1000541FC(0, 1, 1, _swiftEmptyArrayStorage);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_1000541FC((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v98 = v4;
  *((_QWORD *)&v108 + 1) = &type metadata for AEAOSTransactionActivation;
  v109 = (unint64_t)&off_100083170;
  v13 = (_QWORD *)swift_allocObject(&unk_1000872B0, 48, 7);
  *(_QWORD *)&v107 = v13;
  v13[2] = 0xD00000000000002ALL;
  v13[3] = 0x800000010006EA40;
  v13[4] = 0;
  v13[5] = v9;
  v10[2] = v12 + 1;
  sub_1000084DC(&v107, (uint64_t)&v10[5 * v12 + 4]);
  v14 = objc_msgSend(v8, "shouldShowPromptsAndBanners");
  v102 = v8;
  if (v14)
  {
    v15 = sub_1000060F4(v2, v2[3]);
    sub_100008380(*v15 + 360, (uint64_t)(v7 + 24));
    v16 = (uint64_t *)(v103 + *(int *)(type metadata accessor for AEAPolicyBundleArguments(0) + 32));
    v17 = *v16;
    v18 = v16[3];
    v19 = (uint64_t)&v7[*(int *)(v5 + 32)];
    v100 = *(_OWORD *)(v16 + 1);
    sub_10001E174(v103, v19);
    *(_QWORD *)v7 = 0xD000000000000026;
    *((_QWORD *)v7 + 1) = 0x800000010006ED50;
    *((_QWORD *)v7 + 2) = 0;
    *((_QWORD *)v7 + 8) = v17;
    v20 = v100;
    *(_OWORD *)(v7 + 72) = v100;
    *((_QWORD *)v7 + 11) = v18;
    v22 = v10[2];
    v21 = v10[3];
    swift_retain(v20);
    swift_retain(v18);
    if (v22 >= v21 >> 1)
      v10 = sub_1000541FC((_QWORD *)(v21 > 1), v22 + 1, 1, v10);
    *((_QWORD *)&v108 + 1) = v5;
    v109 = (unint64_t)&off_100084598;
    v23 = sub_10002B8E4(&v107);
    sub_10003D644((uint64_t)v7, (uint64_t)v23, type metadata accessor for AEAUserConfirmationActivation);
    v10[2] = v22 + 1;
    sub_1000084DC(&v107, (uint64_t)&v10[5 * v22 + 4]);
    sub_10002F554((uint64_t)v7, type metadata accessor for AEAUserConfirmationActivation);
  }
  v24 = *sub_1000060F4(v2, v2[3]) + 480;
  v25 = sub_1000060F4(v2, v2[3]);
  sub_100008380(*v25 + 568, (uint64_t)v112);
  *(_QWORD *)&v100 = type metadata accessor for AEAPolicyBundleArguments(0);
  v26 = *(_QWORD *)(v103 + *(int *)(v100 + 24));
  v27 = (uint64_t *)(v103 + *(int *)(v100 + 28));
  v28 = *v27;
  v29 = v27[3];
  swift_retain(v26);
  v99 = *(_OWORD *)(v27 + 1);
  swift_retain(v99);
  swift_retain(v29);
  v30 = v102;
  LOBYTE(v27) = objc_msgSend(v102, "shouldEnforceSingleAppMode");
  LOBYTE(v30) = objc_msgSend(v30, "shouldSetCustomHomeScreenLayout");
  *(_QWORD *)&v107 = 0xD00000000000002ALL;
  *((_QWORD *)&v107 + 1) = 0x800000010006EAA0;
  v108 = xmmword_1000693D0;
  v109 = 0x800000010006EA70;
  sub_100008380(v24, (uint64_t)v110);
  v112[5] = v26;
  v112[6] = v28;
  v113 = v99;
  v114 = v29;
  v115 = (char)v27;
  v116 = (char)v30;
  v32 = v10[2];
  v31 = v10[3];
  if (v32 >= v31 >> 1)
    v10 = sub_1000541FC((_QWORD *)(v31 > 1), v32 + 1, 1, v10);
  v33 = v98;
  v34 = v101;
  v105 = &type metadata for AEARestrictionsActivation;
  v106 = &off_100082DF0;
  *(_QWORD *)&v104 = swift_allocObject(&unk_1000872D8, 178, 7);
  sub_100014510((uint64_t)&v107, v104 + 16);
  v10[2] = v32 + 1;
  sub_1000084DC(&v104, (uint64_t)&v10[5 * v32 + 4]);
  sub_100014544(&v107);
  v35 = sub_1000060F4(v2, v2[3]);
  sub_100008380(*v35 + 688, (uint64_t)&v108 + 8);
  *(_QWORD *)&v107 = 0xD00000000000002BLL;
  *((_QWORD *)&v107 + 1) = 0x800000010006EAD0;
  *(_QWORD *)&v108 = 1;
  v37 = v10[2];
  v36 = v10[3];
  if (v37 >= v36 >> 1)
    v10 = sub_1000541FC((_QWORD *)(v36 > 1), v37 + 1, 1, v10);
  v38 = v102;
  v105 = &type metadata for AEAStageManagerActivation;
  v106 = &off_1000864A0;
  *(_QWORD *)&v104 = swift_allocObject(&unk_100087300, 80, 7);
  sub_10005D758((uint64_t)&v107, v104 + 16);
  v10[2] = v37 + 1;
  sub_1000084DC(&v104, (uint64_t)&v10[5 * v37 + 4]);
  sub_10005D794((uint64_t)&v107);
  if (objc_msgSend(v38, "shouldDisableSiri"))
  {
    v39 = sub_1000060F4(v2, v2[3]);
    sub_100008380(*v39 + 528, (uint64_t)v110);
    v109 = 1;
    *(_QWORD *)&v104 = 0;
    *((_QWORD *)&v104 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v40._countAndFlagsBits = 0xD000000000000031;
    v40._object = (void *)0x800000010006ED10;
    String.append(_:)(v40);
    v41._countAndFlagsBits = 0x7473655269726953;
    v41._object = (void *)0xEE00726F74636972;
    String.append(_:)(v41);
    v107 = v104;
    *(_QWORD *)&v108 = 0xD00000000000002ALL;
    *((_QWORD *)&v108 + 1) = 0x800000010006ECE0;
    v43 = v10[2];
    v42 = v10[3];
    if (v43 >= v42 >> 1)
      v10 = sub_1000541FC((_QWORD *)(v42 > 1), v43 + 1, 1, v10);
    v105 = &type metadata for AEAExternalSubsystemRestrictionActivation;
    v106 = &off_100087680;
    *(_QWORD *)&v104 = swift_allocObject(&unk_100087440, 96, 7);
    sub_10005DB70((uint64_t)&v107, v104 + 16);
    v10[2] = v43 + 1;
    sub_1000084DC(&v104, (uint64_t)&v10[5 * v43 + 4]);
    sub_10005DBAC(&v107);
  }
  if (objc_msgSend(v38, "shouldScrubPasteboard"))
  {
    v44 = sub_1000060F4(v2, v2[3]);
    sub_100008380(*v44 + 264, (uint64_t)&v108 + 8);
    *(_QWORD *)&v107 = 0xD00000000000002CLL;
    *((_QWORD *)&v107 + 1) = 0x800000010006ECB0;
    *(_QWORD *)&v108 = 1;
    v46 = v10[2];
    v45 = v10[3];
    if (v46 >= v45 >> 1)
      v10 = sub_1000541FC((_QWORD *)(v45 > 1), v46 + 1, 1, v10);
    v105 = &type metadata for AEAPasteboardActivation;
    v106 = &off_100086A38;
    *(_QWORD *)&v104 = swift_allocObject(&unk_100087418, 80, 7);
    sub_10005DACC((uint64_t)&v107, v104 + 16);
    v10[2] = v46 + 1;
    sub_1000084DC(&v104, (uint64_t)&v10[5 * v46 + 4]);
    sub_10005DB08((uint64_t)&v107);
  }
  if (objc_msgSend(v38, "shouldRestrictNetworkAccess"))
  {
    v47 = *(_QWORD *)(*sub_1000060F4(v2, v2[3]) + 312);
    v48 = sub_1000060F4(v2, v2[3]);
    sub_100008380(*v48 + 176, (uint64_t)&v109);
    v49 = *(_QWORD *)(v103 + *(int *)(v100 + 20));
    *(_QWORD *)&v107 = 0xD000000000000025;
    *((_QWORD *)&v107 + 1) = 0x800000010006EC80;
    *(_QWORD *)&v108 = 1;
    *((_QWORD *)&v108 + 1) = v47;
    v111[1] = v49;
    v50 = v10[2];
    v51 = v10[3];
    swift_unknownObjectRetain(v47);
    swift_retain(v49);
    if (v50 >= v51 >> 1)
      v10 = sub_1000541FC((_QWORD *)(v51 > 1), v50 + 1, 1, v10);
    v105 = &type metadata for AEANetworkActivation;
    v106 = &off_100084030;
    *(_QWORD *)&v104 = swift_allocObject(&unk_1000873F0, 96, 7);
    sub_10005DA2C((uint64_t)&v107, v104 + 16);
    v10[2] = v50 + 1;
    sub_1000084DC(&v104, (uint64_t)&v10[5 * v50 + 4]);
    sub_10005DA68(&v107);
    v34 = v101;
  }
  if (objc_msgSend(v38, "shouldStopAirPlayBeforehand"))
  {
    v52 = *(_QWORD *)(*sub_1000060F4(v2, v2[3]) + 304);
    v53 = v10[2];
    v54 = v10[3];
    swift_unknownObjectRetain(v52);
    if (v53 >= v54 >> 1)
      v10 = sub_1000541FC((_QWORD *)(v54 > 1), v53 + 1, 1, v10);
    *((_QWORD *)&v108 + 1) = &type metadata for AEAAirPlayActivation;
    v109 = (unint64_t)&off_1000825A0;
    v55 = (_QWORD *)swift_allocObject(&unk_1000873C8, 48, 7);
    *(_QWORD *)&v107 = v55;
    v55[2] = 0xD000000000000021;
    v55[3] = 0x800000010006EC50;
    v55[4] = 1;
    v55[5] = v52;
    v10[2] = v53 + 1;
    sub_1000084DC(&v107, (uint64_t)&v10[5 * v53 + 4]);
  }
  if (objc_msgSend(v38, "shouldRestrictMedia"))
  {
    v56 = sub_1000060F4(v2, v2[3]);
    sub_100008380(*v56 + 320, (uint64_t)&v108 + 8);
    v57 = *(_QWORD *)(v103 + *(int *)(v100 + 20));
    *(_QWORD *)&v107 = 0xD000000000000023;
    *((_QWORD *)&v107 + 1) = 0x800000010006EC20;
    *(_QWORD *)&v108 = 1;
    v111[0] = v57;
    v58 = v10[2];
    v59 = v10[3];
    swift_retain(v57);
    if (v58 >= v59 >> 1)
      v10 = sub_1000541FC((_QWORD *)(v59 > 1), v58 + 1, 1, v10);
    v105 = &type metadata for AEARestrictMediaActivation;
    v106 = &off_100086718;
    *(_QWORD *)&v104 = swift_allocObject(&unk_1000873A0, 88, 7);
    sub_10005D950((uint64_t)&v107, v104 + 16);
    v10[2] = v58 + 1;
    sub_1000084DC(&v104, (uint64_t)&v10[5 * v58 + 4]);
    sub_10005D98C(&v107);
  }
  v60 = *(_QWORD *)(*sub_1000060F4(v2, v2[3]) + 520);
  v61 = sub_1000060F4(v2, v2[3]);
  sub_100008380(*v61 + 648, (uint64_t)(v33 + 4));
  swift_unknownObjectRetain(v60);
  objc_msgSend(v38, "expirationTime");
  v63 = v62;
  sub_10001E174(v103, (uint64_t)v33 + *(int *)(v34 + 36));
  *v33 = 0xD000000000000025;
  v33[1] = 0x800000010006EB00;
  v33[2] = 1;
  v33[3] = v60;
  v33[9] = v63;
  v65 = v10[2];
  v64 = v10[3];
  if (v65 >= v64 >> 1)
    v10 = sub_1000541FC((_QWORD *)(v64 > 1), v65 + 1, 1, v10);
  *((_QWORD *)&v108 + 1) = v34;
  v109 = (unint64_t)&off_100084A20;
  v66 = sub_10002B8E4(&v107);
  sub_10003D644((uint64_t)v33, (uint64_t)v66, type metadata accessor for AEAExpirationActivation);
  v10[2] = v65 + 1;
  sub_1000084DC(&v107, (uint64_t)&v10[5 * v65 + 4]);
  sub_10002F554((uint64_t)v33, type metadata accessor for AEAExpirationActivation);
  if (objc_msgSend(v38, "shouldForceScreenMirroring"))
  {
    v67 = sub_1000060F4(v2, v2[3]);
    sub_100008380(*v67 + 568, (uint64_t)&v108 + 8);
    *(_QWORD *)&v107 = 0xD000000000000035;
    *((_QWORD *)&v107 + 1) = 0x800000010006EBE0;
    *(_QWORD *)&v108 = 1;
    v69 = v10[2];
    v68 = v10[3];
    if (v69 >= v68 >> 1)
      v10 = sub_1000541FC((_QWORD *)(v68 > 1), v69 + 1, 1, v10);
    v105 = &type metadata for AEAExternalDisplayActivation;
    v106 = &off_100087088;
    *(_QWORD *)&v104 = swift_allocObject(&unk_100087378, 80, 7);
    sub_10005D8AC((uint64_t)&v107, v104 + 16);
    v10[2] = v69 + 1;
    sub_1000084DC(&v104, (uint64_t)&v10[5 * v69 + 4]);
    sub_10005D8E8((uint64_t)&v107);
  }
  if (objc_msgSend(v38, "shouldAllowRemotelyKillingAgent"))
  {
    v70 = *sub_1000060F4(v2, v2[3]) + 216;
    v71 = sub_1000060F4(v2, v2[3]);
    sub_100008380(*v71 + 112, (uint64_t)v111);
    *(_QWORD *)&v107 = 0xD00000000000003CLL;
    *((_QWORD *)&v107 + 1) = 0x800000010006EBA0;
    *(_QWORD *)&v108 = 1;
    sub_100008380(v70, (uint64_t)&v108 + 8);
    v73 = v10[2];
    v72 = v10[3];
    if (v73 >= v72 >> 1)
      v10 = sub_1000541FC((_QWORD *)(v72 > 1), v73 + 1, 1, v10);
    v105 = &type metadata for AEAKillAgentNotificationListenerActivation;
    v106 = &off_1000828C8;
    *(_QWORD *)&v104 = swift_allocObject(&unk_100087350, 120, 7);
    sub_10000CB68((uint64_t)&v107, v104 + 16);
    v10[2] = v73 + 1;
    sub_1000084DC(&v104, (uint64_t)&v10[5 * v73 + 4]);
    sub_10005D874(&v107);
    v38 = v102;
  }
  if (objc_msgSend(v38, "shouldFailOnDeactivation"))
  {
    v75 = v10[2];
    v74 = v10[3];
    if (v75 >= v74 >> 1)
      v10 = sub_1000541FC((_QWORD *)(v74 > 1), v75 + 1, 1, v10);
    *((_QWORD *)&v108 + 1) = &type metadata for AEAFailingDeactivationAction;
    v109 = (unint64_t)&off_100084CE0;
    *(_QWORD *)&v107 = 0xD000000000000034;
    *((_QWORD *)&v107 + 1) = 0x800000010006EB60;
    *(_QWORD *)&v108 = 1;
    v10[2] = v75 + 1;
    sub_1000084DC(&v107, (uint64_t)&v10[5 * v75 + 4]);
  }
  v76 = *sub_1000060F4(v2, v2[3]) + 176;
  v77 = sub_1000060F4(v2, v2[3]);
  sub_100008380(*v77 + 216, (uint64_t)v111);
  *(_QWORD *)&v107 = 0xD00000000000002BLL;
  *((_QWORD *)&v107 + 1) = 0x800000010006EB30;
  *(_QWORD *)&v108 = 2;
  sub_100008380(v76, (uint64_t)&v108 + 8);
  v79 = v10[2];
  v78 = v10[3];
  if (v79 >= v78 >> 1)
    v10 = sub_1000541FC((_QWORD *)(v78 > 1), v79 + 1, 1, v10);
  v105 = &type metadata for AEAAssessmentStateActivation;
  v106 = &off_100086250;
  *(_QWORD *)&v104 = swift_allocObject(&unk_100087328, 120, 7);
  sub_10005D7CC((uint64_t)&v107, v104 + 16);
  v10[2] = v79 + 1;
  v80 = (uint64_t)(v10 + 4);
  sub_1000084DC(&v104, (uint64_t)&v10[5 * v79 + 4]);
  sub_10005D808((uint64_t)&v107);
  v81 = v2[5];
  v82 = *(_QWORD *)(*sub_1000060F4(v2, v2[3]) + 160);
  v83 = v10[2];
  if (v83)
  {
    *(_QWORD *)&v104 = _swiftEmptyArrayStorage;
    swift_unknownObjectRetain(v81);
    swift_unknownObjectRetain(v82);
    swift_bridgeObjectRetain(v10);
    specialized ContiguousArray.reserveCapacity(_:)(v83);
    do
    {
      sub_100008380(v80, (uint64_t)&v107);
      v84 = *((_QWORD *)&v108 + 1);
      v85 = v109;
      sub_1000060F4(&v107, *((uint64_t *)&v108 + 1));
      v86 = sub_100036D9C(v84, v85);
      v87 = sub_100004D60(&v107);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v87);
      v88 = *(_QWORD *)(v104 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v88);
      v89 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v88, v86);
      specialized ContiguousArray._endMutation()(v89);
      v80 += 40;
      --v83;
    }
    while (v83);
    v90 = (_QWORD *)v104;
    swift_bridgeObjectRelease_n(v10, 2);
  }
  else
  {
    swift_unknownObjectRetain(v81);
    swift_unknownObjectRetain(v82);
    swift_bridgeObjectRelease(v10);
    v90 = _swiftEmptyArrayStorage;
  }
  if (qword_10008E618 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v91 = (void *)qword_100093EB8;
  v92 = objc_allocWithZone((Class)AEPolicyBundle);
  v93 = v91;
  sub_100004D20(&qword_100093978);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v90);
  v95 = objc_msgSend(v92, "initWithPolicyStore:performancePrimitives:activations:queue:", v81, v82, isa, v93);
  swift_unknownObjectRelease(v102);

  swift_unknownObjectRelease(v81);
  swift_unknownObjectRelease(v82);

  return v95;
}

uint64_t sub_10005D700()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  sub_100004D60(v0 + 7);
  sub_100004D60(v0 + 12);
  swift_release(v0[17]);
  swift_release(v0[19]);
  swift_release(v0[21]);
  return swift_deallocObject(v0, 178, 7);
}

uint64_t sub_10005D758(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEAStageManagerActivation(a2, a1);
  return a2;
}

uint64_t sub_10005D794(uint64_t a1)
{
  destroy for AEAStageManagerActivation(a1);
  return a1;
}

uint64_t sub_10005D7CC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEAAssessmentStateActivation(a2, a1);
  return a2;
}

uint64_t sub_10005D808(uint64_t a1)
{
  destroy for AEAAssessmentStateActivation();
  return a1;
}

uint64_t sub_10005D840()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_100004D60(v0 + 5);
  sub_100004D60(v0 + 10);
  return swift_deallocObject(v0, 120, 7);
}

_QWORD *sub_10005D874(_QWORD *a1)
{
  destroy for AEAKillAgentNotificationListenerActivation(a1);
  return a1;
}

uint64_t sub_10005D8AC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEAExternalDisplayActivation(a2, a1);
  return a2;
}

uint64_t sub_10005D8E8(uint64_t a1)
{
  destroy for AEAStageManagerActivation(a1);
  return a1;
}

uint64_t sub_10005D91C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_100004D60(v0 + 5);
  swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10005D950(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEARestrictMediaActivation(a2, a1);
  return a2;
}

_QWORD *sub_10005D98C(_QWORD *a1)
{
  destroy for AEARestrictMediaActivation(a1);
  return a1;
}

uint64_t sub_10005D9C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005D9F0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_unknownObjectRelease(v0[5]);
  sub_100004D60(v0 + 6);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10005DA2C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEANetworkActivation(a2, a1);
  return a2;
}

_QWORD *sub_10005DA68(_QWORD *a1)
{
  destroy for AEANetworkActivation(a1);
  return a1;
}

uint64_t sub_10005DAA0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_100004D60((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10005DACC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEAStageManagerActivation(a2, a1);
  return a2;
}

uint64_t sub_10005DB08(uint64_t a1)
{
  destroy for AEAStageManagerActivation(a1);
  return a1;
}

uint64_t sub_10005DB3C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  sub_100004D60(v0 + 7);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10005DB70(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEAExternalSubsystemRestrictionActivation(a2, a1);
  return a2;
}

_QWORD *sub_10005DBAC(_QWORD *a1)
{
  destroy for AEAExternalSubsystemRestrictionActivation(a1);
  return a1;
}

uint64_t type metadata accessor for AEAConcreteManagedConfigurationPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent41AEAConcreteManagedConfigurationPrimitives);
}

_QWORD *sub_10005DC00(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;

  v2[2] = a1;
  v2[3] = a2;
  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "effectiveRestrictions");

    if (!v5
      || (v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable), v5, v7 = (void *)sub_10005DCCC(v6), swift_bridgeObjectRelease(v6), !v7))
    {
      swift_bridgeObjectRelease(0);
      v7 = &_swiftEmptyDictionarySingleton;
    }
    v2[4] = v7;
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10005DCCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t result;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[40];
  _OWORD v38[2];
  _OWORD v39[2];
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];
  uint64_t v43;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100004D20(&qword_100093358);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v34 = v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v1 + 64);
  v33 = (unint64_t)(63 - v5) >> 6;
  v7 = (char *)v42 + 8;
  v8 = (char *)v39 + 8;
  result = swift_bridgeObjectRetain(v1);
  v10 = 0;
  v32 = v1;
  while (1)
  {
    if (v6)
    {
      v15 = (v6 - 1) & v6;
      v16 = __clz(__rbit64(v6)) | (v10 << 6);
      v17 = v10;
    }
    else
    {
      v18 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v18 >= v33)
      {
LABEL_36:
        sub_100013A7C(v1);
        return (unint64_t)v3;
      }
      v19 = *(_QWORD *)(v34 + 8 * v18);
      v17 = v10 + 1;
      if (!v19)
      {
        v17 = v10 + 2;
        if (v10 + 2 >= v33)
          goto LABEL_36;
        v19 = *(_QWORD *)(v34 + 8 * v17);
        if (!v19)
        {
          v17 = v10 + 3;
          if (v10 + 3 >= v33)
            goto LABEL_36;
          v19 = *(_QWORD *)(v34 + 8 * v17);
          if (!v19)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v33)
              goto LABEL_36;
            v19 = *(_QWORD *)(v34 + 8 * v17);
            if (!v19)
            {
              v20 = v10 + 5;
              if (v10 + 5 >= v33)
                goto LABEL_36;
              v19 = *(_QWORD *)(v34 + 8 * v20);
              if (!v19)
              {
                while (1)
                {
                  v17 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_41;
                  if (v17 >= v33)
                    goto LABEL_36;
                  v19 = *(_QWORD *)(v34 + 8 * v17);
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v17 = v10 + 5;
            }
          }
        }
      }
LABEL_26:
      v15 = (v19 - 1) & v19;
      v16 = __clz(__rbit64(v19)) + (v17 << 6);
    }
    sub_100051804(*(_QWORD *)(v1 + 48) + 40 * v16, (uint64_t)v41);
    sub_1000154A8(*(_QWORD *)(v1 + 56) + 32 * v16, (uint64_t)v7);
    v39[0] = v42[0];
    v39[1] = v42[1];
    v40 = v43;
    v38[0] = v41[0];
    v38[1] = v41[1];
    sub_100051804((uint64_t)v38, (uint64_t)v37);
    if (!swift_dynamicCast(&v35, v37, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v35 = 0;
      v36 = 0;
      sub_1000518A8((uint64_t)v38);
      v31 = v36;
LABEL_35:
      swift_bridgeObjectRelease(v31);
      sub_100013A7C(v1);
      swift_release(v3);
      return 0;
    }
    v22 = v35;
    v21 = v36;
    sub_1000154A8((uint64_t)v8, (uint64_t)v37);
    sub_1000518A8((uint64_t)v38);
    v23 = sub_100004D20(&qword_10008F828);
    if ((swift_dynamicCast(&v35, v37, (char *)&type metadata for Any + 8, v23, 6) & 1) == 0)
    {
      v35 = 0;
      swift_bridgeObjectRelease(v21);
      v31 = v35;
      goto LABEL_35;
    }
    v24 = v35;
    result = sub_10005A2B4(v22, v21);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v11 = v8;
      v12 = v7;
      v13 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v13[1]);
      *v13 = v22;
      v13[1] = v21;
      v14 = v3[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v14 + 8 * v25));
      *(_QWORD *)(v14 + 8 * v25) = v24;
      v7 = v12;
      v8 = v11;
      v1 = v32;
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v3[6] + 16 * result);
    *v27 = v22;
    v27[1] = v21;
    *(_QWORD *)(v3[7] + 8 * result) = v24;
    v28 = v3[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_39;
    v3[2] = v30;
LABEL_8:
    v10 = v17;
    v6 = v15;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10005E090(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD *);
  _QWORD *v29;
  void (*v30)(_QWORD *, _QWORD);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_QWORD *);
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t inited;
  uint64_t v77;
  int64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(_QWORD *);
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(_QWORD *);
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int64_t v133;
  _QWORD *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t result;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(_QWORD *);
  void (*v158)(_QWORD *);
  void (*v159)(_QWORD *, _QWORD);
  uint64_t v160;
  uint64_t v161;
  _OWORD v162[2];
  char v163[80];
  char v164[80];
  char v165[56];
  char v166[56];
  __int128 v167;
  uint64_t v168;
  _QWORD v169[4];
  unint64_t v170;
  char v171[8];
  _BYTE v172[15];
  _BYTE v173[33];
  __int128 v174;
  __int128 v175;
  char v176;
  _OWORD v177[2];
  char v178;
  _QWORD *v179;

  v170 = a1;
  v146 = v1;
  sub_1000139A8(v1, (uint64_t)v173, &qword_100093AD8);
  sub_1000139A8((uint64_t)v173, (uint64_t)v177, &qword_100093AD8);
  if (LOBYTE(v177[0]) == 3)
  {
    swift_bridgeObjectRetain(a1);
    goto LABEL_44;
  }
  v174 = v177[0];
  v175 = v177[1];
  v176 = v178;
  swift_bridgeObjectRetain(a1);
  v156 = sub_10005F340();
  if (!v156)
  {
LABEL_44:
    sub_1000139A8(v146 + 40, (uint64_t)v172, &qword_10008FE38);
    sub_1000139A8((uint64_t)v172, (uint64_t)&v179, &qword_10008FE38);
    v54 = v179;
    if (!v179)
      goto LABEL_66;
    v55 = MCIntersectionKey;
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCIntersectionKey);
    v58 = v57;
    if (*(_QWORD *)(v170 + 16))
    {
      sub_10005A2B4(v56, v57);
      v60 = v59;
      swift_bridgeObjectRelease(v58);
      if ((v60 & 1) != 0)
      {
LABEL_50:
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
        v69 = v68;
        v70 = sub_100038C44(v169, v67, v68);
        if (*v71)
        {
          v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAppLockBundleIDs);
          v74 = v73;
          v75 = sub_100004D20(&qword_100093AE0);
          inited = swift_initStackObject(v75, v165);
          *(_OWORD *)(inited + 16) = xmmword_100065EB0;
          *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MCIntersectionValuesKey);
          *(_QWORD *)(inited + 40) = v77;
          v78 = v54[2];
          v79 = _swiftEmptyArrayStorage;
          if (v78)
          {
            v151 = v74;
            v154 = v72;
            v157 = v70;
            v160 = v69;
            *(_QWORD *)&v167 = _swiftEmptyArrayStorage;
            sub_10003FE94(0, v78, 0);
            v79 = (_QWORD *)v167;
            v80 = v54 + 5;
            do
            {
              v81 = *(v80 - 1);
              v82 = *v80;
              *(_QWORD *)&v167 = v79;
              v84 = v79[2];
              v83 = v79[3];
              swift_bridgeObjectRetain(v82);
              if (v84 >= v83 >> 1)
              {
                sub_10003FE94(v83 > 1, v84 + 1, 1);
                v79 = (_QWORD *)v167;
              }
              v80 += 2;
              v79[2] = v84 + 1;
              v85 = &v79[2 * v84];
              v85[4] = v81;
              v85[5] = v82;
              --v78;
            }
            while (v78);
            v70 = v157;
            v69 = v160;
            v74 = v151;
            v72 = v154;
          }
          *(_QWORD *)(inited + 48) = v79;
          v86 = sub_100058924(inited);
          v168 = sub_100004D20(&qword_100093AE8);
          *(_QWORD *)&v167 = v86;
          sub_10002BEB4((uint64_t)&v167, v72, v74);
        }
        ((void (*)(_QWORD *, _QWORD))v70)(v169, 0);
        swift_bridgeObjectRelease(v69);
        v87 = MCRestrictedBoolKey;
        v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCRestrictedBoolKey);
        v90 = v89;
        if (*(_QWORD *)(v170 + 16))
        {
          sub_10005A2B4(v88, v89);
          v92 = v91;
          swift_bridgeObjectRelease(v90);
          if ((v92 & 1) != 0)
            goto LABEL_63;
        }
        else
        {
          swift_bridgeObjectRelease(v89);
        }
        v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
        v95 = v94;
        v96 = v170;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v170);
        v169[0] = v96;
        v170 = 0x8000000000000000;
        sub_1000561D4((uint64_t)_swiftEmptyDictionarySingleton, v93, v95, isUniquelyReferenced_nonNull_native);
        v98 = v170;
        v170 = v169[0];
        swift_bridgeObjectRelease(v95);
        swift_bridgeObjectRelease(v98);
LABEL_63:
        v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
        v101 = v100;
        v102 = sub_100038C44(v169, v99, v100);
        if (*v103)
        {
          v104 = sub_100004D20(&qword_100093AF0);
          v105 = swift_initStackObject(v104, v164);
          *(_OWORD *)(v105 + 16) = xmmword_100067F50;
          *(_QWORD *)(v105 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MCRestrictedBoolValueKey);
          *(_QWORD *)(v105 + 40) = v106;
          *(_BYTE *)(v105 + 48) = 1;
          *(_QWORD *)(v105 + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(MCRestrictedBoolPreferenceKey);
          *(_QWORD *)(v105 + 64) = v107;
          *(_BYTE *)(v105 + 72) = 1;
          v108 = sub_1000587EC(v105);
          v168 = sub_100004D20(&qword_100093AF8);
          *(_QWORD *)&v167 = v108;
          sub_10002BEB4((uint64_t)&v167, 0xD000000000000030, 0x800000010006EE70);
        }
        ((void (*)(_QWORD *, _QWORD))v102)(v169, 0);
        swift_bridgeObjectRelease(v101);
LABEL_66:
        sub_1000139A8(v146 + 48, (uint64_t)v171, &qword_10008FE38);
        sub_1000139A8((uint64_t)v171, (uint64_t)v162, &qword_10008FE38);
        v109 = *(_QWORD *)&v162[0];
        if (!*(_QWORD *)&v162[0])
        {
LABEL_81:
          v142 = v170;
          if (*(_QWORD *)(v170 + 16))
          {
            v143 = swift_bridgeObjectRetain(v170);
            v144 = sub_10005EBC8(v143);
            swift_bridgeObjectRelease(v142);
          }
          else
          {
            v144 = 0;
          }
          swift_bridgeObjectRelease(v142);
          return v144;
        }
        v110 = MCUnionKey;
        v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCUnionKey);
        v113 = v112;
        if (*(_QWORD *)(v170 + 16))
        {
          sub_10005A2B4(v111, v112);
          v115 = v114;
          swift_bridgeObjectRelease(v113);
          if ((v115 & 1) != 0)
            goto LABEL_72;
        }
        else
        {
          swift_bridgeObjectRelease(v112);
        }
        v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
        v118 = v117;
        v119 = v170;
        v120 = swift_isUniquelyReferenced_nonNull_native(v170);
        v169[0] = v119;
        v170 = 0x8000000000000000;
        sub_1000561D4((uint64_t)_swiftEmptyDictionarySingleton, v116, v118, v120);
        v121 = v170;
        v170 = v169[0];
        swift_bridgeObjectRelease(v118);
        swift_bridgeObjectRelease(v121);
LABEL_72:
        v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
        v124 = v123;
        v125 = sub_100038C44(v169, v122, v123);
        if (*v126)
        {
          v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureNotificationRestrictedApps);
          v129 = v128;
          v130 = sub_100004D20(&qword_100093AE0);
          v131 = swift_initStackObject(v130, v166);
          *(_OWORD *)(v131 + 16) = xmmword_100065EB0;
          *(_QWORD *)(v131 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MCUnionValuesKey);
          *(_QWORD *)(v131 + 40) = v132;
          v133 = *(_QWORD *)(v109 + 16);
          v134 = _swiftEmptyArrayStorage;
          if (v133)
          {
            v152 = v129;
            v155 = v127;
            v158 = v125;
            v161 = v124;
            *(_QWORD *)&v167 = _swiftEmptyArrayStorage;
            sub_10003FE94(0, v133, 0);
            v134 = (_QWORD *)v167;
            v135 = (uint64_t *)(v109 + 40);
            do
            {
              v136 = *(v135 - 1);
              v137 = *v135;
              *(_QWORD *)&v167 = v134;
              v139 = v134[2];
              v138 = v134[3];
              swift_bridgeObjectRetain(v137);
              if (v139 >= v138 >> 1)
              {
                sub_10003FE94(v138 > 1, v139 + 1, 1);
                v134 = (_QWORD *)v167;
              }
              v135 += 2;
              v134[2] = v139 + 1;
              v140 = &v134[2 * v139];
              v140[4] = v136;
              v140[5] = v137;
              --v133;
            }
            while (v133);
            v125 = v158;
            v124 = v161;
            v129 = v152;
            v127 = v155;
          }
          *(_QWORD *)(v131 + 48) = v134;
          v141 = sub_100058924(v131);
          v168 = sub_100004D20(&qword_100093AE8);
          *(_QWORD *)&v167 = v141;
          sub_10002BEB4((uint64_t)&v167, v127, v129);
        }
        ((void (*)(_QWORD *, _QWORD))v125)(v169, 0);
        swift_bridgeObjectRelease(v124);
        goto LABEL_81;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v57);
    }
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v63 = v62;
    v64 = v170;
    v65 = swift_isUniquelyReferenced_nonNull_native(v170);
    v169[0] = v64;
    v170 = 0x8000000000000000;
    sub_1000561D4((uint64_t)_swiftEmptyDictionarySingleton, v61, v63, v65);
    v66 = v170;
    v170 = v169[0];
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v66);
    goto LABEL_50;
  }
  v153 = MCRestrictedBoolKey;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCRestrictedBoolKey);
  v5 = v4;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_10005A2B4(v3, v4);
    v7 = v6;
    swift_bridgeObjectRelease(v5);
    if ((v7 & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    swift_bridgeObjectRelease(v4);
  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
  v10 = v9;
  v11 = swift_isUniquelyReferenced_nonNull_native(v170);
  v169[0] = v170;
  sub_1000561D4((uint64_t)_swiftEmptyDictionarySingleton, v8, v10, v11);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(0x8000000000000000);
LABEL_9:
  v12 = 0;
  v149 = v156 + 64;
  v13 = 1 << *(_BYTE *)(v156 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v156 + 64);
  v150 = (unint64_t)(v13 + 63) >> 6;
  v148 = MCRestrictedBoolValueKey;
  v147 = MCRestrictedBoolPreferenceKey;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_30;
    }
    v18 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_86;
    if (v18 >= v150)
    {
LABEL_43:
      swift_release(v156);
      goto LABEL_44;
    }
    v19 = *(_QWORD *)(v149 + 8 * v18);
    ++v12;
    if (!v19)
    {
      v12 = v18 + 1;
      if (v18 + 1 >= v150)
        goto LABEL_43;
      v19 = *(_QWORD *)(v149 + 8 * v12);
      if (!v19)
      {
        v12 = v18 + 2;
        if (v18 + 2 >= v150)
          goto LABEL_43;
        v19 = *(_QWORD *)(v149 + 8 * v12);
        if (!v19)
          break;
      }
    }
LABEL_29:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_30:
    v21 = (uint64_t *)(*(_QWORD *)(v156 + 48) + 16 * v17);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_BYTE *)(*(_QWORD *)(v156 + 56) + v17);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
    v27 = v26;
    swift_bridgeObjectRetain(v22);
    v28 = sub_100038C44(v169, v25, v27);
    v30 = (void (*)(_QWORD *, _QWORD))v28;
    if (!*v29)
    {
      swift_bridgeObjectRelease(v22);
      v30(v169, 0);
      goto LABEL_13;
    }
    v31 = v29;
    v159 = (void (*)(_QWORD *, _QWORD))v28;
    v32 = sub_100004D20(&qword_100093AF0);
    v33 = swift_initStackObject(v32, v163);
    *(_OWORD *)(v33 + 16) = xmmword_100067F50;
    *(_QWORD *)(v33 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
    *(_QWORD *)(v33 + 40) = v34;
    *(_BYTE *)(v33 + 48) = v24;
    *(_QWORD *)(v33 + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
    *(_QWORD *)(v33 + 64) = v35;
    *(_BYTE *)(v33 + 72) = v24;
    v36 = sub_1000587EC(v33);
    v168 = sub_100004D20(&qword_100093AF8);
    *(_QWORD *)&v167 = v36;
    sub_10002D050(&v167, v162);
    v37 = swift_isUniquelyReferenced_nonNull_native(*v31);
    v179 = (_QWORD *)*v31;
    v38 = v179;
    *v31 = 0x8000000000000000;
    v40 = sub_10005A2B4(v23, v22);
    v41 = v38[2];
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
    {
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    v44 = v39;
    if (v38[3] >= v43)
    {
      if ((v37 & 1) != 0)
      {
        v47 = v179;
        if ((v39 & 1) == 0)
          goto LABEL_40;
      }
      else
      {
        sub_1000567C4();
        v47 = v179;
        if ((v44 & 1) == 0)
          goto LABEL_40;
      }
    }
    else
    {
      sub_100054990(v43, v37);
      v45 = sub_10005A2B4(v23, v22);
      if ((v44 & 1) != (v46 & 1))
        goto LABEL_89;
      v40 = v45;
      v47 = v179;
      if ((v44 & 1) == 0)
      {
LABEL_40:
        v47[(v40 >> 6) + 8] |= 1 << v40;
        v49 = (uint64_t *)(v47[6] + 16 * v40);
        *v49 = v23;
        v49[1] = v22;
        sub_10002D050(v162, (_OWORD *)(v47[7] + 32 * v40));
        v50 = v47[2];
        v51 = __OFADD__(v50, 1);
        v52 = v50 + 1;
        if (v51)
          goto LABEL_87;
        v47[2] = v52;
        swift_bridgeObjectRetain(v22);
        goto LABEL_42;
      }
    }
    v48 = (_QWORD *)(v47[7] + 32 * v40);
    sub_100004D60(v48);
    sub_10002D050(v162, v48);
LABEL_42:
    v53 = *v31;
    *v31 = v47;
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v53);
    v159(v169, 0);
LABEL_13:
    swift_bridgeObjectRelease(v27);
  }
  v20 = v18 + 3;
  if (v20 >= v150)
    goto LABEL_43;
  v19 = *(_QWORD *)(v149 + 8 * v20);
  if (v19)
  {
    v12 = v20;
    goto LABEL_29;
  }
  while (1)
  {
    v12 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v12 >= v150)
      goto LABEL_43;
    v19 = *(_QWORD *)(v149 + 8 * v12);
    ++v20;
    if (v19)
      goto LABEL_29;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_10005EBC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t result;
  int64_t i;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100004D20(&qword_100093348);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v38 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v37 = (unint64_t)(63 - v4) >> 6;
  v7 = &v44;
  v8 = &v46;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v11 = &qword_10008F828;
  v12 = (char *)&type metadata for Any + 8;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v21 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v21 >= v37)
    goto LABEL_32;
  v22 = *(_QWORD *)(v38 + 8 * v21);
  v23 = i + 1;
  if (!v22)
  {
    v23 = i + 2;
    if (i + 2 >= v37)
      goto LABEL_32;
    v22 = *(_QWORD *)(v38 + 8 * v23);
    if (!v22)
    {
      v23 = i + 3;
      if (i + 3 >= v37)
        goto LABEL_32;
      v22 = *(_QWORD *)(v38 + 8 * v23);
      if (!v22)
      {
        v23 = i + 4;
        if (i + 4 >= v37)
          goto LABEL_32;
        v22 = *(_QWORD *)(v38 + 8 * v23);
        if (!v22)
        {
          v24 = i + 5;
          if (i + 5 < v37)
          {
            v22 = *(_QWORD *)(v38 + 8 * v24);
            if (v22)
            {
              v23 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v23 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_36;
              if (v23 >= v37)
                break;
              v22 = *(_QWORD *)(v38 + 8 * v23);
              ++v24;
              if (v22)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_100013A7C(v1);
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_26:
  v40 = (v22 - 1) & v22;
  v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    v25 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v20);
    v26 = v25[1];
    v27 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v20);
    v42 = *v25;
    v43 = v26;
    v41 = v27;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    v28 = sub_100004D20(v11);
    swift_dynamicCast(v7, &v41, v28, v12, 7);
    v29 = v42;
    v30 = v43;
    sub_10002D050(v7, v8);
    sub_10002D050(v8, v47);
    sub_10002D050(v47, &v45);
    result = sub_10005A2B4(v29, v30);
    v31 = result;
    if ((v32 & 1) != 0)
    {
      v39 = i;
      v13 = v8;
      v14 = v7;
      v15 = v1;
      v16 = v12;
      v17 = v11;
      v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *v18 = v29;
      v18[1] = v30;
      v11 = v17;
      v12 = v16;
      v1 = v15;
      v7 = v14;
      v8 = v13;
      i = v39;
      v19 = (_QWORD *)(v3[7] + 32 * v31);
      sub_100004D60(v19);
      result = (unint64_t)sub_10002D050(&v45, v19);
      v6 = v40;
      if (!v40)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v33 = (uint64_t *)(v3[6] + 16 * result);
    *v33 = v29;
    v33[1] = v30;
    result = (unint64_t)sub_10002D050(&v45, (_OWORD *)(v3[7] + 32 * result));
    v34 = v3[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_34;
    v3[2] = v36;
    v6 = v40;
    if (!v40)
      goto LABEL_11;
LABEL_10:
    v40 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10005EF30(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100004D20(&qword_100093B08);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_1000154A8(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10002D050(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10002D050(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10002D050(v37, v38);
    sub_10002D050(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10002D050(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100013A7C(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10005F2F4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for AEAConcreteManagedConfigurationRestrictionsApplicator()
{
  return objc_opt_self(_TtC15assessmentagentP33_573A90C1AB2206966D8D222E21FB4D9453AEAConcreteManagedConfigurationRestrictionsApplicator);
}

uint64_t sub_10005F340()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  int v131;
  char v132;
  char v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _QWORD *v139;
  _QWORD *v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  int64_t v147;
  unint64_t v148;
  int64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  char v155;
  unint64_t v156;
  uint64_t v157;
  _BOOL8 v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t *v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t result;
  unsigned __int8 *v173;
  _QWORD *v174;
  int64_t v175;
  _BYTE v176[6];
  unsigned int v177;
  unsigned __int16 v178;

  v1 = v0;
  v2 = *v0;
  v3 = _swiftEmptyDictionarySingleton;
  if (v2 != 2)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAccessibilitySpeechAllowed);
    v6 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v2 & 1, v4, v6, isUniquelyReferenced_nonNull_native);
    v3 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v8 = v1[1];
  if (v8 != 2)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureActivityContinuationAllowed);
    v11 = v10;
    v12 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v8 & 1, v9, v11, v12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v13 = v1[2];
  if (v13 != 2)
  {
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureAutoCorrectionAllowed);
    v16 = v15;
    v17 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v13 & 1, v14, v16, v17);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v18 = v1[3];
  if (v18 != 2)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureContinuousPathKeyboardAllowed);
    v21 = v20;
    v22 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v18 & 1, v19, v21, v22);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v23 = v1[4];
  if (v23 != 2)
  {
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureDefinitionLookupAllowed);
    v26 = v25;
    v27 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v23 & 1, v24, v26, v27);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v28 = v1[5];
  if (v28 != 2)
  {
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureDictationAllowed);
    v31 = v30;
    v32 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v28 & 1, v29, v31, v32);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v33 = v1[6];
  if (v33 != 2)
  {
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureKeyboardShortcutsAllowed);
    v36 = v35;
    v37 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v33 & 1, v34, v36, v37);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v38 = v1[7];
  if (v38 != 2)
  {
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeaturePasswordAutoFillAllowed);
    v41 = v40;
    v42 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v38 & 1, v39, v41, v42);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v43 = v1[8];
  if (v43 != 2)
  {
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeaturePredictiveKeyboardAllowed);
    v46 = v45;
    v47 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v43 & 1, v44, v46, v47);
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v48 = v1[9];
  if (v48 != 2)
  {
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureQuickNoteAllowed);
    v51 = v50;
    v52 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v48 & 1, v49, v51, v52);
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v53 = v1[10];
  if (v53 != 2)
  {
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureScreenShotAllowed);
    v56 = v55;
    v57 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v53 & 1, v54, v56, v57);
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v58 = v1[11];
  if (v58 != 2)
  {
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureSmartPunctuationAllowed);
    v61 = v60;
    v62 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v58 & 1, v59, v61, v62);
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v63 = v1[12];
  if (v63 != 2)
  {
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureSpellCheckAllowed);
    v66 = v65;
    v67 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v63 & 1, v64, v66, v67);
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v68 = v1[13];
  if (v68 != 2)
  {
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureTranslationLookupAllowed);
    v71 = v70;
    v72 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v68 & 1, v69, v71, v72);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v73 = v1[14];
  if (v73 != 2)
  {
    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureSelectedTextSharingAllowed);
    v76 = v75;
    v77 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v73 & 1, v74, v76, v77);
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v78 = v1[15];
  if (v78 != 2)
  {
    v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureLockScreenNotificationsViewAllowed);
    v81 = v80;
    v82 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v78 & 1, v79, v81, v82);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v83 = v1[16];
  if (v83 != 2)
  {
    v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureHomeScreenEditingAllowed);
    v86 = v85;
    v87 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v83 & 1, v84, v86, v87);
    swift_bridgeObjectRelease(v86);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v88 = v1[17];
  if (v88 != 2)
  {
    v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureSpotlightAllowed);
    v91 = v90;
    v92 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v88 & 1, v89, v91, v92);
    swift_bridgeObjectRelease(v91);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v93 = v1[18];
  if (v93 != 2)
  {
    v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureTodayViewAllowed);
    v96 = v95;
    v97 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v93 & 1, v94, v96, v97);
    swift_bridgeObjectRelease(v96);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v98 = v1[19];
  if (v98 != 2)
  {
    v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureControlCenterAllowed);
    v101 = v100;
    v102 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v98 & 1, v99, v101, v102);
    swift_bridgeObjectRelease(v101);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v103 = v1[21];
  if (v103 != 2)
  {
    v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureCoverSheetAllowed);
    v106 = v105;
    v107 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v103 & 1, v104, v106, v107);
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v108 = v1[20];
  if (v108 != 2)
  {
    v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureExternalDisplayStageManagerAllowed);
    v111 = v110;
    v112 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v108 & 1, v109, v111, v112);
    swift_bridgeObjectRelease(v111);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (v103 != 2)
  {
    v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureCoverSheetAllowed);
    v115 = v114;
    v116 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v103 & 1, v113, v115, v116);
    swift_bridgeObjectRelease(v115);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v117 = v1[22];
  if (v117 != 2)
  {
    v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureWallpaperAllowed);
    v120 = v119;
    v121 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v117 & 1, v118, v120, v121);
    swift_bridgeObjectRelease(v120);
    swift_bridgeObjectRelease(0x8000000000000000);
    v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureWallpaperModificationAllowed);
    v124 = v123;
    v125 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v117 & 1, v122, v124, v125);
    swift_bridgeObjectRelease(v124);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v126 = v1[23];
  if (v126 != 2)
  {
    v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureCommandTabAllowed);
    v129 = v128;
    v130 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v126 & 1, v127, v129, v130);
    swift_bridgeObjectRelease(v129);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v131 = v1[25];
  if (v131 != 2)
  {
    v132 = v131 & 1;
    v133 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v132, 0xD000000000000025, 0x800000010006EEB0, v133);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v134 = v1[26];
  if (v134 != 2)
  {
    v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureWritingToolsAllowed);
    v137 = v136;
    v138 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(v134 & 1, v135, v137, v138);
    swift_bridgeObjectRelease(v137);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  sub_1000139A8((uint64_t)(v1 + 27), (uint64_t)v176, &qword_100093B00);
  sub_1000139A8((uint64_t)v176, (uint64_t)&v177, &qword_100093B00);
  if (v177 == 3 || (v139 = sub_100060100(v177 | ((unint64_t)v178 << 32))) == 0)
  {
LABEL_90:
    v167 = v1[24];
    if (v167 != 2)
    {
      v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureNewsTodayAllowed);
      v170 = v169;
      v171 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_10005607C(v167 & 1, v168, v170, v171);
      swift_bridgeObjectRelease(v170);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    if (!_swiftEmptyDictionarySingleton[2])
    {
      swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
      return 0;
    }
    return (uint64_t)v3;
  }
  v140 = v139;
  v141 = 0;
  v173 = v1;
  v174 = v139 + 8;
  v142 = 1 << *((_BYTE *)v139 + 32);
  v143 = -1;
  if (v142 < 64)
    v143 = ~(-1 << v142);
  v144 = v143 & v139[8];
  v175 = (unint64_t)(v142 + 63) >> 6;
  while (1)
  {
    if (v144)
    {
      v145 = __clz(__rbit64(v144));
      v144 &= v144 - 1;
      v146 = v145 | (v141 << 6);
    }
    else
    {
      v147 = v141 + 1;
      if (__OFADD__(v141, 1))
        goto LABEL_97;
      v1 = v173;
      if (v147 >= v175)
      {
LABEL_89:
        swift_release(v140);
        goto LABEL_90;
      }
      v148 = v174[v147];
      ++v141;
      if (!v148)
      {
        v141 = v147 + 1;
        if (v147 + 1 >= v175)
          goto LABEL_89;
        v148 = v174[v141];
        if (!v148)
        {
          v141 = v147 + 2;
          if (v147 + 2 >= v175)
            goto LABEL_89;
          v148 = v174[v141];
          if (!v148)
          {
            v149 = v147 + 3;
            if (v149 >= v175)
              goto LABEL_89;
            v148 = v174[v149];
            if (!v148)
            {
              while (1)
              {
                v141 = v149 + 1;
                if (__OFADD__(v149, 1))
                  goto LABEL_98;
                if (v141 >= v175)
                  goto LABEL_89;
                v148 = v174[v141];
                ++v149;
                if (v148)
                  goto LABEL_77;
              }
            }
            v141 = v149;
          }
        }
      }
LABEL_77:
      v144 = (v148 - 1) & v148;
      v146 = __clz(__rbit64(v148)) + (v141 << 6);
    }
    v150 = (uint64_t *)(v140[6] + 16 * v146);
    v152 = *v150;
    v151 = v150[1];
    v153 = *(_BYTE *)(v140[7] + v146);
    swift_bridgeObjectRetain(v151);
    v154 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v156 = sub_10005A2B4(v152, v151);
    v157 = _swiftEmptyDictionarySingleton[2];
    v158 = (v155 & 1) == 0;
    v159 = v157 + v158;
    if (__OFADD__(v157, v158))
      break;
    v160 = v155;
    if (_swiftEmptyDictionarySingleton[3] >= v159)
    {
      if ((v154 & 1) != 0)
      {
        if ((v155 & 1) != 0)
          goto LABEL_60;
      }
      else
      {
        sub_1000569B4();
        if ((v160 & 1) != 0)
          goto LABEL_60;
      }
    }
    else
    {
      sub_100054C8C(v159, v154);
      v161 = sub_10005A2B4(v152, v151);
      if ((v160 & 1) != (v162 & 1))
        goto LABEL_99;
      v156 = v161;
      if ((v160 & 1) != 0)
      {
LABEL_60:
        *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v156) = v153;
        goto LABEL_61;
      }
    }
    _swiftEmptyDictionarySingleton[(v156 >> 6) + 8] |= 1 << v156;
    v163 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v156);
    *v163 = v152;
    v163[1] = v151;
    *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v156) = v153;
    v164 = _swiftEmptyDictionarySingleton[2];
    v165 = __OFADD__(v164, 1);
    v166 = v164 + 1;
    if (v165)
      goto LABEL_96;
    _swiftEmptyDictionarySingleton[2] = v166;
    swift_bridgeObjectRetain(v151);
LABEL_61:
    swift_bridgeObjectRelease(v151);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_QWORD *sub_100060100(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v2 = _swiftEmptyDictionarySingleton;
  if (a1 != 2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureCalculatorInputModeUnitConversionAllowed);
    v5 = v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(a1 & 1, v3, v5, isUniquelyReferenced_nonNull_native);
    v2 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((a1 & 0xFF00) != 0x200)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureCalculatorModeMathPaperAllowed);
    v9 = v8;
    v10 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(BYTE1(a1) & 1, v7, v9, v10);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((a1 & 0xFF0000) != 0x20000)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureCalculatorModeScientificAllowed);
    v13 = v12;
    v14 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(BYTE2(a1) & 1, v11, v13, v14);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((a1 & 0xFF000000) != 0x2000000)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureKeyboardMathSolvingAllowed);
    v17 = v16;
    v18 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(BYTE3(a1) & 1, v15, v17, v18);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((a1 & 0xFF00000000) != 0x200000000)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureMathPaperSolvingAllowed);
    v21 = v20;
    v22 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(BYTE4(a1) & 1, v19, v21, v22);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((a1 & 0xFF0000000000) != 0x20000000000)
  {
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureSquareRootOnBasicCalculatorForced);
    v25 = v24;
    v26 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10005607C(BYTE5(a1) & 1, v23, v25, v26);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (!_swiftEmptyDictionarySingleton[2])
  {
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    return 0;
  }
  return v2;
}

id sub_1000603A0(Class isa)
{
  id v2;
  void *v3;
  uint64_t v4;
  NSString v5;
  NSString v6;
  unsigned int v7;
  id v8;
  id v10;
  id v11;

  v2 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (!v2)
    __break(1u);
  v3 = v2;
  if (isa)
  {
    v4 = sub_10005EF30((uint64_t)isa);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  v11 = 0;
  v7 = objc_msgSend(v3, "applyRestrictionDictionary:overrideRestrictions:clientType:clientUUID:localizedClientDescription:localizedWarningMessage:outRestrictionChanged:outEffectiveSettingsChanged:outError:", isa, 1, v5, v6, 0, 0, 0, 0, &v11);

  v8 = v11;
  if (v7)
    return v11;
  v10 = v11;
  _convertNSErrorToError(_:)(v8);

  return (id)swift_willThrow();
}

uint64_t type metadata accessor for AEAConcreteUserDefaultsPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent33AEAConcreteUserDefaultsPrimitives);
}

void sub_10006054C()
{
  void *v0;
  Class isa;
  id v2;

  if (qword_10008E6F8 != -1)
    swift_once(&qword_10008E6F8, sub_1000605EC);
  v0 = (void *)qword_100094058;
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setValue:forKey:", isa, v2);

}

void sub_1000605EC()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  if (v2)
    qword_100094058 = (uint64_t)v2;
  else
    __break(1u);
}

uint64_t sub_100060660@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Class isa;
  id v9;
  SecTaskRef v10;
  SecTaskRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  audit_token_t v25;
  __int128 v26;
  __int128 v27;
  _UNKNOWN **v28;
  _QWORD v29[5];

  v4 = objc_msgSend(a1, "dataRepresentation");
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  sub_1000218D8(v5, v7);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend((id)objc_opt_self(AEAConcreteAuditToken), "auditTokenWithData:", isa);
  sub_100006118(v5, v7);

  if (!v9)
    goto LABEL_7;
  objc_msgSend(v9, "underlyingToken");
  v10 = SecTaskCreateWithAuditToken(0, &v25);
  if (!v10)
  {

LABEL_7:
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    sub_100006118(v5, v7);
    goto LABEL_8;
  }
  v11 = v10;
  v12 = type metadata accessor for AEAConcreteSecurityTaskPrimitives.ConcreteSecurityTask();
  v13 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v13 + 24) = xmmword_100069520;
  *(_QWORD *)(v13 + 16) = v11;
  *((_QWORD *)&v27 + 1) = v12;
  v28 = &off_100085B30;

  *(_QWORD *)&v26 = v13;
  sub_100006118(v5, v7);
  if (!v12)
  {
LABEL_8:
    sub_1000608E0((uint64_t)&v26);
    goto LABEL_9;
  }
  sub_1000084DC(&v26, (uint64_t)v29);
  sub_1000060F4(v29, v29[3]);
  v14 = sub_1000459E4();
  if (v15)
  {
    v16 = v14;
    v17 = v15;
    v18 = type metadata accessor for AEAParticipant.Process(0);
    v19 = a2 + *(int *)(v18 + 24);
    v20 = v19 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v21 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
    *(_BYTE *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)a2 = a1;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = v17;
    *(_BYTE *)(a2 + 24) = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 0, 1, v18);
    v22 = a1;
    return sub_100004D60(v29);
  }
  sub_100004D60(v29);
LABEL_9:
  v24 = type metadata accessor for AEAParticipant.Process(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 1, 1, v24);
}

uint64_t type metadata accessor for AEAiOSOSProcessLift()
{
  return objc_opt_self(_TtC15assessmentagent19AEAiOSOSProcessLift);
}

uint64_t sub_1000608CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100060660(a1, a2);
}

uint64_t sub_1000608E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004D20(&qword_100093C68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for AEASingleAppModeToggler()
{
  return &type metadata for AEASingleAppModeToggler;
}

uint64_t sub_100060930()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(AEAssessmentUIServiceName);
  qword_100094060 = result;
  *(_QWORD *)algn_100094068 = v1;
  return result;
}

uint64_t sub_10006095C()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;

  v0 = sub_100004D20(&qword_100093360);
  inited = swift_initStackObject(v0, &v5);
  *(_OWORD *)(inited + 16) = xmmword_100065EB0;
  if (qword_10008E700 != -1)
    swift_once(&qword_10008E700, sub_100060930);
  v2 = *(_QWORD *)algn_100094068;
  *(_QWORD *)(inited + 32) = qword_100094060;
  *(_QWORD *)(inited + 40) = v2;
  swift_bridgeObjectRetain(v2);
  v3 = sub_100023AD4(inited);
  swift_setDeallocating(inited);
  result = swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  qword_100094070 = v3;
  return result;
}

uint64_t sub_100060A1C()
{
  Swift::Int v0;
  uint64_t result;

  v0 = sub_100023AD4((uint64_t)&off_100081820);
  result = swift_arrayDestroy(&unk_100081840, 5, &type metadata for String);
  qword_100094078 = v0;
  return result;
}

unint64_t sub_100060A68()
{
  unint64_t result;

  result = qword_100093C70;
  if (!qword_100093C70)
  {
    result = swift_getWitnessTable(&unk_1000695E4, &type metadata for AEAExternalSubsystemRestrictionActionError);
    atomic_store(result, (unint64_t *)&qword_100093C70);
  }
  return result;
}

uint64_t sub_100060AAC()
{
  uint64_t v0;

  if (qword_10008E678 != -1)
    swift_once(&qword_10008E678, sub_100031E4C);
  v0 = qword_100093F70;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100093F78);
  return v0;
}

uint64_t storeEnumTagSinglePayload for AEAExternalSubsystemRestrictionActionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100060B48 + 4 * asc_100069590[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100060B68 + 4 * byte_100069595[v4]))();
}

_BYTE *sub_100060B48(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100060B68(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100060B70(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100060B78(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100060B80(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100060B88(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AEAExternalSubsystemRestrictionActionError()
{
  return &type metadata for AEAExternalSubsystemRestrictionActionError;
}

unint64_t sub_100060BA8()
{
  unint64_t result;

  result = qword_100093C78;
  if (!qword_100093C78)
  {
    result = swift_getWitnessTable(&unk_10006969C, &type metadata for AEAExternalSubsystemRestrictionActionError);
    atomic_store(result, (unint64_t *)&qword_100093C78);
  }
  return result;
}

uint64_t destroy for AEAExternalSubsystemRestrictionActivation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return sub_100004D60(a1 + 5);
}

uint64_t initializeWithCopy for AEAExternalSubsystemRestrictionActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = a2 + 40;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v8(a1 + 40, v5, v7);
  return a1;
}

_QWORD *assignWithCopy for AEAExternalSubsystemRestrictionActivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  sub_10000C54C(a1 + 5, a2 + 5);
  return a1;
}

uint64_t assignWithTake for AEAExternalSubsystemRestrictionActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_100004D60((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for AEAExternalSubsystemRestrictionActivation()
{
  return &type metadata for AEAExternalSubsystemRestrictionActivation;
}

uint64_t sub_100060DA0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 200) = v0;
  return swift_task_switch(sub_100060DB8, 0, 0);
}

uint64_t sub_100060DB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  id v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0[25] + 32);
  v2 = qword_10008E618;
  swift_bridgeObjectRetain(v1);
  if (v2 != -1)
    swift_once(&qword_10008E618, sub_10003015C);
  v3 = v0 + 2;
  v4 = (void *)qword_100093EB8;
  v5 = objc_allocWithZone((Class)AEAssessmentModeRestrictionEnforcerProxy);
  v6 = v4;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v8 = objc_msgSend(v5, "initWithMachServiceName:queue:", v7, v6);
  v0[26] = v8;

  v0[2] = v0;
  v0[3] = sub_100060EE8;
  v9 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v10 = v0 + 10;
  v10[1] = 0x40000000;
  v10[2] = sub_10001E1BC;
  v10[3] = &unk_1000877A0;
  v10[4] = v9;
  objc_msgSend(v8, "shouldEndRestrictingForAssessmentModeWithCompletion:", v10);
  return swift_continuation_await(v3);
}

uint64_t sub_100060EE8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 216) = v1;
  if (v1)
    v2 = sub_100060F8C;
  else
    v2 = sub_100060F48;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100060F48()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 208);
  objc_msgSend(v1, "invalidate");

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060F8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22[2];

  swift_willThrow(a1);
  if (qword_10008E600 != -1)
    swift_once(&qword_10008E600, sub_100015604);
  v2 = *(_QWORD *)(v1 + 200);
  v3 = *(_QWORD *)(v1 + 216);
  v4 = type metadata accessor for Logger(0);
  sub_10000B164(v4, (uint64_t)qword_100093E78);
  sub_100061D4C(v2, v1 + 80);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v1 + 216);
  if (v8)
  {
    v10 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(64, -1);
    v22[0] = v21;
    *(_DWORD *)v10 = 136446466;
    v12 = *(_QWORD *)(v1 + 80);
    v11 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v1 + 192) = sub_100059C74(v12, v11, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 192, v1 + 200, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v11);
    sub_100061D80((_QWORD *)(v1 + 80));
    *(_WORD *)(v10 + 12) = 2082;
    swift_getErrorValue(v9, v1 + 184, v1 + 160);
    v13 = sub_10004CCD0(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
    v15 = v14;
    *(_QWORD *)(v1 + 192) = sub_100059C74(v13, v14, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 192, v1 + 200, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to deactivate restriction %{public}s. Error: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_100061D80((_QWORD *)(v1 + 80));
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

  v17 = *(void **)(v1 + 208);
  v16 = *(_QWORD *)(v1 + 216);
  v18 = sub_100060A68();
  v19 = swift_allocError(&type metadata for AEAExternalSubsystemRestrictionActionError, v18, 0, 0);
  swift_willThrow(v19);
  swift_errorRelease(v16);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100061218()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100093C9C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100014AC4;
  v2[25] = v0;
  return swift_task_switch(sub_100060DB8, 0, 0);
}

double sub_100061274@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  char v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = v2;
  swift_getObjectType(a1);
  v6 = *v2;
  v5 = (void *)v2[1];
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(0xE000000000000000);
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  v8 = sub_10000C220();
  swift_bridgeObjectRelease(0x800000010006EF90);
  if ((v8 & 1) != 0)
  {
    v11 = v3[2];
    v10 = v3[3];
    *(_QWORD *)(a2 + 24) = &type metadata for AEAExternalSubsystemRestrictionDeactivation;
    *(_QWORD *)(a2 + 32) = &off_100087780;
    v12 = (_QWORD *)swift_allocObject(&unk_1000876C8, 96, 7);
    *(_QWORD *)a2 = v12;
    sub_100008380((uint64_t)(v3 + 5), (uint64_t)(v12 + 7));
    v12[2] = v6;
    v12[3] = v5;
    v12[4] = 4;
    v12[5] = v11;
    v12[6] = v10;
    swift_bridgeObjectRetain(v5);
    *(_QWORD *)&result = swift_bridgeObjectRetain(v10).n128_u64[0];
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000613B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  return swift_task_switch(sub_100061420, 0, 0);
}

uint64_t sub_100061420()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  unsigned int v13;
  void *v14;
  id v15;
  id v17;
  uint64_t v18;

  v1 = *(uint64_t **)(v0 + 216);
  v2 = v1[3];
  v3 = qword_10008E618;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1)
  {
    swift_once(&qword_10008E618, sub_10003015C);
    v1 = *(uint64_t **)(v0 + 216);
  }
  v4 = *(void **)(v0 + 208);
  v5 = (void *)qword_100093EB8;
  v6 = objc_allocWithZone((Class)AEAssessmentModeRestrictionEnforcerProxy);
  v7 = v5;
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v9 = objc_msgSend(v6, "initWithMachServiceName:queue:", v8, v7);
  *(_QWORD *)(v0 + 224) = v9;

  swift_getObjectType(v4);
  v10 = *v1;
  v11 = (void *)v1[1];
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(0xE000000000000000);
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  sub_10000C19C(1);
  swift_bridgeObjectRelease(0x800000010006EF90);
  *(_QWORD *)(v0 + 80) = 0;
  v13 = objc_msgSend(v4, "persistWithError:", v0 + 80, 0xD000000000000017);
  v14 = *(void **)(v0 + 80);
  if (v13)
  {
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100061698;
    *(_QWORD *)(v0 + 112) = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 88) = 0x40000000;
    *(_QWORD *)(v0 + 96) = sub_10001E1BC;
    *(_QWORD *)(v0 + 104) = &unk_1000876A0;
    v15 = v14;
    objc_msgSend(v9, "shouldBeginRestrictingForAssessmentModeWithCompletion:", v0 + 80);
    return swift_continuation_await(v0 + 16);
  }
  else
  {
    v17 = v14;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100061698()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 232) = v1;
  if (v1)
    v2 = sub_100061838;
  else
    v2 = sub_10006173C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10006173C()
{
  _QWORD *v0;
  void *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  uint64_t (*v11)(__n128);

  v2 = (uint64_t *)v0[27];
  v1 = (void *)v0[28];
  v3 = (_QWORD *)v0[25];
  objc_msgSend(v1, "invalidate");

  v5 = *v2;
  v4 = v2[1];
  v7 = v2[2];
  v6 = v2[3];
  v3[3] = &type metadata for AEAExternalSubsystemRestrictionDeactivation;
  v3[4] = &off_100087780;
  v8 = (_QWORD *)swift_allocObject(&unk_1000876C8, 96, 7);
  *v3 = v8;
  sub_100008380((uint64_t)(v2 + 5), (uint64_t)(v8 + 7));
  v8[2] = v5;
  v8[3] = v4;
  v8[4] = 4;
  v8[5] = v7;
  v8[6] = v6;
  v11 = (uint64_t (*)(__n128))v0[1];
  swift_bridgeObjectRetain(v4);
  v9 = swift_bridgeObjectRetain(v6);
  return v11(v9);
}

uint64_t sub_100061838(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  swift_willThrow(a1);
  if (qword_10008E600 != -1)
    swift_once(&qword_10008E600, sub_100015604);
  v2 = *(_QWORD *)(v1 + 232);
  v3 = *(_QWORD *)(v1 + 216);
  v4 = type metadata accessor for Logger(0);
  sub_10000B164(v4, (uint64_t)qword_100093E78);
  sub_10005DB70(v3, v1 + 80);
  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v1 + 232);
  if (v8)
  {
    v10 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    v21 = v20;
    *(_DWORD *)v10 = 136446466;
    v12 = *(_QWORD *)(v1 + 80);
    v11 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v1 + 184) = sub_100059C74(v12, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 192, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v11);
    sub_10005DBAC((_QWORD *)(v1 + 80));
    *(_WORD *)(v10 + 12) = 2082;
    swift_getErrorValue(v9, v1 + 192, v1 + 160);
    v13 = sub_10004CCD0(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
    v15 = v14;
    *(_QWORD *)(v1 + 184) = sub_100059C74(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 192, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to activate restriction %{public}s. Error: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_10005DBAC((_QWORD *)(v1 + 80));
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

  v16 = *(_QWORD *)(v1 + 232);
  v17 = sub_100060A68();
  v18 = swift_allocError(&type metadata for AEAExternalSubsystemRestrictionActionError, v17, 0, 0);
  swift_willThrow(v18);
  swift_errorRelease(v16);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100061AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100093C8C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10000CB20;
  v6[26] = a2;
  v6[27] = v2;
  v6[25] = a1;
  return swift_task_switch(sub_100061420, 0, 0);
}

uint64_t sub_100061B64()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_100061B6C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  sub_100004D60(v0 + 7);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t destroy for AEAExternalSubsystemRestrictionDeactivation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  return sub_100004D60(a1 + 5);
}

uint64_t initializeWithCopy for AEAExternalSubsystemRestrictionDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = a2 + 40;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v8(a1 + 40, v5, v7);
  return a1;
}

_QWORD *assignWithCopy for AEAExternalSubsystemRestrictionDeactivation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  sub_10000C54C(a1 + 5, a2 + 5);
  return a1;
}

uint64_t assignWithTake for AEAExternalSubsystemRestrictionDeactivation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  sub_100004D60((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for AEAExternalSubsystemRestrictionDeactivation()
{
  return &type metadata for AEAExternalSubsystemRestrictionDeactivation;
}

uint64_t sub_100061D4C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AEAExternalSubsystemRestrictionDeactivation(a2, a1);
  return a2;
}

_QWORD *sub_100061D80(_QWORD *a1)
{
  destroy for AEAExternalSubsystemRestrictionDeactivation(a1);
  return a1;
}

char *sub_100061DAC(char *a1, char **a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t, __n128);
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *__dst;
  char *v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = &v10[(v5 + 16) & ~(unint64_t)v5];
  }
  else
  {
    v7 = type metadata accessor for AEAParticipant(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100004D20(&qword_100093970);
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v46 = v8;
      v11 = a2[1];
      v44 = *a2;
      *(_QWORD *)v4 = *a2;
      *((_QWORD *)v4 + 1) = v11;
      v12 = a2[2];
      *((_QWORD *)v4 + 2) = v12;
      v4[24] = *((_BYTE *)a2 + 24);
      v13 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
      v14 = &v4[v13];
      v15 = (char *)a2 + v13;
      *v14 = *((_BYTE *)a2 + v13);
      v16 = *(uint64_t *)((char *)a2 + v13 + 16);
      *((_QWORD *)v14 + 1) = *(char **)((char *)a2 + v13 + 8);
      *((_QWORD *)v14 + 2) = v16;
      v17 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
      __dst = &v14[v17];
      v18 = &v15[v17];
      v19 = type metadata accessor for URL(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
      v22 = v44;
      swift_bridgeObjectRetain(v12);
      v23 = swift_bridgeObjectRetain(v16);
      if (v21(v18, 1, v19, v23))
      {
        v24 = sub_100004D20(&qword_10008F508);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      v25 = *(int *)(v7 + 20);
      v26 = &v4[v25];
      v27 = (char *)a2 + v25;
      *v26 = *v27;
      v28 = *((_QWORD *)v27 + 1);
      *((_QWORD *)v26 + 1) = v28;
      v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v46 + 56);
      v30 = swift_bridgeObjectRetain(v28);
      v29(v4, 0, 1, v7, v30);
    }
    v31 = a3[5];
    v32 = a3[6];
    v33 = *(uint64_t *)((char *)a2 + v31);
    *(_QWORD *)&v4[v31] = v33;
    v34 = *(uint64_t *)((char *)a2 + v32);
    *(_QWORD *)&v4[v32] = v34;
    v35 = a3[7];
    v36 = a3[8];
    v37 = &v4[v35];
    v38 = (char *)a2 + v35;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v39 = *((_QWORD *)v38 + 3);
    v45 = *(_OWORD *)(v38 + 8);
    *(_OWORD *)(v37 + 8) = v45;
    *((_QWORD *)v37 + 3) = v39;
    v40 = &v4[v36];
    v41 = (char *)a2 + v36;
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v10 = (char *)*((_QWORD *)v41 + 3);
    v47 = *(_OWORD *)(v41 + 8);
    *(_OWORD *)(v40 + 8) = v47;
    *((_QWORD *)v40 + 3) = v10;
    swift_retain(v33);
    swift_retain(v34);
    swift_retain(v45);
    swift_retain(v39);
    swift_retain(v47);
  }
  swift_retain(v10);
  return v4;
}

uint64_t sub_100062030(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for AEAParticipant(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
    v5 = a1 + *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 16));
    v6 = v5 + *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v4 + 20) + 8));
  }
  swift_release(*(_QWORD *)(a1 + a2[5]));
  swift_release(*(_QWORD *)(a1 + a2[6]));
  v9 = a1 + a2[7];
  swift_release(*(_QWORD *)(v9 + 8));
  swift_release(*(_QWORD *)(v9 + 24));
  v10 = a1 + a2[8];
  swift_release(*(_QWORD *)(v10 + 8));
  return swift_release(*(_QWORD *)(v10 + 24));
}

void **sub_10006214C(void **a1, void **a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(void **, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v42;
  char *__dst;
  void *__dsta[2];
  uint64_t v45;
  __int128 v46;

  v6 = type metadata accessor for AEAParticipant(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004D20(&qword_100093970);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v45 = v7;
    v9 = a2[1];
    v42 = *a2;
    *a1 = *a2;
    a1[1] = v9;
    v10 = a2[2];
    a1[2] = v10;
    *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
    v11 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    *v12 = *((_BYTE *)a2 + v11);
    v14 = *(uint64_t *)((char *)a2 + v11 + 16);
    *((_QWORD *)v12 + 1) = *(void **)((char *)a2 + v11 + 8);
    *((_QWORD *)v12 + 2) = v14;
    v15 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    __dst = &v12[v15];
    v16 = &v13[v15];
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
    v20 = v42;
    swift_bridgeObjectRetain(v10);
    v21 = swift_bridgeObjectRetain(v14);
    if (v19(v16, 1, v17, v21))
    {
      v22 = sub_100004D20(&qword_10008F508);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    v23 = *(int *)(v6 + 20);
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    *v24 = *v25;
    v26 = *((_QWORD *)v25 + 1);
    *((_QWORD *)v24 + 1) = v26;
    v27 = *(void (**)(void **, _QWORD, uint64_t, uint64_t, __n128))(v45 + 56);
    v28 = swift_bridgeObjectRetain(v26);
    v27(a1, 0, 1, v6, v28);
  }
  v29 = a3[5];
  v30 = a3[6];
  v31 = *(void **)((char *)a2 + v29);
  *(void **)((char *)a1 + v29) = v31;
  v32 = *(void **)((char *)a2 + v30);
  *(void **)((char *)a1 + v30) = v32;
  v33 = a3[7];
  v34 = a3[8];
  v35 = (char *)a1 + v33;
  v36 = (char *)a2 + v33;
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v37 = *((_QWORD *)v36 + 3);
  *(_OWORD *)__dsta = *(_OWORD *)(v36 + 8);
  *(_OWORD *)(v35 + 8) = *(_OWORD *)__dsta;
  *((_QWORD *)v35 + 3) = v37;
  v38 = (char *)a1 + v34;
  v39 = (char *)a2 + v34;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 3);
  v46 = *(_OWORD *)(v39 + 8);
  *(_OWORD *)(v38 + 8) = v46;
  *((_QWORD *)v38 + 3) = v40;
  swift_retain(v31);
  swift_retain(v32);
  swift_retain(__dsta[0]);
  swift_retain(v37);
  swift_retain(v46);
  swift_retain(v40);
  return a1;
}

uint64_t sub_1000623A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t, __n128);
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  void *v77;
  void *__dst;

  v6 = type metadata accessor for AEAParticipant(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_10001888C(a1);
      goto LABEL_7;
    }
    v24 = *(void **)a2;
    v25 = *(void **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v26 = v24;

    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v27 = *(_QWORD *)(a2 + 16);
    v28 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v28);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v29 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v30 = a1 + v29;
    v31 = a2 + v29;
    *(_BYTE *)v30 = *(_BYTE *)(a2 + v29);
    *(_QWORD *)(v30 + 8) = *(_QWORD *)(a2 + v29 + 8);
    v32 = *(_QWORD *)(a2 + v29 + 16);
    v33 = *(_QWORD *)(a1 + v29 + 16);
    *(_QWORD *)(v30 + 16) = v32;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRelease(v33);
    v34 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v35 = (void *)(v30 + v34);
    v36 = (void *)(v31 + v34);
    v37 = type metadata accessor for URL(0);
    v38 = *(_QWORD *)(v37 - 8);
    v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
    v40 = v39(v35, 1, v37);
    v41 = v39(v36, 1, v37);
    if (v40)
    {
      if (!v41)
      {
        (*(void (**)(void *, void *, uint64_t))(v38 + 16))(v35, v36, v37);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_16:
        v49 = *(int *)(v6 + 20);
        v50 = a1 + v49;
        v51 = a2 + v49;
        *(_BYTE *)v50 = *(_BYTE *)v51;
        v52 = *(_QWORD *)(v51 + 8);
        v53 = *(_QWORD *)(v50 + 8);
        *(_QWORD *)(v50 + 8) = v52;
        swift_bridgeObjectRetain(v52);
        swift_bridgeObjectRelease(v53);
        goto LABEL_17;
      }
    }
    else
    {
      if (!v41)
      {
        (*(void (**)(void *, void *, uint64_t))(v38 + 24))(v35, v36, v37);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v38 + 8))(v35, v37);
    }
    v48 = sub_100004D20(&qword_10008F508);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    v23 = sub_100004D20(&qword_100093970);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_17;
  }
  v77 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v76 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v76;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v11 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)v12 = *(_BYTE *)(a2 + v11);
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(a2 + v11 + 8);
  v14 = *(_QWORD *)(a2 + v11 + 16);
  *(_QWORD *)(v12 + 16) = v14;
  v15 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  __dst = (void *)(v12 + v15);
  v16 = (const void *)(v13 + v15);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v18 + 48);
  v20 = v77;
  swift_bridgeObjectRetain(v76);
  v21 = swift_bridgeObjectRetain(v14);
  if (v19(v16, 1, v17, v21))
  {
    v22 = sub_100004D20(&qword_10008F508);
    memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(__dst, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  v42 = *(int *)(v6 + 20);
  v43 = a1 + v42;
  v44 = a2 + v42;
  *(_BYTE *)v43 = *(_BYTE *)v44;
  v45 = *(_QWORD *)(v44 + 8);
  *(_QWORD *)(v43 + 8) = v45;
  v46 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v7 + 56);
  v47 = swift_bridgeObjectRetain(v45);
  v46(a1, 0, 1, v6, v47);
LABEL_17:
  v54 = a3[5];
  v55 = *(_QWORD *)(a2 + v54);
  v56 = *(_QWORD *)(a1 + v54);
  *(_QWORD *)(a1 + v54) = v55;
  swift_retain(v55);
  swift_release(v56);
  v57 = a3[6];
  v58 = *(_QWORD *)(a2 + v57);
  v59 = *(_QWORD *)(a1 + v57);
  *(_QWORD *)(a1 + v57) = v58;
  swift_retain(v58);
  swift_release(v59);
  v60 = a3[7];
  v61 = (_QWORD *)(a1 + v60);
  v62 = a2 + v60;
  v63 = *(_QWORD *)(a2 + v60 + 8);
  v64 = *(_QWORD *)(a1 + v60 + 8);
  *v61 = *(_QWORD *)(a2 + v60);
  v61[1] = v63;
  swift_retain(v63);
  swift_release(v64);
  v65 = *(_QWORD *)(v62 + 24);
  v66 = v61[3];
  v61[2] = *(_QWORD *)(v62 + 16);
  v61[3] = v65;
  swift_retain(v65);
  swift_release(v66);
  v67 = a3[8];
  v68 = (_QWORD *)(a1 + v67);
  v69 = (_QWORD *)(a2 + v67);
  v71 = *(_QWORD *)(a2 + v67);
  v70 = v69[1];
  v72 = v68[1];
  *v68 = v71;
  v68[1] = v70;
  swift_retain(v70);
  swift_release(v72);
  v73 = v69[3];
  v74 = v68[3];
  v68[2] = v69[2];
  v68[3] = v73;
  swift_retain(v73);
  swift_release(v74);
  return a1;
}

_QWORD *sub_1000627C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;

  v6 = type metadata accessor for AEAParticipant(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004D20(&qword_100093970);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
    v9 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *v10 = *((_BYTE *)a2 + v9);
    *(_OWORD *)(v10 + 8) = *(_OWORD *)((char *)a2 + v9 + 8);
    v12 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v13 = &v10[v12];
    v14 = &v11[v12];
    v15 = type metadata accessor for URL(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_100004D20(&qword_10008F508);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 20));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v18 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  v19 = a3[7];
  v20 = a3[8];
  v21 = (_OWORD *)((char *)a1 + v19);
  v22 = (_OWORD *)((char *)a2 + v19);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = (_OWORD *)((char *)a1 + v20);
  v25 = (_OWORD *)((char *)a2 + v20);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  return a1;
}

uint64_t sub_100062980(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for AEAParticipant(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_10001888C(a1);
      goto LABEL_7;
    }
    v21 = *(void **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;

    v22 = *(_QWORD *)(a2 + 16);
    v23 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v22;
    swift_bridgeObjectRelease(v23);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v24 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
    v25 = a1 + v24;
    v26 = a2 + v24;
    *(_BYTE *)v25 = *(_BYTE *)(a2 + v24);
    v27 = *(_QWORD *)(a2 + v24 + 16);
    v28 = *(_QWORD *)(a1 + v24 + 16);
    *(_QWORD *)(v25 + 8) = *(_QWORD *)(a2 + v24 + 8);
    *(_QWORD *)(v25 + 16) = v27;
    swift_bridgeObjectRelease(v28);
    v29 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
    v30 = (void *)(v25 + v29);
    v31 = (void *)(v26 + v29);
    v32 = type metadata accessor for URL(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
    v35 = v34(v30, 1, v32);
    v36 = v34(v31, 1, v32);
    if (v35)
    {
      if (!v36)
      {
        (*(void (**)(void *, void *, uint64_t))(v33 + 32))(v30, v31, v32);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_16:
        v38 = *(int *)(v6 + 20);
        v39 = a1 + v38;
        v40 = a2 + v38;
        *(_BYTE *)v39 = *(_BYTE *)v40;
        v41 = *(_QWORD *)(v39 + 8);
        *(_QWORD *)(v39 + 8) = *(_QWORD *)(v40 + 8);
        swift_bridgeObjectRelease(v41);
        goto LABEL_17;
      }
    }
    else
    {
      if (!v36)
      {
        (*(void (**)(void *, void *, uint64_t))(v33 + 40))(v30, v31, v32);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v33 + 8))(v30, v32);
    }
    v37 = sub_100004D20(&qword_10008F508);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    v20 = sub_100004D20(&qword_100093970);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_17;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v11 = *(int *)(type metadata accessor for AEAParticipant.Process(0) + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)v12 = *(_BYTE *)(a2 + v11);
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + v11 + 8);
  v14 = *(int *)(type metadata accessor for AEAParticipant.SecurityInfo(0) + 24);
  v15 = (void *)(v12 + v14);
  v16 = (const void *)(v13 + v14);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_100004D20(&qword_10008F508);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)(a1 + *(int *)(v6 + 20)) = *(_OWORD *)(a2 + *(int *)(v6 + 20));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_17:
  v42 = a3[5];
  v43 = *(_QWORD *)(a1 + v42);
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  swift_release(v43);
  v44 = a3[6];
  v45 = *(_QWORD *)(a1 + v44);
  *(_QWORD *)(a1 + v44) = *(_QWORD *)(a2 + v44);
  swift_release(v45);
  v46 = a3[7];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = *(_QWORD *)(a1 + v46 + 8);
  *(_OWORD *)(a1 + v46) = *(_OWORD *)(a2 + v46);
  swift_release(v49);
  v50 = *(_QWORD *)(v47 + 24);
  *(_OWORD *)(v47 + 16) = *(_OWORD *)(v48 + 16);
  swift_release(v50);
  v51 = a3[8];
  v52 = a1 + v51;
  v53 = (_OWORD *)(a2 + v51);
  v54 = *(_QWORD *)(a1 + v51 + 8);
  *(_OWORD *)(a1 + v51) = *v53;
  swift_release(v54);
  v55 = *(_QWORD *)(v52 + 24);
  *(_OWORD *)(v52 + 16) = v53[1];
  swift_release(v55);
  return a1;
}

uint64_t sub_100062CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062CFC);
}

uint64_t sub_100062CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100004D20(&qword_100093970);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100062D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062D88);
}

uint64_t sub_100062D88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004D20(&qword_100093970);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AEAPolicyBundleArguments(uint64_t a1)
{
  uint64_t result;

  result = qword_100093CF8;
  if (!qword_100093CF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AEAPolicyBundleArguments);
  return result;
}

void sub_100062E40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_1000290F0(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = " ";
    v4[4] = " ";
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t type metadata accessor for AEAConcreteLaunchServicesPrimitives()
{
  return objc_opt_self(_TtC15assessmentagent35AEAConcreteLaunchServicesPrimitives);
}

uint64_t sub_100062EE4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_10008E5E0 != -1)
    swift_once(&qword_10008E5E0, sub_10001552C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000B164(v0, (uint64_t)qword_100093E18);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error: this is not implemented on iOS: runningApplicationsPublisher", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = sub_100004D20(&qword_100093DE8);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v9 = PassthroughSubject.init()();
  v6 = sub_100063008();
  v7 = Publisher.eraseToAnyPublisher()(v5, v6);
  swift_release(v9);
  return v7;
}

unint64_t sub_100063008()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093DF0;
  if (!qword_100093DF0)
  {
    v1 = sub_100005520(&qword_100093DE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for PassthroughSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093DF0);
  }
  return result;
}

id objc_msgSend_addPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPolicy:");
}

id objc_msgSend_ae_dataRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ae_dataRepresentation");
}

id objc_msgSend_ae_valueFromData_ofObjCType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ae_valueFromData:ofObjCType:");
}

id objc_msgSend_allInterfaces(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allInterfaces");
}

id objc_msgSend_apply(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apply");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auditToken");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_copyUUIDsForBundleID_uid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyUUIDsForBundleID:uid:");
}

id objc_msgSend_copyUUIDsForExecutable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyUUIDsForExecutable:");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drop");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duration");
}

id objc_msgSend_effectiveApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveApplication:");
}

id objc_msgSend_effectivePID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectivePID:");
}

id objc_msgSend_endpointWithHostname_port_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endpointWithHostname:port:");
}

id objc_msgSend_fireHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireHandler");
}

id objc_msgSend_getValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValue:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_initWithAuditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAuditToken:");
}

id objc_msgSend_initWithDuration_queue_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDuration:queue:handler:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithOrder_result_conditions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOrder:result:conditions:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_invalidAuditToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidAuditToken");
}

id objc_msgSend_ipProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ipProtocol:");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queue");
}

id objc_msgSend_releaseRestrictions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseRestrictions");
}

id objc_msgSend_remoteAddress_prefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteAddress:prefix:");
}

id objc_msgSend_removeAllPolicies(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllPolicies");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_setFireHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFireHandler:");
}

id objc_msgSend_setOutputDevice_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputDevice:options:completionHandler:");
}

id objc_msgSend_setTimerSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimerSource:");
}

id objc_msgSend_sharedSystemScreenContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedSystemScreenContext");
}

id objc_msgSend_skipWithOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "skipWithOrder:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_targetQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetQueue");
}

id objc_msgSend_timerDidFire(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timerDidFire");
}

id objc_msgSend_timerSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timerSource");
}

id objc_msgSend_underlyingToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "underlyingToken");
}

id objc_msgSend_value_withObjCType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value:withObjCType:");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}
