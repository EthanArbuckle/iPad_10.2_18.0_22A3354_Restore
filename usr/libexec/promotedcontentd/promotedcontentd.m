id sub_10000269C(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 32))
    return objc_msgSend(a2, "commit");
  else
    return objc_msgSend(a2, "rollBack");
}

uint64_t sub_1000027D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = sub_1000303DC(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(a1 + 32)) ^ 1;

  return v5;
}

void sub_100002864(uint64_t a1)
{
  id v1;
  id to;

  objc_copyWeak(&to, (id *)(a1 + 32));
  v1 = objc_loadWeakRetained(&to);
  objc_msgSend(v1, "processServerDeliveryTimer");

  objc_destroyWeak(&to);
}

void sub_1000028AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id *sub_1000028C0(id *a1, void *a2)
{
  id v4;
  id *v5;
  objc_super v7;

  v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)APRateLimits;
    v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5)
      objc_storeStrong(v5 + 1, a2);
  }

  return a1;
}

void sub_100002B78(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(a2, "placementType")));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_100002BD0(uint64_t a1, void *a2)
{
  id v3;
  APEventChannel *v4;
  void *v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  APEventChannel *v10;

  v3 = a2;
  v4 = [APEventChannel alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destination"));
  v6 = objc_msgSend(v3, "intValue");

  v10 = -[APEventChannel initWithDestination:purpose:](v4, "initWithDestination:purpose:", v5, v6);
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "arrayByAddingObject:", v10));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

id sub_1000032E8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v6[16];

  v2 = APLogForCategory(21);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Reloading ID accounts.", v6, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_loadIDAccounts");

  return -[objc_class rotateIdentifiers](NSClassFromString(CFSTR("MetricsModule")), "rotateIdentifiers");
}

void sub_100003378(uint64_t a1, void *a2, void *a3)
{
  id *v5;
  id v6;
  id WeakRetained;
  void *v8;
  double v9;
  double v10;
  double v11;
  id v12;
  id v13;

  v5 = (id *)(a1 + 64);
  v6 = a3;
  v13 = a2;
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend(WeakRetained, "endSignpostForPlacement:log:logID:", objc_msgSend(*(id *)(a1 + 32), "placement"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  objc_msgSend(v8, "timeIntervalSince1970");
  v10 = v9;

  v11 = v10 - *(double *)(a1 + 80);
  v12 = objc_loadWeakRetained(v5);
  objc_msgSend(v12, "setResponseTime:", v11);

  +[APMediaServiceRequest _logResponse:requestID:error:prettyPrint:](APMediaServiceRequest, "_logResponse:requestID:error:prettyPrint:", v13, *(_QWORD *)(a1 + 48), v6, *(unsigned __int8 *)(a1 + 88));
  +[APMediaServiceRequest _handleResult:error:params:responseReceivedTimestamp:completionHandler:](APMediaServiceRequest, "_handleResult:error:params:responseReceivedTimestamp:completionHandler:", v13, v6, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), v10);

}

void sub_100003470(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  int v5;
  const char *v6;

  v2 = APLogForCategory(44);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v5 = 136642819;
    v6 = "-[PCStatusConditionsService init]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{sensitive}s]: User account changed, clearing cached status condition evaluations.", (uint8_t *)&v5, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "clearCache");

}

void sub_100003530(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = APLogForCategory(12);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Updating Personalized Ads value.", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_retrievePersonalizedAdsValue");

}

void sub_1000035B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSURLQueryItem queryItemWithName:value:](NSURLQueryItem, "queryItemWithName:value:", a2, a3));
  objc_msgSend(v3, "addObject:", v4);

}

void sub_100003878(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  id WeakRetained;
  int v14;
  id v15;
  __int16 v16;
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = APLogForCategory(34);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      v14 = 134349314;
      v15 = objc_msgSend(v5, "count");
      v16 = 2114;
      v17 = v6;
      v10 = "Got %{public}lu items from Media API. Error: %{public}@";
      v11 = v8;
      v12 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, v12);
    }
  }
  else if (v9)
  {
    v14 = 134349056;
    v15 = objc_msgSend(v5, "count");
    v10 = "Got %{public}lu items from Media API. Success.";
    v11 = v8;
    v12 = 12;
    goto LABEL_6;
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_handleMediaServiceResponse:params:error:completionHandler:", v5, *(_QWORD *)(a1 + 32), v6, *(_QWORD *)(a1 + 40));

}

void sub_1000039B8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  id v9;

  v5 = a2;
  if (a1 && a3 >= 1 && a3 != 8501)
  {
    v6 = APLogForCategory(13);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = 138543362;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Batch created. BatchID: %{public}@", (uint8_t *)&v8, 0xCu);
    }

  }
}

void sub_100003A8C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  id WeakRetained;
  uint8_t v7[16];

  v2 = APLogForCategory(21);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Reloading current URL configuration.", v7, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[APServerConfigurationSettings settings](APServerConfigurationSettings, "settings"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "serverConfig"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setConfigurations:", v5);

}

void sub_100003C4C(id a1, APMetricProtocol *a2)
{
  APMetricProtocol *v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  unsigned int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  int v20;
  NSObject *v21;

  v2 = a2;
  v3 = metricPropertyValue(v2, (void *)5);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    v6 = metricPropertyValue(v2, (void *)5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = objc_msgSend(v7, "BOOLValue");

    if (!v8)
    {
      v9 = objc_claimAutoreleasedReturnValue(-[APMetricProtocol contentIdentifier](v2, "contentIdentifier"));
      v10 = objc_claimAutoreleasedReturnValue(+[APManagedContentData findById:](APManagedContentData, "findById:", v9));
      v11 = v10;
      if (v10)
      {
        if (-[NSObject state](v10, "state") == (id)3)
        {
          v12 = APLogForCategory(34);
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v20 = 138543362;
            v21 = v9;
            v14 = "%{public}@ was already marked as used.";
LABEL_14:
            v17 = v13;
            v18 = OS_LOG_TYPE_INFO;
            goto LABEL_15;
          }
        }
        else
        {
          -[NSObject markUsed](v11, "markUsed");
          v19 = APLogForCategory(34);
          v13 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v20 = 138543362;
            v21 = v9;
            v14 = "%{public}@ is now on screen and mark it as used in the cache.";
            goto LABEL_14;
          }
        }
      }
      else
      {
        v16 = APLogForCategory(34);
        v13 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v20 = 138412290;
          v21 = v9;
          v14 = "Trying to mark promoted content with content id: %@ as used, but couldn't find it.";
          v17 = v13;
          v18 = OS_LOG_TYPE_ERROR;
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v17, v18, v14, (uint8_t *)&v20, 0xCu);
        }
      }

      goto LABEL_17;
    }
  }
  else
  {

  }
  v15 = APLogForCategory(34);
  v9 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v11 = objc_claimAutoreleasedReturnValue(-[APMetricProtocol contentIdentifier](v2, "contentIdentifier"));
    v20 = 138543362;
    v21 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%{public}@ is now on screen but is is collapsed. Do not mark it as used in the cache.", (uint8_t *)&v20, 0xCu);
LABEL_17:

  }
}

void sub_100003F94(id *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  APJourneyDaemonMetricHelper *v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "addContentDataOnly:", v9));
  if (a1[5] == v9 || objc_msgSend(a1[6], "deliverEntireBatch"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "bundleID"));
    objc_msgSend(v3, "markInUseByClientWithId:", v4);

  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "_loadJourneyStartRelayValuesFromContentData:", v9));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "_loadInternalPropertiesFromContentData:", v9));
  v7 = -[APJourneyDaemonMetricHelper initWithContentData:]([APJourneyDaemonMetricHelper alloc], "initWithContentData:", v9);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "bundleID"));
  objc_msgSend(a1[7], "responseTime");
  -[APJourneyDaemonMetricHelper receivedForBundleID:adServer:elapsedTime:relayValues:internalProperties:](v7, "receivedForBundleID:adServer:elapsedTime:relayValues:internalProperties:", v8, 3, v5, v6);

}

void sub_1000040B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15[3];
  char v16;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_opt_class(APMediaServiceRequest);
    APSimulateCrashNoKillProcess(5, CFSTR("%@: Error with AMS request promise"));
    (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64));
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataTaskPromiseWithRequest:", v5));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100003378;
    v10[3] = &unk_100218F20;
    objc_copyWeak(v15, (id *)(a1 + 72));
    v11 = *(id *)(a1 + 40);
    v8 = *(id *)(a1 + 48);
    v9 = *(void **)(a1 + 80);
    v12 = v8;
    v15[1] = v9;
    v15[2] = *(id *)(a1 + 88);
    v13 = *(id *)(a1 + 56);
    v16 = *(_BYTE *)(a1 + 96);
    v14 = *(id *)(a1 + 64);
    objc_msgSend(v7, "addFinishBlock:", v10);

    objc_destroyWeak(v15);
  }

}

void sub_100004210(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id *sub_1000044D0(id *a1, double a2, float a3, float a4, float a5, float a6, float a7)
{
  id *v7;
  void *v13;
  double v14;
  void *v15;
  double v16;
  void *v17;
  double v18;
  void *v19;
  double v20;
  void *v21;
  double v22;
  void *v23;
  void *v24;
  _QWORD v26[6];
  _QWORD v27[6];

  v7 = a1;
  if (a1)
  {
    v26[0] = &off_100228EE0;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:"));
    v27[0] = v13;
    v26[1] = &off_100228EF8;
    *(float *)&v14 = a3;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v14));
    v27[1] = v15;
    v26[2] = &off_100228F10;
    *(float *)&v16 = a4;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v16));
    v27[2] = v17;
    v26[3] = &off_100228F28;
    *(float *)&v18 = a5;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v18));
    v27[3] = v19;
    v26[4] = &off_100228F40;
    *(float *)&v20 = a6;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v20));
    v27[4] = v21;
    v26[5] = &off_100228F58;
    *(float *)&v22 = a7;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v22));
    v27[5] = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 6));
    v7 = sub_1000028C0(v7, v24);

  }
  return v7;
}

void sub_100006D94(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "signalMonitor"));
  objc_msgSend(v2, "eventSavedWithCreatedToSavedTimeInterval:", *(double *)(a1 + 48));

}

uint64_t sub_100006E7C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v2 = (_QWORD *)v1;
  v4 = type metadata accessor for BatchID(0);
  v24[0] = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v26);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v1 + 88);
  v12 = *(_QWORD *)(v1 + 96);
  v24[1] = sub_10000B748((_QWORD *)(v1 + 64), v13);
  v14 = objc_msgSend(*(id *)(v1 + 16), "now");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

  sub_10000D230();
  v16 = v15;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 40))(v11, a1, v15, v13, v12);
  swift_bridgeObjectRelease(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v25);
  sub_10000B748(v2 + 3, v2[6]);
  sub_10000B1B4();
  sub_10000BD40(a1, (uint64_t)v8, type metadata accessor for ObservabilitySignal);
  if (swift_getEnumCaseMultiPayload(v8, v26) != 6)
    return sub_1000070D8((uint64_t)v8, type metadata accessor for ObservabilitySignal);
  v17 = *((_QWORD *)v8 + 2);
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
    return swift_bridgeObjectRelease(v17);
  v19 = *(_QWORD *)v8;
  v20 = v8[8];
  v21 = v17 + ((*(unsigned __int8 *)(v24[0] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24[0] + 80));
  v22 = *(_QWORD *)(v24[0] + 72);
  v26 = v17;
  swift_bridgeObjectRetain(v17);
  do
  {
    sub_10000BD40(v21, (uint64_t)v6, type metadata accessor for BatchID);
    sub_10000B748(v2 + 13, v2[16]);
    sub_10014F01C(v19, v20);
    sub_1000070D8((uint64_t)v6, type metadata accessor for BatchID);
    v21 += v22;
    --v18;
  }
  while (v18);
  return swift_bridgeObjectRelease_n(v26, 2);
}

uint64_t sub_1000070D8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100007114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[8];

  v7 = *(_QWORD **)v3;
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 56);
  if (v8)
  {
    v12[2] = *(_QWORD *)(*(_QWORD *)v3 + 56);
    v12[3] = a1;
    v12[4] = v7;
    swift_bridgeObjectRetain(v8);
    sub_1000071E8((uint64_t (*)(char *))sub_100007360, (uint64_t)v12, a3);
    swift_bridgeObjectRelease(v8);
  }
  v9 = v7[5];
  v10 = v7[6];
  sub_10000B748(v7 + 2, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 40))(a1, a2, a3, v9, v10);
}

uint64_t sub_1000071E8(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  char v18;

  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v12 = 0;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v12 << 6);
LABEL_5:
    v18 = *(_BYTE *)(*(_QWORD *)(a3 + 48) + v14);
    result = a1(&v18);
    if (v3)
      return swift_release(a3);
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_19:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_5;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 2;
  if (v12 + 2 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 3;
  if (v12 + 3 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v12 + 4;
  if (v12 + 4 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v12 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v10)
      return swift_release(a3);
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100007360(unsigned __int8 *a1)
{
  uint64_t *v1;

  return sub_10000737C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10000737C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a4;
  v7 = sub_100008A18(&qword_100262C10);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v22 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16) && (v17 = sub_1000092C0(*a1), (v18 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v12, *(_QWORD *)(a2 + 56) + *(_QWORD *)(v14 + 72) * v17, v13);
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v19, 1, v13);
  sub_10000D55C((uint64_t)v12, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
  {
    static Date.distantFuture.getter();
    sub_10000D51C((uint64_t)v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v10, v13);
  }
  if ((static Date.> infix(_:_:)(v16, a3) & 1) != 0)
  {
    v20 = *(_QWORD *)(v23 + 56);
    *(_QWORD *)(v23 + 56) = 0;
    swift_bridgeObjectRelease(v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

void sub_10000752C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000754C(a1, a2, a3);
}

void sub_10000754C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for ObservabilitySignalSerializer(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D05C(a2, (uint64_t)v8);
  v9 = *(_QWORD *)(a3 + 56);
  v27 = a3 + 56;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v13 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  v14 = 0;
  v26 = 0x80000001001ED670;
  while (v12)
  {
    v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v16 = v15 | (v14 << 6);
LABEL_20:
    sub_1000078EC(a1, *(_BYTE *)(*(_QWORD *)(a3 + 48) + v16));
    v21 = v20;
    v22 = dispatch thunk of DatabaseManager.executeQuery(_:withParameters:)(0xD000000000000068, 0x80000001001F5000, v20);
    v23 = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) == 0)
    {
      v24 = static os_log_type_t.error.getter(v23);
      sub_1000ABCEC();
      v25 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, v26, 0x7363697274654DLL, 0xE700000000000000);
      os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Failed to save observability signal.", 36, 2, _swiftEmptyArrayStorage);

    }
  }
  v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v17 >= v13)
    goto LABEL_22;
  v18 = *(_QWORD *)(v27 + 8 * v17);
  ++v14;
  if (v18)
    goto LABEL_19;
  v14 = v17 + 1;
  if (v17 + 1 >= v13)
    goto LABEL_22;
  v18 = *(_QWORD *)(v27 + 8 * v14);
  if (v18)
    goto LABEL_19;
  v14 = v17 + 2;
  if (v17 + 2 >= v13)
    goto LABEL_22;
  v18 = *(_QWORD *)(v27 + 8 * v14);
  if (v18)
  {
LABEL_19:
    v12 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_20;
  }
  v19 = v17 + 3;
  if (v19 >= v13)
  {
LABEL_22:
    swift_release(a3);
    sub_1000077CC((uint64_t)v8);
    return;
  }
  v18 = *(_QWORD *)(v27 + 8 * v19);
  if (v18)
  {
    v14 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v13)
      goto LABEL_22;
    v18 = *(_QWORD *)(v27 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_19;
  }
LABEL_24:
  __break(1u);
}

uint64_t sub_1000077CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ObservabilitySignalSerializer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ObservabilitySignalSerializer(uint64_t a1)
{
  uint64_t result;

  result = qword_100266C70;
  if (!qword_100266C70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ObservabilitySignalSerializer);
  return result;
}

uint64_t sub_100007844(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = type metadata accessor for ObservabilitySignal(0);
  result = swift_getEnumCaseMultiPayload(a1, v2);
  switch((int)result)
  {
    case 1:
      a1 += *(int *)(sub_100008A18(&qword_100265B80) + 64);
      goto LABEL_3;
    case 3:
LABEL_3:
      v4 = type metadata accessor for ExtendedUUID(0);
      goto LABEL_5;
    case 4:
      v4 = type metadata accessor for Date(0);
LABEL_5:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 6:
      result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000078EC(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[2];
  uint64_t v15;
  char *v16;

  v15 = type metadata accessor for Date(0);
  __chkstk_darwin(v15);
  v4 = type metadata accessor for BatchID(0);
  v14[1] = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v16 = (char *)v14 - v6;
  v7 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v7);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008A18((uint64_t *)&unk_100264760);
  v11 = swift_allocObject(v10, 152, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1001B7630;
  *(double *)(v11 + 32) = Date.timeIntervalSince1970.getter();
  *(_QWORD *)(v11 + 56) = &type metadata for Double;
  *(_QWORD *)(v11 + 64) = &protocol witness table for Double;
  sub_10000CF4C();
  *(_QWORD *)(v11 + 96) = &type metadata for Int;
  *(_QWORD *)(v11 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v11 + 72) = v12;
  *(_QWORD *)(v11 + 136) = &type metadata for Int;
  *(_QWORD *)(v11 + 144) = &protocol witness table for Int;
  *(_QWORD *)(v11 + 112) = a2;
  sub_10000BD40(v2, (uint64_t)v9, type metadata accessor for ObservabilitySignal);
  v13 = (char *)&loc_100007A88 + *((int *)qword_10014BC68 + swift_getEnumCaseMultiPayload(v9, v7));
  __asm { BR              X10 }
}

_QWORD *sub_100007A98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v5 = *v3;
  *(_QWORD *)(v4 - 120) = v2;
  *(_QWORD *)(v4 - 112) = v1;
  *(_QWORD *)(v4 - 144) = v5;
  v6 = sub_100008088((_QWORD *)1, 4, 1, v0);
  v6[2] = 4;
  sub_100008040(v4 - 144, (uint64_t)(v6 + 19));
  v7 = v6[2];
  v8 = v7 - 6;
  if (v7 > 6)
  {
    __break(1u);
    JUMPOUT(0x100007FC0);
  }
  if (v7 != 6)
  {
    do
    {
      *(_QWORD *)(v4 - 112) = 0;
      *(_OWORD *)(v4 - 144) = 0u;
      *(_OWORD *)(v4 - 128) = 0u;
      v11 = v6[2];
      v10 = v6[3];
      if (v11 >= v10 >> 1)
        v6 = sub_100008088((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
      v6[2] = v11 + 1;
      sub_100008040(v4 - 144, (uint64_t)&v6[5 * v11 + 4]);
    }
    while (!__CFADD__(v8++, 1));
  }
  return v6;
}

uint64_t sub_100008040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18((uint64_t *)&unk_100267DD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100008088(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008A18((uint64_t *)&unk_100264760);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10014B2A4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BatchID(uint64_t a1)
{
  uint64_t result;

  result = qword_100267AD0;
  if (!qword_100267AD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BatchID);
  return result;
}

_QWORD *sub_1000081E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  unint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unsigned int (*v84)(char *, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;

  v1 = type metadata accessor for AvailablePeriodicWork(0);
  v85 = *(_QWORD *)(v1 - 8);
  v86 = v1;
  v2 = __chkstk_darwin(v1);
  v79 = (uint64_t)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v75 = (uint64_t)&v67 - v5;
  v6 = __chkstk_darwin(v4);
  v67 = (uint64_t)&v67 - v7;
  __chkstk_darwin(v6);
  v68 = (uint64_t)&v67 - v8;
  v78 = sub_100008A18(&qword_1002657A8);
  v9 = *(_QWORD *)(v78 - 8);
  v10 = __chkstk_darwin(v78);
  v80 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v81 = (uint64_t)&v67 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v67 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v67 - v18;
  v20 = __chkstk_darwin(v17);
  v83 = (uint64_t)&v67 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v67 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v67 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v67 - v28;
  v30 = v0[6];
  v31 = v0[7];
  sub_10000B748(v0 + 3, v30);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
  v82 = v29;
  sub_100008EA4(0, v32, (uint64_t)v29);
  sub_100008EA4(1, v32, (uint64_t)v27);
  sub_100008EA4(2, v32, (uint64_t)v24);
  swift_bridgeObjectRelease(v32);
  v33 = sub_100008A18(&qword_1002657B0);
  v34 = *(_QWORD *)(v9 + 72);
  v35 = *(unsigned __int8 *)(v9 + 80);
  v36 = (v35 + 32) & ~v35;
  v71 = v36 + 2 * v34;
  v72 = v33;
  v70 = v35 | 7;
  v37 = swift_allocObject(v33, v71, v35 | 7);
  v69 = xmmword_1001B77A0;
  *(_OWORD *)(v37 + 16) = xmmword_1001B77A0;
  v73 = v36;
  v38 = v37 + v36;
  v76 = v27;
  sub_1000089D4((uint64_t)v27, v37 + v36, &qword_1002657A8);
  v74 = v34;
  v39 = v37 + v36 + v34;
  v77 = v24;
  sub_1000089D4((uint64_t)v24, v39, &qword_1002657A8);
  sub_1000089D4(v37 + v36, (uint64_t)v19, &qword_1002657A8);
  sub_100008B20((uint64_t)v19, (uint64_t)v16);
  v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
  if (v84(v16, 1, v86) == 1)
  {
    v40 = v67;
    sub_100008AD8((uint64_t)v16, &qword_1002657A8);
    v41 = _swiftEmptyArrayStorage;
    v42 = v68;
  }
  else
  {
    v43 = v68;
    sub_100008A58((uint64_t)v16, v68);
    v42 = v43;
    v40 = v67;
    sub_100008A58(v43, v67);
    v41 = _swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      v41 = (_QWORD *)sub_100008D78(0, _swiftEmptyArrayStorage[2] + 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v45 = v41[2];
    v44 = v41[3];
    if (v45 >= v44 >> 1)
      v41 = (_QWORD *)sub_100008D78(v44 > 1, v45 + 1, 1, (unint64_t)v41);
    v41[2] = v45 + 1;
    sub_100008A58(v40, (uint64_t)v41+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(_QWORD *)(v85 + 72) * v45);
  }
  sub_1000089D4(v39, (uint64_t)v19, &qword_1002657A8);
  sub_100008B20((uint64_t)v19, (uint64_t)v16);
  if (v84(v16, 1, v86) == 1)
  {
    sub_100008AD8((uint64_t)v16, &qword_1002657A8);
    v46 = v78;
    v47 = (uint64_t)v80;
  }
  else
  {
    sub_100008A58((uint64_t)v16, v42);
    sub_100008A58(v42, v40);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
    v46 = v78;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v41 = (_QWORD *)sub_100008D78(0, v41[2] + 1, 1, (unint64_t)v41);
    v47 = (uint64_t)v80;
    v50 = v41[2];
    v49 = v41[3];
    if (v50 >= v49 >> 1)
      v41 = (_QWORD *)sub_100008D78(v49 > 1, v50 + 1, 1, (unint64_t)v41);
    v41[2] = v50 + 1;
    sub_100008A58(v40, (uint64_t)v41+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(_QWORD *)(v85 + 72) * v50);
  }
  swift_setDeallocating(v37);
  swift_arrayDestroy(v38, *(_QWORD *)(v37 + 16), v46);
  swift_deallocClassInstance(v37, 32, 7);
  KeyPath = swift_getKeyPath(&unk_1001B8C70);
  v52 = v83;
  sub_10000BA54(KeyPath, (uint64_t)v41, v83);
  swift_bridgeObjectRelease(v41);
  swift_release(KeyPath);
  v53 = swift_allocObject(v72, v71, v70);
  *(_OWORD *)(v53 + 16) = v69;
  v54 = v53 + v73;
  sub_1000089D4((uint64_t)v82, v53 + v73, &qword_1002657A8);
  v55 = v54 + v74;
  sub_1000089D4(v52, v54 + v74, &qword_1002657A8);
  v56 = v81;
  sub_1000089D4(v54, v81, &qword_1002657A8);
  sub_100008B20(v56, v47);
  if (v84((char *)v47, 1, v86) == 1)
  {
    sub_100008AD8(v47, &qword_1002657A8);
    v57 = _swiftEmptyArrayStorage;
    v58 = v79;
  }
  else
  {
    v59 = v75;
    sub_100008A58(v47, v75);
    v58 = v79;
    sub_100008A58(v59, v79);
    v57 = _swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      v57 = (_QWORD *)sub_100008D78(0, _swiftEmptyArrayStorage[2] + 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v61 = v57[2];
    v60 = v57[3];
    if (v61 >= v60 >> 1)
      v57 = (_QWORD *)sub_100008D78(v60 > 1, v61 + 1, 1, (unint64_t)v57);
    v57[2] = v61 + 1;
    sub_100008A58(v58, (uint64_t)v57+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(_QWORD *)(v85 + 72) * v61);
    v47 = (uint64_t)v80;
  }
  v62 = v81;
  sub_1000089D4(v55, v81, &qword_1002657A8);
  sub_100008B20(v62, v47);
  if (v84((char *)v47, 1, v86) == 1)
  {
    sub_100008AD8(v47, &qword_1002657A8);
  }
  else
  {
    v63 = v75;
    sub_100008A58(v47, v75);
    sub_100008A58(v63, v58);
    if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
      v57 = (_QWORD *)sub_100008D78(0, v57[2] + 1, 1, (unint64_t)v57);
    v65 = v57[2];
    v64 = v57[3];
    if (v65 >= v64 >> 1)
      v57 = (_QWORD *)sub_100008D78(v64 > 1, v65 + 1, 1, (unint64_t)v57);
    v57[2] = v65 + 1;
    sub_100008A58(v58, (uint64_t)v57+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(_QWORD *)(v85 + 72) * v65);
  }
  swift_setDeallocating(v53);
  swift_arrayDestroy(v54, *(_QWORD *)(v53 + 16), v46);
  swift_deallocClassInstance(v53, 32, 7);
  sub_100008AD8(v83, &qword_1002657A8);
  sub_100008AD8((uint64_t)v77, &qword_1002657A8);
  sub_100008AD8((uint64_t)v76, &qword_1002657A8);
  sub_100008AD8((uint64_t)v82, &qword_1002657A8);
  return v57;
}

uint64_t sub_1000089D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008A18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100008A18(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100008A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AvailablePeriodicWork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AvailablePeriodicWork(uint64_t a1)
{
  uint64_t result;

  result = qword_100266BE0;
  if (!qword_100266BE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AvailablePeriodicWork);
  return result;
}

uint64_t sub_100008AD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100008A18(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100008B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014BAAC);
}

uint64_t sub_100008B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_1002657A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008B68(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100008A18(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100008D8C(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_100008D78(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100008B68(a1, a2, a3, a4, &qword_100266AA0, type metadata accessor for AvailablePeriodicWork);
}

uint64_t sub_100008D8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100008EA4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t result;
  char *v41;
  void (*v42)(uint64_t, char *, uint64_t);
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;

  v4 = v3;
  v8 = type metadata accessor for DateComponents(0);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  __chkstk_darwin(v8);
  v53 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Calendar(0);
  v52 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v51 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for TimeRange(0);
  __chkstk_darwin(v50);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v48 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v56 = (char *)&v46 - v17;
  v18 = sub_100008A18(&qword_100262C10);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v46 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v46 - v25;
  v27 = *(_QWORD *)(a2 + 16);
  v57 = a1;
  if (v27 && (v28 = sub_1000092C0(a1), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v26, *(_QWORD *)(a2 + 56) + *(_QWORD *)(v14 + 72) * v28, v13);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v26, v30, 1, v13);
  sub_1000089D4((uint64_t)v26, (uint64_t)v24, &qword_100262C10);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v31(v24, 1, v13) == 1)
  {
    v32 = type metadata accessor for AvailablePeriodicWork(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a3, 1, 1, v32);
    return sub_100008AD8((uint64_t)v26, &qword_100262C10);
  }
  v47 = a3;
  v33 = (uint64_t)v56;
  v46 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v46(v56, v24, v13);
  sub_10000B748((_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 88));
  sub_10000977C(v33, 2 - v57, (uint64_t)v12);
  v34 = (uint64_t)v12;
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v35 = v49;
  v36 = sub_10000ABD8(v49, (uint64_t)qword_10026D1E0);
  v37 = v51;
  v38 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v36, v35);
  v39 = v53;
  sub_1000093B8(*(_BYTE *)(v34 + *(int *)(v50 + 20)));
  Calendar.date(byAdding:to:wrappingComponents:)(v39, v34, 0);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v55);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v35);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v31)(v21, 1, v13);
  if ((_DWORD)result != 1)
  {
    v41 = v48;
    v42 = (void (*)(uint64_t, char *, uint64_t))v46;
    v46(v48, v21, v13);
    v43 = (v57 & 7) == 0;
    v44 = v47;
    v42(v47, v41, v13);
    v45 = type metadata accessor for AvailablePeriodicWork(0);
    *(_BYTE *)(v44 + *(int *)(v45 + 20)) = v43;
    sub_10000ABF0(v34);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v56, v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);
    return sub_100008AD8((uint64_t)v26, &qword_100262C10);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000092B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014BB24);
}

unint64_t sub_1000092C0(unsigned __int8 a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_100009318(a1, v3);
}

unint64_t sub_100009318(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1000093B8(char a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  sub_100008A18(&qword_1002654D8);
  __chkstk_darwin();
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008A18(&qword_1002654E0);
  __chkstk_darwin();
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (qword_100264E60 != -1)
        swift_once(&qword_100264E60, sub_10012F9C0);
      v6 = type metadata accessor for Calendar(0);
      v7 = sub_10000ABD8(v6, (uint64_t)qword_10026D1E0);
      v8 = *(_QWORD *)(v6 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v5, v7, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v6);
      v9 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v3, 1, 1, v9);
      v22 = 1;
      v21 = 0;
      v20 = 0;
      v19 = 1;
    }
    else
    {
      if (qword_100264E60 != -1)
        swift_once(&qword_100264E60, sub_10012F9C0);
      v15 = type metadata accessor for Calendar(0);
      v16 = sub_10000ABD8(v15, (uint64_t)qword_10026D1E0);
      v17 = *(_QWORD *)(v15 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v5, v16, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v5, 0, 1, v15);
      v18 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v3, 1, 1, v18);
      v22 = 0;
      v21 = 15;
      v20 = 1;
      v19 = 0;
    }
    return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v5, v3, 0, 1, 0, 1, 0, 1, 0, 1, v19, v20, v21, v22, 0, 1, 0, 1, 0,
             1,
             0,
             1,
             0,
             1,
             0,
             1,
             0,
             1,
             0,
             1);
  }
  else
  {
    if (qword_100264E60 != -1)
      swift_once(&qword_100264E60, sub_10012F9C0);
    v10 = type metadata accessor for Calendar(0);
    v11 = sub_10000ABD8(v10, (uint64_t)qword_10026D1E0);
    v12 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v5, v11, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v5, 0, 1, v10);
    v13 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v3, 1, 1, v13);
    return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v5, v3, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
             1,
             0,
             1,
             0,
             1,
             0,
             1,
             0,
             1,
             0,
             1);
  }
}

uint64_t sub_10000977C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  int v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t result;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;

  LODWORD(v115) = a2;
  v6 = a2;
  v7 = sub_100008A18(&qword_1002654D8);
  __chkstk_darwin(v7);
  v106 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008A18(&qword_1002654E0);
  __chkstk_darwin(v9);
  v105 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DateComponents(0);
  v112 = *(_QWORD *)(v11 - 8);
  v113 = v11;
  v12 = __chkstk_darwin(v11);
  v111 = (uint64_t)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v104 = (char *)&v95 - v14;
  v15 = type metadata accessor for Calendar(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v116 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v18);
  v110 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date(0);
  v108 = *(_QWORD *)(v20 - 8);
  v109 = v20;
  __chkstk_darwin(v20);
  v103 = (char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for TimeRange(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v102 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v107 = (uint64_t)&v95 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v95 - v29;
  v31 = __chkstk_darwin(v28);
  __chkstk_darwin(v31);
  v34 = (char *)&v95 - v33;
  if (v6 > 1)
  {
    v96 = a3;
    v97 = a1;
    v98 = v3;
    v42 = v32;
    sub_100009FDC(a1, 2);
    *(_BYTE *)(v42 + *(int *)(v22 + 20)) = 2;
    v99 = sub_10014D668(3);
    v95 = v42;
    sub_10000AC68(v42, (uint64_t)v30);
    v43 = &_swiftEmptyArrayStorage;
    v44 = 4;
    v115 = *(int *)(v22 + 20);
    v100 = v23;
    v101 = v22;
    v45 = v16;
    while (1)
    {
      v46 = v107;
      sub_10000AC68((uint64_t)v30, v107);
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        v43 = (_QWORD *)sub_10014A91C(0, v43[2] + 1, 1, (unint64_t)v43);
      v48 = v43[2];
      v47 = v43[3];
      if (v48 >= v47 >> 1)
        v43 = (_QWORD *)sub_10014A91C(v47 > 1, v48 + 1, 1, (unint64_t)v43);
      v43[2] = v48 + 1;
      sub_10000ACAC(v46, (uint64_t)v43+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72) * v48);
      if (qword_100264E60 != -1)
        swift_once(&qword_100264E60, sub_10012F9C0);
      v49 = sub_10000ABD8(v15, (uint64_t)qword_10026D1E0);
      v50 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
      v50(v116, v49, v15);
      v51 = v30[v115];
      v114 = v43;
      if (v51)
      {
        v52 = v105;
        if (v51 == 1)
        {
          v50(v105, v49, v15);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v52, 0, 1, v15);
          v53 = type metadata accessor for TimeZone(0);
          v54 = v106;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v106, 1, 1, v53);
          LOBYTE(v94) = 1;
          LOBYTE(v93) = 1;
          LOBYTE(v92) = 1;
          LOBYTE(v91) = 1;
          LOBYTE(v90) = 1;
          LOBYTE(v89) = 1;
          LOBYTE(v88) = 1;
          LOBYTE(v87) = 1;
          LOBYTE(v86) = 1;
          v85 = 0;
          LOBYTE(v84) = 0;
          v83 = 1;
        }
        else
        {
          v50(v105, v49, v15);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v52, 0, 1, v15);
          v56 = type metadata accessor for TimeZone(0);
          v54 = v106;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v106, 1, 1, v56);
          LOBYTE(v94) = 1;
          LOBYTE(v93) = 1;
          LOBYTE(v92) = 1;
          LOBYTE(v91) = 1;
          LOBYTE(v90) = 1;
          LOBYTE(v89) = 1;
          LOBYTE(v88) = 1;
          LOBYTE(v87) = 1;
          LOBYTE(v86) = 0;
          v85 = 15;
          LOBYTE(v84) = 1;
          v83 = 0;
        }
        LOBYTE(v82) = 1;
        v81 = 0;
      }
      else
      {
        v52 = v105;
        v50(v105, v49, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v52, 0, 1, v15);
        v55 = type metadata accessor for TimeZone(0);
        v54 = v106;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v106, 1, 1, v55);
        LOBYTE(v94) = 1;
        LOBYTE(v93) = 1;
        LOBYTE(v92) = 1;
        LOBYTE(v91) = 1;
        LOBYTE(v90) = 1;
        LOBYTE(v89) = 1;
        LOBYTE(v88) = 1;
        LOBYTE(v87) = 1;
        LOBYTE(v86) = 1;
        v85 = 0;
        LOBYTE(v84) = 1;
        v83 = 0;
        LOBYTE(v82) = 0;
        v81 = 1;
      }
      v57 = v104;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v52, v54, 0, 1, 0, 1, 0, 1, v81, v82, v83, v84, v85, v86, 0, v87, 0, v88, 0,
        v89,
        0,
        v90,
        0,
        v91,
        0,
        v92,
        0,
        v93,
        0,
        v94);
      v58 = v45;
      v59 = v15;
      v60 = v111;
      sub_10000ADF8(v111);
      v61 = v113;
      v62 = *(void (**)(char *, uint64_t))(v112 + 8);
      v62(v57, v113);
      v63 = v110;
      v64 = v116;
      Calendar.date(byAdding:to:wrappingComponents:)(v60, v30, 0);
      v62((char *)v60, v61);
      v65 = v64;
      v66 = v63;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v65, v59);
      v67 = v108;
      v68 = v109;
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48))(v63, 1, v109);
      if ((_DWORD)result == 1)
        break;
      v45 = v58;
      v15 = v59;
      v70 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v71 = v103;
      v70(v103, v66, v68);
      v72 = v30[v115];
      v73 = (uint64_t)v102;
      v70(v102, v71, v68);
      *(_BYTE *)(v73 + *(int *)(v101 + 20)) = v72;
      sub_10000ABF0((uint64_t)v30);
      sub_10000ACAC(v73, (uint64_t)v30);
      --v44;
      v23 = v100;
      v43 = v114;
      if (!v44)
      {
        result = sub_10000ABF0((uint64_t)v30);
        v74 = v43[2];
        v75 = v99;
        v76 = v99[2];
        v77 = __OFADD__(v74, v76);
        v78 = v74 + v76;
        if (!v77)
        {
          v117 = sub_10014A91C(0, v78 & ~(v78 >> 63), 0, (unint64_t)&_swiftEmptyArrayStorage);
          v79 = swift_bridgeObjectRetain(v75);
          sub_100149EC4(v79);
          sub_100149EB0((uint64_t)v43);
          swift_bridgeObjectRelease(v75);
          v80 = v117;
          sub_10000A11C(v97, v117, v96);
          swift_bridgeObjectRelease(v80);
          v41 = v95;
          return sub_10000ABF0(v41);
        }
        __break(1u);
        break;
      }
    }
    __break(1u);
  }
  else
  {
    v35 = v115;
    sub_100009FDC(a1, v115);
    v34[*(int *)(v22 + 20)] = v35;
    v36 = sub_100008A18(&qword_100266658);
    v37 = *(unsigned __int8 *)(v23 + 80);
    v38 = (v37 + 32) & ~v37;
    v39 = swift_allocObject(v36, v38 + *(_QWORD *)(v23 + 72), v37 | 7);
    *(_OWORD *)(v39 + 16) = xmmword_1001B76C0;
    v40 = v39 + v38;
    sub_10000AC68((uint64_t)v34, v40);
    sub_10000A11C(a1, v39, a3);
    swift_setDeallocating(v39);
    swift_arrayDestroy(v40, *(_QWORD *)(v39 + 16), v22);
    swift_deallocClassInstance(v39, 32, 7);
    v41 = (uint64_t)v34;
    return sub_10000ABF0(v41);
  }
  return result;
}

uint64_t sub_100009FDC(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_10000D5A4((uint64_t)v7);
    v9 = v2[5];
    v8 = v2[6];
    sub_10000B748(v2 + 2, v9);
    v10 = (*(float (**)(uint64_t, uint64_t))(v8 + 8))(v9, v8);
    v11.n128_f64[0] = fmod(floor(v10 * 86400.0), 3600.0);
  }
  else
  {
    sub_10000DA18((uint64_t)v7);
    v13 = v2[5];
    v12 = v2[6];
    sub_10000B748(v2 + 2, v13);
    v11.n128_f64[0] = floor((*(float (**)(uint64_t, uint64_t))(v12 + 8))(v13, v12) * 86400.0);
  }
  Date.addingTimeInterval(_:)(v11);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10000A11C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t result;
  NSString v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;

  v123 = a3;
  v5 = sub_100008A18(&qword_1002654D8);
  __chkstk_darwin(v5);
  v136 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008A18(&qword_1002654E0);
  __chkstk_darwin(v7);
  v135 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DateComponents(0);
  v137 = *(_QWORD *)(v9 - 8);
  v138 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v129 = (uint64_t)&v118 - v14;
  __chkstk_darwin(v13);
  v128 = (char *)&v118 - v15;
  v16 = type metadata accessor for Calendar(0);
  v17 = *(_QWORD *)(v16 - 8);
  v142 = v16;
  v143 = v17;
  v18 = __chkstk_darwin(v16);
  v141 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v127 = (char *)&v118 - v20;
  v21 = sub_100008A18(&qword_100262C10);
  v22 = __chkstk_darwin(v21);
  v134 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v126 = (char *)&v118 - v24;
  v25 = type metadata accessor for Date(0);
  v146 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v132 = (char *)&v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v144 = (char *)&v118 - v29;
  __chkstk_darwin(v28);
  v121 = (char *)&v118 - v30;
  v31 = sub_100008A18(&qword_100266660);
  v32 = __chkstk_darwin(v31);
  v122 = (uint64_t)&v118 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v130 = (uint64_t)&v118 - v34;
  v139 = type metadata accessor for TimeRange(0);
  v35 = __chkstk_darwin(v139);
  v120 = (uint64_t)&v118 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v145 = (uint64_t)&v118 - v38;
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v118 - v40;
  v42 = __chkstk_darwin(v39);
  v119 = (char *)&v118 - v43;
  __chkstk_darwin(v42);
  v46 = *(_QWORD *)(a2 + 16);
  if (v46)
  {
    v47 = a2 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    v131 = v45;
    v140 = *(_QWORD *)(v45 + 72);
    v124 = (char *)&v118 - v44;
    sub_10000AC68(v47 + v140 * (v46 - 1), (uint64_t)&v118 - v44);
    v125 = a2;
    swift_bridgeObjectRetain(a2);
    v133 = a1;
    do
    {
      v48 = v12;
      sub_10000AC68(v47, (uint64_t)v41);
      v49 = sub_10000ACF0();
      v50 = dispatch thunk of static Comparable.< infix(_:_:)(a1, v41, v25, v49);
      v51 = v146;
      v52 = v144;
      (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v144, a1, v25);
      v53 = v145;
      sub_10000AC68((uint64_t)v41, v145);
      if ((v50 & 1) != 0)
      {
        sub_10000ABF0(v53);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v25);
        v12 = v48;
      }
      else
      {
        if (qword_100264E60 != -1)
          swift_once(&qword_100264E60, sub_10012F9C0);
        v54 = v142;
        v55 = sub_10000ABD8(v142, (uint64_t)qword_10026D1E0);
        v56 = *(void (**)(char *, uint64_t, uint64_t))(v143 + 16);
        v56(v141, v55, v54);
        v57 = v145;
        if (*(_BYTE *)(v145 + *(int *)(v139 + 20)))
        {
          v58 = v135;
          v59 = v55;
          v60 = v142;
          if (*(_BYTE *)(v145 + *(int *)(v139 + 20)) == 1)
          {
            v56(v135, v59, v142);
            v61 = v60;
            v62 = v143;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v58, 0, 1, v60);
            v63 = type metadata accessor for TimeZone(0);
            v64 = v136;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v136, 1, 1, v63);
            LOBYTE(v117) = 1;
            LOBYTE(v116) = 1;
            LOBYTE(v115) = 1;
            LOBYTE(v114) = 1;
            LOBYTE(v113) = 1;
            LOBYTE(v112) = 1;
            LOBYTE(v111) = 1;
            LOBYTE(v110) = 1;
            LOBYTE(v109) = 1;
            v108 = 0;
            LOBYTE(v107) = 0;
            v106 = 1;
          }
          else
          {
            v56(v135, v59, v142);
            v61 = v60;
            v62 = v143;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v58, 0, 1, v60);
            v70 = type metadata accessor for TimeZone(0);
            v64 = v136;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v136, 1, 1, v70);
            LOBYTE(v117) = 1;
            LOBYTE(v116) = 1;
            LOBYTE(v115) = 1;
            LOBYTE(v114) = 1;
            LOBYTE(v113) = 1;
            LOBYTE(v112) = 1;
            LOBYTE(v111) = 1;
            LOBYTE(v110) = 1;
            LOBYTE(v109) = 0;
            v108 = 15;
            LOBYTE(v107) = 1;
            v106 = 0;
          }
          LOBYTE(v105) = 1;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v58, v64, 0, 1, 0, 1, 0, 1, 0, v105, v106, v107, v108, v109, 0, v110, 0, v111, 0,
            v112,
            0,
            v113,
            0,
            v114,
            0,
            v115,
            0,
            v116,
            0,
            v117);
        }
        else
        {
          v65 = v135;
          v66 = v55;
          v67 = v142;
          v56(v135, v66, v142);
          v61 = v67;
          v62 = v143;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v65, 0, 1, v67);
          v68 = type metadata accessor for TimeZone(0);
          v69 = v136;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v136, 1, 1, v68);
          LOBYTE(v117) = 1;
          LOBYTE(v116) = 1;
          LOBYTE(v115) = 1;
          LOBYTE(v114) = 1;
          LOBYTE(v113) = 1;
          LOBYTE(v112) = 1;
          LOBYTE(v111) = 1;
          LOBYTE(v110) = 1;
          LOBYTE(v109) = 1;
          LOBYTE(v107) = 1;
          LOBYTE(v105) = 0;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v65, v69, 0, 1, 0, 1, 0, 1, 1, v105, 0, v107, 0, v109, 0, v110, 0, v111, 0,
            v112,
            0,
            v113,
            0,
            v114,
            0,
            v115,
            0,
            v116,
            0,
            v117);
        }
        v71 = v134;
        v72 = v141;
        Calendar.date(byAdding:to:wrappingComponents:)(v48, v57, 0);
        (*(void (**)(char *, uint64_t))(v137 + 8))(v48, v138);
        v73 = *(void (**)(char *, uint64_t))(v62 + 8);
        v74 = v71;
        v73(v72, v61);
        v75 = v146;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v71, 1, v25) == 1)
        {
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
        v12 = v48;
        v76 = v132;
        (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v132, v74, v25);
        v77 = v144;
        v78 = static Date.< infix(_:_:)(v144, v76);
        v79 = *(void (**)(char *, uint64_t))(v75 + 8);
        v79(v76, v25);
        sub_10000ABF0(v57);
        v79(v77, v25);
        a1 = v133;
        if ((v78 & 1) != 0)
        {
          swift_bridgeObjectRelease(v125);
          v80 = v130;
          sub_10000ACAC((uint64_t)v41, v130);
          v81 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56);
          v82 = v80;
          v83 = 0;
          goto LABEL_18;
        }
      }
      sub_10000ABF0((uint64_t)v41);
      v47 += v140;
      --v46;
    }
    while (v46);
    swift_bridgeObjectRelease(v125);
    v82 = v130;
    v81 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56);
    v83 = 1;
LABEL_18:
    v84 = v139;
    v81(v82, v83, 1, v139);
    v85 = v126;
    if (qword_100264E60 != -1)
      swift_once(&qword_100264E60, sub_10012F9C0);
    v86 = v142;
    v87 = sub_10000ABD8(v142, (uint64_t)qword_10026D1E0);
    v88 = v143;
    v89 = v127;
    (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v127, v87, v86);
    v90 = (uint64_t)v124;
    v145 = *(int *)(v84 + 20);
    v91 = v128;
    sub_1000093B8(v124[v145]);
    v92 = v129;
    sub_10000ADF8(v129);
    v93 = v138;
    v94 = *(void (**)(char *, uint64_t))(v137 + 8);
    v94(v91, v138);
    Calendar.date(byAdding:to:wrappingComponents:)(v92, v90, 0);
    v94((char *)v92, v93);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v86);
    v95 = v146;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v85, 1, v25) == 1)
      goto LABEL_25;
    v96 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
    v97 = v121;
    v96(v121, v85, v25);
    v98 = *(_BYTE *)(v90 + v145);
    v99 = (uint64_t)v119;
    v96(v119, v97, v25);
    v100 = v139;
    *(_BYTE *)(v99 + *(int *)(v139 + 20)) = v98;
    sub_10000ABF0(v90);
    v101 = v122;
    sub_10000AD50(v130, v122);
    v102 = v120;
    sub_10000ACAC(v99, v120);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v101, 1, v100) == 1)
    {
      sub_10000ACAC(v102, v123);
      return sub_100147E9C(v101);
    }
    else
    {
      sub_10000ABF0(v102);
      return sub_10000ACAC(v101, v123);
    }
  }
  else
  {
LABEL_26:
    v104 = String._bridgeToObjectiveC()();
    APSimulateCrash(5, v104, 1);

    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x80000001001F52B0, "Metrics/OffsetTimeRangeReferenceFrame.swift", 43, 2, 83, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10000ABD8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10000ABF0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TimeRange(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for TimeRange(uint64_t a1)
{
  uint64_t result;

  result = qword_100266D10;
  if (!qword_100266D10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeRange);
  return result;
}

uint64_t sub_10000AC68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000ACAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000ACF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002654E8;
  if (!qword_1002654E8)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1002654E8);
  }
  return result;
}

uint64_t sub_10000AD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014E9D4);
}

uint64_t sub_10000AD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014E95C);
}

uint64_t sub_10000AD50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100266660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

float sub_10000AD98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float result;

  v1 = *v0;
  if ((*(_BYTE *)(*v0 + 60) & 1) == 0)
    return *(float *)(v1 + 56);
  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  sub_10000B748((_QWORD *)(v1 + 16), v2);
  result = (*(float (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  *(float *)(v1 + 56) = result;
  *(_BYTE *)(v1 + 60) = 0;
  return result;
}

uint64_t sub_10000ADF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;

  v2 = sub_100008A18(&qword_1002654D8);
  __chkstk_darwin(v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008A18(&qword_1002654E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = DateComponents.calendar.getter(v6);
  v10 = DateComponents.timeZone.getter(v9);
  v11 = DateComponents.era.getter(v10);
  v13 = v12;
  result = DateComponents.year.getter(v11);
  v15 = result;
  v17 = v16;
  if ((v16 & 1) == 0)
  {
    v15 = -result;
    if (__OFSUB__(0, result))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }
  result = DateComponents.month.getter();
  v19 = result;
  if ((v18 & 1) == 0)
  {
    v19 = -result;
    if (__OFSUB__(0, result))
      goto LABEL_29;
  }
  v62 = v18;
  result = DateComponents.day.getter();
  v21 = result;
  if ((v20 & 1) == 0)
  {
    v21 = -result;
    if (__OFSUB__(0, result))
      goto LABEL_30;
  }
  v61 = v20;
  result = DateComponents.hour.getter();
  if ((v22 & 1) == 0)
  {
    v23 = __OFSUB__(0, result);
    result = -result;
    if (v23)
      goto LABEL_31;
  }
  v59 = v22;
  v60 = result;
  result = DateComponents.minute.getter();
  if ((v24 & 1) == 0)
  {
    v23 = __OFSUB__(0, result);
    result = -result;
    if (v23)
      goto LABEL_32;
  }
  v57 = v24;
  v58 = result;
  result = DateComponents.second.getter();
  if ((v25 & 1) == 0)
  {
    v23 = __OFSUB__(0, result);
    result = -result;
    if (v23)
      goto LABEL_33;
  }
  v55 = v25;
  v56 = result;
  result = DateComponents.nanosecond.getter();
  if ((v26 & 1) == 0)
  {
    v23 = __OFSUB__(0, result);
    result = -result;
    if (v23)
      goto LABEL_34;
  }
  v52 = v26;
  v53 = result;
  v54 = v17;
  result = DateComponents.weekday.getter();
  v28 = v27;
  if ((v27 & 1) == 0)
  {
    v23 = __OFSUB__(0, result);
    result = -result;
    if (v23)
      goto LABEL_35;
  }
  v49 = result;
  v50 = v21;
  v51 = v13;
  result = DateComponents.weekdayOrdinal.getter();
  v29 = result;
  v31 = v30;
  if ((v30 & 1) == 0)
  {
    v29 = -result;
    if (__OFSUB__(0, result))
      goto LABEL_36;
  }
  v47 = v19;
  v48 = v15;
  result = DateComponents.quarter.getter();
  v32 = result;
  v34 = v33;
  if ((v33 & 1) == 0)
  {
    v32 = -result;
    if (__OFSUB__(0, result))
      goto LABEL_37;
  }
  v45 = v11;
  v46 = v8;
  result = DateComponents.weekOfMonth.getter();
  v35 = result;
  v37 = v36;
  if ((v36 & 1) == 0)
  {
    v35 = -result;
    if (__OFSUB__(0, result))
      goto LABEL_38;
  }
  v43 = v4;
  v44 = a1;
  result = DateComponents.weekOfYear.getter();
  v38 = result;
  v40 = v39;
  if ((v39 & 1) == 0)
  {
    v38 = -result;
    if (__OFSUB__(0, result))
      goto LABEL_39;
  }
  result = DateComponents.yearForWeekOfYear.getter();
  if ((v41 & 1) != 0)
    return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v46, v43, v45, v51 & 1, v48, v54 & 1, v47, v62 & 1, v50, v61 & 1, v60, v59 & 1, v58, v57 & 1, v56, v55 & 1, v53, v52 & 1, v49,
             v28 & 1,
             v29,
             v31 & 1,
             v32,
             v34 & 1,
             v35,
             v37 & 1,
             v38,
             v40 & 1,
             result,
             v41 & 1);
  v23 = __OFSUB__(0, result);
  result = -result;
  if (!v23)
    return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v46, v43, v45, v51 & 1, v48, v54 & 1, v47, v62 & 1, v50, v61 & 1, v60, v59 & 1, v58, v57 & 1, v56, v55 & 1, v53, v52 & 1, v49,
             v28 & 1,
             v29,
             v31 & 1,
             v32,
             v34 & 1,
             v35,
             v37 & 1,
             v38,
             v40 & 1,
             result,
             v41 & 1);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10000B118()
{
  return sub_10000B138();
}

uint64_t sub_10000B138()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[7];
  if (v1)
  {
    v2 = v0[7];
  }
  else
  {
    v3 = v0;
    v4 = v0[5];
    v5 = v0[6];
    sub_10000B748(v0 + 2, v4);
    v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
    v6 = v0[7];
    v3[7] = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v6);
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_10000B1B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[5];
  _QWORD *v71;
  _BYTE v72[32];

  v1 = v0;
  v69 = type metadata accessor for AvailablePeriodicWork(0);
  v2 = *(_QWORD *)(v69 - 8);
  v3 = __chkstk_darwin(v69);
  v68 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v55 - v5;
  v7 = sub_100008A18(&qword_100266A98);
  __chkstk_darwin(v7);
  v62 = (uint64_t)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for PeriodicWorkRequest(0);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v57 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008A18(&qword_1002657A8);
  v11 = __chkstk_darwin(v10);
  v60 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v61 = (uint64_t)&v55 - v13;
  swift_beginAccess(v0 + 56, v72, 0, 0);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = _swiftEmptyArrayStorage;
  v71 = _swiftEmptyArrayStorage;
  v16 = *(_QWORD *)(v14 + 16);
  if (v16)
  {
    v17 = v14 + 32;
    swift_bridgeObjectRetain(v14);
    do
    {
      sub_10000D4D8(v17, (uint64_t)v70);
      sub_10000B748(v70, v70[3]);
      v18 = sub_1000081E4();
      _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v70);
      sub_10000C054((uint64_t)v18, &qword_100266AA0, type metadata accessor for AvailablePeriodicWork);
      v17 += 40;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease(v14);
    v15 = v71;
  }
  v70[0] = &_swiftEmptyDictionarySingleton;
  v19 = v15[2];
  if (v19)
  {
    v56 = v0;
    v20 = *(unsigned __int8 *)(v2 + 80);
    v21 = (v20 + 32) & ~v20;
    v55 = v15;
    v22 = (uint64_t)v15 + v21;
    v23 = *(_QWORD *)(v2 + 72);
    v66 = v23 + v21;
    v24 = &_swiftEmptyDictionarySingleton;
    v64 = v20 | 7;
    v63 = xmmword_1001B76C0;
    v67 = v6;
    v65 = v23;
    while (1)
    {
      sub_10000BD40(v22, (uint64_t)v6, type metadata accessor for AvailablePeriodicWork);
      v26 = v6[*(int *)(v69 + 20)];
      v28 = sub_10000B7A8(v26);
      v29 = v24[2];
      v30 = (v27 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
        break;
      v32 = v27;
      if (v24[3] < v31)
      {
        sub_10000BD84(v31, 1);
        v24 = (_QWORD *)v70[0];
        v33 = sub_10000B7A8(v26);
        if ((v32 & 1) != (v34 & 1))
          goto LABEL_28;
        v28 = v33;
      }
      if ((v32 & 1) != 0)
      {
        v35 = (uint64_t)v6;
        v36 = v21;
        v37 = v24[7];
        sub_10000BCFC(v35, v68, type metadata accessor for AvailablePeriodicWork);
        v38 = *(_QWORD *)(v37 + 8 * v28);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
        *(_QWORD *)(v37 + 8 * v28) = v38;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v38 = sub_100008B68(0, *(_QWORD *)(v38 + 16) + 1, 1, v38, &qword_100266AA0, type metadata accessor for AvailablePeriodicWork);
          *(_QWORD *)(v37 + 8 * v28) = v38;
        }
        v41 = *(_QWORD *)(v38 + 16);
        v40 = *(_QWORD *)(v38 + 24);
        if (v41 >= v40 >> 1)
        {
          v38 = sub_100008B68(v40 > 1, v41 + 1, 1, v38, &qword_100266AA0, type metadata accessor for AvailablePeriodicWork);
          *(_QWORD *)(v37 + 8 * v28) = v38;
        }
        *(_QWORD *)(v38 + 16) = v41 + 1;
        v21 = v36;
        v25 = v38 + v36 + v41 * v65;
        v23 = v65;
        sub_10000BCFC(v68, v25, type metadata accessor for AvailablePeriodicWork);
        v6 = v67;
      }
      else
      {
        v42 = sub_100008A18(&qword_100266AA0);
        v43 = swift_allocObject(v42, v66, v64);
        *(_OWORD *)(v43 + 16) = v63;
        sub_10000BCFC((uint64_t)v6, v43 + v21, type metadata accessor for AvailablePeriodicWork);
        v24[(v28 >> 6) + 8] |= 1 << v28;
        *(_BYTE *)(v24[6] + v28) = v26;
        *(_QWORD *)(v24[7] + 8 * v28) = v43;
        v44 = v24[2];
        v45 = __OFADD__(v44, 1);
        v46 = v44 + 1;
        if (v45)
          goto LABEL_27;
        v24[2] = v46;
      }
      v22 += v23;
      if (!--v19)
      {
        swift_bridgeObjectRelease(v55);
        v1 = v56;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for PeriodicWorkPriority);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    v24 = &_swiftEmptyDictionarySingleton;
LABEL_22:
    v47 = v61;
    sub_10000B8C0((uint64_t)v24, 1, v61);
    v48 = v60;
    sub_10000B8C0((uint64_t)v24, 0, v60);
    swift_release(v24);
    v49 = v62;
    sub_10000C5CC(v47, v48, v62);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v49, 1, v59) == 1)
    {
      sub_100008AD8(v48, &qword_1002657A8);
      sub_100008AD8(v47, &qword_1002657A8);
      v50 = &qword_100266A98;
      v51 = v49;
    }
    else
    {
      v52 = v49;
      v53 = v57;
      sub_10000BCFC(v52, v57, type metadata accessor for PeriodicWorkRequest);
      sub_10000B748((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
      sub_10000C1D4(v53);
      sub_1000070D8(v53, type metadata accessor for PeriodicWorkRequest);
      sub_100008AD8(v48, &qword_1002657A8);
      v51 = v47;
      v50 = &qword_1002657A8;
    }
    return sub_100008AD8(v51, v50);
  }
  return result;
}

_QWORD *sub_10000B748(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t type metadata accessor for PeriodicWorkRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_100267C68;
  if (!qword_100267C68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PeriodicWorkRequest);
  return result;
}

unint64_t sub_10000B7A8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = v1;
  v4 = a1 & 1;
  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  Hasher._combine(_:)(a1 & 1);
  v5 = Hasher._finalize()();
  return sub_10000B804(v4, v5);
}

unint64_t sub_10000B804(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((((a1 & 1) == 0) ^ *(_BYTE *)(v7 + result)) & 1) != 0)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_10000B8C0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v18;

  v6 = sub_100008A18(&qword_1002657A8);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  v9 = sub_10000B7A8(a2 & 1);
  if ((v10 & 1) == 0)
    goto LABEL_5;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9);
  KeyPath = swift_getKeyPath(&unk_1001B9B40);
  swift_bridgeObjectRetain(v11);
  sub_10000BA54(KeyPath, v11, (uint64_t)v8);
  swift_bridgeObjectRelease(v11);
  swift_release(KeyPath);
  v13 = type metadata accessor for AvailablePeriodicWork(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v13) == 1)
  {
    sub_100008AD8((uint64_t)v8, &qword_1002657A8);
LABEL_5:
    v16 = type metadata accessor for AvailablePeriodicWork(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
  if (qword_100264E68 != -1)
    swift_once(&qword_100264E68, sub_10014A6AC);
  v15.n128_u64[0] = qword_1002669C8;
  Date.addingTimeInterval(_:)(v15);
  *(_BYTE *)(a3 + *(int *)(v13 + 20)) = v8[*(int *)(v13 + 20)];
  sub_1000070D8((uint64_t)v8, type metadata accessor for AvailablePeriodicWork);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
}

uint64_t sub_10000BA54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v6 = type metadata accessor for Date(0);
  v41 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v40 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v39 = (char *)&v32 - v9;
  v10 = type metadata accessor for AvailablePeriodicWork(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v17 = (char *)&v32 - v15;
  v18 = *(_QWORD *)(a2 + 16);
  if (!v18)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 56))(a3, 1, 1);
  v33 = v14;
  v34 = a3;
  v35 = v16;
  v19 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  sub_10000BD40(a2 + v19, (uint64_t)&v32 - v15, type metadata accessor for AvailablePeriodicWork);
  swift_retain(a1, v20);
  v36 = a2;
  swift_bridgeObjectRetain(a2);
  v21 = v18 - 1;
  if (v21)
  {
    v38 = *(_QWORD *)(v35 + 72);
    v24 = v36 + v38 + v19;
    v37 = a1;
    v26 = v39;
    v25 = v40;
    do
    {
      sub_10000BD40(v24, (uint64_t)v13, type metadata accessor for AvailablePeriodicWork);
      swift_getAtKeyPath(v13, a1);
      v27 = (uint64_t)v13;
      swift_getAtKeyPath(v17, a1);
      v28 = sub_10000ACF0();
      v29 = (uint64_t)v17;
      v30 = dispatch thunk of static Comparable.< infix(_:_:)(v26, v25, v6, v28);
      v31 = *(void (**)(char *, uint64_t))(v41 + 8);
      v31(v25, v6);
      v31(v26, v6);
      if ((v30 & 1) != 0)
      {
        sub_1000070D8(v29, type metadata accessor for AvailablePeriodicWork);
        sub_10000BCFC(v27, v29, type metadata accessor for AvailablePeriodicWork);
      }
      else
      {
        sub_1000070D8(v27, type metadata accessor for AvailablePeriodicWork);
      }
      a1 = v37;
      v17 = (char *)v29;
      v13 = (char *)v27;
      v24 += v38;
      --v21;
    }
    while (v21);
  }
  swift_bridgeObjectRelease(v36);
  v22 = v34;
  sub_10000BCFC((uint64_t)v17, v34, type metadata accessor for AvailablePeriodicWork);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v22, 0, 1, v33);
  return swift_release(a1);
}

uint64_t sub_10000BCFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000BD40(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

Swift::Int sub_10000BD84(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008A18(&qword_100265FE0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_10000C054(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t result;
  char v29;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  if (isUniquelyReferenced_nonNull_native && v7 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v6 <= v7)
    v27 = v6 + v4;
  else
    v27 = v6;
  v5 = sub_100008B68(isUniquelyReferenced_nonNull_native, v27, 1, v5, a2, a3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v4)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v12 = *(_QWORD *)(v5 + 16);
  v13 = (*(_QWORD *)(v5 + 24) >> 1) - v12;
  v14 = a3(0);
  if (v13 < v4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v5 + v16 + v17 * v12;
  v19 = a1 + v16;
  v20 = v17 * v4;
  v21 = v18 + v20;
  v22 = v19 + v20;
  if (v19 < v21 && v18 < v22)
    goto LABEL_24;
  swift_arrayInitWithCopy(v18);
  if (!v4)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v4);
  v26 = v24 + v4;
  if (!v25)
  {
    *(_QWORD *)(v5 + 16) = v26;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v29 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v29, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000C1D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  _BYTE v44[24];
  _BYTE v45[24];
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;

  v2 = type metadata accessor for PeriodicWorkRequest(0);
  __chkstk_darwin(v2);
  v4 = &v44[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = __chkstk_darwin(v7);
  v12 = &v44[-v11 - 8];
  v13 = __chkstk_darwin(v10);
  v15 = &v44[-v14 - 8];
  v16 = __chkstk_darwin(v13);
  v18 = &v44[-v17 - 8];
  v19 = __chkstk_darwin(v16);
  v21 = &v44[-v20 - 8];
  Date.init()(v19);
  sub_10000CE70(a1, (uint64_t)v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v23 = v6;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v15, v4, v5);
      if ((static Date.> infix(_:_:)(v15, v21) & 1) != 0)
      {
        v24 = v43 + 32;
        swift_beginAccess(v43 + 32, v45, 0, 0);
        sub_10000D4D8(v24, (uint64_t)v46);
        v25 = v47;
        v26 = v48;
        sub_10000B748(v46, v47);
        (*(void (**)(char *, uint64_t, uint64_t))(v26 + 40))(v15, v25, v26);
        v27 = *(void (**)(char *, uint64_t))(v23 + 8);
        v27(v15, v5);
LABEL_11:
        v27(v21, v5);
        return _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v46);
      }
      v42 = *(void (**)(char *, uint64_t))(v6 + 8);
      v42(v15, v5);
    }
    else
    {
      v32 = &v4[*(int *)(sub_100008A18(&qword_100266AB0) + 48)];
      v33 = v6;
      v34 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v34(v12, v4, v5);
      v34(v9, v32, v5);
      if ((static Date.> infix(_:_:)(v9, v21) & 1) != 0)
      {
        v35 = v43 + 32;
        swift_beginAccess(v43 + 32, v44, 0, 0);
        sub_10000D4D8(v35, (uint64_t)v46);
        v36 = v47;
        v37 = v48;
        sub_10000B748(v46, v47);
        (*(void (**)(char *, uint64_t, uint64_t))(v37 + 40))(v9, v36, v37);
        _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v46);
      }
      if ((static Date.> infix(_:_:)(v12, v21) & 1) != 0)
      {
        v38 = v43 + 72;
        swift_beginAccess(v43 + 72, v45, 0, 0);
        sub_10000D4D8(v38, (uint64_t)v46);
        v39 = v47;
        v40 = v48;
        sub_10000B748(v46, v47);
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 40))(v12, v39, v40);
        v27 = *(void (**)(char *, uint64_t))(v33 + 8);
        v27(v9, v5);
        v27(v12, v5);
        goto LABEL_11;
      }
      v42 = *(void (**)(char *, uint64_t))(v6 + 8);
      v42(v9, v5);
      v42(v12, v5);
    }
  }
  else
  {
    v28 = v6;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v18, v4, v5);
    if ((static Date.> infix(_:_:)(v18, v21) & 1) != 0)
    {
      v29 = v43 + 72;
      swift_beginAccess(v43 + 72, v45, 0, 0);
      sub_10000D4D8(v29, (uint64_t)v46);
      v30 = v47;
      v31 = v48;
      sub_10000B748(v46, v47);
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 40))(v18, v30, v31);
      v27 = *(void (**)(char *, uint64_t))(v28 + 8);
      v27(v18, v5);
      goto LABEL_11;
    }
    v42 = *(void (**)(char *, uint64_t))(v6 + 8);
    v42(v18, v5);
  }
  return ((uint64_t (*)(char *, uint64_t))v42)(v21, v5);
}

uint64_t _s7Metrics31ObservabilitySignalDeserializerVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10000C5CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, uint64_t);
  uint64_t v32;

  v6 = type metadata accessor for AvailablePeriodicWork(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v13 = sub_100008A18(&qword_100266AA8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_1000089D4(a1, (uint64_t)v16, &qword_1002657A8);
  sub_1000089D4(a2, v17, &qword_1002657A8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(a2) = v18(v16, 1, v6);
  v19 = v18((char *)v17, 1, v6);
  v20 = v19;
  if ((_DWORD)a2 == 1)
  {
    if (v19 == 1)
    {
      v21 = type metadata accessor for PeriodicWorkRequest(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a3, 1, 1, v21);
    }
    sub_10000BCFC(v17, (uint64_t)v12, type metadata accessor for AvailablePeriodicWork);
    v28 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(a3, v12, v28);
    v24 = type metadata accessor for PeriodicWorkRequest(0);
    v25 = a3;
    v26 = v24;
    v27 = 1;
  }
  else
  {
    sub_10000BCFC((uint64_t)v16, (uint64_t)v12, type metadata accessor for AvailablePeriodicWork);
    if (v20 == 1)
    {
      v23 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(a3, v12, v23);
      v24 = type metadata accessor for PeriodicWorkRequest(0);
      v25 = a3;
      v26 = v24;
      v27 = 0;
    }
    else
    {
      sub_10000BCFC(v17, (uint64_t)v10, type metadata accessor for AvailablePeriodicWork);
      v29 = a3 + *(int *)(sub_100008A18(&qword_100266AB0) + 48);
      v30 = type metadata accessor for Date(0);
      v31 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
      v31(a3, v12, v30);
      v31(v29, v10, v30);
      v24 = type metadata accessor for PeriodicWorkRequest(0);
      v25 = a3;
      v26 = v24;
      v27 = 2;
    }
  }
  swift_storeEnumTagMultiPayload(v25, v26, v27);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a3, 0, 1, v24);
}

id sub_10000C86C(uint64_t a1)
{
  return sub_10000C88C(a1);
}

id sub_10000C88C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  char *v49;
  Class isa;
  Class v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71[24];
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;
  char v75[32];

  v2 = v1;
  v4 = type metadata accessor for TimeZone(0);
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  __chkstk_darwin(v4);
  v66 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v59 - v11;
  v13 = sub_100008A18(&qword_100262C10);
  v14 = __chkstk_darwin(v13);
  v65 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v64 = (char *)&v59 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v59 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v59 - v21;
  v23 = OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_lock;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_lock), "lock");
  v24 = v2 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime;
  swift_beginAccess(v2 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime, v75, 0, 0);
  sub_10000CE28(v24, (uint64_t)v22);
  sub_10000CE28((uint64_t)v22, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v20, 1, v6) == 1)
  {
    sub_10000D51C((uint64_t)v20);
    v25 = sub_10000D51C((uint64_t)v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v20, v6);
    v26 = static Date.< infix(_:_:)(a1, v12);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    v25 = sub_10000D51C((uint64_t)v22);
    if ((v26 & 1) == 0)
      return objc_msgSend(*(id *)(v2 + v23), "unlock");
  }
  v69 = v23;
  v70 = v2;
  v27 = static os_log_type_t.debug.getter(v25);
  v28 = sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
  v61 = 0x80000001001ED670;
  v62 = v28;
  v29 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
  v60 = sub_100008A18((uint64_t *)&unk_1002653F0);
  v30 = a1;
  v31 = swift_allocObject(v60, 72, 7);
  v59 = xmmword_1001B76C0;
  *(_OWORD *)(v31 + 16) = xmmword_1001B76C0;
  v32 = Date.debugDescription.getter();
  v34 = v33;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  v63 = sub_1000A5AF8();
  *(_QWORD *)(v31 + 64) = v63;
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v34;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v29, "Requested XPC timer for %{public}@", 34, 2, v31);

  v35 = v31;
  v36 = v30;
  v37 = swift_bridgeObjectRelease(v35);
  Date.init()(v37);
  LOBYTE(v34) = static Date.> infix(_:_:)(v30, v10);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if ((v34 & 1) != 0)
  {
    v39 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v64, v30, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v39, 0, 1, v6);
    v40 = (uint64_t)v39;
    v41 = v65;
    sub_10000D55C(v40, v65);
    swift_beginAccess(v24, v72, 33, 0);
    sub_10003E0A4(v41, v24);
    swift_endAccess(v72);
    v2 = v70;
    v42 = v70 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_xpcActivity;
    swift_beginAccess(v70 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_xpcActivity, v71, 0, 0);
    sub_10000D4D8(v42, (uint64_t)v72);
    v43 = v73;
    v44 = v74;
    sub_10000B748(v72, v73);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v36, v43, v44);
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v72);
  }
  else
  {
    v45 = static os_log_type_t.error.getter(v38);
    v46 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, v61, 0x76726573624F4345, 0xEF7974696C696261);
    v47 = swift_allocObject(v60, 72, 7);
    *(_OWORD *)(v47 + 16) = v59;
    v48 = objc_msgSend((id)objc_opt_self(NSISO8601DateFormatter), "apLocalSharedFormatter");
    v49 = v66;
    static TimeZone.current.getter();
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v68);
    objc_msgSend(v48, "setTimeZone:", isa);

    v51 = Date._bridgeToObjectiveC()().super.isa;
    v52 = objc_msgSend(v48, "stringFromDate:", v51);

    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52, v53);
    v56 = v55;

    v57 = v63;
    *(_QWORD *)(v47 + 56) = &type metadata for String;
    *(_QWORD *)(v47 + 64) = v57;
    *(_QWORD *)(v47 + 32) = v54;
    *(_QWORD *)(v47 + 40) = v56;
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v46, "Requested XPC timer for %{public}@ in past", 42, 2, v47);

    swift_bridgeObjectRelease(v47);
    v2 = v70;
  }
  v23 = v69;
  return objc_msgSend(*(id *)(v2 + v23), "unlock");
}

uint64_t sub_10000CE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100262C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000CE70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeriodicWorkRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000CEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = a1;
  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 1:
      v2 += *(int *)(sub_100008A18(&qword_100265B80) + 64);
      goto LABEL_3;
    case 3:
LABEL_3:
      v4 = type metadata accessor for ExtendedUUID(0);
      goto LABEL_5;
    case 4:
      v4 = type metadata accessor for Date(0);
LABEL_5:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
      break;
    case 6:
      result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
      break;
    default:
      return result;
  }
  return result;
}

void sub_10000CF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D05C(v0, (uint64_t)v3);
  v4 = (char *)sub_10000CFC8 + 4 * byte_1001BA8D0[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X9 }
}

uint64_t sub_10000CFC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100008A18(&qword_100265B80);
  sub_10002E858(v0 + *(int *)(v1 + 64));
  return 1;
}

uint64_t sub_10000D05C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObservabilitySignal(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ObservabilitySignal(uint64_t a1)
{
  uint64_t result;

  result = qword_100267870;
  if (!qword_100267870)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ObservabilitySignal);
  return result;
}

char *sub_10000D0DC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v6 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = type metadata accessor for ExtendedUUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      v10 = a1;
      v11 = a3;
      v12 = 1;
      goto LABEL_7;
    case 3u:
      v13 = type metadata accessor for ExtendedUUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v10 = a1;
      v11 = a3;
      v12 = 3;
      goto LABEL_7;
    case 4u:
      v14 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v10 = a1;
      v11 = a3;
      v12 = 4;
      goto LABEL_7;
    case 6u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v15 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 2) = v15;
      swift_bridgeObjectRetain(v15);
      v10 = a1;
      v11 = a3;
      v12 = 6;
LABEL_7:
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void sub_10000D230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BD40(v1, (uint64_t)v4, v5);
  v6 = (char *)sub_10000D2B8 + 4 * byte_1001BA5F2[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

Swift::Int sub_10000D2B8()
{
  return sub_10000D398((uint64_t)&off_100215EF0);
}

Swift::Int sub_10000D398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100008A18(&qword_100265C28);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19, *(_QWORD *)(v3 + 40));
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_10000D4D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000D51C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008A18(&qword_100262C10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000D55C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100262C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D5A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  void (*v50)(char *, uint64_t, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;

  v48 = a1;
  sub_100008A18(&qword_1002654D8);
  ((void (*)(void))__chkstk_darwin)();
  v56 = (char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008A18(&qword_1002654E0);
  ((void (*)(void))__chkstk_darwin)();
  v58 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008A18(&qword_100262C10);
  ((void (*)(void))__chkstk_darwin)();
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimeZone(0);
  v6 = *(_QWORD *)(v5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar(0);
  v10 = *(_QWORD *)(v9 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DateComponents(0);
  v54 = *(_QWORD *)(v13 - 8);
  v55 = v13;
  v14 = ((uint64_t (*)(void))__chkstk_darwin)();
  v53 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v47 - v16;
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v57 = v4;
  v18 = sub_10000ABD8(v9, (uint64_t)qword_10026D1E0);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v19(v12, v18, v9);
  v20 = v12;
  v52 = v9;
  if (qword_100264E80 != -1)
    swift_once(&qword_100264E80, sub_10015B3D8);
  v21 = sub_10000ABD8(v5, (uint64_t)qword_10026D228);
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v50(v8, v21, v5);
  v22 = v17;
  Calendar.dateComponents(in:from:)(v8, v51);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v51 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23 = v52;
  v51(v20, v52);
  v19(v20, v18, v23);
  v24 = v58;
  v19(v58, v18, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v23);
  v25 = v56;
  v50(v56, v21, v5);
  v26 = v5;
  v27 = v22;
  v28 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v25, 0, 1, v26);
  v50 = (void (*)(char *, uint64_t, uint64_t))DateComponents.year.getter(v28);
  v49 = v29 & 1;
  v30 = DateComponents.month.getter();
  v32 = v31 & 1;
  v33 = DateComponents.day.getter();
  v35 = v34 & 1;
  v36 = DateComponents.hour.getter();
  v46 = v33;
  v38 = v53;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v58, v25, 0, 1, v50, v49, v30, v32, v46, v35, v36, v37 & 1, 0, 1, 0, 1, 0, 1, 0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  v39 = v57;
  Calendar.date(from:)(v38);
  v40 = *(void (**)(char *, uint64_t))(v54 + 8);
  v41 = v38;
  v42 = v55;
  v40(v41, v55);
  v51(v20, v23);
  v43 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v43 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v39, 1, v43);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v40(v27, v42);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v44 + 32))(v48, v39, v43);
  }
  return result;
}

uint64_t sub_10000DA18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;

  v48 = a1;
  v1 = sub_100008A18(&qword_1002654D8);
  __chkstk_darwin(v1);
  v56 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008A18(&qword_1002654E0);
  __chkstk_darwin(v3);
  v58 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = (char *)type metadata accessor for TimeZone(0);
  v8 = *((_QWORD *)v51 - 1);
  __chkstk_darwin(v51);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DateComponents(0);
  v54 = *(_QWORD *)(v15 - 8);
  v55 = v15;
  v16 = __chkstk_darwin(v15);
  v53 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v47 - v18;
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v57 = v7;
  v20 = sub_10000ABD8(v11, (uint64_t)qword_10026D1E0);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v21(v14, v20, v11);
  v22 = v14;
  v23 = v11;
  if (qword_100264E80 != -1)
    swift_once(&qword_100264E80, sub_10015B3D8);
  v24 = (uint64_t)v51;
  v25 = sub_10000ABD8((uint64_t)v51, (uint64_t)qword_10026D228);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v49 = v25;
  v50 = v26;
  v26(v10, v25, v24);
  v27 = (uint64_t)v19;
  Calendar.dateComponents(in:from:)(v10, v52);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v24);
  v52 = *(void (**)(char *, uint64_t))(v12 + 8);
  v52(v22, v23);
  v21(v22, v20, v23);
  v28 = v58;
  v21(v58, v20, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v28, 0, 1, v23);
  v29 = v56;
  v50(v56, v49, v24);
  v30 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v24);
  v31 = DateComponents.year.getter(v30);
  v33 = v32 & 1;
  v34 = DateComponents.month.getter();
  v36 = v35 & 1;
  v51 = (char *)v27;
  v37 = DateComponents.day.getter();
  v39 = v53;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v58, v29, 0, 1, v31, v33, v34, v36, v37, v38 & 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  v40 = v57;
  Calendar.date(from:)(v39);
  v41 = *(void (**)(char *, uint64_t))(v54 + 8);
  v42 = v39;
  v43 = v55;
  v41(v42, v55);
  v52(v22, v23);
  v44 = type metadata accessor for Date(0);
  v45 = *(_QWORD *)(v44 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v40, 1, v44);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v41(v51, v43);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 32))(v48, v40, v44);
  }
  return result;
}

void sub_10000E19C(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  if (a1)
  {
    v3 = a1;
    v4 = a2;
    v7 = v3;
    if (+[APCacheableObjectProxy objectIsLoaded:](APCacheableObjectProxy, "objectIsLoaded:", v3))
    {
      v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "proxyObject"));

    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[APPersistentCacheStoreProvider persistentCacheStore](APPersistentCacheStoreProvider, "persistentCacheStore"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cacheKey"));
    objc_msgSend(v5, "setObject:forKey:transaction:", v7, v6, v4);

  }
}

id sub_10000EEE8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v5 = a2;
  v6 = (void *)objc_opt_self(a1);
  if (objc_msgSend(v5, "length") && objc_msgSend(v5, "hasPrefix:", CFSTR("/")))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "substringFromIndex:", 1));

    v5 = (id)v7;
  }
  if (objc_msgSend(v6, "validateName:error:", v5, a3))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByDeletingPathExtension"));
    if ((unint64_t)objc_msgSend(v8, "length") > 2)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pathExtension"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "substringToIndex:", 2));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "substringFromIndex:", 2));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringByAppendingPathComponent:", v12));

      v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "stringByAppendingPathExtension:", v10));
    }
    else
    {
      v9 = v5;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_10000FABC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _checkClassType(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  const __CFString *v15;
  void *v16;
  const __CFString *v17;
  void *v18;

  v7 = a1;
  v8 = a3;
  if (!v7)
  {
    if (!a4)
      goto LABEL_9;
    v17 = CFSTR("reason");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ is nil"), v8));
    v18 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
    *(_QWORD *)a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.ap.MediaServiceRequest"), 2201, v10));
LABEL_8:

    a4 = 0;
    goto LABEL_9;
  }
  if ((objc_opt_isKindOfClass(v7, a2) & 1) == 0)
  {
    if (!a4)
      goto LABEL_9;
    v15 = CFSTR("reason");
    v11 = (objc_class *)objc_opt_class(v7);
    v12 = NSStringFromClass(v11);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ is of the wrong type (%@)"), v8, v9));
    v16 = v10;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
    *(_QWORD *)a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.ap.MediaServiceRequest"), 2201, v13));

    goto LABEL_8;
  }
  a4 = 1;
LABEL_9:

  return a4;
}

void sub_10000FDCC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  v5 = a3;
  v6 = objc_opt_class(NSURL);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "absoluteString"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

    v10 = *(void **)(a1 + 40);
    if (v9)
    {
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, v13);
    }
    else
    {
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v5, v13);
      v11 = *(void **)(a1 + 32);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "absoluteString"));
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v5, v12);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v5, v13);
  }

}

id metricPropertyValue(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  int v15;
  void *v16;

  v3 = a1;
  if (qword_100269880 != -1)
    dispatch_once(&qword_100269880, &stru_100214C10);
  v4 = (void *)qword_100269878;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  if (!v6)
  {
    v13 = APLogForCategory(21);
    v11 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v15 = 134217984;
      v16 = a2;
      v12 = "No key found for property %ld";
      goto LABEL_10;
    }
LABEL_11:

    v8 = 0;
    goto LABEL_12;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "properties"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v6));

  if (!v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "internalProperties"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v6));

    if (!v8)
    {
      v10 = APLogForCategory(21);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v15 = 138543362;
        v16 = v6;
        v12 = "Cannot find value for property %{public}@";
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v15, 0xCu);
        goto LABEL_11;
      }
      goto LABEL_11;
    }
  }
LABEL_12:

  return v8;
}

id APPBAdsOptions()
{
  if (qword_100269790 != -1)
    dispatch_once(&qword_100269790, &stru_100214998);
  return (id)qword_100269788;
}

APPersistentCachedStoreTransactionalProtocol *sub_100012918(uint64_t a1)
{
  objc_opt_self(a1);
  return +[APPersistentCacheStoreProvider persistentCacheStore](APPersistentCacheStoreProvider, "persistentCacheStore");
}

id _contentDataWithContextID(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = objc_alloc_init((Class)APContentData);
  objc_msgSend(v2, "setContextIdentifier:", v1);

  return v2;
}

id sub_100012978(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "processMetric:", *(_QWORD *)(a1 + 40));
}

id sub_10001299C(id a1, APEventChannel *a2)
{
  return -[APEventChannel protectedEventChannel](a2, "protectedEventChannel");
}

void sub_1000168F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  APAdBatchResponseTranslator *v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  double v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void (**v39)(_QWORD, _QWORD, _QWORD);
  APJourneyDaemonMetricHelper *v40;
  void *v41;
  NSObject *v42;
  void *v43;
  double v44;
  double v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  void *v53;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  APAdBatchResponseTranslator *v59;
  id v60;
  NSObject *v61;
  unsigned int v62;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint8_t buf[4];
  unint64_t v69;
  __int16 v70;
  id v71;
  __int16 v72;
  void *v73;
  __int16 v74;
  void *v75;
  _BYTE v76[128];

  v5 = a2;
  v6 = a3;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "requestParameters"));
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v64, v76, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v65;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v65 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(a1 + 40);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)i), "context"));
        objc_msgSend(v12, "sendAnalyticsForGettingAdResponse:", v13);

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v64, v76, 16);
    }
    while (v9);
  }

  v14 = -[APResponseDataTranslator initWithResponse:forRequester:]([APAdBatchResponseTranslator alloc], "initWithResponse:forRequester:", v5, *(_QWORD *)(a1 + 32));
  v63 = v6;
  v15 = (void *)objc_claimAutoreleasedReturnValue(-[APAdBatchResponseTranslator translate:](v14, "translate:", &v63));
  v16 = v63;

  v17 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v15, v17) & 1) != 0)
  {
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "sortedArrayUsingComparator:", &stru_1002145F8));
    if (-[NSObject count](v18, "count"))
    {
      v57 = v15;
      v58 = v16;
      v59 = v14;
      v60 = v5;
      v19 = 1;
      v61 = v18;
      do
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectAtIndexedSubscript:](v18, "objectAtIndexedSubscript:", v19 - 1, v57, v58, v59, v60));
        if ((id)v19 == -[NSObject count](v18, "count"))
        {
          v21 = 1;
        }
        else if ((char *)(v19 - 1) >= (char *)-[NSObject count](v18, "count") - 1)
        {
          v21 = 0;
        }
        else
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectAtIndexedSubscript:](v18, "objectAtIndexedSubscript:", v19 - 1));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "adOriginalRequesterId"));
          v24 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectAtIndexedSubscript:](v18, "objectAtIndexedSubscript:", v19));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "adOriginalRequesterId"));
          v21 = objc_msgSend(v23, "isEqual:", v25) ^ 1;

          v18 = v61;
        }
        v26 = *(void **)(a1 + 32);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "adOriginalRequesterId"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "requestFromRequestID:", v27));

        if (v28)
        {
          objc_msgSend(*(id *)(a1 + 32), "responseTime");
          v30 = v29;
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "privateContent"));
          objc_msgSend(v31, "setResponseTime:", v30);

          v32 = APLogForCategory(21);
          v33 = objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            v34 = -[NSObject count](v18, "count");
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "content"));
            v62 = v21;
            v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "identifier"));
            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "content"));
            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "contextIdentifier"));
            *(_DWORD *)buf = 134218754;
            v69 = v19;
            v70 = 2048;
            v71 = v34;
            v72 = 2114;
            v73 = v36;
            v74 = 2114;
            v75 = v38;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Sending %lu of %lu contents with identifier %{public}@ and context %{public}@", buf, 0x2Au);

            v21 = v62;
            v18 = v61;
          }

          v39 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "completionHandler"));
          ((void (**)(_QWORD, void *, uint64_t))v39)[2](v39, v20, v21);

          v40 = [APJourneyDaemonMetricHelper alloc];
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "content"));
          v42 = -[APJourneyDaemonMetricHelper initWithContentData:](v40, "initWithContentData:", v41);

          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleID"));
          objc_msgSend(*(id *)(a1 + 32), "responseTime");
          v45 = v44;
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "journeyStartRelayValues"));
          -[NSObject receivedForBundleID:elapsedTime:relayValues:internalProperties:](v42, "receivedForBundleID:elapsedTime:relayValues:internalProperties:", v43, v46, 0, v45);

          v47 = *(void **)(a1 + 32);
          v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "content"));
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "identifier"));
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "requestFromRequestID:", v49));
          v51 = objc_msgSend(v50, "placementType");

          objc_msgSend(*(id *)(a1 + 40), "checkForDiscards:placementType:", v20, v51);
        }
        else
        {
          v52 = APLogForCategory(21);
          v42 = objc_claimAutoreleasedReturnValue(v52);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "adOriginalRequesterId"));
            *(_DWORD *)buf = 138543362;
            v69 = (unint64_t)v53;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Unable to find original request for ad response with identifier %{public}@", buf, 0xCu);

          }
        }

      }
      while (v19++ < (unint64_t)-[NSObject count](v18, "count"));
      v14 = v59;
      v5 = v60;
      v15 = v57;
      v16 = v58;
    }
  }
  else
  {
    v55 = APLogForCategory(21);
    v18 = objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
      *(_DWORD *)buf = 138543362;
      v69 = (unint64_t)v56;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Translator returned invalid response type for request %{public}@", buf, 0xCu);

    }
  }

}

void sub_100016EB4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  uint8_t buf[16];

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24;
    v8 = objc_msgSend(*(id *)(a1 + 32), "count");
    LOBYTE(v12) = *(_BYTE *)(a1 + 80);
    objc_msgSend(WeakRetained, "handleNewPromotedContent:adsReceived:adsRequested:token:context:lastInBatch:deliverEntireBatch:completionHandler:", v5, v7, v8, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3, v12, *(_QWORD *)(a1 + 56));
  }
  else
  {
    v9 = APLogForCategory(34);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "APPCControllerCoordinator was destroyed by the time when we got a response back.", buf, 2u);
    }

    v11 = +[APPCControllerCoordinator _addToCacheContentData:context:](APPCControllerCoordinator, "_addToCacheContentData:context:", v5, *(_QWORD *)(a1 + 48));
  }

}

void sub_100017C14(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id WeakRetained;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[APDeviceInfo current](APDeviceInfo, "current"));
        objc_msgSend(v8, "setIsPAAvailableForAd:", objc_msgSend(v9, "personalizedAdsEnabled"));

        objc_msgSend(v8, "setIsLocationAvailableForAd:", objc_msgSend(*(id *)(a1 + 32), "isLocationAvailableForAd"));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "connection"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "remoteObjectProxy"));
  objc_msgSend(v12, "contentResponses:requester:", v3, *(_QWORD *)(a1 + 40));

}

uint64_t sub_100017D80(uint64_t a1)
{
  id WeakRetained;
  uint64_t result;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_finishedWithRequestsForCoordinator:", *(_QWORD *)(a1 + 32));

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_10001869C(void *a1)
{
  if (a1)
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[APPersistentCacheStoreProvider persistentCacheStore](APPersistentCacheStoreProvider, "persistentCacheStore"));
  return a1;
}

void sub_10001B254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id *sub_10001DF64(id *a1, void *a2)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  objc_super v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  id *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;

  v4 = a2;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)APPCControllerReceiver;
    a1 = (id *)objc_msgSendSuper2(&v13, "init");
    if (a1)
    {
      v5 = APLogForCategory(34);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleID"));
        *(_DWORD *)buf = 136643587;
        v15 = "-[APPCControllerReceiver initWithConnection:]";
        v16 = 2048;
        v17 = a1;
        v18 = 2048;
        v19 = v4;
        v20 = 2114;
        v21 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%{sensitive}s: controller %p connection %p bundleID is %{public}@.", buf, 0x2Au);

      }
      objc_storeStrong(a1 + 2, a2);
      v8 = objc_msgSend(objc_alloc((Class)APUnfairLock), "initWithOptions:", 1);
      v9 = a1[1];
      a1[1] = v8;

      v10 = objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", 12));
      v11 = a1[3];
      a1[3] = (id)v10;

    }
  }

  return a1;
}

void sub_10001E220(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned int a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  void (**v17)(_QWORD);
  void *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  _BOOL4 v30;
  const char *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  NSObject *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  void *v62;
  void *v63;
  APMediaServiceRequestParameters *v64;
  uint64_t v65;
  void *v66;
  id v67;
  void *v68;
  unsigned int v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint8_t buf[4];
  void *v78;
  __int16 v79;
  uint64_t v80;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a7;
  if (a1)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[APIDAccountProvider privateUserAccount](APIDAccountProvider, "privateUserAccount"));
    v19 = objc_msgSend(v18, "isNoServicesRegion");
    v20 = objc_msgSend(v18, "isChild");
    if ((v19 & 1) == 0 && !v20)
    {
      if (objc_msgSend(a1, "isBlockedForNewsSubscriber:bundleID:", v14, v15))
      {
        v21 = APLogForCategory(34);
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "This context can not be used to generate ads for this user due to subscription status.", buf, 2u);
        }

        v23 = a1;
        v24 = v14;
        v25 = 1029;
        v26 = v13;
        v27 = -1;
        goto LABEL_15;
      }
      v32 = objc_msgSend(v13, "indexOfObject:", &off_10022A0C8);
      if (v32 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        v74 = 0x7FFFFFFFFFFFFFFFLL;
        v69 = a6;
        v67 = 0;
        goto LABEL_30;
      }
      if ((unint64_t)objc_msgSend(v13, "count") < 2)
      {
        v33 = objc_msgSend(a1, "_getAppStorePlacement:", v14);
        v34 = v33;
        if (v33 == (id)7005)
        {
          if (objc_msgSend(a1, "hasRunningLandingPageRequest"))
          {
            v35 = APLogForCategory(34);
            v36 = objc_claimAutoreleasedReturnValue(v35);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "There is a Media API operation in flight, ignoring current request.", buf, 2u);
            }

            v23 = a1;
            v24 = v14;
            v25 = 1025;
            v26 = v13;
            v27 = 5;
            goto LABEL_15;
          }
        }
        else if (!v33)
        {
          v23 = a1;
          v24 = v14;
          v25 = 1028;
          v26 = v13;
          v27 = 4;
          goto LABEL_15;
        }
        v74 = (uint64_t)v32;
        v69 = a6;
        v67 = v34;
        objc_msgSend((id)objc_opt_class(a1), "_sendFirstRequestMetricIfRequiredForPlacement:", v34);
LABEL_30:
        v76 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fingerprint"));
        v38 = objc_claimAutoreleasedReturnValue(+[APManagedContext findManagedContextByFingerprint:](APManagedContext, "findManagedContextByFingerprint:", v37));

        if (v38)
        {
          v39 = APLogForCategory(34);
          v40 = objc_claimAutoreleasedReturnValue(v39);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fingerprint"));
            *(_DWORD *)buf = 138543362;
            v78 = v41;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Context with fingerprint %{public}@ is found in the cache.", buf, 0xCu);

          }
          v42 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queryCacheForRequests:managedContext:", v13, v38));
          v43 = (void *)v38;
          v44 = (void *)v76;
        }
        else
        {
          if (v74 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "supplementalContext"));

            if (!v45)
            {
              objc_msgSend(a1, "createContentDatasFromContext:unfilledReasonCode:types:diagnosticCode:completionHandler:", v14, 1025, v13, 6, v17);
              goto LABEL_54;
            }
          }
          v70 = objc_claimAutoreleasedReturnValue(+[APManagedContext createManagedContextWithContext:idAccount:](APManagedContext, "createManagedContextWithContext:idAccount:", v14, v18));
          v46 = APLogForCategory(34);
          v47 = objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fingerprint"));
            *(_DWORD *)buf = 138543362;
            v78 = v48;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Context with fingerprint %{public}@ was not found in the cache and is just created.", buf, 0xCu);

          }
          v42 = v13;
          v44 = (void *)v76;
          v43 = (void *)v70;
        }
        v73 = v42;
        if (!objc_msgSend(v42, "count"))
        {
          v60 = APLogForCategory(34);
          v61 = objc_claimAutoreleasedReturnValue(v60);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "UUIDString"));
            v72 = v43;
            v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
            *(_DWORD *)buf = 138543618;
            v78 = v62;
            v79 = 2114;
            v80 = (uint64_t)v63;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "The request %{public}@ for Context %{public}@ was completely satisfied by the cache.", buf, 0x16u);

            v43 = v72;
          }

          v17[2](v17);
          goto LABEL_55;
        }
        v49 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "idAccount"));
        if (!v49)
          v49 = v18;
        if (v74 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v75 = v49;
          v71 = v43;
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "lock"));
          objc_msgSend(v50, "lock");
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "tokens"));
          objc_msgSend(v51, "addObject:", v44);

          objc_msgSend(v50, "unlock");
          v52 = APLogForCategory(34);
          v53 = v44;
          v54 = objc_claimAutoreleasedReturnValue(v52);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
            v68 = v50;
            v55 = objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "UUIDString"));
            *(_DWORD *)buf = 138543618;
            v78 = v66;
            v79 = 2114;
            v80 = v55;
            v56 = (void *)v55;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Context %{public}@ makes a request %{public}@ to the legacy interface.", buf, 0x16u);

            v50 = v68;
          }

          LOBYTE(v65) = v69;
          v57 = a1;
          v58 = v73;
          v59 = v75;
          objc_msgSend(v57, "requestFromLegacyInterfaceForPromotedContents:context:withToken:andBundleID:clientInfo:idAccount:deliverEntireBatch:completionHandler:", v73, v14, v53, v15, v16, v75, v65, v17);

          v43 = v71;
        }
        else
        {
          v59 = v49;
          if (v38)
          {
            objc_msgSend(a1, "createContentDatasFromContext:unfilledReasonCode:types:diagnosticCode:completionHandler:", v14, 1025, v13, 7, v17);
          }
          else
          {
            v64 = objc_alloc_init(APMediaServiceRequestParameters);
            -[APMediaServiceRequestParameters setContext:](v64, "setContext:", v14);
            -[APMediaServiceRequestParameters setRequestID:](v64, "setRequestID:", v76);
            -[APMediaServiceRequestParameters setClientInfo:](v64, "setClientInfo:", v16);
            -[APMediaServiceRequestParameters setIdAccount:](v64, "setIdAccount:", v59);
            -[APMediaServiceRequestParameters setPlacement:](v64, "setPlacement:", v67);
            -[APMediaServiceRequestParameters setDeliverEntireBatch:](v64, "setDeliverEntireBatch:", v69);
            objc_msgSend(a1, "_requestFromMediaWithParams:completionHandler:", v64, v17);

          }
          v58 = v73;
        }

LABEL_54:
        v44 = (void *)v76;
LABEL_55:

        goto LABEL_16;
      }
      APSimulateCrash(5, CFSTR("This Page placement type request can not have more than 1 item."), 0);
      v23 = a1;
      v24 = v14;
      v25 = 1027;
      v26 = v13;
      v27 = 3;
LABEL_15:
      objc_msgSend(v23, "createContentDatasFromContext:unfilledReasonCode:types:diagnosticCode:completionHandler:", v24, v25, v26, v27, v17);
LABEL_16:

      goto LABEL_17;
    }
    v28 = APLogForCategory(34);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
    if (v19)
    {
      if (v30)
      {
        *(_WORD *)buf = 0;
        v31 = "This is a no services region. No ad requests allowed to server.";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, v31, buf, 2u);
      }
    }
    else if (v30)
    {
      *(_WORD *)buf = 0;
      v31 = "This is a U13 user. No ad requests allowed to server.";
      goto LABEL_13;
    }

    v23 = a1;
    v24 = v14;
    v25 = 1025;
    v26 = v13;
    v27 = 2;
    goto LABEL_15;
  }
LABEL_17:

}

id sub_10001EAB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = (void *)objc_opt_self(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cacheKeyForIdentifier:", v3));

  objc_opt_self(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[APPersistentCacheStoreProvider persistentCacheStore](APPersistentCacheStoreProvider, "persistentCacheStore"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v5));

  return v7;
}

void sub_10001EF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001F008(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "_commit");
  objc_autoreleasePoolPop(v2);
}

void sub_10001F8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001FC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001FF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  uint64_t v26;

  objc_destroyWeak(location);
  objc_destroyWeak(&a26);
  _Block_object_dispose((const void *)(v26 - 128), 8);
  _Unwind_Resume(a1);
}

id *sub_100020544(id *a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  objc_super v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  id *v24;
  __int16 v25;
  id v26;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)APPCControllerCoordinator;
    a1 = (id *)objc_msgSendSuper2(&v20, "init");
    if (a1)
    {
      v11 = APLogForCategory(34);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136643331;
        v22 = "-[APPCControllerCoordinator initWithBundleID:requesterID:promotedContentDeliveryBlock:]";
        v23 = 2048;
        v24 = a1;
        v25 = 2114;
        v26 = v8;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%{sensitive}s: bundleID for controller %p is %{public}@.", buf, 0x20u);
      }

      objc_storeStrong(a1 + 3, a2);
      v13 = objc_msgSend(v10, "copy");
      v14 = a1[4];
      a1[4] = v13;

      v15 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
      v16 = a1[5];
      a1[5] = (id)v15;

      v17 = objc_alloc_init((Class)APUnfairRecursiveLock);
      v18 = a1[6];
      a1[6] = v17;

      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

void sub_100021994(void *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v9;
  NSObject *v10;
  id v11;
  _QWORD block[5];
  id v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 && a2 >= 1 && a2 != 8501)
  {
    v15 = v6;
    v16 = v5;
    v17 = v3;
    v18 = v4;
    v9 = (void *)os_transaction_create("com.apple.ap.observabilitymonitor");
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100006D94;
    block[3] = &unk_100215A18;
    v14 = a3;
    block[4] = a1;
    v13 = v9;
    v11 = v9;
    dispatch_async(v10, block);

  }
}

id sub_100021B00()
{
  objc_opt_self();
  return (id)MetricsModule_observability;
}

void sub_100022088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;

  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

void sub_10002225C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

float sub_100022924(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  NSObject *v13;
  int v15;
  id v16;

  v5 = a2;
  if (a1)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectForKey:", v5));
    v7 = 1.0;
    if (v6)
    {
      v8 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
      {
        objc_msgSend(v6, "floatValue");
        v7 = 0.0;
        if (v9 >= 0.0)
        {
          objc_msgSend(v6, "floatValue");
          v7 = 1.0;
          if (v10 <= 1.0)
          {
            objc_msgSend(v6, "floatValue");
            v7 = v11;
          }
        }
      }
      else
      {
        v12 = APLogForCategory(21);
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v15 = 138412290;
          v16 = v5;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "APInternalMessageRateLimitAdRequests metric must have NSNumber %@ property.", (uint8_t *)&v15, 0xCu);
        }

      }
    }

  }
  else
  {
    v7 = 0.0;
  }

  return v7;
}

void sub_10002404C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_100026670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,id location,uint64_t a62,char a63)
{
  uint64_t v63;

  _Block_object_dispose(&a63, 8);
  _Block_object_dispose((const void *)(v63 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_10002830C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v10 = a2;
  v5 = a3;
  v6 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", objc_msgSend(v5, "count")));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10000FDCC;
    v11[3] = &unk_1002143D0;
    v12 = *(id *)(a1 + 32);
    v13 = v7;
    v8 = v7;
    objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v11);
    v9 = objc_msgSend(v8, "copy");
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v9, v10);

  }
}

uint64_t APPBAdBatchResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  unint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t result;
  uint64_t String;
  uint64_t v28;
  uint64_t v29;
  APPBAdData *v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v13 = v6 >> 3;
    switch((v6 >> 3))
    {
      case 1u:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 108) |= 4u;
        while (1)
        {
          v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v18 = v17 + 1;
          if (v17 == -1 || v18 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
          v16 |= (unint64_t)(v19 & 0x7F) << v14;
          if ((v19 & 0x80) == 0)
            goto LABEL_83;
          v14 += 7;
          v10 = v15++ >= 9;
          if (v10)
          {
            LODWORD(v16) = 0;
            goto LABEL_85;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_83:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_85:
        v54 = 64;
        goto LABEL_94;
      case 2u:
        String = PBReaderReadString(a2);
        v28 = objc_claimAutoreleasedReturnValue(String);
        v29 = 48;
        goto LABEL_77;
      case 3u:
        v30 = objc_alloc_init(APPBAdData);
        objc_msgSend((id)a1, "addAd:", v30);
        v58 = 0;
        v59 = 0;
        if (!PBReaderPlaceMark(a2, &v58) || (APPBAdDataReadFrom((uint64_t)v30, a2) & 1) == 0)
          goto LABEL_111;
        goto LABEL_80;
      case 4u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        *(_BYTE *)(a1 + 108) |= 0x80u;
        while (2)
        {
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v35 = v34 + 1;
          if (v34 == -1 || v35 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v10 = v32++ >= 9;
              if (v10)
              {
                v33 = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v33 = 0;
LABEL_89:
        v55 = v33 != 0;
        v56 = 105;
        goto LABEL_99;
      case 5u:
        *(_BYTE *)(a1 + 108) |= 0x10u;
        v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v38 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v38 = 0;
        }
        *(_DWORD *)(a1 + 72) = v38;
        goto LABEL_109;
      case 6u:
        *(_BYTE *)(a1 + 108) |= 8u;
        v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v39 <= 0xFFFFFFFFFFFFFFFBLL
          && (v40 = v39 + 4, v39 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)))
        {
          v41 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
        }
        else
        {
          v41 = 0;
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        *(_DWORD *)(a1 + 68) = v41;
        goto LABEL_109;
      case 7u:
        goto LABEL_34;
      case 8u:
        *(_BYTE *)(a1 + 108) |= 1u;
        v42 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v42 <= 0xFFFFFFFFFFFFFFF7 && v42 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v43 = 0;
        }
        v57 = 8;
        goto LABEL_108;
      case 9u:
        v44 = PBReaderReadString(a2);
        v30 = (APPBAdData *)objc_claimAutoreleasedReturnValue(v44);
        if (v30)
          objc_msgSend((id)a1, "addAdsToEvict:", v30);
        goto LABEL_81;
      case 0xAu:
        v45 = PBReaderReadString(a2);
        v30 = (APPBAdData *)objc_claimAutoreleasedReturnValue(v45);
        if (v30)
          objc_msgSend((id)a1, "addURLsToEvict:", v30);
        goto LABEL_81;
      case 0xBu:
        v30 = objc_alloc_init(APPBAdDataUpdate);
        objc_msgSend((id)a1, "addAdUpdates:", v30);
        v58 = 0;
        v59 = 0;
        if (!PBReaderPlaceMark(a2, &v58) || (APPBAdDataUpdateReadFrom((uint64_t)v30, a2) & 1) == 0)
          goto LABEL_111;
        goto LABEL_80;
      case 0xCu:
        v30 = objc_alloc_init(APPBTagTransformation);
        objc_msgSend((id)a1, "addTagTransformations:", v30);
        v58 = 0;
        v59 = 0;
        if (!PBReaderPlaceMark(a2, &v58) || !APPBTagTransformationReadFrom(v30, a2))
          goto LABEL_111;
        goto LABEL_80;
      case 0xDu:
        *(_BYTE *)(a1 + 108) |= 2u;
        v46 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v43 = 0;
        }
        v57 = 16;
LABEL_108:
        *(_QWORD *)(a1 + v57) = v43;
        goto LABEL_109;
      case 0xEu:
        v47 = 0;
        v48 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 108) |= 0x20u;
        while (2)
        {
          v49 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50;
            v16 |= (unint64_t)(v51 & 0x7F) << v47;
            if (v51 < 0)
            {
              v47 += 7;
              v10 = v48++ >= 9;
              if (v10)
              {
                LODWORD(v16) = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_93:
        v54 = 76;
LABEL_94:
        *(_DWORD *)(a1 + v54) = v16;
        goto LABEL_109;
      case 0xFu:
        v52 = PBReaderReadString(a2);
        v28 = objc_claimAutoreleasedReturnValue(v52);
        v29 = 56;
LABEL_77:
        v53 = *(void **)(a1 + v29);
        *(_QWORD *)(a1 + v29) = v28;

        goto LABEL_109;
      default:
        if ((_DWORD)v13 != 100)
        {
          if ((_DWORD)v13 == 200)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 108) |= 0x40u;
            while (1)
            {
              v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                break;
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if ((v25 & 0x80) == 0)
                goto LABEL_96;
              v20 += 7;
              v10 = v21++ >= 9;
              if (v10)
              {
                v22 = 0;
                goto LABEL_98;
              }
            }
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_96:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              v22 = 0;
LABEL_98:
            v55 = v22 != 0;
            v56 = 104;
LABEL_99:
            *(_BYTE *)(a1 + v56) = v55;
          }
          else
          {
LABEL_34:
            result = PBReaderSkipValueWithTag(a2);
            if (!(_DWORD)result)
              return result;
          }
          goto LABEL_109;
        }
        v30 = objc_alloc_init(APPBAdSpecification);
        objc_storeStrong((id *)(a1 + 80), v30);
        v58 = 0;
        v59 = 0;
        if (PBReaderPlaceMark(a2, &v58) && (APPBAdSpecificationReadFrom((uint64_t)v30, a2) & 1) != 0)
        {
LABEL_80:
          PBReaderRecallMark(a2, &v58);
LABEL_81:

LABEL_109:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_111:

        return 0;
    }
  }
}

uint64_t APPBAdDataReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  APPBParameter *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Data;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t String;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v8 = v7 + 1;
        if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
        v6 |= (unint64_t)(v9 & 0x7F) << v4;
        if ((v9 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        v10 = v5++ >= 9;
        if (v10)
        {
          v6 = 0;
          v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v11 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v13 = v6 >> 3;
      if ((int)(v6 >> 3) <= 299)
        break;
      if ((int)v13 <= 729)
      {
        if ((int)v13 > 549)
        {
          switch((int)v13)
          {
            case 700:
              v17 = objc_alloc_init(APPBParameter);
              objc_msgSend((id)a1, "addITunesMetadata:", v17);
              goto LABEL_48;
            case 701:
              v17 = objc_alloc_init(APPBTransparencyDetails);
              objc_storeStrong((id *)(a1 + 448), v17);
              v112 = 0;
              v113 = 0;
              if (!PBReaderPlaceMark(a2, &v112) || !APPBTransparencyDetailsReadFrom((uint64_t)v17, a2))
                goto LABEL_266;
              break;
            case 702:
              v17 = objc_alloc_init(APPBNativeMediaCreativeMetadata);
              objc_storeStrong((id *)(a1 + 352), v17);
              v112 = 0;
              v113 = 0;
              if (PBReaderPlaceMark(a2, &v112)
                && (APPBNativeMediaCreativeMetadataReadFrom((uint64_t)v17, a2) & 1) != 0)
              {
                break;
              }
              goto LABEL_266;
            case 703:
            case 704:
            case 712:
            case 713:
            case 714:
              goto LABEL_71;
            case 705:
              String = PBReaderReadString(a2);
              v15 = objc_claimAutoreleasedReturnValue(String);
              v16 = 120;
              goto LABEL_203;
            case 706:
              v82 = 0;
              v83 = 0;
              v35 = 0;
              *(_WORD *)(a1 + 492) |= 0x400u;
              while (2)
              {
                v84 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                v85 = v84 + 1;
                if (v84 == -1 || v85 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v86 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v84);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v85;
                  v35 |= (unint64_t)(v86 & 0x7F) << v82;
                  if (v86 < 0)
                  {
                    v82 += 7;
                    v10 = v83++ >= 9;
                    if (v10)
                    {
                      LODWORD(v35) = 0;
                      goto LABEL_233;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v35) = 0;
LABEL_233:
              v109 = 328;
              goto LABEL_246;
            case 707:
              v87 = 0;
              v88 = 0;
              v35 = 0;
              *(_WORD *)(a1 + 492) |= 0x20u;
              while (2)
              {
                v89 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                v90 = v89 + 1;
                if (v89 == -1 || v90 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v91 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v89);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v90;
                  v35 |= (unint64_t)(v91 & 0x7F) << v87;
                  if (v91 < 0)
                  {
                    v87 += 7;
                    v10 = v88++ >= 9;
                    if (v10)
                    {
                      LODWORD(v35) = 0;
                      goto LABEL_237;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v35) = 0;
LABEL_237:
              v109 = 112;
              goto LABEL_246;
            case 708:
              v92 = PBReaderReadString(a2);
              v15 = objc_claimAutoreleasedReturnValue(v92);
              v16 = 72;
              goto LABEL_203;
            case 709:
              v93 = 0;
              v94 = 0;
              v35 = 0;
              *(_WORD *)(a1 + 492) |= 0x800u;
              while (2)
              {
                v95 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                v96 = v95 + 1;
                if (v95 == -1 || v96 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v97 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v95);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v96;
                  v35 |= (unint64_t)(v97 & 0x7F) << v93;
                  if (v97 < 0)
                  {
                    v93 += 7;
                    v10 = v94++ >= 9;
                    if (v10)
                    {
                      LODWORD(v35) = 0;
                      goto LABEL_241;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v35) = 0;
LABEL_241:
              v109 = 456;
              goto LABEL_246;
            case 710:
              v98 = PBReaderReadString(a2);
              v15 = objc_claimAutoreleasedReturnValue(v98);
              v16 = 464;
              goto LABEL_203;
            case 711:
              v99 = PBReaderReadString(a2);
              v15 = objc_claimAutoreleasedReturnValue(v99);
              v16 = 104;
              goto LABEL_203;
            case 715:
              v100 = PBReaderReadString(a2);
              v15 = objc_claimAutoreleasedReturnValue(v100);
              v16 = 216;
              goto LABEL_203;
            default:
              if ((_DWORD)v13 == 550)
              {
                v102 = 0;
                v103 = 0;
                v35 = 0;
                *(_WORD *)(a1 + 492) |= 0x100u;
                while (1)
                {
                  v104 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  v105 = v104 + 1;
                  if (v104 == -1 || v105 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                    break;
                  v106 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v104);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v105;
                  v35 |= (unint64_t)(v106 & 0x7F) << v102;
                  if ((v106 & 0x80) == 0)
                    goto LABEL_243;
                  v102 += 7;
                  v10 = v103++ >= 9;
                  if (v10)
                  {
                    LODWORD(v35) = 0;
                    goto LABEL_245;
                  }
                }
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_243:
                if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                  LODWORD(v35) = 0;
LABEL_245:
                v109 = 200;
LABEL_246:
                *(_DWORD *)(a1 + v109) = v35;
                goto LABEL_204;
              }
              if ((_DWORD)v13 != 600)
                goto LABEL_71;
              v17 = objc_alloc_init(APPBAdAction);
              objc_msgSend((id)a1, "addActions:", v17);
              v112 = 0;
              v113 = 0;
              if (!PBReaderPlaceMark(a2, &v112) || (APPBAdActionReadFrom((uint64_t)v17, a2) & 1) == 0)
                goto LABEL_266;
              break;
          }
LABEL_175:
          PBReaderRecallMark(a2, &v112);
LABEL_176:

          goto LABEL_204;
        }
        if ((int)v13 > 399)
        {
          if ((_DWORD)v13 == 400)
          {
            v17 = objc_alloc_init(APPBMerchant);
            objc_storeStrong((id *)(a1 + 344), v17);
            v112 = 0;
            v113 = 0;
            if (!PBReaderPlaceMark(a2, &v112) || (APPBMerchantReadFrom((uint64_t)v17, a2) & 1) == 0)
              goto LABEL_266;
          }
          else
          {
            if ((_DWORD)v13 != 500)
              goto LABEL_71;
            v17 = objc_alloc_init(APPBParameter);
            objc_msgSend((id)a1, "addNativeMetadata:", v17);
LABEL_48:
            v112 = 0;
            v113 = 0;
            if (!PBReaderPlaceMark(a2, &v112) || !APPBParameterReadFrom((uint64_t)v17, a2))
            {
LABEL_266:

              return 0;
            }
          }
          goto LABEL_175;
        }
        if ((_DWORD)v13 == 300)
        {
          *(_WORD *)(a1 + 492) |= 2u;
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v110 = 16;
LABEL_260:
          *(_QWORD *)(a1 + v110) = v26;
          goto LABEL_204;
        }
        if ((_DWORD)v13 != 301)
          goto LABEL_71;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_WORD *)(a1 + 492) |= 0x1000u;
        while (1)
        {
          v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v22 = v21 + 1;
          if (v21 == -1 || v22 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_214;
          v18 += 7;
          v10 = v19++ >= 9;
          if (v10)
          {
            v20 = 0;
            goto LABEL_216;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_214:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v20 = 0;
LABEL_216:
        v107 = v20 != 0;
        v108 = 488;
        goto LABEL_229;
      }
      if ((int)v13 <= 800)
      {
        if ((_DWORD)v13 == 730)
        {
          v17 = objc_alloc_init(APPBAdJourneyStartRelayValue);
          objc_msgSend((id)a1, "addJourneyStartRelayValues:", v17);
          v112 = 0;
          v113 = 0;
          if (!PBReaderPlaceMark(a2, &v112)
            || (APPBAdJourneyStartRelayValueReadFrom((uint64_t)v17, a2) & 1) == 0)
          {
            goto LABEL_266;
          }
          goto LABEL_175;
        }
        if ((_DWORD)v13 == 750)
        {
          v17 = objc_alloc_init(APPBAdLayoutData);
          objc_msgSend((id)a1, "addAdLayoutData:", v17);
          v112 = 0;
          v113 = 0;
          if (!PBReaderPlaceMark(a2, &v112) || !APPBAdLayoutDataReadFrom((uint64_t)v17, a2))
            goto LABEL_266;
          goto LABEL_175;
        }
        if ((_DWORD)v13 != 800)
          goto LABEL_71;
        v24 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v24);
        v16 = 128;
      }
      else
      {
        if ((int)v13 > 810)
        {
          if ((_DWORD)v13 == 811)
          {
            v17 = objc_alloc_init(APPBPolicyData);
            objc_storeStrong((id *)(a1 + 368), v17);
            v112 = 0;
            v113 = 0;
            if (!PBReaderPlaceMark(a2, &v112) || !APPBPolicyDataReadFrom(v17, a2))
              goto LABEL_266;
          }
          else
          {
            if ((_DWORD)v13 != 812)
            {
LABEL_71:
              result = PBReaderSkipValueWithTag(a2);
              if (!(_DWORD)result)
                return result;
              goto LABEL_204;
            }
            v17 = objc_alloc_init(APPBTargetingDimensions);
            objc_storeStrong((id *)(a1 + 424), v17);
            v112 = 0;
            v113 = 0;
            if (!PBReaderPlaceMark(a2, &v112) || !APPBTargetingDimensionsReadFrom(v17, a2))
              goto LABEL_266;
          }
          goto LABEL_175;
        }
        if ((_DWORD)v13 != 801)
        {
          if ((_DWORD)v13 != 810)
            goto LABEL_71;
          v17 = objc_alloc_init(APPBAdFrequencyCapData);
          objc_storeStrong((id *)(a1 + 88), v17);
          v112 = 0;
          v113 = 0;
          if (!PBReaderPlaceMark(a2, &v112)
            || (APPBAdFrequencyCapDataReadFrom((uint64_t)v17, a2) & 1) == 0)
          {
            goto LABEL_266;
          }
          goto LABEL_175;
        }
        v28 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v28);
        v16 = 80;
      }
LABEL_203:
      v101 = *(void **)(a1 + v16);
      *(_QWORD *)(a1 + v16) = v15;

LABEL_204:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((int)v13)
    {
      case 1:
        v14 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v14);
        v16 = 160;
        goto LABEL_203;
      case 2:
        v29 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v29);
        v16 = 168;
        goto LABEL_203;
      case 3:
        v30 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v30);
        v16 = 472;
        goto LABEL_203;
      case 4:
        Data = PBReaderReadData(a2);
        v15 = objc_claimAutoreleasedReturnValue(Data);
        v16 = 280;
        goto LABEL_203;
      case 5:
        v32 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v32);
        v16 = 240;
        goto LABEL_203;
      case 6:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v10 = v34++ >= 9;
              if (v10)
              {
                LODWORD(v35) = 0;
                goto LABEL_220;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v35) = 0;
LABEL_220:
        v109 = 272;
        goto LABEL_246;
      case 7:
        *(_WORD *)(a1 + 492) |= 1u;
        v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v26 = 0;
        }
        v110 = 8;
        goto LABEL_260;
      case 8:
        v40 = PBReaderReadString(a2);
        v17 = (APPBParameter *)objc_claimAutoreleasedReturnValue(v40);
        if (v17)
          objc_msgSend((id)a1, "addTrackingURL:", v17);
        goto LABEL_176;
      case 9:
        v41 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v41);
        v16 = 432;
        goto LABEL_203;
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 39:
      case 40:
      case 41:
      case 42:
      case 44:
      case 47:
      case 48:
      case 53:
      case 55:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 79:
        goto LABEL_71;
      case 15:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 492) |= 0x4000u;
        while (2)
        {
          v45 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v46 = v45 + 1;
          if (v45 == -1 || v46 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              v10 = v43++ >= 9;
              if (v10)
              {
                v44 = 0;
                goto LABEL_224;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v44 = 0;
LABEL_224:
        v107 = v44 != 0;
        v108 = 490;
        goto LABEL_229;
      case 16:
        v48 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v48);
        v16 = 56;
        goto LABEL_203;
      case 35:
        v49 = PBReaderReadString(a2);
        v17 = (APPBParameter *)objc_claimAutoreleasedReturnValue(v49);
        if (v17)
          objc_msgSend((id)a1, "addConfirmedClickPixelURLs:", v17);
        goto LABEL_176;
      case 36:
        v50 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v50);
        v16 = 152;
        goto LABEL_203;
      case 37:
        v17 = objc_alloc_init(APPBVideoAsset);
        objc_msgSend((id)a1, "addVideoAsset:", v17);
        v112 = 0;
        v113 = 0;
        if (!PBReaderPlaceMark(a2, &v112) || !APPBVideoAssetReadFrom((uint64_t)v17, a2))
          goto LABEL_266;
        goto LABEL_175;
      case 38:
        v17 = objc_alloc_init(APPBMediaFiles);
        objc_storeStrong((id *)(a1 + 336), v17);
        v112 = 0;
        v113 = 0;
        if (!PBReaderPlaceMark(a2, &v112) || (APPBMediaFilesReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_266;
        goto LABEL_175;
      case 43:
        v51 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v51);
        v16 = 136;
        goto LABEL_203;
      case 45:
        v52 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v52);
        v16 = 392;
        goto LABEL_203;
      case 46:
        v53 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v53);
        v16 = 48;
        goto LABEL_203;
      case 49:
        v54 = 0;
        v55 = 0;
        v56 = 0;
        *(_WORD *)(a1 + 492) |= 0x2000u;
        break;
      case 50:
        *(_WORD *)(a1 + 492) |= 0x40u;
        v60 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v60 <= 0xFFFFFFFFFFFFFFFBLL && v60 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v61 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v60 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v61 = 0;
        }
        v111 = 144;
        goto LABEL_255;
      case 51:
        *(_WORD *)(a1 + 492) |= 0x80u;
        v62 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v61 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v62);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v61 = 0;
        }
        v111 = 148;
LABEL_255:
        *(_DWORD *)(a1 + v111) = v61;
        goto LABEL_204;
      case 52:
        v63 = PBReaderReadString(a2);
        v17 = (APPBParameter *)objc_claimAutoreleasedReturnValue(v63);
        if (v17)
          objc_msgSend((id)a1, "addScreenSaverImageURL:", v17);
        goto LABEL_176;
      case 54:
        v64 = PBReaderReadString(a2);
        v17 = (APPBParameter *)objc_claimAutoreleasedReturnValue(v64);
        if (v17)
          objc_msgSend((id)a1, "addExcludeTag:", v17);
        goto LABEL_176;
      case 56:
        v65 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v65);
        v16 = 256;
        goto LABEL_203;
      case 57:
        v66 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v66);
        v16 = 248;
        goto LABEL_203;
      case 58:
        v67 = PBReaderReadString(a2);
        v17 = (APPBParameter *)objc_claimAutoreleasedReturnValue(v67);
        if (v17)
          objc_msgSend((id)a1, "addRewardTokens:", v17);
        goto LABEL_176;
      case 59:
        *(_WORD *)(a1 + 492) |= 8u;
        v68 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v68 <= 0xFFFFFFFFFFFFFFF7 && v68 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v26 = 0;
        }
        v110 = 32;
        goto LABEL_260;
      case 63:
        v17 = objc_alloc_init(APPBTagSet);
        objc_msgSend((id)a1, "addMatchTagClause:", v17);
        v112 = 0;
        v113 = 0;
        if (!PBReaderPlaceMark(a2, &v112) || (APPBTagSetReadFrom(v17, a2) & 1) == 0)
          goto LABEL_266;
        goto LABEL_175;
      case 70:
        *(_WORD *)(a1 + 492) |= 0x10u;
        v69 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v69 <= 0xFFFFFFFFFFFFFFF7 && v69 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v69);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v26 = 0;
        }
        v110 = 40;
        goto LABEL_260;
      case 71:
        v70 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v70);
        v16 = 312;
        goto LABEL_203;
      case 72:
        v71 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v71);
        v16 = 232;
        goto LABEL_203;
      case 73:
        v72 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v72);
        v16 = 192;
        goto LABEL_203;
      case 74:
        *(_WORD *)(a1 + 492) |= 4u;
        v73 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v73 <= 0xFFFFFFFFFFFFFFF7
          && (v74 = v73 + 8, v73 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)))
        {
          v75 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v73);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v74;
        }
        else
        {
          v75 = 0;
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        *(_QWORD *)(a1 + 24) = v75;
        goto LABEL_204;
      case 75:
        v17 = objc_alloc_init(APPBGeofence);
        objc_msgSend((id)a1, "addGeofences:", v17);
        v112 = 0;
        v113 = 0;
        if (!PBReaderPlaceMark(a2, &v112) || !APPBGeofenceReadFrom((uint64_t)v17, a2))
          goto LABEL_266;
        goto LABEL_175;
      case 76:
        v76 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v76);
        v16 = 408;
        goto LABEL_203;
      case 77:
        v77 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v77);
        v16 = 416;
        goto LABEL_203;
      case 78:
        v17 = objc_alloc_init(APPBAdSize);
        objc_msgSend((id)a1, "addCreativeSizes:", v17);
        v112 = 0;
        v113 = 0;
        if (!PBReaderPlaceMark(a2, &v112) || (APPBAdSizeReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_266;
        goto LABEL_175;
      case 80:
        *(_WORD *)(a1 + 492) |= 0x200u;
        v78 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v78 <= 0xFFFFFFFFFFFFFFFBLL
          && (v79 = v78 + 4, v78 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)))
        {
          v80 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v78);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v79;
        }
        else
        {
          v80 = 0;
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        *(_DWORD *)(a1 + 304) = v80;
        goto LABEL_204;
      case 81:
        v17 = objc_alloc_init(APPBInstallAttribution);
        objc_storeStrong((id *)(a1 + 288), v17);
        v112 = 0;
        v113 = 0;
        if (!PBReaderPlaceMark(a2, &v112) || (APPBInstallAttributionReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_266;
        goto LABEL_175;
      default:
        if ((_DWORD)v13 != 200)
          goto LABEL_71;
        v17 = objc_alloc_init(APPBAdSpecification);
        objc_storeStrong((id *)(a1 + 400), v17);
        v112 = 0;
        v113 = 0;
        if (!PBReaderPlaceMark(a2, &v112) || (APPBAdSpecificationReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_266;
        goto LABEL_175;
    }
    while (1)
    {
      v57 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v58 = v57 + 1;
      if (v57 == -1 || v58 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v59 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58;
      v56 |= (unint64_t)(v59 & 0x7F) << v54;
      if ((v59 & 0x80) == 0)
        goto LABEL_226;
      v54 += 7;
      v10 = v55++ >= 9;
      if (v10)
      {
        v56 = 0;
        goto LABEL_228;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_226:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v56 = 0;
LABEL_228:
    v107 = v56 != 0;
    v108 = 489;
LABEL_229:
    *(_BYTE *)(a1 + v108) = v107;
    goto LABEL_204;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t APPBAdSpecificationReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  uint64_t String;
  uint64_t v13;
  void *v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 5)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      *(_BYTE *)(a1 + 20) |= 1u;
      while (1)
      {
        v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 == -1 || v18 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          goto LABEL_30;
        v15 += 7;
        v9 = v16++ >= 9;
        if (v9)
        {
          LODWORD(v17) = 0;
          goto LABEL_32;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v17) = 0;
LABEL_32:
      *(_DWORD *)(a1 + 16) = v17;
    }
    else if ((v6 >> 3) == 3)
    {
      String = PBReaderReadString(a2);
      v13 = objc_claimAutoreleasedReturnValue(String);
      v14 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v13;

    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL APPBTransparencyDetailsReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      switch((v6 >> 3))
      {
        case 1u:
          String = PBReaderReadString(a2);
          v13 = objc_claimAutoreleasedReturnValue(String);
          v14 = 16;
          goto LABEL_24;
        case 2u:
          v15 = PBReaderReadString(a2);
          v13 = objc_claimAutoreleasedReturnValue(v15);
          v14 = 24;
          goto LABEL_24;
        case 3u:
          v16 = PBReaderReadString(a2);
          v13 = objc_claimAutoreleasedReturnValue(v16);
          v14 = 32;
          goto LABEL_24;
        case 4u:
          v17 = PBReaderReadString(a2);
          v13 = objc_claimAutoreleasedReturnValue(v17);
          v14 = 8;
LABEL_24:
          v18 = *(void **)(a1 + v14);
          *(_QWORD *)(a1 + v14) = v13;

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
            return 0;
LABEL_25:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10002D358(uint64_t a1)
{

}

void sub_10002D360(uint64_t a1)
{

}

void sub_10002D368(uint64_t a1)
{

}

void sub_10002D370(uint64_t a1)
{

}

void sub_10002D378(uint64_t a1)
{

}

void sub_10002D380(uint64_t a1)
{

}

void sub_10002D388(uint64_t a1)
{

}

uint64_t sub_10002D390(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10002D3A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10002D3B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10002D3C0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10002D3D0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10002D3E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10002D3F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id sub_10002D400(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "stringByAppendingPathComponent:", a2);
}

void sub_10002D40C(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (*(_QWORD *)(a1 + 56) == 7005)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(WeakRetained, "setHasRunningLandingPageRequest:", 0);

  }
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(void))(v3 + 16))();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

id sub_10002D470(id a1, APMetricBatchInfoObservable *a2)
{
  APMetricBatchInfoObservable *v2;
  uint64_t v3;
  void *v5;

  v2 = a2;
  v3 = (uint64_t)-[APMetricBatchInfoObservable purpose](v2, "purpose");
  if (v3 < 1 || v3 == 8501)
    v5 = 0;
  else
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[APMetricBatchInfoObservable identifier](v2, "identifier"));

  return v5;
}

void sub_10002D4C4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint8_t v6[16];

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "compactMapObjectsUsingBlock:", &stru_100215AA0));
    if (!objc_msgSend(v2, "count"))
      goto LABEL_8;
  }
  else
  {
    v2 = 0;
  }
  v3 = APLogForCategory(13);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Upload success", v6, 2u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "signalMonitor"));
  objc_msgSend(v5, "uploadSuccess");

LABEL_8:
}

BOOL sub_10002D588(id a1, APContentData *a2, NSDictionary *a3)
{
  return -[APContentData hasValidRepresentation](a2, "hasValidRepresentation", a3);
}

id sub_10002D590(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "processInternalMetric:", *(_QWORD *)(a1 + 40));
}

id sub_10002D59C(id a1, APMetricBatchInfoObservable *a2)
{
  APMetricBatchInfoObservable *v2;
  uint64_t v3;
  void *v5;

  v2 = a2;
  v3 = (uint64_t)-[APMetricBatchInfoObservable purpose](v2, "purpose");
  if (v3 < 1 || v3 == 8501)
    v5 = 0;
  else
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[APMetricBatchInfoObservable identifier](v2, "identifier"));

  return v5;
}

void sub_10002D5F0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  int v6;
  id v7;
  __int16 v8;
  void *v9;

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "compactMapObjectsUsingBlock:", &stru_100215AC0));
    if (!objc_msgSend(v2, "count"))
      goto LABEL_8;
  }
  else
  {
    v2 = 0;
  }
  v3 = APLogForCategory(13);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v6 = 134218242;
    v7 = objc_msgSend(v2, "count");
    v8 = 2114;
    v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Will upload %ld batches. BatchIDs: %{public}@", (uint8_t *)&v6, 0x16u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "signalMonitor"));
  objc_msgSend(v5, "willUploadWithBatchCount:", objc_msgSend(v2, "count"));

LABEL_8:
}

void sub_10002D710(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  unsigned int v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  __int128 v26;
  _QWORD v27[5];
  id v28;
  id v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "data"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "signature"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_hashAndSavePayloadForInternalTesting:signature:", v3, v4));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "headers"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v6));

  if (+[APSystemInternal isAppleInternalInstall](APSystemInternal, "isAppleInternalInstall"))objc_msgSend(v7, "setObject:forKeyedSubscript:", CFSTR("true"), CFSTR("X-Apple-EventCollection-Internal"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[APDeviceInfo current](APDeviceInfo, "current"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceModel"));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v9, CFSTR("X-Apple-EventCollection-Model"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "buildVersion"));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v10, CFSTR("X-Apple-EventCollection-Build"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[APSystemInfo osIdentifier](APSystemInfo, "osIdentifier"));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v11, CFSTR("X-Apple-EventCollection-OS"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("EventCollection %d"), objc_msgSend(&off_10022A068, "intValue")));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v12, CFSTR("User-Agent"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "signature"));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v13, CFSTR("X-Apple-ActionSignature"));

  if (v5)
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v5, CFSTR("apple-request-id"));
  if (+[APSystemInternal isAppleInternalInstall](APSystemInternal, "isAppleInternalInstall"))
  {
    v14 = objc_alloc((Class)NSUserDefaults);
    v15 = objc_msgSend(v14, "initWithSuiteName:", APDefaultsBundleID);
    v16 = objc_msgSend(v15, "BOOLForKey:", kAPAutomationLoggingEnabled);

    if (v16)
    {
      v17 = APLogForCategory(29);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v32 = v7;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Headers (%@)", buf, 0xCu);
      }

    }
  }
  v19 = sub_100021B00();
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  sub_100030F78(v20, *(void **)(a1 + 48));

  v21 = *(void **)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 64);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "data"));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100125AA8;
  v27[3] = &unk_100215940;
  v27[4] = *(_QWORD *)(a1 + 32);
  v28 = *(id *)(a1 + 64);
  v29 = *(id *)(a1 + 72);
  v26 = *(_OWORD *)(a1 + 80);
  v24 = (id)v26;
  v30 = v26;
  v25 = objc_msgSend(v21, "POST:headers:body:withCompletionHandler:", v22, v7, v23, v27);

}

void sub_10002DAA4(uint64_t a1, char a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  void *i;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  void *v23;
  _BYTE v24[128];

  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v19;
    v7 = 1;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        if (*(_BYTE *)(a1 + 56))
        {
          v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "batchDeliveredClosure"));
          if (v10)
          {
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
            ((void (**)(_QWORD, void *, id))v10)[2](v10, v11, objc_msgSend(v9, "metricsCount"));

          }
        }
        v12 = APLogForCategory(29);
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
          *(_DWORD *)buf = 138543362;
          v23 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "deleting batch %{public}@", buf, 0xCu);

        }
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fileSystemToken"));
        v16 = +[APMetricBatch removeBatchByFileSystemToken:](APMetricBatch, "removeBatchByFileSystemToken:", v15);

        v7 &= v16;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v5);
  }
  else
  {
    v7 = 1;
  }

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v7 & a2;
}

void sub_10002DCB0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", +[MetricsModuleClasses metricClass](MetricsModuleClasses, "metricClass")));
  +[APSupportedSecureEncodedClass addClasses:](APSupportedSecureEncodedClass, "addClasses:", v1);

}

id sub_10002DD0C(uint64_t a1, void *a2, _BYTE *a3)
{
  id result;

  result = objc_msgSend(a2, "count");
  if (result == (id)4)
  {
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    *a3 = 1;
  }
  return result;
}

void sub_10002DD58(uint64_t a1, void *a2)
{
  id v3;

  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "bundleIdentifier"));
  if (objc_msgSend(v3, "length"))
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

id sub_10002DDB8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_batchDequeuedWithWaitingTime:queueLength:batchID:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(double *)(a1 + 56));
}

unint64_t sub_10002DDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10002DE30(a1, a2, v5);
}

unint64_t sub_10002DE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

_QWORD *sub_10002DF10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100008A18(&qword_100264208);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

unint64_t sub_10002DF74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100265FB0;
  if (!qword_100265FB0)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100265FB0);
  }
  return result;
}

uint64_t sub_10002DFB0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for TimeZone(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DateComponents(0);
  v27 = *(_QWORD *)(v10 - 8);
  v28 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(v1, "now");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v17 = sub_10000ABD8(v6, (uint64_t)qword_10026D1E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v17, v6);
  if (qword_100264E80 != -1)
    swift_once(&qword_100264E80, sub_10015B3D8);
  v18 = sub_10000ABD8(v2, (uint64_t)qword_10026D228);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v18, v2);
  Calendar.dateComponents(in:from:)(v5, v15);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  result = DateComponents.year.getter(v19);
  if ((v21 & 1) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v22 = result;
  result = DateComponents.month.getter();
  if ((v23 & 1) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = DateComponents.day.getter();
  if ((v24 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v26);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
    return v22;
  }
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002E22C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1000A8FC0(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1000A8FC0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10002E318(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1000A8FC0(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1000A8FC0(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10002E528(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10002E22C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_10002DF10(v12, 0);
      v5 = sub_10002E318((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

uint64_t sub_10002E66C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10002E528(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

unint64_t sub_10002E6E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v6 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008A18(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v6 = (_QWORD *)v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v6;
  }
  swift_retain(v4, v5);
  v8 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v9 = *(v8 - 2);
    v10 = *(v8 - 1);
    v11 = *v8;
    swift_bridgeObjectRetain(v10);
    swift_unknownObjectRetain(v11);
    result = sub_10002DDCC(v9, v10);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v6[6] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    *(_QWORD *)(v6[7] + 8 * result) = v11;
    v15 = v6[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6[2] = v17;
    v8 += 3;
    if (!--v7)
    {
      swift_release(v6);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002E7FC(uint64_t a1)
{
  return sub_10002E6E8(a1, &qword_100265FE8);
}

unint64_t sub_10002E808()
{
  unint64_t result;

  result = qword_100265400;
  if (!qword_100265400)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100265400);
  }
  return result;
}

uint64_t sub_10002E84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015A438);
}

uint64_t sub_10002E858(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BatchID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002E894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BatchID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BatchID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E91C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;

  v6 = sub_100008A18(&qword_100265B70);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ExtendedUUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  ExtendedUUID.init(string:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100159FF8((uint64_t)v8);
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v13._object = (void *)0x80000001001F4C20;
    v13._countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v13);
    v14._countAndFlagsBits = a1;
    v14._object = a2;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(a2);
    v15._countAndFlagsBits = 34;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16 = v22;
    v17 = v23;
    v18 = sub_10014D4A4();
    swift_allocError(&type metadata for DeserializationError, v18, 0, 0);
    *v19 = v16;
    v19[1] = v17;
    return swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v21(v12, v8, v9);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a3, v12, v9);
  }
}

uint64_t sub_10002EACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *object;

  v6 = sub_100008A18((uint64_t *)&unk_1002653F0);
  v7 = swift_allocObject(v6, 152, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001B7630;
  *(_QWORD *)(v7 + 56) = &type metadata for Int;
  *(_QWORD *)(v7 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 96) = &type metadata for Int;
  *(_QWORD *)(v7 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v7 + 72) = a2;
  *(_QWORD *)(v7 + 136) = &type metadata for Int;
  *(_QWORD *)(v7 + 144) = &protocol witness table for Int;
  *(_QWORD *)(v7 + 112) = a3;
  v8._countAndFlagsBits = String.init(format:_:)(0x6432302564343025, 0xEC00000064323025, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  return 0x736572756C696166;
}

uint64_t sub_10002EC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = a3;
  swift_storeEnumTagMultiPayload(v9, v10, a4);
  swift_retain(a1, v11);
  sub_100006E7C((uint64_t)v9);
  sub_1000070D8((uint64_t)v9, type metadata accessor for ObservabilitySignal);
  return swift_release(a1);
}

uint64_t sub_10002ED8C(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v20[16];

  v8 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v8);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100008A18(&qword_100265B78);
  __chkstk_darwin(v11);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for BatchID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v20[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_bridgeObjectRetain(a3);
  sub_10002E91C(a2, a3, (uint64_t)v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  sub_10002E8D8((uint64_t)v13, (uint64_t)v17);
  v18 = (uint64_t)&v10[*(int *)(sub_100008A18(&qword_100265B80) + 64)];
  *(double *)v10 = a4;
  *((_QWORD *)v10 + 1) = a1;
  sub_10002E894((uint64_t)v17, v18);
  swift_storeEnumTagMultiPayload(v10, v8, 1);
  sub_100006E7C((uint64_t)v10);
  sub_1000070D8((uint64_t)v10, type metadata accessor for ObservabilitySignal);
  return sub_1000070D8((uint64_t)v17, type metadata accessor for BatchID);
}

uint64_t sub_10002EFEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v26 = a3;
  v6 = type metadata accessor for URL.DirectoryHint(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008A18(&qword_1002653E8);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002F884(v3 + OBJC_IVAR____TtC7Metrics33PropertyListFileManagerFileSystem_fileDirectory, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v17 = sub_10013509C((uint64_t)v12);
    v18 = static os_log_type_t.error.getter(v17);
    sub_1000ABCEC();
    v19 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7363697274654DLL, 0xE700000000000000);
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Error: Could not get property list application directory path.", 62, 2, _swiftEmptyArrayStorage);

    v20 = 1;
    v21 = v26;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    v27[0] = a1;
    v27[1] = a2;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for URL.DirectoryHint.inferFromPath(_:), v6);
    v22 = sub_10002E808();
    v23 = v26;
    URL.appending<A>(path:directoryHint:)(v27, v9, &type metadata for String, v22);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v20 = 0;
    v21 = v23;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v21, v20, 1, v13);
}

uint64_t sub_10002F230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void *v13;
  void *object;
  NSString v15;
  NSURL *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  id v20;
  uint64_t (*v21)(_BYTE *, uint64_t);
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _BYTE v28[16];
  id v29;

  v5 = sub_100008A18(&qword_1002653E8);
  __chkstk_darwin(v5);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002EFEC(a1, a2, (uint64_t)v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_10013509C((uint64_t)v7);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
  v13 = *(void **)(v2 + OBJC_IVAR____TtC7Metrics33PropertyListFileManagerFileSystem_fileManager);
  object = URL.path(percentEncoded:)(0)._object;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LODWORD(object) = objc_msgSend(v13, "fileExistsAtPath:", v15);

  if ((_DWORD)object)
  {
    URL._bridgeToObjectiveC()(v16);
    v18 = v17;
    v29 = 0;
    v19 = objc_msgSend(v13, "removeItemAtURL:error:", v17, &v29);

    v20 = v29;
    if (v19)
    {
      v21 = *(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8);
      v22 = v29;
      return v21(v11, v8);
    }
    v23 = v29;
    v24 = _convertNSErrorToError(_:)(v20);

    v25 = swift_willThrow();
    v26 = static os_log_type_t.error.getter(v25);
    sub_1000ABCEC();
    v27 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7363697274654DLL, 0xE700000000000000);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Error: Could not delete Property List", 37, 2, _swiftEmptyArrayStorage);

    swift_errorRelease(v24);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10002F4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  void *v19;
  void *object;
  NSString v21;
  NSURL *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  Class isa;
  NSURL *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  id v38;
  void (*v39)(_BYTE *, uint64_t);
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void (*v46)(_BYTE *, uint64_t);
  _BYTE v47[16];
  id v48;

  v4 = v3;
  v7 = sub_100008A18(&qword_1002653E8);
  __chkstk_darwin(v7);
  v9 = &v47[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = &v47[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v16 = &v47[-v15];
  sub_10002EFEC(a2, a3, (uint64_t)v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return sub_10013509C((uint64_t)v9);
  v18 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v16, v9, v10);
  URL.deletingLastPathComponent()(v18);
  v19 = *(void **)(v4 + OBJC_IVAR____TtC7Metrics33PropertyListFileManagerFileSystem_fileManager);
  object = URL.path(percentEncoded:)(0)._object;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LOBYTE(object) = objc_msgSend(v19, "fileExistsAtPath:", v21);

  if ((object & 1) == 0)
  {
    URL._bridgeToObjectiveC()(v22);
    v24 = v23;
    v48 = 0;
    v25 = objc_msgSend(v19, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v23, 1, 0, &v48);

    v26 = v48;
    if (v25)
    {
      v27 = v48;
    }
    else
    {
      v28 = v48;
      v29 = _convertNSErrorToError(_:)(v26);

      v30 = swift_willThrow();
      v31 = static os_log_type_t.error.getter(v30);
      sub_1000ABCEC();
      v32 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7363697274654DLL, 0xE700000000000000);
      os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Error: Could not create File Directory.", 39, 2, _swiftEmptyArrayStorage);

      swift_errorRelease(v29);
    }
  }
  sub_100008A18((uint64_t *)&unk_1002659F0);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  URL._bridgeToObjectiveC()(v34);
  v36 = v35;
  v48 = 0;
  v37 = -[objc_class writeToURL:error:](isa, "writeToURL:error:", v35, &v48);

  v38 = v48;
  if (v37)
  {
    v39 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
    v40 = v48;
    v39(v14, v10);
    return ((uint64_t (*)(_BYTE *, uint64_t))v39)(v16, v10);
  }
  else
  {
    v41 = v48;
    v42 = _convertNSErrorToError(_:)(v38);

    v43 = swift_willThrow();
    v44 = static os_log_type_t.error.getter(v43);
    sub_1000ABCEC();
    v45 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7363697274654DLL, 0xE700000000000000);
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "Error: Could not save property list.", 36, 2, _swiftEmptyArrayStorage);

    swift_errorRelease(v42);
    v46 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
    v46(v14, v10);
    return ((uint64_t (*)(_BYTE *, uint64_t))v46)(v16, v10);
  }
}

uint64_t sub_10002F884(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_1002653E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10002F9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_10002FBF8(void *a1)
{
  if (a1)
    a1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "rateLimits"));
  return a1;
}

uint64_t sub_1000303DC(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

void sub_100030744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_100030F78(void *a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;
  void *v9;
  id v10;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)os_transaction_create("com.apple.ap.observabilitymonitor");
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002D5F0;
    block[3] = &unk_1002159F0;
    v8 = v3;
    v9 = a1;
    v10 = v4;
    v6 = v4;
    dispatch_async(v5, block);

  }
}

void sub_100031038(void *a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint8_t v20[16];

  v7 = a2;
  v8 = a4;
  if (a1)
  {
    if (!a3)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "responseError"));

      if (v11)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "responseError"));
        v13 = objc_msgSend(v12, "code");
        v14 = a1;
        v15 = 0;
      }
      else
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URLResponse"));

        if (!v16)
        {
          objc_msgSend(a1, "_payloadUploadFailureWithType:code:batchInfos:", 1, 1000, v8);
          goto LABEL_16;
        }
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URLResponse"));
        if ((uint64_t)objc_msgSend(v17, "statusCode") <= 199)
        {

        }
        else
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URLResponse"));
          v19 = (uint64_t)objc_msgSend(v18, "statusCode");

          if (v19 <= 299)
          {
            objc_msgSend(a1, "_payloadUploadSuccessForBatchInfos:", v8);
            goto LABEL_16;
          }
        }
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URLResponse"));
        v13 = objc_msgSend(v12, "statusCode");
        v14 = a1;
        v15 = 1;
      }
      objc_msgSend(v14, "_payloadUploadFailureWithType:code:batchInfos:", v15, v13, v8);

      goto LABEL_16;
    }
    v9 = APLogForCategory(13);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Payload transmission timed out.", v20, 2u);
    }

  }
LABEL_16:

}

void sub_1000311CC(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  uint64_t v18;
  NSObject *v19;
  APBatchesCounter *v20;
  int64_t v21;
  void *v22;
  NSObject *v23;
  id v24;
  _QWORD block[5];
  id v26;
  id v27;
  double v28;
  int64_t v29;
  uint8_t buf[16];

  v11 = a2;
  v12 = a3;
  v13 = a5;
  v14 = a6;
  if (a1 && a4 >= 1 && a4 != 8501)
  {
    if (v11)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      objc_msgSend(v15, "timeIntervalSinceDate:", v11);
      v17 = v16;

    }
    else
    {
      v18 = APLogForCategory(13);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "batchCreatedDate is missing.", buf, 2u);
      }

      v17 = -1.0;
    }
    v20 = -[APBatchesCounter initWithFileManager:startDirectory:]([APBatchesCounter alloc], "initWithFileManager:startDirectory:", v13, v14);
    v21 = -[APBatchesCounter count](v20, "count");

    v22 = (void *)os_transaction_create("com.apple.ap.observabilitymonitor");
    v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002DDB8;
    block[3] = &unk_100215A80;
    block[4] = a1;
    v28 = v17;
    v29 = v21;
    v26 = v12;
    v27 = v22;
    v24 = v22;
    dispatch_async(v23, block);

  }
}

void sub_10003265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100032B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_100033170(void *a1)
{
  void *v2;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "backoffTimer"));

    if (v2)
    {
      objc_msgSend(a1, "_backoffTimerReset");
      _objc_msgSend(a1, "_continueProcessing");
    }
  }
}

void sub_100033B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_100035BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100036440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000383D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000389B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100038BBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100038BE0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  BOOL v9;
  id v11;

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v11 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "addedToDirectoryDateForFileAtPath:error:", v5, &v11));

  v8 = v11;
  if (v8)
    v9 = 1;
  else
    v9 = v7 == 0;
  if (v9)
    APSimulateCrashNoKillProcess(5, CFSTR("NSURLAddedToDirectoryDateKey is not supported: %@. Path: %@"));

  return v7;
}

void sub_1000391F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100039414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100039848(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10003985C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  APTimeSpentStoreDatabase *v4;
  void *v5;
  APTimeSpentStoreDatabase *v6;
  double v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id to;
  uint8_t buf[16];

  v2 = APLogForCategory(48);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Starting Time Spent Report activity.", buf, 2u);
  }

  objc_copyWeak(&to, (id *)(a1 + 48));
  v4 = [APTimeSpentStoreDatabase alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[APDatabaseManager mainDatabase](APDatabaseManager, "mainDatabase"));
  v6 = -[APTimeSpentStoreDatabase initWithDatabase:](v4, "initWithDatabase:", v5);

  objc_msgSend(*(id *)(a1 + 32), "retrieveTimeSpentTTLConfigValue");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", -v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[APTimeSpentStoreDatabase retrieveTimeSpentEntriesOlderThan:](v6, "retrieveTimeSpentEntriesOlderThan:", v8));
  v10 = objc_msgSend(v9, "mutableCopy");

  v11 = objc_autoreleasePoolPush();
  v12 = objc_loadWeakRetained(&to);
  objc_msgSend(v12, "makeTimeSpentRequests:activity:", v10, *(_QWORD *)(a1 + 40));

  objc_autoreleasePoolPop(v11);
  objc_destroyWeak(&to);
}

void sub_10003999C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100039F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100039F80(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  id WeakRetained;
  int v10;
  id v11;

  v5 = a3;
  if ((a2 & 1) == 0)
  {
    v6 = APLogForCategory(48);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = 138543362;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Time Spent Metric Request failed for some reason, keep content with identifier %{public}@ in database to retry later.", (uint8_t *)&v10, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "removeLastObject");
  v8 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "makeTimeSpentRequests:activity:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  objc_autoreleasePoolPop(v8);
}

uint64_t sub_10003A310(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setTimeSpentLegacyInterface:", 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

void sub_10003A4A4(id a1)
{
  void *v1;
  PromotedContentDaemon *v2;
  void *v3;

  v1 = objc_autoreleasePoolPush();
  v2 = objc_alloc_init(PromotedContentDaemon);
  v3 = (void *)qword_100268740;
  qword_100268740 = (uint64_t)v2;

  objc_autoreleasePoolPop(v1);
}

void sub_10003B614()
{
  char v0[1024];

  bzero(v0, 0x400uLL);
  if ((!_set_user_dir_suffix("com.apple.ap.promotedcontentd") || !confstr(65537, v0, 0x400uLL))
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10017BA58();
  }
}

void start()
{
  dispatch_queue_global_t global_queue;
  NSObject *v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  void *v13;

  signal(15, (void (__cdecl *)(int))1);
  global_queue = dispatch_get_global_queue(21, 0);
  v1 = objc_claimAutoreleasedReturnValue(global_queue);
  v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, v1);
  dispatch_source_set_event_handler(v2, &stru_10020E038);
  dispatch_activate(v2);
  v3 = objc_autoreleasePoolPush();
  v4 = APLogForCategory(26);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Starting up the daemon.", (uint8_t *)&v12, 2u);
  }

  sub_10003B614();
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[PromotedContentDaemon sharedInstance](PromotedContentDaemon, "sharedInstance"));
  v7 = APLogForCategory(26);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "status"));
    v12 = 138412290;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Daemon Status:\n%@", (uint8_t *)&v12, 0xCu);

  }
  v10 = APLogForCategory(26);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Initiating main queue.", (uint8_t *)&v12, 2u);
  }

  objc_autoreleasePoolPop(v3);
  dispatch_main();
}

void sub_10003B830(id a1)
{
  exit(0);
}

void sub_10003B840(id a1, int64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int64_t v6;

  v3 = APLogForCategory(42);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = 134217984;
    v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Finished pcd_default pool manager setup with state %ld", (uint8_t *)&v5, 0xCu);
  }

}

void sub_10003BB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003BB54(uint64_t a1, int a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;

  v5 = a3;
  if (v5)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "configurationStorage"));
    objc_msgSend(v7, "updateConfigurationSystemWithData:", v5);

  }
  v8 = APLogForCategory(8);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = CFSTR("Error");
    if (a2)
      v10 = CFSTR("Success");
    v11 = 138412290;
    v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Config System Request after reset completed with: %@.", (uint8_t *)&v11, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "finished");
}

void sub_10003C2A4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id WeakRetained;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint8_t *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t *v21;
  uint8_t buf[8];
  uint8_t *v23;
  uint64_t v24;
  char v25;

  v3 = a2;
  v4 = APLogForCategory(8);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Config System Background Task Started.", buf, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = objc_alloc((Class)APConfigurationRequester);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_storefront"));
  v9 = objc_msgSend(v7, "initWithStorefront:", v8);

  *(_QWORD *)buf = 0;
  v23 = buf;
  v24 = 0x2020000000;
  v25 = 0;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10003C470;
  v18[3] = &unk_10020E0D8;
  v21 = buf;
  v10 = v9;
  v19 = v10;
  v11 = WeakRetained;
  v20 = v11;
  objc_msgSend(v3, "setExpirationHandler:", v18);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10003C514;
  v14[3] = &unk_10020E100;
  v17 = buf;
  v12 = v11;
  v15 = v12;
  v13 = v3;
  v16 = v13;
  objc_msgSend(v10, "requestConfigurationWithCompletionHandler:", v14);

  _Block_object_dispose(buf, 8);
}

void sub_10003C458(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10003C470(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = APLogForCategory(8);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Config System Background Task Asked to Expire.", v5, 2u);
  }

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  objc_msgSend(*(id *)(a1 + 32), "cancelRequest");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configurationStorage"));
  objc_msgSend(v4, "cancelConfigurationUpdate");

}

void sub_10003C514(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  int v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  unsigned int v11;
  __CFString *v12;
  __CFString *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  const __CFString *v18;
  id v19;
  uint8_t buf[4];
  const __CFString *v21;

  v5 = a3;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v5 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurationStorage"));
    a2 = objc_msgSend(v7, "updateConfigurationSystemWithData:", v5);

    v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  }
  if (v6)
  {
    v8 = APLogForCategory(8);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Config System Background Task trying to retry after.", buf, 2u);
    }

    v10 = *(void **)(a1 + 40);
    v19 = 0;
    v11 = objc_msgSend(v10, "setTaskExpiredWithRetryAfter:error:", &v19, 3000.0);
    v12 = (__CFString *)v19;
    v13 = v12;
    if (!v11 || v12)
    {
      v14 = APLogForCategory(8);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v21 = v13;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to retry after config system task, error: %{public}@", buf, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 40), "setTaskCompleted");
    }

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setTaskCompleted");
  }
  v16 = APLogForCategory(8);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = CFSTR("Error");
    if (a2)
      v18 = CFSTR("Success");
    *(_DWORD *)buf = 138412290;
    v21 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Config System Background Task Completed With: %@.", buf, 0xCu);
  }

}

void sub_10003CB5C(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;

  v4 = APLogForCategory(33);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = CFSTR("completed");
    if (a2)
      v6 = CFSTR("cancelled");
    v7 = 138543362;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Cache GC activity %{public}@.", (uint8_t *)&v7, 0xCu);
  }

  if ((a2 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "finished");
}

id sub_10003CE24()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GlobalState();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for GlobalState()
{
  return objc_opt_self(APGlobalState);
}

uint64_t sub_10003CE78(void *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  type metadata accessor for ObservabilityManager();
  v10[3] = type metadata accessor for ObservabilityXPCTimerActivity();
  v10[4] = &off_10020E1F8;
  v10[0] = a1;
  v4 = a1;
  v5 = static ObservabilityManager.create(with:database:)((uint64_t)v10, a2);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v10);
  v6 = qword_10026D180;
  qword_10026D180 = v5;
  swift_release(v6);
  type metadata accessor for WorkCoordinator(0);
  v7 = dispatch thunk of static WorkCoordinator.create(database:)(a2);
  v8 = qword_10026D188;
  qword_10026D188 = v7;
  return swift_release(v8);
}

uint64_t sub_10003CF24()
{
  uint64_t result;
  uint64_t v1;

  result = sub_10003CF44();
  qword_100262B70 = result;
  *(_QWORD *)algn_100262B78 = v1;
  return result;
}

uint64_t sub_10003CF44()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = (void *)objc_opt_self(APConfigurationMediator);
  sub_10003E180(0, (unint64_t *)&qword_100262C20, APECObservabilityConfig_ptr);
  v1 = objc_msgSend(v0, "configurationForClass:", swift_getObjCClassFromMetadata());
  v2 = objc_opt_self(APECObservabilityConfig);
  v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "xpcTimerGracePeriod");
    if (v5)
    {
      v6 = v5;
      v7 = (uint64_t)objc_msgSend(v5, "longLongValue");

    }
    else
    {
      v7 = 360;
    }
    v8 = objc_msgSend(v4, "xpcTimerPriority");
    if (v8)
    {
      v10 = v8;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);
      v13 = v12;

      if (v11 == 0x616E65746E69616DLL && v13 == 0xEB0000000065636ELL)
      {
        swift_bridgeObjectRelease(0xEB0000000065636ELL);
      }
      else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616E65746E69616DLL, 0xEB0000000065636ELL, v11, v13, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v13);
      }
      else if (v11 == 0x7974696C697475 && v13 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease(0xE700000000000000);
      }
      else
      {
        _stringCompareWithSmolCheck(_:_:expecting:)(0x7974696C697475, 0xE700000000000000, v11, v13, 0);
        swift_bridgeObjectRelease(v13);
      }
    }
  }
  else
  {
    v7 = 360;
  }
  swift_unknownObjectRelease(v1);
  return v7;
}

void sub_10003D154(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;

  v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "init");
  v3 = qword_100262B40;
  v4 = v2;
  if (v3 != -1)
    swift_once(&qword_100262B40, sub_10003CF24);
  v6 = qword_100262B70;
  v5 = *(_QWORD *)algn_100262B78;
  v7 = Date.timeIntervalSinceNow.getter();
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v7 < 9.22337204e18)
  {
    objc_msgSend(v4, "setDelay:", (uint64_t)v7);
    objc_msgSend(v4, "setRequiresNetworkConnectivity:", 0);
    objc_msgSend(v4, "setIsRepeating:", 0);
    objc_msgSend(v4, "setIsCPUIntensive:", 0);
    objc_msgSend(v4, "setRequireBuddyComplete:", 1);
    objc_msgSend(v4, "setAllowBattery:", 1);
    objc_msgSend(v4, "setRequireSleep:", 0);
    objc_msgSend(v4, "setGracePeriod:", v6);
    objc_msgSend(v4, "setPriority:", v5);
    objc_msgSend(v4, "setRequireClassCData:", 1);
    Date.timeIntervalSince1970.getter(objc_msgSend(v4, "setIsDiskIntensive:", 0));
    objc_msgSend(v4, "setScheduledTime:");

    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t (*sub_10003D328(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16promotedcontentd29ObservabilityXPCTimerActivity_apXpcActivityDelegate);
  v4 = OBJC_IVAR____TtC16promotedcontentd37ObservabilityXPCTimerActivityDelegate_delegate;
  a1[2] = v3;
  a1[3] = v4;
  v5 = v3 + v4;
  Strong = swift_unknownObjectWeakLoadStrong(v3 + v4);
  v7 = *(_QWORD *)(v5 + 8);
  *a1 = Strong;
  a1[1] = v7;
  return sub_10003D37C;
}

uint64_t sub_10003D37C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[2] + a1[3];
  v2 = *a1;
  *(_QWORD *)(v1 + 8) = a1[1];
  swift_unknownObjectWeakAssign(v1, v2);
  return swift_unknownObjectRelease(v2);
}

id sub_10003D4A8(uint64_t a1)
{
  return sub_10003DF10(a1, type metadata accessor for ObservabilityXPCTimerActivity);
}

uint64_t type metadata accessor for ObservabilityXPCTimerActivity()
{
  return objc_opt_self(_TtC16promotedcontentd29ObservabilityXPCTimerActivity);
}

uint64_t sub_10003D50C()
{
  _QWORD *v0;

  return swift_unknownObjectWeakLoadStrong(*(_QWORD *)(*v0 + OBJC_IVAR____TtC16promotedcontentd29ObservabilityXPCTimerActivity_apXpcActivityDelegate)+ OBJC_IVAR____TtC16promotedcontentd37ObservabilityXPCTimerActivityDelegate_delegate);
}

uint64_t sub_10003D54C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(*v2 + OBJC_IVAR____TtC16promotedcontentd29ObservabilityXPCTimerActivity_apXpcActivityDelegate)
     + OBJC_IVAR____TtC16promotedcontentd37ObservabilityXPCTimerActivityDelegate_delegate;
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign(v4, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_10003D594(uint64_t **a1))(_QWORD *a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_10003D328(v2);
  return sub_10003D5DC;
}

void sub_10003D5DC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

id sub_10003D608(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v3 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *v1;
  v7 = *(_QWORD *)(*v1 + OBJC_IVAR____TtC16promotedcontentd29ObservabilityXPCTimerActivity_apXpcActivityDelegate);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v5, a1, v8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  v10 = v7 + OBJC_IVAR____TtC16promotedcontentd37ObservabilityXPCTimerActivityDelegate_currentScheduledTime;
  swift_beginAccess(v7 + OBJC_IVAR____TtC16promotedcontentd37ObservabilityXPCTimerActivityDelegate_currentScheduledTime, v13, 33, 0);
  sub_10003E0A4((uint64_t)v5, v10);
  swift_endAccess(v13);
  return objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC16promotedcontentd29ObservabilityXPCTimerActivity_apXpcActivity), "schedule");
}

uint64_t sub_10003D7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v1 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v1);
  v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v16[-v9 - 8];
  v11 = v0 + OBJC_IVAR____TtC16promotedcontentd37ObservabilityXPCTimerActivityDelegate_currentScheduledTime;
  swift_beginAccess(v11, v16, 0, 0);
  sub_10000CE28(v11, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10000D51C((uint64_t)v3);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v3, v4);
    sub_10003E180(0, &qword_100262C18, APXPCActivityCriteria_ptr);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    sub_10003D154((uint64_t)v8);
    v12 = v13;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  return v12;
}

uint64_t sub_10003D93C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  void (*v10)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  id v11;
  uint64_t v12;
  char v13;
  char v14;
  _BYTE v16[24];

  v3 = v1 + OBJC_IVAR____TtC16promotedcontentd37ObservabilityXPCTimerActivityDelegate_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC16promotedcontentd37ObservabilityXPCTimerActivityDelegate_delegate);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(_QWORD *)(v3 + 8);
    v7 = swift_allocObject(&unk_10020E230, 17, 7);
    *(_BYTE *)(v7 + 16) = 0;
    ObjectType = swift_getObjectType(v5);
    v9 = swift_allocObject(&unk_10020E258, 32, 7);
    *(_QWORD *)(v9 + 16) = a1;
    *(_QWORD *)(v9 + 24) = v7;
    v10 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v6 + 8);
    v11 = a1;
    swift_retain(v7, v12);
    v10(sub_10003E128, v9, ObjectType, v6);
    swift_release(v9);
    swift_unknownObjectRelease(v5);
    swift_beginAccess(v7 + 16, v16, 0, 0);
    v13 = *(_BYTE *)(v7 + 16);
    swift_release(v7);
    v14 = v13 ^ 1;
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t sub_10003DC80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  const char *v11;
  void *v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v22;

  v3 = sub_100008A18(&qword_100262C10);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v22 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  if (a1)
  {
    v11 = (const char *)AP_XPC_ACTIVITY_SCHEDULED_TIME;
    v12 = (void *)swift_unknownObjectRetain(a1);
    v14 = xpc_dictionary_get_double(v12, v11);
    v15 = (~*(_QWORD *)&v14 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v14 & 0xFFFFFFFFFFFFFLL) == 0;
    if (v15 && v14 > 0.0)
    {
      Date.init(timeIntervalSince1970:)(v13, v14);
      swift_unknownObjectRelease(a1);
      sub_10000D51C((uint64_t)v8);
      v10(v6, 0, 1, v9);
      sub_10000D55C((uint64_t)v6, (uint64_t)v8);
    }
    else
    {
      swift_unknownObjectRelease(a1);
    }
  }
  v16 = v1 + OBJC_IVAR____TtC16promotedcontentd37ObservabilityXPCTimerActivityDelegate_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC16promotedcontentd37ObservabilityXPCTimerActivityDelegate_delegate);
  if (Strong)
  {
    v18 = Strong;
    v19 = *(_QWORD *)(v16 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v8, ObjectType, v19);
    swift_unknownObjectRelease(v18);
  }
  sub_10000D51C((uint64_t)v8);
  return 0;
}

id sub_10003DF00()
{
  return sub_10003DF10(0, (uint64_t (*)(void))type metadata accessor for ObservabilityXPCTimerActivityDelegate);
}

id sub_10003DF10(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_10003DF8C()
{
  return type metadata accessor for ObservabilityXPCTimerActivityDelegate(0);
}

uint64_t type metadata accessor for ObservabilityXPCTimerActivityDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_100262BF8;
  if (!qword_100262BF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ObservabilityXPCTimerActivityDelegate);
  return result;
}

void sub_10003DFD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1001A7CE8;
  v4[1] = &unk_1001A7D00;
  sub_10003E050(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_10003E050(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100262C08)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100262C08);
  }
}

uint64_t sub_10003E0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100262C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E0EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10003E0FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003E128()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v1 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  objc_msgSend(v1, "finished");
  result = swift_beginAccess(v2 + 16, v4, 1, 0);
  *(_BYTE *)(v2 + 16) = 1;
  return result;
}

uint64_t sub_10003E180(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10003E1B8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003E1DC(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_10003E1F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003E214()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_10003E238(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_10003E25C(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v17;
  mach_port_t reply_port;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  mach_msg_header_t msg;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  NDR_record_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  int v50;

  v30 = 1;
  v31 = a4;
  v32 = 16777472;
  v33 = a5;
  v34 = NDR_record;
  v17 = *a3;
  v35 = a2;
  v36 = v17;
  v37 = a5;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B000000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            v21 = v33;
            if (v33 == v47)
            {
              v20 = 0;
              v22 = *(_DWORD *)&v34.mig_vers;
              *a3 = v38;
              v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port)
              v20 = 4294966996;
            else
              v20 = HIDWORD(v31);
          }
        }
        else
        {
          v20 = 4294966996;
        }
      }
      else
      {
        v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t sub_10003E4B4(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  mach_port_t reply_port;
  uint64_t v9;
  uint64_t v10;
  mach_msg_header_t msg;
  NDR_record_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = a3[5];
  v19 = a3[4];
  v20 = v4;
  v5 = a3[7];
  v21 = a3[6];
  v22 = v5;
  v6 = a3[1];
  v15 = *a3;
  v16 = v6;
  v7 = a3[3];
  v17 = a3[2];
  v13 = NDR_record;
  v14 = a2;
  v18 = v7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B100000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    v10 = 4294966995;
    goto LABEL_17;
  }
  v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0)
    goto LABEL_17;
  if (msg.msgh_size != 36)
    goto LABEL_17;
  if (msg.msgh_remote_port)
    goto LABEL_17;
  v10 = v14;
  if (v14)
    goto LABEL_17;
  return v10;
}

uint64_t sub_10003E640(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, _QWORD *a9, _DWORD *a10)
{
  mach_port_t reply_port;
  uint64_t v13;
  uint64_t v14;
  int v15;
  mach_msg_header_t msg;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  NDR_record_t v22;
  _BYTE v23[28];
  int v24;

  v18 = 1;
  v19 = a6;
  v20 = 16777472;
  v21 = a7;
  v22 = NDR_record;
  *(_DWORD *)v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  v24 = a7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B200000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port)
              v14 = 4294966996;
            else
              v14 = HIDWORD(v19);
          }
        }
        else
        {
          v14 = 4294966996;
        }
      }
      else
      {
        v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t sub_10003E82C(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v15;
  int v16;
  mach_msg_header_t msg;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B300000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            v12 = v18;
            if (!v18)
            {
              v15 = v20;
              *a2 = v19;
              *a3 = v15;
              v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port)
            v13 = 1;
          else
            v13 = v18 == 0;
          if (v13)
            v12 = 4294966996;
          else
            v12 = v18;
          goto LABEL_23;
        }
      }
      v12 = 4294966996;
    }
    else
    {
      v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

void sub_10003E9A4(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0xCDF342D76DC35A3);
  v4 = v2 - 1346595302;
  v3 = v2 - 1346595302 < 0;
  v5 = 1346595302 - v2;
  if (!v3)
    v5 = v4;
  v1 = *(_DWORD *)a1 - 235795823 * ((a1 + 1658036232 - 2 * (a1 & 0x62D3A008)) ^ 0xF67EE951) + 155;
  __asm { BR              X10 }
}

uint64_t sub_10003EAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v10
                                                                       + 8
                                                                       * (((*(_DWORD *)(*v9 + 4 * v12) != v11 + 155 + v8)
                                                                         * a8) ^ v11))
                                                           - 4))(a1, a2, (v11 - 344));
}

void sub_10003EB14()
{
  JUMPOUT(0x10003EAA0);
}

uint64_t sub_10003EB20(uint64_t result)
{
  *(_DWORD *)(result + 4) = 1494468667;
  return result;
}

void sub_10003EBD0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1178560073 * ((2 * (a1 & 0x878F6F35) - a1 + 2020643018) ^ 0xC2E4E8A8));
  __asm { BR              X10 }
}

uint64_t sub_10003ECB4@<X0>(uint64_t a1@<X8>, uint64_t a2, unsigned int a3, int a4, unint64_t *a5, uint64_t a6, unsigned int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v10 = 3804331 * ((&a3 & 0x9FDC63B0 | ~(&a3 | 0x9FDC63B0)) ^ 0x1EF6B9B9);
  a7 = v10 - 1298513430;
  a5 = &STACK[0x8DE5192BDC53166];
  a6 = v8;
  a3 = v10 + 1746339944;
  a4 = v10 + v7 - 227;
  v11 = ((uint64_t (*)(unsigned int *))(*(_QWORD *)(a1 + 8 * (v7 ^ 0x179)) - 4))(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((1204 * (*(_DWORD *)(v8 - 0x335F4D7B17DD4DFFLL) == -1262737048)) ^ v7))
                                          - (v7 - 111)
                                          + 260))(v11);
}

void sub_10003ED90(_DWORD *a1@<X8>)
{
  _DWORD *v1;
  int v2;
  char v3;
  unsigned int v4;
  _BYTE *v5;

  v4 = v1[1] - v2;
  *v5 = (HIBYTE(v4) ^ 2) + (~(v4 >> 23) | 0x8D) + 58;
  v5[1] = ((v4 >> (v3 - 107)) ^ 0x62) - 2 * (((v4 >> (v3 - 107)) ^ 0x62) & 0x3D ^ (v4 >> (v3 - 107)) & 4) + 57;
  v5[2] = (BYTE1(v4) ^ 0xA9) + ~(2 * ((BYTE1(v4) ^ 0xA9) & 0x3F ^ BYTE1(v4) & 6)) + 58;
  v5[3] = v4 ^ 0xB3;
  *v1 = *a1;
}

void sub_10003EE58(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 1178560073 * (a1 ^ 0xBA947862);
  __asm { BR              X9 }
}

uint64_t sub_10003EF18@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)(((((5 * (a1 ^ 0x74E)) ^ 0xFFFFFEAA) + (a1 ^ 0x271)) * (v1 != 0)) ^ a1))
                            - 4))();
}

uint64_t sub_10003EF68()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _BOOL4 v7;

  v5 = ((v1 - 1024233904) & 0x3D0C8D6F) + (*(_DWORD *)(v2 + 16) ^ v0) - 407875694;
  v7 = (*(_DWORD *)(v3 - 0x335F4D7B17DD4E03) & (v1 - 1344)) != 0 || v5 > 0xFFFFFFBE;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((35 * v7) ^ v1)) - 12))();
}

uint64_t sub_10003EFF0@<X0>(uint64_t (*a1)(unsigned int *)@<X8>, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v12 = 3804331 * ((2 * (&a3 & 0x542DBB8) - &a3 + 2059215940) ^ 0x46801B2);
  a7 = v12 - 1304520646;
  a5 = v7;
  a6 = v8;
  a3 = v12 + v10 + 1338464568;
  a4 = v12 + v11 - 105;
  v13 = a1(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((7
                                                        * (*(_DWORD *)(v8 - 0x335F4D7B17DD4DFFLL) != ((v11 + 1324363462) ^ 0xFA4C06AF))) ^ v11))
                                          - 8))(v13);
}

uint64_t sub_10003F0B8()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;

  v3 = v1 - (((v2 & 0xB10FD13E) + 165319508) & (2 * v1 + 257991080)) - 325215487;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (int)((960
                                               * (((2 * v3) & 0x74EBBDBE ^ 0xCA941A)
                                                + (((v2 & 0xB10FD13E) + 1191) ^ 0xBE98915F ^ v3)
                                                + 2109679608 != 942999255)) ^ v2 & 0xB10FD13E))
                            - 8))();
}

uint64_t sub_10003F154()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((733 * (v2 ^ 0x5AF)) ^ 0x5AD) * ((v1 + v0 + 1166680353) < 8)) ^ v2))
                            - ((v2 - 2064664018) & 0x7B1043EE ^ 0x3C2)))();
}

uint64_t sub_10003F1CC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((((a2 - 496) ^ 0xFC) * ((unint64_t)(v3 - v2) > 0x1F)) ^ a2))
                            - 8))();
}

uint64_t sub_10003F1F8(int a1)
{
  unsigned int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((v1 < ((234 * (a1 ^ 0x3CE)) ^ 0x388u))
                                          * (((a1 ^ 0xB8) - 386204927) & 0x170505BE ^ 0x4D8)) ^ a1 ^ 0xB8))
                            - 4))();
}

uint64_t sub_10003F258(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;

  v9.i64[0] = 0x7272727272727272;
  v9.i64[1] = 0x7272727272727272;
  v10.i64[0] = 0x3939393939393939;
  v10.i64[1] = 0x3939393939393939;
  v11 = (v6 + v4);
  v12 = vrev64q_s8(*(int8x16_t *)(v7 + v11 - 15));
  v13 = vextq_s8(v12, v12, 8uLL);
  v14 = vrev64q_s8(*(int8x16_t *)(v7 + v11 - 31));
  v15 = vextq_s8(v14, v14, 8uLL);
  v16 = v3 + v11;
  v17 = vrev64q_s8(vaddq_s8(vsubq_s8(v13, vandq_s8(vaddq_s8(v13, v13), v9)), v10));
  *(int8x16_t *)(v16 - 15) = vextq_s8(v17, v17, 8uLL);
  v18 = vrev64q_s8(vaddq_s8(vsubq_s8(v15, vandq_s8(vaddq_s8(v15, v15), v9)), v10));
  *(int8x16_t *)(v16 - 31) = vextq_s8(v18, v18, 8uLL);
  LODWORD(v16) = ((67 * (a3 ^ 0x42B)) ^ 0x6AB) == (v5 & 0xFFFFFFE0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((((_DWORD)v16 << 9) | ((_DWORD)v16 << 10)) ^ (a3 - 170))) - 8))();
}

void sub_10003F30C()
{
  _DWORD *v0;

  *v0 = 1262711473;
}

uint64_t sub_10003F7F4(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v1 = 1374699841 * ((((2 * a1) | 0x4FD35BAC) - a1 + 1477857834) ^ 0xCA1DB5DF);
  v2 = *(_DWORD *)a1 ^ v1;
  v3 = *(_DWORD *)(a1 + 16) + v1;
  if (v3 < 0)
    v3 = -v3;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0xCDF342D76DC35A3);
  v6 = v4 - 1346595302;
  v5 = v4 - 1346595302 < 0;
  v7 = 1346595302 - v4;
  if (!v5)
    v7 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_100212870 + (v2 ^ 0x23F))
                                        + 8 * ((1748 * (v3 >> 5 < v7)) ^ v2)
                                        - 4)
                            - 8))();
}

uint64_t sub_10003F8AC@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v4 = ((*(_DWORD *)(*(_QWORD *)(v2 - 0xCDF342D76DC359FLL) + 4 * v3) ^ 0xDB9153E2) >> a2) ^ 0xBFAE616;
  v5 = (-2 - ((~(v4 & 0x94ABFE11) | 0x8DDEB2C7) + (v4 & 0x848AB201 | 0x72214D38))) ^ v4 & 0x94ABFE10;
  *(_DWORD *)(result + 4) = ((v5 & 0x46BEB26 ^ 0xBAB21) + (v5 & 0xFB9414D9) - 1) ^ 0x8D258138;
  return result;
}

uint64_t sub_10003F95C(uint64_t result)
{
  *(_DWORD *)(result + 4) = 15767775;
  return result;
}

void sub_10003F96C(uint64_t a1)
{
  int v1;

  v1 = (*(_DWORD *)(a1 + 16) ^ (628203409 * ((1303688841 - (a1 | 0x4DB4B689) + (a1 | 0xB24B4976)) ^ 0x30C34545))) + 769;
  __asm { BR              X6 }
}

uint64_t sub_10003FB68(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, unint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (v8 ^ ((a8 == 31) * a5))) - (((v8 ^ a3) + 1430) ^ a6)))();
}

uint64_t sub_10003FB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;

  *(_DWORD *)(a9 - 0x139154EEB4327E0) = -652702494 - v14;
  v20 = 1224239923 * ((((v18 - 136) | 0xAB3AC3) - (v18 - 136) + ((v18 - 136) & 0xFF54C538)) ^ 0xF218C714);
  *(_QWORD *)(v18 - 128) = v15;
  *(_DWORD *)(v18 - 136) = v20 ^ 0xCE6A6B3;
  *(_DWORD *)(v18 - 120) = v20 + v17 + 27;
  sub_10006C5C0((_DWORD *)(v18 - 136));
  v21 = 1759421093 * (((v18 - 136) & 0x1107F363 | ~((v18 - 136) | 0x1107F363)) ^ 0x5D85BCC8);
  *(_DWORD *)(v18 - 136) = ((32 * v19) ^ 0xFBFFEB6F) - v21 + ((v19 << ((v17 ^ 0x8D) - 2)) & 0xF7FFD6C0) + 1323171775;
  *(_DWORD *)(v18 - 120) = v17 - v21 + 1534;
  *(_QWORD *)(v18 - 128) = v15;
  sub_10007D0B8((_DWORD *)(v18 - 136));
  *(_DWORD *)(v18 - 120) = v17
                         + 1374699841 * ((2 * ((v18 - 136) & 0xB04ADC0) - (v18 - 136) + 1962627641) ^ 0x190F4A30)
                         + 1207;
  *(_QWORD *)(v18 - 136) = a14;
  *(_QWORD *)(v18 - 128) = &STACK[0xCDF342D76DC35D7];
  sub_1000717A0(v18 - 136);
  *(_QWORD *)(v18 - 128) = a14;
  *(_QWORD *)(v18 - 112) = v15;
  *(_DWORD *)(v18 - 120) = v17 + 1178560073 * ((v18 + 1698837839 - 2 * ((v18 - 136) & 0x654235D7)) ^ 0xDFD64DB5) + 139;
  v22 = ((uint64_t (*)(uint64_t))((char *)*(&off_100212870 + (v17 ^ 0x18C)) - 4))(v18 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v16
                                                      + 8
                                                      * ((39
                                                        * (*(_DWORD *)(v18 - 136) == 76 * (v17 ^ 0x18D) + 1645153176)) ^ v17))
                                          - 12))(v22);
}

uint64_t sub_10003FDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)(v16 - 120) = v15
                         + 1374699841 * ((((v16 - 136) | 0x312B6D0F) - ((v16 - 136) & 0x312B6D0F)) ^ 0x5CDF7506)
                         + 404;
  *(_QWORD *)(v16 - 136) = v13;
  *(_QWORD *)(v16 - 128) = a13;
  v17 = sub_1000717A0(v16 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v14
                                                      + 8
                                                      * (((a10 >= ((v15 - 1815360778) & 0x6C34347B ^ 0x41B))
                                                        * (v15 - 751)) ^ v15))
                                          - 4))(v17);
}

uint64_t sub_10003FE90@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((((((2 * a1) ^ 0x4313C7B0)
                                             + v4
                                             - 2 * (((2 * a1) ^ 0x4313C7B0) & 0x2189E3DE ^ (2 * a1) & 6)) ^ v4) > v1)
                                          * (v2 - 706)) ^ v2))
                            - 4))();
}

uint64_t sub_10003FEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  *(_QWORD *)(v19 - 136) = a14;
  *(_QWORD *)(v19 - 128) = v17;
  *(_DWORD *)(v19 - 120) = v14 - 247 + 1374699841 * ((v19 - 136) ^ 0x6DF41809) + 546;
  sub_1000717A0(v19 - 136);
  v20 = 1759421093 * ((((v19 - 136) | 0xEC7A100B) - ((v19 - 136) & 0xEC7A100B)) ^ 0x5F07A05F);
  *(_DWORD *)(v19 - 136) = 1256057647 - v20;
  *(_QWORD *)(v19 - 128) = v18;
  *(_DWORD *)(v19 - 120) = v14 - 247 - v20 + 873;
  sub_10007D0B8((_DWORD *)(v19 - 136));
  *(_QWORD *)(v19 - 128) = a14;
  *(_DWORD *)(v19 - 120) = v14
                         - 247
                         + 1178560073 * (((~(v19 - 136) & 0xBE04A698) - (~(v19 - 136) | 0xBE04A699)) ^ 0x490DEFB)
                         - 522;
  *(_QWORD *)(v19 - 112) = v18;
  v21 = v15(v19 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v16
                                                      + 8
                                                      * (((*(_DWORD *)(v19 - 136) == 1645153784)
                                                        * ((((v14 - 984) | 0x2C0) - 120) ^ ((v14 - 1039) | 0x299))) | (v14 - 1201)))
                                          - 12))(v21);
}

uint64_t sub_1000402E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  uint64_t v11;
  int v12;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11
                                                                                 + 8
                                                                                 * ((7
                                                                                   * (((v12 - 1845666973) & 0x6E02A51B)
                                                                                    - 817429499
                                                                                    + (a11 ^ 0x30FCF7FF)
                                                                                    - 4456480
                                                                                    + ((((v12 - 825) | 0x11) + 1643769739) & (2 * a11)) < 0x7FFFFFFE)) ^ v12))
                                                                     - 12))(a1, a2, a3, a4);
}

void sub_100040C78(uint64_t a1)
{
  int v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v1 = *(_DWORD *)(a1 + 16) - 1374699841 * ((a1 + 2125213654 - 2 * (a1 & 0x7EAC2FD6)) ^ 0x135837DF);
  v2 = *(unint64_t **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unint64_t **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(v3 - 0x139154EEB4327E8);
  v8 = &STACK[0xCDF342D76DC35D7];
  v9 = v5;
  v10 = v1
      + 1224239923 * ((-1033333514 - (&v6 | 0xC26894F6) + (&v6 | 0x3D976B09)) ^ 0xCF2496DE)
      - 147;
  v6 = v3;
  v7 = v4;
  ((void (*)(uint64_t *))((char *)*(&off_100212870 + v1 - 391) - 12))(&v6);
  v6 = *(_QWORD *)(v3 - 0x139154EEB4327F0);
  v7 = &STACK[0xCDF342D76DC35C7];
  LODWORD(v8) = v1
              + 1374699841 * ((2 * (&v6 & 0x66A5C608) - &v6 + 425343479) ^ 0x74AE21FE)
              + 1177;
  sub_1000717A0((uint64_t)&v6);
  v7 = v2;
  LODWORD(v6) = v1
              + 235795823 * ((2 * (&v6 & 0x225918A0) - &v6 + 1571219295) ^ 0xC90BAE06)
              + 494;
  sub_10003E9A4((uint64_t)&v6);
  __asm { BR              X8 }
}

uint64_t sub_100040EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t), uint64_t a12)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)(v20 - 112) = v17
                         + 1224239923 * ((~((v20 - 144) | 0x2161387A) + ((v20 - 144) & 0x2161387A)) ^ 0x2C2D3A52)
                         - 1249;
  *(_QWORD *)(v20 - 104) = v16;
  *(_QWORD *)(v20 - 144) = v14;
  *(_QWORD *)(v20 - 136) = a12;
  *(_QWORD *)(v20 - 128) = v16;
  *(_QWORD *)(v20 - 120) = v15;
  v21 = a11(v20 - 144);
  return (*(uint64_t (**)(uint64_t))(v12
                                            + 8
                                            * ((29
                                              * ((((v19 + v18 - 1) < 0x7FFFFFFF) ^ v13) & 1)) ^ v13)))(v21);
}

uint64_t sub_100040F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  *(_DWORD *)(v7 - 144) = (v5 + 322) ^ (1225351577
                                      * ((((v7 - 144) | 0x5A477C3F) - (v7 - 144) + ((v7 - 144) & 0xA5B883C0)) ^ 0x79DDA429));
  *(_QWORD *)(v7 - 120) = v4;
  *(_QWORD *)(v7 - 112) = v2;
  *(_QWORD *)(v7 - 136) = v3;
  *(_QWORD *)(v7 - 128) = v4;
  ((void (*)(uint64_t))((char *)*(&off_100212870 + (v5 ^ 0x5BA)) - 12))(v7 - 144);
  v8 = 1374699841 * ((v7 - 144) ^ 0x6DF41809);
  *(_DWORD *)(v7 - 144) = (v5 - 755) ^ v8;
  *(_DWORD *)(v7 - 128) = -1494468668 - v8 + v6;
  *(_QWORD *)(v7 - 136) = v1;
  v9 = sub_10003F7F4(v7 - 144);
  return (*(uint64_t (**)(uint64_t))(v0
                                            + 8
                                            * ((1009
                                              * (((v5 - 78) ^ (*(_DWORD *)(v7 - 140) == 15767775)) & 1)) ^ v5)))(v9);
}

uint64_t sub_100041034()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((29 * ((((v3 + v2 - 1) < 0x7FFFFFFF) ^ v1) & 1)) ^ v1)))();
}

uint64_t sub_100041070()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = *(_QWORD *)(v8 + 24);
  v6 = 1224239923 * ((((2 * (v4 - 144)) | 0x2E7FBCC4) - (v4 - 144) + 1757421982) ^ 0x658C23B5);
  *(_DWORD *)(v4 - 128) = v6 + v0 - 3;
  *(_DWORD *)(v4 - 144) = v6 ^ 0xCE6A6B3;
  *(_QWORD *)(v4 - 136) = v10;
  sub_10006C5C0((_DWORD *)(v4 - 144));
  *(_QWORD *)(v4 - 104) = v3;
  *(_QWORD *)(v4 - 144) = v1;
  *(_QWORD *)(v4 - 136) = v10;
  *(_DWORD *)(v4 - 112) = v0 + 1224239923 * (((v4 - 144) & 0x45084053 | ~((v4 - 144) | 0x45084053)) ^ 0x4844427B) - 147;
  *(_QWORD *)(v4 - 128) = v3;
  *(_QWORD *)(v4 - 120) = v2;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 128) = v0 + 1374699841 * ((v4 - 144) ^ 0x6DF41809) + 1177;
  *(_QWORD *)(v4 - 144) = v3;
  *(_QWORD *)(v4 - 136) = v5;
  return sub_1000717A0(v4 - 144);
}

uint64_t sub_100041190(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  unsigned __int8 v4;
  char *v5;
  int v6;
  _BYTE v8[8];

  v2 = (unint64_t)&v8[qword_100262EA8 ^ qword_100262D00];
  qword_100262D00 = 1801249171 * v2 - 0x76EA39A97CF9A556;
  qword_100262EA8 = 1801249171 * (v2 ^ 0x8915C65683065AAALL);
  v3 = *(_DWORD *)(a2 + 4);
  v4 = -109 * ((qword_100262EA8 - (-109 * v2 - 86)) ^ 0xAA);
  v5 = (char *)*(&off_100212870 + (v4 ^ byte_1001AB700[byte_1001B6F80[v4] ^ 0x80]) + 6)
     - 4;
  if (v3 == 1747324541)
    __asm { BR              X17 }
  if (v3 == 1747324548)
  {
    v6 = **(unsigned __int8 **)(a2 + 8) - 9;
    __asm { BR              X1 }
  }
  return 4294925278;
}

void sub_100041884(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 + 108757529 * ((2 * (a1 & 0x5EAB9BD4) - (_DWORD)a1 - 1588304853) ^ 0x41C80600);
  __asm { BR              X9 }
}

uint64_t sub_100041940(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v2 + 8 * (((*(_DWORD *)(*(_QWORD *)(a1 + 8) + v4) != v1) * (v3 ^ 0x38B)) ^ v3)))();
}

uint64_t sub_10004196C()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((112
                                          * ((((((67 * (v2 ^ 0x33F)) ^ 0xAFBC96D3) + v0) * (v3 - 1346595302)) & 0x80000000) == 0)) ^ v2 ^ 0x682))
                            - 8))();
}

uint64_t sub_1000419C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v5 = v1;
  v6 = v1;
  v7 = a1;
  v8 = (v3 ^ 0x577) + 1225351577 * (&v5 ^ 0x239AD816) + 871;
  return ((uint64_t (*)(uint64_t *))(*(_QWORD *)(v2 + 8 * ((v3 ^ 0x577) - 56)) - 8))(&v5);
}

void sub_100041AF8(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;

  if (*(_QWORD *)(a1 + 24))
    v2 = *(_QWORD *)(a1 + 8) == 0x37C70005964C0FDDLL;
  else
    v2 = 1;
  v3 = !v2;
  v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * ((2 * (a1 & 0x47DE7202) - a1 - 1205760515) ^ 0x66E73026));
  __asm { BR              X8 }
}

uint64_t sub_100041C0C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  int v6;

  *(_BYTE *)(v3 - 200) = (-85 * ((v3 + 56 - 2 * ((v3 + 56) & 0x31) + 49) ^ 0xC7)) ^ 0x62;
  *(_DWORD *)(v3 - 184) = 3804331 * ((v3 - 200 - 2 * ((v3 - 200) & 0x579C8431) + 1469875249) ^ 0x2949A1C7)
                        + v1
                        - 683
                        + 1384;
  STACK[0x278] = (unint64_t)&STACK[0x2389B50FF9680FE3];
  *(_QWORD *)(v3 - 192) = &STACK[0x2389B50FF9680FE3];
  STACK[0x280] = (unint64_t)&STACK[0x499E23D0EA473A14];
  *(_QWORD *)(v3 - 176) = &STACK[0x499E23D0EA473A14];
  v4 = *(uint64_t (**)(uint64_t))(v2 + 8 * ((v1 - 683) ^ 0x180));
  STACK[0x270] = (unint64_t)v4;
  v5 = v4(v3 - 200);
  v6 = *(_DWORD *)(v3 - 180);
  LODWORD(STACK[0x524]) = v6;
  return (*(uint64_t (**)(uint64_t))(v0
                                            + 8
                                            * ((761
                                              * (v6 == ((v1 - 102385664) & 0x61A47FF ^ 0xB4BC2B1D)
                                                     + ((v1 + 1109773095) & 0xBDDA319F))) ^ (v1 - 683))))(v5);
}

#error "100042484: call analysis failed (funcsize=324)"

uint64_t sub_100042488@<X0>(int a1@<W8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;

  STACK[0x298] = v1;
  v6 = a1 + 512;
  STACK[0x508] = 0;
  v7 = 235795823 * ((((2 * v4) | 0xDFD9FE) - v4 - 7335167) ^ 0x94C2A5A6);
  v8 = STACK[0x290];
  *(_DWORD *)(v5 - 200) = v7 ^ 0x4408697F;
  *(_DWORD *)(v5 - 164) = v6 - v7 - 404;
  *(_QWORD *)(v5 - 192) = 0x203C12B38E249DD0;
  *(_QWORD *)(v5 - 184) = STACK[0x288];
  *(_QWORD *)(v5 - 176) = v8;
  v9 = (uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * (v6 - 1212)) - 12);
  STACK[0x2A0] = (unint64_t)v9;
  v10 = v9(v5 - 200);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * (((4 * (*(_DWORD *)(v5 - 168) == -1262737048)) | (8 * (*(_DWORD *)(v5 - 168) == -1262737048))) ^ v6))
                                          - ((41 * (v6 ^ 0x4E5u) + 32) ^ v6 ^ 0x735u)))(v10);
}

uint64_t sub_100042570()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((118 * ((LODWORD(STACK[0x560]) - 1747326587) < 0xFFFFF7FF)) ^ v1))
                            - (v1 ^ 0x280u)
                            - ((v1 - 168) | 0xC0u)
                            + 1258))();
}

uint64_t sub_1000425BC()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int *v3;
  uint64_t (*v4)(void);

  v3 = (unsigned int *)STACK[0x2E0];
  ((void (*)(_QWORD, unint64_t *, uint64_t))STACK[0x2E8])(*(unsigned int *)STACK[0x2E0], &STACK[0x4A8], 2048);
  v4 = (uint64_t (*)(void))(*(_QWORD *)(v0
                                     + 8
                                     * (((((unsigned int (*)(_QWORD, unint64_t *, _QWORD, uint64_t))*(&off_100212870 + v1 - 98))(*v3, &STACK[0x448], (LODWORD(STACK[0x560]) + v2), 1) == ((v1 + 83) | 8) - 394)* ((v1 - 195563880) & 0xBA813FF ^ 0x43B)) ^ v1))- 8);
  return v4();
}

uint64_t sub_10004266C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;

  v7 = (v6 + 246) | 0x147;
  STACK[0x4A8] = STACK[0x448];
  v8 = LODWORD(STACK[0x560])
     - ((((v7 + 17181480) & 0xFEF9D539) + 800317155 + 2 * LODWORD(STACK[0x560])) & 0x256989FC)
     - 1433487740;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((31
                                          * (((2 * v8) & 0x77EF3FFE ^ 0x256909FC) + (v8 ^ 0xA9435B01) + 1609296719 != a5)) ^ (v7 - 664)))
                            - 8))();
}

uint64_t sub_10004275C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * ((31 * (((v5 - 614) | 0x204u) + 1141401978 + v7 + v6 - 3392 < 8)) ^ v5))
                                                                                                - 8))(a1, a2, a3, a4, a5, 3827070129, 1628);
}

uint64_t sub_1000427B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((365
                                          * ((((unint64_t)(v1 - a1) < 0x20) ^ (v2 - 104)) & 1)) ^ (v2 + 13)))
                            - ((v2 - 802) | 0x2C0u)
                            + 959))();
}

uint64_t sub_1000427FC(int a1)
{
  unsigned int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((v1 < ((a1 - 2052466154) & 0x7A5627FB ^ 0x2F3u))
                                     * (((a1 + 43474750) & 0xFD68A3C7) - 909)) | a1)))();
}

uint64_t sub_100042854@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v7 = v5 + 1141401978 + v4 - 2426;
  v8 = v1 + v7;
  v9 = *(_OWORD *)(v8 - 31);
  v10 = a1 + v7;
  *(_OWORD *)(v10 - 15) = *(_OWORD *)(v8 - 15);
  *(_OWORD *)(v10 - 31) = v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((619 * ((v2 & 0xFFFFFFE0) == 32)) ^ (v3 + 509)))
                            - ((53 * (v3 ^ 0x3CCu)) ^ 0x24FLL)))();
}

void sub_1000428C8()
{
  JUMPOUT(0x100042880);
}

uint64_t sub_1000428D4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)(((((v0 == v1) ^ (v2 - 112)) & 1)
                                     * (((v2 + 2094594232) & 0x832705FB) - 23)) ^ v2)))();
}

uint64_t sub_100042928()
{
  char v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * ((1018 * ((v0 & 0x18) == (((v1 + 458) | 0x102) ^ 0x3C7))) ^ v1)))();
}

uint64_t sub_100042964@<X0>(int a1@<W5>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_QWORD *)(a2 - 7 + (v3 + a1 - v5)) = *(_QWORD *)(v2 - 7 + (v3 + a1 - v5));
  return (*(uint64_t (**)(void))(v7 + 8 * ((1555 * ((((v6 + 323) | 0x20) ^ 0x43E) + v5 == (v4 & 0xFFFFFFF8))) ^ v6)))();
}

uint64_t sub_1000429B0(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + (a1 - v8)) = *(_QWORD *)(v9 + (a1 - v8));
  return (*(uint64_t (**)(void))(v13 + 8 * (((a2 + v8 == v10) * a8) ^ v11)))();
}

uint64_t sub_1000429D8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((((v2 - 856143927) & 0x3307B7C7) - 192) * (v0 == v1)) ^ v2)) - 8))();
}

uint64_t sub_100042A18@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W6>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(a4 + (v6 + a2)) = *(_BYTE *)(v4 + (v6 + a2));
  return (*(uint64_t (**)(void))(v7 + 8 * (((v6 - 1 != a1) * a3) ^ (v5 - 384))))();
}

uint64_t sub_100042A48()
{
  int v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v2 = (uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((205 * (STACK[0x508] == 0)) ^ (v0 - 597))) - 4);
  STACK[0x2D8] = (unint64_t)*(&off_100212870 + v0 - 941);
  return v2();
}

uint64_t sub_100042A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  LODWORD(STACK[0x4FC]) = v9;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v8 + 8 * (((((v7 - 679) | 0x85) - 396) * (v10 ^ 1)) ^ (v7 + 442))) - 12))(a1, a2, a3, a4, 3722352051, a6, a7, 48, (__n128)0);
}

uint64_t sub_100042AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  char v37;
  uint64_t v38;
  unint64_t v39;

  v39 = STACK[0x298] + 2048;
  LODWORD(STACK[0x40C]) = 2;
  STACK[0x400] = 0;
  STACK[0x5A8] = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 + 8 * ((1455 * ((v37 & 2) != ((a8 + 546) ^ 0x3C7))) ^ a8)) - 8))(a1, a2, a3, a4, a5, v39, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37);
}

uint64_t sub_100042B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t (*v66)(__n128);
  unsigned int v68;
  uint64_t v69;

  *(_DWORD *)(STACK[0x330] + 360) = 89778894;
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, unint64_t, _QWORD, uint64_t, unint64_t *, unint64_t *))(v56 + 8 * (v52 - 894)))(v55, 2, &STACK[0x40C], STACK[0x4A8], (v53 - 1747324538), a6, &STACK[0x400], &STACK[0x5AC]);
  v61 = ((2 * v59) & 0xFBBFF5D8) + (v59 ^ 0xFDDFFAEC);
  v62 = STACK[0x3E0];
  if (v61 == 232782575)
  {
    LODWORD(STACK[0x4FC]) = 1262711376;
    return ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54
                                                                                            + 8
                                                                                            * (int)(((STACK[0x400] != 0) * (((v62 - 405) | 0xC0) ^ 0x323)) ^ (v62 + 222)))
                                                                                - 4))(v59, STACK[0x400], v60, 1262711473);
  }
  else if (v61 == -35652884)
  {
    STACK[0x340] = STACK[0x400];
    LODWORD(STACK[0x338]) = STACK[0x5AC];
    STACK[0x2B0] = STACK[0x298] + 2304;
    v63 = ((_DWORD)v62 - 1720528155) & 0x668D2B7B;
    LODWORD(STACK[0x41C]) = 543459875;
    v64 = STACK[0x3D8];
    v65 = (unint64_t)&STACK[0x650] + STACK[0x3D8] - 0x1715EF98EC840EAFLL;
    STACK[0x2C8] = STACK[0x3D8] + 4144;
    STACK[0x500] = v64 + 4144;
    *(_QWORD *)v65 = 0x6370646600;
    *(_BYTE *)(v65 + 8) = 1;
    STACK[0x220] = v65;
    STACK[0x3D8] = STACK[0x4A0];
    STACK[0x368] = v65 + 1712 + ((v63 ^ 0x200) & (16 * (v65 + 1712) + 16)) + 16;
    STACK[0x370] = v65 + 9;
    v66 = (uint64_t (*)(__n128))(*(_QWORD *)(v54
                                                     + 8
                                                     * (int)((((((_DWORD)v63 + 476) ^ 0x424) != 32)
                                                            * ((v63 ^ 0x1EF) - 893)) ^ v63))
                                         - 12);
    STACK[0x378] = *(_QWORD *)(v56 + 8 * ((int)v63 - 326));
    STACK[0x3A8] = *(_QWORD *)(v56 + 8 * ((int)v63 - 365));
    STACK[0x3A0] = *(_QWORD *)(v56 + 8 * (int)(v63 ^ 0x2EC)) - 4;
    return v66((__n128)0);
  }
  else
  {
    v68 = 1178560073 * ((v57 & 0xE6D2436E | ~(v57 | 0xE6D2436E)) ^ 0xA3B9C4F3);
    *(_QWORD *)(v58 - 192) = a52;
    *(_DWORD *)(v58 - 200) = v68 + v61 - ((2 * v61 + 71305768) & 0x697852D0) - 1227084164;
    *(_DWORD *)(v58 - 196) = v62 - v68 + 293;
    v69 = sub_10006D9C4((_DWORD *)(v58 - 200));
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v54
                                                        + 8
                                                        * (int)(((STACK[0x400] != 0) * (((v62 - 405) | 0xC0) ^ 0x323)) ^ (v62 + 222)))
                                            - 4))(v69);
  }
}

uint64_t sub_100042C10()
{
  uint64_t (*v0)(void);
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  v5 = v0();
  LODWORD(STACK[0x4FC]) = v3;
  return ((uint64_t (*)(uint64_t, __n128))(*(_QWORD *)(v2
                                                              + 8
                                                              * (((((v1 - 679) | 0x85) - 396) * (v4 ^ 1)) ^ (v1 + 442)))
                                                  - 12))(v5, (__n128)0);
}

void sub_100042C68()
{
  JUMPOUT(0x100042C74);
}

void sub_100042C88()
{
  LODWORD(STACK[0x338]) = 0;
  STACK[0x340] = 0;
  JUMPOUT(0x100042CA4);
}

uint64_t sub_100042DEC@<X0>(unsigned int a1@<W5>, uint64_t a2@<X6>, char a3@<W8>)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v8 = (_BYTE *)(a2 + (v5 - 1078719722));
  v9 = -897728923
     * ((*(_DWORD *)(*(_QWORD *)STACK[0x3A0] + (*(_DWORD *)STACK[0x3A8] & 0x3D97E7B8)) ^ v8) & 0x7FFFFFFF);
  v10 = -897728923 * (v9 ^ HIWORD(v9));
  v11 = v10 >> ((-118 * ((v3 - 56) & 0x7B ^ 0x4C)) ^ 0x30u);
  v12 = *(_BYTE *)(*(_QWORD *)(v7 + 8 * (v3 ^ 0x4C4)) + v11 - 4) ^ ((v4 ^ a1) >> a3) ^ *(_BYTE *)(*(_QWORD *)(v7 + 8 * (v3 - 973))
                                                                                                  + v11
                                                                                                  - 1) ^ *(_BYTE *)(*(_QWORD *)(v7 + 8 * (v3 ^ 0x4D9)) + v11 - 3) ^ v10 ^ (127 * v11);
  *v8 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((38 * (v5 - (v12 != 0) != 1078719721)) ^ v3)) - 12))();
}

void sub_100043DC8()
{
  JUMPOUT(0x100042D8CLL);
}

uint64_t sub_100043DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  BOOL v67;
  int v68;

  STACK[0x590] = v63;
  STACK[0x4A0] = STACK[0x3D8];
  STACK[0x430] = *(_QWORD *)(v65 + 8 * v64);
  v66 = STACK[0x340];
  STACK[0x500] = STACK[0x2C8] + 112;
  STACK[0x3E8] = v66;
  if (v66)
    v67 = a63 == 0;
  else
    v67 = 1;
  v68 = !v67;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 + 8 * (int)((v68 * (2 * ((v64 + 312313783) & 0xED627BC7 ^ 0x31C) + 183)) ^ (v64 + 1265)))
                                                                                       - 4))(a63, a2, a3, 1262711473, a5, 572615244);
}

uint64_t sub_100043EAC@<X0>(uint64_t a1@<X0>, int a2@<W8>, __n128 a3@<Q0>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v6 = (char *)&STACK[0x650] + v4 - 0x1715EF98EC84182FLL;
  *(_DWORD *)v6 = 1256999969;
  *((_QWORD *)v6 + 1) = 0;
  *((_DWORD *)v6 + 4) = 282547551;
  *((_DWORD *)v6 + 6) = 1747324538;
  *((_QWORD *)v6 + 4) = 0;
  *((_DWORD *)v6 + 10) = 1747324538;
  STACK[0x4E0] = (unint64_t)(v6 + 40);
  *((_QWORD *)v6 + 6) = 0;
  *((_DWORD *)v6 + 14) = 1747324538;
  STACK[0x5A0] = (unint64_t)(v6 + 48);
  STACK[0x478] = (unint64_t)(v6 + 56);
  *((_QWORD *)v6 + 8) = 0;
  STACK[0x578] = (unint64_t)(v6 + 64);
  *((_DWORD *)v6 + 18) = 1747324538;
  *((_QWORD *)v6 + 10) = 0;
  STACK[0x5B0] = (unint64_t)(v6 + 72);
  STACK[0x440] = (unint64_t)(v6 + 80);
  v6[88] = 90;
  *(_DWORD *)a1 = 1256999969;
  *(__n128 *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 28) = 1228397637;
  STACK[0x2F8] = a1 + 28;
  *(_DWORD *)(a1 + 232) = 1228397637;
  STACK[0x2F0] = a1 + 232;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 1747324538;
  *(__n128 *)(a1 + 436) = a3;
  *(__n128 *)(a1 + 452) = a3;
  *(_QWORD *)(a1 + 468) = 0;
  strcpy((char *)(a1 + 1128), "99999999999999999999");
  *(_BYTE *)(a1 + 1149) = 0;
  *(_WORD *)(a1 + 1150) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1160) = 0;
  *(__n128 *)(a1 + 1168) = a3;
  *(__n128 *)(a1 + 1184) = a3;
  return (*(uint64_t (**)(void))(v5 + 8 * (((a2 == 214) * v3) ^ a2)))();
}

uint64_t sub_100043FDC@<X0>(uint64_t a1@<X0>, int a2@<W8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __n128 *v7;

  v7 = (__n128 *)(a1 + v4);
  v7[73] = a3;
  v7[74] = a3;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v3 == v4) * v5) ^ a2)))();
}

uint64_t sub_100044004(uint64_t a1, __n128 a2)
{
  int v2;
  int v3;
  uint64_t v4;

  *(_DWORD *)(a1 + 1424) = 130889709;
  *(_DWORD *)(a1 + 1428) = 464241818;
  memset((void *)(a1 + 1432), 57, 20);
  *(__n128 *)(a1 + 1452) = a2;
  return (*(uint64_t (**)(void))(v4 + 8 * (((((16 * v2) ^ 0x2970) == -16) * v3) ^ v2)))();
}

uint64_t sub_10004406C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(__n128 *)(a1 + v4) = a3;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v4 - 1436 == a2 + 32) * v5) ^ v3)))();
}

uint64_t sub_100044094@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  unint64_t a65;
  unint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  int v71;
  _BOOL4 v73;

  STACK[0x2C8] = v65;
  memset((void *)(a1 + 1516), 57, 20);
  *(_QWORD *)(v66 + 96) = a1;
  STACK[0x260] = a1;
  *(_DWORD *)(a1 + 476) = 874675927;
  STACK[0x3A0] = STACK[0x3E8];
  STACK[0x388] = *(_QWORD *)(v68 + 8 * a9) - 8;
  v69 = STACK[0x500];
  v70 = (char *)&a10 + STACK[0x500] - 0x1715EF98EC8411DFLL;
  STACK[0x338] = STACK[0x500];
  STACK[0x328] = (a9 + 868) + v69 - 468;
  STACK[0x3D8] = (unint64_t)v70;
  STACK[0x268] = (unint64_t)(v70 + 392);
  a65 = v66;
  STACK[0x340] = v66;
  v71 = (a9 + 544) | 0x2E;
  STACK[0x500] = STACK[0x328];
  LODWORD(STACK[0x3FC]) = -1434871179;
  LODWORD(STACK[0x380]) = 2022698293;
  LODWORD(STACK[0x3A8]) = 251298836;
  LODWORD(STACK[0x544]) = 1747324538;
  STACK[0x528] = 0;
  LODWORD(STACK[0x4BC]) = 1954290419;
  *(_DWORD *)STACK[0x3D8] = 1751559471;
  LODWORD(STACK[0x368]) = (v71 ^ 0x76C118A6) + 218940930;
  LODWORD(STACK[0x370]) = -504305656;
  LODWORD(STACK[0x390]) = v67;
  v73 = *(_DWORD *)STACK[0x3D8] != 1751559471 || (_DWORD)a6 + 1 != (_DWORD)a6 + ((v71 - 581) | 0x3C2) - 1003;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 + 8 * ((v73 * (((v71 - 2077752943) & 0x7BD7FFC7) + 581)) ^ v71)) - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63,
           a64);
}

uint64_t sub_100044254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (int)((((v6 + 800537107) & 0xD048C78F ^ 0x269) * (v7 == a6)) ^ v6))
                            - 12))();
}

uint64_t sub_10004429C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((19
                                          * ((((v0 ^ 0x65B) - 985) & (v1 - 1747324535)) - LODWORD(STACK[0x390]) == -1747324538)) ^ v0))
                            - 4))();
}

uint64_t sub_1000442E4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((((v0 - 161) ^ 0x4E3) * (v1 != 1751559471)) ^ v0)) - 12))();
}

uint64_t sub_100044318()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  _BOOL4 v5;

  v5 = v1 == 1751559471 || LODWORD(STACK[0x4BC]) - v2 != 206965881;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((2007 * ((((v0 - 677) ^ v5) & 1) == 0)) ^ v0)) - 12))();
}

uint64_t sub_100044370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;

  v12 = v8 - 161;
  v13 = (_DWORD *)STACK[0x3D8];
  *v13 = ((v8 - 161) ^ 0xFFFFFCCB) + v9;
  v14 = &v13[6 * (v9 - 1751559472)];
  v15 = v14[2];
  STACK[0x3A0] = *((_QWORD *)v14 + 2);
  LODWORD(STACK[0x4BC]) = v14[6];
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * ((223
                                          * (((v12 + 41) ^ (*(_DWORD *)(v11
                                                                                       + (v15 + a5) * (uint64_t)a8
                                                                                       + 36) == a6)) & 1)) ^ v12))
                            - ((v12 - 198) ^ 0x262)))();
}

uint64_t sub_100044430()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  _BOOL4 v6;

  v3 = LODWORD(STACK[0x4BC]) + 1592071563;
  v4 = v1 + (((v0 ^ 0x733) + 1209) ^ 0x6B3B2523);
  v5 = (v4 < 0xD361307E) ^ (v3 < 0xD361307E);
  v6 = v3 < v4;
  if (v5)
    v6 = v4 < 0xD361307E;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((255 * !v6) ^ v0)) - 12))();
}

uint64_t sub_1000444A4@<X0>(int a1@<W4>, int a2@<W7>, int a3@<W8>)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v7 = *(_DWORD *)(v6 + ((((v4 - 1255) | 0x2E) ^ (a1 + 554)) + v3) * (uint64_t)a2 + 36) == a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (((2 * ((v7 ^ (v4 + 26)) & 1)) & 0xEF | (16
                                                                                                  * ((v7 ^ (v4 + 26)) & 1))) ^ v4))
                            - 4))();
}

uint64_t sub_100044508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v12;

  v12 = v6 == v10 && v9 != a6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (v7 ^ 0x174 ^ (1992 * v12))) - (v7 ^ 0x2Eu) + 610))();
}

uint64_t sub_100044550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((1525
                                          * ((*(_DWORD *)(v10 + (v11 + a5) * (uint64_t)a8 + 40) & 8) != (v8 ^ 0x692) - 1276)) ^ v8))
                            - 12))();
}

uint64_t sub_100044590@<X0>(int a1@<W5>, int a2@<W7>, int a3@<W8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;

  v6 = *(_DWORD *)(v5 + v3 * (uint64_t)a2 + 36);
  v7 = v6 != a1;
  if (v6 - 321316435 <= -1896184839 || v6 - 321316435 >= SLODWORD(STACK[0x3A8]))
    v7 = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((475 * ((v7 ^ (a3 - 1)) & 1)) ^ a3)) - 12))();
}

uint64_t sub_1000445FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  v8 = (v4 - 1242556613) & 0x4A0FE7FE;
  if (v5)
    v9 = v7;
  else
    v9 = a4 + 5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((490 * (v9 == v7 + (v8 ^ 0x1A9) - 967)) ^ v8)) - 12))();
}

void sub_100044E24()
{
  JUMPOUT(0x1000441ECLL);
}

uint64_t sub_100044E34()
{
  STACK[0x500] = STACK[0x338];
  return ((uint64_t (*)(void))STACK[0x388])();
}

uint64_t sub_100044E44()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v2 - 955) ^ (1383 * (v0 == v3))))
                            - ((v2 - 943) ^ 0x1CLL)))();
}

void sub_100044E70(int a1@<W8>)
{
  uint64_t v1;
  unint64_t *v2;

  v2 = (unint64_t *)STACK[0x5A0];
  STACK[0x340] = STACK[0x2F8];
  STACK[0x3A0] = *v2;
  STACK[0x388] = *(_QWORD *)(v1 + 8 * a1) + (((a1 + 378) | 8u) ^ 0xFFFFFFFFFFFFFE66);
  JUMPOUT(0x10004413CLL);
}

uint64_t sub_100044F24()
{
  uint64_t (*v0)(void);
  int v1;
  unint64_t v2;
  uint64_t v3;

  STACK[0x338] = v2;
  STACK[0x2C8] = v2 - 112;
  STACK[0x500] = v2 - 112;
  STACK[0x3D8] = *(_QWORD *)(v3 + 8 * (v1 - 863));
  return v0();
}

uint64_t sub_100044F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  uint64_t v71;
  int v72;
  unint64_t v73;

  v73 = STACK[0x260];
  *(_QWORD *)(v73 + 1560) = *(_QWORD *)STACK[0x440];
  *(_DWORD *)(v73 + 1552) = *(_DWORD *)STACK[0x5B0];
  *(_QWORD *)(*(_QWORD *)(a71 + 96) + 488) = *(_QWORD *)(a71 + 8);
  *(_DWORD *)(*(_QWORD *)(a71 + 96) + 480) = *(_DWORD *)a71;
  *(_BYTE *)(STACK[0x200] + STACK[0x2C8]) = (STACK[0x208] ^ 0xBA) * (STACK[0x208] + 17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v71
                                                      + 8
                                                      * ((1924 * (((v72 + 433023992) & 0xE6309579) == 1440)) ^ (v72 - 768)))
                                          - 12))(186);
}

void sub_100045000()
{
  JUMPOUT(0x100044FC0);
}

uint64_t sub_100045008@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  STACK[0x450] = a2 + 104;
  v4 = (uint64_t (*)(void))STACK[0x430];
  STACK[0x2C8] = a1 - 112;
  STACK[0x500] = a1 - 112;
  STACK[0x3D8] = *(_QWORD *)(v3 + 8 * (v2 - 1233));
  return v4();
}

uint64_t sub_100045034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a73;
  int v73;
  uint64_t v74;
  int v75;
  int v76;

  return (*(uint64_t (**)(void))(v74 + 8 * ((1843 * (v73 == v76 + 3 * a73 - 423)) ^ (v75 - 122))))();
}

uint64_t sub_10004506C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  uint64_t v58;

  STACK[0x420] = 0;
  LODWORD(STACK[0x534]) = 1747324538;
  STACK[0x490] = 0;
  LODWORD(STACK[0x574]) = 1747324538;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 + 8 * ((((*(_BYTE *)(a57 - 0x2CF26CC0953EB4ADLL) - *(_BYTE *)(*(_QWORD *)(v58 + 8 * (a1 ^ 0x18F)) - 8)) == 16) * ((17 * (a1 ^ 0x1BE)) ^ 0x1B8)) ^ (17 * (a1 ^ 0x1BE)))) - (((17 * (a1 ^ 0x1BE) - 290) | 0x120u) ^ 0x1AFLL)))(845, 945, 1418, 1618, 11, 113, 766, 569390508);
}

uint64_t sub_10004513C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((v1 == (17 * (v0 ^ 0xBE) + 123)) * ((v0 ^ v3) - 938)) ^ v0))
                            - 8))();
}

void sub_100045170()
{
  JUMPOUT(0x100045100);
}

uint64_t sub_10004517C()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v2 - 863) ^ (1637 * (v0 == v3)))) - (STACK[0x228] ^ 0x14A)))();
}

uint64_t sub_1000451B0()
{
  uint64_t v0;
  int v1;

  v1 = (*(unsigned __int8 *)(STACK[0x588] + 1516) ^ 0x39) - (*(_BYTE *)STACK[0x4C8] - 25);
  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (int)((232 * (((2 * v1) & 0x7FFF7BB8) + (v1 ^ 0xBFFFBDDC) == -1073758756)) ^ STACK[0x228] ^ 0x12A))
                            - ((STACK[0x228] ^ 0x285)
                             - 645)
                            + 314))();
}

uint64_t sub_100045234@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((((v1 - 321) ^ 0x14) * (a1 == 19)) ^ v1)) - 4))();
}

void sub_100045260()
{
  JUMPOUT(0x1000451CCLL);
}

uint64_t sub_10004526C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v13 = (v7 ^ 0x13) + 525;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((((*(_BYTE *)(v12 + v8)
                                                             - **(_BYTE **)(v11 + 8 * (v13 & 0x12CF5C0B))
                                                             + (((v13 ^ 0xF0) * a5) ^ a6)) == 60)
                                          * ((3 * (v13 ^ v10)) ^ a7)) ^ (v13 + 684)))
                            - 4))();
}

uint64_t sub_100045324(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  int v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;

  return (*(uint64_t (**)(void))(v12
                              + 8
                              * (((v9 == (((v8 + a8) & v10) + 93)) * (((v8 + 407) | v11) ^ a2)) ^ v8)))();
}

void sub_100045354()
{
  JUMPOUT(0x1000452D8);
}

uint64_t sub_100045360(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((((*(_BYTE *)(v8 + v5)
                                                   - **(_BYTE **)(v7 + 8 * (((v4 - 86) | 0x1C0) ^ 0x3F2))) != 16)
                                * (((((v4 - 86) | 0x1C0) ^ a3) - 11) ^ a4)) | (((v4 - 86) | 0x1C0) + 577))))();
}

uint64_t sub_10004542C(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((v1 == ((v2 - 66) ^ 0x24)) * (((v2 - 1602) | a1) - 830)) ^ v2))
                            - 12))();
}

void sub_10004545C()
{
  JUMPOUT(0x1000453F4);
}

uint64_t sub_10004546C()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v2 = 13 * (v0 ^ 0x60C);
  v3 = ((uint64_t (*)(uint64_t, uint64_t))STACK[0x378])(1576, 2940923044);
  STACK[0x588] = v3;
  return (*(uint64_t (**)(void))(v1 + 8 * ((1307 * (v3 != 0)) ^ v2)))();
}

uint64_t sub_100045518(unint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  STACK[0x260] = a1;
  v3 = ((uint64_t (*)(uint64_t, uint64_t))STACK[0x378])(1576, 3012117910);
  STACK[0x548] = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((16 * (v3 == 0)) | (32 * (v3 == 0)) | (334 * (v2 ^ 0x348))))
                            - (334 * (v2 ^ 0x348u)
                             - 54
                             + ((334 * (v2 ^ 0x348u) - 703) ^ 0xFFFFFFFFFFFFFA7FLL))))();
}

uint64_t sub_100045580()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((61 * (v0 == ((v1 - 312) | 0xA0) + 1111187523)) ^ v1)) - 4))();
}

uint64_t sub_1000455CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t a70;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;

  v74 = 235795823 * (((v72 | 0x8C5E8355) + (~v72 | 0x73A17CAA)) ^ 0x18F3CA0D);
  *(_QWORD *)(v73 - 192) = 0x203C12B38E249DD0;
  *(_QWORD *)(v73 - 184) = a69;
  *(_QWORD *)(v73 - 176) = a70;
  *(_DWORD *)(v73 - 164) = v70 - 936 - v74 + 182;
  *(_DWORD *)(v73 - 200) = v74 ^ 0x4408697A;
  v75 = ((uint64_t (*)(uint64_t))STACK[0x2A0])(v73 - 200);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v71
                                                      + 8
                                                      * ((*(_DWORD *)(v73 - 168) != ((v70 - 1512) ^ 0xB4BC2900)) ^ (v70 - 936)))
                                          - ((v70 - 1584) | 0x48u)
                                          + 100))(v75);
}

uint64_t sub_1000456A4@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((77 * (v2 == (((a1 ^ 0x711) - 1) ^ (v1 + 344)))) ^ a1)))();
}

uint64_t sub_1000456EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t a70;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;

  v76 = ((1707451106 - (v74 | 0x65C5A2E2) + (v74 | 0x9A3A5D1D)) ^ 0xE971444) * v73;
  *(_QWORD *)(v75 - 192) = v70;
  *(_QWORD *)(v75 - 184) = a69;
  *(_DWORD *)(v75 - 164) = v72 - v76 + 182;
  *(_DWORD *)(v75 - 200) = v76 ^ 0x44086978;
  *(_QWORD *)(v75 - 176) = a70;
  v77 = ((uint64_t (*)(uint64_t))STACK[0x2A0])(v75 - 200);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v71 + 8 * ((*(_DWORD *)(v75 - 168) != -1262737048) | v72))
                                          - ((v72 + 1751603922) & 0x9798A2ED)
                                          + 100))(v77);
}

uint64_t sub_1000457D0()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((1428 * (v2 == (((v0 ^ 0x2A1) + 96) ^ (v1 - 704)) + 85 * (v0 ^ 0x2A1))) ^ v0))
                            - 4))();
}

uint64_t sub_10004581C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t a70;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;

  v77 = ((v75 & 0x502C1621 | ~(v75 | 0x502C1621)) ^ 0x3B7EA087) * v73;
  *(_DWORD *)(v76 - 200) = v77 ^ 0x4408697A;
  *(_QWORD *)(v76 - 192) = v70;
  *(_QWORD *)(v76 - 184) = a69;
  *(_QWORD *)(v76 - 176) = a70;
  *(_DWORD *)(v76 - 164) = v72 - v77 + 182;
  v78 = ((uint64_t (*)(uint64_t))STACK[0x2A0])(v76 - 200);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v71
                                                      + 8
                                                      * (((v72 + 1) ^ (*(_DWORD *)(v76 - 168) == v74)) & 1 | v72))
                                          - (((v72 - 640) | 0x40u) ^ 0x6CLL)))(v78);
}

uint64_t sub_1000458D8@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  unint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;

  v70 = (((v68 | 0xFEC73C2B) - v68 + (v68 & 0x138C3D0)) ^ 0x6A6A7572) * v66;
  *(_DWORD *)(v69 - 200) = a1 ^ v70;
  *(_DWORD *)(v69 - 164) = v64 - v70 + 758;
  *(_QWORD *)(v69 - 184) = a60;
  *(_QWORD *)(v69 - 176) = a61;
  *(_QWORD *)(v69 - 192) = v61;
  v71 = v62(v69 - 200);
  v72 = *(_DWORD *)(v69 - 168);
  STACK[0x4C8] = v63;
  return ((uint64_t (*)(uint64_t, __n128))(*(_QWORD *)(v65 + 8 * ((1148 * (v72 == v67)) ^ v64))
                                                  - ((v64 + 88) | 0x307u)
                                                  + 959))(v71, (__n128)0);
}

void sub_1000459A0()
{
  JUMPOUT(0x1000459CCLL);
}

uint64_t sub_100045A30()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((LODWORD(STACK[0x4FC]) != v2) * (v0 - 250)) ^ v0))
                            - ((v0 + 802688245) & 0xD027F3DF)
                            + 959))();
}

uint64_t sub_100045B34()
{
  unint64_t v0;
  int v1;
  uint64_t v2;

  STACK[0x4C8] = v0;
  return (*(uint64_t (**)(void))(v2 + 8 * (int)((122 * (STACK[0x490] == 0)) ^ (((v1 + 1481522015) & 0xA7B1C7FF) - 651))))();
}

uint64_t sub_100046540()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1539 * (STACK[0x420] != 0)) ^ (v1 - 311))) - 4))();
}

uint64_t sub_10004656C()
{
  uint64_t v0;
  int v1;

  return (*(uint64_t (**)(void))(v0 + 8 * ((63 * (STACK[0x588] == 0)) ^ (v1 - 579))))();
}

uint64_t sub_100046590()
{
  void (*v0)(void);
  uint64_t v1;
  int v2;

  v0();
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1585 * (STACK[0x548] != 0)) ^ (v2 - 61))) - 8))();
}

uint64_t sub_1000465C0()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v3 = ((uint64_t (*)(void))STACK[0x2D8])();
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8
                                            * (((((v2 - 1251862506) & 0x4A9DE76F) + 978) * (v0 == -1262737048)) ^ (v2 - 122))))(v3);
}

uint64_t sub_100046614()
{
  uint64_t v0;
  int v1;

  ((void (*)(void))STACK[0x2D8])();
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1539 * (STACK[0x420] != 0)) ^ (v1 - 311))) - 4))();
}

uint64_t sub_100046644()
{
  void (*v0)(void);
  uint64_t v1;
  int v2;

  v0();
  return (*(uint64_t (**)(void))(v1 + 8 * ((63 * (STACK[0x588] == 0)) ^ (v2 - 579))))();
}

uint64_t sub_10004666C()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1585 * (STACK[0x548] != 0)) ^ (v1 - 61))) - 8))();
}

uint64_t sub_100046698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4
                                                                       + 8
                                                                       * (((((v5 - 1251862506) & 0x4A9DE76F) + 978)
                                                                         * (v3 == -1262737048)) ^ (v5 - 122))))(a1, a2, a3, 1262711473);
}

uint64_t sub_1000466E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;

  LODWORD(STACK[0x41C]) = 543459595;
  LODWORD(STACK[0x4D4]) = 128;
  *(_QWORD *)(v58 - 136) = v54;
  *(_QWORD *)(v58 - 128) = v54 + 0xCDF342D76DC3947;
  v59 = 1178560073 * ((v57 - 980125809 - 2 * (v57 & 0xC594778F)) ^ 0x7F000FED);
  *(_DWORD *)(v58 - 176) = 2032756526 - v59;
  *(_QWORD *)(v58 - 152) = 0;
  *(_QWORD *)(v58 - 144) = a44;
  *(_QWORD *)(v58 - 184) = v54 + 0xCDF342D76DC3837;
  *(_QWORD *)(v58 - 192) = a54;
  *(_DWORD *)(v58 - 160) = (v55 - 531) ^ v59;
  *(_QWORD *)(v58 - 168) = 0;
  v60 = ((uint64_t (*)(uint64_t))STACK[0x3D8])(v58 - 200);
  return (*(uint64_t (**)(uint64_t))(v56
                                            + 8
                                            * (((2 * (*(_DWORD *)(v58 - 200) == -1262737048)) | (32
                                                                                               * (*(_DWORD *)(v58 - 200) == -1262737048))) ^ v55)))(v60);
}

uint64_t sub_1000467DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;

  v4 = v1 + 127 - a1;
  v5 = vrev64q_s8(*(int8x16_t *)(v4 - 15));
  v6 = vextq_s8(v5, v5, 8uLL);
  v7 = vrev64q_s8(*(int8x16_t *)(v4 - 31));
  v8 = vextq_s8(v7, v7, 8uLL);
  v9 = STACK[0x2B0] + 127 - a1;
  v10.i64[0] = 0x7272727272727272;
  v10.i64[1] = 0x7272727272727272;
  v11.i64[0] = 0x3939393939393939;
  v11.i64[1] = 0x3939393939393939;
  v12 = vrev64q_s8(vaddq_s8(vsubq_s8(v6, vandq_s8(vaddq_s8(v6, v6), v10)), v11));
  *(int8x16_t *)(v9 - 15) = vextq_s8(v12, v12, 8uLL);
  v13 = vrev64q_s8(vaddq_s8(vsubq_s8(v8, vandq_s8(vaddq_s8(v8, v8), v10)), v11));
  *(int8x16_t *)(v9 - 31) = vextq_s8(v13, v13, 8uLL);
  return (*(uint64_t (**)(void))(v3 + 8 * ((1286 * (a1 + 32 == (v2 ^ 0x3EFLL))) ^ v2)))();
}

uint64_t sub_100046878()
{
  unsigned int v0;
  uint64_t v1;
  int v2;

  LODWORD(STACK[0x4FC]) = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((105
                                          * (*(_DWORD *)(STACK[0x330] + 360) - 89778894 >= (((v0 - 418) | 0x144) ^ ((v0 - 608) | 0x202) ^ 0xFFFFFFFE))) ^ v0))
                            - 12))();
}

uint64_t sub_1000468D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W8>)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;

  v9 = STACK[0x338];
  v10 = (char *)&STACK[0x650] + STACK[0x338] - 0x1715EF98EC84182FLL;
  STACK[0x5D8] = (unint64_t)(v10 - 1824);
  STACK[0x3D8] = (unint64_t)(v10 - 1596);
  LODWORD(STACK[0x4D0]) = 1695734790;
  STACK[0x500] = v9 - 192;
  STACK[0x3F0] = 0;
  LODWORD(STACK[0x42C]) = 1747324538;
  STACK[0x3A0] = (unint64_t)(v10 - 1824);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * (((((a8 - 839) | 2) ^ 0x449) * (v10 != (char *)1576)) ^ (a8 - 1)))
                                                                                                - 8))(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100046A34()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  *(_DWORD *)(v3 - 200) = v0 + 628203409 * (((v2 | 0xECA74806) - v2 + (v2 & 0x1358B7F8)) ^ 0x6E2F4435) - 231788920;
  nullsub_1(v3 - 200);
  v4 = *(uint64_t (**)(void))(v1
                           + 8
                           * (((((v0 - 123) ^ (((uint64_t (*)(uint64_t, uint64_t))STACK[0x378])(336, 318119320) == 0)) & 1)* ((v0 + 837) ^ 0x5E0)) ^ v0));
  return v4();
}

uint64_t sub_100046ADC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((((unint64_t)(*(_QWORD *)(v3 + 8 * (v1 - 1757)) - a1) < 0x20)
                                                        * (((v1 - 1412) | 0x30) - 343)) ^ v1))
                                          - 4))(4222354824);
}

uint64_t sub_100046B3C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v6 + (v3 + a1)) = *(_BYTE *)(a2 + (v3 + a1))
                                           - ((2 * *(_BYTE *)(a2 + (v3 + a1))) & 0x72)
                                           + 57;
  return (*(uint64_t (**)(void))(v5 + 8 * ((97 * (((v3 - 1 == v4) ^ (v2 + 80)) & 1)) ^ v2)))();
}

uint64_t sub_100046B90()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;

  v7 = (_QWORD *)(v3 + v0 - 377);
  STACK[0x5B8] = v4;
  *v7 = 0xC6C6C6C6C6C6C6C6;
  v7[1] = 0x393939393F39392BLL;
  v8 = 235795823 * ((((2 * v5) | 0x989D4EA2) - v5 + 867260591) ^ 0x58E3EE08);
  *(_DWORD *)(v6 - 196) = v8 + 439533309;
  *(_DWORD *)(v6 - 192) = v1 - v8 + 1064656541;
  nullsub_1(v6 - 200);
  LODWORD(STACK[0x5D4]) = 1747324874;
  v9 = ((uint64_t (*)(uint64_t, uint64_t))STACK[0x378])(336, 1690680581);
  STACK[0x460] = v9;
  return (*(uint64_t (**)(void))(v2 + 8 * (int)(((v9 == 0) * ((((v1 + 1100912473) & 0xBE616BD7) - 404) ^ 0x23E)) ^ v1)))();
}

uint64_t sub_100046C78()
{
  int v0;
  uint64_t v1;

  LODWORD(STACK[0x608]) = 1262711484;
  return (*(uint64_t (**)(void))(v1 + 8 * ((v0 - 837) | (4 * (STACK[0x5B8] != 0)))))();
}

uint64_t sub_100046CAC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;

  v7 = (v2 - v1);
  v8 = vrev64q_s8(*(int8x16_t *)(a1 + v7 - 15));
  v9 = vextq_s8(v8, v8, 8uLL);
  v10 = vrev64q_s8(*(int8x16_t *)(a1 + v7 - 31));
  v11 = vextq_s8(v10, v10, 8uLL);
  v12 = v6 + v7;
  v13.i64[0] = 0x7272727272727272;
  v13.i64[1] = 0x7272727272727272;
  v14.i64[0] = 0x3939393939393939;
  v14.i64[1] = 0x3939393939393939;
  v15 = vrev64q_s8(vaddq_s8(vsubq_s8(v9, vandq_s8(vaddq_s8(v9, v9), v13)), v14));
  *(int8x16_t *)(v12 - 15) = vextq_s8(v15, v15, 8uLL);
  v16 = vrev64q_s8(vaddq_s8(vsubq_s8(v11, vandq_s8(vaddq_s8(v11, v11), v13)), v14));
  *(int8x16_t *)(v12 - 31) = vextq_s8(v16, v16, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v1 == 288) * ((v4 - 832) ^ v3)) ^ v4)) - 4))();
}

uint64_t sub_100046D38@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int8x8_t v6;
  int8x8_t v7;
  uint64_t v8;
  int8x8_t v9;

  v8 = (((v1 - 819) | 2) ^ v3) - 320;
  v9 = vrev64_s8(*(int8x8_t *)(a1 + v8 - 7));
  *(int8x8_t *)(v5 - 7 + v8) = vrev64_s8(vadd_s8(vsub_s8(v9, vand_s8(vadd_s8(v9, v9), v6)), v7));
  return (*(uint64_t (**)(void))(v4 + 8 * (v2 ^ (v1 - 532))))();
}

uint64_t sub_100046D98@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  int v4;

  STACK[0x500] = a2 - 16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((825 * (a1 == v4)) ^ v2)) - ((v2 + 156) | 0x282u) + 959))();
}

uint64_t sub_100046DD8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v2 = ((uint64_t (*)(unint64_t))STACK[0x2D8])(STACK[0x260]);
  LODWORD(STACK[0x4FC]) = 1262711484;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v0
                                                      + 8
                                                      * (((STACK[0x400] != 0) * (((v1 - 405) | 0xC0) ^ 0x323)) ^ (v1 + 222)))
                                          - 4))(v2);
}

uint64_t sub_100046E3C@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v3 = 13 * (a2 ^ 0x49F);
  v4 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))STACK[0x2E8])(*(unsigned int *)STACK[0x2E0], a1, LODWORD(STACK[0x5AC]));
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * (((LODWORD(STACK[0x4FC]) != -1262737048) * (v3 - 250)) ^ v3))
                                          - ((v3 + 802688245) & 0xD027F3DF)
                                          + 959))(v4);
}

uint64_t sub_100046EB8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  *(_DWORD *)(v1 + 52) += ((v0 + 1093262865) & 0xBED62557) + ((v0 + 418629327) & 0xE70C37D5 ^ 0xFFFFFA3D);
  STACK[0x3D8] = v2 - 2432;
  STACK[0x500] = v2 - 2432;
  LODWORD(STACK[0x524]) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((546 * (STACK[0x580] == 0)) ^ v0)) - 12))();
}

uint64_t sub_100046F38()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v6 = 535753261 * ((((2 * (v4 ^ 0x7B5C7D10)) | 0x39AB4DA6) - (v4 ^ 0x7B5C7D10) - 483763923) ^ 0x6D7DD5EC);
  *(_DWORD *)(v5 - 192) = v1 - v6 + 656;
  *(_QWORD *)(v5 - 184) = STACK[0x250];
  *(_QWORD *)(v5 - 160) = STACK[0x258];
  *(_DWORD *)(v5 - 176) = LODWORD(STACK[0x244]) ^ v6;
  *(_DWORD *)(v5 - 168) = v0 - v6 + ((v1 + 115) | 0x2C4) + 1056106514;
  *(_QWORD *)(v5 - 200) = STACK[0x248];
  v7 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * (v1 ^ 0xD7)) - 8))(v5 - 200);
  v8 = *(_DWORD *)(v5 - 172);
  LODWORD(STACK[0x524]) = v8;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * ((1602 * (v8 == -1262737048)) | v1)) - 4))(v7);
}

uint64_t sub_10004701C()
{
  int v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(void);

  v3 = STACK[0x580];
  LODWORD(STACK[0x300]) = STACK[0x564];
  v4 = (uint64_t (*)(void))(*(_QWORD *)(v2
                                     + 8
                                     * ((((4 * (v1 + 1220)) ^ 0x155D) * ((v0 - 89778893) < 2)) ^ (v1 + 1220)))
                         - ((v1 + 823) ^ 0x3CBLL));
  STACK[0x318] = v3;
  return v4();
}

uint64_t sub_100047084()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;

  v7 = v0 ^ 0x15C0;
  v8 = STACK[0x580];
  v9 = 628203409 * ((1155205280 - (v5 | 0x44DB08A0) + (v5 | 0xBB24F75F)) ^ 0x39ACFB6C);
  v10 = LODWORD(STACK[0x564])
      - v9
      - (((((v0 ^ 0x15C0) - 505069713) & 0x1E1AC3C7) + 2 * LODWORD(STACK[0x564]) + 505960961) & 0xDAC9B3EA)
      - 59176743;
  *(_QWORD *)(v6 - 152) = v1;
  *(_QWORD *)(v6 - 192) = v2 + 0x2CF2CD9EB99DE9A3;
  *(_DWORD *)(v6 - 184) = -628203409 * ((1155205280 - (v5 | 0x44DB08A0) + (v5 | 0xBB24F75F)) ^ 0x39ACFB6C)
                        + 667566461 * v3
                        + 1527588202;
  *(_DWORD *)(v6 - 180) = v10;
  *(_DWORD *)(v6 - 200) = v7 - v9 + 368400033;
  *(_QWORD *)(v6 - 176) = v8;
  *(_QWORD *)(v6 - 168) = v2 + 0x6BB64013357C0BEDLL;
  v11 = sub_100081EF8(v6 - 200);
  v12 = *(_DWORD *)(v6 - 160);
  LODWORD(STACK[0x524]) = v12;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * ((2040 * (v12 == -1262737048)) ^ v7)) - 4))(v11);
}

uint64_t sub_1000471BC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;

  v5 = STACK[0x330];
  v6 = *(_DWORD *)(STACK[0x330] + 52);
  v7 = 3804331 * (v3 ^ 0x7ED525F6);
  *(_DWORD *)(v4 - 192) = LODWORD(STACK[0x2AC]) ^ v7;
  *(_DWORD *)(v4 - 176) = v7 - 1187942930 + v6;
  *(_QWORD *)(v4 - 168) = STACK[0x318];
  *(_QWORD *)(v4 - 160) = v5 + 0x6BB64013357C0C0DLL;
  v8 = LODWORD(STACK[0x300]) - v7 + (((v0 + 272) | 0x10) ^ 0x947A5FB2);
  *(_DWORD *)(v4 - 200) = (v0 - 92) ^ v7;
  *(_DWORD *)(v4 - 196) = v8;
  *(_QWORD *)(v4 - 184) = &STACK[0x640];
  v9 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * (v0 | 0x2C)) - 8))(v4 - 200);
  v10 = *(_DWORD *)(v4 - 188);
  LODWORD(STACK[0x524]) = v10;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * ((703 * (v10 == -1262737048)) ^ v0)) - 4))(v9);
}

uint64_t sub_1000472A0()
{
  int v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v1 + 8 * ((1448 * (v0 - 89778894 < ((v2 + 213) | 0x142u) - 969)) ^ v2)))();
}

uint64_t sub_1000472D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47,int a48)
{
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;

  v57 = STACK[0x330];
  v58 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t *, unint64_t, _QWORD, unint64_t *))(v53 + 8 * (v52 & 0x2FD09642)))(*(unsigned int *)STACK[0x330], (v48 + v49 + 2), LODWORD(STACK[0x240]), (*(_DWORD *)(STACK[0x330] + 52) - 1365500565), &STACK[0x640], STACK[0x318], (LODWORD(STACK[0x300]) - 1894502684), &STACK[0x1920]);
  v60 = (v58 ^ 0xBF97EAB7) + 2147418078 + (((_DWORD)v58 << ((v52 + 23) ^ 0xC6)) & 0x7F2FD56E);
  if (v60 == 1335290520)
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v50
                                                                 + 8
                                                                 * (int)((STACK[0x3E0] + 447) ^ (94
                                                                                               * ((LODWORD(STACK[0x2D0]) - 1723469489) < 3))))
                                                     - ((STACK[0x3E0] + 468) ^ 0x593)))(v58, v59);
  if (v60 == 1066855061)
  {
    v67 = STACK[0x3E0];
    v68 = (STACK[0x3E0] - 931) | 0xC2;
    LODWORD(STACK[0x3D8]) = STACK[0x3E0] - 374;
    ((void (*)(_QWORD, unint64_t, _QWORD))STACK[0x2E8])(*(unsigned int *)STACK[0x2E0], STACK[0x318], (LODWORD(STACK[0x300]) - 1894502684));
    v69 = *(_DWORD *)(v57 + 52);
    v70 = STACK[0x470];
    v71 = LODWORD(STACK[0x408]) ^ 0xBFBE7F77;
    v72 = (2 * LODWORD(STACK[0x408])) & 0x7F7CFEEE;
    v73 = 1755732067 * ((2 * ((v56 - 200) & 0x5213F380) - (v56 - 200) + 770444413) ^ 0xF32AB1A6);
    *(_DWORD *)(v56 - 184) = (a47 & 0xFC7EBFFE ^ 0xAC48B466) - v73 + (a48 & 0x7FFFFFFF ^ 0xA91B052A ^ v68) - 2247712;
    *(_QWORD *)(v56 - 200) = v70;
    *(_QWORD *)(v56 - 192) = &STACK[0x1920];
    *(_DWORD *)(v56 - 156) = v73 + v67 - 888;
    *(_DWORD *)(v56 - 164) = v71 - v73 + v72 + 1166014368;
    *(_DWORD *)(v56 - 160) = v69 - v73 + 750334282;
    *(_QWORD *)(v56 - 176) = v51;
    v74 = (*(uint64_t (**)(uint64_t))(v53 + 8 * ((int)v67 - 868)))(v56 - 200);
    v75 = *(_DWORD *)(v56 - 168);
    LODWORD(STACK[0x524]) = v75;
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v50
                                                        + 8
                                                        * ((((v75 == -1262737048) << 7) | ((v75 == -1262737048) << 8)) ^ LODWORD(STACK[0x3D8])))
                                            - 12))(v74);
  }
  else
  {
    v61 = STACK[0x234] & 0xEF297FEF;
    v62 = ((v60 << (STACK[0x234] & 0xEF ^ v55)) + 13773526) & 0x697852D0;
    v63 = 1178560073 * ((~(v54 | 0x4ABC1A0D) + (v54 & 0x4ABC1A0D)) ^ 0xFD79D90);
    *(_QWORD *)(v56 - 192) = STACK[0x238];
    v64 = STACK[0x3E0] - v63 + 293;
    LODWORD(STACK[0x2D4]) = v60;
    *(_DWORD *)(v56 - 200) = v63 + v60 - v62 + 1965375187;
    *(_DWORD *)(v56 - 196) = v64;
    v65 = sub_10006D9C4((_DWORD *)(v56 - 200));
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v50
                                                        + 8
                                                        * (int)((30 * (LODWORD(STACK[0x524]) != v61 - 1262737190)) ^ v61))
                                            - (v61
                                             + 825)
                                            + 963))(v65);
  }
}

uint64_t sub_1000474D0()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((61 * (v1 - 89778893 < ((v0 - 1175) | 0x200u) - 770)) ^ v0))
                            - (v0 ^ 0x69Fu)
                            + 768))();
}

uint64_t sub_100047518@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;

  v7 = (a1 - 115086959) & 0x6DC13FA;
  v8 = STACK[0x580];
  v9 = STACK[0x564];
  v10 = 1374699841 * (((v5 | 0xF03C7571) - (v5 & 0xF03C7571)) ^ 0x9DC86D78);
  *(_QWORD *)(v6 - 152) = v1;
  *(_DWORD *)(v6 - 144) = v9 - v10 - 1366996386;
  *(_DWORD *)(v6 - 192) = (a1 + 1695026680) ^ v10;
  *(_QWORD *)(v6 - 200) = v8;
  *(_QWORD *)(v6 - 168) = v3;
  *(_QWORD *)(v6 - 184) = STACK[0x318];
  *(_DWORD *)(v6 - 160) = ((v7 + 762104911) * v2 - 684535768) ^ v10;
  v11 = sub_100081D38(v6 - 200);
  v12 = *(_DWORD *)(v6 - 176);
  LODWORD(STACK[0x524]) = v12;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4
                                                      + 8
                                                      * ((1226 * (v12 == ((v7 + 886445375) & 0xCB29EFB4) - 1262738460)) ^ v7))
                                          - 4))(v11);
}

void sub_100047630()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;

  *(_DWORD *)(v3 - 200) = (v0 + 2138961948) ^ (535753261 * ((2 * (v1 & 0x65A95898) - v1 + 441886561) ^ 0x10A2A94E));
  sub_10008134C((_DWORD *)(v3 - 200));
  LODWORD(STACK[0x2D0]) += (v0 - 1270) ^ v2;
  v4 = 3804331 * ((~(v1 | 0xD8CEF2E3) + (v1 & 0xD8CEF2E3)) ^ 0x59E428EA);
  *(_QWORD *)(v3 - 176) = STACK[0x280];
  *(_BYTE *)(v3 - 200) = v4 ^ 0x63;
  *(_DWORD *)(v3 - 184) = v4 + v0 + 256;
  *(_QWORD *)(v3 - 192) = STACK[0x278];
  ((void (*)(uint64_t))STACK[0x270])(v3 - 200);
  LODWORD(STACK[0x524]) = *(_DWORD *)(v3 - 180);
  LODWORD(STACK[0x2D4]) = 1335290520;
  JUMPOUT(0x10004772CLL);
}

uint64_t sub_100047830(unint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  STACK[0x500] = STACK[0x338] + 267 * (v1 ^ 0x231u) - 710;
  STACK[0x4D8] = a1;
  return (*(uint64_t (**)(void))(v2 + 8 * (((3 * (v1 ^ 0x281) - 530) * (v3 <= a1)) ^ v1)))();
}

uint64_t sub_1000478DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, uint64_t a6, int a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = (v12 + a3);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(v14 + v15) ^ *(_BYTE *)(v9 + (v15 & 0xF)) ^ *(_BYTE *)(v10 + (v15 & 0xF)) ^ *(_BYTE *)((v15 & 0xF) + v8 + 2) ^ ((v15 & 0xF) * a5) ^ a8;
  LODWORD(v15) = v12 - 1 != ((v11 + 733) ^ a7);
  return (*(uint64_t (**)(void))(v13 + 8 * (int)((v15 | (32 * v15)) ^ v11)))();
}

uint64_t sub_100047938(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, int a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v16 = (v11 - 389) | a4;
  *(_BYTE *)(a1 + (v12 + a6 + v16)) = *(_BYTE *)(v15 + (v12 + a6 + v16)) ^ *(_BYTE *)(v9 + (((_BYTE)v12 + (_BYTE)a6 + ((v11 + 123) | a4)) & 0xF)) ^ *(_BYTE *)(v10 + ((v12 + a6 + v16) & 0xFLL)) ^ *(_BYTE *)((((_BYTE)v12 + (_BYTE)a6 + ((v11 + 123) | a4)) & 0xF) + v8 + 2) ^ (((v12 + a6 + v16) & 0xF) * a5) ^ a8;
  return (*(uint64_t (**)(void))(v14 + 8 * ((((v12 + a6 + 1268) < 0x150) * v13) ^ v11)))();
}

uint64_t sub_10004799C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int8x16_t a34)
{
  uint64_t v34;
  int8x16_t *v35;
  uint64_t v36;
  int8x16_t *v37;

  v37 = (int8x16_t *)((char *)&STACK[0x650] + v34 - 0x1715EF98EC84182FLL);
  v37[-12] = veorq_s8(*v35, a34);
  STACK[0x5E8] += (a5 - 415667772) & 0x18C695FA ^ 0x492;
  STACK[0x5F0] = a1;
  STACK[0x5F8] = a1;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 + 8 * (a5 ^ (506 * (&v37[-12] == (int8x16_t *)a1))))
                                                                                                - 12))(a1, a2, 26, 230, a3, a4);
}

uint64_t sub_100047A28@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  unsigned __int8 v90;
  int v91;
  char v92;
  unsigned __int8 v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  char v104;
  int v105;
  unsigned int v106;
  unsigned __int8 v107;
  unsigned int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  BOOL v113;
  char v114;
  char v115;
  int v116;
  char v117;
  int v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  char *v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  char *v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  int v199;
  unint64_t v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  int v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  int v228;
  int v229;
  unsigned int v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  int v237;
  int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  int v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  int v268;
  int v269;
  unsigned int v270;
  int v271;
  int v272;
  unsigned int v273;
  int v274;
  int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  unint64_t v283;
  int v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  int v288;
  int v289;
  char *v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  char *v295;
  uint64_t v296;
  unsigned int v297;
  int v298;
  int v299;
  int v300;
  char *v301;
  int v302;
  unsigned int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  char *v315;
  char *v316;
  int v317;
  int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  int v323;
  unint64_t v324;
  unint64_t v325;
  int v326;
  int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  int v334;
  unint64_t v335;
  unsigned int v336;
  int v337;
  _BOOL4 v338;
  _BYTE *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  uint64_t v356;

  v61 = (unsigned __int8 *)&STACK[0x1930] + v58;
  *v61 = *a1;
  v62 = 601 * (a4 ^ 0x4F1);
  *(_QWORD *)(v61 + 1) = *(_QWORD *)(a1 + 1);
  *(_DWORD *)(v61 + 9) = *(_DWORD *)(a1 + 9);
  *(_WORD *)(v61 + 13) = *(_WORD *)(a1 + 13);
  v61[15] = a1[15];
  v63 = *((_QWORD *)a1 + 1);
  *((_QWORD *)v61 + 2) = *(_QWORD *)a1;
  *((_QWORD *)v61 + 3) = v63;
  v64 = 5 * (v62 ^ 0x5E7);
  v65 = *(_QWORD *)(v60 + 8 * (v62 ^ 0x470)) - 4;
  v66 = *(_QWORD *)(v60 + 8 * (v62 ^ 0x48F)) - 4;
  v67 = *(_QWORD *)(v60 + 8 * (v62 ^ 0x4A1)) - 8;
  v68 = *(_BYTE *)(v67 + (v61[14] ^ 0x86));
  v69 = *(_BYTE *)(v67 + (v61[10] ^ 0xCBLL));
  LODWORD(v63) = (((*(unsigned __int8 *)(v66 + (v61[8] ^ 0x65)) + (v61[8] ^ 0x34) - 15) ^ 0xF5) << 24) | (((v69 ^ (16 * ~v69)) ^ 0x78) << 8);
  v70 = *(_QWORD *)(v60 + 8 * (v62 ^ 0x41F)) - 8;
  v71 = *(unsigned __int8 *)(v70 + (v61[1] ^ a2));
  v72 = (v71 >> 1) ^ (((((v71 ^ 0xF5) + (v71 | 0x2A) + 1) ^ v71 & 0xDF) & 0xF0) >> 4) ^ 0x10;
  v73 = ((v61[3] ^ 0xB8) + *(_BYTE *)(v65 + ((5 * (v62 ^ 0xE7) - 85) ^ v61[3])) - 23) | (((v71 ^ (v72 - ((2 * v72) & 0x38) - 100)) ^ 0xAA) << 16);
  LOBYTE(v72) = *(_BYTE *)(v67 + (v61[6] ^ 0x2ELL));
  v74 = *(_BYTE *)(v70 + (v61[13] ^ 0x5BLL)) ^ 0x20;
  v75 = ((v61[7] ^ 0x90) + *(_BYTE *)(v65 + (v61[7] ^ 0x7CLL)) - 23) | ((((v61[4] ^ 0x13)
                                                                                         + *(unsigned __int8 *)(v66 + (v61[4] ^ 0x42))
                                                                                         - 15) ^ a3) << 24) | (((v72 ^ (16 * ~(_BYTE)v72)) ^ 0x64) << 8);
  v76 = *(unsigned __int8 *)(v70 + (v61[13] ^ 0x5BLL)) ^ 0x20 ^ (v74 >> 4) ^ (v74 >> 1);
  v77 = (((v68 ^ (16 * ~v68)) ^ 0xB4) << 8) | ((v76 - ((2 * v76) & 0x2E) + 23) << 16);
  v78 = v73 | (((*(unsigned __int8 *)(v66 + (*v61 ^ 0x81)) + (*v61 ^ 0xD0) - 15) ^ 0x3C) << 24);
  LOBYTE(v73) = *(_BYTE *)(v70 + (v61[5] ^ 0xEDLL));
  v79 = ((v73 ^ 0x20) >> 4) ^ ((v73 ^ 0x20) >> 1);
  v342 = v70;
  v344 = v66;
  v345 = v65;
  LODWORD(v63) = v63 & 0xFF00FF00 | ((v61[11] ^ 0x3E) + *(_BYTE *)(v65 + (v61[11] ^ 0xD2)) - 23) | (((*(_BYTE *)(v70 + (v61[9] ^ 0x38)) ^ ((*(_BYTE *)(v70 + (v61[9] ^ 0x38)) ^ 0x20) >> 4) ^ ((*(_BYTE *)(v70 + (v61[9] ^ 0x38)) ^ 0x20) >> 1)) ^ 0x8B) << 16);
  v80 = v61[15];
  v81 = v77 | ((((v61[12] ^ 0x13) + *(unsigned __int8 *)(v66 + (v61[12] ^ 0x42)) - 15) ^ a3) << 24);
  v343 = v67;
  LOBYTE(v61) = *(_BYTE *)(v67 + (v61[2] ^ 0x22));
  LODWORD(STACK[0x390]) = (v81 & 0xFFFFFF00 | (*(_BYTE *)(v65 + (v80 ^ 0x38)) + (v80 ^ 0xD4) - 23)) ^ 0x950CE11;
  LODWORD(STACK[0x338]) = (v78 & 0xFFFF00FF | (((v61 ^ (16 * ~(_BYTE)v61)) ^ 0x4A) << 8)) ^ 0x41298170;
  v82 = STACK[0x5F0];
  LODWORD(STACK[0x2A0]) = (v75 & 0xFF00FFFF | ((v73 ^ 0x6C ^ (v79
                                                                                              - ((2 * v79) & 0xC7)
                                                                                              + 99)) << 16)) ^ 0x2FE0801C;
  LODWORD(STACK[0x368]) = v63 ^ HIDWORD(a32);
  v340 = (_BYTE *)STACK[0x5F8];
  v341 = v82;
  STACK[0x388] = 14;
  v83 = (unsigned __int8 *)v82;
  v84 = v67;
  LODWORD(v61) = *(unsigned __int8 *)(v67 + (*(unsigned __int8 *)(v82 + 14) ^ 0xD9));
  LODWORD(v352) = v64 - 503;
  v85 = (v64 - 1080973834) ^ 0xBF91AC9B;
  STACK[0x2C8] = v85;
  v86 = *(unsigned __int8 *)(v82 + v85);
  HIDWORD(a12) = v64 - 1537;
  v87 = (((16 * (_DWORD)v61) ^ 0x70) + ((v64 - 1537) ^ 0xFFFFFFE0) + (~(2 * ((16 * (_DWORD)v61) ^ 0x70)) | 0x7F)) ^ v61;
  LOBYTE(v61) = v86 ^ 0xB7;
  v88 = v66;
  LOBYTE(v63) = *(_BYTE *)(v66 + (v86 ^ a3));
  STACK[0x380] = 10;
  STACK[0x3A8] = 15;
  v89 = v83[15];
  v90 = (v63 + (_BYTE)v61 - 15) ^ 0xE5;
  if ((v89 & 0x20) != 0)
    v91 = -32;
  else
    v91 = 32;
  v92 = *(_BYTE *)(v67 + (v83[10] ^ 0xFBLL));
  v355 = *(unsigned __int8 *)(v345 + ((v91 + v89) ^ 0xDDLL)) + ((v91 + v89) ^ 0x31);
  v93 = v92 ^ (16 * ~v92);
  STACK[0x370] = 6;
  v94 = *(unsigned __int8 *)(v67 + (v83[6] ^ 0x51));
  STACK[0x2F0] = 12;
  HIDWORD(v95) = v94 ^ (((16 * v94) ^ 0x70) + (((16 * v94) ^ 0x70u) >> 6 << 7) + 71) ^ 0x3F;
  LODWORD(v95) = BYTE4(v95) & 0xF8;
  STACK[0x268] = 0;
  v96 = ((v95 >> 3) | ((unint64_t)v90 << 13)) ^ 0x58F620A6;
  v97 = (v96 >> 21) | ((_DWORD)v96 << 11);
  v98 = *(unsigned __int8 *)(v88 + (v83[12] ^ 0xF7) - 2 * ((v83[12] ^ 0xF7) & 0xAEu) + 174) - (v83[12] ^ 0xF7);
  v99 = *v83;
  STACK[0x328] = 3;
  v100 = v83[3];
  v101 = *(unsigned __int8 *)(v88 + (v99 ^ 0xD8)) + (v99 ^ 0x76) - 2 * (v99 ^ 0x76);
  v102 = *(unsigned __int8 *)(v345 + (v100 ^ 0x57));
  STACK[0x340] = 8;
  v103 = (v100 ^ 0xFFFFFFBB) + v102;
  LOBYTE(v99) = (v83[8] ^ 0xA7) + *(_BYTE *)(v88 + (v83[8] ^ 0xF6));
  v104 = v99 - ((2 * v99 + 98) & 0x4E);
  STACK[0x2F8] = 7;
  LOBYTE(v102) = (v83[7] ^ 0xE9) + *(_BYTE *)(v345 + (v83[7] ^ 5));
  STACK[0x260] = 13;
  LODWORD(v100) = *(unsigned __int8 *)(v342 + (v83[13] ^ 0x12));
  v105 = v64;
  v106 = v100 ^ ((unint64_t)((v100 >> 3) & 4 ^ v100 & 0xA4 | (v100 >> 3) & 0xFFFFFFFB ^ v100 & 0x5A) >> 1);
  LODWORD(v100) = *(unsigned __int8 *)(v84 + (v83[2] ^ 0x26));
  v107 = *(_BYTE *)(v342 + (v83[5] ^ 0x9CLL));
  v108 = v100 ^ ~(16 * ~(_DWORD)v100);
  LODWORD(v100) = ((v107 ^ 0x20) >> 4) ^ ((v107 ^ 0x20) >> 1);
  v109 = (v102 - 23) | ((v107 ^ 0xE6 ^ (v100 - ((2 * v100) & 0xC7) + 99)) << 16);
  STACK[0x220] = 9;
  v110 = *(unsigned __int8 *)(v342 + (v83[9] ^ 0x76));
  v111 = (v110 & 8 ^ 0x7F) + 2 * (v110 & 8);
  v112 = (v110 ^ 0x20u) >> 3;
  v113 = ((v111 + 1) & v112) == 0;
  v114 = v111 - 67;
  v115 = -69 - v111;
  if (v113)
    v115 = v114;
  v116 = v110 ^ ((((v112 + v115 - 60) ^ (v110 ^ 0x20) & 0xF7) & 0xFE) >> 1);
  v117 = *(_BYTE *)(v345 + (v83[11] ^ 0x12)) + (v83[11] ^ 0xFE);
  v118 = *(unsigned __int8 *)(v342 + (v83[1] ^ 0xCFLL));
  v119 = v118 & 0xFFFFFFBF ^ 0x23 ^ ((v118 | 0xFFFFFFBF) + 68);
  v120 = v119 ^ (v119 >> 4) ^ (v119 >> 1);
  v121 = *(_QWORD *)(v60 + 8 * (v105 - 1620)) - 4;
  LODWORD(v349) = v93 ^ 0x7E;
  v122 = *(_DWORD *)(v121 + 4 * (v93 ^ 0xF1u));
  HIDWORD(v123) = v122 ^ 0xC11B;
  LODWORD(v123) = v122 ^ 0xFAFC0000;
  v124 = *(_QWORD *)(v60 + 8 * (v105 ^ 0x62C)) - 8;
  v125 = *(_DWORD *)(v124 + 4 * (v106 ^ 0x47));
  HIDWORD(v356) = v105;
  HIDWORD(v348) = v101 - 16;
  v126 = (char *)*(&off_100212870 + (v105 ^ 0x6FD)) - 8;
  v127 = (v123 >> 16) ^ *(_DWORD *)&v126[4 * (BYTE4(v348) ^ 0xF9)] ^ (16 * (v125 ^ 0xC35D5637)
                                                                    + 1505268702
                                                                    - ((32 * (v125 ^ 0xC35D5637)) & 0xB37127A0));
  v128 = v125 ^ (v127 + 1877695470 - ((2 * v127) & 0xDFD6B7DC));
  LODWORD(v348) = v109 ^ v97;
  v129 = v109 ^ v97 ^ 0xDD03A24B;
  v130 = (char *)*(&off_100212870 + v105 - 1510) - 4;
  v131 = *(_DWORD *)(v121 + 4 * (v87 ^ 0x71u));
  v132 = *(_DWORD *)&v130[4 * ((v109 ^ v97) ^ 0x78)] ^ v128;
  HIDWORD(v123) = v131 ^ 0xC11B;
  LODWORD(v123) = v131 ^ 0xFAFC0000;
  HIDWORD(v349) = v120;
  v133 = *(_DWORD *)(v124 + 4 * (v120 ^ 0xBFu)) ^ 0xC35D5637;
  v134 = (v123 >> 16) ^ (16 * v133 + 1505268702 - ((32 * v133) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * HIBYTE(v129)];
  HIDWORD(v347) = (v117 - 23);
  v135 = *(_DWORD *)&v130[4 * (HIDWORD(v347) ^ 0xB9)] ^ v133 ^ (v134 + 1877695470 - ((2 * v134) & 0xDFD6B7DC));
  v351 = __PAIR64__(v87, v108);
  v136 = *(_DWORD *)(v121 + 4 * (v108 ^ 0xFBu));
  HIDWORD(v123) = v136 ^ 0xC11B;
  LODWORD(v123) = v136 ^ 0xFAFC0000;
  v137 = *(_DWORD *)(v124 + 4 * BYTE2(v129)) ^ 0xC35D5637;
  HIDWORD(v346) = (v104 + 24);
  v138 = (v123 >> 16) ^ *(_DWORD *)&v126[4 * (HIDWORD(v346) ^ 0x40)] ^ (16 * v137
                                                                      + 1505268702
                                                                      - ((32 * v137) & 0xB37127A0));
  LODWORD(v347) = v355 - 23;
  v139 = *(_DWORD *)&v130[4 * ((v355 - 23) ^ 0xEB)] ^ v137 ^ (v138
                                                                             + 1877695470
                                                                             - ((2 * v138) & 0xDFD6B7DC));
  v350 = __PAIR64__(v106, v116);
  v140 = *(_DWORD *)(v124 + 4 * (v116 ^ 0x5Cu)) ^ 0xC35D5637;
  v141 = *(_DWORD *)(v121 + 4 * (BYTE1(v97) ^ 0x31u));
  HIDWORD(v123) = v141 ^ 0xC11B;
  LODWORD(v123) = v141 ^ 0xFAFC0000;
  LODWORD(v346) = v98 - 16;
  v142 = (v123 >> 16) ^ *(_DWORD *)&v126[4 * ((v98 - 16) ^ 0xF7)] ^ (16 * v140
                                                                                    + 1505268703
                                                                                    + ~((32 * v140) & 0xB37127A0));
  HIDWORD(a19) = v103 - 23;
  v143 = *(_DWORD *)&v130[4 * ((v103 - 23) ^ 0x33)] ^ v140 ^ (v142
                                                                             + 1877695470
                                                                             - ((2 * v142) & 0xDFD6B7DC));
  v144 = *(_DWORD *)(v124 + 4 * (BYTE2(v143) ^ 0xBBu)) ^ 0xC35D5637;
  v145 = *(_DWORD *)(v121 + 4 * (BYTE1(v139) ^ 0xF4u));
  HIDWORD(v123) = v145 ^ 0xC11B;
  LODWORD(v123) = v145 ^ 0xFAFC0000;
  BYTE1(v145) = BYTE1(v135) ^ 0xAD;
  v146 = v144 ^ *(_DWORD *)&v126[4 * (HIBYTE(v132) ^ 0x94)] ^ *(_DWORD *)&v130[4 * (v135 ^ 0xDB)] ^ (16 * v144 + 1505268702 - ((32 * v144) & 0xB37127A0)) ^ (v123 >> 16);
  v147 = *(_DWORD *)(v124 + 4 * (BYTE2(v132) ^ 0xB1u));
  v148 = *(_DWORD *)(v121 + 4 * ((unsigned __int16)(v143 ^ 0x22E) >> 8));
  HIDWORD(v123) = v148 ^ 0xC11B;
  LODWORD(v123) = v148 ^ 0xFAFC0000;
  v149 = (16 * (v147 ^ 0xC35D5637) + 1505268702 - ((32 * (v147 ^ 0xC35D5637)) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * ((v135 ^ 0xF15ADDB) >> 24)] ^ (v123 >> 16);
  v150 = *(_DWORD *)&v130[4 * (v139 ^ 0x80)] ^ v147 ^ (v149 + 1877695470 - ((2 * v149) & 0xDFD6B7DC));
  v151 = *(_DWORD *)(v124 + 4 * (BYTE2(v135) ^ 0xD6u)) ^ 0xC35D5637;
  v152 = (16 * v151 + 1505268702 - ((32 * v151) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * (HIBYTE(v139) ^ 0x19)];
  v153 = *(_DWORD *)(v121 + 4 * (BYTE1(v132) ^ 0xB0u));
  HIDWORD(v123) = v153 ^ 0xC11B;
  LODWORD(v123) = v153 ^ 0xFAFC0000;
  v154 = *(_DWORD *)&v130[4 * (v143 ^ 0x2E)] ^ v151 ^ (v123 >> 16);
  v155 = *(_DWORD *)(v124 + 4 * (BYTE2(v139) ^ 0x32u));
  v156 = *(_DWORD *)(v121 + 4 * BYTE1(v145));
  HIDWORD(v123) = v156 ^ 0xC11B;
  LODWORD(v123) = v156 ^ 0xFAFC0000;
  v157 = (v123 >> 16) ^ *(_DWORD *)&v126[4 * (HIBYTE(v143) ^ 0xBD)] ^ (16 * (v155 ^ 0xC35D5637)
                                                                     + 1505268703
                                                                     + ~((32 * (v155 ^ 0xC35D5637)) & 0xB37127A0));
  v158 = v155 ^ *(_DWORD *)&v130[4 * (v132 ^ 0x97)] ^ 0xB29480F3 ^ (v157
                                                                                   + 1877695470
                                                                                   - ((2 * v157) & 0xDFD6B7DC));
  v159 = v158
       - ((2 * v158) & 0x5F186BF6)
       + 797718011
       - ((2 * (v158 - ((2 * v158) & 0x5F186BF6) + 797718011)) & 0x43CD8C50)
       + 568772136;
  v160 = *(_DWORD *)(v124 + 4 * (BYTE2(v159) ^ 0x25u));
  v161 = v154 ^ (v152 + 1877695471 + ~((2 * v152) & 0xDFD6B7DC));
  BYTE2(v152) = BYTE2(v161) ^ 0xEB;
  v162 = *(_DWORD *)(v121 + 4 * ((unsigned __int16)(v161 ^ 0xDFF9) >> 8));
  v163 = (16 * (v160 ^ 0xC35D5637) + 1505268702 - ((32 * (v160 ^ 0xC35D5637)) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * (HIBYTE(v146) ^ 0xF9)] ^ (((v162 ^ 0xFAFCC11B) >> (v146 & 0x10) >> (v146 & 0x10 ^ 0x10)) + ((v162 << 16) ^ 0xC11B0000));
  v164 = *(_DWORD *)&v130[4 * (v150 ^ 0xEE)] ^ v160 ^ (v163 + 1877695470 - ((2 * v163) & 0xDFD6B7DC));
  v146 ^= 0x10B18FCEu;
  v165 = *(_DWORD *)(v124 + 4 * BYTE2(v146)) ^ 0xC35D5637;
  v166 = *(_DWORD *)(v121 + 4 * (BYTE1(v159) ^ 0x55u));
  HIDWORD(v123) = v166 ^ 0xC11B;
  LODWORD(v123) = v166 ^ 0xFAFC0000;
  v167 = (16 * v165 + 1505268702 - ((32 * v165) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * (HIBYTE(v150) ^ 0x88)] ^ (v123 >> 16);
  v168 = *(_DWORD *)&v130[4 * (v161 ^ 0xF9)];
  v169 = *(_DWORD *)&v126[4 * (HIBYTE(v161) ^ 5)];
  HIDWORD(v123) = v169 ^ 0x3DE;
  LODWORD(v123) = v169 ^ 0x59B89000;
  v170 = v168 ^ v165 ^ (v167 + 1877695470 - ((2 * v167) & 0xDFD6B7DC));
  v171 = *(_DWORD *)(v124 + 4 * (BYTE2(v150) ^ 0x68u)) ^ 0xC35D5637;
  v172 = *(_DWORD *)(v121 + 4 * BYTE1(v146));
  v173 = (((v123 >> 10) ^ 0x25EB099C) << 10) ^ (16 * v171) ^ (((v123 >> 10) ^ 0x25EB099C) >> 22);
  HIDWORD(v123) = v172 ^ 0xC11B;
  LODWORD(v123) = v172 ^ 0xFAFC0000;
  v174 = *(_DWORD *)(v121 + 4 * (BYTE1(v150) ^ 0x9Bu));
  v175 = *(_DWORD *)&v130[4 * (v159 ^ 0x1B)] ^ v171 ^ (v123 >> 16) ^ (v173
                                                                                     + 1877695470
                                                                                     - ((2 * v173) & 0xDFD6B7DC));
  HIDWORD(v123) = v174 ^ 0xC11B;
  LODWORD(v123) = v174 ^ 0xFAFC0000;
  v176 = *(_DWORD *)(v124 + 4 * BYTE2(v152)) ^ 0xC35D5637;
  v177 = (v123 >> 16) ^ (16 * v176 + 1505268702 - ((32 * v176) & 0xB37127A0)) ^ *(_DWORD *)&v126[4
                                                                                               * (HIBYTE(v159) ^ 0xC8)];
  v178 = *(_DWORD *)&v130[4 * (v146 ^ 0x33)] ^ v176 ^ (v177 + 1877695470 - ((2 * v177) & 0xDFD6B7DC));
  v179 = *(_DWORD *)(v124 + 4 * (BYTE2(v178) ^ 0x62u)) ^ 0xC35D5637;
  v180 = v175 ^ 0xF1F7E4A6;
  v181 = *(_DWORD *)(v121 + 4 * ((unsigned __int16)(v175 ^ 0xE4A6) >> 8));
  v182 = (16 * v179 + 1505268702 - ((32 * v179) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * (HIBYTE(v164) ^ 0x1E)];
  HIDWORD(v123) = v181 ^ 0xC11B;
  LODWORD(v123) = v181 ^ 0xFAFC0000;
  v183 = *(_DWORD *)(v121 + 4 * ((unsigned __int16)(v178 ^ 0x2957) >> 8));
  v184 = *(_DWORD *)&v130[4 * (v170 ^ 0x68)] ^ v179 ^ (v123 >> 16) ^ (v182
                                                                                     + 1877695470
                                                                                     - ((2 * v182) & 0xDFD6B7DC));
  HIDWORD(v123) = v183 ^ 0xC11B;
  LODWORD(v123) = v183 ^ 0xFAFC0000;
  v185 = *(_DWORD *)(v124 + 4 * (BYTE2(v164) ^ 6u)) ^ 0xC35D5637;
  v186 = (16 * v185 + 1505268702 - ((32 * v185) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * (HIBYTE(v170) ^ 0xCE)] ^ (v123 >> 16);
  v187 = *(_DWORD *)&v130[4 * (v175 ^ 0x15)] ^ v185 ^ (v186 + 1877695470 - ((2 * v186) & 0xDFD6B7DC));
  v188 = *(_DWORD *)(v124 + 4 * (BYTE2(v170) ^ 0x60u)) ^ 0xC35D5637;
  v189 = *(_DWORD *)(v121 + 4 * (BYTE1(v164) ^ 0xCDu));
  v190 = (16 * v188 + 1505268702 - ((32 * v188) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * HIBYTE(v180)] ^ (__PAIR64__(v189 ^ 0xC11Bu, v189 ^ 0xFAFC0000) >> 16);
  v191 = *(_DWORD *)&v130[4 * (v178 ^ 0x57)] ^ v188 ^ (v190 + 1877695470 - ((2 * v190) & 0xDFD6B7DC));
  if ((v170 & 0x1000) != 0)
    v192 = -16;
  else
    v192 = 16;
  v193 = *(_DWORD *)(v124 + 4 * BYTE2(v180)) ^ 0xC35D5637;
  v194 = *(_DWORD *)(v121 + 4 * (((BYTE1(v170) ^ 0xC) + v192) ^ 0x83u));
  v195 = *(_DWORD *)&v126[4 * (HIBYTE(v178) ^ 0xA1)] ^ HIWORD(v194);
  v196 = v195 ^ (v194 << 16) ^ (16 * v193 + 1505268702 - ((32 * v193) & 0xB37127A0)) ^ 0xC11BFAFC;
  v197 = v196 + 1877695470 - 2 * (v196 & 0x6FEB5BEF ^ v195 & 1);
  v198 = *(_DWORD *)&v130[4 * (v164 ^ 0x54)] ^ v193;
  v199 = *(_DWORD *)(v121 + 4 * ((unsigned __int16)(v191 ^ 0x8D48) >> 8));
  HIDWORD(v200) = v199 ^ 0xC11B;
  LODWORD(v200) = v199 ^ 0xFAFC0000;
  v201 = v198 ^ v197;
  v202 = *(_DWORD *)(v124 + 4 * ((v201 ^ 0xEFBC3B44) >> 16)) ^ 0xC35D5637;
  v203 = (v200 >> 16) ^ *(_DWORD *)&v126[4 * (HIBYTE(v184) ^ 0xCC)] ^ (16 * v202
                                                                     + 1505268703
                                                                     + ~((32 * v202) & 0xB37127A0));
  v204 = *(_DWORD *)(v121 + 4 * ((unsigned __int16)(v201 ^ 0x3B44) >> 8));
  HIDWORD(v200) = v204 ^ 0xC11B;
  LODWORD(v200) = v204 ^ 0xFAFC0000;
  v205 = *(_DWORD *)&v130[4 * (v187 ^ 0xA9)] ^ v202 ^ (v203 + 1877695470 - ((2 * v203) & 0xDFD6B7DC));
  LOWORD(v202) = v184 ^ 0xD583;
  v206 = *(_DWORD *)(v124 + 4 * (((v184 ^ 0x255FD583) >> 16) ^ 0xC3u)) ^ 0xC35D5637;
  v207 = (v200 >> 16) ^ *(_DWORD *)&v126[4 * HIBYTE(v187)] ^ (16 * v206 + 1505268702 - ((32 * v206) & 0xB37127A0));
  v208 = *(_DWORD *)&v130[4 * (v191 ^ 0x48)] ^ v206 ^ (v207 + 1877695470 - ((2 * v207) & 0xDFD6B7DC));
  v209 = *(_DWORD *)(v121 + 4 * BYTE1(v202));
  HIDWORD(v200) = v209 ^ 0xC11B;
  LODWORD(v200) = v209 ^ 0xFAFC0000;
  v210 = *(_DWORD *)(v124 + 4 * ((v187 ^ 0xE93411A9) >> 16)) ^ 0xC35D5637;
  v211 = (16 * v210 + 1505268702 - ((32 * v210) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * ((v191 ^ 0x807D8D48) >> 24)] ^ (v200 >> 16);
  v212 = *(_DWORD *)(v121 + 4 * (BYTE1(v187) ^ 0x82u));
  v213 = *(_DWORD *)&v130[4 * (v201 ^ 0x77)] ^ v210 ^ (v211 + 1877695470 - ((2 * v211) & 0xDFD6B7DC));
  HIDWORD(v200) = v212 ^ 0xC11B;
  LODWORD(v200) = v212 ^ 0xFAFC0000;
  v214 = *(_DWORD *)(v124 + 4 * (BYTE2(v191) ^ 0xBEu)) ^ 0xC35D5637;
  v215 = (v200 >> 16) ^ *(_DWORD *)&v126[4 * ((v201 ^ 0xEFBC3B44) >> 24)] ^ (16 * v214
                                                                           + 1505268702
                                                                           - ((32 * v214) & 0xB37127A0));
  v216 = *(_DWORD *)&v130[4 * v202] ^ v214 ^ (v215 + 1877695470 - ((2 * v215) & 0xDFD6B7DC));
  v217 = *(_DWORD *)(v124 + 4 * ((v216 ^ 0x950DA39D) >> 16)) ^ 0xC35D5637;
  v218 = *(_DWORD *)(v121 + 4 * (BYTE1(v213) ^ 0x89u));
  v219 = (16 * v217 + 1505268702 - ((32 * v217) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * ((v205 ^ 0x11521BCA) >> 24)];
  HIDWORD(v200) = v218 ^ 0xC11B;
  LODWORD(v200) = v218 ^ 0xFAFC0000;
  v220 = v219 + 1877695470 - ((2 * v219) & 0xDFD6B7DC);
  BYTE1(v219) = BYTE1(v208) ^ 0xD1;
  v221 = *(_DWORD *)(v124 + 4 * ((v205 ^ 0x11521BCA) >> 16));
  v222 = *(_DWORD *)&v130[4 * (v208 ^ 0x88)] ^ v217 ^ (v200 >> 16) ^ 0x71C9D6C4 ^ v220;
  v223 = v222 - ((2 * v222) & 0x93999D60);
  v224 = *(_DWORD *)(v121 + 4 * (BYTE1(v216) ^ 0x30u));
  HIDWORD(v200) = v224 ^ 0xC11B;
  LODWORD(v200) = v224 ^ 0xFAFC0000;
  v225 = (16 * (v221 ^ 0xC35D5637) + 1505268702 - ((32 * (v221 ^ 0xC35D5637)) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * (HIBYTE(v208) ^ 0xDF)] ^ (v200 >> 16);
  v213 ^= 0x7A851A70u;
  v226 = *(_DWORD *)&v130[4 * (v213 ^ 0x33)] ^ v221 ^ (v225 + 1877695470 - ((2 * v225) & 0xDFD6B7DC));
  v227 = *(_DWORD *)(v124 + 4 * (BYTE2(v208) ^ 0xA7u)) ^ 0xC35D5637;
  v228 = *(_DWORD *)(v121 + 4 * (BYTE1(v205) ^ 0x88u));
  HIDWORD(v200) = v228 ^ 0xC11B;
  LODWORD(v200) = v228 ^ 0xFAFC0000;
  v229 = (16 * v227 + 1505268702 - ((32 * v227) & 0xB37127A0)) ^ *(_DWORD *)&v126[4
                                                                                * (HIBYTE(v213) ^ -HIBYTE(v213) ^ ((HIBYTE(v213) ^ 0xFFFFFF16) + 234))
                                                                                + 932] ^ (v200 >> 16);
  v230 = *(_DWORD *)&v130[4 * (v216 ^ 0x9D)] ^ v227 ^ (v229 + 1877695470 - ((2 * v229) & 0xDFD6B7DC));
  v231 = *(_DWORD *)(v121 + 4 * BYTE1(v219));
  HIDWORD(v200) = v231 ^ 0xC11B;
  LODWORD(v200) = v231 ^ 0xFAFC0000;
  v232 = *(_DWORD *)(v124 + 4 * BYTE2(v213));
  v233 = (v200 >> 16) ^ *(_DWORD *)&v126[4 * (HIBYTE(v216) ^ 0x7C)] ^ (16 * (v232 ^ 0xC35D5637)
                                                                     + 1505268702
                                                                     - ((32 * (v232 ^ 0xC35D5637)) & 0xB37127A0));
  v234 = *(_DWORD *)&v130[4 * (v205 ^ 0xF9)] ^ v232 ^ (v233 + 1877695470 - ((2 * v233) & 0xDFD6B7DC));
  v235 = HIBYTE(v234) ^ 0xFFFFFFD6;
  v236 = *(_DWORD *)(v124 + 4 * (BYTE2(v234) ^ 0xDAu));
  v237 = *(_DWORD *)(v121 + 4 * ((unsigned __int16)(v230 ^ 0xDE69) >> 8));
  HIDWORD(v200) = v237 ^ 0xC11B;
  LODWORD(v200) = v237 ^ 0xFAFC0000;
  LOBYTE(v237) = v223 - 80;
  v238 = (v200 >> 16) ^ *(_DWORD *)&v126[4 * (((v223 + 1238159024) >> 24) ^ 0x20)] ^ (16 * (v236 ^ 0xC35D5637)
                                                                                                  + 1505268702
                                                                                                  - ((32 * (v236 ^ 0xC35D5637)) & 0xB37127A0));
  v239 = *(_DWORD *)&v130[4 * (v226 ^ 0xE4)] ^ v236 ^ (v238 + 1877695470 - ((2 * v238) & 0xDFD6B7DC));
  v240 = *(_DWORD *)(v121 + 4 * (BYTE1(v234) ^ 0x69u));
  HIDWORD(v200) = v240 ^ 0xC11B;
  LODWORD(v200) = v240 ^ 0xFAFC0000;
  v241 = *(_DWORD *)(v124 + 4 * (((v223 + 1238159024) >> 16) ^ 0xA6u)) ^ 0xC35D5637;
  v242 = v241 ^ *(_DWORD *)&v126[4 * (HIBYTE(v226) ^ 0x1E)] ^ *(_DWORD *)&v130[4 * (v230 ^ 0x69)] ^ ((v200 >> 16) + 1877695470 - ((2 * (v200 >> 16)) & 0xDFD6B7DC)) ^ (16 * v241 + 1505268702 - ((32 * v241) & 0xB37127A0));
  v243 = *(_DWORD *)(v124 + 4 * (BYTE2(v226) ^ 0xA7u)) ^ 0xC35D5637;
  v244 = *(_DWORD *)(v121 + 4 * (((unsigned __int16)(v223 - 12624) >> 8) ^ 0xA5u));
  HIDWORD(v200) = v244 ^ 0xC11B;
  LODWORD(v200) = v244 ^ 0xFAFC0000;
  v245 = (16 * v243 + 1505268702 - ((32 * v243) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * ((v230 ^ 0x5FEEDE69) >> 24)] ^ (v200 >> 16);
  v246 = *(_DWORD *)&v130[4 * (((v234 ^ 0x78) + (v234 ^ 0xFFFFFFB4) + 1) ^ 0xFFFFFFFE)
                        + 4 * (v234 ^ 0x78)] ^ v243 ^ (v245 + 1877695470 - ((2 * v245) & 0xDFD6B7DC));
  v247 = *(_DWORD *)(v124 + 4 * (BYTE2(v230) ^ 0x2Du)) ^ 0xC35D5637;
  v248 = *(_DWORD *)(v121 + 4 * (BYTE1(v226) ^ 0x89u));
  HIDWORD(v200) = v248 ^ 0xC11B;
  LODWORD(v200) = v248 ^ 0xFAFC0000;
  v249 = (v200 >> 16) ^ (16 * v247 + 1505268702 - ((32 * v247) & 0xB37127A0)) ^ *(_DWORD *)&v126[4
                                                                                               * (v235 & 0x90 ^ 0x86 ^ (~(2 * (v235 | 0x90)) + (v235 | 0x90)))];
  v250 = *(_DWORD *)&v130[4 * (v237 ^ 0xEB)] ^ v247 ^ (v249 + 1877695470 - ((2 * v249) & 0xDFD6B7DC));
  v251 = *(_DWORD *)(v124 + 4 * ((v250 ^ 0x59A5F4B7) >> 16)) ^ 0xC35D5637;
  v252 = *(_DWORD *)(v121 + 4 * ((unsigned __int16)(v246 ^ 0x872B) >> 8));
  HIDWORD(v200) = v252 ^ 0xC11B;
  LODWORD(v200) = v252 ^ 0xFAFC0000;
  v253 = (16 * v251 + 1505268702 - ((32 * v251) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * (HIBYTE(v239) ^ 0x11)] ^ (v200 >> 16);
  v254 = *(_DWORD *)&v130[4 * (v242 ^ 0xEE)] ^ v251 ^ (v253 + 1877695470 - ((2 * v253) & 0xDFD6B7DC));
  v255 = *(_DWORD *)(v124 + 4 * (BYTE2(v239) ^ 0x78u)) ^ 0xC35D5637;
  v256 = *(_DWORD *)(v121 + 4 * (BYTE1(v250) ^ 0x67u));
  HIDWORD(v200) = v256 ^ 0xC11B;
  LODWORD(v200) = v256 ^ 0xFAFC0000;
  v257 = v255 ^ *(_DWORD *)&v126[4 * (HIBYTE(v242) ^ 0xD6)] ^ *(_DWORD *)&v130[4 * (v246 ^ 0x18)] ^ (16 * v255 + 1505268702 - ((32 * v255) & 0xB37127A0)) ^ ((v200 >> 16) + 1877695470 - ((2 * (v200 >> 16)) & 0xDFD6B7DC));
  v258 = *(_DWORD *)(v121 + 4 * (BYTE1(v239) ^ 0xEDu));
  HIDWORD(v200) = v258 ^ 0xC11B;
  LODWORD(v200) = v258 ^ 0xFAFC0000;
  v259 = *(_DWORD *)(v124 + 4 * (BYTE2(v242) ^ 0x56u)) ^ 0xC35D5637;
  v260 = *(_DWORD *)&v126[4 * ((v246 ^ 0x911B872B) >> 24)] ^ v259 ^ 0x6D41727E ^ (16 * v259
                                                                                + 1505268702
                                                                                - ((32 * v259) & 0xB37127A0)) ^ (v200 >> 16);
  HIDWORD(v200) = *(_DWORD *)&v130[4 * (v250 ^ 0xB7)] ^ 0x7363FF54;
  LODWORD(v200) = HIDWORD(v200);
  v261 = (v200 >> 21) ^ __ROR4__(v260, 21);
  v262 = *(_DWORD *)(v121 + 4 * (BYTE1(v242) ^ 0xE4u));
  HIDWORD(v200) = v262 ^ 0xC11B;
  LODWORD(v200) = v262 ^ 0xFAFC0000;
  v263 = *(_DWORD *)(v124 + 4 * (BYTE2(v246) ^ 0xD8u)) ^ 0xC35D5637;
  v264 = (v200 >> 16) ^ *(_DWORD *)&v126[4 * (HIBYTE(v250) ^ 0xB0)] ^ (16 * v263
                                                                     + 1505268702
                                                                     - ((32 * v263) & 0xB37127A0));
  v265 = *(_DWORD *)&v130[4 * (v239 ^ 0x91)] ^ v263 ^ (v264 + 1877695470 - ((2 * v264) & 0xDFD6B7DC));
  v266 = *(_DWORD *)(v124 + 4 * (BYTE2(v254) ^ 0x74u)) ^ 0xC35D5637;
  v267 = *(_DWORD *)(v121 + 4 * (BYTE1(v265) ^ 0x66u));
  HIDWORD(v200) = v267 ^ 0xC11B;
  LODWORD(v200) = v267 ^ 0xFAFC0000;
  v268 = v257 ^ 0x177CD9D9;
  v269 = *(_DWORD *)&v126[4 * ((v257 ^ 0x177CD9D9u) >> 24)] ^ 0x6D41727E ^ v266 ^ (v200 >> 16) ^ (16 * v266
                                                                                                + 1505268702
                                                                                                - ((32 * v266) & 0xB37127A0));
  v270 = (v269 & 0x200 ^ 0xDEBBFFBF) + 2 * (v269 & 0x200);
  HIDWORD(v200) = v261 ^ 0x549BF9D9;
  LODWORD(v200) = v261 ^ 0x549BF9D9;
  v271 = v200 >> 11;
  v272 = *(_DWORD *)&v130[4 * ((v200 >> 11) ^ 0xEF)];
  v113 = ((v270 + 558104641) & (v272 ^ 0x6FEB5BEE)) == 0;
  v273 = *(_DWORD *)(v124 + 4 * (BYTE2(v265) ^ 0x72u)) ^ 0xC35D5637;
  v274 = *(_DWORD *)(v121 + 4 * (BYTE1(v271) ^ 0xA0u));
  HIDWORD(v200) = v274 ^ 0xC11B;
  LODWORD(v200) = v274 ^ 0xFAFC0000;
  v275 = (v200 >> 16) ^ *(_DWORD *)&v126[4 * ((v254 ^ 0xD4B73D47) >> 24)] ^ (16 * v273
                                                                           + 1505268702
                                                                           - ((32 * v273) & 0xB37127A0));
  v276 = *(_DWORD *)&v130[4 * (v257 ^ 0xEA)] ^ v273 ^ (v275 + 1877695470 - ((2 * v275) & 0xDFD6B7DC));
  v277 = v270 + 1843365365;
  v278 = 727156083 - v270;
  if (v113)
    v278 = v277;
  v279 = ((v272 ^ 0x7363FF54) - 1285260724 + v278) ^ v269 & 0xFFFFFDFF;
  v280 = *(_DWORD *)(v124 + 4 * BYTE2(v268)) ^ 0xC35D5637;
  v281 = *(_DWORD *)(v121 + 4 * (BYTE1(v254) ^ 0xAEu));
  v282 = (16 * v280 + 1505268702 - ((32 * v280) & 0xB37127A0)) ^ *(_DWORD *)&v126[4 * ((v271 ^ 0x1EA133EFu) >> 24)];
  HIDWORD(v283) = v281 ^ 0xC11B;
  LODWORD(v283) = v281 ^ 0xFAFC0000;
  v284 = *(_DWORD *)(v124 + 4 * (BYTE2(v271) ^ 0x62u));
  v285 = *(_DWORD *)&v130[4 * (v265 ^ 0xD)] ^ v280 ^ (v283 >> 16) ^ (v282
                                                                                    + 1877695470
                                                                                    - ((2 * v282) & 0xDFD6B7DC));
  v286 = *(_DWORD *)&v126[4 * (HIBYTE(v265) ^ 0x32)];
  v287 = 16 * (v284 ^ 0xC35D5637) + 1505268702 - ((32 * (v284 ^ 0xC35D5637)) & 0xB37127A0);
  v288 = *(_DWORD *)(v121 + 4 * BYTE1(v268));
  HIDWORD(v283) = v288 ^ 0xC11B;
  LODWORD(v283) = v288 ^ 0xFAFC0000;
  v289 = *(_DWORD *)&v130[4 * (v254 ^ 0x74)] ^ v284 ^ 0xC35D5637 ^ ((v287 ^ v286 ^ (v283 >> 16))
                                                                                   + 1877695470
                                                                                   - ((2 * (v287 ^ v286 ^ (v283 >> 16))) & 0xDFD6B7DC));
  v290 = (char *)*(&off_100212870 + HIDWORD(v356) - 1491) - 4;
  v291 = *(_DWORD *)&v290[4 * (((v279 ^ 0xF137909F) >> 24) ^ 0xB4)]
       + (((v279 ^ 0xF137909F) >> 24) ^ 0x9FD52929)
       - 949109338;
  v292 = (v276 ^ 0x6792B6A6) >> 24;
  HIDWORD(v353) = v276 ^ 0x6792B6A6;
  v293 = *(_DWORD *)&v290[4 * (v292 ^ 0xB4)];
  v294 = HIBYTE(v285);
  LODWORD(v356) = (v289 ^ 0x250E7C9Cu) >> 24;
  LODWORD(v354) = *(_DWORD *)&v290[4 * (HIBYTE(v285) ^ 0xB4)];
  HIDWORD(v354) = *(_DWORD *)&v290[4 * (v356 ^ 0xB4)];
  v295 = (char *)*(&off_100212870 + (HIDWORD(v356) ^ 0x6A7)) - 8;
  v296 = (uint64_t)*(&off_100212870 + (HIDWORD(v356) ^ 0x61A));
  v297 = *(_DWORD *)&v295[4 * (BYTE2(v276) ^ 0x99)] ^ 0x826E3F7B;
  v298 = v291 ^ ((v285 ^ 0x7B) - 181218634 + ((2 * (v285 ^ 0xBC37B) + 224) & 0x8A ^ 0xF7DFFFF)) ^ v297 ^ (v297 >> 2) ^ *(_DWORD *)(v296 + 4 * (v285 ^ 0x79u));
  v299 = *(_DWORD *)&v295[4 * (BYTE2(v289) ^ 5)];
  v300 = *(_DWORD *)&v295[4 * ((v279 ^ 0xF137909F) >> 16)];
  LODWORD(v353) = *(_DWORD *)&v295[4 * ((v285 ^ 0xBC37B) >> 16)];
  LODWORD(v295) = ((unsigned __int16)(v285 ^ 0xC37B) >> 8);
  v301 = (char *)*(&off_100212870 + HIDWORD(v356) - 1496) - 12;
  v302 = *(_DWORD *)&v301[4 * v295];
  LODWORD(v295) = v298 ^ (v297 >> 4);
  v303 = *(_DWORD *)&v301[4 * ((unsigned __int16)(v289 ^ 0x7C9C) >> 8)] ^ 0x98A5E9F3;
  v304 = v303 ^ (1515496080 * v303);
  v305 = *(_DWORD *)&v301[4 * ((unsigned __int16)(v276 ^ 0xB6A6) >> 8)];
  v306 = *(_DWORD *)&v301[4 * (BYTE1(v279) ^ 0x5E)];
  v307 = *(_DWORD *)(v296 + 4 * (v279 ^ 0x9Du));
  LODWORD(v295) = v295 ^ v304;
  v308 = *(_DWORD *)(v296 + 4 * (v289 ^ 0x9Eu));
  HIDWORD(v352) = *(_DWORD *)(v296 + 4 * (v276 ^ 0xA4u));
  v309 = ((_DWORD)v295 + 803242012 - ((2 * (_DWORD)v295) & 0x5FC10068) + 24) ^ LODWORD(STACK[0x2A0]);
  v310 = (uint64_t)*(&off_100212870 + (HIDWORD(v356) ^ 0x621));
  v340[5] = *(_BYTE *)(v310 + (((v309 ^ 0x5244C6B3) >> 16) ^ 0x5ELL)) ^ ((v309 ^ 0x5244C6B3) >> 16) ^ 0x8A ^ ((((v309 ^ 0x5244C6B3) >> 16) ^ 0x8A) - ((2 * (((v309 ^ 0x5244C6B3) >> 16) ^ 0x8A) + 46) & 0x33) - 112) ^ 0xB9;
  v311 = v299 ^ 0x826E3F7B ^ ((v292 ^ 0x9FD52929) - 949109338 + v293) ^ ((v299 ^ 0x826E3F7B) >> 2) ^ ((v299 ^ 0x826E3F7B) >> 4) ^ v302 ^ 0x98A5E9F3 ^ v307 ^ (1515496080 * (v302 ^ 0x98A5E9F3)) ^ ((v279 ^ 0x9F) - 181218634 + ((2 * (((v279 ^ 0xF137909F) + 112) & 0x47 ^ (v279 ^ 0xF137909F | 0x7FFFFFFD))) ^ 0xF0820005));
  v312 = (v311 + 1093239152 - ((2 * v311) & 0x82530396) + 91) ^ LODWORD(STACK[0x338]);
  v313 = v312 ^ 0x22A932A6;
  v314 = (BYTE1(v313) | 0x88) ^ (v313 >> 8) & 0x88;
  v315 = (char *)*(&off_100212870 + (HIDWORD(v356) ^ 0x648)) - 8;
  v340[2] = (((unsigned __int16)(v312 ^ 0x32A6) >> 8) | 0x88) ^ ((unsigned __int16)(v312 ^ 0x32A6) >> 8) & 0x88 ^ 0x35 ^ ((v315[v314 ^ 0x14] ^ 0x8D) - ((2 * v315[v314 ^ 0x14]) & 0x20) - 112);
  v316 = (char *)*(&off_100212870 + (HIDWORD(v356) ^ 0x609)) - 8;
  LODWORD(v314) = v316[HIBYTE(v309) ^ 0xEFLL];
  HIDWORD(v283) = v314 ^ 0x17;
  LODWORD(v283) = (v314 ^ 0x60) << 24;
  v340[STACK[0x2C8]] = (v283 >> 29) ^ 0x83;
  v317 = v300 ^ 0x826E3F7B ^ ((v294 ^ 0x9FD52929) - 949109338 + v354) ^ ((v300 ^ 0x826E3F7B) >> 2) ^ ((v300 ^ 0x826E3F7B) >> 4);
  v318 = v317 & 0x1000000 | 0x5EA4C565;
  if ((v317 & 0x1000000 & v308) != 0)
    v318 = -1119253814 - v318;
  v319 = (v308 ^ ((v289 ^ 0x9C)
                - 181218634
                + ((2 * (((v289 ^ 0x250E7C9C) + 112) & 0x4D ^ (v289 ^ 0x250E7C9C | 0x7FFFFFF7))) ^ 0xF0820011)))
       - 1587856741
       + v318;
  v320 = 1515496080 * (v305 ^ 0x98A5E9F3);
  v321 = v305 ^ 0x98A5E9F3 ^ LODWORD(STACK[0x368]) ^ ((v317 & 0xFEFFFFFF ^ v320 ^ v319)
                                                    + 156825913
                                                    - ((2 * (v317 & 0xFEFFFFFF ^ v320 ^ v319)) & 0x12B1F272));
  v322 = (uint64_t)*(&off_100212870 + HIDWORD(v356) - 1507);
  v340[11] = *(_BYTE *)(v322
                      + (v305 ^ 0xF3u ^ LOBYTE(STACK[0x368]) ^ ((v317 ^ v320 ^ v319)
                                                                                                + 57
                                                                                                - ((2
                                                                                                  * (v317 ^ v320 ^ v319)) & 0x72)) ^ 0x28)) ^ 0x16;
  v323 = v316[BYTE3(v312) ^ 0xF9];
  HIDWORD(v324) = v323 ^ 0x17;
  LODWORD(v324) = (v323 ^ 0x60) << 24;
  v325 = STACK[0x268];
  v340[STACK[0x268]] = (v324 >> 29) ^ 0xFB;
  v340[1] = BYTE2(v313) ^ 0x61 ^ ((BYTE2(v313) ^ 0x61) + (~(2 * (BYTE2(v313) ^ 0x61) + 46) | 0xCD) - 111) ^ 0xB8 ^ *(_BYTE *)(v310 + (BYTE2(v313) ^ 0xB5));
  v326 = (v356 ^ 0x9FD52929) - 949109338 + HIDWORD(v354);
  v327 = v353 ^ 0x826E3F7B ^ ((v353 ^ 0x826E3F7B) >> 4) ^ ((v353 ^ 0x826E3F7B) >> 2);
  v328 = (v327 & 0x80000 ^ 0x9AFFFEAB) + 2 * (v327 & 0x80000);
  v113 = ((v328 + 1694499157) & v326) == 0;
  v329 = v328 + 2110778880;
  v330 = -1278219434 - v328;
  if (v113)
    v330 = v329;
  v331 = v327 & 0xFFF7FFFF ^ (1515496080 * (v306 ^ 0x98A5E9F3)) ^ (v326 - 416279723 + v330);
  v332 = HIDWORD(v352) ^ (BYTE4(v353) + 2096205936) ^ (v331 - ((2 * v331) & 0xF082848A) + 2017542725);
  v333 = v306 ^ LODWORD(STACK[0x390]) ^ (v332 + 156290577 - ((2 * v332) & 0x12A19C42) + 16);
  v340[STACK[0x260]] = *(_BYTE *)(v310 + (BYTE2(v333) ^ 0x3E) + ((v333 >> 15) & 0x1A8 ^ 0xFFFFFFD7) + 213) ^ BYTE2(v333) ^ ((BYTE2(v333) ^ 0x3E) - ((2 * (BYTE2(v333) ^ 0x3E) + 46) & 0x33) - 112) ^ 0xB8;
  v334 = v316[HIBYTE(v333) ^ 0x62];
  HIDWORD(v335) = v334 ^ 0x17;
  LODWORD(v335) = (v334 ^ 0x60) << 24;
  v340[STACK[0x2F0]] = (v335 >> 29) ^ 0x50;
  v340[STACK[0x220]] = ((v321 ^ 0xCFDDD967) >> 16) ^ 0x94 ^ ((((v321 ^ 0xCFDDD967) >> 16) ^ 0x94)
                                                           - ((2 * (((v321 ^ 0xCFDDD967) >> 16) ^ 0x94) + 46) & 0x32)
                                                           - 112) ^ *(_BYTE *)(v310
                                                                             + (((v321 ^ 0xCFDDD967) >> 16) ^ 0x40)) ^ 0xC;
  v336 = (((v333 ^ 0xC7907BDC) >> 4) & 0xF0 | ((unsigned __int16)(v333 ^ 0x7BDC) >> 12)) ^ 0xE6;
  v340[STACK[0x388]] = v315[((v336 >> 4) & 0xFFFFFF0F | (16 * (v336 & 0xF))) ^ 0xAELL] ^ (((v336 >> 4) & 0xF | (16 * (v336 & 0xF)))
                                                                                        - ((v336 >> 3) & 0x1A)
                                                                                        - 115) ^ 0x2B;
  v340[STACK[0x380]] = (((unsigned __int16)(v321 ^ 0xD967) >> 8)
                      + (~((v321 ^ 0xCFDDD967) >> 7) | 0xE5)
                      - 114) ^ 0xDB ^ v315[((unsigned __int16)(v321 ^ 0xD967) >> 8) ^ 0xA0];
  v340[STACK[0x370]] = (((unsigned __int16)(v309 ^ 0xC6B3) >> 8) - (((v309 ^ 0x5244C6B3) >> 7) & 0x1A) - 115) ^ v315[((unsigned __int16)(v309 ^ 0xC6B3) >> 8) ^ 0x75] ^ 0x80;
  v340[STACK[0x328]] = *(_BYTE *)(v322 + (v312 ^ 0x95)) ^ 0xBB;
  v340[STACK[0x2F8]] = *(_BYTE *)(v322 + (v309 ^ 0x7FLL)) ^ 0x2A;
  v340[STACK[0x3A8]] = *(_BYTE *)(v322 + (v333 ^ 0x73)) ^ 0x85;
  v337 = v316[HIBYTE(v321) ^ 0x49];
  HIDWORD(v335) = v337 ^ 0x17;
  LODWORD(v335) = (v337 ^ 0x60) << 24;
  v340[STACK[0x340]] = (v335 >> 29) ^ 0x2E;
  v338 = (((_DWORD)v325 - 1080972129 - ((2 * (_DWORD)v325 + 32) & 0x7F23593E) + 16) ^ 0xBF91AC90) < 0x150;
  return ((uint64_t (*)(_QWORD, char *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 + 8 * ((2 * v338) | (16 * v338) | HIDWORD(v356))) - 8))((2 * (HIWORD(v333) ^ 0x3E) + 46) & 0x33333333, v316, 2561010163, v325, v312, 2188263291, 1515496080, v315, a5, a6, a7, a8, a9, a10, a11, a12, v340, v341, v342,
           v343,
           v344,
           v345,
           a19,
           v346,
           v347,
           v348,
           v349,
           v350,
           v351,
           v352,
           v353,
           v354,
           v356,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           5,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           11);
}

void sub_100049C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,unsigned __int8 a24,int a25,int a26,unsigned __int8 a27,int a28,int a29,int a30,int a31,char a32,int a33,int a34,unsigned __int8 a35,__int16 a36,char a37,__int16 a38,char a39)
{
  char v39;
  int v40;

  LODWORD(STACK[0x338]) = (a24 | ((a30 ^ 0xC) << 24) | ((a35 ^ 0xEF) << 8) | (((a39 - 32) ^ a32) << 16)) ^ 0xD9A952AB;
  LODWORD(STACK[0x2A0]) = a29 ^ 0x2861F4B7;
  LODWORD(STACK[0x368]) = ((a31 << 8) | (a26 << 24) | ((a33 ^ 0x25) << 16) | a28) ^ 0x2086D386;
  LODWORD(STACK[0x390]) = ((((a34 ^ 0xEC) << 16) + ((a25 ^ v40) << 24)) | a27 | ((a37 ^ v39) << 8)) ^ 0x1AC167B0;
  JUMPOUT(0x100047DC0);
}

uint64_t sub_100049D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v19 = STACK[0x4D8];
  STACK[0x5E8] -= 32;
  *(_BYTE *)(v19 + 335) = *(_BYTE *)(a14 + 335) ^ 0xCD ^ *(_BYTE *)(*(_QWORD *)(v18 + 8 * (a17 - 86)) + 15) ^ *(_BYTE *)(*(_QWORD *)(v18 + 8 * (a17 - 67)) + 18) ^ *(_BYTE *)(((a17 - 1911786921) & 0x71F38F55) + 15 + *(_QWORD *)(v18 + 8 * (a17 ^ 0x78)) - 599) ^ 0x39;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17 + 8 * a17) - 8))(1262711473);
}

void sub_100049E28()
{
  JUMPOUT(0x100049DA8);
}

uint64_t sub_100049E30()
{
  int v0;
  uint64_t v1;

  STACK[0x500] += ((v0 - 338) | 0x2C4u) ^ 0xFFFFFFFFFFFFFC37;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v0 - 338) ^ 0x2C4 ^ v0 ^ 0x6C4)) - 12))();
}

uint64_t sub_100049E70@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;

  v7 = (_BYTE *)STACK[0x460];
  v8 = (a1 ^ 0xC789D9D9) + 1;
  a6[12] = (HIBYTE(v8) ^ 0xC7) + (~(2 * (HIBYTE(v8) ^ 0xC7)) | 0x8D) + 58;
  a6[13] = (BYTE2(v8) ^ 0x89) - 2 * ((BYTE2(v8) ^ 0x89) & 0x3D ^ BYTE2(v8) & 4) + 57;
  a6[14] = (BYTE1(v8) ^ 0xDA) + (~(2 * (BYTE1(v8) ^ 0xDA)) | 0x8D) + 58;
  a6[15] = v8 ^ 0x27;
  v7[16] ^= *a6 ^ 0x39;
  v7[17] ^= a6[1] ^ 0x39;
  v7[18] ^= a6[2] ^ 0x39;
  v7[19] ^= a6[3] ^ 0x39;
  v7[20] ^= a6[4] ^ 0x39;
  v7[21] ^= a6[5] ^ 0x39;
  v7[22] ^= a6[6] ^ 0x39;
  v7[23] ^= a6[7] ^ 0x39;
  v7[24] ^= a6[8] ^ 0x39;
  v7[25] ^= a6[9] ^ 0x39;
  v7[26] ^= a6[10] ^ 0x39;
  v7[27] ^= a6[11] ^ 0x39;
  v7[28] ^= a6[12] ^ 0x39;
  v7[29] ^= a6[13] ^ 0x39;
  v7[30] ^= a6[14] ^ 0x39;
  v7[31] ^= a6[15] ^ 0x39;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8 * (a1 - 127))
                                                                                                - 4))(252949564, 1323, 1765, 1607, 3347700185, 4294967177, 4294967258);
}

void sub_10004A088()
{
  JUMPOUT(0x100049EACLL);
}

uint64_t sub_10004A090@<X0>(int a1@<W2>, int a2@<W8>)
{
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((28
                                          * (LODWORD(STACK[0x5D4]) == ((19 * (((a2 ^ 0x31F) + 1556) ^ a1)) ^ 0x68260ED1))) ^ ((a2 ^ 0x31F) + 1556)))
                            - 4))();
}

uint64_t sub_10004A0E4@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((*(_BYTE *)(v2 + (v1 + v4 - 1)) == 57) * ((a1 + 358) ^ 0x262)) ^ a1)))();
}

uint64_t sub_10004A120(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((28 * (v4 == ((19 * (v3 ^ a3)) ^ 0x68260ED1))) ^ v3)) - 4))();
}

uint64_t sub_10004A164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;

  LODWORD(STACK[0x5D4]) = 1747324538;
  v42 = STACK[0x460];
  STACK[0x488] = 335;
  *(_BYTE *)(v42 + 335) = ((a39 + (((v39 ^ 0x6F) + 105) | 0xEA)) ^ 0xBA) * (a39 + 12);
  return ((uint64_t (*)(void))(*(_QWORD *)(v40 + 8 * (((STACK[0x488] == 0) * v41) ^ v39 ^ 0x66F)) - 8))();
}

void sub_10004A674()
{
  JUMPOUT(0x10004A62CLL);
}

uint64_t sub_10004A67C()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = ((uint64_t (*)(void))STACK[0x2D8])();
  LODWORD(STACK[0x608]) = v1;
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((((v0 - 820) ^ 0x21A) * (v1 == -1262737048)) ^ v0)))(v3);
}

uint64_t sub_10004A6B4(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t);

  v4 = STACK[0x3E0];
  v5 = STACK[0x330];
  v6 = STACK[0x298];
  v7 = STACK[0x3A0];
  v8 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(*(_QWORD *)(v3 + 8 * (v2 - 924))
                                                                                             - 8);
  STACK[0x390] = STACK[0x298] + 2353;
  STACK[0x388] = v7 + 49;
  STACK[0x380] = v6 + 2333;
  STACK[0x378] = v7 + 29;
  STACK[0x370] = v6 + 2313;
  STACK[0x368] = v7 + 9;
  return v8(a1, a2, v4, 1262711473, v5);
}

void sub_10004AE44()
{
  int v0;

  LODWORD(STACK[0x600]) = v0;
  JUMPOUT(0x10004ADD0);
}

uint64_t sub_10004AE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61)
{
  int v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  int v65;

  STACK[0x3A8] = v63;
  v64 = STACK[0x530];
  *(_DWORD *)(STACK[0x630] + ((v64 - 1223307022) & 0xFFFFFFFC)) = v61;
  v65 = (a61 & 0x3047FB5D ^ 0x24D) + v64;
  LODWORD(STACK[0x530]) = v65;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 + 8 * (((v65 - 1223307022 >= (((a61 & 0x3047FB5D) + 1368303350) & 0xAE7156C6) + 58) * ((118 * (a61 & 0x3047FB5D ^ 0x24C)) ^ 0x249)) ^ a61 & 0x3047FB5D))
                                                                                                - 8))(a1, a2, a3, a4, a5, a6, 36);
}

uint64_t sub_10004C014@<X0>(int a1@<W6>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;

  v11 = *(_DWORD *)(a2 + 4 * (v5 + v4 - 8)) ^ *(_DWORD *)(a2 + 4 * (v5 + v4 - 3));
  v12 = v11 + (((v2 - 69) | a1) ^ (v10 + 477)) - (v6 & (2 * v11));
  v13 = *(_DWORD *)(a2 + 4 * (v5 + v4 - 16)) ^ *(_DWORD *)(a2 + 4 * (v5 + v4 - 14));
  HIDWORD(v14) = v13 ^ v7 ^ v12;
  LODWORD(v14) = v13 ^ ~v12;
  *(_DWORD *)(a2 + 4 * (v3 + v5)) = (v14 >> 31) + v10 - (v6 & (2 * (v14 >> 31)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((((v3 + 1 + v5) > 0x4F) * v9) ^ v2)) - 8))();
}

uint64_t sub_10004C0A8()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 8 * v0))();
}

void sub_10004C1A4()
{
  JUMPOUT(0x10004C0E8);
}

uint64_t sub_10004C1BC(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v5 + 8 * ((1605 * ((a3 + 1 + v4) > 0x27)) ^ v3))
                                         - 8))((v6 + 40));
}

uint64_t sub_10004C27C(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((273 * ((a1 + 1 + v2) < 0x3C)) ^ v1)) - 8))();
}

uint64_t sub_10004C340(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((4 * ((a4 + 1 + v5) > 0x4F)) | (16
                                                                                       * ((a4 + 1 + v5) > 0x4F)) | v4))
                            - 8))();
}

void sub_10004C400()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;

  LODWORD(STACK[0x520]) = v0;
  LODWORD(STACK[0x59C]) = v2;
  LODWORD(STACK[0x570]) = v1;
  LODWORD(STACK[0x554]) = v3;
  LODWORD(STACK[0x530]) = v8 + 80;
  v9 = STACK[0x620];
  v10 = *(_DWORD *)(STACK[0x620] - 0x1C0D97DFD8A7A9B0);
  LODWORD(STACK[0x45C]) = v4;
  v11 = (v10 ^ (v6 + v5 - 946)) + (v4 ^ v6);
  *(_DWORD *)(v9 - 0x1C0D97DFD8A7A9B0) = v11 + v6 - (v7 & (2 * v11));
  JUMPOUT(0x10004C988);
}

uint64_t sub_10004C46C@<X0>(int32x4_t *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int32x4_t a48,int8x16_t a49)
{
  const char *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int8x16_t v53;
  uint8x16_t v54;
  uint16x8_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint16x8_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint8x16_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint8x16_t v64;
  int8x16_t v67;
  int8x16_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int8x16x4_t v78;

  v78 = vld4q_s8(v49);
  v52 = (LODWORD(STACK[0x214]) + 308193100) & 0xEDA157CF;
  v53.i64[0] = 0x3939393939393939;
  v53.i64[1] = 0x3939393939393939;
  v54 = (uint8x16_t)veorq_s8(v78.val[0], v53);
  v55 = vmovl_u8(*(uint8x8_t *)v54.i8);
  v56 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8);
  v57 = (int8x16_t)vmovl_high_u16(v55);
  v58 = vmovl_high_u8(v54);
  v59 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v58.i8);
  v60 = (int8x16_t)vmovl_high_u16(v58);
  v61 = (uint8x16_t)veorq_s8(v78.val[1], v53);
  v62 = vmovl_high_u8(v61);
  v63 = vmovl_u8(*(uint8x8_t *)v61.i8);
  v64 = (uint8x16_t)veorq_s8(v78.val[2], v53);
  _Q21 = (int8x16_t)vmovl_high_u8(v64);
  _Q20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v64.i8);
  v67 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL);
  __asm { SHLL2           V20.4S, V20.8H, #0x10 }
  v72 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
  __asm { SHLL2           V21.4S, V21.8H, #0x10 }
  v78.val[0] = veorq_s8(v78.val[3], v53);
  v78.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v78.val[0]);
  v78.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v78.val[1]);
  v78.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v78.val[0].i8);
  v78.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v78.val[0]);
  v78.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v78.val[0].i8), 0x18uLL), v67), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v63.i8, 8uLL), v56));
  v78.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v78.val[3], 0x18uLL), _Q20), vorrq_s8((int8x16_t)vshll_high_n_u16(v63, 8uLL), v57));
  v78.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v78.val[1].i8), 0x18uLL), v72), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v62.i8, 8uLL), v59));
  v78.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v78.val[2], 0x18uLL), _Q21), vorrq_s8((int8x16_t)vshll_high_n_u16(v62, 8uLL), v60));
  v73 = (int32x4_t)veorq_s8(vandq_s8(v78.val[0], a49), (int8x16_t)(*(_OWORD *)&v56 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
  v74 = (int32x4_t)veorq_s8(vandq_s8(v78.val[3], a49), (int8x16_t)(*(_OWORD *)&v57 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
  v75 = (int32x4_t)veorq_s8(vandq_s8(v78.val[1], a49), (int8x16_t)(*(_OWORD *)&v59 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
  v76 = (int32x4_t)veorq_s8(vandq_s8(v78.val[2], a49), (int8x16_t)(*(_OWORD *)&v60 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
  a1[2] = vaddq_s32(vsubq_s32((int32x4_t)v78.val[1], vaddq_s32(v75, v75)), a48);
  a1[3] = vaddq_s32(vsubq_s32((int32x4_t)v78.val[2], vaddq_s32(v76, v76)), a48);
  *a1 = vaddq_s32(vsubq_s32((int32x4_t)v78.val[0], vaddq_s32(v73, v73)), a48);
  a1[1] = vaddq_s32(vsubq_s32((int32x4_t)v78.val[3], vaddq_s32(v74, v74)), a48);
  return ((uint64_t (*)(void))(*(_QWORD *)(v51
                                        + 8 * (int)((333 * ((v50 + 1223307023) < 0x10)) ^ (v52 - 337)))
                            - 12))();
}

uint64_t sub_10004C6C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v7 + 8 * ((255 * ((a6 + 1 + v6) > 0x1F)) ^ a2))
                                          - 12))(a4);
}

uint64_t sub_10004C7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10
                                                              + 8
                                                              * ((769 * ((a8 + 1 + v9) < 0x30)) ^ v8)))(a7, a7, v11 + 48);
}

uint64_t sub_10004C87C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5 + 8 * ((25 * ((a3 + 1 + v4) < 0x40)) ^ v3)))();
}

void sub_10004C950()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;

  LODWORD(STACK[0x520]) = v0;
  LODWORD(STACK[0x570]) = v1;
  LODWORD(STACK[0x59C]) = v2;
  LODWORD(STACK[0x554]) = v3;
  LODWORD(STACK[0x530]) = v4 + 64;
  JUMPOUT(0x10004C978);
}

uint64_t sub_10004CA64(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,int a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v66;
  unint64_t v67;

  v62 = STACK[0x538];
  v63 = *(unsigned __int8 *)(STACK[0x538] - 0x1C0D97DFD8A7A9A8) ^ 0x27;
  if (v63 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 + 8 * ((2044 * (((*(_DWORD *)(v62 - 0x1C0D97DFD8A7A9ACLL) == 534536586) ^ (a3 - 38)) & 1)) ^ (a3 - 116))) - 8))(a1, a2, 73, 1262711473, a5, a6, a7, 1980);
  if (v63 == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 + 8 * (int)(((*(_DWORD *)(v62 - 0x1C0D97DFD8A7A9ACLL) != 534536586) * (a54 - 1712)) ^ (STACK[0x3E0] - 116))) - 8))(a1, a2, 142, 1262711473, 1148211175, 1349167438, 1465, 1980);
  v66 = STACK[0x330];
  v67 = STACK[0x3E0];
  STACK[0x4B0] = 91;
  *(_BYTE *)(v62 - 0x1C0D97DFD8A7A9ADLL) = ((a61 - 17) ^ 0xBA) * a61;
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v61 + 8 * (((a3 ^ 0x3C3) << 8) - (STACK[0x4B0] != 0) + 16 * (STACK[0x4B0] != 0))))(a1, a2, v67, 1262711473, v66, 1349167438, 1465, 1980);
}

void sub_10004D3AC()
{
  JUMPOUT(0x10004D360);
}

uint64_t sub_10004D3B4()
{
  return ((uint64_t (*)(void))STACK[0x510])();
}

uint64_t sub_10004D3F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;

  v8 = ((v7 + ((a3 - 865) | 0x101) - 359) ^ LODWORD(STACK[0x604])) + (v5 ^ v7);
  *(_DWORD *)(a5 + 52) = ((v8 % 0x2710) ^ 0xFD7BF2B5) + 1407709152 + ((2 * (v8 % 0x2710)) & 0x656A);
  v9 = STACK[0x60C];
  LODWORD(STACK[0x4FC]) = STACK[0x60C];
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((42 * (v9 != v7)) ^ (a3 - 634))) - 4))();
}

uint64_t sub_10004D48C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8
                                             * (((STACK[0x400] != 0) * (((a3 - 405) | 0xC0) ^ 0x323)) ^ (a3 + 222)))
                            - 4))();
}

uint64_t sub_10004D4C4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;

  STACK[0x500] -= 1616;
  LODWORD(STACK[0x4FC]) = a4 - 82;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8
                                             * (((STACK[0x400] != 0) * (((a3 - 405) | 0xC0) ^ 0x323)) ^ (a3 + 222)))
                            - 4))();
}

uint64_t sub_10004D514@<X0>(_DWORD *a1@<X4>, int a2@<W8>)
{
  uint64_t v2;

  *a1 = STACK[0x5A8];
  a1[85] = STACK[0x41C];
  a1[86] = STACK[0x458];
  a1[87] = STACK[0x4C4];
  a1[88] = STACK[0x468];
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8
                                             * (((STACK[0x400] != 0) * (((a2 + 203) | 0xC0) ^ 0x323)) ^ (a2 + 830)))
                            - 4))();
}

void sub_10004D578()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = v0 | 4;
}

uint64_t sub_10004D580(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;

  LODWORD(STACK[0x524]) = a4 - 42;
  return (*(uint64_t (**)(void))(v5 + 8 * (((STACK[0x318] != 0) * (v4 + 692)) ^ (v4 - 683))))();
}

uint64_t sub_10004D704()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((14 * (v0 - 89778894 + v2 + 737 - 966 < ((v2 - 230) | 0x2DAu) - 728)) ^ v2))
                            - 4))();
}

uint64_t sub_10004D74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;

  v48 = (((v46 + 38) | 0xC7) - 746870736) ^ LODWORD(STACK[0x408]);
  v49 = (LODWORD(STACK[0x408]) << (v46 ^ 0xDB)) & 0xA6F757EE;
  v50 = 235795823 * ((-2 - ((~(v47 - 200) | 0x86E5163F) + ((v47 - 200) | 0x791AE9C0))) ^ 0x12485F66);
  *(_QWORD *)(v47 - 144) = STACK[0x470];
  *(_QWORD *)(v47 - 152) = a42;
  *(_DWORD *)(v47 - 200) = (v43 + 751080217) ^ v50;
  *(_QWORD *)(v47 - 168) = v44;
  *(_DWORD *)(v47 - 136) = v50 + v48 + v49 + 1034909388;
  *(_QWORD *)(v47 - 192) = v42;
  *(_QWORD *)(v47 - 184) = a41;
  *(_DWORD *)(v47 - 160) = (v46 - 470) ^ v50;
  *(_BYTE *)(v47 - 176) = 111 * ((-2 - ((~(v47 + 56) | 0x3F) + ((v47 + 56) | 0xC0))) ^ 0x66) + 102;
  v51 = ((uint64_t (*)(uint64_t))((char *)*(&off_100212870 + (v46 ^ 0x25A)) - 8))(v47 - 200);
  v52 = *(_DWORD *)(v47 - 132);
  LODWORD(STACK[0x524]) = v52;
  return (*(uint64_t (**)(uint64_t))(v45 + 8 * ((1705 * (v52 == -1262737048)) ^ v46)))(v51);
}

uint64_t sub_10004D870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
  int v36;
  uint64_t v37;
  int v38;

  return ((uint64_t (*)(void))(*(_QWORD *)(v37
                                        + 8
                                        * ((((((LODWORD(STACK[0x43C]) ^ v36) == a36 - 1340939160) ^ ((v38 ^ 0x8B) - 98)) & 1)
                                          * (((v38 ^ 0x8B) + 374) ^ 0x580)) ^ v38 ^ 0x8B))
                            - 12))();
}

uint64_t sub_10004D8D0@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  LODWORD(STACK[0x524]) = v1 + 133;
  v5 = LODWORD(STACK[0x524]);
  v6 = 1755732067 * ((2 * (v3 & 0x4FB84E09DB840A10) - v3 + 0x3047B1F6247BF5EELL) ^ 0xEDEC16C9FABD4835);
  *(_QWORD *)(v4 - 192) = v6 + 1262711474;
  *(_QWORD *)(v4 - 168) = v5 + v6;
  *(_DWORD *)(v4 - 196) = ((a1 & 0x208937D7) + 418080469) & 0xFFFBEAB2 ^ v6;
  *(_DWORD *)(v4 - 160) = ((a1 & 0x208937D7) - 1689052469) ^ v6;
  *(_DWORD *)(v4 - 184) = ((a1 & 0x208937D7) + 418080469) ^ v6;
  *(_DWORD *)(v4 - 180) = -1755732067 * ((2 * (v3 & 0xDB840A10) - v3 + 612103662) ^ 0xFABD4835);
  *(_DWORD *)(v4 - 176) = (((a1 & 0x208937D7) + 418080469) ^ 0x85) + v6;
  v7 = ((uint64_t (*)(uint64_t))STACK[0x320])(v4 - 200);
  STACK[0x318] = 0;
  v8 = *(uint64_t (**)(uint64_t))(v2 + 8 * *(int *)(v4 - 200));
  LODWORD(STACK[0x300]) = 1894502684;
  return v8(v7);
}

uint64_t sub_10004DB10()
{
  uint64_t v0;
  unint64_t v1;
  int v2;
  int v3;
  uint64_t (*v4)(void);

  STACK[0x318] = 0;
  v1 = STACK[0x3E0];
  v2 = STACK[0x3E0] - 967;
  v3 = *(_DWORD *)(STACK[0x330] + 56);
  *(_DWORD *)(STACK[0x330] + 56) = v3 + 1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)(v0
                                     + 8 * ((1979 * ((v3 - 377236734) < 0xFFFFFFFA)) ^ ((int)v1 - 823)))
                         - ((v2 | 0x90u) ^ 0x94));
  LODWORD(STACK[0x300]) = 1894502684;
  return v4();
}

void sub_10004DB78()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 200) = (v0 + 2138963216) ^ (535753261
                                             * ((((v1 - 200) ^ 0x3212692C)
                                               + 2038877446
                                               - 2 * (((v1 - 200) ^ 0x3212692C) & 0x7986CD06)) ^ 0x4160AA05));
  sub_10008134C((_DWORD *)(v1 - 200));
  *(_DWORD *)(v1 - 184) = 3804331 * ((2 * ((v1 - 200) & 0x2AE7CB60) - (v1 - 200) + 1427649688) ^ 0x2BCD116E) + v0 + 1524;
  *(_QWORD *)(v1 - 192) = STACK[0x278];
  *(_BYTE *)(v1 - 200) = (-85 * ((2 * ((v1 + 56) & 0x60) - (v1 + 56) - 104) ^ 0x6E)) ^ 0x63;
  *(_QWORD *)(v1 - 176) = STACK[0x280];
  ((void (*)(uint64_t))STACK[0x270])(v1 - 200);
  STACK[0x318] = 0;
  LODWORD(STACK[0x300]) = 1894502684;
  JUMPOUT(0x10004DC64);
}

void sub_10004DC8C(uint64_t a1@<X1>, int a2@<W8>)
{
  uint64_t v2;
  int v3;

  v3 = a2 + 683;
  ((void (*)(_QWORD, uint64_t, _QWORD))STACK[0x2E8])(*(unsigned int *)STACK[0x2E0], a1, (LODWORD(STACK[0x300]) - 1894502684 + a2 + 683 - 967));
  *(_DWORD *)(v2 - 200) = (v3 + 2138962393) ^ (535753261
                                             * ((((v2 - 200) | 0x4329BB53) + (~(v2 - 200) | 0xBCD644AC)) ^ 0x49DDB57D));
  sub_10008134C((_DWORD *)(v2 - 200));
  JUMPOUT(0x10004DD14);
}

uint64_t sub_10004DD5C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_10020E2D0 + ((1312 * (*(_DWORD *)(a2 + 4) == 1747324539)) | 0x24Au)) - 12))();
}

uint64_t sub_10004DD9C(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  char v4;
  char v5;

  v2 = **(unsigned __int8 **)(a2 + 8);
  v3 = v2 == 0;
  v4 = (v2 != 0) ^ 0xDB;
  if (v3)
    v5 = 127;
  else
    v5 = -127;
  *(_BYTE *)(a1 + 88) = v4 + v5;
  return 0;
}

uint64_t sub_10004DDD0()
{
  return 4294925278;
}

uint64_t sub_10004DDD8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))((char *)*(&off_10020E2D0
                                                    + ((1346 * (*(_DWORD *)(a2 + 4) == 1747324551)) ^ 0x363u))
                                          - 12))(4294925278);
}

uint64_t sub_10004DE20@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a2 + 96) + 468) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 12);
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2 + 6248) - 12))(0);
}

uint64_t sub_10004DE78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;

  *(_BYTE *)(a1 + (v7 + v4)) = *(_BYTE *)(v3 + (v7 + v4));
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v1 + 8 * (((v7 - 1 == v2) * v5) ^ v6)) - 12))(0);
}

void sub_10004DEAC(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;

  v1 = 1759421093 * (a1 ^ 0xB37DB054);
  if (*(_QWORD *)(a1 + 24))
    v2 = *(_DWORD *)(a1 + 20) - v1 == 143750836;
  else
    v2 = 1;
  v3 = !v2;
  __asm { BR              X8 }
}

uint64_t sub_10004DF54()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v0 - 649)))(32, 0x101004023FF3BD5) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1450 * v3) ^ v0)) - ((v0 + 340) ^ 0x4B3)))();
}

uint64_t sub_10004DFA4()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)(((((v0 == v1) ^ (v3 - 84)) & 1)
                                               * ((v3 + 1030629040) & 0xC291D7FB ^ 0x316)) ^ v3))
                            - 12))();
}

uint64_t sub_10004E004@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  int v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v11 = v2 - 143750837;
  v12 = v2 - 1;
  v13 = *(unsigned __int8 *)(v5 + v11);
  if (v13 == 57)
    __asm { BR              X11 }
  if (v13 == 185)
  {
    v14 = -1262737048;
    v15 = *(_QWORD *)(v3 + 8);
    v16 = *(unsigned __int8 *)(v3 + 16) ^ v4;
    *(_QWORD *)result = v5;
    *(_DWORD *)(result + 8) = v6;
    *(_DWORD *)(result + 12) = v12;
    if (v16 == 57)
      v17 = 354595049;
    else
      v17 = 354595048;
    *(_DWORD *)(result + 16) = 812773273;
    *(_DWORD *)(result + 20) = v17;
    *(_DWORD *)(result + 24) = -1262737048;
    *(_QWORD *)(v15 - 0x6EDAADCA9171F84DLL) = a2;
  }
  else
  {
    result = (*(uint64_t (**)(void))(v9 + 8 * (v8 ^ 0x371)))();
    v14 = 1262711473;
  }
  *(_DWORD *)v3 = v14;
  return result;
}

uint64_t sub_10004E0E8(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;

  v1 = 1759421093 * ((~(_DWORD)a1 & 0xA201450D | a1 & 0x5DFEBAF2) ^ 0x117CF559);
  v2 = *(_DWORD *)(a1 + 8) - v1;
  v3 = *((_DWORD *)*(&off_100212870 + (v2 ^ 0x1B2)) + 83);
  v4 = (*(_DWORD *)(a1 + 16) ^ v1) + 920043592;
  v5 = v3 - 1667022377 > v4;
  if (v4 < 0x9CA341D7 != v3 > 0x635CBE28)
    v5 = v3 > 0x635CBE28;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_100212870 + (v2 ^ 0x1D5))
                                        + 8 * ((76 * (((v2 - 41) ^ v5) & 1)) ^ v2)
                                        - 4)
                            - 4))();
}

uint64_t sub_10004E1DC()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  BOOL v6;

  v4 = v2 + 1367641289;
  v5 = v4 < 0xB7510E58;
  v6 = v3 - 1219424680 < v4;
  if (v5 != v3 > 0x48AEF1A7)
    v6 = v5;
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((1912 * ((v6 ^ ((v1 & 0x37) - 15) ^ 0x1B) & 1)) ^ v1 & 0x61335B37u)))();
}

uint64_t sub_10004E25C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  _BOOL4 v9;

  v6 = *(_DWORD *)(v3 + 336);
  v7 = ((69 * (v5 ^ 0x10B)) ^ 0xDB1CEA41) + (*(_DWORD *)(a1 + 4) ^ v1);
  v8 = (v6 > (((v5 ^ 0x10B) + 852) ^ 0xA857FCD3)) ^ (v7 < 0x57A80074);
  v9 = v6 + 1470627956 > v7;
  if (v8)
    v9 = v6 > (((v5 ^ 0x10B) + 852) ^ 0xA857FCD3);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v9 * v4) ^ v5)) - 4))();
}

uint64_t sub_10004E2E4()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = v2 + 1977055707;
  v5 = v4 < ((46 * (v1 ^ 0x35E)) ^ 0xF2628FEE);
  v6 = v3 - 228421894 < v4;
  if (v3 > 0xD9D7105 == v5)
    v5 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((241 * v5) ^ v1)) - (v1 - 88) + 760))();
}

uint64_t sub_10004E368(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;

  v5 = *(_DWORD *)(v3 + 352);
  v6 = (*a1 ^ v1) + 2117622050;
  if (v6 < 0xE8052A76 != v5 > 11 * (((v4 - 764) | 0x110) ^ 0x15Du) + 402313830)
    v7 = v5 > 11 * (((v4 - 764) | 0x110) ^ 0x15Du) + 402313830;
  else
    v7 = v5 - 402314634 > v6;
  return (*(uint64_t (**)(void))(v2 + 8 * ((35 * v7) ^ v4)))();
}

uint64_t sub_10004E3F0@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  int v8;

  v5 = v2 + 894621645;
  v6 = v5 < 0x9F1FA921;
  v7 = v3 - 1625315039 < v5;
  if (v6 != v3 > (v4 ^ 0x60E055FDu))
    v7 = v6;
  if (v7)
    v8 = a2;
  else
    v8 = a2 + 1;
  *(_DWORD *)(result + 12) = v8;
  return result;
}

void sub_10004E448(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_10004E4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  a13 = 108757529
      * ((((&a12 | 0xC8548EC6) ^ 0xFFFFFFFE) - (~&a12 | 0x37AB7139)) ^ 0xD7371312)
      - 504207030;
  v16 = sub_100081E5C(&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15 + 8 * ((1752 * (a12 == v13)) ^ v14)) - 4))(v16);
}

uint64_t sub_10004E534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, int a13, unsigned int a14)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  a14 = 1224
      - 460628867
      * (((&a12 | 0xC4E6076) - &a12 + (&a12 & 0xF3B19F88)) ^ 0x40D8E20B);
  a12 = &STACK[0x1A8FA111108FB332];
  sub_10007FB7C((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15
                                                                                          + 8
                                                                                          * ((23 * (a13 == v14)) ^ 0x2C8u))
                                                                              - 4))(v16, v17, v18, v19, v20);
}

uint64_t sub_10004E5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v19 = 1178560073 * ((((2 * &a12) | 0x682168A4) - &a12 - 873509970) ^ 0x8E84CC30);
  a14 = a11;
  a13 = v15 - ((2 * v15) & 0x4C55314) + 40020362 + v19;
  a15 = v19 ^ 0x10C;
  v20 = ((uint64_t (*)(int *))(*(_QWORD *)(v17 + 88) - 12))(&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((13 * (a12 == ((v16 + 568) ^ 0x2C8))) ^ 0x152u))
                                          - 8))(v20);
}

uint64_t sub_10004E6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, unsigned int a14, unsigned int a15, unsigned int a16, int a17)
{
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = ((2 * (&a12 & 0x74EAE90) - &a12 - 122597013) ^ 0xB427D316) * v20;
  a12 = &STACK[0x37C70005964C0FDD];
  a13 = a11;
  a14 = v21 - 2131104636;
  a15 = v21 + v19 - 2024873421;
  a16 = -1217699515 - v21;
  v22 = sub_100081858((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * (((a17 == v17) * ((v19 ^ 0x39A) + 1219)) ^ v19))
                                          - 8))(v22);
}

uint64_t sub_10004E758()
{
  void (*v0)(unsigned int *);
  unsigned int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t *v8;
  int v9;
  unint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t *v14;

  v5 = 4 * (v4 ^ 0x1E0);
  v13 = &STACK[0x509D13A7D8C2F360];
  v14 = v8;
  v11 = (v4 + 228) ^ (1374699841
                    * ((-2113025871 - (&v11 | 0x820DC8B1) + (&v11 | 0x7DF2374E)) ^ 0x10062F47));
  (*(void (**)(unsigned int *))(v2 + 8 * (v4 - 217)))(&v11);
  v11 = (v4 + 280) ^ (1755732067 * (((&v11 | 0xF2D4296) - (&v11 & 0xF2D4296)) ^ 0xD1EBFF4D));
  v13 = v8;
  sub_100070A3C((uint64_t)&v11);
  if ((_DWORD)v14 == v1 + v5 - 712)
    v6 = v9;
  else
    v6 = (int)v14;
  v12 = v4 + ((&v11 - 1593088549 - 2 * (&v11 & 0xA10B65DB)) ^ 0xABFF6BF4) * v3 - 61;
  v13 = v8;
  v0(&v11);
  v13 = v10;
  v12 = v5 + ((((2 * &v11) | 0xD7D9F760) - &v11 + 336790608) ^ 0xE118F59F) * v3 - 435;
  v0(&v11);
  return v6 ^ v1;
}

void sub_10004E914(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = qword_100262EA8 - qword_100262CF8 - (_QWORD)&v3;
  qword_100262CF8 = (1801249171 * v2) ^ 0x8915C65683065AAALL;
  qword_100262EA8 = 1801249171 * (v2 ^ 0x8915C65683065AAALL);
  ((void (*)(char *, void (*)()))*(&off_100212870
                                            + ((-109 * ((-109 * v2) ^ qword_100262EA8)) ^ byte_1001AB700[byte_1001B6F80[(-109 * ((-109 * v2) ^ qword_100262EA8))] ^ 0x94])
                                            + 100))((char *)*(&off_100212870+ ((-109 * ((qword_100262EA8 - qword_100262CF8) ^ 0xAA)) ^ byte_1001AB800[byte_1001B7180[(-109 * ((qword_100262EA8 - qword_100262CF8) ^ 0xAA))] ^ 0xB1])- 91)- 8, sub_10008144C);
  __asm { BR              X9 }
}

uint64_t sub_10004EA38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((1593 * (**(_QWORD **)(v1 + 1648) != 0)) ^ 0x343u)) - 8))();
}

uint64_t sub_10004EA64()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(v1 + 1176))(v0);
}

uint64_t sub_10004EA8C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v1 = 535753261 * (((a1 | 0xB4CC401E) - a1 + (a1 & 0x4B33BFE1)) ^ 0xBE384E31);
  v2 = *(_DWORD *)(a1 + 8) ^ v1;
  v3 = *(_DWORD *)(a1 + 24) - v1;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0xCDF342D76DC35A3);
  v6 = v4 - 1346595302;
  v5 = v4 - 1346595302 < 0;
  v7 = 1346595302 - v4;
  if (v5)
    v8 = v7;
  else
    v8 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_100212870 + v2 - 98)
                                        + 8
                                        * ((((v3 - 502975368) >= 4 * (unint64_t)v8) * (v2 + 1608)) ^ v2)
                                        - 4)
                            - 4))();
}

uint64_t sub_10004EB54(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1
                                                               + 8
                                                               * (((4
                                                                  * (((v2 == 502975368) ^ (v3 - 68)) & 1)) & 0xF7 | (8 * (((v2 == 502975368) ^ (v3 - 68)) & 1))) ^ (v3 + 1572)))
                                                   - ((v3 - 33) | 0x21u)
                                                   + 283))(a1, 1692182594);
}

uint64_t sub_10004EBA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1
                                                                                + 8
                                                                                * ((1488
                                                                                  * (((((v3 - 28191108) & 0x1AE28F7)
                                                                                     - 159211636) & 0x97D60FF ^ 0xFF) == 32)) ^ (v3 - 28191108) & 0x1AE28F7))
                                                                    - 8))(a1, (v3 - 28191108) & 0x1AE28F7, 3683734498, v2);
}

uint64_t sub_10004EC3C@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W2>, int a3@<W3>, int a4@<W8>)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  int v8;

  *(_BYTE *)(*a1 + (a3 + a4)) = (((v6 + v8 - 223) ^ a2) >> v7)
                                            + ~((v8 - 109) & (2 * (((v6 + v8 - 223) ^ a2) >> v7)))
                                            + 58;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (v8 ^ (508 * (a3 - 1 == v5)))) - 4))();
}

uint64_t sub_10004EC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3
                                                                                + 8
                                                                                * ((1488
                                                                                  * (v5 + 8 == ((v6 - 159211776) & 0x97D60FF ^ 0xFF))) ^ (v6 - 140)))
                                                                    - 8))(a1, (v6 - 140), a3, v4);
}

uint64_t sub_10004ECE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v7;

  v7 = v5 - 1803250707 > 672795034 || v5 - 1803250707 < v4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2
                                                                                 + 8 * (int)(a2 ^ (v7 | (v7 << 7))))
                                                                     - (a2 ^ 0x8C)
                                                                     + 215))(a1, a2, 3683734498, v3);
}

uint64_t sub_10004ED30@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  int v3;
  _QWORD *v4;
  int v5;

  return sub_10004EC3C(a1, *(_DWORD *)(*v4 + 4 * (int)((a2 ^ 0xEC6A8A01) + v5)), v3, a3);
}

uint64_t sub_10004ED58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

void sub_10004ED60(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;

  v1 = 1759421093 * (a1 ^ 0xB37DB054);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x335F4D7B17DD4E0BLL) - 825239869;
  v3 = *(_DWORD *)a1 + v1 + 2041426012;
  v4 = (v3 < 0xD7614D77) ^ (v2 < 0xD7614D77);
  v5 = v2 < v3;
  if (v4)
    v5 = v3 < 0xD7614D77;
  __asm { BR              X11 }
}

uint64_t sub_10004EE48()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((108 * ((((v0 ^ 0x66C) - 1021) & *(_DWORD *)(v1 - 0x335F4D7B17DD4E03)) == 0)) ^ v0))
                            - 8))();
}

uint64_t sub_10004EE88@<X0>(int a1@<W8>, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  va_list va;

  va_start(va, a2);
  v5 = (*(uint64_t (**)(_QWORD, char *, _QWORD, uint64_t))(v3 + 8 * (v4 - 817)))(**(unsigned int **)(v3 + 8 * (int)(v4 & 0x932444C8)), va, ((a1 - 1572048156) & 0xFFFFF000 ^ 0x8D9FFF5)+ ((2 * (a1 - 1572048156)) & 0x11B3E000)+ ((v4 - 1003) | 0x404)- 148505612, 1) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1991 * v5) ^ v4)) - 12))();
}

uint64_t sub_10004EF18()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(_QWORD *)(v0 - 0x335F4D7B17DD4E17) == 0) * ((v2 ^ 0xB) - 1020)) ^ v2))
                            - 8))();
}

void sub_10004EF70()
{
  uint64_t v0;
  _DWORD *v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;

  *v4 = v3;
  *(_DWORD *)(v0 - 0x335F4D7B17DD4E0FLL) = v2;
  *v1 = v2;
}

void sub_10004F4D0(uint64_t a1)
{
  int v1;
  _BOOL4 v3;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0xCDF342D76DC35A3) != 1346595302
    && *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0xCDF342D76DC35A3) != 1346595302;
  v1 = *(_DWORD *)a1 - 1225351577 * ((-1557536513 - (a1 | 0xA329E0FF) + (a1 | 0x5CD61F00)) ^ 0x7F4CC716);
  __asm { BR              X13 }
}

uint64_t sub_10004F5D4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)((((a1 + v3 - 133) > 0x7FFFFF7C)
                                               * (((v2 + 287497217) & 0xEEDD23FE) - 263)) ^ (v2 + 1085)))
                            - 8))();
}

uint64_t sub_10004F620()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 8 * ((494 * (v1 ^ 0x679)) ^ (43 * (v2 > 0))))
                                                  - ((494 * (v1 ^ 0x679) + 326) ^ 0x6D5u)
                                                  + 1003))(43, 494 * (v1 ^ 0x679u) + 326);
}

uint64_t sub_10004F68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;
  int v19;
  int v20;
  _BOOL4 v21;

  v18 = v15 > -177095721;
  *(_DWORD *)(a12 + 4 * (v17 - 596678603)) = v13;
  v19 = v17 + 1727899778 + ((2 * v14) ^ 0x432);
  v20 = v18 ^ (v19 < 177095720);
  v21 = v19 < v16;
  if (!v20)
    v18 = v21;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((1505 * !v18) ^ v14)) - 12))();
}

uint64_t sub_10004F70C()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((1854
                                          * (v1 == ((((v2 - 1879287037) ^ 0x8FFC5BFD) - 587) ^ (v2 - 1879287037) & 0x7003A3F7))) ^ v2))
                            - 12))();
}

uint64_t sub_10004F754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  int v11;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v9
                                                               + 8
                                                               * (((((v10 - 214) | 0x47A) - 1346) * (v11 > 0)) ^ v10))
                                                   - 12))(a1, a9);
}

uint64_t sub_10004F7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v17;

  v17 = *(_DWORD *)(a12 + 4 * (v15 + v16 + 1660)) == v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * (int)(((v14 - 92) ^ v17) & 1 | ((((v14 - 92) ^ v17) & 1) << 6) | (v14 - 65)))
                            - (v14 ^ 0x2DBLL)))();
}

uint64_t sub_10004F7FC()
{
  uint64_t v0;
  unsigned int v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (((v6 + v5 + (v4 ^ v1) + 1085 < v2) * v3) ^ v4)) - 12))();
}

void sub_10004F830()
{
  JUMPOUT(0x10004F7BCLL);
}

void sub_10004F838()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void sub_10004FC70(uint64_t a1)
{
  int v1;

  v1 = 1178560073 * ((-2 - ((a1 | 0xAE85A791) + (~(_DWORD)a1 | 0x517A586E))) ^ 0xEBEE200C);
  __asm { BR              X9 }
}

uint64_t sub_10004FD28(uint64_t result)
{
  *(_DWORD *)(result + 24) = -913989539;
  return result;
}

void sub_10005010C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100050158@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;

  *(_DWORD *)(*(_QWORD *)(a2 + 96) + 24) = v3;
  v4 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) + 800318220) & 0x256989FC) - 1433487740;
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2
                                                     + 8
                                                     * ((28
                                                       * (((2 * v4) & 0x77EF3FFE ^ 0x256909FC)
                                                        + (v4 ^ 0xA9435B01)
                                                        + 1609296719 != 467897166)) | 0x6A2u))
                                         - 12))(0);
}

uint64_t sub_1000501EC()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v0
                                                               + 8
                                                               * (((v2 + v1 + 1141399553) >= 8) | (16 * ((v2 + v1 + 1141399553) >= 8)) | 0x56Au))
                                                   - 8))(1386, v3);
}

uint64_t sub_100050244(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((107 * (((a1 ^ 0x781) + 842376180) & 0xBFD ^ 0x2D0)) ^ 0x569)
                                * ((unint64_t)(v2 - v3 - 4) < 0x20)) ^ a1 ^ 0x781u)))();
}

uint64_t sub_10005029C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  unsigned int v5;

  return (*(uint64_t (**)(void))(v4 + 8 * ((1033 * (v5 >= ((4 * (a4 ^ 0x21A)) ^ 0x33C))) ^ a4)))();
}

uint64_t sub_1000502DC@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v8 = v7 + v6 + v5 + 795;
  v9 = v3 + v8;
  v10 = *(_OWORD *)(v9 - 31);
  v11 = a2 + v8;
  *(_OWORD *)(v11 - 15) = *(_OWORD *)(v9 - 15);
  *(_OWORD *)(v11 - 31) = v10;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((v4 & 0xFFFFFFE0) == 32) * (((a1 - 1343340349) | 0xA3) - 101)) ^ (a1 - 1343338768))))();
}

void sub_100050340()
{
  JUMPOUT(0x100050308);
}

uint64_t sub_10005034C(uint64_t a1, int a2, char a3)
{
  uint64_t v3;
  int v4;
  int v5;

  return (*(uint64_t (**)(_QWORD))(v3
                                           + 8
                                           * (((((v4 == v5) ^ (a2 - a3 + 1)) & 1) * (a2 ^ 0xF1)) ^ a2)))(0);
}

uint64_t sub_100050380(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2
                                                   + 8
                                                   * (((16
                                                      * (((((a2 ^ 0x232) - 1506216670) & 0x59C70D6F ^ 0x577) & v3) == 0)) | (32 * (((((a2 ^ 0x232) - 1506216670) & 0x59C70D6F ^ 0x577) & v3) == 0))) ^ a2 ^ 0x232)))((a2 ^ 0x232u) + 63, (v4 - v5));
}

uint64_t sub_1000503CC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v9 = (a1 + 1963517951) & 0x8AF717FF;
  v10 = v6 + v5 + v7 + v9 - v8;
  *(_QWORD *)(a2 - 7 + v10) = *(_QWORD *)(v3 - 7 + v10);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)((7 * (((v9 - 803) & v4) != v8 + 8)) ^ v9)) - 12))();
}

uint64_t sub_100050440(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)(a3 + v5) = *(_QWORD *)(v6 + v5);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((7 * (a4 != v7)) ^ a1)) - 12))();
}

uint64_t sub_100050474(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v4
                                                     + 8
                                                     * (int)(((((v6 + 1292568581) & 0xB2F4F7FF) - 1373) * (v5 == a4)) ^ v6))
                                         - 8))(0);
}

uint64_t sub_1000504B0@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_BYTE *)(a3 + (a1 - 467897167)) = *(_BYTE *)(v5 + (a1 - 467897167));
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v3 + 8 * ((23 * (a1 - 1 == (a2 ^ (v4 + 723)))) ^ a2)) - 8))(0);
}

void sub_1000504FC(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (1225351577
            * ((-1431559688 - (a1 ^ 0x637B64C4 | 0xAAAC21F8) + (a1 ^ 0x637B64C4 | 0x5553DE07)) ^ 0x15B262D5));
  __asm { BR              X14 }
}

void sub_100050620(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  *(_DWORD *)(a2 + v3) = v2;
}

void sub_1000514D0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) ^ (1225351577 * ((-2 - ((a1 | 0x21ABC784) + (~(_DWORD)a1 | 0xDE54387B))) ^ 0xFDCEE06D));
  __asm { BR              X10 }
}

uint64_t sub_1000515A0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v12 = 1755732067
      * (((&a4 | 0x496E45B9) - &a4 + (&a4 & 0xB691BA40)) ^ 0x97A8F862);
  a7 = &STACK[0x8C0F0A4F49AC026];
  a6 = (v10 - 634) ^ v12;
  a8 = v12 ^ 0x26B677E3;
  a4 = &STACK[0x30CF5C205D591B68];
  a5 = v11;
  v13 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v10 ^ 0x470)) - 4))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((55 * (*(_DWORD *)(v11 - 0x335F4D7B17DD4DFFLL) == v8)) ^ v10))
                                          - (v10 - 567)
                                          + 536))(v13);
}

uint64_t sub_100051688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v10;
  uint64_t v11;
  int v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * ((((a10 == v10) ^ (v12 + 1)) & 1 | (8
                                                                                             * (((a10 == v10) ^ (v12 + 1)) & 1))) ^ v12))
                            - 8))();
}

uint64_t sub_1000516D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11)
{
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;

  *(_BYTE *)(v11 + v12 + v13 + (v16 ^ 0x677u)) = *(_BYTE *)(a11 + v12 + v13 + (v16 ^ 0x677u)) ^ 0x39;
  v17 = v12 + v13 + 1112 < (a10 ^ v14);
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * (v17 | (8 * v17) | v16)) - 8))();
}

void sub_100051720(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(*(_QWORD *)(v3 + 24) - 0x6A5CFF2CF2E1645BLL) = v1;
  *(_DWORD *)(v4 - 0x79D937EF4F9B0BF2) = v2;
  *(_DWORD *)v3 = *a1;
}

void sub_100051788()
{
  unint64_t v0;
  uint64_t v1;
  _BYTE v2[1208];

  v0 = (unint64_t)&v2[qword_100262EA8 - qword_1002638E8];
  qword_1002638E8 = 1801249171 * (v0 + 0x76EA39A97CF9A556);
  qword_100262EA8 = 1801249171 * (v0 ^ 0x8915C65683065AAALL);
  *(_DWORD *)*(&off_100212870
             + ((-109 * (qword_1002638E8 ^ 0xAA ^ qword_100262EA8)) ^ byte_1001B3FD0[byte_1001AFCD0[(-109 * (qword_1002638E8 ^ 0xAA ^ qword_100262EA8))] ^ 0xA])
             + 29) = -1262737048;
  v1 = ((uint64_t (*)(uint64_t, uint64_t))*(&off_100212870
                                                  + ((-109
                                                                                   * ((qword_100262EA8 + qword_1002638E8) ^ 0xAA)) ^ byte_1001AFAD0[byte_1001AB500[(-109 * ((qword_100262EA8 + qword_1002638E8) ^ 0xAA))] ^ 0xB0])
                                                  + 76))(512, 1509315540);
  *(_QWORD *)((char *)*(&off_100212870
                      + ((-109 * ((qword_100262EA8 + qword_1002638E8) ^ 0xAA)) ^ byte_1001B3FD0[byte_1001AFCD0[(-109 * ((qword_100262EA8 + qword_1002638E8) ^ 0xAA))] ^ 0xCD])
                      - 21)
            - 4) = v1;
  __asm { BR              X8 }
}

void sub_100051928()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_100058EBC(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v4;
  unint64_t *v5;
  int v6;

  v1 = *(_DWORD *)(a1 + 44) - 1755732067 * (((a1 | 0xCC66703E) - (a1 | 0x33998FC1) + 865701825) ^ 0x12A0CDE5);
  v2 = 1178560073 * ((1711956306 - (&v4 | 0x660A6152) + (&v4 | 0x99F59EAD)) ^ 0x2361E6CF);
  v4 = 871100923 - v2;
  v6 = v1 - v2 - 1882357543;
  v5 = &STACK[0x1C0D97DFD8A7ACC0];
  sub_100066AE4((uint64_t)&v4);
  __asm { BR              X14 }
}

uint64_t sub_100059300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,char a37,char a38)
{
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;

  v42 = v38 ^ 0x72B;
  *((_BYTE *)&STACK[0x2B8] + (v42 ^ (v40 + 2630)) + v39) = a37;
  *((_BYTE *)&STACK[0x2B8] + 2 * (((v42 - 988) | 0xB) ^ 0x248u) + a8 - 1306494818) = a38;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 8 * (v38 ^ 0x6EA)))(a1, a2, a3, a4, a5, &STACK[0x2B8], a6, a7, a9, a10, a11);
}

uint64_t sub_1000593A8@<X0>(uint64_t a1@<X5>, int a2@<W8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(a1 + a2 + v5 + ((v4 - 959) ^ 0x46Fu)) = *(_BYTE *)(v6 + (v3 - 940462579));
  return (*(uint64_t (**)(void))(v7 + 8 * (v4 ^ (46 * ((v2 + 648) > 3)))))();
}

uint64_t sub_1000593F4@<X0>(uint64_t a1@<X5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t), uint64_t a14)
{
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  v19 = (v15 - 981) | 4;
  *(_BYTE *)(a1 + (v16 + a2 + 1057)) = *(_BYTE *)(v17 + (v14 - 940462657 + v19));
  v20 = 628203409 * ((v18 - 160) ^ 0x82880C33);
  *(_DWORD *)(v18 - 152) = v20 + v19 + 707;
  *(_DWORD *)(v18 - 148) = 1441370100 - v20;
  *(_QWORD *)(v18 - 160) = a14;
  v21 = sub_10007FCA0(v18 - 160);
  return a13(v21);
}

uint64_t sub_100059468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  int v33;
  uint64_t v34;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v34 + 8 * ((692 * (a14 + ((LODWORD(STACK[0x2FC]) << a13) & ((v33 + 1613) ^ 0x682) ^ 6) + (STACK[0x2FC] & 0x3F ^ 0xDBFBA7CC) < 0xFFFFFFC0)) ^ (v33 + 1042))) - 8))(3443252818, 2754370355, 2721869098, 1870154620, a33, &STACK[0x2B8], 9, 3092425712);
}

uint64_t sub_100059524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;

  v16 = v14 + (a11 & 0xF1A05AE8) + 604263794;
  if (v16 <= 0x40)
    v17 = 64;
  else
    v17 = v16;
  return (*(uint64_t (**)(void))(v15 + 8 * ((104 * ((-v12 - 604264498 - v13 + v17) > 0xE)) ^ a12)))();
}

uint64_t sub_10005959C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v16 = v13 + v12 + 604263794;
  v17 = v16 + 704;
  if ((v16 + 704) <= 0x40)
    v17 = 64;
  return (*(uint64_t (**)(void))(v15
                              + 8
                              * ((326
                                * (((a12 - 85) ^ (v14 + v17 > ((v16 + 703) ^ (a12 - 870) ^ 0xFFFFFD3F))) & 1)) ^ a12)))();
}

uint64_t sub_100059610@<X0>(int a1@<W1>, int8x16_t *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;

  *(int8x16_t *)(a3 + (v4 + a1)) = vaddq_s8(vsubq_s8(*a2, vandq_s8(vaddq_s8(*a2, *a2), v7)), v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((v5 - 1898474760) & 0x71286CF7 | (16
                                                                           * (((a4 + 1) & 0x1FFFFFFF0) != 16))))
                            - (((v5 - 1898474760) & 0x71286CF7u)
                             + 357)
                            + 1566))();
}

void sub_10005968C()
{
  JUMPOUT(0x100059654);
}

uint64_t sub_100059698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,char a37)
{
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  _BOOL4 v45;

  v44 = v38 + v41 + ((v37 + 1226807532) & 0xB6E06777) - 252;
  if (v44 <= 0x40)
    v44 = 64;
  v45 = v42 - v39 - v40 + v44 + 1573 < 0xF;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, char *))(*(_QWORD *)(v43 + 8 * ((v45 | (4 * v45)) ^ (v37 - 1038))) - 8))(2327887510, 2988473515, 2988472461, 1870154620, 143, &STACK[0x2B8], &a37);
}

uint64_t sub_100059754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,uint64_t a33,int a34)
{
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  _BOOL4 v41;

  v39 = v37 + v35 + v34;
  v40 = v39 + 1639;
  if ((v39 + 1639) <= 0x40)
    v40 = 64;
  v41 = __CFADD__(v39 + 1638, a32 + a34 + ((121 * (v36 ^ 0x764)) ^ 0xEFDFEC19) + v40);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 + 8 * ((200 * v41) ^ v36))
                                                                                       - 4))(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000597D8@<X0>(int a1@<W1>, uint64_t a2@<X5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,arg31_1000597D8 a31)
{
  int v31;
  uint64_t v32;

  *(_OWORD *)(a2 + (a3 + a1)) = *(_OWORD *)&a31.arr[4];
  return ((uint64_t (*)(void))(*(_QWORD *)(v32
                                        + 8
                                        * (((((a22 + 1) & 0x1FFFFFFF0) == 16) * (((v31 - 95) | 4) ^ 0x2DE)) ^ v31))
                            - 4))();
}

void sub_100059834()
{
  JUMPOUT(0x100059804);
}

uint64_t sub_100059840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(v40 + 8 * (v39 ^ (1052 * (v37 == v38))))
                                                                                               - ((v39 + 883) ^ 0x62Au)
                                                                                               + 69))(2327887510, a2, 2988472461, a4, 143, a6, &a37);
}

uint64_t sub_1000598A0@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X6>, int a6@<W8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(a4 + (a6 + a1)) = *(_BYTE *)(v7 + a5 + v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((((a2 + a6 + 1055) > 0x3F) * a3) ^ v6)) - 8))();
}

uint64_t sub_1000598F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _BOOL4 v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t);

  v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t))(v37 + 8 * v34);
  v41 = STACK[0x304];
  v42 = STACK[0x308];
  v43 = STACK[0x30C];
  v44 = STACK[0x308];
  v45 = STACK[0x30C];
  v46 = LOBYTE(STACK[0x318]) ^ 0x27;
  if (v46 == 2)
  {
    v53 = (unint64_t)&STACK[0x2B8] < a28 && v38 < (unint64_t)&STACK[0x2F8];
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v37
                                                        + 8
                                                        * (int)((((((v36 + 961) | 0x104) ^ 0xFFFFFEF0) + v36 + 1482)
                                                               * v53) ^ (v36 + 1178)))
                                            - 8))(1476395008);
  }
  else if (v46 == 1)
  {
    v48 = (unint64_t)&STACK[0x2B8] >= a28 || v38 >= (unint64_t)&STACK[0x2F8];
    v49 = (v36 + 755);
    v50 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 + 8 * (int)((v49 * v48) ^ (v36 + 1053))) - a34 + 964);
    return v50(v50, v49, 2721869098, a4, &STACK[0x2B8], a6, 9, a8, a9, a10, a11, a12, a13, a14, v35, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25);
  }
  else
  {
    LODWORD(STACK[0x300]) = 2 * (LODWORD(STACK[0x300]) ^ v39) + v39 - (v40 & (4 * (LODWORD(STACK[0x300]) ^ v39)));
    LODWORD(STACK[0x304]) = 2 * (v41 ^ v39) + v39 - (v40 & (4 * (v41 ^ v39)));
    LODWORD(STACK[0x308]) = (v44 ^ v39) + (v42 ^ v39) + v39 - (v40 & (2 * ((v44 ^ v39) + (v42 ^ v39))));
    LODWORD(STACK[0x30C]) = (v45 ^ v39) + (v43 ^ v39) + v39 - (v40 & (2 * ((v45 ^ v39) + (v43 ^ v39))));
    return v54(3443252818, 2754370355, 2721869098, a4, &STACK[0x2B8], a6, 9);
  }
}

uint64_t sub_10005A714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,int a30,int a31,unsigned int a32,unsigned int a33,uint64_t a34)
{
  int v34;
  uint64_t v35;
  _BOOL4 v36;

  if (a33 < a32 != a29 - 1468815888 < (((v34 + 1089) | 0x20C) ^ 0xDB37C1C2))
    v36 = a29 - 1468815888 < (((v34 + 1089) | 0x20C) ^ 0xDB37C1C2);
  else
    v36 = a29 - 1468815888 > a33;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35
                                                                                          + 8
                                                                                          * ((63 * v36) ^ (v34 + 1039)))
                                                                              - 8))(a1, a2, a3, a4, a34);
}

uint64_t sub_10005A7B0@<X0>(int a1@<W0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((((v2 - 69) | 0x45) + 4) * (a2 + a1 + 63 >= (a2 + a1))) ^ (v2 + 620)))
                            - 12))();
}

uint64_t sub_10005A7F0@<X0>(int a1@<W0>, uint64_t a2@<X4>, int8x16_t *a3@<X5>, unint64_t a4@<X6>, int a5@<W7>, int a6@<W8>)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int8x16_t v10;
  int8x16_t v11;

  *a3 = vaddq_s8(vsubq_s8(*(int8x16_t *)(a2 + (a6 + a1)), vandq_s8(vaddq_s8(*(int8x16_t *)(a2 + (a6 + a1)), *(int8x16_t *)(a2 + (a6 + a1))), v10)), v11);
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((((v6 + a5) & v9 ^ a4) == 64) * v7) ^ (v6 + 1309))) - 12))();
}

uint64_t sub_10005A84C@<X0>(int a1@<W0>, uint64_t a2@<X4>, uint64_t a3@<X5>, int a4@<W8>)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;

  *(_BYTE *)(a3 + v4) = *(_BYTE *)(a2 + (a4 + a1))
                      - (v8 & (2 * *(_BYTE *)(a2 + (a4 + a1))))
                      + 57;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((v4 == 63) * (((v5 + v6) & v7) + 1973)) ^ v5)) - 12))();
}

uint64_t sub_10005A898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, uint64_t a15, int a16)
{
  int v16;
  uint64_t v17;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                        + 8
                                                                        * ((30 * (a16 - 940462522 >= a13)) ^ (v16 + 1722)))
                                                            - 12))(a1, a2, a3);
}

void sub_10005A908()
{
  JUMPOUT(0x1000599D8);
}

uint64_t sub_10005A92C@<X0>(unsigned int a1@<W2>, int a2@<W3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12)
{
  int v12;
  uint64_t v13;
  _BOOL4 v14;

  v14 = a12 < a1;
  if (v14 == a3 + a2 < a1 + (v12 ^ 0x6C7) - 91)
    v14 = a3 + a2 < a12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((67 * v14) | v12)) - 4))();
}

uint64_t sub_10005A980@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W8>)
{
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  char v11;
  uint64_t v12;
  _BOOL4 v13;
  char v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;

  v13 = v9 < a3;
  v14 = *(_BYTE *)(a5 + (a1 + a7 + v8 - 1601 - 91));
  *(_BYTE *)(a6 + (v7 + a2)) = v14 - (v11 & (2 * v14)) + 57;
  v15 = a7 + 1 + a4;
  v16 = v13 ^ (v15 < a3);
  v17 = v15 < v9;
  if (!v16)
    v13 = v17;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((v13 * v10) ^ v8)) - 4))();
}

uint64_t sub_10005A9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v23 = 628203409 * ((~((v22 - 160) | 0xE331EBA3) + ((v22 - 160) & 0xE331EBA3)) ^ 0x9E46186F);
  *(_QWORD *)(v22 - 160) = a20;
  *(_DWORD *)(v22 - 152) = v23 + v20 + 695;
  *(_DWORD *)(v22 - 148) = a16 - v23;
  sub_10007FCA0(v22 - 160);
  v24 = STACK[0x2FC] & (((v20 - 9) | 0xA0) - 179);
  *((_BYTE *)&STACK[0x2B8] + (v24 ^ 3)) = -71;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21
                                                                                 + 8
                                                                                 * ((347
                                                                                   * ((v24 ^ 3) > 0x37)) ^ v20))
                                                                     - 4))(3443252818, 2754370355, 2721869098, 1870154620);
}

uint64_t sub_10005AAF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W8>)
{
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6
                                                                                          + 8
                                                                                          * ((2026
                                                                                            * (a5 != ((v5 - 151) ^ 0x9C ^ ((v5 - 218) | 0xE0)))) ^ v5))
                                                                              - 12))(a1, a2, a3, a4, 57);
}

uint64_t sub_10005AB4C()
{
  unsigned int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((497
                                          * (((v1 + 119) ^ (((((v1 + 364) | 0x108) - 816) ^ v0) < 8)) & 1)) ^ v1))
                            - 12))();
}

uint64_t sub_10005ABA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(a6 + v26 + v28) = v30;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 + 8 * ((23 * (((2 * v27) ^ 0x6D0) == (v25 & 0x38))) ^ v27)) - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_10005ABF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5
                                                                                          + 8
                                                                                          * ((443
                                                                                            * (v4 - 114891202 < ((5 * (v6 ^ 8)) ^ 0x15Bu))) ^ (v6 + 1159)))
                                                                              - 12))(a1, a2, a3, a4, 57);
}

uint64_t sub_10005AC4C@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v4 = ((a1 - 727009524) & 0x2B5547DF ^ (unint64_t)(v2 + 50)) + v1;
  if (v4 <= 0x38)
    v4 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((242 * (v4 - v1 + 114891202 < 8)) ^ a1))
                            - (a1 + 997)
                            + 1340))();
}

uint64_t sub_10005ACBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = (v27 + 181021367) & 0xF535D4F7;
  *(_QWORD *)(a6 + v26 + ((v31 - 870) ^ (unint64_t)(v28 + 369))) = v30;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 + 8 * (int)((447 * (((v31 ^ 0xFFFFFFFFFFFFFB0FLL) & v25) != 8)) ^ v31)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_10005AD2C()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + (v2 ^ v5) + v6) = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v3 != v6) * v0) ^ v1)) - 4))();
}

uint64_t sub_10005AD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  int v34;
  uint64_t v35;

  return ((uint64_t (*)(void))(*(_QWORD *)(v35 + 8 * (v34 ^ (1351 * (v33 == a33)))) - (((v34 - 392) | 0x46u) ^ 0x43)))();
}

uint64_t sub_10005AD9C@<X0>(char a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a2 + a3 + v4) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((unint64_t)(a3 + 1 + v4) > 0x37) * v5) ^ (v3 + 963)))
                            - 12))();
}

void sub_10005ADCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12)
{
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;

  v12 = LOBYTE(STACK[0x318]) ^ 0x27;
  if (v12 == 1)
  {
    v19 = STACK[0x2FC];
    v20 = STACK[0x2F8];
    v21 = ((LODWORD(STACK[0x2FC]) >> 5) ^ 0xC8)
        - 2 * (((LODWORD(STACK[0x2FC]) >> 5) ^ 0xC8) & 0xBB ^ (LODWORD(STACK[0x2FC]) >> 5) & 2);
    LOBYTE(STACK[0x2F0]) = a12
                         + ((8 * LOBYTE(STACK[0x2FC])) ^ 0x18)
                         - ((2 * ((8 * LOBYTE(STACK[0x2FC])) ^ 0x18)) & 0x70)
                         - 93;
    LOBYTE(STACK[0x2F1]) = v21 + 57;
    LOBYTE(STACK[0x2F2]) = ((v19 >> 13) ^ 0x2F) + (~(2 * ((v19 >> 13) ^ 0x2F)) | 0x8D) + 58;
    LOBYTE(STACK[0x2F3]) = ((v19 >> 21) ^ 0xCA) + (~(2 * ((v19 >> 21) ^ 0xCA)) | 0x8D) + 58;
    HIDWORD(v22) = v20 ^ 2;
    LODWORD(v22) = v19 ^ 0x40000000;
    LOBYTE(STACK[0x2F4]) = (v22 >> 29) - ((2 * (v22 >> 29)) & 0x72) + 57;
    LOBYTE(STACK[0x2F5]) = ((v20 >> 5) ^ 0x77) - ((2 * ((v20 >> 5) ^ 0x77)) & 0x72) + 57;
    LOBYTE(STACK[0x2F6]) = ((v20 >> 13) ^ 0x36) - ((2 * ((v20 >> 13) ^ 0x36)) & 0x72) + 57;
    v23 = v20 >> 21;
    v24 = (v20 >> 21) ^ 0xFFFFFFFD;
    v18 = v24 + 57;
    v17 = 2 * (v24 & 0x3B ^ v23 & 2);
  }
  else
  {
    if (v12 != 2)
      goto LABEL_6;
    v13 = STACK[0x2F8];
    v14 = STACK[0x2FC];
    v15 = LODWORD(STACK[0x2F8]) >> ((6 * a10) ^ 0x9B);
    LOBYTE(STACK[0x2F0]) = ((LODWORD(STACK[0x2F8]) >> 21) ^ 0xFD)
                         + ~(2 * (((LODWORD(STACK[0x2F8]) >> 21) ^ 0xFD) & 0xBB ^ (LODWORD(STACK[0x2F8]) >> 21) & 2))
                         + 58;
    LOBYTE(STACK[0x2F1]) = (v15 ^ 0x36) - ((2 * (v15 ^ 0x36)) & 0x72) + 57;
    LOBYTE(STACK[0x2F2]) = ((v13 >> 5) ^ 0x77) - ((2 * ((v13 >> 5) ^ 0x77)) & 0x72) + 57;
    HIDWORD(v16) = v13 ^ 2;
    LODWORD(v16) = v14 ^ 0x40000000;
    LOBYTE(STACK[0x2F3]) = (v16 >> 29) - ((2 * (v16 >> 29)) & 0x72) + 57;
    LOBYTE(STACK[0x2F4]) = ((v14 >> 21) ^ 0xCA) + (~(2 * ((v14 >> 21) ^ 0xCA)) | 0x8D) + 58;
    LOBYTE(STACK[0x2F5]) = ((v14 >> 13) ^ 0x2F) - ((2 * ((v14 >> 13) ^ 0x2F)) & 0x72) + 57;
    LOBYTE(STACK[0x2F6]) = ((v14 >> 5) ^ 0xC8) - 2 * (((v14 >> 5) ^ 0xC8) & 0x3D ^ (v14 >> 5) & 4) + 57;
    LOBYTE(v14) = (8 * v14) ^ 0x18;
    v17 = (2 * v14) & 0x70;
    v18 = v14 + 57;
  }
  LOBYTE(STACK[0x2F7]) = v18 - v17;
LABEL_6:
  JUMPOUT(0x1000599D4);
}

uint64_t sub_10005B038()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 ^ ((2 * (v1 != v0)) | (8 * (v1 != v0)))))
                            - ((v2 + 1210607209) & 0xB7D798FF ^ 0x57)))();
}

uint64_t sub_10005B084@<X0>(char a1@<W4>, uint64_t a2@<X5>, int a3@<W8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(a2 + v3 + v5) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8 * (((v3 + 1 + v5 < (unint64_t)(a3 ^ v4) - 27) * v6) ^ (a3 + 163)))
                            - 12))();
}

void sub_10005B0BC()
{
  JUMPOUT(0x1000599D4);
}

uint64_t sub_10005B0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v10;
  uint64_t v11;

  return (*(uint64_t (**)(void))(v11
                              + 8
                              * ((((41 * (a10 ^ 0x433) - 131) ^ (a10 - 977)) * ((v10 + 645) < 4)) | a10)))();
}

uint64_t sub_10005B120@<X0>(int a1@<W8>)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  LOBYTE(STACK[0x2B8]) = *(_BYTE *)(v3 + v2);
  return (*(uint64_t (**)(void))(v4
                              + 8 * ((1835 * ((((a1 + 277) ^ ((v1 & 0xFFFFFFFC) == a1 + 940461801)) & 1) == 0)) ^ a1)))();
}

void sub_10005B168()
{
  JUMPOUT(0x100059334);
}

uint64_t sub_10005B17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  int v36;
  uint64_t v37;
  unint64_t v39;

  if (a32 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v37
                                                                 + 8
                                                                 * ((109 * (LODWORD(STACK[0x314]) != v36 + 534536507)) ^ (v36 + 599)))
                                                     - 8))(a1, a17);
  if (a32 == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37
                                                                                   + 8
                                                                                   * ((426
                                                                                     * (((LODWORD(STACK[0x314]) == 534536586) ^ (v36 + 88)) & 1)) ^ (v36 + 599)))
                                                                       - 8))(a1, a2, a3, a17);
  v39 = ((unint64_t)&a36 ^ 0x7FF37CFD7ECD7F6ELL)
      - 0x142034EC14416240
      + (((_QWORD)&a36 << ((v36 + 46) & 0xF7 ^ 0x74u)) & 0xFFE6F9FAFD9AFED0);
  LOBYTE(STACK[0x313]) = ((v39 - 46) ^ 0xBA) * (v39 - 29);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37
                                                                                 + 8
                                                                                 * ((v36 - 269275346) & 0x100CD1F7))
                                                                     - 8))(a1, a2, a3, a17);
}

void sub_10005B4E0()
{
  JUMPOUT(0x10005B4B0);
}

uint64_t sub_10005B4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v42 = *(_QWORD *)(v37 + 24);
  memset((void *)(v41 - 176), 57, 16);
  v43 = 235795823 * ((24556229 - ((v41 - 160) | 0x176B2C5) + ((v41 - 160) | 0xFE894D3A)) ^ 0x6A240463);
  *(_QWORD *)(v41 - 160) = &a37;
  *(_DWORD *)(v41 - 124) = (v40 + 1813) ^ v43;
  *(_QWORD *)(v41 - 144) = v41 - 196;
  *(_QWORD *)(v41 - 136) = v42;
  *(_QWORD *)(v41 - 120) = v41 + 0x2CF2CD9EB99DE8DFLL;
  *(_DWORD *)(v41 - 152) = v43 + 1430988070;
  v44 = ((uint64_t (*)(uint64_t))((char *)*(&off_100212870 + (v40 ^ 0x32)) - 8))(v41 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v38
                                                      + 8
                                                      * ((804 * (*(_DWORD *)(v41 - 128) == ((v40 + 732) ^ (v39 + 249)))) ^ v40))
                                          - 12))(v44);
}

uint64_t sub_10005B604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BOOL4 v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 8) + v0 - 0x57BF371882FA596BLL)
     - *(unsigned __int8 *)(v5 + v0 - 0x57BF371882FA596BLL);
  v7 = v0 + 1;
  v9 = (v6 ^ 0x75F9EAFE) - 5243460 + (((v4 ^ 0x346) - 336341587) & (2 * v6)) != 1974069434 || v7 == v3 + 16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1548 * v9) ^ v4)) - 12))();
}

uint64_t sub_10005B690@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v5 = ((((v4 - 160) | 0x6FA34C23DE3CBB8CLL) - ((v4 - 160) | 0x905CB3DC21C34473) - 0x6FA34C23DE3CBB8DLL) ^ 0x6713F6DD4A91F2D5)
     * v2;
  *(_QWORD *)(v4 - 128) = v5 + 1974069434;
  *(_DWORD *)(v4 - 120) = ((((v4 - 160) | 0xDE3CBB8C) - ((v4 - 160) | 0x21C34473) + 566445171) ^ 0x4A91F2D5) * v2
                        + a1
                        - 269611775
                        - 61;
  *(_QWORD *)(v4 - 152) = v1 - v5;
  *(_DWORD *)(v4 - 144) = (a1 - 269611775) ^ (((((v4 - 160) | 0xDE3CBB8C) - ((v4 - 160) | 0x21C34473) + 566445171) ^ 0x4A91F2D5)
                                            * v2);
  *(_DWORD *)(v4 - 140) = ((((v4 - 160) | 0xDE3CBB8C) - ((v4 - 160) | 0x21C34473) + 566445171) ^ 0x4A91F2D5) * v2;
  *(_DWORD *)(v4 - 136) = a1
                        - ((((v4 - 160) | 0xDE3CBB8C) - ((v4 - 160) | 0x21C34473) + 566445171) ^ 0x4A91F2D5) * v2
                        + 2104632311;
  *(_DWORD *)(v4 - 160) = ((a1 - 269611775) | 0x2D) ^ (((((v4 - 160) | 0xDE3CBB8C)
                                                       - ((v4 - 160) | 0x21C34473)
                                                       + 566445171) ^ 0x4A91F2D5)
                                                     * v2);
  v6 = ((uint64_t (*)(uint64_t))((char *)*(&off_100212870 + (a1 ^ 0x51)) - 8))(v4 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * *(int *)(v4 - 116)) - 12))(v6);
}

void sub_10005B774()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 32) = -1262737048;
}

void sub_10005B7C0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;

  if (a1)
    v2 = a2 == 0;
  else
    v2 = 1;
  v3 = !v2;
  __asm { BR              X8 }
}

uint64_t sub_10005B850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, unsigned int a17)
{
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  a17 = 108757529 * (((&a16 | 0x956C4C34) - (&a16 & 0x956C4C34)) ^ 0x75F02E1F) - 504207030;
  v20 = sub_100081E5C(&a16);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((933 * (a16 == v17)) ^ v19)) - 12))(v20);
}

uint64_t sub_10005B8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, int a17, int a18)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  a18 = 1224 - 460628867 * ((&a16 + 1482644329 - 2 * ((unint64_t)&a16 & 0x585F5B69)) ^ 0x14C9D914);
  a16 = &STACK[0x1A8FA111108FB34A];
  sub_10007FB7C((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 8 * ((36 * (a17 == v18)) | 0x49A)) - 12))(v20, v21, v22, v23, v24, v25, v26, v27, a9);
}

uint64_t sub_10005B96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, unsigned int a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  a19 = v19;
  a18 = v21 + 1224239923 * (((~&a16 & 0x82819B8) - (~&a16 | 0x82819B9)) ^ 0xFA9BE46E) + 88;
  a17 = a14;
  v24 = ((uint64_t (*)(int *))(*(_QWORD *)(v22 + 8 * (v21 - 61)) - 12))(&a16);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20 + 8 * ((1636 * (a16 == (v21 ^ v23) + 1578270332)) ^ v21))
                                          - 4))(v24);
}

uint64_t sub_10005BA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, uint64_t a17, unsigned int a18, unsigned int a19, unsigned int a20,int a21)
{
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;

  v25 = 460628867
      * ((((&a16 | 0x87461C9C) ^ 0xFFFFFFFE) - (~&a16 | 0x78B9E363)) ^ 0x342F611E);
  a16 = &STACK[0x37C70005964C0FFD];
  a17 = a14;
  a19 = v25 + v24 - 2024873283;
  a20 = -1217699515 - v25;
  a18 = v25 - 1743280203;
  v26 = sub_100081858((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t))(v22
                                          - ((349 * (v24 ^ 0xCA) + 2126097460) & 0xD7EFFBFD)
                                          + *(_QWORD *)(v23 + 8 * ((1732 * (a21 == v21)) ^ v24))
                                          + 8))(v26);
}

uint64_t sub_10005BAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, uint64_t a15, unsigned int a16, unint64_t *a17, unint64_t *a18)
{
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(unsigned int *);
  uint64_t v23;

  a16 = (v18 - 132) ^ (1374699841
                     * (((&a16 | 0xE00B99D5) - &a16 + (&a16 & 0x1FF46628)) ^ 0x8DFF81DC));
  a17 = &STACK[0x509D13A7D8C2F424];
  a18 = a13;
  v22 = *(void (**)(unsigned int *))(v21 + 8 * (v18 ^ 0x2C3));
  v22(&a16);
  a16 = (v18 - 132) ^ (1374699841
                     * ((((2 * &a16) | 0x79F8E202) - &a16 + 1124306687) ^ 0xD1086908));
  a17 = &STACK[0x509D13A7D8C2F428];
  a18 = a13;
  v22(&a16);
  a17 = a13;
  a16 = (v18 - 80) ^ (1755732067
                    * ((&a16 - 1810180175 - 2 * (&a16 & 0x941AD7B1)) ^ 0x4ADC6A6A));
  v23 = sub_100070A3C((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * ((((_DWORD)a18 != ((2 * v18) ^ 0x790 ^ (v19 + 548)))
                                                        * (((v18 + 1149771754) | 0x12218848) - 1453959822)) ^ v18))
                                          - 12))(v23);
}

uint64_t sub_10005BC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  return ((uint64_t (*)(void))(v18 - (v16 ^ 0x56A9A808u) + *(_QWORD *)(v19 + 8 * ((1512 * (a16 == v17)) ^ v16))))();
}

uint64_t sub_10005BCBC@<X0>(int a1@<W8>)
{
  int v1;
  _QWORD *v2;
  int v3;
  void (*v6)(_BYTE *);
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BYTE v10[4];
  int v11;
  uint64_t v12;

  *v2 = (a1 + 1578270332) ^ v9;
  v12 = v7;
  v11 = v1
      + 535753261
      * (((v10 ^ 0x7AB150AD | 0x810A0750) + (v10 ^ 0xFFFFFE3F | 0x7EF5F8AF)) ^ 0xF14F5893)
      + a1;
  v6(v10);
  v12 = v8;
  v11 = 535753261 * (((v10 | 0xFD2C0060) - (v10 & 0xFD2C0060)) ^ 0xF7D80E4F)
      - 1453959639
      + a1;
  v6(v10);
  return v3 ^ 0xB4BC2968;
}

void sub_10005BDE0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _DWORD v3[2];
  uint64_t v4;

  v1 = *(_DWORD *)(a1 + 4) ^ (460628867 * (((a1 | 0x4A5B5FFB) - (a1 & 0x4A5B5FFB)) ^ 0x6CDDD86));
  v2 = *(_QWORD *)(a1 + 8);
  v3[0] = v1
        + 628203409
        * (((v3 | 0x585F3E1) - v3 + (v3 & 0xFA7A0C18)) ^ 0x870DFFD2)
        - 542;
  v4 = v2;
  sub_10006C6D0((uint64_t)v3);
  __asm { BR              X8 }
}

void sub_10005BEE0()
{
  _DWORD *v0;
  int v1;
  uint64_t v2;
  int v3;

  if ((*(_DWORD *)(v2 - 0xCDF342D76DC35A3) - 1346595303) >= 0x7FFFFFFF)
    v3 = v1;
  else
    v3 = v1 + 2;
  *v0 = v3;
}

void sub_10005BF4C(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;

  v1 = *(_DWORD *)(a1 + 16) - 3804331 * ((a1 - 2 * (a1 & 0xF3A65B02) - 207201534) ^ 0x8D737EF4);
  v2 = (*(_BYTE *)a1 ^ (-85 * ((a1 - 2 * (a1 & 2) + 2) ^ 0xF4)));
  ((void (*)(char *, void (*)()))*(&off_100212870 + (v1 ^ 0x664)))((char *)*(&off_100212870 + (v1 ^ 0x6DF)) - 8, sub_1000815BC);
  v3 = *(_QWORD *)*(&off_100212870 + (v1 ^ 0x635));
  v4 = v1 + 1755732067 * ((((2 * &v3) | 0x2D8384C8) - &v3 - 381796964) ^ 0xC8077FBF) - 973;
  sub_100080C5C((uint64_t)&v3);
  __asm { BR              X8 }
}

uint64_t sub_10005C08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v20 = 1225351577 * (&a16 ^ 0x239AD816);
  a17 = v20 ^ 0x21;
  a16 = v20 + v17 - 1378;
  sub_10007FDAC((uint64_t)&a16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18
                                                                                                  + 8 * ((1138 * (**(_DWORD **)(v19 + 8 * (((v17 - 1132) | 0x164) ^ 0x36A)) == (((((v17 - 1132) | 0x164) - 250) | 0x101) ^ 0xFFFFFAFF) + ((((v17 - 1132) | 0x164) - 248) | 0x400))) ^ ((v17 - 1132) | 0x164))))(v21, v22, v23, v24, v25, v26, v27);
}

uint64_t sub_10005C134@<X0>(int a1@<W8>)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t (*v14)(uint64_t, _BYTE *, _DWORD *);
  int v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  unsigned int v20;
  uint64_t result;
  uint64_t v22;
  _BYTE v23[20];
  _BYTE v24[150];

  v9 = *(unsigned int **)(v7 + 8 * (a1 - 1609));
  v10 = *v9;
  v11 = *(_QWORD **)(v7 + 8 * (a1 - 1648));
  v12 = (_BYTE *)*v11;
  v24[0] = *(_BYTE *)*v11 - 16;
  v24[1] = v12[1] - 16;
  v24[2] = v12[2] - 16;
  v24[3] = v12[3] - 16;
  v24[4] = v12[4] - 16;
  v24[5] = v12[5] - 16;
  v24[6] = v12[6] - 16;
  v24[7] = v12[7] - 16;
  v24[8] = v12[8] - 16;
  v24[9] = v12[9] - 16;
  v24[10] = v12[10] - 16;
  v24[11] = v12[11] - 16;
  v24[12] = v12[12] - 16;
  v24[13] = v12[13] - 16;
  v24[14] = v12[14] - 16;
  v24[15] = v12[15] - 16;
  v24[16] = v12[16] - 16;
  v24[17] = v12[17] - 16;
  v24[18] = v12[18] - 16;
  v24[19] = v12[19] - 16;
  v24[20] = v12[20] - 16;
  v24[21] = v12[21] - 16;
  v13 = (_BYTE *)*v11;
  v24[22] = v13[22] - 16;
  v24[23] = v13[23] - 16;
  v24[24] = v13[24] - 16;
  v24[25] = v13[25] - 16;
  v24[26] = v13[26] - 16;
  v24[27] = v13[27] - 16;
  v24[28] = v13[28] - 16;
  v24[29] = v13[29] - 16;
  v14 = *(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(v7 + 8 * (a1 ^ 0x648));
  v15 = v14(v10, v24, v2);
  v16 = ((2 * v15) & 0xDC6DBFBA) + (v15 ^ 0x6E36DFDD);
  if (v16 != 1849090013)
  {
    if (v16 == 1849091115)
    {
      v17 = *v9;
      v18 = **(_BYTE ***)(v7 + 8 * (v4 ^ 0x60E));
      v23[0] = *v18 - 27;
      v23[1] = v18[1] - 27;
      v23[2] = v18[2] - 27;
      v23[3] = v18[3] - 27;
      v23[4] = v18[4] - 27;
      v23[5] = v18[5] - 27;
      v23[6] = v18[6] - 27;
      v23[7] = v18[7] - 27;
      v23[8] = v18[8] - 27;
      v23[9] = v18[9] - 27;
      v23[10] = v18[10] - 27;
      v23[11] = v18[11] - 27;
      v23[12] = v18[12] - 27;
      v23[13] = v18[13] - 27;
      v23[14] = v18[14] - 27;
      v23[15] = v18[15] - 27;
      v23[16] = v18[16] - 27;
      v23[17] = v18[17] - 27;
      v23[18] = v18[18] - 27;
      v23[19] = v18[19] - 27;
      v19 = v14(v17, v23, v2);
      v20 = (2 * v19) & 0xBC6DBFFA;
      v16 = (v19 ^ 0xDE36DFFD) + 1778368480;
    }
    else
    {
      v20 = -637550592;
    }
    __asm { BR              X8 }
  }
  *(_DWORD *)(v8 + 344) |= (v4 + 1392933243) & 0xACF98383 ^ 0x389;
  *(_DWORD *)(v8 + 44) = 377236729;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _DWORD *))(v7 + 8 * (v4 - 1561)))(*v2, v8 + 332, v8 + 336, v8 + 340, v3);
  v22 = *(_QWORD *)(v1 + 8);
  *(_DWORD *)(*(_QWORD *)(v1 + 24) - 0x499E23D0EA4735A8) = *v2;
  *(_DWORD *)(v22 - 0x2389B50FF96809FFLL) = *v3;
  *(_DWORD *)(v1 + 20) = -1262737048;
  return result;
}

void sub_10005C568(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_10005C5A0()
{
  return 4294925273;
}

uint64_t sub_10005C5AC@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void))(a1 + 208))();
  return 0;
}

void sub_10005C5C0(unint64_t a1)
{
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  char v8;
  int v9;
  int v10;
  char *v11;
  unsigned int v12;
  _DWORD v13[2];
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  unint64_t *v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t *v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned int v46;
  unint64_t *v47;
  int v48;

  v2 = 3804331 * (((a1 | 0xD29CC998) - (a1 | 0x2D633667) + 761476711) ^ 0xAC49EC6E);
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)a1 ^ v2;
  v5 = 1178560073 * ((&v46 - 1353327316 - 2 * (&v46 & 0xAF55DD2C)) ^ 0x15C1A54E);
  v38 = *(_DWORD *)(a1 + 8) ^ v2;
  v18 = 3804331
      * (((a1 | 0xF8BBF308D29CC998) - (a1 | 0x7440CF72D633667) + 0x7440CF72D633667) ^ 0x3712930CAC49EC6ELL);
  v6 = v3 + v2;
  v46 = 871100923 - v5;
  v48 = v4 - v5 - 1882357516;
  v26 = &STACK[0x1C0D97DFD8A7ACD8];
  v47 = &STACK[0x1C0D97DFD8A7ACD8];
  sub_100066AE4((uint64_t)&v46);
  v7 = v4;
  v35 = v6 + 1785160532;
  v17 = v6 - 1964387613;
  v20 = v6 + 2072220469;
  v19 = v6 + 1350787282;
  v32 = &v44;
  v15 = (char *)&v13[-230823137] + 2;
  v8 = v4 ^ 0xF0;
  v28 = 367 * (v4 ^ 0x37);
  v31 = v28 ^ 0x4A3;
  v30 = v4 - 2000435512;
  v39 = (v4 - 2000435512) & 0x773C3B3F;
  v27 = (v4 + 196693958) & 0xF446B58F;
  v29 = v27 ^ 0x5C7;
  v14 = v4 ^ 0x35u;
  v13[1] = v4 ^ 0x46;
  v36 = v4 ^ 0x46u;
  v37 = v36;
  v9 = v4;
  v33 = (v4 + 97799747) & 0xFA2BB7EC;
  v34 = v4;
  v21 = a1;
  v16 = v4 ^ 0x4F0;
  v24 = vdupq_n_s32(0xB4BC2968);
  v25 = vdupq_n_s32(0x34BC296Bu);
  v23 = vdupq_n_s32(0x34BC2979u);
  v10 = v4 + 1637;
  v11 = (char *)*(&off_100212870 + v4 + 141) - 4;
  v22 = *(_QWORD *)&v11[8 * v9] - 4;
  v12 = v38 - ((v7 - 355115322 + (v38 << (v8 + 61))) & 0x8F13B43C) - 1124824677;
  v40 = (HIBYTE(v12) ^ 0xC7) + (~(2 * (HIBYTE(v12) ^ 0xC7)) | 0x8D) + 58;
  v41 = (BYTE2(v12) ^ 0x89) - 2 * ((BYTE2(v12) ^ 0x89) & 0x3D ^ BYTE2(v12) & 4) + 57;
  v42 = (BYTE1(v12) ^ 0xDA) + (~(2 * (BYTE1(v12) ^ 0xDA)) | 0x8D) + 58;
  v43 = v12 ^ 0x27;
  __asm { BR              X10 }
}

uint64_t sub_10005CA10(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v8 = v5 + a2;
  if (v8 <= 0x40)
    v8 = 64;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v7
                                                      + 8
                                                      * ((246 * (v6 - v3 - v4 + v8 < ((v2 - 570) | 0x200u) - 1573)) ^ v2))
                                          - 4))(3083378789);
}

uint64_t sub_10005CA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  _BOOL4 v36;

  v31 = v26 - 1158;
  v32 = (4 * (v26 - 1158)) ^ 0x194;
  v33 = (v26 - 2004168303) & 0x77752E65;
  v34 = v28 + v27 + a2;
  if (v34 <= 0x40)
    v35 = 64;
  else
    v35 = v34;
  v36 = __CFADD__(v34 + v33 - 1638, v29 + v35);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8 * ((v36 * (v32 - 1568)) | v31)))(a1, a2, a3, a4, a5, a6, 95, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_10005CB04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,arg32_10005CB04 a32)
{
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_OWORD *)(a2 + ((((v32 - 1313) | 0xB8) + 4294966787) & (v34 + a3 + 3))) = *(_OWORD *)&a32.arr[4];
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v35
                                                               + 8
                                                               * ((350 * (((v33 + 1) & 0x1FFFFFFF0) == 16)) ^ v32))
                                                   - 4))(a1, 184);
}

void sub_10005CB70()
{
  JUMPOUT(0x10005CB34);
}

uint64_t sub_10005CB7C@<X0>(int a1@<W1>, uint64_t a2@<X3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33,char a34)
{
  int v34;
  int v35;
  uint64_t v36;
  int v37;

  v37 = (v35 - 701) | 0x18;
  *(_BYTE *)(a2 + (v37 ^ (a1 + 524)) + v34) = a33;
  *(_BYTE *)(a2 + (a3 - 1995728278)) = a34;
  return (*(uint64_t (**)(void))(v36 + 8 * ((1112 * ((((v37 ^ 0x22B) - 56) & 0x48D02ACA) == 1221601992)) ^ v37)))();
}

uint64_t sub_10005CC0C@<X0>(uint64_t a1@<X3>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,char a32)
{
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;

  *(_BYTE *)(a1 + (v36 + a2 + 1)) = *(&a32 + (v34 - 1221601992));
  return (*(uint64_t (**)(void))(v37 + 8 * ((381 * (((2 * v33) ^ 0x40A ^ (v35 - 41)) + v32 < 4)) ^ v33)))();
}

uint64_t sub_10005CC60@<X0>(uint64_t a1@<X3>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,char a32)
{
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v35 = 13 * (v32 ^ 0x21B);
  *(_BYTE *)(a1 + (a2 + 2)) = *(&a32 + (v35 ^ 0xB72FD50D) + v33);
  v36 = 628203409 * ((((v34 - 168) | 0x8BD99C87) - ((v34 - 168) & 0x8BD99C87)) ^ 0x95190B4);
  *(_DWORD *)(v34 - 160) = v36 + v35 + 734;
  *(_DWORD *)(v34 - 156) = 1441370100 - v36;
  STACK[0x348] = a20;
  v37 = sub_10007FCA0(v34 - 168);
  return a12(v37);
}

uint64_t sub_10005CCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  uint64_t v33;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v33
                                                               + 8
                                                               * ((436
                                                                 * (a14
                                                                  + (((STACK[0x314] & 0x3F) << (a33 - 51)) ^ 6)
                                                                  + ((a33 + 125) ^ 0x6FAFFD0D ^ STACK[0x314] & 0x3F) < 0xFFFFFFC0)) ^ (a33 + 1672)))
                                                   - 8))(3083378789, 1566);
}

uint64_t sub_10005CDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;

  v31 = v29 + ((a3 + 594) ^ 0x701) - 1873806149;
  if (v31 <= 0x40)
    v32 = 64;
  else
    v32 = v31;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8 * ((62 * (((a3 + 3) ^ ((1873804734 - v27 - v28 + v32) < 0xF)) & 1)) ^ ((int)a3 + 594))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_10005CE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  _BOOL4 v34;

  v32 = v28 + v27 - 1873806149;
  v33 = v32 + v29;
  if ((v32 + v29) <= 0x40)
    v33 = 64;
  v34 = __CFADD__(v32 + v29 - 80 + 79, v30 + v33);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 + 8 * ((8 * v34) | (32 * v34) | v29)) - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_10005CE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  int v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;

  *(int8x16_t *)(a4 + (a9 - 185448735)) = vaddq_s8(vsubq_s8(*v30, vandq_s8(vaddq_s8(*v30, *v30), v33)), v32);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 + 8 * ((237 * (((v29 + 1) & 0x1FFFFFFF0) == 16)) ^ v28)) - ((v28 + 845) ^ 0x58ALL)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

void sub_10005CEFC()
{
  JUMPOUT(0x10005CEB8);
}

uint64_t sub_10005CF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9
                                                                                                  + 8 * (((((v8 - 1577239432) & 0x5E02C7BF) + 73) * (v6 == v7)) ^ v8)))(a1, a2, a3, a4, a5, a6, 95);
}

uint64_t sub_10005CF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,int a29,int a30,int a31,unint64_t a32)
{
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  _BOOL4 v45;
  _BOOL4 v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *);

  v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *))(v35 + 8 * v32);
  v37 = STACK[0x31C];
  v38 = STACK[0x31C];
  v39 = STACK[0x320];
  v40 = STACK[0x324];
  v41 = STACK[0x320];
  v42 = STACK[0x324];
  v43 = LOBYTE(STACK[0x330]) ^ 0x27;
  if (v43 == 2)
  {
    v48 = (unint64_t)&STACK[0x2D0] >= a32 || v36 >= (unint64_t)&STACK[0x310];
    return ((uint64_t (*)(_QWORD, _QWORD))(*(_QWORD *)(v35 + 8 * ((a31 * v48) ^ ((int)a3 + 1023)))
                                                   - (a3 + 1023)
                                                   + 1063))(LODWORD(STACK[0x328]), LODWORD(STACK[0x328]));
  }
  else if (v43 == 1)
  {
    v45 = (unint64_t)&STACK[0x2D0] < a32 && v36 < (unint64_t)&STACK[0x310];
    return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8
                                                             * (((((a30 ^ v45) & 1) == 0) * a29) ^ ((int)a3 + 520))))(a1, 1566);
  }
  else
  {
    LODWORD(STACK[0x318]) = 2 * (LODWORD(STACK[0x318]) ^ v34) + v34 - (v33 & (4 * (LODWORD(STACK[0x318]) ^ v34)));
    LODWORD(STACK[0x31C]) = v34 + (v38 ^ v34) + (v37 ^ v34) - (v33 & (2 * ((v38 ^ v34) + (v37 ^ v34))));
    LODWORD(STACK[0x320]) = (v41 ^ v34) + (v39 ^ v34) + v34 - (v33 & (2 * ((v41 ^ v34) + (v39 ^ v34))));
    LODWORD(STACK[0x324]) = (v42 ^ v34) + (v40 ^ v34) + v34 - (v33 & (2 * ((v42 ^ v34) + (v40 ^ v34))));
    return v49(a1, 1566, a3, a4, &STACK[0x2D0]);
  }
}

uint64_t sub_10005DD8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,unsigned int a33,uint64_t a34,uint64_t a35,int a36)
{
  uint64_t v36;
  _BOOL4 v37;

  if (a33 < 0x6FCD9272 != (a36 + 664154903) < 0x6FCD9272)
    v37 = (a36 + 664154903) < 0x6FCD9272;
  else
    v37 = a36 + 664154903 > a33;
  return ((uint64_t (*)(void))(*(_QWORD *)(v36 + 8 * ((98 * !v37) ^ (a3 + 1672))) - 8))();
}

uint64_t sub_10005DE0C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((a6 - 1486) * (v6 + a1 + 63 < (v6 + a1))) ^ a6))
                            - (a6 - 1400)
                            + 224))();
}

uint64_t sub_10005DE44@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X3>, unint64_t a4@<X6>, unsigned int a5@<W7>, uint64_t a6@<X8>)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_BYTE *)(a3 + a6) = *(_BYTE *)(v8 + (v6 + a1))
                      - (v10 & (2 * *(_BYTE *)(v8 + (v6 + a1))))
                      + 57;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((a6 + 1 != (v7 ^ a5 ^ a4)) * a2) ^ v7)) - 12))();
}

uint64_t sub_10005DE90(int a1, uint64_t a2, uint64_t a3, int8x16_t *a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;

  *a4 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v8 + (v6 + a1)), vandq_s8(vaddq_s8(*(int8x16_t *)(v8 + (v6 + a1)), *(int8x16_t *)(v8 + (v6 + a1))), v11)), v10);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((((a6 - 1605) ^ 0xFLL) != 64) * v7) ^ (a6 - 1400)))
                            - 12))();
}

uint64_t sub_10005DEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34
                                                                                 + 8
                                                                                 * ((22
                                                                                   * ((a34 - 1221601935) > 0xFFFFFFFA)) ^ ((int)a3 + 1485)))
                                                                     - ((a3 + 16) ^ 0x48)))(a1, a2, a3, a4);
}

void sub_10005DF5C()
{
  JUMPOUT(0x10005D0ACLL);
}

uint64_t sub_10005DF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;

  v19 = a16 < 0x80E9C253;
  if (v19 == (v16 + 951214776) < 0x80E9C253)
    v19 = v16 + 951214776 < a16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * ((v19 * ((v17 + 321) ^ 0x1F9)) ^ v17)) - 12))();
}

uint64_t sub_10005DFE4@<X0>(int a1@<W0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W8>)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  unsigned int v13;
  int v14;
  _BOOL4 v15;

  v12 = a2 < v8;
  *(_BYTE *)(a4 + (a5 + v7)) = *(_BYTE *)(v10 + (v5 + a1))
                                           - ((v6 - 63) & (2 * *(_BYTE *)(v10 + (v5 + a1))))
                                           + 57;
  v13 = v5 + 1 + v9;
  v14 = v12 ^ (v13 < v8);
  v15 = v13 < a2;
  if (!v14)
    v12 = v15;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((v12 * a3) ^ v6)) - 12))();
}

uint64_t sub_10005E048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v31;

  v31 = (13 * (a5 ^ 0x1F6) - 654835913) & 0x270807D5;
  v28 = 628203409 * ((((v27 - 168) | 0x6A40E8D) - (v27 - 168) + ((v27 - 168) & 0xF95BF170)) ^ 0x842C02BE);
  *(_DWORD *)(v27 - 160) = v28 + a5 + 288;
  *(_DWORD *)(v27 - 156) = a15 - v28;
  STACK[0x348] = a26;
  sub_10007FCA0(v27 - 168);
  v29 = STACK[0x314] & (v31 - 1794);
  *((_BYTE *)&STACK[0x2D0] + (v29 ^ 3)) = -71;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v26 + 8 * ((1008 * ((v29 ^ 3) > 0x37)) ^ a5))
                                          - 12))(3083378789);
}

uint64_t sub_10005E160(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8 * (((v1 == (v2 ^ 0x757) + 41) * (v2 - 1642)) ^ v2)))(a1, 57);
}

uint64_t sub_10005E1A4()
{
  unsigned int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((v1 + 71) ^ (2
                                            * (((((v1 - 1825) | 0x14) + ((v1 - 1322) ^ 0x21F)) ^ v0) > 7)))))();
}

uint64_t sub_10005E1E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(a8 + a5) = v12;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11
                                                                                          + 8
                                                                                          * ((((v9 & 0x38) == 8) * v10) ^ v8))
                                                                              - ((v8 + 1201) ^ 0x6CCLL)))(a1, a2, a3, a4, 1707);
}

uint64_t sub_10005E228@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *v4 = v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v5 == 0) * a1) ^ v2)) - (a2 ^ v3)))();
}

uint64_t sub_10005E250@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;

  return ((uint64_t (*)(void))(*(_QWORD *)(v30 + 8 * ((((a1 - 1714) ^ 4) * (a29 == v29)) ^ a1)) - 8))();
}

uint64_t sub_10005E284(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v4 + v7 + a4 + (v5 - 30) - 23) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((((unint64_t)(v4 + v7) > 0x3F) * v6) ^ (v5 + 731))) - 12))();
}

void sub_10005E2BC()
{
  JUMPOUT(0x10005D0A8);
}

uint64_t sub_10005E2D0@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3
                                                               + 8
                                                               * ((94 * ((a2 - 923293266) > 0x37)) ^ (v2 + 509)))
                                                   - ((v2 + 1655) ^ 0x6A3)))(a1, 57);
}

uint64_t sub_10005E324@<X0>(unsigned int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BOOL4 v6;

  v4 = a1;
  v5 = a1 + v2;
  if (v5 <= 0x38)
    v5 = 56;
  v6 = v5 - v4 + ((26 * (v1 ^ 0x6A9u)) ^ 0x37085666) > 7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((2 * v6) | (4 * v6)) ^ v1)) - 4))();
}

uint64_t sub_10005E37C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a4 + v5) = v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((828 * ((a1 & 0xFFFFFFFFFFFFFFF8) == 8)) ^ v4 ^ 0x3E1))
                            - ((89 * (v4 ^ 0x6ACu)) ^ 0x263)))();
}

void sub_10005E3D4()
{
  JUMPOUT(0x10005E398);
}

uint64_t sub_10005E3DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1045 * (((a1 == v1) ^ (v2 - 58)) & 1)) ^ v2))
                            - 8))();
}

uint64_t sub_10005E414(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + v7 + a4 - 1) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((((unint64_t)(v5 + v7) < 0x38) * v6) ^ (v4 + 571))) - 8))();
}

void sub_10005E444(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12)
{
  char v12;
  int v13;
  int v14;
  char v15;
  int v16;
  char v17;
  unint64_t v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  unint64_t v25;

  v13 = LOBYTE(STACK[0x330]) ^ 0x27;
  if (v13 == 1)
  {
    v21 = STACK[0x314];
    v22 = STACK[0x310];
    v23 = ((LODWORD(STACK[0x314]) >> 5) ^ 0xC8)
        - 2 * (((LODWORD(STACK[0x314]) >> 5) ^ 0xC8) & 0x3D ^ (LODWORD(STACK[0x314]) >> 5) & 4);
    v24 = (LODWORD(STACK[0x314]) >> 13) ^ 0x2F;
    LOBYTE(STACK[0x308]) = ((8 * LOBYTE(STACK[0x314])) ^ 0x18)
                         - ((((8 * LODWORD(STACK[0x314])) ^ 0x18) << a12) & 0x70)
                         + 57;
    LOBYTE(STACK[0x309]) = v23 + 57;
    LOBYTE(STACK[0x30A]) = v24 + (~(2 * v24) | 0x8D) + 58;
    v20 = 114;
    v17 = a3 ^ 0xDE;
    LOBYTE(STACK[0x30B]) = ((v21 >> 21) ^ 0xCA) - ((2 * ((v21 >> 21) ^ 0xCA)) & 0x72) + 57;
    HIDWORD(v25) = v22 ^ 2;
    LODWORD(v25) = v21 ^ 0x40000000;
    LOBYTE(STACK[0x30C]) = (v25 >> 29) - ((2 * (v25 >> 29)) & 0x72) + 57;
    LOBYTE(STACK[0x30D]) = ((v22 >> 5) ^ 0x77) - ((2 * ((v22 >> 5) ^ 0x77)) & 0x72) + 57;
    LOBYTE(STACK[0x30E]) = ((v22 >> 13) ^ 0x36) - ((2 * ((v22 >> 13) ^ 0x36)) & 0x72) + 57;
    v19 = (v22 >> 21) ^ 0xFFFFFFFD;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_6;
    v14 = STACK[0x310];
    v19 = STACK[0x314];
    v15 = ((LODWORD(STACK[0x310]) >> 13) ^ 0x36) - (v12 & (2 * ((LODWORD(STACK[0x310]) >> 13) ^ 0x36)));
    v16 = (LODWORD(STACK[0x310]) >> 5) ^ 0x77;
    LOBYTE(STACK[0x308]) = ((LODWORD(STACK[0x310]) >> 21) ^ 0xFD)
                         - (a10 & (2 * ((LODWORD(STACK[0x310]) >> 21) ^ 0xFD)))
                         + 57;
    LOBYTE(STACK[0x309]) = v15 + 57;
    v17 = a3 ^ 0xDE;
    LOBYTE(STACK[0x30A]) = v16 - (v12 & (2 * v16)) + 57;
    HIDWORD(v18) = v14 ^ 2;
    LODWORD(v18) = v19 ^ 0x40000000;
    LOBYTE(STACK[0x30B]) = (v18 >> 29) - (v12 & (2 * (v18 >> 29))) + 57;
    LOBYTE(STACK[0x30C]) = ((v19 >> 21) ^ 0xCA) - (v12 & (2 * ((v19 >> 21) ^ 0xCA))) + 57;
    LOBYTE(STACK[0x30D]) = ((v19 >> 13) ^ 0x2F) - (v12 & (2 * ((v19 >> 13) ^ 0x2F))) + 57;
    LOBYTE(STACK[0x30E]) = ((v19 >> 5) ^ 0xC8) - 2 * (((v19 >> 5) ^ 0xC8) & 0x3F ^ (v19 >> 5) & 6) + 57;
    LOBYTE(v19) = (8 * v19) ^ 0x18;
    v20 = 112;
  }
  LOBYTE(STACK[0x30F]) = v19 - (((_BYTE)v19 << (v17 + 23)) & v20) + 57;
LABEL_6:
  JUMPOUT(0x10005D0A8);
}

uint64_t sub_10005E654@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((((v1 + v2) > 3) * (a1 ^ 0x21F)) ^ a1)))();
}

uint64_t sub_10005E68C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,char a31)
{
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;

  LOBYTE(STACK[0x2D0]) = *(&a31 + v32);
  return (*(uint64_t (**)(void))(v34 + 8 * ((1755 * (v33 + v31 + (a1 ^ 0x1E1u) - 51 < 4)) ^ a1 ^ 0x3CA)))();
}

void sub_10005E6D0()
{
  JUMPOUT(0x10005CBBCLL);
}

uint64_t sub_10005E6E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;

  if (a33 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v38
                                                                 + 8
                                                                 * ((1864
                                                                   * (LODWORD(STACK[0x32C]) != (a3 ^ 0x180) + 534536150)) ^ (a3 + 384)))
                                                     - 4))(a1, a17);
  if (a33 == 1)
    return ((uint64_t (*)(void))(*(_QWORD *)(v38
                                          + 8
                                          * ((113 * (LODWORD(STACK[0x32C]) != ((a3 - 20) | 0x194) + 534536150)) ^ (a3 + 384)))
                              - 4))();
  v40 = 5 * (a3 ^ 0xBDu);
  v41 = ((unint64_t)&a38 ^ 0xF46F7377CF7FDB52 ^ v40)
      + ((2 * (_QWORD)&a38) & 0xE8DEE6EF9EFFB3F0)
      + 0x6BB2DEABFDB7C001;
  v42 = ((_DWORD)v40 + 1222394896) & 0xB723B976 ^ 0xFFFFFFFFFFFFFFCBLL;
  *((_BYTE *)&STACK[0x2D0] + v42 + 92) = (v41 ^ 0xBA) * (v41 + 17);
  return ((uint64_t (*)(void))(*(_QWORD *)(v38 + 8 * (int)((1652 * (v42 == -92)) ^ v40)) - 8))();
}

void sub_10005EA54()
{
  JUMPOUT(0x10005EA28);
}

uint64_t sub_10005EA5C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  uint64_t v4;

  v2 = 235795823 * ((((v1 - 168) | 0xD4D6179E) - (v1 - 168) + ((v1 - 168) & 0x2B29E860)) ^ 0x407B5EC7);
  *(_DWORD *)(v1 - 160) = v2 + 1430988070;
  *(_DWORD *)(v1 - 132) = (a1 + 1806) ^ v2;
  result = ((uint64_t (*)(uint64_t))((char *)*(&off_100212870 + a1 - 21) - 8))(v1 - 168);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(v1 - 136);
  return result;
}

void sub_10005EB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  int v6;

  if (a4)
    v5 = a5 == 0;
  else
    v5 = 1;
  v6 = !v5;
  __asm { BR              X8 }
}

uint64_t sub_10005EBF4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18)
{
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  *a4 = 0;
  *a5 = 0;
  a18 = 108757529
      * (((&a17 | 0x51085D1D) - &a17 + (&a17 & 0xAEF7A2E0)) ^ 0xB1943F36)
      - 504207030;
  v21 = sub_100081E5C(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((1107 * (a17 == ((v19 + 434) ^ 0x272))) ^ v20))
                                          - 8))(v21);
}

uint64_t sub_10005ECA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, int a18, unsigned int a19, int a20)
{
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v22 = 1759421093 * ((2 * (&a17 & 0x718879B0) - &a17 + 242714189) ^ 0xBD0A3619);
  a20 = v22 ^ 0x65CC81C5;
  LODWORD(a17) = v22 ^ 0x69CCD154;
  HIDWORD(a17) = v22 ^ 0x7C8B1567;
  a18 = v22 + v20 - 350;
  ((void (*)(unint64_t **))((char *)*(&off_100212870 + (v20 ^ 0x2EF)) - 8))(&a17);
  a17 = &STACK[0x1A8FA111108FB35A];
  a19 = v20 - 460628867 * (((&a17 | 0x1C00298D) - (&a17 & 0x1C00298D)) ^ 0x5096ABF0) + 598;
  sub_10007FB7C((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 + 8 * (((a18 != (v20 ^ 0x6F20C53C) + 1167811098) * (v20 ^ 0x28E)) ^ v20)) - 8))(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

uint64_t sub_10005EDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, unsigned int a20,uint64_t a21)
{
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;

  v26 = v24 ^ 0x85;
  v27 = 1178560073 * ((&a17 & 0xFD3EDD5D | ~(&a17 | 0xFD3EDD5D)) ^ 0xB8555AC0);
  a20 = (v26 - 491) ^ v27;
  a19 = a16;
  a18 = v23 - ((2 * v23) & 0x4C55314) + ((6 * (v26 ^ 0x29A)) ^ 0x262AB04) + v27;
  ((void (*)(int *))((char *)*(&off_100212870 + (v26 ^ 0x2FCu)) - 12))(&a17);
  v28 = 1178560073 * ((&a17 & 0xED487C29 | ~(&a17 | 0xED487C29)) ^ 0xA823FBB4);
  a19 = a16;
  a21 = v21;
  a20 = v28 ^ ((v22 ^ 0xF85FBFAC) + 535818112 + ((2 * v22) & 0xF0BF7F58));
  a18 = v28 + v26 + 315;
  v29 = ((uint64_t (*)(int *))*(&off_100212870 + v26 - 707))(&a17);
  return (*(uint64_t (**)(uint64_t))(v25 + 8 * ((1719 * (a17 == -1262737048)) ^ v26)))(v29);
}

uint64_t sub_10005EF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, uint64_t a18, unsigned int a19, unsigned int a20,unsigned int a21,int a22)
{
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  if (a12 == 70636352)
    v25 = -1217699515;
  else
    v25 = -39006090;
  v26 = 460628867 * ((2 * (&a17 & 0x6E931898) - &a17 - 1855133854) ^ 0xDDFA651F);
  a19 = v26 + 1479110642;
  a20 = v26 + v22 - 2024873842;
  a21 = v25 - v26;
  a17 = &STACK[0x37C70005964C0FFD];
  a18 = a16;
  v27 = sub_100081858((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t))(v23
                                            + 8
                                            * (((a22 == ((746 * (v22 ^ 0x2F5)) ^ (v24 + 852))) * ((v22 ^ 0x79) - 210)) ^ v22)))(v27);
}

uint64_t sub_10005F040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  unsigned int v12;
  int v13;
  uint64_t v14;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14
                                                              + 8
                                                              * ((((v12 - 554520575) & 0x10D4EFF ^ 0x67A) * (a12 == v13)) ^ v12)))(a1, a2, a3);
}

uint64_t sub_10005F0E4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, int a7, char a8, uint64_t a9, uint64_t a10, unsigned int a11, char *a12, _BYTE *a13, uint64_t a14, unsigned int a15)
{
  int v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  void (*v21)(unsigned int *);
  int v22;
  uint64_t v23;

  v22 = (v18 - 1487) | 0x4D0;
  a12 = &a8 + a1;
  a13 = a6;
  a11 = (v18 - 926) ^ (((2 * (&a11 & 0x6D042B10) - &a11 + 318493935) ^ 0x7F0FCCE6) * v15);
  v21(&a11);
  a13 = v20;
  a14 = v17;
  a12 = a6;
  a15 = (v22 - 126) ^ (1225351577 * ((&a11 & 0x80A09E46 | ~(&a11 | 0x80A09E46)) ^ 0x5CC5B9AF));
  ((void (*)(unsigned int *))((char *)*(&off_100212870 + v22 - 1165) - 8))(&a11);
  a12 = v16;
  a13 = a6;
  a11 = (v22 - 671) ^ (1374699841
                     * (((&a11 | 0x351CB18C) - (&a11 & 0x351CB18C)) ^ 0x58E8A985));
  v21(&a11);
  a12 = a6;
  a11 = (v22 - 619) ^ (1755732067
                     * (((&a11 | 0x1B4D8ED6) - &a11 + (&a11 & 0xE4B27128)) ^ 0xC58B330D));
  v23 = sub_100070A3C((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * ((((_DWORD)a13 == -1262737048) * ((v22 - 478) ^ 0x2D2)) ^ v22))
                                          - 8))(v23);
}

uint64_t sub_10005F298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  int v14;
  uint64_t v15;
  int v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((508 * (a14 == v16)) ^ v14)) - (v14 ^ 0x622u) + 751))();
}

uint64_t sub_10005F2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  uint64_t v14;
  int v15;

  return ((uint64_t (*)(void))(*(_QWORD *)(v14
                                        + 8
                                        * (((((v13 ^ 0x3FD ^ (a13 == v15)) & 1) == 0)
                                          * (((v13 - 1100254422) & 0x41948AF7) - 364)) ^ v13))
                            - 8))();
}

uint64_t sub_10005F320@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;

  v4 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_100212870 + (v1 ^ 0x7CA)))(a1 ^ v3, 1523128792) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((155 * (((v1 - 49) ^ v4) & 1)) ^ v1))
                            - (((v1 - 1799) | 0x284u) ^ 0x2A9)))();
}

uint64_t sub_10005F390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  v16 = (a13 ^ v15) - ((2 * (a13 ^ v15)) & 0x256989FC) + 313836798;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14
                                        + 8
                                        * ((11
                                          * (((2 * v16) & 0x77EF3FFE ^ 0x256909FC)
                                           + 1609296719
                                           + (v16 ^ (((v13 - 592) | 0x480) + ((v13 + 411) | 0x23C) - 1455206480)) != 467897166)) ^ v13))
                            - 4))();
}

uint64_t sub_10005F42C(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (int)(v2 ^ (326 * ((a2 + v3 + 1141399553) > 7))))
                            - (v2 ^ 0x674)))();
}

uint64_t sub_10005F494(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((unint64_t)(v1 - a1) < 0x20) ^ (v2 + 119)) & 1 ^ v2))
                            - 8))();
}

uint64_t sub_10005F4E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned int v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((((((a3 & 0x2F1BF7DD) + 689964339) | 0x4600C14A) ^ (a8 + 1677) ^ (((a3 & 0x2F1BF7DD)
                                                                                                  - 208) | 0xCC))
                                * (v8 > 0x1F)) ^ a3 & 0x2F1BF7DD)))();
}

uint64_t sub_10005F538(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v14 = a2 + v12 + a4;
  v15 = v9 + v14;
  v16 = *(_OWORD *)(v15 - 31);
  v17 = a1 + v14;
  *(_OWORD *)(v17 - 15) = *(_OWORD *)(v15 - 15);
  *(_OWORD *)(v17 - 31) = v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((26 * ((v10 & 0xFFFFFFE0) != 32)) ^ (v8 + v11 + 385)))
                            - (v11 ^ (a8 + 158) ^ 0x696)))();
}

void sub_10005F59C()
{
  JUMPOUT(0x10005F550);
}

uint64_t sub_10005F5A8(uint64_t a1)
{
  int v1;
  int v2;
  _QWORD *v3;
  int v4;
  int v5;
  _DWORD *v7;
  void (*v8)(_BYTE *);
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[4];
  unsigned int v12;
  uint64_t v13;

  *v3 = a1;
  *v7 = v2;
  v5 = v1 - 583;
  v13 = v9;
  v12 = v1
      - 478
      + 535753261 * (((v11 | 0x318B810F) + (~v11 | 0xCE747EF0)) ^ 0x3B7F8F21)
      - 482;
  v8(v11);
  v12 = v5 + 535753261 * (v11 ^ 0xAF40E2F) - 377;
  v13 = v10;
  v8(v11);
  return v4 ^ 0xB4BC2968;
}

void sub_10005F814(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;

  v1 = 235795823 * (((a1 | 0x1A7DF74B) - (a1 | 0xE58208B4) - 444462924) ^ 0x8ED0BE12);
  v2 = *(_DWORD *)(a1 + 40) ^ v1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = 762105055 * (*(_DWORD *)a1 ^ v1) - 1087192735;
  v6 = 1374699841 * ((((2 * &v8) | 0x676008F2) - &v8 + 1280310151) ^ 0xDE441C70);
  v7 = *(_DWORD *)(a1 + 64) - v1 - v6;
  v8 = *(_QWORD *)(a1 + 56);
  v14 = v3;
  v13 = v6 ^ v5;
  v12 = v4;
  v10 = v8;
  v15 = v7 + 239466679;
  v9 = v6 ^ (v2 + 1695027192);
  sub_100081D38((uint64_t)&v8);
  __asm { BR              X8 }
}

uint64_t sub_10005F990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unint64_t *a11, char a12, int a13, uint64_t a14, int a15)
{
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v22 = *(_BYTE *)(v15 + 24);
  v23 = 1759421093 * ((-2 - ((~&a10 | 0xBD3D3E07) + (&a10 | 0x42C2C1F8))) ^ 0xE408E53);
  a11 = &STACK[0x6EDAADCA9171F84D];
  a14 = v21;
  a15 = v18 - v23 + 615;
  a12 = (v22 - v20 - 44) ^ (-91 * ((-2 - ((~&a10 | 7) + (&a10 | 0xF8))) ^ 0x53));
  a13 = v19 + v23 - 144288783;
  sub_10004DEAC((uint64_t)&a10);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                                          + 8
                                                                                          * (((a10 == v16)
                                                                                            * ((v18 + 1588) ^ 0x76)) ^ v18))
                                                                              - 12))(v24, v25, v26, v27, v28);
}

uint64_t sub_10005FA58()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((107
                                          * (((20 * ((v0 - 386571722) & 0x170A97BB ^ 0x127)) ^ 0xCDE1831D) + v2 < 0xFFFFFFFE)) ^ v0))
                            - 8))();
}

uint64_t sub_10005FAB0@<X0>(uint64_t a1@<X8>, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  a5 = a1;
  a6 = a2;
  a3 = (v8 + 268) ^ (1374699841
                   * (((&a3 | 0x396E0C50) - &a3 + (&a3 & 0xC691F3A8)) ^ 0x549A1459));
  v9 = ((uint64_t (*)(unsigned int *))*(&off_100212870 + (v8 ^ 0x153)))(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v7
                                                      + 8
                                                      * (((a4 != ((26 * (v8 ^ 0x120)) ^ (v6 - 252)))
                                                        * (((v8 ^ 0x120) + 250) ^ 0x11B)) ^ v8))
                                          - 4))(v9);
}

uint64_t sub_10005FB64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  _DWORD v6[2];
  uint64_t v7;

  v7 = a1;
  v6[1] = v3 + 535753261 * (((v6 | 0xBBC73E87) + (~v6 | 0x4438C178)) ^ 0xB13330A9) + 17;
  result = ((uint64_t (*)(_DWORD *))(*(_QWORD *)(v4 + 8 * (v3 - 106)) - 8))(v6);
  *(_DWORD *)(v1 + 68) = v2;
  return result;
}

void sub_10005FC3C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 535753261 * (a1 ^ 0xAF40E2F);
  __asm { BR              X9 }
}

uint64_t sub_10005FCC8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)((28
                                               * ((((43 * (((a1 & 0xE3FB8BEF) + 567247670) & 0xDE307FDF ^ 0x5D5)) ^ 0x1AF) & *(_DWORD *)(v2 - 0x335F4D7B17DD4E03)) == 0)) ^ a1 & 0xE3FB8BEF))
                            - 4))();
}

uint64_t sub_10005FD38(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v2
                                                              + 8
                                                              * ((93
                                                                * (*(_DWORD *)(v3 - 0x335F4D7B17DD4E0BLL) - 143750836 == (v1 ^ 0x4AE) - 1280)) ^ v1))
                                                  - 12))(a1, *(_QWORD *)(v3 - 0x335F4D7B17DD4E17));
}

void sub_10005FDA0(uint64_t a1@<X1>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  _BYTE v8[72];

  v6 = v2 + 223;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v3 + 8 * ((v2 - 1003) ^ 0x1AF)))(**(unsigned int **)(v3 + 8 * ((v2 - 1003) ^ 0x1DD)), a1, *(_DWORD *)(v5 - 0x335F4D7B17DD4E0FLL) + ((v2 + 223) ^ (a2 + 839)));
  v7 = ((unint64_t)v8 ^ 0x2BDCAEDEA6677FFBLL) - 0x10060AA06512FBLL + ((2 * (_QWORD)v8) & 0x57B95DBD4CCEFFF0);
  *(_BYTE *)(v5 - 0x335F4D7B17DD4DF8) = (v7 ^ 0xBA) * (v7 + 17);
  __asm { BR              X15 }
}

void sub_10005FF48()
{
  JUMPOUT(0x10005FF1CLL);
}

void sub_10005FF54()
{
  int v0;
  uint64_t v1;

  (*(void (**)(void))(v1 + 8 * (v0 - 251)))();
  JUMPOUT(0x10005FF6CLL);
}

void sub_10005FF88(uint64_t a1, uint64_t a2)
{
  __asm { BR              X8 }
}

uint64_t sub_100060008(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1568 * (**(_BYTE **)(a2 + 8) == 0)) ^ 0x160u)) - 4))();
}

uint64_t sub_100060048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  *(_QWORD *)(*(_QWORD *)(a16 + 96) + 504) = v18 + 1;
  *(_DWORD *)(*(_QWORD *)(a16 + 96) + 496) = a18 - 1;
  v21 = 1178560073 * ((((v20 - 152) | 0x28AA4C52) - (v20 - 152) + ((v20 - 152) & 0xD755B3A8)) ^ 0x923E3430);
  *(_DWORD *)(v20 - 136) = -1882357464 - v21;
  *(_QWORD *)(v20 - 144) = v20 + 0x1C0D97DFD8A7A90CLL;
  *(_DWORD *)(v20 - 152) = 871100923 - v21;
  v22 = sub_100066AE4(v20 - 152);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * ((32
                                                        * (a18
                                                         + 757805385
                                                         + (*(_DWORD *)(v20 - 184) & 0x3F ^ 0x6AAEBFFF)
                                                         + ((2 * *(_DWORD *)(v20 - 184)) & 0x78u) < 0xFFFFFFC0)) ^ 0x282u))
                                          - 12))(v22);
}

uint64_t sub_100060228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;

  v11 = v7 - 1789837308;
  if ((v11 + 1) > 0x40)
    v12 = v11 + 1;
  else
    v12 = 64;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * ((19
                                          * (((v6 - 25) ^ (a6 - v9 - v8 + v12 < (v6 - 627))) & 1)) ^ (v6 + 97)))
                            - 8))();
}

uint64_t sub_1000602A8(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;

  v11 = v6 + v7;
  v12 = ((52 * (v9 ^ 0x76)) ^ (v8 + 1605)) + v11;
  if (v12 <= 0x40)
    v12 = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((244 * (a6 - v11 + v9 + 216 - 321 < a2 + v12)) ^ v9)) - 4))();
}

uint64_t sub_100060304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  return ((uint64_t (*)(void))(*(_QWORD *)(v21
                                        + 8
                                        * ((201
                                          * (~a18 + v22 - 252 + (unint64_t)(v18 + v19) >= (unint64_t)((v20 - 906332771) & 0x36058557) - 305)) ^ v20))
                            - 12))();
}

uint64_t sub_100060358@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int8x16_t *v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;

  v7.i64[0] = 0x7272727272727272;
  v7.i64[1] = 0x7272727272727272;
  v8.i64[0] = 0x3939393939393939;
  v8.i64[1] = 0x3939393939393939;
  *(int8x16_t *)(v2 + (v3 + a1)) = vaddq_s8(vsubq_s8(*v5, vandq_s8(vaddq_s8(*v5, *v5), v7)), v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((99
                                          * (((((v4 - 40) | 8) - 73) ^ (((((v4 - 1576) | 0x108u)
                                                                                         + 0x1FFFFFEC4) & (v1 + 1)) == 16)) & 1)) ^ ((v4 - 1576) | 0x108)))
                            - 12))();
}

void sub_1000603E0()
{
  JUMPOUT(0x10006039CLL);
}

uint64_t sub_1000603E8(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (a1 ^ (1191 * (v1 == v2))))
                            - (((a1 - 2116680982) & 0x7E29FB73u)
                             - 272)
                            + 41))();
}

uint64_t sub_100060438@<X0>(int a1@<W2>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v7 - 252 + (v4 + a2)) = *(_BYTE *)(v2 + v5 - 473895042)
                                                 - ((((v3 - 64) | 0x30) ^ 0x43) & (2 * *(_BYTE *)(v2 + v5 - 473895042)))
                                                 + 57;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((1882 * ((a1 + v4 + 1) > 0x3F)) ^ v3)) - 4))();
}

uint64_t sub_1000604A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int32x4_t a33,int32x4_t a34,int32x4_t a35,int32x4_t a36)
{
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128);
  const char *v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  int v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  int8x16_t v65;
  uint16x8_t v66;
  int8x16_t v67;
  int8x16_t v68;
  uint8x16_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint8x16_t v72;
  int8x16_t v75;
  int8x16_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  char *v90;
  unsigned int v91;
  int v92;
  int v94;
  uint8x16_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint8x16_t v98;
  uint8x16_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  _DWORD *v110;
  int v111;
  int v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int8x16x4_t v120;
  int8x16x4_t v121;

  v115 = v37;
  v45 = (uint64_t (*)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v41 + 8 * v36)
                                                                                                 - 12);
  v46 = (const char *)(v44 - 252);
  v47.n128_u64[0] = 0x3939393939393939;
  v47.n128_u64[1] = 0x3939393939393939;
  v48 = (__n128)vdupq_n_s32(0x34BC296Bu);
  v49 = (__n128)vdupq_n_s32(0xB4BC2968);
  a27 = v43 - 16;
  HIDWORD(v117) = a7 - 1850876343;
  v50 = (a7 - 1850876343) & 0x214B2BEF;
  HIDWORD(v116) = v50 + 1565457864;
  LODWORD(v117) = v50;
  v51 = (__n128)vdupq_n_s32(0x34BC2979u);
  v52.n128_u64[0] = 0x7272727272727272;
  v52.n128_u64[1] = 0x7272727272727272;
  v53.n128_u64[0] = 0x3A3A3A3A3A3A3A3ALL;
  v53.n128_u64[1] = 0x3A3A3A3A3A3A3A3ALL;
  HIDWORD(a20) = v50 ^ 0xA;
  v55 = *(_DWORD *)(v44 - 180);
  v54 = *(unsigned int *)(v44 - 176);
  HIDWORD(a26) = v55;
  v56 = v54;
  v58 = *(_DWORD *)(v44 - 172);
  v57 = *(_DWORD *)(v44 - 168);
  v59 = v57;
  LODWORD(v116) = *(unsigned __int8 *)(v44 - 156) ^ 0x27;
  v60 = *(_BYTE *)(v44 - 156) ^ 0x27;
  if (v60 == 2)
  {
    v121 = vld4q_s8(v46);
    v94 = a5 + a7 + 1634;
    v95 = (uint8x16_t)veorq_s8(v121.val[0], (int8x16_t)v47);
    v96 = vmovl_u8(*(uint8x8_t *)v95.i8);
    v97 = vmovl_high_u8(v95);
    v98 = (uint8x16_t)veorq_s8(v121.val[1], (int8x16_t)v47);
    _Q23 = vmovl_u8(*(uint8x8_t *)v98.i8);
    _Q22 = vmovl_high_u8(v98);
    __asm
    {
      SHLL2           V24.4S, V22.8H, #0x10
      SHLL2           V25.4S, V23.8H, #0x10
    }
    v103 = (uint8x16_t)veorq_s8(v121.val[2], (int8x16_t)v47);
    v104 = vmovl_high_u8(v103);
    v105 = vmovl_u8(*(uint8x8_t *)v103.i8);
    v121.val[0] = veorq_s8(v121.val[3], (int8x16_t)v47);
    v121.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v121.val[0]);
    v121.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v121.val[1]);
    v121.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v121.val[1].i8);
    v121.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v121.val[0].i8);
    v121.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v121.val[0]);
    v121.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v121.val[0].i8);
    v106 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q23.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v105.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v96.i8), 0x18uLL)), v121.val[0]);
    v107 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q25, (int8x16_t)vshll_high_n_u16(v105, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v96), 0x18uLL)), v121.val[3]);
    v108 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v104.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v97.i8), 0x18uLL)), v121.val[1]);
    v109 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v104, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v97), 0x18uLL)), v121.val[2]);
    v121.val[0] = veorq_s8(vandq_s8((int8x16_t)v106, (int8x16_t)v48), (int8x16_t)(*(_OWORD *)v121.val & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    v121.val[3] = veorq_s8(vandq_s8((int8x16_t)v107, (int8x16_t)v48), (int8x16_t)(*(_OWORD *)&v121.val[3] & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    v121.val[1] = veorq_s8(vandq_s8((int8x16_t)v108, (int8x16_t)v48), (int8x16_t)(*(_OWORD *)&v121.val[1] & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    v121.val[2] = veorq_s8(vandq_s8((int8x16_t)v109, (int8x16_t)v48), (int8x16_t)(*(_OWORD *)&v121.val[2] & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    a35 = vaddq_s32(vsubq_s32(v108, vaddq_s32((int32x4_t)v121.val[1], (int32x4_t)v121.val[1])), (int32x4_t)v49);
    a36 = vaddq_s32(vsubq_s32(v109, vaddq_s32((int32x4_t)v121.val[2], (int32x4_t)v121.val[2])), (int32x4_t)v49);
    a33 = vaddq_s32(vsubq_s32(v106, vaddq_s32((int32x4_t)v121.val[0], (int32x4_t)v121.val[0])), (int32x4_t)v49);
    a34 = vaddq_s32(vsubq_s32(v107, vaddq_s32((int32x4_t)v121.val[3], (int32x4_t)v121.val[3])), (int32x4_t)v49);
    v110 = (_DWORD *)&a33 + v38 + 1124885228;
    v111 = *(v110 - 8) ^ *(v110 - 3);
    v112 = v111 + v39 - ((2 * v111) & 0x697852D0);
    v113 = *((_DWORD *)&a33 + v38 + ((v94 - 1547087784) & 0x5C36AFCE) + 1124883478) ^ *(v110 - 14);
    HIDWORD(v114) = v113 ^ v112 ^ 0x34BC2968;
    LODWORD(v114) = v113 ^ ~v112;
    *v110 = (v114 >> 31) + v39 - ((2 * (v114 >> 31)) & 0x697852D0);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41
                                                                          + 8 * ((89 * (v43 == 1124885165)) ^ v94))
                                                              - 12))(1476394134, 2045, v56);
  }
  else if (v60 == 1)
  {
    HIDWORD(v118) = v54;
    v119 = __PAIR64__(v57, v58);
    v120 = vld4q_s8(v46);
    v61 = (a5 + a7 + 167);
    v62 = (uint8x16_t)veorq_s8(v120.val[0], (int8x16_t)v47);
    v63 = vmovl_u8(*(uint8x8_t *)v62.i8);
    v64 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v63.i8);
    v65 = (int8x16_t)vmovl_high_u16(v63);
    v66 = vmovl_high_u8(v62);
    v67 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v66.i8);
    v68 = (int8x16_t)vmovl_high_u16(v66);
    v69 = (uint8x16_t)veorq_s8(v120.val[1], (int8x16_t)v47);
    v70 = vmovl_high_u8(v69);
    v71 = vmovl_u8(*(uint8x8_t *)v69.i8);
    v72 = (uint8x16_t)veorq_s8(v120.val[2], (int8x16_t)v47);
    _Q27 = (int8x16_t)vmovl_high_u8(v72);
    _Q26 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v72.i8);
    v75 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v80 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q27.i8, 0x10uLL);
    __asm { SHLL2           V27.4S, V27.8H, #0x10 }
    v120.val[0] = veorq_s8(v120.val[3], (int8x16_t)v47);
    v120.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v120.val[0]);
    v120.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v120.val[1]);
    v120.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v120.val[0].i8);
    v120.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v120.val[0]);
    v120.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v120.val[0].i8), 0x18uLL), v75), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v71.i8, 8uLL), v64));
    v120.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v120.val[3], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v71, 8uLL), v65));
    v120.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v120.val[1].i8), 0x18uLL), v80), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v70.i8, 8uLL), v67));
    v120.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v120.val[2], 0x18uLL), _Q27), vorrq_s8((int8x16_t)vshll_high_n_u16(v70, 8uLL), v68));
    v81 = (int32x4_t)veorq_s8(vandq_s8(v120.val[0], (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    v82 = (int32x4_t)veorq_s8(vandq_s8(v120.val[3], (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v65 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    v83 = (int32x4_t)veorq_s8(vandq_s8(v120.val[1], (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    v84 = (int32x4_t)veorq_s8(vandq_s8(v120.val[2], (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v68 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    a35 = vaddq_s32(vsubq_s32((int32x4_t)v120.val[1], vaddq_s32(v83, v83)), (int32x4_t)v49);
    a36 = vaddq_s32(vsubq_s32((int32x4_t)v120.val[2], vaddq_s32(v84, v84)), (int32x4_t)v49);
    a33 = vaddq_s32(vsubq_s32((int32x4_t)v120.val[0], vaddq_s32(v81, v81)), (int32x4_t)v49);
    a34 = vaddq_s32(vsubq_s32((int32x4_t)v120.val[3], vaddq_s32(v82, v82)), (int32x4_t)v49);
    v85 = v38 + a27 + ((a5 + a7 + 198) | 0xC0u) - 451;
    v86 = (char *)*(&off_100212870 + (int)(v61 ^ 0x72)) - 12;
    v87 = (char *)*(&off_100212870 + a5 + a7 + 100) - 4;
    v88 = *(unsigned int *)&v87[4 * v85];
    v89 = (v55 ^ v42)
        - 1062945494
        + ((v59 ^ v42) & (v54 ^ 0xA07DA68F) | (v58 ^ v42) & (v54 ^ v42))
        + v88
        + (a33.i32[(v86[v85] - 67)] ^ v39);
    v90 = (char *)*(&off_100212870 + (int)(v61 ^ 0xA6)) - 4;
    v91 = (v89 + v42 - (v40 & (2 * v89))) ^ v42;
    v92 = ((v91 << (v90[v85] - 125)) | (v91 >> (125 - v90[v85]))) + (v54 ^ v42);
    LODWORD(v118) = HIDWORD(a17) - 836361810;
    return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 + 8 * (int)((1745 * (a27 + 1 == v43)) ^ v61)) - 8))(3232021802, 2045, v92 + v42 - (v40 & (2 * v92)), v86, v87, v90, v88, v61, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v115,
             a20,
             v116,
             v117,
             v118,
             v119,
             v45,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32);
  }
  else
  {
    *(_DWORD *)(v44 - 180) = (v55 ^ v42)
                           + (HIDWORD(a26) ^ v42)
                           + v42
                           - (v40 & (2 * ((v55 ^ v42) + (HIDWORD(a26) ^ v42))));
    *(_DWORD *)(v44 - 176) = v42 + 2 * (v54 ^ v42) - (v40 & (4 * (v54 ^ v42)));
    *(_DWORD *)(v44 - 172) = 2 * (v58 ^ v42) + v42 - (v40 & (4 * (v58 ^ v42)));
    *(_DWORD *)(v44 - 168) = 2 * (v57 ^ v42) + v42 - (v40 & (4 * (v57 ^ v42)));
    a29 = 0;
    return v45(1476394134, 2045, v47, v48, v49, v51, v52, v53);
  }
}

uint64_t sub_100061088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,int a22,unsigned __int8 a23,unsigned int a24)
{
  uint64_t v24;
  unsigned int v25;
  _BOOL4 v26;
  BOOL v27;
  unsigned __int8 v28;

  v25 = (a7 ^ (a7 - 1347) ^ 0x1A0D1A22) + a19;
  v26 = v25 < 0x364C3029;
  v27 = v25 > a24;
  if (a24 < 0x364C3029 != v26)
    v28 = v26;
  else
    v28 = v27;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24
                                                                                 + 8
                                                                                 * ((1591 * ((a23 ^ v28) & 1)) ^ (a5 + a7 + 581)))
                                                                     - 12))(a1, a2, a3, 3821072254);
}

uint64_t sub_10006111C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,int a23)
{
  int v23;
  uint64_t v24;

  return ((uint64_t (*)(void))(*(_QWORD *)(v24
                                        + 8
                                        * (int)((((a22 & 0xEFB7F7FE) + (a6 ^ (a5 + 746)))
                                               * (v23 + a4 + 63 >= (v23 + a4))) ^ a23))
                            - 12))();
}

uint64_t sub_10006116C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;

  v21 = ~a18 + v18 - v19 < (unint64_t)((a6 + 1073778365) | 0xD066714) - 1292302246;
  return ((uint64_t (*)(void))(*(_QWORD *)(v20 + 8 * ((2 * v21) | (8 * v21) | a6)) + 1292302250 - (a7 + a6 - 485)))();
}

uint64_t sub_1000611DC@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W4>, int a4@<W6>, uint64_t a5@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v6 + a5) = *(_BYTE *)(v9 + (v7 + a2))
                      + (v8 | ~(2 * *(_BYTE *)(v9 + (v7 + a2))))
                      + 58;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * (((a5 + 1 != ((v5 - a4 + 88) ^ 0x18)) * a1) ^ (a3 + v5 + 895)))
                            - 4))();
}

uint64_t sub_100061230(double a1, double a2, double a3, double a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, int a13, int a14)
{
  int8x16_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;

  v19 = *(int8x16_t *)(v17 + a10 + v15 + 4 * (v16 ^ (a13 - 22)) - 88);
  *v14 = vaddq_s8(vaddq_s8(v19, a6), vmvnq_s8(vandq_s8(vaddq_s8(v19, v19), a5)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * (a14 ^ (a11 + v16 + 895))) - 4))();
}

uint64_t sub_10006129C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;

  v21 = v18 - 674877284 < (a18 - 1948306781);
  if ((a18 - 1948306781) < 0xF405411E != (v18 - 674877284) < 0xF405411E)
    v21 = (a18 - 1948306781) < 0xF405411E;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((v21 * (((v20 - 1473) | 0x39) - 49)) ^ v20)) - 4))(3209778388);
}

uint64_t sub_100061314(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v25;

  v20 = a2 - a5;
  v25 = (a2 + 900);
  v21 = 628203409 * ((((v19 - 152) | 0x7B53BC83) - (v19 - 152) + ((v19 - 152) & 0x84AC4378)) ^ 0xF9DBB0B0);
  *(_DWORD *)(v19 - 144) = v21 + a2 + 725;
  *(_DWORD *)(v19 - 140) = a18 - v21 - 305954443;
  *(_QWORD *)(v19 - 152) = a15;
  sub_10007FCA0(v19 - 152);
  v22 = *(_DWORD *)(v19 - 184) & 0x3F;
  *(_BYTE *)(v19 - 252 + (v22 ^ 3)) = -71;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18
                                                      + 8
                                                      * ((1258 * ((v22 ^ 3) > (v20 ^ 0x4D06F781u))) ^ a2))
                                          - (v25 ^ 0x3CD)))(1476394134);
}

uint64_t sub_100061418@<X0>(int a1@<W4>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)(((a1 + ((v2 + 1598553142) & 0xEDBEF7BE) + ((v2 - 417) | 0x440) + 138)
                                               * (a2 != 63)) ^ v2))
                            - 8))();
}

uint64_t sub_100061464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((((v7 ^ 0x3Cu) >= ((v8 - 1020) ^ 0x26Cu))
                                          * ((v8 - 48236138) & 0x4FE6F7BF ^ (a7 - 6))) | v8))
                            - 12))();
}

uint64_t sub_1000614B0@<X0>(unsigned int a1@<W8>)
{
  char v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 252 + a1 + 1) = 0x3939393939393939;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((178 * ((v1 & 0x38) == 8)) ^ v2))
                            - ((v2 + 508) | 0x200u)
                            + 1624))();
}

uint64_t sub_1000614FC@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *v2 = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v5 == 0) * v4) ^ v3)) - a1 + 1624))();
}

uint64_t sub_100061524@<X0>(int a1@<W4>, int a2@<W6>, int a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((((a3 - a1 - 1571) ^ (a2 - 266)) * (v4 == v3)) | a3))
                            - ((a3 - a1 - 1571) ^ 0x4D06F7BALL)))();
}

void sub_100061560()
{
  JUMPOUT(0x1000604BCLL);
}

uint64_t sub_100061C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  _BOOL4 v18;

  v14 = v11 + v7;
  v15 = *(_DWORD *)(v13 - 252 + ((v11 + v7) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a3 + v14 + 1) = (BYTE2(v15) ^ 0x82) - ((v15 >> 15) & 0x72) + 57;
  *(_BYTE *)(a3 + v14) = (((v9 ^ (a7 - 4)) - 87) ^ HIBYTE(v15))
                       + (~(2 * (((v9 ^ (a7 - 4)) - 87) ^ HIBYTE(v15))) | 0x8D)
                       + 58;
  *(_BYTE *)(a3 + v14 + 2) = (BYTE1(v15) ^ 0x59) + ~(2 * ((BYTE1(v15) ^ 0x59) & 0x3F ^ BYTE1(v15) & 6)) + 58;
  *(_BYTE *)(a3 + v14 + 3) = v15 ^ 0x49;
  v16 = *(_DWORD *)(v13 - 160) - 889382343;
  v17 = v16 < v8;
  v18 = v11 - 439118600 < v16;
  if (v11 - 439118600 < v8 != v17)
    v18 = v17;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((v18 * v10) | v9)) - 12))();
}

void sub_100061DAC()
{
  JUMPOUT(0x100061D74);
}

uint64_t sub_100061DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  int v33;
  uint64_t v34;

  *(_DWORD *)(&a33 + a29) = 1642836220;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v34 + 8 * ((v33 - 618) | 0x110)) - 4))(1208279318, 84021335);
}

uint64_t sub_100061E6C(int a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((v3 == ((v2 + a2) | a1) - 648109171) * (((v2 - 1071) | 0x440) ^ 0x647)) ^ v2))
                            - 8))();
}

uint64_t sub_100061EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;

  v21 = ((v20 - 1747325365 + ((v18 - 1334) | 0x21A)) & 0xFFFFFFFC) - a18 != -1747324539;
  return ((uint64_t (*)(void))(*(_QWORD *)(v19 + 8 * (((8 * v21) | (32 * v21)) ^ v18))
                            - ((v18 + 402997476) & 0xE7FABBFF ^ 0x336)))();
}

uint64_t sub_100061F30@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25)
{
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  _BOOL4 v30;

  v30 = a25 - v28 == 206965881 && a1 != (((v25 - 766) | 0x200) ^ (v26 + 1024));
  return ((uint64_t (*)(void))(*(_QWORD *)(v27 + 8 * ((127 * v30) ^ v25)) - 12))();
}

uint64_t sub_100061F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32)
{
  int v32;
  uint64_t v33;
  int v34;
  _BOOL4 v35;

  v35 = a32 + 1115289734 < (v34 + 1322255615);
  if (a32 + 1115289734 < ((((a5 + v32 - 61) | 0x160) + 237) ^ 0xB6F61134) != (v34 + 1322255615) < 0xB6F61379)
    v35 = (v34 + 1322255615) < 0xB6F61379;
  return ((uint64_t (*)(void))(*(_QWORD *)(v33 + 8 * ((62 * !v35) ^ (a5 + v32 + 537))) - 4))();
}

uint64_t sub_100062104()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((*(_DWORD *)(v3 + 48 * (v2 + v1) + 36) != v2)
                                          * (v0 ^ 0x4DC ^ ((v0 - 269) | 0x20))) ^ v0))
                            - 4))();
}

uint64_t sub_100062154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v19 = 628203409 * (((((v18 - 152) | 0x6181B536) ^ 0xFFFFFFFE) - (~(v18 - 152) | 0x9E7E4AC9)) ^ 0x1CF646FA);
  *(_DWORD *)(v18 - 136) = v13 - v19 + 775;
  *(_DWORD *)(v18 - 132) = v17 - v19 - 1422023844;
  *(_QWORD *)(v18 - 112) = v14;
  *(_QWORD *)(v18 - 104) = a11;
  *(_QWORD *)(v18 - 152) = a12;
  *(_QWORD *)(v18 - 144) = a10;
  *(_QWORD *)(v18 - 128) = a13;
  ((void (*)(uint64_t))((char *)*(&off_100212870 + (v13 ^ 0x143)) - 4))(v18 - 152);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v16
                                                               + 8
                                                               * (((*(_DWORD *)(v18 - 120) == v15 + (v13 ^ 0x782) - 1762)
                                                                 * (v13 + 829)) | v13))
                                                   - 4))(1208279318, 84021335);
}

uint64_t sub_10006224C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((502 * (*(_DWORD *)(v10 + 48 * (v9 + v7)) != 2112684907)) ^ v8))
                            - ((5 * ((v8 - 2098979) & 0x4D26F7F6 ^ (a7 - 166))) ^ 0x336)))();
}

uint64_t sub_1000622B8@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W8>)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (v3 ^ (1415 * ((a3 ^ 0xAA799A75) == v4 - 2129462123))))
                            + 1292302250
                            - ((a2 + v3 + 395) | (a1 + 384))))();
}

void sub_100062314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  __asm { BR              X9 }
}

uint64_t sub_100062398()
{
  int v0;
  uint64_t v1;
  _DWORD *v2;

  return (*(uint64_t (**)(void))(v1 + 8 * ((46 * (*v2 - 1642836220 < (v0 - 1722))) ^ v0)))();
}

uint64_t sub_1000623D4@<X0>(int a1@<W6>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,int a26)
{
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;

  v35 = &v34[6 * v27];
  v35[2] = v31;
  v35[3] = v28;
  *((_QWORD *)v35 + 2) = v29;
  v35[6] = a26;
  *v34 = a2 + 1;
  return (*(uint64_t (**)(void))(v33
                              + 8
                              * ((489
                                * (*(_DWORD *)(v32 + 48 * v30 + 32) + ((a1 + v26 - 1738) ^ 0x149C930Au) < (v26 ^ 0x800006C9))) ^ v26)))();
}

uint64_t sub_100062448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  int v23;
  int v24;
  uint64_t v25;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 + 8 * ((981 * (((((v23 ^ 0x7AA) - 352) | 0x15B) ^ (v24 - 309)) == -1262737048)) ^ v23 ^ 0x7AA)) - (v23 ^ 0x7AA ^ (a7 - 224) ^ 0x4D06F7B2)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23);
}

uint64_t sub_1000625F4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  _DWORD *v4;
  _BOOL4 v6;

  v6 = v2 == 644193091 && *v4 == (((v0 + 742) | 0x208) ^ (v1 + 2041));
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((59 * v6) ^ v0)) - 4))();
}

void sub_100062640()
{
  JUMPOUT(0x100062664);
}

void sub_1000626B0(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_100062738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v65 + 11680) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, &a65, a10);
}

uint64_t sub_100062850()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((((83 * (((v0 + 9571717) | 0x180401F3) ^ (v1 + 181))) ^ 0x524)
                                          * (v3 == 640442941)) ^ v0))
                            - 12))();
}

uint64_t sub_1000628AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  int v16;
  uint64_t v17;
  int v18;

  return (*(uint64_t (**)(void))(v17
                              + 8
                              * ((85
                                * (((((v16 - 1131) ^ 0x97D9F14C) + v18) & 0xFFFFFFFC) - a16 != ((v16 - 1131) ^ 0x97D9F143))) ^ v16)))();
}

uint64_t sub_1000628F0@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;

  v15 = v10 != 2124560028 && a10 - v13 == 206965881;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((v15 * (a1 ^ 0x13E)) ^ a1)) - (a1 ^ v11 ^ 0x189611F7)))();
}

uint64_t sub_100062950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  _BOOL4 v25;

  v21 = (v17 + 360358782) & 0xD1EF4EF7;
  v22 = v20 + v17 + 188;
  v23 = a17 - 866493209 + ((v17 - 1916467224) & 0x59A4E6DD);
  v24 = ((v19 - 659527131) < 0x40D6789F) ^ (v23 < (v21 ^ 0x40D67CEA));
  v25 = v23 < v19 - 659527131;
  if (v24)
    v25 = (v19 - 659527131) < 0x40D6789F;
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * ((43 * !v25) ^ v22)) - 4))();
}

uint64_t sub_100062B30()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)((232
                                               * (*(_DWORD *)(v1
                                                            + 48
                                                            * (int)(v3 - 1052931133 + ((v0 + 130227) | 0x189410D7))
                                                            + 36) == v3)) ^ v0))
                            - (v0 ^ 0x471)))();
}

uint64_t sub_100062B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14)
{
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v19 = 628203409 * ((((v18 - 160) | 0x3376FC5B) - (v18 - 160) + ((v18 - 160) & 0xCC8903A0)) ^ 0xB1FEF068);
  STACK[0x280] = a13;
  STACK[0x2B0] = a12;
  STACK[0x288] = a11;
  STACK[0x298] = a14;
  STACK[0x2A8] = v17;
  *(_DWORD *)(v18 - 144) = v14 - v19 + 930;
  *(_DWORD *)(v18 - 140) = v16 - v19 + (v14 ^ 0x7DC) + ((v14 + 268701801) | 0x89200D1) - 1834513852;
  v20 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(a8 + 8 * (v14 ^ 0xE6)) - 4))(v18 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15
                                                      + 8 * ((1446 * (*(_DWORD *)(v18 - 128) == -1262737048)) ^ v14))
                                          - 8))(v20);
}

uint64_t sub_100062C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;

  v13 = *(_DWORD *)(v9 + 48 * (int)(v11 - 1052931133 + (v12 ^ (v7 + 1452)))) == ((v12 - 1620) ^ 0x4D53CFC0);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 8 * (((4 * v13) | (v13 << 6)) ^ v12)) - 12))(a1, a2, a3, a4, a5, a6, a7, v8);
}

uint64_t sub_100062CF0@<X0>(int a1@<W6>, int a2@<W8>)
{
  int v2;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((v2 + 1434871199) <= 0x18 && ((1 << (v2 - 97)) & 0x1000521) != 0)
  {
    v7 = a2;
    v8 = a2 & 0xFFFFFFFFFFFFFFFLL;
    if ((v7 & 0xFFFFFFFFFFFFFFFLL) != 0)
    {
      if (v8 == 3)
      {
        v9 = (*(uint64_t (**)())(v4 + 48 * (int)v7 + 8))();
        __asm { BR              X8 }
      }
      __asm { BR              X2 }
    }
    __asm { BR              X11 }
  }
  return a1 ^ 0x4B4372B6u;
}

void sub_100063344(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (1374699841 * ((((2 * (_DWORD)a1) | 0x97E9331C) - (_DWORD)a1 + 873162354) ^ 0xA6008187));
  __asm { BR              X10 }
}

uint64_t sub_100063424@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v13 = 1755732067 * ((&a4 & 0x115CB541 | ~(&a4 | 0x115CB541)) ^ 0x3065F765);
  a7 = &STACK[0x8C0F0A4F49AC02E];
  a8 = v13 ^ 0x2751D0B3;
  a4 = &STACK[0x30CF5C205D591B60];
  a5 = v11;
  a6 = (v10 - 49) ^ v13;
  v14 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v10 - 487)) - 4))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((56
                                                        * (v12 & ~(v10 ^ (*(_DWORD *)(v11 - 0x335F4D7B17DD4DFFLL) == v8 + v10 - 526)))) ^ v10))
                                          - 8))(v14);
}

uint64_t sub_10006350C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * (int)((((((v13 ^ 0x100) + 748090217) & 0xD3690BBE) - 550) * (a11 != v11 + 4)) | v13 ^ 0x100))
                            - 4))();
}

void sub_100063550(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;

  *a1 = v2;
  *(_DWORD *)(v1 + 4) = 1262711389;
}

void sub_10006360C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v5;
  unint64_t *v6;
  unsigned int v7;

  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  v3 = 1178560073 * ((-124051203 - (&v5 | 0xF89B20FD) + (&v5 | 0x764DF02)) ^ 0xBDF0A760);
  v5 = 871100923 - v3;
  v6 = &STACK[0x1C0D97DFD8A7AC4C];
  v7 = -1882357464 - v3;
  sub_100066AE4((uint64_t)&v5);
  __asm { BR              X8 }
}

uint64_t sub_1000637C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;

  v17 = v14 - 1333278007 < (a14 + 2016783769);
  if (a14 + 2016783769 < ((v15 - 1085319318) & 0x40B0A332 ^ 0xC321F98A) != (v14 - 1333278007) < 0xC321F9BA)
    v17 = a14 + 2016783769 < ((v15 - 1085319318) & 0x40B0A332 ^ 0xC321F98A);
  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * (((4 * !v17) | (8 * !v17)) ^ v15)) - 8))();
}

uint64_t sub_10006384C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v16 = 628203409 * ((((v15 - 120) | 0xB85D1B41) + (~(v15 - 120) | 0x47A2E4BE)) ^ 0x3AD51773);
  *(_QWORD *)(v15 - 120) = a11;
  *(_DWORD *)(v15 - 112) = v16 + a4 + 738;
  *(_DWORD *)(v15 - 108) = a14 - v16 + ((a6 + a4 - 48) ^ (a6 + 1807) ^ 0xAFD44B8);
  v17 = sub_10007FCA0(v15 - 120);
  v18 = *(_DWORD *)(v15 - 152) & 0x3F;
  *(_BYTE *)(v15 - 220 + (v18 ^ 3)) = -71;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v14 + 8 * ((933 * ((v18 ^ 3) > 0x37)) ^ a4))
                                          - 12))(v17);
}

uint64_t sub_100063938@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  uint64_t v16;

  return (*(uint64_t (**)(void))(v16 + 8 * ((228 * (a1 == ((a16 - 1877) | 0x484) - 1127)) ^ a16)))();
}

uint64_t sub_100063974()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((462 * ((v0 ^ 0x635 ^ ((v1 - 166) | 0x209u)) > 7)) ^ v1)) - 8))();
}

uint64_t sub_1000639B0@<X0>(unsigned int a1@<W8>)
{
  char v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;

  *(_QWORD *)(v4 - 220 + a1 + 1) = 0x3939393939393939;
  v5 = (v1 & 0x38) - (unint64_t)(v2 - 436) == -1101;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((4 * v5) | (16 * v5) | v2)) - 4))();
}

uint64_t sub_100063A00@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(double *)(a1 + v4) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((4 * (v3 == v4)) | (16 * (v3 == v4)) | v2)) - 4))();
}

uint64_t sub_100063A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((243 * (((v7 ^ (a6 + 1069) ^ (v8 == v6)) & 1) == 0)) ^ v7))
                            - ((v7 + 2147219304) & 0x9CDF54FE ^ 0x1CDB50B4)))();
}

uint64_t sub_100063A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int32x4_t a31,int32x4_t a32,int32x4_t a33,int32x4_t a34)
{
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t (*v43)(__n128, __n128, __n128, __n128, __n128);
  const char *v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint8x16_t v55;
  uint16x8_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint16x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint8x16_t v65;
  int8x16_t v68;
  int8x16_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  uint64_t v79;
  uint64_t v80;
  uint8x16_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint8x16_t v84;
  uint8x16_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  uint64_t v96;
  _DWORD *v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(__n128, __n128, __n128, __n128, __n128);
  int8x16x4_t v105;
  int8x16x4_t v106;

  v43 = (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v35 + 8 * (a7 + v34 - 1142))
                                                                       - 12);
  v44 = (const char *)(v42 - 220);
  v45 = (__n128)vdupq_n_s32(0x34BC296Bu);
  v46.n128_u64[0] = 0x3939393939393939;
  v46.n128_u64[1] = 0x3939393939393939;
  v47 = (__n128)vdupq_n_s32(0xB4BC2968);
  a23 = v40 - 16;
  HIDWORD(v102) = a6 - 983986877;
  v48.n128_u64[0] = 0x7272727272727272;
  v48.n128_u64[1] = 0x7272727272727272;
  v49 = (__n128)vdupq_n_s32(0x34BC2979u);
  v50 = *(_DWORD *)(v42 - 144);
  HIDWORD(a21) = *(_DWORD *)(v42 - 148);
  v52 = *(unsigned int *)(v42 - 140);
  v51 = *(_DWORD *)(v42 - 136);
  v53 = *(_DWORD *)(v42 - 140);
  v54 = *(_BYTE *)(v42 - 124) ^ 0x27;
  LODWORD(v102) = *(unsigned __int8 *)(v42 - 124) ^ 0x27;
  if (v54 == 2)
  {
    HIDWORD(v103) = *(_DWORD *)(v42 - 144);
    v104 = v43;
    v106 = vld4q_s8(v44);
    v79 = (a7 + a6 - 420);
    v80 = *(unsigned int *)(v42 - 132);
    HIDWORD(a16) = *(_DWORD *)(v42 - 132);
    v81 = (uint8x16_t)veorq_s8(v106.val[0], (int8x16_t)v46);
    v82 = vmovl_u8(*(uint8x8_t *)v81.i8);
    v83 = vmovl_high_u8(v81);
    v84 = (uint8x16_t)veorq_s8(v106.val[1], (int8x16_t)v46);
    _Q22 = vmovl_u8(*(uint8x8_t *)v84.i8);
    _Q21 = vmovl_high_u8(v84);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v89 = (uint8x16_t)veorq_s8(v106.val[2], (int8x16_t)v46);
    v90 = vmovl_high_u8(v89);
    v91 = vmovl_u8(*(uint8x8_t *)v89.i8);
    v106.val[0] = veorq_s8(v106.val[3], (int8x16_t)v46);
    v106.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v106.val[0]);
    v106.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v106.val[1]);
    v106.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v106.val[1].i8);
    v106.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v106.val[0].i8);
    v106.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v106.val[0]);
    v106.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v106.val[0].i8);
    v92 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v91.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), 0x18uLL)), v106.val[0]);
    v93 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v91, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v82), 0x18uLL)), v106.val[3]);
    v94 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v90.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8), 0x18uLL)), v106.val[1]);
    v95 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v90, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v83), 0x18uLL)), v106.val[2]);
    v106.val[0] = veorq_s8(vandq_s8((int8x16_t)v92, (int8x16_t)v45), (int8x16_t)(*(_OWORD *)v106.val & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    v106.val[3] = veorq_s8(vandq_s8((int8x16_t)v93, (int8x16_t)v45), (int8x16_t)(*(_OWORD *)&v106.val[3] & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    v106.val[1] = veorq_s8(vandq_s8((int8x16_t)v94, (int8x16_t)v45), (int8x16_t)(*(_OWORD *)&v106.val[1] & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    v106.val[2] = veorq_s8(vandq_s8((int8x16_t)v95, (int8x16_t)v45), (int8x16_t)(*(_OWORD *)&v106.val[2] & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    a33 = vaddq_s32(vsubq_s32(v94, vaddq_s32((int32x4_t)v106.val[1], (int32x4_t)v106.val[1])), (int32x4_t)v47);
    a34 = vaddq_s32(vsubq_s32(v95, vaddq_s32((int32x4_t)v106.val[2], (int32x4_t)v106.val[2])), (int32x4_t)v47);
    a31 = vaddq_s32(vsubq_s32(v92, vaddq_s32((int32x4_t)v106.val[0], (int32x4_t)v106.val[0])), (int32x4_t)v47);
    a32 = vaddq_s32(vsubq_s32(v93, vaddq_s32((int32x4_t)v106.val[3], (int32x4_t)v106.val[3])), (int32x4_t)v47);
    v96 = ((_DWORD)v79 + 158) | 0x58u;
    v97 = (_DWORD *)&a31 + v38 + 402318071;
    v98 = *(v97 - 8) ^ *(v97 - 3);
    v99 = v98 + v36 - ((v96 + v41) & (2 * v98));
    v100 = *(v97 - 16) ^ *(v97 - 14);
    HIDWORD(v101) = v100 ^ 0x34BC2968 ^ v99;
    LODWORD(v101) = v100 ^ ~v99;
    *v97 = (v101 >> 31) + v36 - ((v41 + 1016) & (2 * (v101 >> 31)));
    LODWORD(v103) = HIDWORD(a13) - 176152659;
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 + 8 * (int)((250 * (v40 == 402318008)) ^ v79)) - 4))(457, HIDWORD(v101), v52, 114, 229, v80, v79, v96, a9, a10, a11, a12, a13, a14, a15, a16, v102, v103, __PAIR64__(v51, v52),
             v104,
             a21,
             0x9600000042,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30);
  }
  else if (v54 == 1)
  {
    v105 = vld4q_s8(v44);
    v55 = (uint8x16_t)veorq_s8(v105.val[0], (int8x16_t)v46);
    v56 = vmovl_u8(*(uint8x8_t *)v55.i8);
    v57 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v56.i8);
    v58 = (int8x16_t)vmovl_high_u16(v56);
    v59 = vmovl_high_u8(v55);
    v60 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8);
    v61 = (int8x16_t)vmovl_high_u16(v59);
    v62 = (uint8x16_t)veorq_s8(v105.val[1], (int8x16_t)v46);
    v63 = vmovl_high_u8(v62);
    v64 = vmovl_u8(*(uint8x8_t *)v62.i8);
    v65 = (uint8x16_t)veorq_s8(v105.val[2], (int8x16_t)v46);
    _Q26 = (int8x16_t)vmovl_high_u8(v65);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v65.i8);
    v68 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v73 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v105.val[0] = veorq_s8(v105.val[3], (int8x16_t)v46);
    v105.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v105.val[0]);
    v105.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v105.val[1]);
    v105.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v105.val[0].i8);
    v105.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v105.val[0]);
    v105.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v105.val[0].i8), 0x18uLL), v68), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v64.i8, 8uLL), v57));
    v105.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v105.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v64, 8uLL), v58));
    v105.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v105.val[1].i8), 0x18uLL), v73), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v63.i8, 8uLL), v60));
    v105.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v105.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v63, 8uLL), v61));
    v74 = (int32x4_t)veorq_s8(vandq_s8(v105.val[0], (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v57 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    v75 = (int32x4_t)veorq_s8(vandq_s8(v105.val[3], (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v58 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    v76 = (int32x4_t)veorq_s8(vandq_s8(v105.val[1], (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v60 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    v77 = (int32x4_t)veorq_s8(vandq_s8(v105.val[2], (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v61 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    a33 = vaddq_s32(vsubq_s32((int32x4_t)v105.val[1], vaddq_s32(v76, v76)), (int32x4_t)v47);
    a34 = vaddq_s32(vsubq_s32((int32x4_t)v105.val[2], vaddq_s32(v77, v77)), (int32x4_t)v47);
    a31 = vaddq_s32(vsubq_s32((int32x4_t)v105.val[0], vaddq_s32(v74, v74)), (int32x4_t)v47);
    a32 = vaddq_s32(vsubq_s32((int32x4_t)v105.val[3], vaddq_s32(v75, v75)), (int32x4_t)v47);
    return ((uint64_t (*)(__n128))(*(_QWORD *)(v35 + 8 * ((1776 * (a23 + 1 == v40)) ^ 0x1C9u)) - 4))(v45);
  }
  else
  {
    *(_DWORD *)(v42 - 148) = 2 * (*(_DWORD *)(v42 - 148) ^ v37) + v37 - (v39 & (4 * (*(_DWORD *)(v42 - 148) ^ v37)));
    *(_DWORD *)(v42 - 144) = 2 * (v50 ^ v37) + v37 - (v39 & (4 * (v50 ^ v37)));
    *(_DWORD *)(v42 - 140) = (v53 ^ v37) + (v52 ^ v37) + v37 - (v39 & (2 * ((v53 ^ v37) + (v52 ^ v37))));
    *(_DWORD *)(v42 - 136) = 2 * (v51 ^ v37) + v37 - (v39 & (4 * (v51 ^ v37)));
    return v43(v45, v46, v47, v48, v49);
  }
}

uint64_t sub_100064930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, int a17, int a18, unsigned int a19)
{
  uint64_t v19;
  unsigned int v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;

  v20 = a15 + 768751693 + 11 * (a18 & 0x1DCB2793 ^ 0x5E3);
  v21 = v20 < 0x406C6BCE;
  v22 = v20 > a19;
  if (a19 < 0x406C6BCE != v21)
    v23 = v21;
  else
    v23 = v22;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v19 + 8 * ((1765 * !v23) ^ (a7 + a6 - 719))) - 12))(a1, 3982872847);
}

uint64_t sub_1000649D8(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8 * ((61 * (a2 + v3 + 63 >= ((v2 + 1056960559) & 0xDDDB5BBC ^ 0xF1BE81B3) + v3)) ^ v2)))();
}

uint64_t sub_100064A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  return (*(uint64_t (**)(void))(v17
                              + 8
                              * ((49
                                * (a14 + v15 - (unint64_t)(v16 - 796229549 + a6 + v14 - 1232) >= ((a6 + v14 - 1232) ^ 0x1CDB50ACuLL))) ^ v14)))();
}

uint64_t sub_100064A7C(double a1, int8x16_t a2, double a3, int8x16_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  int v11;
  int8x16_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *v12 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v15 + (v13 + a6)), vandq_s8(vaddq_s8(*(int8x16_t *)(v15 + (v13 + a6)), *(int8x16_t *)(v15 + (v13 + a6))), a4)), a2);
  return (*(uint64_t (**)(void))(v14 + 8 * (a11 + v11 - 697)))();
}

uint64_t sub_100064AD4@<X0>(int a1@<W1>, char a2@<W3>, int a3@<W4>, char a4@<W5>, int a5@<W6>, uint64_t a6@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v7 + a6) = *(_BYTE *)(v10 + (v8 + a1))
                      - ((*(_BYTE *)(v10 + (v8 + a1)) << (v6 ^ (a4 - 55) ^ 0x38)) & a2)
                      + 57;
  return (*(uint64_t (**)(void))(v9 + 8 * (((a6 != 63) * a3) ^ (a5 + v6 - 91))))();
}

uint64_t sub_100064B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((1861 * (v7 - 1584327284 < ((v9 - 396061501) & 0xFAC01BF7) - 319)) ^ (a7 + v9 - 804)))
                            - 8))();
}

uint64_t sub_100064B88@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = v1;
  v5 = v1 + v2;
  if (v5 <= 0x38)
    v5 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((((a1 + 342) ^ 0x7CB) - 41) * (v5 - v4 + 1584327284 > 7)) ^ a1))
                            - 8))();
}

uint64_t sub_100064BDC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + v2 + v5 - 220 - 1) = 0x3939393939393939;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v1 & 0xFFFFFFFFFFFFFFF8) == 8) * (((v0 - 422) | 0x50) + 899)) ^ v0))
                            - 8))();
}

uint64_t sub_100064C2C(double a1)
{
  int v1;
  double *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *v2 = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v4 == 0) * v3) ^ v1)) - 8))();
}

uint64_t sub_100064C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (v8 ^ (245 * (v6 == v7))))
                            + 484135092
                            - (a6
                             + (v8 ^ 0x471u)
                             - 1286)))();
}

void sub_100064C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v7 = *(unsigned __int8 *)(v6 - 124) ^ 0x27;
  if (v7 == 1)
  {
    v8 = a6 ^ (a6 - 126);
    v14 = *(_DWORD *)(v6 - 156);
    v13 = *(_DWORD *)(v6 - 152);
    *(_BYTE *)(v6 - 164) = ((v8 - 106) ^ (8 * v13)) - ((2 * ((v8 - 106) ^ (8 * v13))) & 0x70) + 57;
    *(_BYTE *)(v6 - 163) = ((v13 >> 5) ^ 0xC8) - 2 * (((v13 >> 5) ^ 0xC8) & 0xBB ^ (v13 >> 5) & 2) + 57;
    v12 = 114;
    *(_BYTE *)(v6 - 162) = ((v13 >> 13) ^ 0x2F) - ((2 * ((v13 >> 13) ^ 0x2F)) & 0x72) + 57;
    *(_BYTE *)(v6 - 161) = ((v13 >> 21) ^ 0xCA) - ((2 * ((v13 >> 21) ^ 0xCA)) & 0x72) + 57;
    HIDWORD(v15) = v14 ^ 2;
    LODWORD(v15) = v13 ^ 0x40000000;
    *(_BYTE *)(v6 - 160) = (v15 >> 29) - ((2 * (v15 >> 29)) & 0x72) + 57;
    *(_BYTE *)(v6 - 159) = ((v14 >> 5) ^ 0x77) - ((2 * ((v14 >> 5) ^ 0x77)) & 0x72) + 57;
    *(_BYTE *)(v6 - 158) = ((v14 >> 13) ^ 0x36) - ((2 * ((v14 >> 13) ^ 0x36)) & 0x72) + 57;
    v11 = (v14 >> 21) ^ 0xFFFFFFFD;
  }
  else
  {
    if (v7 != 2)
      goto LABEL_6;
    v8 = a6 ^ (a6 - 126);
    v9 = *(_DWORD *)(v6 - 156);
    v11 = *(_DWORD *)(v6 - 152);
    *(_BYTE *)(v6 - 164) = ((v9 >> 21) ^ 0xFD) - ((2 * ((v9 >> 21) ^ 0xFD)) & 0x72) + 57;
    *(_BYTE *)(v6 - 163) = ((v8 - 76) ^ (v9 >> 13)) - ((2 * ((v8 - 76) ^ (v9 >> 13))) & 0x72) + 57;
    HIDWORD(v10) = v9 ^ 2;
    LODWORD(v10) = v11 ^ 0x40000000;
    *(_BYTE *)(v6 - 162) = ((v9 >> 5) ^ 0x77) - ((2 * ((v9 >> 5) ^ 0x77)) & 0x72) + 57;
    *(_BYTE *)(v6 - 161) = (v10 >> 29) - ((2 * (v10 >> 29)) & 0x72) + 57;
    *(_BYTE *)(v6 - 160) = ((v11 >> 21) ^ 0xCA) + ~(2 * (((v11 >> 21) ^ 0xCA) & 0x3D ^ (v11 >> 21) & 4)) + 58;
    *(_BYTE *)(v6 - 159) = ((v11 >> 13) ^ 0x2F) + (~(2 * ((v11 >> 13) ^ 0x2F)) | 0x8D) + 58;
    *(_BYTE *)(v6 - 158) = ((v11 >> 5) ^ 0xC8) - 2 * (((v11 >> 5) ^ 0xC8) & 0xBB ^ (v11 >> 5) & 2) + 57;
    LOBYTE(v11) = (8 * v11) ^ 0x18;
    v12 = 112;
  }
  *(_BYTE *)(v6 - 157) = v11 - (v12 & (2 * v11)) + (((v8 + 42) | 0x10) ^ 0x85);
LABEL_6:
  JUMPOUT(0x100063DC4);
}

uint64_t sub_1000650DC@<X0>(uint64_t a1@<X1>, int a2@<W5>, int a3@<W8>)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v9 = (v4 ^ (a2 + 300)) + v6 + 1805666449;
  v10 = *(_DWORD *)(v8 - 220 + (v9 & 0xFFFFFFFC) + 72);
  v11 = v6 + a3;
  *(_BYTE *)(a1 + v9) = (HIBYTE(v10) ^ 0x5F) + (~(2 * (HIBYTE(v10) ^ 0x5F)) | 0x8D) + 58;
  *(_BYTE *)(a1 + v11) = (BYTE2(v10) ^ 0x82) - ((v10 >> 15) & 0x72) + 57;
  *(_BYTE *)(a1 + v11 + 1) = (BYTE1(v10) ^ 0x59) + ~(2 * ((BYTE1(v10) ^ 0x59) & 0x3F ^ BYTE1(v10) & 6)) + 58;
  *(_BYTE *)(a1 + v11 + 2) = v10 ^ 0x49;
  v12 = *(_DWORD *)(v8 - 128) + 879579757;
  v13 = v12 < v3;
  v14 = v6 - 591049400 < v12;
  if (v6 - 591049400 < v3 != v13)
    v14 = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((!v14 * v5) ^ v4)) - 4))();
}

void sub_100065280()
{
  JUMPOUT(0x100065244);
}

uint64_t sub_100065288()
{
  return 0;
}

void sub_1000652C8(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 + 1755732067 * (((a1 | 0xFD508F6) - (_DWORD)a1 + (a1 & 0xF02AF709)) ^ 0xD113B52D);
  __asm { BR              X13 }
}

uint64_t sub_1000653D0()
{
  int v0;
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;

  v4 = ((v2 & 0x98D137FF) - 859) | 0x11C;
  v5 = v0 - 301617789 < (int)(v3 + 1044977101 + v4);
  if (v3 > 0x41B6E896 != v0 - 301617789 < -1102506135)
    v5 = v3 > 0x41B6E896;
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * (int)((v5 * (v4 + 1357)) ^ v4)))(0x19C49480784866AFLL);
}

uint64_t sub_100065510@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X6>, unsigned int a6@<W7>, int a7@<W8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  _BOOL4 v21;

  v18 = 7 * (v11 ^ 0x111);
  v19 = a3
      + a1
      + (*(_DWORD *)(v7 + 4 * v12) ^ (v9 - 356) ^ (v18 + v13) & v14)
      + a6 * (unint64_t)(*(_DWORD *)(*a5 + 4 * a2) ^ v9)
      + 312;
  *(_DWORD *)(v7 + 4 * v12) = v19 + v9 - ((2 * v19) & 0xB722A7C4);
  v21 = a2 - 1882832675 < a7 && a2 - 1882832675 >= a4;
  return ((uint64_t (*)(unint64_t))(*(_QWORD *)(v8 + 8 * (v18 ^ (v21 * v10))) - 12))((v15 ^ HIDWORD(v19)) + (v16 & (v19 >> 31)) + v17);
}

uint64_t sub_1000655C0(uint64_t a1)
{
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((a1 != ((v2 - 1782121437) & 0x6A3903C3 ^ 0x19C494807848656DLL))
                                * (((v2 - 1928647774) & 0x72F4D1AA) + 323)) ^ (v2 - 744))))();
}

uint64_t sub_100065638@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v8;

  v5 = 156 * (a2 ^ 0x12A);
  v6 = (v5 ^ 0xB15F5857) + v4;
  v8 = v2 + 1629220745 > 828332398 || v2 + 1629220745 < v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * ((219 * v8) ^ v5)) - 8))(a1, 2463801019, 1831166207, 1629220745);
}

uint64_t sub_10006570C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;

  v16 = (v12 - 102) | a6;
  v17 = a1 - 0x19C49480784867E7 + (*(_DWORD *)(v6 + 4 * v8) ^ v9) + (v16 + 69);
  *(_DWORD *)(v6 + 4 * v8) = v17 + v9 - ((2 * v17) & 0xB722A7C4);
  return (*(uint64_t (**)(void))(v7 + 8 * ((((v10 ^ HIDWORD(v17)) + (v11 & (v17 >> 31)) + v13 != v15) * v14) ^ v16)))();
}

uint64_t sub_10006579C()
{
  int v0;
  uint64_t v1;
  int v2;
  _DWORD *v3;
  int v4;
  int v5;
  _BOOL4 v6;

  v4 = *v3 + 252861039;
  v5 = (v0 + 252861039 < -548027307) ^ (v4 < -548027307);
  v6 = v0 + 252861039 > v4;
  if (v5)
    v6 = v0 + 252861039 < -548027307;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v6 * (((v2 - 768) | 0x31) + 1509)) ^ v2)) - 4))();
}

void sub_100065800()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_100065824(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16)
     - 460628867 * (((a1 ^ 0x68759CF4 | 0x87CE5E15) - ((a1 ^ 0x68759CF4) & 0x87CE5E15)) ^ 0xA32D409C);
  __asm { BR              X10 }
}

uint64_t sub_100065950()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v5;

  v5 = *(_DWORD *)(v2 + 48) - v0 == 1695734662 || (*(_QWORD *)(v2 + 32) | *(_QWORD *)(v2 + 56)) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1373 * (((v1 + 50) ^ v5) & 1)) ^ v1)) - 8))();
}

uint64_t sub_1000659A4()
{
  int v0;
  _QWORD *v1;
  uint64_t v2;
  BOOL v4;

  v4 = v1[5] == 0xAA58417147CEA7FLL || (*v1 | v1[3]) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((2 * ((v0 ^ v4) & 1)) & 0xFB | (4
                                                                                           * ((v0 ^ v4) & 1))) ^ v0))
                            - ((v0 - 390330127) & 0x1743F5FF)
                            + 1432))();
}

uint64_t sub_100065A14@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  return ((uint64_t (*)(uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8 * ((((v16 - 1197) ^ 0xF8) * (v15 == 0)) ^ v16)) - (v16 - 1197) + 235))(a6 - 0x33EF75C2DB38407, &STACK[0xCDF342D76DC3697], 1178560073, a1, a2, a3, a4, a5, v17, a8, a9, a10, a11, a12, a13, a14, a15, a6 - 0x33EF75C2DB380D7, a6 - 0x33EF75C2DB381E7);
}

uint64_t sub_100065B18@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  void (*v34)(uint64_t);
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void (*v46)(uint64_t);
  void (*v47)(uint64_t);
  uint64_t v48;

  v31 = (v24 - 215) | 0x550;
  v32 = ((-737582213 - ((v30 - 144) | 0xD409637B) + ((v30 - 144) | 0x2BF69C84)) ^ 0x9162E4E6) * a2;
  *(_DWORD *)(v30 - 144) = v32 + v24 + 437;
  *(_DWORD *)(v30 - 116) = v25 + v32 + (v31 ^ 0xD09A3348);
  *(_QWORD *)(v30 - 136) = v22;
  *(_QWORD *)(v30 - 128) = a1;
  v48 = a3 + v23;
  ((void (*)(uint64_t))(*(_QWORD *)(v27 + 8 * (v24 ^ 0xDA)) - 8))(v30 - 144);
  HIDWORD(a12) = v31 ^ 0x55B;
  *(_DWORD *)(v30 - 128) = (v31 - 342) ^ (628203409 * ((v30 - 144) ^ 0x82880C33));
  *(_QWORD *)(v30 - 144) = a22;
  *(_QWORD *)(v30 - 136) = a21;
  v47 = (void (*)(uint64_t))(*(_QWORD *)(v27 + 8 * (v31 - 1260)) - 8);
  v47(v30 - 144);
  HIDWORD(a8) = v31 - 1152;
  *(_DWORD *)(v30 - 128) = (v31 - 1152) ^ (1178560073
                                         * ((1924547291 - ((v30 - 144) | 0x72B642DB) + ((v30 - 144) | 0x8D49BD24)) ^ 0x37DDC546));
  *(_QWORD *)(v30 - 120) = a22;
  *(_QWORD *)(v30 - 112) = a20;
  *(_QWORD *)(v30 - 144) = a21;
  *(_QWORD *)(v30 - 136) = a1;
  v46 = *(void (**)(uint64_t))(v27 + 8 * (v31 - 1211));
  v46(v30 - 144);
  HIDWORD(v45) = v31 - 1120;
  *(_QWORD *)(v30 - 128) = a20;
  *(_QWORD *)(v30 - 120) = a22;
  *(_QWORD *)(v30 - 104) = v26;
  *(_QWORD *)(v30 - 144) = a21;
  *(_QWORD *)(v30 - 136) = a20;
  *(_DWORD *)(v30 - 112) = v31
                         - 1120
                         + 1224239923 * ((((v30 - 144) | 0x13E1F0B9) - ((v30 - 144) & 0x13E1F0B9)) ^ 0xE1520D6E);
  v34 = (void (*)(uint64_t))(*(_QWORD *)(v27 + 8 * (v31 - 1364)) - 12);
  v34(v30 - 144);
  LODWORD(v45) = v31 - 390;
  *(_QWORD *)(v30 - 136) = a20;
  *(_QWORD *)(v30 - 128) = a20;
  *(_QWORD *)(v30 - 144) = a21;
  *(_DWORD *)(v30 - 120) = v31
                         - 390
                         + 1225351577 * ((2 * ((v30 - 144) & 0x13F3B890) - (v30 - 144) - 334739601) ^ 0xCF969F79);
  *(_QWORD *)(v30 - 112) = a13;
  *(_QWORD *)(v30 - 104) = a22;
  v35 = (void (*)(uint64_t))*(&off_100212870 + v31 - 1175);
  v35(v30 - 144);
  *(_DWORD *)(v30 - 128) = (v31 - 342) ^ (628203409
                                        * ((((2 * (v30 - 144)) | 0x8F046CF0) - (v30 - 144) - 1199715960) ^ 0xC50A3A4B));
  *(_QWORD *)(v30 - 144) = a16;
  *(_QWORD *)(v30 - 136) = a21;
  v47(v30 - 144);
  *(_QWORD *)(v30 - 144) = a21;
  *(_QWORD *)(v30 - 136) = a1;
  *(_DWORD *)(v30 - 128) = (v31 - 1152) ^ (1178560073
                                         * (((v30 - 144) & 0x9C6FEFFB | ~((v30 - 144) | 0x9C6FEFFB)) ^ 0xD9046866));
  *(_QWORD *)(v30 - 120) = a16;
  *(_QWORD *)(v30 - 112) = v29;
  v46(v30 - 144);
  *(_QWORD *)(v30 - 144) = a21;
  *(_QWORD *)(v30 - 136) = v29;
  *(_QWORD *)(v30 - 104) = v26;
  *(_DWORD *)(v30 - 112) = v31
                         - 1120
                         + 1224239923 * ((((v30 - 144) | 0xC33BF16D) + (~(v30 - 144) | 0x3CC40E92)) ^ 0x31880CBB);
  *(_QWORD *)(v30 - 128) = v29;
  *(_QWORD *)(v30 - 120) = a16;
  v34(v30 - 144);
  *(_QWORD *)(v30 - 136) = v29;
  *(_QWORD *)(v30 - 128) = v29;
  *(_QWORD *)(v30 - 112) = a14;
  *(_QWORD *)(v30 - 104) = a16;
  *(_QWORD *)(v30 - 144) = a21;
  *(_DWORD *)(v30 - 120) = v31
                         - 390
                         + 1225351577
                         * ((805332467 - ((v30 - 144) | 0x300065F3) + ((v30 - 144) | 0xCFFF9A0C)) ^ 0xEC65421A);
  v35(v30 - 144);
  *(_DWORD *)(v30 - 144) = v31
                         - 108757529
                         * ((((v30 - 144) | 0x7ADA7F) - (v30 - 144) + ((v30 - 144) & 0xFF852580)) ^ 0xE0E6B854)
                         - 1191;
  *(_QWORD *)(v30 - 136) = v29;
  *(_QWORD *)(v30 - 128) = a20;
  ((void (*)(uint64_t))*(&off_100212870 + v31 - 1203))(v30 - 144);
  *(_DWORD *)(v30 - 140) = (v31 - 463) ^ (460628867
                                        * ((((v30 - 144) | 0xBD793154) - (v30 - 144) + ((v30 - 144) & 0x4286CEA8)) ^ 0xF1EFB329));
  *(_QWORD *)(v30 - 136) = v29;
  sub_10005BDE0(v30 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, void (*)(uint64_t), char *, _QWORD, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 + 8 * (((*(_DWORD *)(v30 - 144) < 0x4E02AB83u) * ((v31 ^ 0x55B) + 720)) ^ v31)) - 3 * (v31 ^ 0x55Bu) + 117))(v36, v37, v38, v39, v40, v41, v42, v43, a4, v45, a1, v46, a8, v47, (char *)*(&off_100212870 + (v31 ^ 0x559)) - 4, 3 * (v31 ^ 0x55Bu), a12, v34, a14,
           v48,
           a16,
           a17,
           a18);
}

uint64_t sub_100066024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t), uint64_t a16, uint64_t a17, void (*a18)(uint64_t), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  int v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v41;
  int v42;

  v37 = v31 + 86;
  *(_QWORD *)(v36 - 136) = v35;
  *(_QWORD *)(v36 - 128) = v33;
  *(_DWORD *)(v36 - 144) = (v31 + 828) ^ (235795823
                                        * ((((v36 - 144) | 0xEC38560C) - ((v36 - 144) & 0xEC38560C)) ^ 0x78951F55));
  v32(v36 - 144);
  v41 = v37 + 538;
  v42 = v37 + 1097;
  v38 = v37;
  v37 += 143;
  *(_QWORD *)(v36 - 128) = v35;
  *(_QWORD *)(v36 - 120) = v33;
  *(_QWORD *)(v36 - 104) = a31;
  *(_QWORD *)(v36 - 144) = a26;
  *(_QWORD *)(v36 - 136) = v35;
  *(_DWORD *)(v36 - 112) = v37
                         + 1224239923
                         * ((((v36 - 144) | 0xDD33A67B) - (v36 - 144) + ((v36 - 144) & 0x22CC5980)) ^ 0x2F805BAC);
  a18(v36 - 144);
  *(_QWORD *)(v36 - 128) = v35;
  *(_QWORD *)(v36 - 120) = v33;
  *(_DWORD *)(v36 - 112) = v37 + 1224239923 * ((2 * ((v36 - 144) & 0x7AD049E8) - (v36 - 144) + 87012882) ^ 0xF79C4BC5);
  *(_QWORD *)(v36 - 144) = a26;
  *(_QWORD *)(v36 - 136) = a20;
  *(_QWORD *)(v36 - 104) = v35;
  a18(v36 - 144);
  *(_DWORD *)(v36 - 144) = (v38 + 426522888) ^ (235795823
                                              * ((((2 * (v36 - 144)) | 0xEE26DB44) - (v36 - 144) - 1997761954) ^ 0xE3BE24FB));
  *(_QWORD *)(v36 - 136) = v35;
  *(_QWORD *)(v36 - 128) = a27;
  sub_100081A94(v36 - 144);
  *(_DWORD *)(v36 - 144) = (v38 + 742) ^ (235795823
                                        * ((2 * (((v36 - 144) ^ 0xD6BD5388) & 0x400DFC48)
                                          - ((v36 - 144) ^ 0xD6BD5388)
                                          - 1074658382) ^ 0xFDE21963));
  *(_QWORD *)(v36 - 136) = v35;
  *(_QWORD *)(v36 - 128) = a25;
  a15(v36 - 144);
  *(_QWORD *)(v36 - 144) = v35;
  *(_QWORD *)(v36 - 136) = a25;
  *(_DWORD *)(v36 - 128) = v38
                         + 1374699841 * ((2 * ((v36 - 144) & 0x37738180) - (v36 - 144) - 930316676) ^ 0xA5786675)
                         + 1467;
  v39 = sub_1000717A0(v36 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v34 + 8 * (((v41 ^ 0x28B) * (a24 == 0)) ^ v42)) - 4))(v39);
}

uint64_t sub_10006627C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = 535753261 * ((((v3 - 144) | 0x172E8085) - (v3 - 144) + ((v3 - 144) & 0xE8D17F78)) ^ 0x1DDA8EAA);
  *(_DWORD *)(v3 - 128) = v0 - v4 - 418;
  *(_QWORD *)(v3 - 120) = v2;
  *(_QWORD *)(v3 - 136) = v6;
  *(_DWORD *)(v3 - 144) = (((43 * (v0 ^ 0x298)) ^ 0xF08B6966) + v8) ^ v4;
  result = ((uint64_t (*)(uint64_t))*(&off_100212870 + v0 - 489))(v3 - 144);
  *(_DWORD *)(v7 - 0xAA58417147CEA7FLL) = v8;
  *(_DWORD *)(v1 + 64) = -1262737048;
  return result;
}

void sub_1000663F8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) - 1224239923 * ((a1 & 0x9A8552A9 | ~(a1 | 0x9A8552A9)) ^ 0x97C95081);
  __asm { BR              X9 }
}

uint64_t sub_1000664B8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((v0 - 755) * (v2 == 0)) ^ v0)) - ((v0 - 873) | 0x600u) + 1898))();
}

uint64_t sub_1000664F0@<X0>(uint64_t (*a1)(_DWORD *)@<X8>)
{
  int v1;
  _DWORD *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  _DWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v4 = v1 - 955;
  v5 = 3804331 * ((2 * (v7 & 0x63393F90) - v7 - 1664696213) ^ 0xE213E59D);
  v8 = 0x8DE5192BDC53166;
  v9 = v3;
  v10 = v5 - 1293307914;
  v7[0] = v5 + 1746339940;
  v7[1] = v5 + v4 - 136;
  result = a1(v7);
  *v2 = *(_DWORD *)(v3 - 0x335F4D7B17DD4DFFLL);
  return result;
}

uint64_t sub_100066AE4(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  unsigned int v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_DWORD *)result + 26185 * ((2 * (result & 0x1A68) - result - 6761) ^ 0x9DF5);
  v3 = ((v2 & 0x1FF ^ 0x86 | 0xF293029B) - (v2 & 0x1FF ^ 0x86 | 0xD6CFD64) + 225246564) ^ 0xB691069C;
  *(_DWORD *)(v1 - 0x1C0D97DFD8A7A9A8) = (((2 * v3) | 0xD78A8330) - v3 + 339394152) ^ 0xEEB902C7;
  *(_QWORD *)(v1 - 0x1C0D97DFD8A7A9C8) = 0x5945F903FFA6CEE2;
  *(_DWORD *)(v1 - 0x1C0D97DFD8A7A9ACLL) = 534536586;
  v4 = v2 ^ 0xF9;
  if (v4 == 1)
  {
    v5 = 534536602;
    goto LABEL_5;
  }
  if (v4 == 2)
  {
    *(_DWORD *)(v1 - 0x1C0D97DFD8A7A9B0) = -1672431488;
    v5 = 534536606;
LABEL_5:
    *(_QWORD *)(v1 - 0x1C0D97DFD8A7A9C0) = 0xB04FF2F938C77A71;
    *(_QWORD *)(v1 - 0x1C0D97DFD8A7A9B8) = 0x4FB00D06C738858ELL;
    *(_DWORD *)(v1 - 0x1C0D97DFD8A7A9ACLL) = v5;
  }
  *(_DWORD *)(result + 4) = 992382232;
  return result;
}

uint64_t sub_100066C78(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_10020E2D0 + ((8 * (*(_DWORD *)(a2 + 4) == 1747324539)) | 0x544u)) - 8))();
}

uint64_t sub_100066CB0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0x77F7D5FF) + 2 * **(unsigned __int8 **)(a2 + 8) - 1730183328;
  return 0;
}

uint64_t sub_100066CE0()
{
  return 4294925278;
}

void sub_100066CE8(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  _BOOL4 v5;

  v1 = 235795823 * (((_DWORD)a1 - 1876425126 - 2 * (a1 & 0x9028065A)) ^ 0x4854F03);
  v2 = a1[9] + v1;
  v3 = *a1 ^ v1;
  v5 = (v3 & 0x30000000) == 0x20000000 || (v3 & 0x3F000000) == 0x4000000;
  __asm { BR              X11 }
}

uint64_t sub_100066DC0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, uint64_t a6, unint64_t *a7, int a8, unint64_t *a9, char a10, int a11)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v15 = *(_QWORD *)(v12 + 8);
  v16 = 1755732067 * (((&a4 | 0x444B705B) - (&a4 | 0xBBB48FA4) - 1145794652) ^ 0x9A8DCD80);
  a4 = &STACK[0x18D77CDD39E8CCF6];
  a10 = (99 * (((&a4 | 0x5B) - (&a4 | 0xA4) - 92) ^ 0x80)) ^ 0xA8;
  a6 = v15;
  a7 = &STACK[0x27E11828102FB990];
  a9 = &STACK[0x236606C007542B32];
  a5 = ((v11 ^ 0xBBF50616) + 1606409462 + ((v14 - 33891456) & (2 * v11) ^ 0x8810D2D2)) ^ v16;
  a8 = v16 + 1172344573 + v14;
  v17 = (*(uint64_t (**)(unint64_t **))(a1 + 8 * (v14 ^ 0x366)))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v13 + 8 * ((1223 * (a11 == -1262737048)) ^ v14)) - 4))(v17);
}

uint64_t sub_100066EFC()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (int)((((v1 + 558555025) & 0xDEB51DBC ^ 0x280) * (v2 == 0x4000000)) ^ (v1 - 514)))
                            - 14 * ((v1 - 514) ^ 0x137u)
                            + 1494))();
}

uint64_t sub_100066F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((106 * (a10 + 4 < a10)) ^ v10)) - 116 * (v10 ^ 0xAFu) + 340))();
}

uint64_t sub_100066FD4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((54
                                          * ((((v0 + 942) ^ (((v1 << ((3 * (v0 ^ 0xD9)) ^ 0x8E)) & 0xBEB7DDEC ^ 0x2E215584)
                                                           + (v1 ^ 0xE86F553D)
                                                           + 1056946112 == 509322934)) & 1) == 0)) ^ v0))
                            - 4))();
}

uint64_t sub_100067060()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 ^ (41 * ((v0 + v1 + 547623178) > 0xB))))
                            - ((v2 + 129756752) & 0xF844137E ^ 0x352)))();
}

uint64_t sub_1000670C0()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((1008
                                          * (((v2 - (((((v1 - 801627665) & 0x2FC7DFDF) + 159) ^ 0x3FE) & v0)) & 0xFFFFFFFC) <= v2 + 3)) ^ (v1 + 1132)))
                            - 4))();
}

uint64_t sub_10006711C@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>, uint8x8_t a4@<D0>)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;

  a4.i32[0] = *(_DWORD *)(a3 + a2 + 1);
  *(_DWORD *)(a3 - 3 + v5 + ((a1 - 622) ^ v4)) = vmovn_s16((int16x8_t)vmovl_u8(a4)).u32[0];
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((1513 * (v6 == 4)) ^ a1)) - 4))();
}

uint64_t sub_100067170()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((748 * ((v1 ^ 0x3734BBCB) != ((v0 + 1687518878) & 0x9B6A85DF) - 1498)) ^ v0))
                            - 4))();
}

uint64_t sub_1000671CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v9 = v4 > 0x73BE2950;
  *(_BYTE *)(a1 + (v7 - 679174067)) = *(_BYTE *)(v1 + (v7 - 679174067));
  if (v9 == v7 + 1673950973 < v3)
    v9 = v7 + 1673950973 < v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((v9 * v6) ^ v2)) - 4))();
}

uint64_t sub_100067240@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)(a1 - 3 + (v2 + v3 + 131)) = *(_DWORD *)(v1 - 3 + (v2 + v3 + 131));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((22 * (v5 == 4)) ^ (v4 + 676)))
                            - ((21 * (v4 ^ 0x34Du)) ^ 0x18BLL)))();
}

uint64_t sub_1000672A4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (int)(((((v2 - 1576987025) & 0x5DFEEB5F ^ 0x3B2)
                                                + ((v2 + 1059653199) & 0xC0D6FDFB))
                                               * (v0 == v1)) ^ v2))
                            - 12))();
}

uint64_t sub_1000672FC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a2 + ((a1 + 636) ^ (v4 + 973)) + v5) = *(_BYTE *)(v2
                                                                           + ((a1 + 636) ^ (v4 + 973))
                                                                           + v5);
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((297 * (v5 - 1 == v3)) ^ (a1 - 745))) - 4))();
}

uint64_t sub_10006733C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((*(_QWORD *)(v1 + 16) != 0x335EB1051722DFECLL) * ((v0 - 645) ^ 0x1E)) ^ v0))
                            - 12))();
}

uint64_t sub_100067374@<X0>(uint64_t a1@<X8>, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(a1 - 0x335EB1051722DFECLL) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((*(_QWORD *)(v3 + 24) == 0x49EB7E5E2EA5C8EDLL) * (2 * (v2 ^ 0x2FA) - 851)) ^ v2))
                            - ((v2 + 9) ^ 0x35ALL)))();
}

void sub_1000673E0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 0x49EB7E5E2EA5C8EDLL) = v2;
  *(_DWORD *)(v1 + 32) = -1262737048;
}

uint64_t sub_10006748C(_DWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;

  v2 = 1755732067
     * ((2 * ((a1 ^ 0xFDCA5AD1) & 0x4699B354) - (a1 ^ 0xFDCA5AD1) - 1184478037) ^ 0x9A6AABA1);
  v3 = a1[8] - v2;
  v4 = a1[2] ^ v2;
  v8 = v3
     + 628203409
     * (((&v8 ^ 0x607C7E06) + 814069247 - 2 * ((&v8 ^ 0x607C7E06) & 0x3085B5FF)) ^ 0xD271C7CA)
     - 1404134225;
  result = nullsub_1(&v8);
  if (v4 > 1606241387)
  {
    if (v4 == 1891454059)
    {
      v6 = 3;
    }
    else
    {
      if (v4 != 1606241388)
        goto LABEL_11;
      v6 = 1;
    }
LABEL_10:
    v7 = *(_QWORD *)((char *)*(&off_100212870 + (int)(v3 - 1172345242))
                   + 8
                   * (int)(((((uint64_t (*)(_QWORD, uint64_t))*(&off_100212870 + (int)(v3 ^ 0x45E092B9)))((*((_DWORD *)*(&off_100212870 + (int)(v3 ^ 0x45E092F3)) + 6 * v6 + 2)- 1747324538), 3511634213) != 0)* (v3 - 1172343900)) ^ (v3 - 1172345033))- 4)- 12;
    __asm { BR              X9 }
  }
  if (v4 == 1606241384)
  {
    v6 = 0;
    goto LABEL_10;
  }
  if (v4 == 1606241387)
  {
    v6 = 2;
    goto LABEL_10;
  }
LABEL_11:
  a1[13] = 1262711508;
  return result;
}

void sub_100067AC0(uint64_t a1)
{
  int v1;
  int v2;
  _BYTE v3[4];
  int v4;
  uint64_t v5;

  v1 = *(_DWORD *)a1 - 108757529 * ((-2 - ((a1 | 0x1E625E8E) + (~(_DWORD)a1 | 0xE19DA171))) ^ 0x101C35A);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0xCDF342D76DC35A3);
  v5 = *(_QWORD *)(a1 + 8);
  v4 = (460628867 * ((v3 + 406003521 - 2 * ((unint64_t)v3 & 0x18331F41)) ^ 0x54A59D3C)) ^ (v1 - 907);
  sub_10005BDE0((uint64_t)v3);
  __asm { BR              X9 }
}

uint64_t sub_100067BFC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;

  v4 = ((v3 ^ v2) & 0x1F) == 0x15;
  return (*(uint64_t (**)(void))(a1 + 8 * ((v1 - 412) ^ ((16 * v4) | (v4 << 6)))))();
}

uint64_t sub_100067C60@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((((((v2 - 1249) | 0x19) + 56) ^ ((v2 - 1467) | 0x100))
                                * ((v1 & 0xABDDCBCC) + ((v2 - 705765405) ^ v3) + 705763865 < 0x7FFFFFFF)) ^ v2)))();
}

uint64_t sub_100067CD8@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)(*(_QWORD *)(v6 - 0xCDF342D76DC359FLL) + 4 * (v2 + 1047905375 + v5)) = *(_DWORD *)(*(_QWORD *)(v6 - 0xCDF342D76DC359FLL)
                                                                                                + 4 * a1);
  return (*(uint64_t (**)(void))(a2 + 8 * ((1848 * ((v3 + v4 + 13 + v5 - 329) > 0x7FFFFFFE)) ^ v4)))();
}

uint64_t sub_100067D3C@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;

  *(_DWORD *)(*v6 + 4 * (v7 + a3)) = *(_DWORD *)(*v6 + 4 * (a3 + v4));
  return (*(uint64_t (**)(void))(a4 + 8 * (((a1 + a3 - 329 > v8) * a2) ^ v5)))();
}

uint64_t sub_100067D74@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  unsigned int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (((((v2 - 1487182220) & 0x58A49F6F) - 1834) * (v1 + 1143097729 < v3)) ^ v2))
                            - 8))();
}

uint64_t sub_100067DC8@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  *(_DWORD *)(*(_QWORD *)(v5 - 0xCDF342D76DC359FLL) + 4 * (v1 + v2 + 1)) = -611232798;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8 * ((((v1 + v2) < 0x7FFFFFFF) * (v3 ^ 0x152)) ^ (v4 - 1508)))
                            - 8))();
}

uint64_t sub_100067E24@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  int v7;

  *(_DWORD *)(*v4 + 4 * (v7 + v2 + 1)) = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * (((v7 + v2 < v6) * a1) ^ v5)) - 8))();
}

void sub_100067E54()
{
  int v0;
  int v1;
  int v2;
  int v3;
  _DWORD *v4;
  int v5;
  int v6;

  v5 = -142907716 - v0;
  if (*v4 + 800888346 >= ((v3 - 1181770756) & 0x4670673C) - 1836)
    v6 = v5;
  else
    v6 = v1;
  *v4 += v2 + v6 + 2;
}

void sub_100068104(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 36) ^ (235795823
                             * ((-2 - ((a1 ^ 0x29040430 | 0x96E8ABCB) + (a1 ^ 0x10C0A082 | 0x69175434))) ^ 0x52961214));
  __asm { BR              X14 }
}

uint64_t sub_10006824C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((v0 - 826) | 0x223 | (4
                                                               * (((((v1 << ((((v0 - 58) | 0x23) + 101) ^ 0x91)) & 0xA5EDFF58 ^ 0xA168EF08)
                                                                  + (v1 ^ 0x864A8829)
                                                                  - 273954312 == 1117964708) ^ (((v0 - 58) | 0x23) + 52)) & 1))))
                            - 4))();
}

uint64_t sub_1000682DC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((86 * (a1 + v5 - 1391919020 < ((a5 + 2047498575) & 0x85F5A2F5 ^ 0xDD))) ^ a5))
                            - 12))();
}

uint64_t sub_100068338(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((a3 + 1645) ^ 0x749) * ((a2 + a4 - 16) > 0xFFFFFFEF)) ^ a3))
                            - 4))();
}

uint64_t sub_10006836C@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL4 v18;

  v10 = a1 + v8 + ((a3 + 271) ^ (a2 + 356)) + a4;
  v11 = ((_BYTE)a1 + (_BYTE)v8 + ((a3 + 15) ^ (a2 + 100))) & 0xF;
  v12 = v11 + v6 - v10;
  v13 = (v11 | v7) - v10;
  v14 = (v11 | v5) - v10;
  v18 = (unint64_t)(v4 - a4) > 0xF && v12 > 0xF && v13 > 0xF && v14 > 0xF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((59 * v18) ^ a3)) - 4))();
}

uint64_t sub_1000683E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8 + 8 * (((a7 ^ 0x21A) * (v7 > 0xF)) ^ a7))
                                                           - ((a7 + 393577932) & 0xE88A7BEF)
                                                           + 924))(a1, a2, 0);
}

uint64_t sub_100068428@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W6>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16x4_t v20;
  int8x16x4_t v21;

  v20.val[1].i64[0] = ((_BYTE)v8 + 9) & 0xF;
  v20.val[1].i64[1] = ((_BYTE)v8 + 8) & 0xF;
  v20.val[2].i64[0] = ((_BYTE)v8 + 7) & 0xF;
  v20.val[2].i64[1] = ((_BYTE)v8 + 6) & 0xF;
  v20.val[3].i64[0] = ((_BYTE)v8 + 5) & 0xF;
  v20.val[3].i64[1] = ((_BYTE)v8 + 4) & 0xF;
  v21.val[0].i64[0] = ((_BYTE)v8 + 3) & 0xF;
  v21.val[0].i64[1] = ((_BYTE)v8 + 2) & 0xF;
  v12 = a1 + v9 + a2;
  v21.val[1].i64[0] = ((_BYTE)v8 + 1) & 0xF;
  v21.val[1].i64[1] = v8 & 0xF;
  v21.val[2].i64[0] = ((_BYTE)v8 - 1) & 0xF;
  v21.val[2].i64[1] = ((_BYTE)v8 + 14) & 0xF;
  v21.val[3].i64[0] = ((_BYTE)v8 + 13) & 0xF;
  v21.val[3].i64[1] = (v8 + 12) & 0xF;
  v13.i64[0] = 0x6161616161616161;
  v13.i64[1] = 0x6161616161616161;
  v14.i64[0] = 0x3939393939393939;
  v14.i64[1] = 0x3939393939393939;
  v15 = ((((a3 ^ 0x299) - 229) | 0x500) ^ 0x797) & v12;
  v20.val[0].i64[0] = v15;
  v20.val[0].i64[1] = ((_BYTE)v8 + 10) & 0xF;
  v16.i64[0] = vqtbl4q_s8(v20, (int8x16_t)xmmword_1001B7290).u64[0];
  v16.i64[1] = vqtbl4q_s8(v21, (int8x16_t)xmmword_1001B7290).u64[0];
  v17 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v4 - 15 + v12), *(int8x16_t *)(v6 + v15 - 15)), veorq_s8(*(int8x16_t *)(v7 + v15 - 15), *(int8x16_t *)(v5 + v15 - 15))));
  v18 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v17, v17, 8uLL), v14), vmulq_s8(v16, v13)));
  *(int8x16_t *)(a4 - 15 + v12) = vextq_s8(v18, v18, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((1036 * ((v10 & 0xFFFFFFF0) == 16)) ^ a3 ^ 0x299)) - 4))();
}

void sub_1000685A0()
{
  JUMPOUT(0x100068514);
}

uint64_t sub_1000685AC()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  v3 = (((v1 ^ 0x5A2) - 725846324) ^ v0) != ((7 * (v1 ^ 0x5A2)) ^ 0x50F);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v3 | (v3 << 6)) ^ v1)) - 12))();
}

uint64_t sub_100068608@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;

  v11 = (v9 - 1133293858);
  v12 = (((v6 + 1033271076) & 0xC26987BF) - 1280) & v11;
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(v1 + v11) ^ *(_BYTE *)(v3 + v12) ^ *(_BYTE *)(v4 + v12) ^ *(_BYTE *)(v2 + v12) ^ (97 * v12) ^ 0x39;
  v13 = v7 > 0x3503F575;
  if (v13 == v9 - 2022745751 < v5)
    v13 = v9 - 2022745751 < v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((4 * v13) | (16 * v13) | v6)) - 4))();
}

uint64_t sub_1000686BC(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)((((((v4 - 1735) | 4) + 1126) ^ (v4 + 1421475399) & 0xAB45FF2F) * (v3 == a3)) ^ v4)))();
}

uint64_t sub_100068700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  unsigned int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v9
                                                                                        + 8
                                                                                        * (int)(a7 ^ (305 * ((v8 >> 3) & 1))))
                                                                            - ((a7 - 1458925962) & 0x56F577F6)
                                                                            + 1854))(a1, a2, a3, (a7 + 715), (v7 - a3));
}

uint64_t sub_100068744@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int8x16x4_t v53;

  *(_DWORD *)(v48 - 136) = v47;
  *(_QWORD *)(v48 - 128) = a5 - 7;
  *(_QWORD *)(v48 - 120) = v40 - 7;
  *(_DWORD *)(v48 - 144) = v47 & 0xFFFFFFF8;
  v49 = -a3;
  v50 = a1 + v46;
  *(_DWORD *)(v48 - 152) = a4 ^ 0x766;
  v51 = (v50 + a2 + v49);
  v53.val[0].i64[0] = ((_BYTE)v50 + (_BYTE)a2 + (_BYTE)v49) & 0xF;
  v53.val[0].i64[1] = (v45 + (_BYTE)v50 + 10 + (_BYTE)v49) & 0xF;
  v53.val[1].i64[0] = (v45 + (_BYTE)v50 + 9 + (_BYTE)v49) & 0xF;
  v53.val[1].i64[1] = (v45 + (_BYTE)v50 + 8 + (_BYTE)v49) & 0xF;
  v53.val[2].i64[0] = (v44 + (_BYTE)v49 + (a4 ^ 7)) & 0xF;
  v53.val[2].i64[1] = (v45 + (_BYTE)v50 + 6 + (_BYTE)v49) & 0xF;
  v53.val[3].i64[0] = (v45 + (_BYTE)v50 + 5 + (_BYTE)v49) & 0xF;
  v53.val[3].i64[1] = (v45 + (_BYTE)v50 + 4 + (_BYTE)v49) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v48 - 128) + v51) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(*(_QWORD *)(v48 - 120) + v51), *(int8x8_t *)(v42 + (v51 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v43 + (v51 & 0xF) - 7), *(int8x8_t *)(v41 + (v51 & 0xF) - 7)))), (int8x8_t)0x3939393939393939), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v53, (int8x16_t)xmmword_1001B72A0), (int8x8_t)0x6161616161616161)));
  return (*(uint64_t (**)(__n128))(a40 + 8 * ((108 * (8 - (v47 & 0xFFFFFFF8) == v49)) ^ a4)))((__n128)xmmword_1001B72A0);
}

void sub_10006888C()
{
  JUMPOUT(0x1000687B0);
}

uint64_t sub_100068894()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((((*(_DWORD *)(v0 - 152) - 1222) | 0x742) - 1381)
                                          * (*(_DWORD *)(v0 - 136) == *(_DWORD *)(v0 - 144))) ^ *(_DWORD *)(v0 - 152)))
                            - ((*(_DWORD *)(v0 - 152) + 73) ^ 0x503)))();
}

uint64_t sub_1000688DC@<X0>(int a1@<W4>, int a2@<W5>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = (a2 - 563 + a1 - 1117966004);
  *(_BYTE *)(a3 + v9) = *(_BYTE *)(v3 + v9) ^ *(_BYTE *)(v5 + (v9 & 0xF)) ^ *(_BYTE *)(v6 + (v9 & 0xF)) ^ *(_BYTE *)(v4 + (v9 & 0xF)) ^ (97 * (v9 & 0xF)) ^ 0x39;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((1850 * (a1 - 1 == v7)) ^ (a2 - 1585))) - 4))();
}

uint64_t sub_100068950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;

  v38 = *(_QWORD *)(v35 + 24);
  *(int8x16_t *)(v36 - 112) = veorq_s8(*(int8x16_t *)(*(_QWORD *)(v35 + 40) - 0x2CF2CD9EB99DE98FLL), (int8x16_t)xmmword_1001B72B0);
  if (a9)
    v39 = v38 == 0x6BB64013357C0BE9;
  else
    v39 = 1;
  v40 = v39;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8 * (int)(((16 * (((a4 - 122) ^ v40) & 1)) & 0xBF | ((((a4 - 122) ^ v40) & 1) << 6)) ^ a4)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35);
}

uint64_t sub_1000689C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  _BOOL4 v36;

  v36 = ((BYTE4(a10) + 10) & 0xF) == 0 && HIDWORD(a10) != ((((_DWORD)a4 - 335) | 0x14) ^ 0x554B26C2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 8 * (int)((232 * v36) ^ a4)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34);
}

uint64_t sub_100068A10@<X0>(unsigned __int8 *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unsigned int a35,uint64_t a36)
{
  int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  unint64_t v42;
  char *v43;
  int v44;
  int v45;
  char *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unsigned __int8 v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  char *v62;
  int v63;
  char *v64;
  int v65;
  char *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  char *v110;
  char *v111;
  int v112;
  char *v113;
  char *v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  int v220;
  int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  char *v226;
  int v227;
  uint64_t v228;
  char *v229;
  unsigned int v230;
  uint64_t v231;
  char *v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  char *v237;
  unsigned int v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int v271;
  int v272;
  unsigned int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;

  v40 = (char *)*(&off_100212870 + v36 - 878) - 12;
  v41 = v40[*(unsigned __int8 *)(v38 - 0x6BB64013357C0BE8) ^ 0x85];
  HIDWORD(v42) = v41 ^ 0x3C;
  LODWORD(v42) = (v41 ^ 0x80) << 24;
  LOBYTE(v41) = (v42 >> 30) ^ 0x9F;
  v43 = (char *)*(&off_100212870 + (v36 ^ 0x3DE)) - 12;
  v44 = v43[(*(_BYTE *)(v38 - 0x6BB64013357C0BDELL) ^ (v36 - 21))];
  HIDWORD(v42) = v44 ^ 0xC;
  LODWORD(v42) = ~v44 << 24;
  LOBYTE(v44) = v42 >> 28;
  v45 = v40[*(unsigned __int8 *)(v38 - 0x6BB64013357C0BE4) ^ 0x6FLL];
  HIDWORD(v42) = v45 ^ 0x3C;
  LODWORD(v42) = (v45 ^ 0x80) << 24;
  v46 = (char *)*(&off_100212870 + (v36 ^ 0x3B3)) - 4;
  v47 = v44 | ((v46[*(unsigned __int8 *)(v38 - 0x6BB64013357C0BDFLL) ^ 0xB7] ^ 0x6D) << 8);
  v48 = (uint64_t)*(&off_100212870 + (v36 ^ 0x3D3));
  LOBYTE(v45) = *(_BYTE *)(v48 + (*(unsigned __int8 *)(v38 - 0x6BB64013357C0BDDLL) ^ 0xD8));
  v49 = ((v46[*(unsigned __int8 *)(v38 - 0x6BB64013357C0BDBLL) ^ 0xC7] ^ 0x8DLL) << 8) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v45 ^ 0xE0u) << 24);
  v50 = v43[*(unsigned __int8 *)(v38 - 0x6BB64013357C0BDALL) ^ 0xBCLL];
  v51 = (((v42 >> 30) ^ 0x68) << 16) | ((v46[*(unsigned __int8 *)(v38
                                                                                                  - 0x6BB64013357C0BE3) ^ 0xDFLL] ^ 0x4C) << 8);
  HIDWORD(v42) = v50 ^ 0xC;
  LODWORD(v42) = ~v50 << 24;
  v52 = v42 >> 28;
  v53 = v52 ^ 0x68;
  v54 = v43[*(unsigned __int8 *)(v38 - 0x6BB64013357C0BE2) ^ 0x98];
  HIDWORD(v42) = v54 ^ 0xC;
  LODWORD(v42) = ~v54 << 24;
  v55 = v51 & 0xFFFFFF00 | ((*(unsigned __int8 *)(v48 + (*(unsigned __int8 *)(v38 - 0x6BB64013357C0BE5) ^ 0xAFLL)) ^ 0x30) << 24) | (v42 >> 28);
  LODWORD(v43) = v43[*(unsigned __int8 *)(v38 - 0x6BB64013357C0BE6) ^ 0xD0];
  HIDWORD(v42) = v43 ^ 0xC;
  LODWORD(v42) = ~(_DWORD)v43 << 24;
  v56 = v40[*(unsigned __int8 *)(v38 - 0x6BB64013357C0BDCLL) ^ 0xB6];
  LOBYTE(v43) = (v42 >> 28) ^ 0x3C;
  HIDWORD(v42) = v56 ^ 0x3C;
  LODWORD(v42) = (v56 ^ 0x80) << 24;
  v57 = (v41 << 16) | ((v46[*(unsigned __int8 *)(v38 - 0x6BB64013357C0BE7) ^ 0x49] ^ 0xC6) << 8) | ((*(unsigned __int8 *)(v48 + (*v37 ^ 0xFELL)) ^ 0xE9) << 24) | v43;
  v58 = (v42 >> 30) ^ 0x21;
  LODWORD(v40) = v40[*(unsigned __int8 *)(v38 - 0x6BB64013357C0BE0) ^ 0xC8];
  LODWORD(v43) = v49 | ((_DWORD)v58 << 16) | v53;
  HIDWORD(v42) = v40 ^ 0x3C;
  LODWORD(v42) = (v40 ^ 0x80) << 24;
  LODWORD(v48) = *(unsigned __int8 *)(v48 + (*(unsigned __int8 *)(v38 - 0x6BB64013357C0BE1) ^ 0x18));
  v59 = v43 ^ 0x75F49EF4;
  v60 = (uint64_t)*(&off_100212870 + v36 - 817);
  v61 = v47 & 0xFF00FFFF | (((v42 >> 30) ^ 0x37) << 16) | ((v48 ^ 0xAF) << 24);
  LODWORD(v48) = (((unsigned __int16)((v49 | v53) ^ 0x9EF4) >> 8)
                - ((2 * (((v49 | (v58 << 16) | v53) ^ 0x75F49EF4) >> 8)) & 0x1AE)
                - 1917930281) ^ *(_DWORD *)(v60
                                          + 4
                                          * (((unsigned __int16)((v49 | v53) ^ 0x9EF4) >> 8) ^ 0xF5));
  LODWORD(v53) = v48 - ((2 * v48) & 0xF86E4C98);
  v62 = (char *)*(&off_100212870 + v36 - 854) - 8;
  v63 = *(_DWORD *)&v62[4 * ~(_BYTE)v45];
  HIDWORD(v42) = v63 ^ 2;
  LODWORD(v42) = v63 ^ 0xBF083930;
  v64 = (char *)*(&off_100212870 + v36 - 891) - 8;
  LODWORD(v53) = (v42 >> 2) ^ *(_DWORD *)&v64[4 * (v58 ^ 0xDD)] ^ (v53 - 63494580);
  v65 = v53 - ((2 * v53) & 0x497C79CE);
  v66 = (char *)*(&off_100212870 + (v36 ^ 0x37F)) - 8;
  v275 = v57;
  v276 = v55;
  v67 = *(_DWORD *)&v66[4 * (v52 ^ 0xD9)] ^ v57 ^ (v65 + 616447207);
  v273 = v61;
  v271 = v67 ^ v55 ^ 0x2789BBD4;
  v68 = v61 ^ 0xE6 ^ v271;
  v69 = *(_DWORD *)&v62[4 * (((v68 ^ v43 ^ 0x75F49EF4) >> 24) ^ 0x21)];
  HIDWORD(v42) = v69 ^ 2;
  LODWORD(v42) = v69 ^ 0xBF083930;
  v70 = ((v42 >> 2) - ((2 * (v42 >> 2)) & 0x497C79CE) + 616447207) ^ *(_DWORD *)&v66[4
                                                                                   * ((v68 ^ v43 ^ 0xF4) ^ 0xDE)];
  HIDWORD(v269) = v68 ^ v43 ^ 0x75F49EF4;
  v272 = v67;
  LODWORD(v269) = *(_DWORD *)(v60 + 4 * (((unsigned __int16)(v68 ^ v59) >> 8) ^ 0x1Eu)) ^ *(_DWORD *)&v64[4 * (((v68 ^ v59) >> 16) ^ 0x8F)] ^ v67 ^ ((((unsigned __int16)(v68 ^ v59) >> 8) ^ 0xEB) - ((2 * (((v68 ^ v59) >> 8) ^ 0x4BA6EB)) & 0x1AE) - 1917930281) ^ (v70 - ((2 * v70) & 0xF86E4C98) - 63494580);
  v71 = v269 ^ 0x76E748E2 ^ v67 ^ v55;
  v274 = v43 ^ 0x75F49EF4;
  v72 = *(_DWORD *)&v62[4 * (((v71 ^ v43 ^ 0x75F49EF4) >> 24) ^ 0xA2)];
  HIDWORD(v42) = v72 ^ 2;
  LODWORD(v42) = v72 ^ 0xBF083930;
  v73 = v71 ^ v43 ^ 0x75F49EF4 ^ 0xC84590C6;
  v74 = *(_DWORD *)(v60 + 4 * (BYTE1(v73) ^ 0xF5u)) ^ *(_DWORD *)&v64[4
                                                                      * (((v71 ^ v43 ^ 0x75F49EF4) >> 16) ^ 0x6C)] ^ (BYTE1(v73) - ((v73 >> 7) & 0x1AE) - 1917930281) ^ ((v42 >> 2) - ((2 * (v42 >> 2)) & 0xF86E4C98) - 63494580);
  HIDWORD(v267) = v269 ^ 0x76E748E2 ^ *(_DWORD *)&v66[4 * ((v71 ^ v43 ^ 0xF4) ^ 0x83)] ^ (v74 - ((2 * v74) & 0x497C79CE) + 616447207);
  LODWORD(v268) = v71 ^ v43 ^ 0x75F49EF4;
  LODWORD(v267) = HIDWORD(v267) ^ 0x2789BBD4 ^ v71;
  v270 = v68;
  HIDWORD(v268) = v71;
  HIDWORD(v266) = v71 ^ v68;
  v75 = v267 ^ 0x8EDEEA78 ^ v71 ^ v68;
  v76 = *(_DWORD *)&v62[4 * (((v75 ^ v73) >> 24) ^ 0x67)];
  HIDWORD(v42) = v76 ^ 2;
  LODWORD(v42) = v76 ^ 0xBF083930;
  v77 = (v42 >> 2) ^ *(_DWORD *)(v60 + 4 * (((unsigned __int16)(v75 ^ v73) >> 8) ^ 0x97u)) ^ ((((unsigned __int16)(v75 ^ v73) >> 8) ^ 0x62) - ((2 * (((v75 ^ v73) >> 8) ^ 0xD8B62)) & 0x1AE) - 1917930281);
  v78 = (v77 - ((2 * v77) & 0x497C79CE) + 616447207) ^ *(_DWORD *)&v66[4 * ((v75 ^ v73) ^ 0xE1)];
  v79 = HIDWORD(v267) ^ 0x2789BBD4 ^ *(_DWORD *)&v64[4 * (((v75 ^ v73 ^ 0x2142BA5) >> 16) ^ 0xB6)] ^ (v78 - ((2 * v78) & 0xF86E4C98) - 63494580);
  v80 = v79 ^ v267 ^ 0x8EDEEA78;
  HIDWORD(v265) = v75 ^ v73;
  LODWORD(v266) = v75;
  LODWORD(v264) = v80 ^ 0x307C325C ^ v75 ^ 0x5EF1BA37;
  v81 = *(_DWORD *)&v62[4 * (((v264 ^ v75 ^ v73) >> 24) ^ 0xA4)];
  HIDWORD(v42) = v81 ^ 2;
  LODWORD(v42) = v81 ^ 0xBF083930;
  v82 = ((v42 >> 2) - ((2 * (v42 >> 2)) & 0x497C79CE) + 616447207) ^ *(_DWORD *)&v66[4
                                                                                   * ((v264 ^ v75 ^ v73) ^ 0x18)];
  v83 = v264 ^ v75 ^ v73 ^ 0xCEE37B5D;
  HIDWORD(v263) = v264 ^ v75 ^ v73;
  HIDWORD(v264) = v80;
  LODWORD(v265) = v79;
  v84 = *(_DWORD *)&v64[4 * (BYTE6(v263) ^ 0xCA)] ^ *(_DWORD *)(v60 + 4 * (BYTE1(v83) ^ 0xF5u)) ^ v79 ^ (BYTE1(v83) - ((v83 >> 7) & 0x1AE) - 1917930281) ^ 0xC287C516 ^ (v82 - ((2 * v82) & 0xF86E4C98) - 63494580);
  v85 = (v80 ^ 0x307C325C) - 2 * ((v80 ^ 0x307C325C) & 0x4287C536 ^ v80 & 0x20);
  v86 = v84 ^ ((v75 ^ 0x5EF1BA37) - ((2 * (v75 ^ 0x5EF1BA37)) & 0x850F8A2C) - 1031289578);
  v87 = *(_DWORD *)&v62[4 * (((v86 ^ v83) >> 24) ^ 0x70)];
  HIDWORD(v42) = v87 ^ 2;
  LODWORD(v42) = v87 ^ 0xBF083930;
  v88 = ((v42 >> 2) - ((2 * (v42 >> 2)) & 0xF86E4C98) - 63494580) ^ *(_DWORD *)&v64[4
                                                                                  * (((v86 ^ v83 ^ 0xF3443494) >> 16) ^ 0xE4)];
  v89 = (v88 - ((2 * v88) & 0x497C79CE) + 616447207) ^ *(_DWORD *)&v66[4
                                                                     * ((v64[4 * (BYTE6(v263) ^ 0xCA)] ^ *(_BYTE *)(v60 + 4 * (BYTE1(v83) ^ 0xF5u)) ^ v79 ^ (BYTE1(v83) - ((v83 >> 7) & 0xAE) - 41)) ^ 0x16 ^ (v82 - ((2 * v82) & 0x98) + 76) ^ ((v75 ^ 0x37) - ((2 * (v75 ^ 0x37)) & 0x2C) + 22) ^ v83 ^ 0x91)];
  LODWORD(v262) = v86 ^ v83;
  v90 = v86 ^ v83 ^ 0x1A89BBD4;
  v91 = (v89 - 1917930281 + (~(2 * v89) | 0xE4A29651) + 1) ^ *(_DWORD *)(v60 + 4 * (BYTE1(v90) ^ 0xF5u));
  v92 = v84 ^ BYTE1(v90) ^ (v91 - ((2 * v91) & 0x850F8A2C) - 1031289578);
  HIDWORD(v262) = v86;
  LODWORD(v263) = v84;
  LODWORD(v261) = v84 ^ (v85 - 1031289578);
  HIDWORD(v260) = v92 ^ v261;
  v93 = v92 ^ v261 ^ 0xE6F58988;
  v94 = v93 ^ v86 ^ v90;
  v95 = *(_DWORD *)&v62[4 * (HIBYTE(v94) ^ 0x43)];
  HIDWORD(v42) = v95 ^ 2;
  LODWORD(v42) = v95 ^ 0xBF083930;
  HIDWORD(v259) = v94;
  v96 = *(_DWORD *)(v60 + 4 * (((unsigned __int16)(v94 ^ 0x7ABE) >> 8) ^ 0xF5u)) ^ *(_DWORD *)&v64[4 * (((v94 ^ 0x4D501F31) >> 16) ^ 0xE2)] ^ (((unsigned __int16)(v94 ^ 0x7ABE) >> 8) - (((v94 ^ 0x299B7ABE) >> 7) & 0x1AE) - 1917930281) ^ ((v42 >> 2) - ((2 * (v42 >> 2)) & 0xF86E4C98) - 63494580);
  HIDWORD(v261) = v92;
  v97 = v92 ^ *(_DWORD *)&v66[4 * (v94 ^ 0xFB)] ^ (v96 - ((2 * v96) & 0x497C79CE) + 616447207);
  HIDWORD(v258) = v97 ^ v93;
  v98 = v97 ^ v93 ^ 0x5BF36347;
  LODWORD(v260) = v93 ^ v86;
  LODWORD(v258) = v98 ^ v93 ^ v86;
  v99 = v258 ^ 0x2745D0FF ^ v94 ^ 0x299B7ABE;
  v100 = (((unsigned __int16)(v99 ^ 0x6B2B) >> 8) - (((v99 ^ 0x3DCC6B2B) >> 7) & 0x1AE) - 1917930281) ^ *(_DWORD *)(v60 + 4 * (((unsigned __int16)(v99 ^ 0x6B2B) >> 8) ^ 0xF5u));
  v101 = (v100 - ((2 * v100) & 0x497C79CE) + 616447207) ^ *(_DWORD *)&v66[4
                                                                        * ((~(_BYTE)v258 ^ v94 ^ 0xBE) ^ 0x6E)];
  HIDWORD(v257) = v99;
  v102 = *(_DWORD *)&v62[4 * (HIBYTE(v99) ^ 0x57)];
  HIDWORD(v42) = v102 ^ 2;
  LODWORD(v42) = v102 ^ 0xBF083930;
  LODWORD(v259) = v97;
  LODWORD(v257) = (v42 >> 2) ^ *(_DWORD *)&v64[4 * (BYTE2(v99) ^ 0xE5)] ^ v97 ^ (v101
                                                                               - ((2 * v101) & 0xF86E4C98)
                                                                               - 63494580);
  v103 = v257 ^ 0x930000ED ^ v98;
  LODWORD(v256) = v103 ^ 0x8D06EA22 ^ v258 ^ 0x2745D0FF;
  v104 = v256 ^ v99 ^ 0x3DCC6B2B;
  v105 = *(_DWORD *)&v62[4 * (HIBYTE(v104) ^ 0x39)];
  HIDWORD(v42) = v105 ^ 2;
  LODWORD(v42) = v105 ^ 0xBF083930;
  LODWORD(v49) = *(_DWORD *)&v66[4 * (v104 ^ 4)] ^ *(_DWORD *)(v60
                                                                              + 4
                                                                              * (((unsigned __int16)(v104 ^ 0xAA41) >> 8) ^ 0xF5u)) ^ 0xA9108830 ^ (v42 >> 2);
  v106 = *(_DWORD *)&v64[4 * (((v104 ^ 0x9289BB39) >> 16) ^ 0x7E)] ^ v257 ^ 0x930000ED ^ ((unsigned __int16)(v104 ^ 0xAA41) >> 8) ^ 0x4C8602BB ^ (v49 - ((2 * v49) & 0xF86E4C98) - 63494580);
  HIDWORD(v256) = v103;
  v107 = (v103 ^ 0x8D06EA22) - 2 * ((v103 ^ 0x8D06EA22) & 0x4C8602BF ^ v103 & 4);
  LODWORD(v49) = v106 ^ ((v258 ^ 0x2745D0FF) - ((2 * (v258 ^ 0x2745D0FF)) & 0x990C0576) + 1283850939);
  v108 = v49 ^ v104 ^ 0x53DEAA41;
  LODWORD(v62) = *(_DWORD *)&v62[4 * (HIBYTE(v108) ^ 0x44)];
  HIDWORD(v42) = v62 ^ 2;
  LODWORD(v42) = v62 ^ 0xBF083930;
  LODWORD(v60) = *(_DWORD *)(v60 + 4 * (BYTE1(v108) ^ 0xFDu)) ^ *(_DWORD *)&v66[4
                                                                                * ((v106 ^ (~(_BYTE)v258 - ((2 * ~(_BYTE)v258) & 0x76) - 69) ^ v104 ^ 0x41) ^ 0xC4)] ^ ((BYTE1(v108) ^ 8) - ((v108 >> 7) & 0x1AE) - 1917930281) ^ ((v42 >> 2) - ((2 * (v42 >> 2)) & 0x497C79CE) + 616447207);
  HIDWORD(v254) = v108 ^ 0x6272186E;
  LODWORD(v60) = (v60 - ((2 * v60) & 0xF86E4C98) - 63494580) ^ *(_DWORD *)&v64[4 * (BYTE2(v108) ^ 0x16)];
  LODWORD(v40) = v60 - ((2 * v60) & 0x990C0576);
  v109 = v49 ^ 0x626A2240;
  v110 = (char *)*(&off_100212870 + v36 - 906) - 8;
  v111 = (char *)*(&off_100212870 + v36 - 870) - 12;
  v112 = v111[*(unsigned __int8 *)(v39 - 109) ^ 0xA5];
  HIDWORD(v42) = v112 ^ 0x18;
  LODWORD(v42) = (v112 ^ 0x80) << 24;
  v113 = (char *)*(&off_100212870 + (v36 ^ 0x391)) - 12;
  v114 = (char *)*(&off_100212870 + v36 - 795) - 12;
  v252 = v111;
  v115 = (v111[*(unsigned __int8 *)(v39 - 97) ^ 0x7BLL] ^ 0xE7) & 0xFFFF00FF | ((((*(_BYTE *)(v39 - 98) ^ 0xD0) + v110[*(unsigned __int8 *)(v39 - 98) ^ 0xDFLL] - 86) ^ 0xE4) << 8) | ((v113[*(unsigned __int8 *)(v39 - 99) ^ 0xAALL] ^ 0x60) << 16);
  v253 = v110;
  v250 = v114;
  v251 = v113;
  LODWORD(v60) = (((((v42 >> 30) ^ 0xDB) >> 2) | (((v42 >> 30) ^ 0xDB) << 6)) | ((v113[*(unsigned __int8 *)(v39 - 111) ^ 0x7ALL] ^ 3) << 16) | ((v114[*(unsigned __int8 *)(v39 - 112) ^ 0x78] ^ 0x3E) << 24) | (((v110[*(unsigned __int8 *)(v39 - 110) ^ 0x5DLL] + (*(_BYTE *)(v39 - 110) ^ 0x52) - 86) ^ 0x5D) << 8)) ^ 0x5790ECE6;
  v116 = ((v111[*(unsigned __int8 *)(v39 - 101) ^ 0x60] ^ 0x53) & 0xFFFF00FF | ((v113[*(unsigned __int8 *)(v39 - 103) ^ 5] ^ 0x52) << 16) | (((v110[*(unsigned __int8 *)(v39 - 102) ^ 4] + (*(_BYTE *)(v39 - 102) ^ 0xB) - 86) ^ 0x33) << 8) | ((v114[*(unsigned __int8 *)(v39 - 104) ^ 0x1CLL] ^ 0xCB) << 24)) ^ 0xF718F240;
  LODWORD(v111) = ((v111[*(unsigned __int8 *)(v39 - 105) ^ 0x28] ^ 0x92) & 0xFFFF00FF | ((((*(_BYTE *)(v39 - 106) ^ 0xAC) + v110[*(unsigned __int8 *)(v39 - 106) ^ 0xA3] - 86) ^ 0xF6) << 8) | ((v114[*(unsigned __int8 *)(v39 - 108) ^ 0xB2] ^ 0x3C) << 24) | ((v113[*(unsigned __int8 *)(v39 - 107) ^ 0x27] ^ 0x36) << 16)) ^ 0x4E6DB1CD;
  v117 = (v115 | ((v114[*(unsigned __int8 *)(v39 - 100) ^ 0x45] ^ 4) << 24)) ^ 0x4BD71C8C;
  LODWORD(v249) = (v36 + 878) ^ 0x726;
  LODWORD(v248) = v106 ^ (v107 + 1283850939);
  HIDWORD(v248) = (v36 + 878) ^ 0x701;
  HIDWORD(v247) = (v36 + 878) ^ 0x7C4;
  v255 = __PAIR64__(v104, v106);
  HIDWORD(v246) = ((_DWORD)v40 + 1283850939) ^ v106;
  LODWORD(v247) = (v36 + 878) ^ 0x7F6;
  LODWORD(v246) = (v36 + 878) ^ 0x7DA;
  *(_DWORD *)(v39 - 128) = v36 + 878;
  HIDWORD(v245) = (v36 + 878) ^ 0x78D;
  LODWORD(v254) = v109;
  HIDWORD(v249) = (v107 + 1283850939) ^ 0x3DC8BA5D ^ ((_DWORD)v40 + 1283850939);
  LODWORD(v245) = HIDWORD(v249) ^ v109;
  LODWORD(v113) = *(_DWORD *)(v39 - 128);
  v118 = ((_DWORD)v113 - 1250843755) ^ 0xB571AAD0;
  *(_QWORD *)(v39 - 208) = v118;
  v119 = a1[v118];
  *(_QWORD *)(v39 - 176) = 12;
  LODWORD(v119) = v252[v119 ^ 0x41];
  v120 = a1[12] ^ 0x60;
  *(_QWORD *)(v39 - 168) = 8;
  LODWORD(v120) = v114[v120];
  *(_QWORD *)(v39 - 136) = 1;
  v121 = v114[a1[8] ^ 0xC1] ^ 0xB;
  v122 = v251[a1[1] ^ 0x66] ^ 0xEF;
  *(_QWORD *)(v39 - 144) = 15;
  LODWORD(v43) = v122 << 16;
  v123 = v252[a1[15] ^ 0xE9];
  *(_QWORD *)(v39 - 160) = 11;
  v123 ^= 0x45u;
  v124 = v123 | ((v120 ^ 0xFFFFFFBF) << 24);
  v125 = v252[a1[11] ^ 0xC3];
  *(_QWORD *)(v39 - 184) = 0;
  LODWORD(v120) = v43 | ((v114[*a1 ^ 0x30] ^ 0xFFFFFF8F) << 24);
  LOBYTE(v43) = v125 ^ 0x8F;
  *(_QWORD *)(v39 - 152) = 2;
  LODWORD(v120) = v120 & 0xFFFF00FF | (((v110[a1[2] ^ 0xC0] + (a1[2] ^ 0xCF) - 86) ^ 0xF9) << 8);
  *(_QWORD *)(v39 - 216) = 9;
  v126 = v251[a1[9] ^ 0x5DLL];
  *(_QWORD *)(v39 - 240) = 5;
  *(_QWORD *)(v39 - 232) = 4;
  *(_QWORD *)(v39 - 192) = 10;
  v127 = ((v126 ^ 0x3C) << 16) | (((v110[a1[10] ^ 0xD5] + (a1[10] ^ 0xDA) - 86) ^ 0xCF) << 8) | v125 ^ 0x8F | (v121 << 24);
  *(_QWORD *)(v39 - 200) = 14;
  v128 = (v110[a1[14] ^ 0xE4] + (a1[14] ^ 0xEB) + 42);
  *(_QWORD *)(v39 - 224) = 3;
  LODWORD(v120) = v252[a1[3] ^ 0xDCLL] ^ 0x51 | v120;
  *(_QWORD *)(v39 - 248) = 13;
  v129 = v114[a1[4] ^ 0xFCLL] ^ 0x31;
  v130 = (v128 << 8) | ((v251[a1[13] ^ 0x92] ^ 1) << 16) | v124;
  *(_QWORD *)(v39 - 256) = 6;
  LODWORD(v43) = v127 + 1319193593 - 2 * (v127 & 0x4EA14BFB ^ v43 & 2);
  v131 = ((v251[a1[5] ^ 0xA9] ^ 0xD2) << 16) | (((v110[a1[6] ^ 0x4FLL]
                                                                                    + (a1[6] ^ 0x40)
                                                                                    - 86) ^ 0xB7) << 8) | v119 ^ 0x95 | (v129 << 24);
  v132 = v60 ^ v275 ^ (v120 - ((2 * v120) & 0xDC52ABBE) - 299280929);
  v133 = v111 ^ v276 ^ (v131 - 2 * (v131 & 0x77D40875 ^ (v119 ^ 0x95) & 1) - 137099148);
  v134 = v117 ^ v274 ^ (v130 - 2 * (v130 & 0x726EA53F ^ v123 & 0xA) - 227629771);
  v135 = v116 ^ v273 ^ v43;
  v136 = (uint64_t)*(&off_100212870 + (int)v249);
  v137 = *(_DWORD *)(v136 + 4 * (HIBYTE(v135) ^ 0x3F));
  HIDWORD(v42) = ~v137;
  LODWORD(v42) = v137 ^ 0xA91BE3F2;
  v138 = (uint64_t)*(&off_100212870 + (int)v113 - 1738);
  v139 = (v42 >> 1) ^ ((BYTE2(v134) ^ 0x68) + 183153120 - ((2 * (HIWORD(v134) ^ 0xB768)) & 0x1C0)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v134) ^ 0x34u));
  v140 = (uint64_t)*(&off_100212870 + (int)v113 - 1647);
  v141 = *(_DWORD *)(v140 + 4 * ((v116 ^ v273 ^ v43) ^ 0xC6u)) ^ ((BYTE2(v132) ^ 0xD5) + 183153120 - ((2 * (HIWORD(v132) ^ 0x6CD5)) & 0x1C0)) ^ (((v116 ^ v273 ^ v43) ^ 0xAB) + 1069380434 + ((2 * ((v116 ^ v273 ^ v43) ^ 0xAB) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v132) ^ 0x89u));
  LODWORD(v120) = *(_DWORD *)(v138 + 4 * (BYTE2(v133) ^ 0x8Cu)) ^ *(_DWORD *)(v140
                                                                              + 4 * (v134 ^ 0xB6u)) ^ ((v134 ^ 0xDB) + 1069380434 + ((2 * (v134 ^ 0xDB) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ ((BYTE2(v133) ^ 0xD0) + 183153120 - ((2 * (HIWORD(v133) ^ 0xC8D0)) & 0x1C0));
  LODWORD(v111) = *(_DWORD *)(v136 + 4 * (HIBYTE(v133) ^ 0xC8));
  HIDWORD(v42) = ~(_DWORD)v111;
  LODWORD(v42) = v111 ^ 0xA91BE3F2;
  v142 = ((BYTE2(v135) ^ 0xAD) + 183153120 - 2 * ((HIWORD(v135) ^ 0x3FAD) & 0xE2 ^ HIWORD(v135) & 2)) ^ *(_DWORD *)(v140 + 4 * (v132 ^ 0x1Cu)) ^ ((v132 ^ 0x71) + 1069380434 + ((2 * (v132 ^ 0x71) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v135) ^ 0xF1u)) ^ (v42 >> 1);
  LODWORD(v43) = *(_DWORD *)(v136 + 4 * (HIBYTE(v132) ^ 0x6C));
  HIDWORD(v42) = ~(_DWORD)v43;
  LODWORD(v42) = v43 ^ 0xA91BE3F2;
  LODWORD(v43) = v42 >> 1;
  *(_DWORD *)(v39 - 120) = 1069380433;
  v143 = (v133 ^ 0x10) + 1069380433 - ((2 * (v133 ^ 0x10) + 4031742) & 0x3D01A4);
  v144 = *(_DWORD *)(v136 + 4 * (HIBYTE(v134) ^ 0xB7));
  HIDWORD(v42) = ~v144;
  LODWORD(v42) = v144 ^ 0xA91BE3F2;
  v145 = BYTE1(v132);
  v146 = (uint64_t)*(&off_100212870 + SHIDWORD(v248));
  v147 = *(_DWORD *)(v146 + 4 * (v145 ^ 0xDEu)) ^ v270 ^ *(_DWORD *)(v140 + 4 * (v133 ^ 0x7Du)) ^ (v139 - 691945427 - ((2 * v139) & 0xAD83805A));
  v148 = (v141 - 691945427 - ((2 * v141) & 0xAD83805A)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v133) ^ 0x2Fu)) ^ (v42 >> 1);
  v149 = *(_DWORD *)(v146 + 4 * (BYTE1(v135) ^ 0x29u)) ^ v272 ^ v43 ^ (v120
                                                                                     - 691945427
                                                                                     - ((2 * v120) & 0xAD83805A));
  LODWORD(v43) = v147 ^ v143;
  v150 = *(_DWORD *)(v146 + 4 * (BYTE1(v134) ^ 0x66u)) ^ v271 ^ (v142 - 691945427 - ((2 * v142) & 0xAD83805A));
  LODWORD(v120) = *(_DWORD *)(v136 + 4 * ((v147 ^ ~v143) >> 24));
  HIDWORD(v42) = ~(_DWORD)v120;
  LODWORD(v42) = v120 ^ 0xA91BE3F2;
  v151 = v42 >> 1;
  LODWORD(v120) = *(_DWORD *)(v136 + 4 * (HIBYTE(v149) ^ 0x91));
  HIDWORD(v42) = ~(_DWORD)v120;
  LODWORD(v42) = v120 ^ 0xA91BE3F2;
  LODWORD(v120) = v42 >> 1;
  v152 = *(_DWORD *)(v136 + 4 * (HIBYTE(v150) ^ 0xA3));
  HIDWORD(v42) = ~v152;
  LODWORD(v42) = v152 ^ 0xA91BE3F2;
  LODWORD(v119) = v120 ^ *(_DWORD *)(v138 + 4 * (BYTE2(v150) ^ 0xF0u)) ^ ((BYTE2(v150) ^ 0xAC)
                                                                          + 183153120
                                                                          - 2
                                                                          * ((HIWORD(v150) ^ 0xA3AC) & 0xE2 ^ HIWORD(v150) & 2));
  LODWORD(v120) = (v42 >> 1) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v43) ^ 0x15u)) ^ *(_DWORD *)(v140
                                                                                          + 4
                                                                                          * (v149 ^ 0x7Bu)) ^ ((BYTE2(v43) ^ 0x49) + 183153120 - ((2 * ((v43 >> 16) ^ 0xFF49)) & 0x1C0)) ^ ((v149 ^ 0x16) + 1069380434 + ((2 * (v149 ^ 0x16) + 254) & 0x1A4 ^ 0xFFC2FFFF));
  v153 = v120 - 691945427 - ((2 * v120) & 0xAD83805A);
  LODWORD(v120) = (v148 - ((2 * v148) & 0x45824892) + 583083081) ^ HIDWORD(v269);
  LODWORD(v119) = (v119 - 691945427 - ((2 * v119) & 0xAD83805A)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v43) ^ 0x2Cu));
  v154 = v151 ^ *(_DWORD *)(v140 + 4 * (v150 ^ 3u)) ^ ((v150 ^ 0x6E)
                                                                        + 1069380434
                                                                        + ((2 * (v150 ^ 0x6E) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v120) ^ 0xA4u)) ^ ((BYTE2(v120) ^ 0xF8) + 183153120 - ((2 * (WORD1(v120) ^ 0x4CF8)) & 0x1C0));
  v155 = *(_DWORD *)(v138 + 4 * (BYTE2(v149) ^ 0x2Eu)) ^ ((BYTE2(v149) ^ 0x72)
                                                          + 183153120
                                                          - ((2 * (HIWORD(v149) ^ 0x9172)) & 0x1C0));
  v156 = *(_DWORD *)(v136 + 4 * (BYTE3(v120) ^ 0x4C));
  HIDWORD(v42) = ~v156;
  LODWORD(v42) = v156 ^ 0xA91BE3F2;
  v157 = ((v43 ^ 0xFC) + 1069380434 + ((2 * (v43 ^ 0xFC) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v150) ^ 0xBDu)) ^ *(_DWORD *)(v140 + 4 * (v43 ^ 0x91u)) ^ (v155 - 691945427 - ((2 * v155) & 0xAD83805A)) ^ (v42 >> 1);
  LODWORD(v43) = ((v120 ^ 4) - 1726037377) ^ v269 ^ *(_DWORD *)(v140
                                                                               + 4 * (v120 ^ 0x69u)) ^ (v119 - 1499549486 - ((2 * v119) & 0x4D3D61A4));
  v158 = *(_DWORD *)(v146 + 4 * (BYTE1(v149) ^ 0x57u)) ^ HIDWORD(v266) ^ (v154 - 691945427 - ((2 * v154) & 0xAD83805A));
  v159 = (v157 - ((2 * v157) & 0xFF8CD890) - 3773368) ^ v268;
  v160 = *(_DWORD *)(v146 + 4 * (BYTE1(v120) ^ 0xBFu)) ^ HIDWORD(v268) ^ v153;
  LODWORD(v119) = *(_DWORD *)(v136 + 4 * (HIBYTE(v159) ^ 0x12));
  HIDWORD(v42) = ~(_DWORD)v119;
  LODWORD(v42) = v119 ^ 0xA91BE3F2;
  LODWORD(v120) = ((v160 ^ 0xA1)
                 + 1069380434
                 + ((2 * (v160 ^ 0xA1) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v140
                                                                                                  + 4 * (v160 ^ 0xCCu));
  LODWORD(v119) = *(_DWORD *)(v138 + 4 * (BYTE2(v43) ^ 0xDBu)) ^ ((BYTE2(v43) ^ 0x87)
                                                                  + 183153120
                                                                  - ((2 * ((v43 >> 16) ^ 0x3A87)) & 0x1C0)) ^ (v42 >> 1);
  LODWORD(v120) = (v120 - 691945427 - ((2 * v120) & 0xAD83805A)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v43) ^ 0xDEu));
  v161 = ((v43 ^ 0x9E) + 1069380434 + ((2 * (v43 ^ 0x9E) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v140 + 4 * (v43 ^ 0xF3u));
  v162 = v161 - 691945427 - ((2 * v161) & 0xAD83805A);
  LODWORD(v119) = (v119 - 691945427 - ((2 * v119) & 0xAD83805A)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v160) ^ 0x57u));
  v163 = *(_DWORD *)(v136 + 4 * (HIBYTE(v158) ^ 0x37));
  HIDWORD(v42) = ~v163;
  LODWORD(v42) = v163 ^ 0xA91BE3F2;
  v164 = v42 >> 1;
  LODWORD(v43) = *(_DWORD *)(v136 + 4 * ((v43 >> 24) ^ 0x3A));
  HIDWORD(v42) = ~(_DWORD)v43;
  LODWORD(v42) = v43 ^ 0xA91BE3F2;
  LODWORD(v43) = BYTE2(v160) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v160) ^ 0xF6u)) ^ *(_DWORD *)(v146
                                                                                           + 4
                                                                                           * ((unsigned __int16)(v158 ^ 0xBC3A) >> 8)) ^ 0xDC2B7167 ^ (v42 >> 1);
  LODWORD(v43) = ((v159 ^ 0x58) - 1726037377) ^ HIDWORD(v267) ^ *(_DWORD *)(v140
                                                                                           + 4
                                                                                           * (v159 ^ 0x35u)) ^ ((_DWORD)v43 - 1499549486 - ((2 * (_DWORD)v43) & 0x4D3D61A4));
  v165 = *(_DWORD *)(v136 + 4 * (HIBYTE(v160) ^ 0x7C));
  v166 = ((v158 ^ 0x3A) - 1726037377) ^ HIDWORD(v265) ^ *(_DWORD *)(v140
                                                                                   + 4
                                                                                   * (v158 ^ 0x57u)) ^ (v119 - 1499549486 - ((2 * v119) & 0x4D3D61A4));
  HIDWORD(v42) = ~v165;
  LODWORD(v42) = v165 ^ 0xA91BE3F2;
  LODWORD(v120) = *(_DWORD *)(v138 + 4 * (BYTE2(v159) ^ 0x40u)) ^ v266 ^ BYTE2(v159) ^ v164 ^ (v120
                                                                                               + 183153120
                                                                                               - ((2 * v120) & 0x15D563C0));
  v167 = *(_DWORD *)(v146 + 4 * (BYTE1(v159) ^ 0x8Cu)) ^ v267 ^ (((v158 ^ 0x740CBC3A) >> 16)
                                                                 + 183153120
                                                                 - ((v158 >> 15) & 0x1C0)) ^ *(_DWORD *)(v138 + 4 * (((v158 ^ 0x740CBC3A) >> 16) ^ 0x5Cu)) ^ (v42 >> 1) ^ v162;
  v168 = v120 ^ 0xFA64A5DF;
  LODWORD(v119) = ((v120 ^ 0xDF) + 1069380434 + ((2 * (v120 ^ 0xFA64A5DF) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v140 + 4 * (v120 ^ 0xB2u));
  v169 = *(_DWORD *)(v136 + 4 * ((v43 >> 24) ^ 0x5B));
  v170 = v119 - 691945427 - ((2 * v119) & 0xAD83805A);
  HIDWORD(v42) = ~v169;
  LODWORD(v42) = v169 ^ 0xA91BE3F2;
  LODWORD(v119) = (v42 >> 1) ^ *(_DWORD *)(v140 + 4 * (v166 ^ 0x1Fu));
  v171 = *(_DWORD *)(v136 + 4 * (HIBYTE(v166) ^ 0x28));
  HIDWORD(v42) = ~v171;
  LODWORD(v42) = v171 ^ 0xA91BE3F2;
  v172 = v42 >> 1;
  LODWORD(v119) = v119 ^ ((v166 ^ 0x72)
                        + 1069380434
                        + ((2 * (v166 ^ 0x72) + 254) & 0x1A4 ^ 0xFFC2FFFF));
  LODWORD(v120) = *(_DWORD *)(v136 + 4 * (BYTE3(v120) ^ 0xB9));
  v173 = v119 - 691945427 - ((2 * v119) & 0xAD83805A);
  HIDWORD(v42) = ~(_DWORD)v120;
  LODWORD(v42) = v120 ^ 0xA91BE3F2;
  LODWORD(v119) = v42 >> 1;
  v174 = *(_DWORD *)(v136 + 4 * (HIBYTE(v167) ^ 0xB4));
  HIDWORD(v42) = ~v174;
  LODWORD(v42) = v174 ^ 0xA91BE3F2;
  LODWORD(v119) = v119 ^ *(_DWORD *)(v140 + 4 * (v167 ^ 0x8Bu)) ^ ((v167 ^ 0xE6)
                                                                                    + 1069380434
                                                                                    + ((2
                                                                                      * (v167 ^ 0xE6)
                                                                                      + 254) & 0x1A4 ^ 0xFFC2FFFF));
  v175 = BYTE2(v43) ^ 0x95;
  v176 = v175 + 183153120 - ((2 * ((v43 >> 16) ^ 0x5B95)) & 0x1C0);
  v177 = ((BYTE2(v166) ^ 0x14) + 183153120 - ((v166 >> 15) & 0x1C0)) ^ v264 ^ *(_DWORD *)(v146
                                                                                        + 4 * (BYTE1(v43) ^ 0x1Fu)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v166) ^ 0x48u)) ^ (v119 - 691945427 - ((2 * v119) & 0xAD83805A));
  v178 = *(_DWORD *)(v146 + 4 * BYTE1(v168)) ^ v265 ^ ((BYTE2(v167) ^ 0x59)
                                                       + 183153120
                                                       - ((2 * (HIWORD(v167) ^ 0xB459)) & 0x1C0)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v167) ^ 5u)) ^ v173;
  LODWORD(v43) = (BYTE2(v168) + 183153120 - ((v168 >> 15) & 0x1C0)) ^ HIDWORD(v264) ^ ((v43 ^ 0xF4)
                                                                                     + *(_DWORD *)(v39 - 120)
                                                                                     - ((2
                                                                                       * (v43 ^ 0xF4)
                                                                                       + 4031742) & 0x3D01A4)) ^ *(_DWORD *)(v140 + 4 * (v43 ^ 0x99u)) ^ ((v42 >> 1) - 691945427 - ((2 * (v42 >> 1)) & 0xAD83805A)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v168) ^ 0x5Cu)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v166) ^ 0x12u));
  v179 = *(_DWORD *)(v146 + 4 * (BYTE1(v167) ^ 0x34u)) ^ HIDWORD(v263) ^ v176 ^ *(_DWORD *)(v138 + 4 * (v175 ^ 0x5Cu)) ^ v170 ^ v172;
  v180 = *(_DWORD *)(v136 + 4 * (HIBYTE(v179) ^ 0xEB));
  HIDWORD(v42) = ~v180;
  LODWORD(v42) = v180 ^ 0xA91BE3F2;
  v181 = (v42 >> 1) - 691945427 - ((2 * (v42 >> 1)) & 0xAD83805A);
  LODWORD(v119) = ((BYTE2(v43) ^ 0x81)
                 + 183153120
                 - 2 * (((v43 >> 16) ^ 0x1481) & 0xF4 ^ (v43 >> 16) & 0x14)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v43) ^ 0xDDu));
  LODWORD(v111) = ((v43 ^ 0x51)
                 + 1069380434
                 + ((2 * (v43 ^ 0x51) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v140
                                                                                                 + 4
                                                                                                 * (v43 ^ 0x3Cu));
  v182 = *(_DWORD *)(v138 + 4 * (BYTE2(v177) ^ 0xDBu)) ^ ((BYTE2(v177) ^ 0x87)
                                                          + 183153120
                                                          - ((2 * (HIWORD(v177) ^ 0x7787)) & 0x1C0));
  LODWORD(v114) = *(_DWORD *)(v136 + 4 * ((v43 >> 24) ^ 0x14));
  HIDWORD(v42) = ~(_DWORD)v114;
  LODWORD(v42) = v114 ^ 0xA91BE3F2;
  LODWORD(v114) = v42 >> 1;
  v183 = *(_DWORD *)(v136 + 4 * (HIBYTE(v178) ^ 0x9A));
  HIDWORD(v42) = ~v183;
  LODWORD(v42) = v183 ^ 0xA91BE3F2;
  v184 = *(_DWORD *)(v138 + 4 * (((v179 ^ 0xA87CE98B) >> 16) ^ 0x5Cu)) ^ ((v179 ^ 0xA87CE98B) >> 16) ^ ((_DWORD)v111 + 183153120 - ((2 * (_DWORD)v111) & 0x15D563C0));
  LODWORD(v119) = ((v179 ^ 0x8B) + 1069380434 + ((2 * (v179 ^ 0xA87CE98B) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v177) ^ 0xDEu)) ^ *(_DWORD *)(v140 + 4 * (v179 ^ 0xE6u)) ^ (v119 - 691945427 - ((2 * v119) & 0xAD83805A)) ^ (v42 >> 1);
  v185 = *(_DWORD *)(v136 + 4 * (HIBYTE(v177) ^ 0x77));
  HIDWORD(v42) = ~v185;
  LODWORD(v42) = v185 ^ 0xA91BE3F2;
  v186 = *(_DWORD *)(v146 + 4 * (BYTE1(v43) ^ 0x34u)) ^ v262 ^ ((BYTE2(v178) ^ 0xE9)
                                                                + 183153120
                                                                - ((2 * (HIWORD(v178) ^ 0x9AE9)) & 0x1C0)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v178) ^ 0xB5u)) ^ ((v177 ^ 0x9E) + 1069380434 + ((2 * (v177 ^ 0x9E) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ v181 ^ *(_DWORD *)(v140 + 4 * (v177 ^ 0xF3u));
  LODWORD(v120) = *(_DWORD *)(v146 + 4 * (BYTE1(v179) ^ 0xBu)) ^ v261 ^ ((v178 ^ 0xA8)
                                                                         + 1069380434
                                                                         + ((2 * (v178 ^ 0xA8) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v140 + 4 * (v178 ^ 0xC5u)) ^ v114 ^ (v182 - 691945427 - ((2 * v182) & 0xAD83805A));
  v187 = *(_DWORD *)(v146 + 4 * (BYTE1(v178) ^ 0x2Du)) ^ v86 ^ (v42 >> 1) ^ (v184
                                                                             - 691945427
                                                                             - ((2 * v184) & 0xAD83805A));
  v188 = ((v120 ^ 0x2E0E654A) >> 16);
  LODWORD(v43) = v188 + 183153120 - ((v120 >> 15) & 0x1C0);
  LODWORD(v111) = *(_DWORD *)(v136 + 4 * (BYTE3(v120) ^ 0x6D));
  HIDWORD(v42) = ~(_DWORD)v111;
  LODWORD(v42) = v111 ^ 0xA91BE3F2;
  LODWORD(v111) = v42 >> 1;
  v189 = (v119 - 1031289578 - ((2 * v119) & 0x850F8A2C)) ^ v263;
  LODWORD(v119) = *(_DWORD *)(v138 + 4 * (v188 ^ 0x5Cu));
  v190 = *(_DWORD *)(v136 + 4 * (HIBYTE(v189) ^ 0xFD));
  LODWORD(v119) = v119 ^ (~v190 << 31) ^ (v190 >> 1) ^ v43 ^ 0x548DF1F9;
  v191 = ((v120 ^ 0x4A) + 1069380434 + ((2 * (v120 ^ 0x2E0E654A) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v140 + 4 * (v120 ^ 0x27u));
  LODWORD(v43) = v119 - 691945427 - ((2 * v119) & 0xAD83805A);
  LODWORD(v119) = *(_DWORD *)(v136 + 4 * (HIBYTE(v187) ^ 0xAE));
  HIDWORD(v42) = ~(_DWORD)v119;
  LODWORD(v42) = v119 ^ 0xA91BE3F2;
  LODWORD(v119) = (v42 >> 1) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v189) ^ 0xA4u)) ^ (v191
                                                                                - 691945427
                                                                                - ((2 * v191) & 0xAD83805A));
  v192 = v119 + 183153120 - ((2 * v119) & 0x15D563C0);
  v193 = *(_DWORD *)(v39 - 120);
  LODWORD(v119) = *(_DWORD *)(v138 + 4 * (BYTE2(v187) ^ 0x3Au)) ^ v111 ^ ((BYTE2(v187) ^ 0x66)
                                                                                        + 183153120
                                                                                        - ((2 * (HIWORD(v187) ^ 0xAE66)) & 0x1C0)) ^ ((v189 ^ 0x20) + v193 - ((2 * (v189 ^ 0x20) + 4031742) & 0x3D01A4)) ^ *(_DWORD *)(v140 + 4 * (v189 ^ 0x4Du));
  v194 = ((v187 ^ 0xB3) + 1876984493 + ((2 * (v187 ^ 0xB3) + 126) & 0x5A ^ 0xDFFE7FFF)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v120) ^ 0x65u));
  v195 = (v194 - 1499549486 - ((2 * v194) & 0x4D3D61A4)) ^ *(_DWORD *)(v140 + 4 * (v187 ^ 0xDEu));
  LODWORD(v111) = *(_DWORD *)(v138 + 4 * (BYTE2(v189) ^ 0x40u)) ^ ((BYTE2(v189) ^ 0x1C)
                                                                   + 183153120
                                                                   - ((v189 >> 15) & 0x1C0));
  v196 = v111 ^ 0xD9E215AF ^ -(v111 ^ 0xD9E215AF);
  LODWORD(v111) = v111 ^ 0x431D28D3 ^ v195;
  v195 ^= 0x6500C283u;
  LODWORD(v111) = v196 ^ ((_DWORD)v111 + v195 + 1);
  v197 = *(_DWORD *)(v136 + 4 * ((v186 ^ 0x3F162902u) >> 24));
  HIDWORD(v42) = ~v197;
  LODWORD(v42) = v197 ^ 0xA91BE3F2;
  v198 = ((v186 ^ 0x3F162902u) >> 16) ^ v260 ^ *(_DWORD *)(v138
                                                                                        + 4
                                                                                        * (((v186 ^ 0x3F162902u) >> 16) ^ 0x5Cu)) ^ v192;
  v199 = (v42 >> 1) ^ HIDWORD(v259) ^ ((_DWORD)v111 + v195);
  v200 = *(_DWORD *)(v146 + 4 * (BYTE1(v186) ^ 0xCBu)) ^ HIDWORD(v260) ^ (v119 - 691945427 - ((2 * v119) & 0xAD83805A));
  LODWORD(v43) = *(_DWORD *)(v146 + 4 * (BYTE1(v187) ^ 0x7Cu)) ^ HIDWORD(v261) ^ ((v186 ^ 2)
                                                                                  + 1069380434
                                                                                  + ((2 * (v186 ^ 0x3F162902) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v140 + 4 * (v186 ^ 0x6Fu)) ^ v43;
  LODWORD(v119) = ((BYTE2(v43) ^ 0xE9) + 183153120 - ((2 * ((v43 >> 16) ^ 0xB8E9)) & 0x1C0)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v43) ^ 0xB5u));
  v201 = v119 - 691945427 - ((2 * v119) & 0xAD83805A);
  LODWORD(v119) = *(_DWORD *)(v136 + 4 * (HIBYTE(v198) ^ 0x9D));
  HIDWORD(v42) = ~(_DWORD)v119;
  LODWORD(v42) = v119 ^ 0xA91BE3F2;
  LODWORD(v119) = v42 >> 1;
  LODWORD(v111) = *(_DWORD *)(v136 + 4 * (HIBYTE(v200) ^ 0x61));
  HIDWORD(v42) = ~(_DWORD)v111;
  LODWORD(v42) = v111 ^ 0xA91BE3F2;
  v202 = *(_DWORD *)(v140 + 4 * (v43 ^ 0xC5u)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v198) ^ 0x28u)) ^ ((v43 ^ 0xA8) + 1069380434 + ((2 * (v43 ^ 0xA8) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ ((BYTE2(v198) ^ 0x74) + 183153120 - ((2 * (HIWORD(v198) ^ 0x9D74)) & 0x1C0)) ^ (v42 >> 1);
  LODWORD(v119) = v119 ^ ((BYTE2(v199) ^ 0xE6) + 183153120 - ((2 * (HIWORD(v199) ^ 0xB0E6)) & 0x1C0)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v199) ^ 0xBAu));
  v203 = *(_DWORD *)(v136 + 4 * ((v43 >> 24) ^ 0xB8));
  HIDWORD(v42) = ~v203;
  LODWORD(v42) = v203 ^ 0xA91BE3F2;
  v204 = ((BYTE2(v200) ^ 8) + 183153120 - ((v200 >> 15) & 0x1C0)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v200) ^ 0x54u)) ^ *(_DWORD *)(v140 + 4 * (v199 ^ 0x29u)) ^ ((v199 ^ 0x44) + 1069380434 + ((2 * (v199 ^ 0x44) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ (v42 >> 1);
  v205 = *(_DWORD *)(v146 + 4 * (BYTE1(v199) ^ 0xDDu)) ^ HIDWORD(v258) ^ (v202 - 691945427 - ((2 * v202) & 0xAD83805A));
  v206 = *(_DWORD *)(v136 + 4 * (HIBYTE(v199) ^ 0xB0));
  HIDWORD(v42) = ~v206;
  LODWORD(v42) = v206 ^ 0xA91BE3F2;
  v207 = *(_DWORD *)(v146 + 4 * (BYTE1(v198) ^ 0xBDu)) ^ v259 ^ (v204 - 691945427 - ((2 * v204) & 0xAD83805A));
  v208 = *(_DWORD *)(v146 + 4 * (BYTE1(v200) ^ 0x8Fu)) ^ HIDWORD(v257) ^ *(_DWORD *)(v140
                                                                                     + 4
                                                                                     * (v198 ^ 0xB4u)) ^ ((v198 ^ 0xD9) + 1069380434 + ((2 * (v198 ^ 0xD9) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ (v42 >> 1) ^ v201;
  v209 = ((v200 ^ 0x85) + v193 - ((2 * (v200 ^ 0x85) + 4031742) & 0x3D01A4)) ^ v258 ^ *(_DWORD *)(v140 + 4 * (v200 ^ 0xE8u)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v43) ^ 0x2Du)) ^ (v119 - 691945427 - ((2 * v119) & 0xAD83805A));
  LODWORD(v120) = *(_DWORD *)(v136 + 4 * (HIBYTE(v208) ^ 0x18));
  LODWORD(v119) = ((BYTE2(v209) ^ 0x66) + 183153120 - ((2 * (HIWORD(v209) ^ 0xAE66)) & 0x1C0)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v209) ^ 0x3Au));
  HIDWORD(v42) = ~(_DWORD)v120;
  LODWORD(v42) = v120 ^ 0xA91BE3F2;
  v210 = (v42 >> 1) + 183153120 - ((2 * (v42 >> 1)) & 0x15D563C0);
  LODWORD(v120) = *(_DWORD *)(v136 + 4 * (HIBYTE(v207) ^ 0xEF));
  HIDWORD(v42) = ~(_DWORD)v120;
  LODWORD(v42) = v120 ^ 0xA91BE3F2;
  v211 = BYTE2(v207);
  LODWORD(v120) = v210 ^ *(_DWORD *)(v138 + 4 * (BYTE2(v207) ^ 0x40u));
  v212 = (v42 >> 1) ^ *(_DWORD *)(v140 + 4 * (v208 ^ 0x90u)) ^ ((v208 ^ 0xFD)
                                                                                 + v193
                                                                                 - ((2 * (v208 ^ 0xFD)
                                                                                   + 4031742) & 0x3D01A4));
  v213 = v119 - 691945427 - ((2 * v119) & 0xAD83805A);
  LODWORD(v119) = v212 - 691945427 - ((2 * v212) & 0xAD83805A);
  v214 = *(_DWORD *)(v140 + 4 * (v205 ^ 0x27u)) ^ ((v205 ^ 0x4A)
                                                                    + 1069380434
                                                                    + ((2 * (v205 ^ 0x4A) + 254) & 0x1A4 ^ 0xFFC2FFFF));
  LODWORD(v43) = *(_DWORD *)(v136 + 4 * (HIBYTE(v209) ^ 0xAE));
  HIDWORD(v42) = ~(_DWORD)v43;
  LODWORD(v42) = v43 ^ 0xA91BE3F2;
  LODWORD(v43) = (v42 >> 1) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v208) ^ 0xFu));
  LODWORD(v111) = *(_DWORD *)(v136 + 4 * (HIBYTE(v205) ^ 0xDC));
  HIDWORD(v42) = ~(_DWORD)v111;
  LODWORD(v42) = v111 ^ 0xA91BE3F2;
  v215 = v43 ^ (v214 + 183153120 - ((2 * v214) & 0x15D563C0));
  LODWORD(v43) = ((BYTE2(v205) ^ 0xE) + 183153120 - ((v205 >> 15) & 0x1C0)) ^ v257 ^ *(_DWORD *)(v146
                                                                                               + 4
                                                                                               * (BYTE1(v209) ^ 0x7Cu)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v205) ^ 0x52u)) ^ v119;
  v216 = *(_DWORD *)(v146 + 4 * (BYTE1(v208) ^ 0x1Bu)) ^ HIDWORD(v256) ^ *(_DWORD *)(v140
                                                                                     + 4
                                                                                     * (v207 ^ 0x4Du)) ^ ((v207 ^ 0x20) + 1069380434 + ((2 * (v207 ^ 0x20) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ (v42 >> 1) ^ v213;
  v217 = ((v209 ^ 0xB3) + 1069380434 + ((2 * (v209 ^ 0xB3) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ HIDWORD(v255) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v205) ^ 0x65u)) ^ *(_DWORD *)(v140 + 4 * (v209 ^ 0xDEu)) ^ (v120 - 691945427 - ((2 * v120) & 0xAD83805A));
  v218 = *(_DWORD *)(v146 + 4 * (BYTE1(v207) ^ 0xA4u)) ^ v256 ^ (v215 - 691945427 - ((2 * v215) & 0xAD83805A));
  LODWORD(v119) = (v218 ^ BYTE2(v208));
  LOBYTE(v205) = v217 ^ v211;
  v219 = v217 ^ v211 ^ 0x7641388B;
  LODWORD(v120) = *(_DWORD *)(v136 + 4 * HIBYTE(v219));
  HIDWORD(v42) = ~(_DWORD)v120;
  LODWORD(v42) = v120 ^ 0xA91BE3F2;
  LODWORD(v111) = v42 >> 1;
  LODWORD(v120) = *(_DWORD *)(v136 + 4 * ((v43 ^ 0xF7E9CFA8) >> 24));
  HIDWORD(v42) = ~(_DWORD)v120;
  LODWORD(v42) = v120 ^ 0xA91BE3F2;
  LODWORD(v114) = v42 >> 1;
  v220 = (BYTE2(v219) + 183153120 - ((v219 >> 15) & 0x1C0)) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v219) ^ 0x5Cu));
  v221 = *(_DWORD *)(v136 + 4 * (HIBYTE(v218) ^ 0xE7));
  HIDWORD(v42) = ~v221;
  LODWORD(v42) = v221 ^ 0xA91BE3F2;
  v222 = v42 >> 1;
  LODWORD(v119) = v111 ^ *(_DWORD *)(v140 + 4 * (v119 ^ 0x18)) ^ (((v43 ^ 0xF7E9CFA8) >> 16)
                                                                                              + 183153120
                                                                                              - (((v43 ^ 0xF7E9CFA8) >> 15) & 0x1C0)) ^ *(_DWORD *)(v138 + 4 * (((v43 ^ 0xF7E9CFA8) >> 16) ^ 0x5Cu)) ^ ((v119 ^ 0x75) + v193 - ((2 * (v119 ^ 0x75) + 4031742) & 0x3D01A4));
  LODWORD(v119) = (v119 - 691945427 - ((2 * v119) & 0xAD83805A)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v216) ^ 0xECu));
  v223 = v114 ^ *(_DWORD *)(v138 + 4 * (BYTE2(v216) ^ 0xA7u)) ^ ((BYTE2(v216) ^ 0xFB)
                                                                               + 183153120
                                                                               - ((2 * (HIWORD(v216) ^ 0x57FB)) & 0x1C0)) ^ (v193 + v219 - ((2 * v219 + 4031742) & 0x3D01A4)) ^ *(_DWORD *)(v140 + 4 * (v205 ^ 0xE6u));
  LODWORD(v60) = *(_DWORD *)(v136 + 4 * (HIBYTE(v216) ^ 0x57));
  HIDWORD(v42) = ~(_DWORD)v60;
  LODWORD(v42) = v60 ^ 0xA91BE3F2;
  v224 = (v223 - 691945427 - ((2 * v223) & 0xAD83805A)) ^ *(_DWORD *)(v146 + 4 * (BYTE1(v218) ^ 0x6Du));
  LODWORD(v120) = ((v43 ^ 0xA8)
                 + 1069380434
                 + ((2 * (v43 ^ 0xF7E9CFA8) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ ((BYTE2(v218) ^ 0x31)
                                                                                         + 183153120
                                                                                         - ((2 * (HIWORD(v218) ^ 0xE731)) & 0x1C0)) ^ *(_DWORD *)(v140 + 4 * (v43 ^ 0xC5u));
  LODWORD(v43) = *(_DWORD *)(v146 + 4 * (BYTE1(v43) ^ 0x2Du));
  LODWORD(v60) = v120 ^ (v42 >> 1) ^ *(_DWORD *)(v138 + 4 * (BYTE2(v218) ^ 0x6Du));
  LODWORD(v60) = v248 ^ *(_DWORD *)(v146 + 4 * (BYTE1(v217) ^ 0xDAu)) ^ (v60 - 691945427 - ((2 * v60) & 0xAD83805A));
  v225 = (v224 + 1283850939 - ((2 * v224) & 0x990C0576)) ^ v255;
  LODWORD(v111) = (v119 + 1280119023 - ((2 * v119) & 0x989A21DE)) ^ HIDWORD(v254);
  LODWORD(v138) = v43 ^ v254 ^ ((v216 ^ 0x2F)
                                            + 1069380434
                                            + ((2 * (v216 ^ 0x2F) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ v222 ^ *(_DWORD *)(v140 + 4 * (v216 ^ 0x42u)) ^ (v220 - 691945427 - ((2 * v220) & 0xAD83805A));
  BYTE2(v217) = BYTE2(v60) ^ 0x8C;
  v226 = (char *)*(&off_100212870 + (int)v247) - 8;
  v227 = *(_DWORD *)(v39 - 128);
  v228 = (uint64_t)*(&off_100212870 + v227 - 1693);
  LODWORD(v114) = *(_DWORD *)&v226[4 * (v225 ^ 0xA2)];
  v229 = (char *)*(&off_100212870 + v227 - 1842) - 4;
  LODWORD(v119) = (*(_DWORD *)&v229[4 * (BYTE2(v225) ^ 0x9E)] - 438380771) ^ (*(_DWORD *)&v226[4
                                                                                             * ((v43 ^ v254 ^ ((v216 ^ 0x2F) + 82 + ~((2 * (v216 ^ 0x2F) - 2) & 0xA4)) ^ v222 ^ *(_BYTE *)(v140 + 4 * (v216 ^ 0x42u)) ^ (v220 + 45 - ((2 * v220) & 0x5A))) ^ 0xC9)]
                                                                            + 1363805838);
  LODWORD(v120) = *(_DWORD *)&v226[4 * (v60 ^ 0xC8)];
  v230 = v111 ^ 0x351D74B9;
  LODWORD(v43) = *(_DWORD *)&v226[4 * (v111 ^ 0xB9)];
  v231 = *(unsigned int *)(v228 + 4 * (HIBYTE(v225) ^ 0xE7));
  LODWORD(v226) = *(_DWORD *)(v228 + 4 * (BYTE3(v138) ^ 0xB8));
  LODWORD(v111) = *(_DWORD *)(v228 + 4 * ((v111 >> 24) ^ 0x65));
  LODWORD(v228) = (*(_DWORD *)&v229[4 * (BYTE2(v138) ^ 0x38)] - 438380771) ^ (*(_DWORD *)(v228
                                                                                        + 4
                                                                                        * ((v60 ^ 0x898C5DC8) >> 24))
                                                                            + 130351760) ^ ((_DWORD)v114 + 1363805838);
  v232 = (char *)*(&off_100212870 + SHIDWORD(v247)) - 12;
  LODWORD(v119) = (v119 - 1817857322 - ((2 * v119) & 0x274B65AC)) ^ *(_DWORD *)&v232[4 * (BYTE1(v60) ^ 0x61)] ^ ((_DWORD)v111 + 130351760);
  v233 = *(_DWORD *)&v232[4 * (BYTE1(v225) ^ 0xA0)];
  v234 = *(_DWORD *)&v232[4 * (BYTE1(v138) ^ 0xE9)];
  LODWORD(v60) = v228 - 1817857322 - ((2 * v228) & 0x274B65AC);
  v235 = *(_DWORD *)&v229[4 * BYTE2(v217)];
  LODWORD(v228) = *(_DWORD *)&v229[4 * BYTE2(v230)];
  v236 = *(_DWORD *)&v232[4 * BYTE1(v230)] ^ HIDWORD(v249) ^ v60;
  v237 = (char *)*(&off_100212870 + (int)v246) - 4;
  v238 = v245 ^ HIDWORD(v254) ^ (v119 + 1280119023 - ((2 * v119) & 0x989A21DE));
  a1[*(_QWORD *)(v39 - 256)] = v237[BYTE1(v236) ^ 0x99] ^ 0x12;
  v239 = (char *)*(&off_100212870 + v227 - 1840) - 12;
  a1[*(_QWORD *)(v39 - 248)] = v239[BYTE2(v238) ^ 0xADLL] ^ 0xC5;
  v240 = (char *)*(&off_100212870 + SHIDWORD(v245)) - 8;
  a1[*(_QWORD *)(v39 - 208)] = v240[v236 ^ 0xFCLL] ^ 0xEC;
  LODWORD(v119) = v233 ^ v245 ^ (v120 - 2 * ((v120 + 290064014) & 0x13A5B2D7 ^ v120 & 1) - 454051484) ^ ((_DWORD)v226 + 130351760) ^ (v228 - 438380771);
  a1[*(_QWORD *)(v39 - 216)] = v239[BYTE2(v119) ^ 0x8CLL] ^ 0x47;
  v241 = (char *)*(&off_100212870 + v227 - 1659) - 8;
  a1[*(_QWORD *)(v39 - 232)] = (v241[BYTE3(v236) ^ 0xDELL] - 92) ^ 0x1B;
  a1[*(_QWORD *)(v39 - 240)] = ((v239[BYTE2(v236) ^ 0x15] + (v239[BYTE2(v236) ^ 0x15] ^ 0xDA) + 1) ^ 0xFE)
                             + v239[BYTE2(v236) ^ 0x15];
  LODWORD(v43) = HIDWORD(v246) ^ (v235 - 438380771) ^ v234 ^ ((_DWORD)v43 + 1363805838) ^ (v231
                                                                                         - 2
                                                                                         * ((v231 + 130351760) & 0x13A5B2DF ^ v231 & 9)
                                                                                         - 1687505562);
  a1[*(_QWORD *)(v39 - 224)] = v240[v43 ^ 5] ^ 0x1E;
  a1[*(_QWORD *)(v39 - 176)] = (v241[HIBYTE(v238) ^ 0x4ELL] - 92) ^ 0xE6;
  a1[*(_QWORD *)(v39 - 168)] = (v241[BYTE3(v119) ^ 0x9CLL] - 92) ^ 0xB8;
  v242 = *(_QWORD *)(v39 - 184);
  a1[v242] = (v241[(v43 >> 24) ^ 0x67] - 92) ^ 0x91;
  a1[*(_QWORD *)(v39 - 160)] = v240[v119 ^ 0xF2] ^ 0x14;
  a1[*(_QWORD *)(v39 - 192)] = v237[BYTE1(v119) ^ 0x1ELL] ^ 0xB1;
  a1[*(_QWORD *)(v39 - 152)] = v237[BYTE1(v43) ^ 0x33] ^ 0xA8;
  a1[*(_QWORD *)(v39 - 200)] = v237[BYTE1(v238) ^ 0xBCLL] ^ 0x66;
  a1[*(_QWORD *)(v39 - 144)] = v240[v238 ^ 0x9FLL] ^ 0xEC;
  a1[*(_QWORD *)(v39 - 136)] = v239[BYTE2(v43) ^ 0xDLL] ^ 0x8E;
  LODWORD(v226) = (((_DWORD)v242 - 1250841884 - 2 * (((_DWORD)v242 + 16) & 0x3571AADC)) ^ 0xB571AAD4) < a35;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t (**)(int, int, int, int, int, int, int, int, uint64_t, uint64_t), _QWORD, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a36 + 8 * (((2 * (int)v226) | (16 * (int)v226)) ^ (v227 - 563))))(v236, 103, 184, HIDWORD(v246), 329626327, &off_100212870, v245, v231, a2, a3, a1, v245, v246, v247, v248, v249, v250, v251, v252,
           v253,
           v254,
           v255,
           v256,
           v257,
           v258,
           v259,
           v260,
           v261,
           v262,
           v263,
           v264,
           v265,
           v266,
           v267,
           v268,
           v269);
}

void sub_10006BA7C()
{
  JUMPOUT(0x100069810);
}

uint64_t sub_10006BAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,int a44)
{
  uint64_t v44;
  int v45;
  _BOOL4 v46;

  v45 = a11 - ((a44 << ((a43 + 92) ^ 0xF0)) & 0x73F15AF2) - 458389405;
  v46 = ((2 * v45) & 0xF82FEB3C ^ 0x70214A30) + ((a43 + 429) ^ 0x45EF5FA5 ^ v45) - 738304134 != 1343640856;
  return ((uint64_t (*)(void))(*(_QWORD *)(v44 + 8 * ((v46 | (8 * v46)) ^ a43)) - 8))();
}

uint64_t sub_10006BB70(int a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (v2 ^ ((2 * ((a2 + a1 - 2081944990) < 8)) | (4 * ((a2 + a1 - 2081944990) < 8)))))
                            - ((((v2 - 1912287891) & 0x71FB35BFu) + 548) ^ 0x74ELL)))();
}

uint64_t sub_10006BC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                + 8
                                                                                * ((78
                                                                                  * ((int)a3 + a6 - 16 >= (a4 ^ 0x25C) - 1874)) ^ a4)))(a1, a2, a3, a4, v6);
}

uint64_t sub_10006BC3C@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, unsigned int a4@<W3>, unint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL4 v20;
  int v22;
  int v24;

  v9 = (a2 + a1 + a3);
  v10 = v9 + a5 + 1;
  v11 = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3) & 0xF;
  v12 = v7 + v11 - v9;
  v13 = v11 + v7 + 1;
  v14 = v11 - v9 + ((a4 - 600) | 0x109) + 883 + v6 - 1856;
  v15 = v11 + v6 + 3;
  v16 = v11 + v5;
  v17 = v16 - v9 + 4;
  v18 = v16 + 5;
  v20 = v13 > a5 && v12 < v10;
  v22 = v15 > a5 && v14 < v10 || v20;
  if (v18 <= a5 || v17 >= v10)
    v24 = v22;
  else
    v24 = 1;
  return (*(uint64_t (**)(void))(v8 + 8 * ((845 * (v24 ^ 1)) ^ a4)))();
}

uint64_t sub_10006BCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8
                                                                                + 8
                                                                                * (a7 ^ ((8 * (v7 < 0x10)) | (16 * (v7 < 0x10)))))
                                                                    - 16 * (((a7 + 697) | 0x101) ^ 0x794u)
                                                                    + 452))(a1, a2, a3, 0);
}

uint64_t sub_10006BD14@<X0>(int a1@<W4>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int8x16_t v44;
  uint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16x4_t v49;
  int8x16x4_t v50;

  *(_DWORD *)(v43 - 120) = v41 - 1;
  *(_DWORD *)(v43 - 136) = v41 + 14;
  *(_DWORD *)(v43 - 144) = v41 + 13;
  v49.val[1].i64[0] = ((_BYTE)v41 + 5) & 0xF;
  v49.val[1].i64[1] = ((_BYTE)v41 + 4) & 0xF;
  v49.val[2].i64[0] = ((_BYTE)v41 + 3) & 0xF;
  v49.val[2].i64[1] = ((_BYTE)v41 + 2) & 0xF;
  v49.val[3].i64[0] = ((_BYTE)v41 + 1) & 0xF;
  v49.val[3].i64[1] = v41 & 0xF;
  v44.i64[0] = 0x7777777777777777;
  v44.i64[1] = 0x7777777777777777;
  v45 = (v41 + v37);
  v49.val[0].i64[0] = ((_BYTE)v41 + (_BYTE)v37) & 0xF;
  v49.val[0].i64[1] = ((_BYTE)v41 + 6) & 0xF;
  v46.i64[0] = vqtbl4q_s8(v49, (int8x16_t)xmmword_1001B7290).u64[0];
  v50.val[0].i64[1] = *(_DWORD *)(v43 - 136) & 0xF;
  v50.val[1].i64[1] = ((_BYTE)v41 + 12) & 0xF;
  v50.val[2].i64[1] = ((_BYTE)v41 + 10) & 0xF;
  v50.val[3].i64[1] = ((_BYTE)v41 + 8) & 0xF;
  v50.val[0].i64[0] = *(_DWORD *)(v43 - 120) & 0xF;
  v50.val[1].i64[0] = *(_DWORD *)(v43 - 144) & 0xF;
  v50.val[2].i64[0] = ((_BYTE)v41 + 11) & 0xF;
  v50.val[3].i64[0] = ((_BYTE)v41 + 9) & 0xF;
  v46.i64[1] = vqtbl4q_s8(v50, (int8x16_t)xmmword_1001B7290).u64[0];
  v47 = vrev64q_s8(vmulq_s8(v46, v44));
  *(int8x16_t *)(a2 - 15 + v45) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v40 + (v45 & 0xF) - 15), *(int8x16_t *)(a2 - 15 + v45)), veorq_s8(*(int8x16_t *)((v45 & 0xF) + v39 - 13), *(int8x16_t *)((v45 & 0xF) + v38 - 11))), vextq_s8(v47, v47, 8uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a37
                                        + 8
                                        * ((1996 * (((a1 + 2138467707) & 0x808990FF ^ 0x5B) == (v42 & 0xFFFFFFF0))) ^ a1))
                            - 4))();
}

uint64_t sub_10006BE9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8
                                             * (int)(((((v5 + 1048000272) & 0xC188CFE6) - 1595) * (v4 != a4)) ^ v5))
                            - (((v5 + 469) | 2u) ^ 0x22ELL)))();
}

uint64_t sub_10006BEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  char v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9
                                                                                                  + 8 * (a7 ^ (7 * ((v8 & 8) == 0))))
                                                                                      - ((643 * (a7 ^ 0x221)) ^ 0xCBu)
                                                                                      + 1854))(a1, a2, a3, a4, (v7 - a4), 643);
}

uint64_t sub_10006BF2C@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  char v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  char v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int8x16x4_t v56;

  *(_DWORD *)(v48 - 128) = v47;
  *(_DWORD *)(v48 - 136) = v45;
  v49 = v45 & 0xFFFFFFF8;
  *(_DWORD *)(v48 - 144) = v49;
  *(_DWORD *)(v48 - 120) = 8 - v49;
  v50 = -a4;
  v51 = v46 + a1 + a2;
  v52 = v40;
  v53 = 183 * (v40 ^ 0x78Au);
  *(_QWORD *)(v48 - 152) = v53;
  v54 = (a1 + a2 + a3 + v50);
  v56.val[0].i64[0] = v54 & (v53 - 534);
  v56.val[0].i64[1] = (v51 + 6 + (_BYTE)v50) & 0xF;
  v56.val[1].i64[0] = (v51 + 5 + (_BYTE)v50) & 0xF;
  v56.val[1].i64[1] = (v51 + 4 + (_BYTE)v50) & 0xF;
  v56.val[2].i64[0] = (v51 + 3 + (_BYTE)v50) & 0xF;
  v56.val[2].i64[1] = (v51 + 2 + (_BYTE)v50) & 0xF;
  v56.val[3].i64[0] = (v51 + 1 + (_BYTE)v50) & 0xF;
  v56.val[3].i64[1] = (v44 + (_BYTE)v50) & 0xF;
  *(int8x8_t *)(a5 - 7 + v54) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v43 + v56.val[0].i64[0] - 7), *(int8x8_t *)(a5 - 7 + v54)), veor_s8(*(int8x8_t *)(v56.val[0].i64[0] + v42 - 5), *(int8x8_t *)(v56.val[0].i64[0] + v41 - 3))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v56, (int8x16_t)xmmword_1001B72A0), (int8x8_t)0x7777777777777777)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a40
                                                     + 8
                                                     * (((2 * (*(_DWORD *)(v48 - 120) == v50)) | (4
                                                                                                * (*(_DWORD *)(v48 - 120) == v50))) ^ v52))
                                         - 4))((__n128)xmmword_1001B72A0);
}

void sub_10006C074()
{
  JUMPOUT(0x10006BFA0);
}

uint64_t sub_10006C07C()
{
  uint64_t v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)((((((*(_QWORD *)(v0 - 152) + 477) | 0x340) ^ 0xFFFFFE42)
                                                + ((*(_QWORD *)(v0 - 152) + 27) | 0x502))
                                               * (*(_DWORD *)(v0 - 136) == *(_DWORD *)(v0 - 144))) | *(_QWORD *)(v0 - 152)))
                            - 4))();
}

uint64_t sub_10006C0CC@<X0>(int a1@<W4>, int a2@<W7>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = (a1 + v4);
  *(_BYTE *)(a3 + v9) ^= *(_BYTE *)(v7 + (v9 & 0xF)) ^ *(_BYTE *)((v9 & 0xF) + v6 + 2) ^ *(_BYTE *)((v9 & 0xF) + v5 + 4) ^ (119 * (v9 & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((a1 - 1 == v3) | (8 * (a1 - 1 == v3))) ^ (a2 - 1792))) - 12))();
}

void sub_10006C12C()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 191845095)
    v1 = -1262737048;
  else
    v1 = 1262711472;
  *(_DWORD *)(v2 + 32) = v1;
}

void sub_10006C190(uint64_t a1)
{
  int v1;

  v1 = 1178560073 * ((-2 - ((a1 | 0x20C3A6CC) + (~(_DWORD)a1 | 0xDF3C5933))) ^ 0x65A82151);
  __asm { BR              X10 }
}

uint64_t sub_10006C234@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (int)((765
                                               * (((107 * (v1 & 0xEF ^ 0xE5)) ^ (v2 == ((3 * (v1 & 0xAAEEDFEF ^ 0x583)) ^ 0x4D2BBA0))) & 1)) ^ v1 & 0xAAEEDFEF))
                            - 8))();
}

uint64_t sub_10006C2AC@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * (a1 + 478)) - 4))();
}

uint64_t sub_10006C3C4@<X0>(char a1@<W4>, int a2@<W6>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(a3
                                        + 8
                                        * (((((v3 == 0) ^ ((v4 - 8) ^ (v4 + a1))) & 1) * a2) ^ v4))
                            - 4))();
}

uint64_t sub_10006C3FC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((23 * (v1 != ((v2 - 341) ^ 0x499))) ^ v2)) - 8))();
}

uint64_t sub_10006C428@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v6 = (((v5 - 493) | 0x98) ^ (v2 - 918)) + v3;
  v7 = v3 + 1;
  *(_DWORD *)(*(_QWORD *)(v4 - 0xCDF342D76DC359FLL) + 4 * v6) = a1;
  *(_DWORD *)(v4 - 0xCDF342D76DC35A3) = v7;
  if (v2 + v7 + 1 >= 0)
    v8 = v2 + v7 + 1;
  else
    v8 = ~(v2 + v7);
  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * ((951
                                          * ((int)((v8 ^ 0xF25769E6)
                                                 + 1575747584
                                                 + (((((v5 - 493) | 0x98) + 100) ^ 0xE4AED731) & (2 * v8))
                                                 + v2) > (int)((((((v5 - 493) | 0x98) + 100) ^ 0x5F7) + 911) ^ 0xFFFFFB66))) ^ (((v5 - 493) | 0x98) + 100)))
                            - 12))();
}

uint64_t sub_10006C4FC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  _QWORD *v2;
  int v3;
  unsigned int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((100 * (*(_DWORD *)(*v2 + 4 * v4) != v1)) ^ v3))
                            - 133 * (v3 ^ 0x49Bu)
                            + 254))();
}

uint64_t sub_10006C538@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((951
                                          * (v2 + v3 + 100 - 1278 + v1 > (int)((((v3 + 100) ^ 0x5F7) + 911) ^ 0xFFFFFB66))) ^ (v3 + 100)))
                            - 12))();
}

_DWORD *sub_10006C57C(_DWORD *result)
{
  int v1;
  int v2;
  _DWORD *v3;
  int v4;
  int v5;

  if ((v2 + v1) >= 0x7FFFFFFF)
    v5 = -1601776692 - v4;
  else
    v5 = v4;
  *v3 = v5;
  *result = 163590379;
  return result;
}

uint64_t sub_10006C5C0(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;

  v1 = 1224239923 * (((a1 | 0x8C9528F6) - (_DWORD)a1 + (a1 & 0x736AD709)) ^ 0x7E26D521);
  v2 = a1[4] - v1;
  v3 = *a1 ^ v1;
  v5 = v3 - 216442546;
  v4 = v3 - 216442546 < 0;
  LODWORD(v6) = 216442546 - v3;
  if (v4)
    v6 = v6;
  else
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_100212870 + (int)(v2 ^ 0x161))
                                        + 8 * (int)((574 * (v6 != ((2 * (_DWORD)v6) & 0xDE93CDA0))) ^ v2)
                                        - 4)
                            - 4))();
}

void sub_10006C678(int a1@<W8>)
{
  uint64_t v1;
  int v2;

  **(_DWORD **)(v1 - 0xCDF342D76DC359FLL) = (v2 - 280369456) ^ 0x34D8B532;
  *(_DWORD *)(v1 - 0xCDF342D76DC35A3) = a1 + 1;
}

uint64_t sub_10006C6D0(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0xCDF342D76DC35A3);
  v4 = v2 - 1346595302;
  v3 = v2 - 1346595302 < 0;
  v5 = 1346595302 - v2;
  if (!v3)
    v5 = v4;
  v1 = (*(_DWORD *)a1 - 628203409 * (a1 ^ 0x82880C33) + 7) | 0x40;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_100212870 + v1 - 265)
                                        + 8
                                        * ((1340
                                          * ((v5 ^ 0x45FDF947)
                                           - 1174272328
                                           + ((v1 - 1946423100) & (2 * v5)) < 0x7FFFFFFF)) ^ v1)
                                        - 4)
                            - ((3 * (v1 ^ 0x14B) + 1335412748) & 0xB06737F3 ^ 0x18BLL)))();
}

uint64_t sub_10006C7E4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  _QWORD *v6;
  unsigned int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(a6 + 8 * (((*(_DWORD *)(*v6 + 4 * v7) != ((a5 + 71) ^ a3)) * a4) ^ a5))
                            - 8))();
}

void sub_10006C818()
{
  JUMPOUT(0x10006C7A4);
}

uint64_t sub_10006C820(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(_DWORD *)(result + 4) = a7;
  return result;
}

void sub_10006C828(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_10006C878(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  _BOOL4 v4;

  v4 = **(unsigned __int8 **)(a2 + 8) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((2 * v4) | (8 * v4)) ^ v3)) - 8))();
}

uint64_t sub_10006C8A4()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  v2 = v1 - ((2 * v1 + 800318218) & 0x40FE2512) - 1202125810;
  v3 = ((2 * v2) & 0xDBD3FF9A ^ 0x40D22512) + (v2 ^ 0x4D96ED44) - 4200896 == 1839851021;
  return (*(uint64_t (**)(void))(v0 + 8 * (((2 * v3) | (v3 << 6)) ^ 0x102u)))();
}

uint64_t sub_10006C950(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;

  *(_DWORD *)(v4 + 1424) = (((v3 + 335675034) | 0xCA983909) ^ 0x413D105B) + v2;
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 520) = *(_QWORD *)(a2 + 8) + 1;
  return 0;
}

void sub_10006CCDC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD v6[2];
  uint64_t v7;

  v1 = *(_DWORD *)(a1 + 24) - 1225351577 * ((2 * (a1 & 0x2B9C6F1D) - a1 + 1415811298) ^ 0x77F948F4);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 - 0xCDF342D76DC35A3) - 1346595302 >= 0)
    v3 = *(_DWORD *)(v2 - 0xCDF342D76DC35A3) - 1346595302;
  else
    v3 = 1346595302 - *(_DWORD *)(v2 - 0xCDF342D76DC35A3);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) - 0xCDF342D76DC35A3) - 1346595302 >= 0)
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0xCDF342D76DC35A3) - 1346595302;
  else
    v4 = 1346595302 - *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0xCDF342D76DC35A3);
  v6[1] = (460628867 * ((((v6 | 0xB762958E) ^ 0xFFFFFFFE) - (~v6 | 0x489D6A71)) ^ 0x40BE80C)) ^ (v1 - 143);
  v7 = v2;
  sub_10005BDE0((uint64_t)v6);
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = v3;
  __asm { BR              X14 }
}

uint64_t sub_10006CE60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _BOOL4 v14;

  v10 = v3 - 1749009102;
  v11 = 4 * (v6 + v4);
  v12 = ((v2 - 660) | 0x84)
      - 148
      + (*(_DWORD *)(*(_QWORD *)(v9 - 0xCDF342D76DC359FLL) + v11) ^ v5)
      - (*(_DWORD *)(*(_QWORD *)(v8 - 0xCDF342D76DC359FLL) + v11) ^ v5);
  *(_DWORD *)(*(_QWORD *)(a1 - 0xCDF342D76DC359FLL) + v11) = v12 + v5 - (v7 & (2 * v12));
  v14 = v6 + 728420066 < 398474546 && v6 + 728420066 >= v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1684 * v14) ^ v2)) - 8))();
}

uint64_t sub_10006CF74()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v6;

  v4 = (((v1 - 127) | 0x400) ^ 0x46D9CC83) + v2;
  v6 = v4 <= 858732262 && v4 >= (int)((((v1 - 147) | 0x304) ^ 0xB32F35E2) + v3);
  return (*(uint64_t (**)(void))(v0 + 8 * ((126 * v6) ^ v1)))();
}

uint64_t sub_10006CFD4()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  signed int v4;
  int v5;
  int v6;

  v4 = v1 - 271 + v2 + ((v1 + 2020531946) & 0x87911FDB) - 1054228342;
  v5 = (v3 > 0x5280CB43) ^ (v4 < -1384172356);
  v6 = v4 < (int)(v3 + 763311292);
  if (v5)
    v6 = v3 > 0x5280CB43;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (v1 ^ (v6 << 7))) - 8))();
}

uint64_t sub_10006D054@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;

  v14 = *(_DWORD *)(*(_QWORD *)(v13 - 0xCDF342D76DC359FLL) + 4 * (v10 + ((v6 + 43) ^ (v8 + 250))));
  *(_DWORD *)(*(_QWORD *)(a2 - 0xCDF342D76DC359FLL) + 4 * (v10 + ((v6 + 43) ^ (v8 + 250)))) = v3
                                                                                              + 429911254
                                                                                              + (v14 ^ 0x246EAC1D)
                                                                                              + v9
                                                                                              - (v11 & (2 * (v3 + 429911254 + (v14 ^ 0x246EAC1D))));
  v15 = v4 + v10 + 1506;
  v16 = (v12 > a1) ^ (v15 < v5);
  v17 = v15 < v7;
  if (v16)
    v17 = v12 > a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1742 * !v17) ^ v6)) - 8))();
}

uint64_t sub_10006D14C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (((v1 == ((2 * v2) ^ 0x23Cu) + 0x5354C418E6600EFALL)
                                          * (((v2 - 222) | 0x106) ^ 0x311)) ^ v2))
                            - 4))();
}

uint64_t sub_10006D19C()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((1752 * (v2 + v3 - 1 < (v1 ^ 0x7FFFF8E1 ^ ((v1 - 814) | 0x430u)))) ^ v1))
                            - 12))();
}

uint64_t sub_10006D1E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  _BOOL4 v6;
  int v7;

  v6 = v4 - 1838595 < -331784114;
  v7 = (**(_DWORD **)(a1 - 0xCDF342D76DC359FLL) ^ 0x246EAC1D) + 1;
  **(_DWORD **)(a1 - 0xCDF342D76DC359FLL) = v7 + v3 - (v5 & (2 * v7));
  if (v4 - 1838595 >= -331784114)
    v6 = v4 - 1838595 > 1815699535;
  return ((uint64_t (*)(_QWORD, uint64_t))(*(_QWORD *)(v1 + 8 * ((975 * !v6) ^ (v2 - 847))) - 12))(v2 ^ 0x14Fu, 335);
}

void sub_10006D2AC()
{
  JUMPOUT(0x10006D240);
}

uint64_t sub_10006D2BC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;

  v12 = 4 * (v9 + v7);
  v13 = v3 + 429911105 + (*(_DWORD *)(*(_QWORD *)(v11 - 0xCDF342D76DC359FLL) + v12) ^ v8) + 148;
  *(_DWORD *)(*(_QWORD *)(a2 - 0xCDF342D76DC359FLL) + v12) = v13 + v8 - ((v13 << (((a1 - 6) & 0x15) - 20)) & v10);
  v15 = v9 + v4 > v5 || v9 + v4 < v6;
  return (*(uint64_t (**)(void))(v2 + 8 * ((1007 * v15) ^ (a1 - 539))))();
}

uint64_t sub_10006D3A4()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((82 * ((v2 + v3 - 1) < 0x7FFFFFFF)) ^ (v1 - 123)))
                            - (v1 ^ 0x56Eu)
                            + 346))();
}

uint64_t sub_10006D3FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(_DWORD *)(*(_QWORD *)(a1 - 0xCDF342D76DC359FLL)
                                                       + 4
                                                       * (v3 + v5 + ((v2 - 1105681761) & 0x41E75FB7 ^ 0x2EBu) - 351)) == v4)
                                          * ((((v2 - 1105681761) & 0x41E75FB7) + 123) ^ 0x183)) ^ (v2 - 1105681761) & 0x41E75FB7))
                            - 4))();
}

uint64_t sub_10006D46C()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (((v4 + v3 + ((v2 - 221) | 0x334u) - 951 > 0x7FFFFFFE) * v1) ^ v2))
                            - 4))();
}

uint64_t sub_10006D4C0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (((*(_DWORD *)(v1 + 4 * (v3 + (v2 ^ 0x2EBu) + v5 - 351)) == v4)
                                          * ((v2 + 123) ^ 0x183)) ^ v2))
                            - 4))();
}

void sub_10006D504(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  *(_DWORD *)(a1 - 0xCDF342D76DC35A3) = (((v3 + v2) * (v1 - 1308797827)) ^ 0xF753E9F6)
                                        + 1492090864
                                        + ((2 * (v3 + v2) * (v1 - 1308797827)) & 0xEEA7D3EC);
}

uint64_t sub_10006D590(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v1 = 535753261 * ((a1 - 1922189914 - 2 * (a1 & 0x8D6DB5A6)) ^ 0x8799BB89);
  v2 = *(_DWORD *)(a1 + 16) + v1;
  v3 = *(_DWORD *)a1 ^ v1;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0xCDF342D76DC35A3);
  v6 = v4 - 1346595302;
  v5 = v4 - 1346595302 < 0;
  v7 = 1346595302 - v4;
  if (v5)
    v8 = v7;
  else
    v8 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_100212870 + (v2 ^ 0x38))
                                        + 8
                                        * ((656 * ((v3 - 1436435821) >= 4 * (unint64_t)v8)) ^ v2)
                                        - 4)
                            - 12))();
}

uint64_t sub_10006D654()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (((((v2 - 185) | 0x390) - 486) * (v1 != 1436435821)) ^ v2)) - 12))();
}

uint64_t sub_10006D690(uint64_t a1)
{
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * (v2 - 313)) - ((4 * (v2 - 313)) ^ 0x98Cu) + 964))(a1);
}

uint64_t sub_10006D70C@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, int a4@<W8>)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  int v8;

  *(_BYTE *)(*(_QWORD *)(a1 + 8) + (a3 + a4)) = (a2 ^ v6) >> v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1464 * (a3 + ((v8 + 1473214447) & 0xA83086D7) - 664 == v5)) ^ v8))
                            - 8))();
}

uint64_t sub_10006D768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5 + 8 * (((v6 != 24) * ((a5 + 66) ^ 0x297)) ^ a5))
                                          - ((4 * a5) ^ 0x98Cu)
                                          + 964))(a1);
}

uint64_t sub_10006D7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v8;

  v6 = (((a2 - 9) | 0x100) ^ 0x3C2D9B5D) + v5;
  v8 = v6 > 475335572 || v6 < v4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (int)((1356 * v8) ^ a2))
                                                                     - 12))(a1, a2, 3683734498, v3);
}

uint64_t sub_10006D7F8@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  int v3;
  _QWORD *v4;
  int v5;

  return sub_10006D70C(a1, *(_DWORD *)(*v4 + 4 * (int)(((a2 - 1750487774) & 0x685653D4 ^ 0x9FD88F28) + v5)), v3, a3);
}

uint64_t sub_10006D838(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 32) = v1;
  return result;
}

void sub_10006D840(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10006D890@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((101 * (v1 != 1747324538)) ^ 0x435u)) - 12))();
}

uint64_t sub_10006D8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  *(_BYTE *)(a1 + (v3 - 1228397637) + 4) = (**(_BYTE **)(a2 + 8) ^ 0xBF)
                                                       + 2 * (**(_BYTE **)(a2 + 8) & 0x3F)
                                                       + 101;
  v4 = *(_DWORD *)(a2 + 4) + 1642477401;
  v5 = v4 < 0xCA0C45D3;
  v6 = v4 > 0xCA0C45D4;
  if (v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((1799 * !v6) ^ 0x332u)) - 12))();
}

void sub_10006D980()
{
  JUMPOUT(0x10006D904);
}

uint64_t sub_10006D988()
{
  return 4294925278;
}

uint64_t sub_10006D9C4(_DWORD *a1)
{
  unsigned int v1;
  _BOOL4 v2;

  v1 = 1178560073 * ((2 * (a1 & 0x7B1A53C3) - (_DWORD)a1 - 2065322948) ^ 0x3E71D45E);
  v2 = ((*a1 - v1) ^ 0xB4BC2968) - 1 > 0x62;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_100212870 + (int)(a1[1] + v1 - 1067))
                                        + 8 * (int)(((8 * v2) | (16 * v2)) ^ (a1[1] + v1))
                                        - 4)
                            - ((a1[1] + v1 + 1315264261) & 0xB19AA77F)
                            + 869))();
}

uint64_t sub_10006DA68()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((630 * ((v1 - 379) ^ 0x373) + 440) * ((v0 - 100) > 0x9B)) ^ (v1 - 379))))();
}

uint64_t sub_10006DAA4@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  int v2;
  int v3;
  int v4;

  if (v2 + 49998 < ((v4 + 379) ^ 0x1BD2u))
    v3 = a2;
  *(_DWORD *)(*(_QWORD *)(result + 8) - 0x7EC954F5752627A1) = v3;
  return result;
}

uint64_t sub_10006DB1C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))*(&off_10020E2D0 + ((30 * (*(_DWORD *)(a2 + 4) == 1747324551)) ^ 0x328u)))(4294925278);
}

uint64_t sub_10006DB60@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a2 + 96) + 448) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 12);
  return (*(uint64_t (**)(_QWORD))(v2 + 8720))(0);
}

void sub_10006DBD4()
{
  JUMPOUT(0x10006DBA8);
}

void sub_10006DBE0(uint64_t a1)
{
  int v1;
  BOOL v4;

  v4 = *(_QWORD *)(a1 + 40) == 0x335F4D7B17DD4E17
    || *(_QWORD *)(a1 + 16) == 0x53090DC2622003FCLL
    || *(_QWORD *)a1 == 0x5A178A95705CCB00;
  v1 = *(_DWORD *)(a1 + 8) + 535753261 * ((((2 * a1) | 0xD63BF148) - a1 - 1797126308) ^ 0x61E9F68B);
  __asm { BR              X11 }
}

uint64_t sub_10006DCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  int v19;
  uint64_t v20;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20
                                                                                         + 8
                                                                                         * (((*(_DWORD *)(a19 - 0x335F4D7B17DD4DFFLL) != -1262737048)
                                                                                           * (v19 - 736)) ^ v19)))(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10006DD40(__n128 a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  __n128 v28;
  __n128 v29;
  _BOOL4 v30;
  unsigned int v31;
  int v32;
  _BOOL4 v33;
  unsigned int v35;

  v27 = 4 * (v23 ^ 0x34E);
  v35 = *(_DWORD *)(a23 - 0x335F4D7B17DD4E07) - 2096391152;
  v28.n128_u64[0] = 0x7272727272727272;
  v28.n128_u64[1] = 0x7272727272727272;
  v29.n128_u64[0] = 0x3939393939393939;
  v29.n128_u64[1] = 0x3939393939393939;
  *(_DWORD *)(v26 - 140) = v25 ^ 0x3DB;
  v30 = v35 < 0xB37D8BA9;
  v31 = ((8 * (v27 ^ 0x198)) ^ 0x6E6DDA6C) + 1158655773;
  v32 = v30 ^ (v31 < 0xB37D8BA9);
  v33 = v31 < v35;
  if (!v32)
    v30 = v33;
  return (*(uint64_t (**)(__n128, __n128, __n128, __n128, __n128, __n128))(v24
                                                                                   + 8
                                                                                   * ((v30 * (v27 ^ 0x93)) ^ v27 ^ 0x198)))(a1, a2, a3, a4, v28, v29);
}

uint64_t sub_10006DF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,unsigned int a27)
{
  int v27;
  uint64_t v28;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v28 + 8 * ((v27 ^ 0x5C0) - 793)) - 8))(((14 * (v27 ^ 0x6B9)
                                                                                                  - 669) ^ 0x20000241) & a27);
}

uint64_t sub_10006EC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  unsigned int v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;

  *(_BYTE *)(*v20 + (v17 + v21)) = -71;
  v22 = v17 + 20 * ((v18 - 359) ^ 0x191) + 410545092;
  v23 = ((a17 - 1429804804) < 0x1BB2BA18) ^ (v22 < 0x1BB2BA18);
  v24 = v22 < a17 - 1429804804;
  if (v23)
    v25 = (a17 - 1429804804) < 0x1BB2BA18;
  else
    v25 = v24;
  return ((uint64_t (*)(void))(*(_QWORD *)(v19 + 8 * ((97 * v25) ^ (v18 - 359))) - 4))();
}

uint64_t sub_10006ED0C()
{
  int v0;
  int v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;

  v9 = v4 < v2;
  *(_BYTE *)(*v7 + (v1 + 1 + v8)) = 57;
  v10 = v3 + v1 + 801;
  v11 = v9 ^ (v10 < v2);
  v12 = v10 < v4;
  if (!v11)
    v9 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((v9 * v5) ^ v0)) - ((v0 - 441) | 0x320u) + 796))();
}

void sub_10006ED70(int a1@<W8>)
{
  _QWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 - 0x53090DC2622003FCLL) = *v1;
  *(_DWORD *)(v4 - 0x5A178A95705CCB00) = a1;
  *v1 = 0;
  *(_QWORD *)(v7 - 0x335F4D7B17DD4E0FLL) = 0x89176B4089176B4;
  *v2 = 812773273;
  *(_DWORD *)(v7 - 0x335F4D7B17DD4E03) = (((*(_DWORD *)(v7 - 0x335F4D7B17DD4E03) & 0xFFFFFFFE ^ 0xD0109C84) & 0x89F1743A)
                                          - (*(_DWORD *)(v7 - 0x335F4D7B17DD4E03) & 0xFFFFFFFE ^ 0xD0109C84 | 0x89F1743B)) ^ 0xA61E1740;
  *(_DWORD *)(v6 + 28) = *v5;
}

void sub_10006EE7C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) + 1759421093 * ((a1 - 1364022623 - 2 * (a1 & 0xAEB2AAA1)) ^ 0x1DCF1AF5);
  __asm { BR              X8 }
}

uint64_t sub_10006EF34()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v1 - 1268)))(200, 2354554103) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((984 * v3) ^ v1)) - (((v1 - 882) | 0x8Bu) ^ ((v1 ^ 0x739u) - 8))))();
}

uint64_t sub_10006EF90(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 8 * (v6 - 626)))(a1, 0);
  if ((_DWORD)result == 16)
  {
    v5 = -848337871;
    goto LABEL_7;
  }
  if ((_DWORD)result == 12)
  {
LABEL_7:
    result = (*(uint64_t (**)(uint64_t))(v4 + 8 * (v2 ^ 0x2F5)))(a1);
    goto LABEL_8;
  }
  if ((_DWORD)result)
  {
    v5 = 1662545588;
    goto LABEL_7;
  }
  *v3 = a1;
  v5 = 872193834;
LABEL_8:
  *(_DWORD *)(v1 + 12) = 490531797 * v5 - 925105138;
  return result;
}

void sub_10006F024(uint64_t a1)
{
  __asm { BR              X8 }
}

void sub_10006F14C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  _BOOL4 v15;

  v12 = 94 * ((347 * ((a4 + 2) ^ 0x8ECC0A64) - 297) ^ 0x18A);
  v13 = **(unsigned __int8 **)(a8 + 80)
      - (**(unsigned __int8 **)(v10 + 8 * (a4 ^ (a4 - 2))) ^ ((v12 ^ (a4 - 110)) - 43));
  v15 = (v13 ^ 0x7B9D9F37) + ((2 * v13) & 0xF73B3E6E) - 1904214528 != v9 || v11 == 3902759439;
  __asm { BR              X15 }
}

uint64_t sub_1000702E0@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(v2 + a1 + v4 + ((v5 - 1129) | 0x681u)) = *(_BYTE *)(a2 + a1 + v4 + ((v5 - 1129) | 0x681u));
  return (*(uint64_t (**)(void))(v6 + 8 * ((235 * (a1 - 1 == v3)) ^ v5)))();
}

void sub_100070320(uint64_t a1)
{
  int v1;
  _DWORD v2[2];
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 4) ^ (1755732067 * (((a1 | 0x83D72B3C) - (a1 & 0x83D72B3C)) ^ 0x5D1196E7));
  v3 = *(_QWORD *)(a1 + 8);
  v2[0] = v1 + 628203409 * ((((2 * v2) | 0xD355565C) - v2 + 374691026) ^ 0x6B22A71D) - 398;
  sub_10006C6D0((uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_100070458@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _BOOL4 v7;

  v5 = ((157 * (v1 ^ 0x453)) ^ 0xC3014F10)
     + (((v4 ^ v3) >> 4) & 0xBADBDDC ^ 0xB018148)
     + (((v4 ^ v3) >> 5) ^ 0x3A773E4A);
  v7 = v5 > 0xD82AEE && v5 < v2 + 14166767;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((v7 * (v1 - 951)) ^ v1)) - 12))();
}

uint64_t sub_1000704D8@<X0>(uint64_t a1@<X8>)
{
  int v1;
  char v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8 * ((115 * ((((v1 - 982) ^ ((v2 & 0x1F) == 2)) & 1) == 0)) ^ (v1 + 480)))
                            - 8))();
}

uint64_t sub_100070520@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  _BOOL4 v3;

  v3 = (((v2 | 0x144) + 333) ^ 0x3DD6DDFDu) + v1 >= (((v2 | 0x144) + 587816122) & 0xDCF6A5D7) + 2147482537;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((8 * v3) | (32 * v3)) ^ (v2 | 0x144))) - 12))();
}

void sub_100070590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v5;
  int v6;
  char v7;
  unsigned int v8;
  int v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  v14 = *(_QWORD *)(v12 - 0xCDF342D76DC359FLL);
  v15 = (*(_DWORD *)(v14 + 4 * (v13 - 1)) ^ v8) >> v7;
  v16 = 4 * (v5 + 1037491949);
  *(_DWORD *)(v14 + v16) = v15 + v8 - ((v15 << ((5 * (a5 ^ 0xCB)) ^ 0x10)) & v9);
  v17 = v5 + v6 - (*(_DWORD *)(*(_QWORD *)(v12 - 0xCDF342D76DC359FLL) + v16) == v8);
  v18 = v17 - 1910881489;
  v19 = 309104797 - v17;
  if ((*v10 + v11) < 0x7FFFFFFF)
    v19 = v18;
  *v10 = v19;
}

void sub_100070864(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000708C0()
{
  return 4294925278;
}

uint64_t sub_100070A3C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)a1 ^ (1755732067 * ((a1 & 0xECFD530 | ~(a1 | 0xECFD530)) ^ 0x2FF69714));
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_100212870 + v1 - 425)
                                        + 8 * ((1960 * (*(_QWORD *)(a1 + 8) != 0x335F4D7B17DD4E17)) ^ v1)
                                        - 4)
                            - 12))();
}

uint64_t sub_100070ACC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8 * ((1181 * (*(_DWORD *)(v2 - 0x335F4D7B17DD4DFFLL) == -1262737048)) ^ v0))
                            - 12))();
}

uint64_t sub_100070B0C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v3 = *(_DWORD *)(v2 - 0x335F4D7B17DD4E07) - 342894046;
  v4 = *(_DWORD *)(v2 - 0x335F4D7B17DD4E0BLL) + 326128391;
  v5 = v4 < 0x1C01C9BB;
  v6 = v3 < v4;
  if (v3 < 0x1C01C9BB != v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1402 * v6) ^ v0)) - 12))();
}

uint64_t sub_100070B98@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  _DWORD *v2;

  *v2 = a2;
  *(_DWORD *)(result + 16) = 1262711389;
  return result;
}

void sub_100070BAC()
{
  int v0[10];

  v0[1] = 108757529 * ((v0 + 70320331 - 2 * (v0 & 0x43100CB)) ^ 0xE4AD62E0) - 504207030;
  sub_100081E5C(v0);
  __asm { BR              X8 }
}

uint64_t sub_100070C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, unsigned int a19, int a20)
{
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v23 = 1759421093 * ((((2 * &a17) | 0xD67609A2) - &a17 - 1799029969) ^ 0xD846B485);
  HIDWORD(a17) = v23 ^ 0x7C8B1567;
  a18 = v23 + 276;
  a20 = v23 ^ 0x65CC81C5;
  LODWORD(a17) = v23 ^ 0x69CCD154;
  ((void (*)(unint64_t **))(*(_QWORD *)(v20 + 1256) - 8))(&a17);
  LODWORD(a10) = a19;
  a19 = 1224
      - 460628867 * ((1372156574 - (&a17 | 0x51C9729E) + (&a17 | 0xAE368D61)) ^ 0xE2A00F1C);
  a17 = &STACK[0x1A8FA111108FB342];
  sub_10007FB7C((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 8 * ((119 * (a18 == -1262737048)) ^ v21)) - 12))(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10);
}

uint64_t sub_100070DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, unsigned int a19, uint64_t a20,unsigned int a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;

  v28 = 1178560073 * ((2 * (&a18 & 0x1B8F79F8) - &a18 + 1685095939) ^ 0xDEE4FE61);
  a20 = a14;
  a21 = v28 ^ 0x10C;
  a19 = v25 - ((2 * v25) & 0x4C55314) + 40020362 + v28;
  ((void (*)(int *))(*(_QWORD *)(v22 + 88) - 12))(&a18);
  v29 = 1178560073
      * ((((&a18 | 0x611722B4) ^ 0xFFFFFFFE) - (~&a18 | 0x9EE8DD4B)) ^ 0x247CA529);
  a22 = v23;
  a21 = ((v24 ^ 0x58DFEFFE) - 1083195602 + ((2 * v24) & 0xB1BFDFFC)) ^ v29;
  a20 = a14;
  a19 = v29 + 1074;
  sub_10003EE58((uint64_t)&a18);
  v30 = 1178560073 * ((&a18 & 0x52B68846 | ~(&a18 | 0x52B68846)) ^ 0x17DD0FDB);
  a22 = a12;
  a21 = v30 ^ ((a11 ^ 0x787FFF7C) - 1613779024 + ((2 * a11) & 0xF0FFFEF8));
  a20 = a14;
  a19 = v30 + 1074;
  v31 = ((uint64_t (*)(int *))sub_10003EE58)(&a18);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v27 + 8 * ((1757 * (a18 == v26)) ^ 0x88u)) - 8))(v31);
}

uint64_t sub_100070FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, uint64_t a18, unsigned int a19, unsigned int a20,unsigned int a21,int a22)
{
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  if (a10 == 70636352)
    v26 = -1217699515;
  else
    v26 = -39006090;
  v27 = 460628867 * ((((2 * &a17) | 0xB5E40458) - &a17 + 621673940) ^ 0x96648051);
  a19 = v27 - 1029779078;
  a20 = v27 + v25 - 2024873219;
  a21 = v26 - v27;
  a17 = &STACK[0x37C70005964C0FF5];
  a18 = a13;
  v28 = sub_100081858((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24
                                                      + 8
                                                      * (((a22 == v23) * (v22 + ((v25 + 444) | 0x108) - 295)) ^ v25))
                                          - 8))(v28);
}

uint64_t sub_10007109C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  int v10;
  unsigned int v11;
  uint64_t v12;

  return (*(uint64_t (**)(uint64_t))(v12 + 8 * ((((179 * (v11 ^ 0x34E)) ^ 0x77B) * (a10 == v10)) ^ v11)))(a1);
}

uint64_t sub_10007112C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, unsigned int a11, char *a12, _BYTE *a13, uint64_t a14, unsigned int a15)
{
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  void (*v22)(unsigned int *);
  uint64_t v23;

  a12 = &a10 + a1;
  a13 = a5;
  a11 = (v17 - 278) ^ (((2 * (&a11 & 0x2EAC7FB8) - &a11 - 783056830) ^ 0xBCA7984B) * v15);
  v22(&a11);
  a15 = (v17 + 267) ^ (1225351577
                     * ((((2 * &a11) | 0xBACDF116) - &a11 + 580454261) ^ 0xFEFC209D));
  a12 = a5;
  a13 = v20;
  a14 = v16;
  ((void (*)(unsigned int *))((char *)*(&off_100212870 + ((v17 - 486) ^ 0x12E)) - 8))(&a11);
  a12 = v21;
  a13 = a5;
  a11 = (v17 - 278) ^ (1374699841
                     * ((&a11 + 1792760181 - 2 * (&a11 & 0x6ADB5975)) ^ 0x72F417C));
  v22(&a11);
  a12 = a5;
  a11 = (v17 - 226) ^ (1755732067 * ((2 * (&a11 & 0x1AB0380) - &a11 - 27984772) ^ 0x209241A7));
  v23 = sub_100070A3C((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * ((((_DWORD)a13 == v18) * (((v17 - 836) | 0x80) ^ 0x39A)) ^ (v17 - 486)))
                                          - 12))(v23);
}

uint64_t sub_1000712EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;

  return (*(uint64_t (**)(void))(v17 + 8 * ((((471 * ((v15 + 116) ^ 0x1DE)) ^ 0x45) * (a15 == v16)) ^ (v15 + 116))))();
}

uint64_t sub_10007132C@<X0>(int a1@<W8>, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((((a8 ^ v8) <= a4) * ((178 * (a1 ^ 0x75E) - 220) ^ 0xAB)) | a1))
                            - 8))();
}

uint64_t sub_100071378()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  v3 = v1 - ((2 * v1) & 0x40FE2512) + ((353 * (v0 ^ 0x167)) ^ 0x207F16AA);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (v0 ^ (2
                                               * (((((v0 ^ 0x167) + 133) ^ 0xDBD3FF12) & (2 * v3) ^ 0x40D22512)
                                                + (v3 ^ 0x4D96ED44)
                                                - 4200896 == 1839851021))))
                            - 12))();
}

uint64_t sub_10007140C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((127 * (v8 + v7 + a7 + (v9 ^ 0x420u) - 1569917302 > 7)) ^ v9))
                            - ((335 * (v9 ^ 0x420u)) ^ 0x3E9)))();
}

uint64_t sub_100071478(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  return (*(uint64_t (**)(_QWORD))(v12 + 8 * (a2 ^ (1739 * ((unint64_t)(v11 - a11) > 0x1F)))))(a2 ^ (a7 + 1553));
}

uint64_t sub_1000714A8(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((30 * (v2 < ((41 * ((a2 - 141) ^ 0x34B)) ^ (a2 + 726)))) ^ (a2 - 141))))();
}

uint64_t sub_1000714E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v18 = (v15 + v13);
  v19 = *(_OWORD *)(v12 + v18 - 15);
  v20 = *(_OWORD *)(v12 + v18 - 31);
  v21 = a11 + v18;
  *(_OWORD *)(v21 - 15) = v19;
  *(_OWORD *)(v21 - 31) = v20;
  return ((uint64_t (*)(void))(*(_QWORD *)(v17
                                        + 8
                                        * ((965 * (((v16 - v11 - 770055994) & 0x3E3D1496) - 1124 == (v14 & 0xFFFFFFE0))) ^ (v16 - 382)))
                            - 8))();
}

uint64_t sub_100071564()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v2 ^ 0x40C) - 108) * (v0 == v1)) ^ v2))
                            - ((v2 - 262) ^ 0x37ALL)))();
}

uint64_t sub_100071598(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  char v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5 + 8 * (int)(((((a3 + 1101071570) | 0xAE08040A) + v3) * ((v4 & 0x18) == 0)) ^ a3)))();
}

uint64_t sub_1000715D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)(a11 - 7 + (v14 + v13 - v15 - 1844051918)) = *(_QWORD *)(v11
                                                                                  - 7
                                                                                  + (v14
                                                                                                 + v13
                                                                                                 - v15
                                                                                                 - 1844051918));
  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * ((485 * (v15 - (v12 & 0xFFFFFFF8) == -8)) ^ a2))
                            - ((a2 + 336210008) & 0xEBF5D1EF ^ 0x123)))();
}

void sub_100071650()
{
  JUMPOUT(0x100071628);
}

uint64_t sub_10007165C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((((2 * v5) ^ 0x2DE) - 59) * (v4 == a3)) ^ v5))
                            - (v5 - v3 - 152)
                            + 4020833358))();
}

uint64_t sub_100071698@<X0>(int a1@<W0>, int a2@<W6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;

  *(_BYTE *)(a6 + (v9 + v8)) = *(_BYTE *)(v7 + (v9 + v8));
  v11 = v9 - 1 == (a1 ^ (a2 + 812)) + a3;
  return (*(uint64_t (**)(void))(v10 + 8 * (((2 * v11) | (16 * v11)) ^ (v6 + a1 + 309))))();
}

uint64_t sub_1000716DC()
{
  int v0;
  void (*v1)(_BYTE *);
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[4];
  unsigned int v9;
  uint64_t v10;

  v10 = v6;
  v9 = v2 + (v8 ^ 0xAF40E2F) * v0 + 141;
  v1(v8);
  v9 = ((v2 + 8) | 0x224)
     + ((2 * (v8 & 0x65CA9380) - v8 + 439708797) ^ 0x10C16252) * v0
     - 415;
  v10 = v7;
  v1(v8);
  return v4 ^ v3;
}

uint64_t sub_1000717A0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) - 1374699841 * ((((2 * a1) | 0x340440B2) - a1 + 1711136679) ^ 0xF7F63850);
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_100212870 + (v1 ^ 0x6FD))
                                        + 8 * ((124 * (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))) ^ v1)
                                        - 4)
                            - 12))();
}

uint64_t sub_100071814@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  char v6;
  char v7;
  int v8;
  int v9;

  v4 = v1 + 272912823;
  v5 = v4 & 0xEFBBAE7C;
  v6 = (v4 & 0x7C) - 52;
  v7 = (v4 & 0x7C) + 24;
  v8 = *(_DWORD *)(v3 - 0xCDF342D76DC35A3);
  v9 = v8 - 1346595302;
  if (v8 - 1346595302 < 0)
    v9 = 1346595302 - v8;
  *(_DWORD *)(v2 - 0xCDF342D76DC35A3) = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (int)((243
                                               * ((v9 ^ 0x3AE84A8C)
                                                - 440926848
                                                + ((v9 << (v6 + (v7 ^ 0x4D))) & 0x75D09518) != 547375116)) ^ v5))
                            - 4))();
}

uint64_t sub_1000718D0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;

  *(_DWORD *)(*(_QWORD *)(v2 - 0xCDF342D76DC359FLL) + 4 * (v5 - 547375117)) = *(_DWORD *)(*(_QWORD *)(v3 - 0xCDF342D76DC359FLL)
                                                                                          + 4 * (v5 - 547375117));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((692 * (v5 - 1 == v1 + v4)) ^ v1)) - 12))();
}

uint64_t sub_100071930@<X0>(uint64_t a1@<X8>)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_DWORD *)(*v2 + 4 * (v6 + v5)) = *(_DWORD *)(*v3 + 4 * (v6 + v5));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((v6 - 1 == v4) * v7) ^ v1)) - 12))();
}

void sub_10007196C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BR              X9 }
}

uint64_t sub_100071A3C@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v14 = *a1 - v12 + *(_DWORD *)(v8 - 0x335F4D7B17DD4E07) - 1746339932;
  v15 = 1759421093 * (((&a5 | 0x77F9C2C3) - (&a5 & 0x77F9C2C3)) ^ 0xC4847297);
  a8 = v13 - v15 + 1174;
  a7 = v8;
  a5 = (v13 ^ 0x6DE) - v15 + v14 + 759277372;
  a6 = v15 + 1457038848;
  v16 = ((uint64_t (*)(int *))(*(_QWORD *)(a2 + 8 * (v13 - 57)) - 12))(&a5);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11 + 8 * ((715 * (*v9 == v10)) ^ v13)) - 4))(v16);
}

uint64_t sub_100071B20()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)(((*(_QWORD *)(v0 + 8) == 0x8DE5192BDC53166) * ((v1 - 1454) ^ 0x85)) ^ v1))
                            - (v1 ^ 0x64ALL)))();
}

uint64_t sub_100071B74()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8
                                             * ((492 * (v1 == ((v0 + 1530636813) & 0xA4C44F9C ^ 0x681708FC))) ^ v0))
                            - 8))();
}

void sub_100071BB8(int a1@<W8>)
{
  char v1;
  _DWORD *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = (a1 & 0xBFFFFFFF ^ 0xF26158B2)
     - (((a1 & 0xBFFFFFFF ^ 0xF26158B2) & 0x326158BA ^ a1 & 8) << (((v1 - 90) ^ 0xC) + 105))
     - 1302243150;
  v6 = *(_QWORD *)(v3 - 0x335F4D7B17DD4E17);
  v7 = *v2 - 812773273;
  *(_BYTE *)(v6 + v7) = (HIBYTE(v5) ^ 0xB2) + ~(2 * ((HIBYTE(v5) ^ 0xB2) & 0x3D ^ HIBYTE(v5) & 4)) + 58;
  *(_BYTE *)(v6 + v7 + 1) = (BYTE2(v5) ^ 0x61) - 2 * ((BYTE2(v5) ^ 0x61) & 0x3D ^ BYTE2(v5) & 4) + 57;
  *(_BYTE *)(v6 + v7 + 2) = (BYTE1(v5) ^ 0x58) + ~(2 * ((BYTE1(v5) ^ 0x58) & 0x3F ^ BYTE1(v5) & 6)) + 58;
  *(_BYTE *)(v6 + v7 + 3) = v5 ^ 0x8B;
  v8 = *(_QWORD *)(v3 - 0x335F4D7B17DD4E17);
  v9 = v4 - 2 * ((v4 + 401143708) & 0x4789DA1F ^ v4 & 1) + 1601360314;
  v10 = ((2 * (*v2 - 812773269)) & 0xFFE65774) + ((*v2 - 812773269) ^ 0x7FF32BBA) - 2146642874;
  *(_BYTE *)(v8 + v10) = (HIBYTE(v9) ^ 0xC7) + (~(2 * (HIBYTE(v9) ^ 0xC7)) | 0x8D) + 58;
  *(_BYTE *)(v8 + v10 + 1) = (BYTE2(v9) ^ 0x89) - 2 * ((BYTE2(v9) ^ 0x89) & 0x3D ^ BYTE2(v9) & 4) + 57;
  *(_BYTE *)(v8 + v10 + 2) = (BYTE1(v9) ^ 0xDA) + (~(2 * (BYTE1(v9) ^ 0xDA)) | 0x8D) + 58;
  *(_BYTE *)(v8 + v10 + 3) = (v4 - 2 * ((v4 - 100) & 0x1F ^ v4 & 1) - 70) ^ 0x27;
  *v2 = v11;
}

void sub_100071E4C(uint64_t a1)
{
  unint64_t v2;
  void (*v3)(char *, void (*)());
  _BYTE v4[8];

  v2 = (unint64_t)&v4[qword_100262EA8 - qword_100262EB0];
  qword_100262EB0 = 1801249171 * v2 + 0x4AADAB03756D799ELL;
  qword_100262EA8 = 1801249171 * (v2 ^ 0x8915C65683065AAALL);
  v3 = (void (*)(char *, void (*)()))*(&off_100212870
                                                + ((-109
                                                                                 * ((-109 * v2 - 98) ^ 0xAA ^ qword_100262EA8)) ^ byte_1001AFBD0[byte_1001AB600[(-109 * ((-109 * v2 - 98) ^ 0xAA ^ qword_100262EA8))] ^ 0x52])
                                                + 215);
  LOBYTE(v2) = -109 * ((qword_100262EA8 + -109 * v2 - 98) ^ 0xAA);
  v3((char *)*(&off_100212870+ (v2 ^ byte_1001B3FD0[byte_1001AFCD0[v2] ^ 0x7B])+ 50)- 8, sub_10008144C);
  __asm { BR              X11 }
}

uint64_t sub_100071F74()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((31 * (**(_QWORD **)(v2 + 1648) == 0)) ^ v0)) - 8))();
}

uint64_t sub_100071FAC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x70u)))(v1);
}

void sub_100071FC8(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_10007200C(uint64_t a1)
{
  uint64_t v1;
  int v3;
  unsigned int v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(void))(v1 + 1352))();
  if (v3 == 16)
    v4 = -42029;
  else
    v4 = -42030;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  (*(void (**)(uint64_t))(v1 + 208))(a1);
  return v5;
}

void sub_100072054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }
}

uint64_t sub_1000720D0(uint64_t a1, int a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;

  if (a1)
    v3 = a2 == 0;
  else
    v3 = 0;
  v4 = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((30 * v4) ^ 0x2AFu)) - 8))();
}

uint64_t sub_100072114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  uint64_t v14;
  uint64_t v15;

  a14 = 108757529
      * (((&a13 | 0x7488BE6A) - &a13 + (&a13 & 0x8B774190)) ^ 0x9414DC41)
      - 504207030;
  v15 = sub_100081E5C(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v14 + 8 * ((1710 * (a13 == -1262737048)) ^ 0x2B1u)) - 8))(v15);
}

uint64_t sub_1000721DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, int a14, unsigned int a15)
{
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v19 = v18 - v15;
  a13 = &STACK[0x1A8FA111108FB33A];
  a15 = v18
      - 460628867 * ((((2 * &a13) | 0x66A73330) - &a13 + 1286366824) ^ 0xFFC51BE5)
      + 551;
  sub_10007FB7C((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 8 * (v18 ^ (16 * ((v19 ^ (a14 == v16)) & 1u))))
                                                                                       - 8))(v20, v21, v22, v23, v24, v25);
}

uint64_t sub_100072268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, unsigned int a16, uint64_t a17)
{
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;

  v23 = 1178560073 * ((((2 * &a13) | 0x9DACF07A) - &a13 + 824805315) ^ 0x7442005F);
  a16 = ((((v22 ^ 0x76A) + 1) ^ 0xFC6FEAF2) + (v18 ^ 0x1BDFBFEE) + (((v22 ^ 0x10) + 935296299) & (2 * v18))) ^ v23;
  a17 = v17;
  a14 = v23 + (v22 ^ 0x76A) - 409;
  a15 = a12;
  v24 = (*(uint64_t (**)(int *))(v20 + 8 * (v22 ^ 0x295u)))(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((7 * (a13 != v19)) ^ v22 ^ 0x76Au)) - 4))(v24);
}

uint64_t sub_100072348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, unsigned int a15, unsigned int a16, unsigned int a17, int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 460628867
      * (((&a13 | 0x6202A4E8) - &a13 + (&a13 & 0x9DFD5B10)) ^ 0x2E942695);
  a17 = -1217699515 - v21;
  a15 = v21 - 1880019225;
  a16 = v21 + v20 - 2024874567;
  a13 = &STACK[0x37C70005964C0FE5];
  a14 = a12;
  v22 = sub_100081858((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * (((a18 == v18) * ((v20 - 795) ^ 0xD)) ^ v20))
                                          - ((v20 - 51) ^ 0x59DLL)))(v22);
}

uint64_t sub_100072414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, int a14, unint64_t *a15, uint64_t a16)
{
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  a14 = (v16 - 867) ^ (1374699841
                     * ((&a14 - 5483389 - 2 * ((unint64_t)&a14 & 0xFFAC5483)) ^ 0x92584C8A));
  a15 = &STACK[0x509D13A7D8C2F408];
  a16 = a10;
  v20 = (*(uint64_t (**)(int *))(v18 + 8 * (v16 - 1312)))(&a14);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * (int)(((a12 == v17)
                                                   * (((v16 - 1017211232) ^ 0xFFFFF836) + v16 - 1017211232)) ^ v16)))(v20);
}

uint64_t sub_1000724C0()
{
  uint64_t v0;
  int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  void (*v5)(unsigned int *);
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v15 = v4
      - 108757529 * ((&v10 & 0x89026447 | ~(&v10 | 0x89026447)) ^ 0x9661F993)
      + v1
      - 423;
  v13 = v7;
  v14 = 0x17742063B1AF47F1;
  v12 = v0;
  ((void (*)(unsigned int *))(*(_QWORD *)(v3 + 8 * (int)(v1 ^ 0xC35E9C3D)) - 12))(&v10);
  v12 = v7;
  v10 = (v4 + v1 - 815) ^ (1755732067
                         * ((2 * (&v10 & 0x2DC15410) - &v10 + 1379838952) ^ 0x8CF81633));
  sub_100070A3C((uint64_t)&v10);
  v12 = v7;
  v11 = v4
      + v1
      + 535753261 * ((((2 * &v10) | 0xE7290E34) - &v10 + 208369894) ^ 0xF9608935)
      - 1156;
  v5(&v10);
  v12 = v9;
  v11 = v4
      + v1
      - 744
      + 535753261 * ((((2 * &v10) | 0x64F0FE14) - &v10 + 1300726006) ^ 0xB88C7125)
      - 412;
  v5(&v10);
  return v8 ^ v2;
}

void sub_100072688(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD v6[2];
  uint64_t v7;

  v1 = *(_DWORD *)(a1 + 8) + 535753261 * ((2 * (a1 & 0x5E99CC2A) - a1 - 1587137579) ^ 0xAB923DFA);
  v2 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 - 0xCDF342D76DC35A3) - 1346595302 >= 0)
    v3 = *(_DWORD *)(*(_QWORD *)a1 - 0xCDF342D76DC35A3) - 1346595302;
  else
    v3 = 1346595302 - *(_DWORD *)(*(_QWORD *)a1 - 0xCDF342D76DC35A3);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) - 0xCDF342D76DC35A3) - 1346595302 >= 0)
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0xCDF342D76DC35A3) - 1346595302;
  else
    v4 = 1346595302 - *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0xCDF342D76DC35A3);
  v6[1] = (460628867 * ((2 * (v6 & 0x6E3B39E8) - v6 - 1849375214) ^ 0xDD52446F)) ^ (v1 + 524);
  v7 = v2;
  sub_10005BDE0((uint64_t)v6);
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = v3;
  __asm { BR              X15 }
}

uint64_t sub_10007281C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  _BOOL4 v16;

  v11 = v3 - 611948888;
  v12 = v4 - 32;
  v13 = 4 * (v9 + v5);
  v14 = v7
      - 1367836243
      + (*(_DWORD *)(*(_QWORD *)(v10 - 0xCDF342D76DC359FLL) + v13) ^ v8)
      + (*(_DWORD *)(*(_QWORD *)(a2 - 0xCDF342D76DC359FLL) + v13) ^ (v8 + v12 + 1166 - 1571));
  *(_DWORD *)(*(_QWORD *)(a1 - 0xCDF342D76DC359FLL) + v13) = v14 + v8 - (v6 & (2 * v14));
  v16 = v9 - 976219982 > 1535534759 || v9 - 976219982 < v11;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (v12 ^ (32 * v16)))
                                                                                       - 12))(0xE7BDBFBFBEFD79EDLL, 0x17DFAF3DALL, 0x7FFFFEF9EF7AFFC0, 3318747314, 1535534759);
}

uint64_t sub_100072918()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v6;

  v4 = v3 - 412279491 + ((v1 - 1561) | 0x170);
  v6 = v4 > 2099475629 || v4 < (int)(((v1 + 276535762) & 0xEF84619F ^ 0xFD23753B) + v2);
  return (*(uint64_t (**)(void))(v0 + 8 * (((2 * v6) | (16 * v6)) ^ v1)))();
}

uint64_t sub_100072984@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL4 v17;

  v13 = 4 * (v11 + v7);
  v14 = v2 + v9 + (*(_DWORD *)(*(_QWORD *)(v12 - 0xCDF342D76DC359FLL) + v13) ^ v10);
  *(_DWORD *)(*(_QWORD *)(a1 - 0xCDF342D76DC359FLL) + v13) = v14 + v10 - (v8 & (2 * v14));
  v15 = v3 + v11 + 379;
  v17 = v15 <= v4 && v15 >= v6;
  return (*(uint64_t (**)(void))(v1 + 8 * ((906 * v17) ^ (v5 + 1044))))();
}

uint64_t sub_100072A48()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  _BOOL4 v4;

  v4 = v2 + 103733698 < (int)(v3 + 468004793);
  if (v2 + 103733698 < -1679478855 != v3 > ((v1 - 210) | 0x202u) + 1679478172)
    v4 = v3 > ((v1 - 210) | 0x202u) + 1679478172;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((!v4 * (v1 ^ 0x187)) ^ v1)) - 12))();
}

uint64_t sub_100072ACC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1664 * (v1 != 0x67BDBEB9AE7879ADLL)) ^ v2))
                            - ((v2 + 1043334612) & 0xC1CFF7F5 ^ 0x19DLL)))();
}

void sub_100072B1C(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  char v3;
  int v4;
  int v5;
  int v6;

  *(_DWORD *)(*(_QWORD *)(a1 - 0xCDF342D76DC359FLL) + 4 * (v6 + v4)) = v2
                                                                       - (((v2 << (v3 ^ 0xCA)) - 1559294810) & v5)
                                                                       + 756603445;
  *(_DWORD *)(a1 - 0xCDF342D76DC35A3) = (((v6 + 1 + v4) * (v1 - 1308797827)) ^ 0xD06FEDE6)
                                        + 2144566272
                                        + ((2 * (v6 + 1 + v4) * (v1 - 1308797827)) & 0xA0DFDBCC);
}

void sub_100072CD4(uint64_t a1)
{
  int v1;

  v1 = 1374699841 * ((a1 - 1542394297 - 2 * (a1 & 0xA410EE47)) ^ 0xC9E4F64E);
  __asm { BR              X13 }
}

uint64_t sub_100072D94@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v8;
  uint64_t v9;
  int v10;

  v5 = -1746403426 - v3 - (((v1 ^ 0x1FC) - 1983489225) & (-1509319534 - v4));
  v6 = 108757529 * ((((2 * &v8) | 0x329BD094) - &v8 - 424536138) ^ 0xF9D18A61);
  v9 = v2;
  v10 = v5 ^ v6;
  v8 = v6 + v1 + 157;
  return ((uint64_t (*)(int *))(*(_QWORD *)(a1 + 8 * (v1 - 1526)) - 4))(&v8);
}

void sub_100072EDC(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0xCDF342D76DC35A3) - 2116722452;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0xCDF342D76DC35A3) - 2116722452;
  v4 = (v2 < 1377356498) ^ (v3 < 1377356498);
  v5 = v2 > v3;
  if (v4)
    v6 = v2 < 1377356498;
  else
    v6 = v5;
  v1 = *(_DWORD *)(a1 + 16) - 1178560073 * ((-2 - ((a1 | 0x5930FF1B) + (~(_DWORD)a1 | 0xA6CF00E4))) ^ 0x1C5B7886);
  __asm { BR              X14 }
}

uint64_t sub_100072FC0()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v4 = ((v2 - 1015) ^ 0xD7E70BC7) + v3;
  v5 = (((v2 - 997) | 0x85) ^ 0xD7E70B70) + v1;
  v6 = v5 < -1473612867;
  v7 = v4 < v5;
  if (v4 < -1473612867 != v6)
    v7 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (((2 * !v7) | (16 * !v7)) ^ v2)) - 8))();
}

uint64_t sub_10007303C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;

  if (((v2 - 175) ^ 0x2FBC97E2) + v3 >= 0)
    v3 = -1601776692 - v3;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1
                                                      + 8
                                                      * (int)((((v3 - 1346595303) >> 31)
                                                             * ((v2 + 549) ^ 0x724)) ^ (v2 - 175)))
                                          - 4))(a1);
}

uint64_t sub_1000730D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * (a5 | (16
                                               * (((a5 ^ (a5 - 1)) ^ ((*(_DWORD *)(*v9 + 4 * a6) ^ v7) > (*(_DWORD *)(*v8 + 4 * a6) ^ v7))) & 1))))
                            - 12))();
}

uint64_t sub_10007311C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7, unsigned int a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(void))(v8 + 8 * ((((a5 - 724) ^ (a5 - 700) ^ a4) * (a6 >= a8)) ^ (a5 - 592))))();
}

void sub_100073148()
{
  JUMPOUT(0x1000730ACLL);
}

_DWORD *sub_100073160(_DWORD *result)
{
  int v1;

  *result = -1004659726 - v1;
  return result;
}

void sub_100073178(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (235795823 * ((-127693918 - (a1 | 0xF8638BA2) + (a1 | 0x79C745D)) ^ 0x93313D04));
  __asm { BR              X10 }
}

uint64_t sub_100073248(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((*(_DWORD *)(*(_QWORD *)(a1 + 8) + v3) == v1) * ((v4 + 1534) ^ 0x705)) ^ v4))
                            - (v4 + 619)
                            + 867))();
}

uint64_t sub_100073280@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v6 = v2 + 1374699841 * (((&v4 | 0xF444FDE1) + (~&v4 | 0xBBB021E)) ^ 0x99B0E5E9) + 725;
  v4 = a1;
  v5 = v1;
  return sub_1000717A0((uint64_t)&v4);
}

void sub_1000733F8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) - 1225351577 * ((-2 - ((a1 | 0x64CFEAB8) + (~(_DWORD)a1 | 0x9B301547))) ^ 0xB8AACD51);
  __asm { BR              X13 }
}

uint64_t sub_100073564@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;

  v45 = &a32 + v38;
  v65 = &a28 + v38;
  v64 = &a30 + v38;
  v63 = &a26 + v38;
  v62 = &a22 + v38;
  v61 = &a36 + v38;
  v59 = v40;
  v60 = &a34 + v38;
  v66 = &a38 + v38;
  v46 = a1[5];
  v68 = a1[4];
  v47 = *a1;
  *(_QWORD *)(v44 - 104) = *(_QWORD *)(*a1 - 0x139154EEB4327E8);
  *(_DWORD *)(v44 - 112) = v43
                         - 188
                         + 1224239923 * (((v44 - 144) & 0xBC65B992 | ~((v44 - 144) | 0xBC65B992)) ^ 0xB129BBBA);
  *(_QWORD *)(v44 - 128) = &a32 + v38;
  *(_QWORD *)(v44 - 120) = v46;
  v67 = &a32 + v38;
  *(_QWORD *)(v44 - 144) = v47;
  *(_QWORD *)(v44 - 136) = a2;
  v48 = (void (*)(uint64_t))(*(_QWORD *)(v39 + 8 * (v43 - 432)) - 12);
  v48(v44 - 144);
  *(_QWORD *)(v44 - 120) = v45;
  *(_QWORD *)(v44 - 112) = v47;
  *(_DWORD *)(v44 - 144) = (v43 + 1383) ^ (1225351577
                                         * ((v44 + 1955865214 - 2 * ((v44 - 144) & 0x7494230E)) ^ 0x570EFB18));
  *(_QWORD *)(v44 - 136) = v46;
  *(_QWORD *)(v44 - 128) = v66;
  ((void (*)(uint64_t))((char *)*(&off_100212870 + (v43 ^ 0x187)) - 12))(v44 - 144);
  *(_DWORD *)(v44 - 112) = v43
                         - 188
                         + 1224239923
                         * ((1881907805 - ((v44 - 144) | 0x702BA25D) + ((v44 - 144) | 0x8FD45DA2)) ^ 0x7D67A075);
  *(_QWORD *)(v44 - 128) = v65;
  *(_QWORD *)(v44 - 120) = v46;
  *(_QWORD *)(v44 - 144) = v47;
  *(_QWORD *)(v44 - 136) = v66;
  *(_QWORD *)(v44 - 104) = v67;
  v48(v44 - 144);
  *(_QWORD *)(v44 - 104) = v65;
  *(_QWORD *)(v44 - 144) = v47;
  *(_QWORD *)(v44 - 136) = v66;
  *(_DWORD *)(v44 - 112) = v43
                         - 188
                         + 1224239923
                         * (((((v44 - 144) | 0x72B87200) ^ 0xFFFFFFFE) - (~(v44 - 144) | 0x8D478DFF)) ^ 0x7FF47028);
  *(_QWORD *)(v44 - 128) = v64;
  *(_QWORD *)(v44 - 120) = v46;
  v48(v44 - 144);
  *(_DWORD *)(v44 - 112) = v43 - 188 + 1224239923 * ((v44 - 760164511 - 2 * ((v44 - 144) & 0xD2B0CFF1)) ^ 0x20033226);
  *(_QWORD *)(v44 - 144) = v47;
  *(_QWORD *)(v44 - 136) = v66;
  *(_QWORD *)(v44 - 104) = v64;
  *(_QWORD *)(v44 - 128) = v63;
  *(_QWORD *)(v44 - 120) = v46;
  v48(v44 - 144);
  *(_QWORD *)(v44 - 144) = v47;
  *(_QWORD *)(v44 - 136) = v66;
  *(_DWORD *)(v44 - 112) = v43
                         - 188
                         + 1224239923
                         * ((((v44 - 144) | 0xD9043B02) - (v44 - 144) + ((v44 - 144) & 0x26FBC4F8)) ^ 0x2BB7C6D5);
  *(_QWORD *)(v44 - 104) = v63;
  *(_QWORD *)(v44 - 128) = v62;
  *(_QWORD *)(v44 - 120) = v46;
  v48(v44 - 144);
  *(_DWORD *)(v44 - 112) = v43
                         - 188
                         + 1224239923 * ((2 * ((v44 - 144) & 0x58E81DB0) - (v44 - 144) + 655876683) ^ 0xD5A41F9C);
  *(_QWORD *)(v44 - 120) = v46;
  *(_QWORD *)(v44 - 136) = v66;
  *(_QWORD *)(v44 - 128) = v61;
  *(_QWORD *)(v44 - 144) = v47;
  *(_QWORD *)(v44 - 104) = v62;
  v48(v44 - 144);
  *(_DWORD *)(v44 - 112) = v43 - 188 + 1224239923 * ((v44 - 144) ^ 0xF2B3FDD7);
  *(_QWORD *)(v44 - 144) = v47;
  *(_QWORD *)(v44 - 136) = v66;
  *(_QWORD *)(v44 - 104) = v61;
  *(_QWORD *)(v44 - 128) = v60;
  *(_QWORD *)(v44 - 120) = v46;
  v48(v44 - 144);
  *(_QWORD *)(v44 - 104) = v60;
  *(_DWORD *)(v44 - 112) = v43
                         - 188
                         + 1224239923
                         * ((-1798936272 - ((v44 - 144) | 0x94C66930) + ((v44 - 144) | 0x6B3996CF)) ^ 0x998A6B18);
  *(_QWORD *)(v44 - 128) = v66;
  *(_QWORD *)(v44 - 120) = v46;
  *(_QWORD *)(v44 - 144) = v47;
  *(_QWORD *)(v44 - 136) = v66;
  v48(v44 - 144);
  v49 = *(_QWORD *)(v47 - 0x139154EEB4327F0);
  *(_DWORD *)(v44 - 128) = v43
                         + 1374699841 * (((~(v44 - 144) & 0x2D3D96EC) - (~(v44 - 144) | 0x2D3D96ED)) ^ 0x40C98EE4)
                         + 1136;
  *(_QWORD *)(v44 - 144) = v49;
  *(_QWORD *)(v44 - 136) = v41;
  sub_1000717A0(v44 - 144);
  *(_QWORD *)(v44 - 136) = v68;
  *(_DWORD *)(v44 - 144) = v43
                         + 235795823 * ((((v44 - 144) | 0xA8DEE7AD) - ((v44 - 144) & 0xA8DEE7AD)) ^ 0x3C73AEF4)
                         + 453;
  sub_10003E9A4(v44 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, char *, char *, char *, uint64_t, uint64_t))(*(_QWORD *)(v42 + 8 * ((55 * (v43 + 637 + *(_DWORD *)(v44 - 140) - 1494468670 - 1095 < (v43 ^ 0x17Fu) + 2147483468)) ^ v43)) - 8))(v50, v51, v52, v53, v54, v55, v56, v57, a3, v59, v60, v61, v62, v63, v64, v65, v66, a12, v42);
}

uint64_t sub_100073A60()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = 1224239923 * ((((v2 - 144) | 0xC9897073) + (~(v2 - 144) | 0x36768F8C)) ^ 0x3B3A8DA5);
  *(_DWORD *)(v2 - 144) = v3 ^ 0xCE6A6B3;
  *(_QWORD *)(v2 - 136) = v6;
  *(_DWORD *)(v2 - 128) = v3 + v1 - 681;
  sub_10006C5C0((_DWORD *)(v2 - 144));
  *(_QWORD *)(v2 - 128) = v0;
  *(_QWORD *)(v2 - 120) = v9;
  *(_QWORD *)(v2 - 144) = v8;
  *(_QWORD *)(v2 - 136) = v6;
  *(_DWORD *)(v2 - 112) = v1 + 1224239923 * ((v2 - 144) ^ 0xF2B3FDD7) - 825;
  *(_QWORD *)(v2 - 104) = v0;
  v7(v2 - 144);
  *(_DWORD *)(v2 - 128) = v1 - 95 + 1374699841 * ((v2 - 144) ^ 0x6DF41809) + 594;
  *(_QWORD *)(v2 - 144) = v0;
  *(_QWORD *)(v2 - 136) = v5;
  return sub_1000717A0(v2 - 144);
}

void sub_100074854(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;

  v1 = 1178560073 * ((-2 - ((a1 | 0x5A50E64C) + (~(_DWORD)a1 | 0xA5AF19B3))) ^ 0x1F3B61D1);
  v2 = *(_DWORD *)(a1 + 40) ^ v1;
  if (*(_QWORD *)(a1 + 48) | *(_QWORD *)(a1 + 64))
    v3 = *(_DWORD *)(a1 + 24) + v1 == 2032756398;
  else
    v3 = 1;
  v4 = !v3;
  __asm { BR              X9 }
}

uint64_t sub_1000749B0@<X0>(int a1@<W8>)
{
  _QWORD *v1;
  uint64_t v2;
  _BOOL4 v4;

  v4 = v1[1] != 0x2A05F9DD1F18854ELL && (v1[7] | v1[4]) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v4 * (((a1 - 149) | 8) + 878)) ^ a1)) - 12))();
}

uint64_t sub_100074A04(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v3 + 72);
  *(_DWORD *)(v2 - 0x2A05F9DD1F18854ELL) = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 8 * ((122 * (v5 == 0xCDF342D76DC35A7)) ^ v1)))(a1, (v1 + 141) ^ 0x138u);
}

uint64_t sub_100074AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;

  v21 = &a17 + a3;
  v22 = 1224239923 * ((((v20 - 144) | 0x5EDF9B83) + (~(v20 - 144) | 0xA120647C)) ^ 0xAC6C6655);
  *(_DWORD *)(v20 - 128) = v22 + v18 + 102;
  *(_QWORD *)(v20 - 136) = v21;
  *(_DWORD *)(v20 - 144) = v22 ^ 0xCE7A6B3;
  sub_10006C5C0((_DWORD *)(v20 - 144));
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v19 + 8 * ((v18 + 1428) | (v17 == 0)))
                                                   - (v18 ^ 0x693u)
                                                   - ((v18 + 327) | 0x528u)
                                                   + 3914))(a1, a2);
}

uint64_t sub_100074B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;

  v28 = 271 * (v18 ^ 0x7AA);
  v29 = ((((2 * (v27 - 144)) | 0x6D4E95B8) - (v27 - 144) + 1230550308) ^ 0xC3332BE) * v19;
  *(_DWORD *)(v27 - 116) = v29 + v20 + (v28 ^ 0xBC83A83D);
  *(_QWORD *)(v27 - 136) = v23;
  *(_QWORD *)(v27 - 128) = v26;
  *(_DWORD *)(v27 - 144) = v29 + v18 - 1277;
  ((void (*)(uint64_t))(*(_QWORD *)(v22 + 8 * (v18 ^ 0x784)) - 8))(v27 - 144);
  *(_QWORD *)(v27 - 144) = v21;
  *(_QWORD *)(v27 - 136) = a17;
  *(_DWORD *)(v27 - 128) = (v28 + 237) ^ (628203409
                                        * ((((v27 - 144) ^ 0x7C4051F6 | 0xD1B85227)
                                          - ((v27 - 144) ^ 0x7C4051F6)
                                          + (((v27 - 144) ^ 0x7C4051F6) & 0x2E47ADD8)) ^ 0x2F700FE2));
  ((void (*)(uint64_t))(*(_QWORD *)(v22 + 8 * (int)(v28 - 681)) - 8))(v27 - 144);
  *(_DWORD *)(v27 - 128) = v28 + 1374699841 * ((v27 - 144) ^ 0x6DF41809) - 394;
  *(_QWORD *)(v27 - 120) = a18;
  *(_QWORD *)(v27 - 112) = a11;
  *(_QWORD *)(v27 - 104) = v21;
  *(_QWORD *)(v27 - 144) = a16;
  *(_QWORD *)(v27 - 136) = a17;
  v30 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22 + 8 * (int)(v28 - 682)) - 12))(v27 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v25
                                                      + 8
                                                      * (int)((91 * ((((v28 - 1855632435) ^ (v24 == 0)) & 1) == 0)) ^ v28))
                                          - (v28 ^ 0x321)))(v30);
}

uint64_t sub_100074DE0()
{
  _DWORD *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  _DWORD *v10;

  v6 = 535753261 * ((v5 - 409367163 - 2 * ((v5 - 144) & 0xE7998E15)) ^ 0xED6D803A);
  *(_DWORD *)(v5 - 120) = v6 + v1 + ((v4 + 847220929) & 0xCD806F7E ^ 0xA4D165E0);
  *(_DWORD *)(v5 - 136) = (v4 + 41) ^ v6;
  *(_QWORD *)(v5 - 128) = v2;
  *(_QWORD *)(v5 - 144) = v8;
  result = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v4 ^ 0x8E)))(v5 - 144);
  *v10 = v9;
  *v0 = -1262737048;
  return result;
}

void sub_100074F4C(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  BOOL v5;

  v1 = 628203409 * (((a1 | 0x89B748DF) - a1 + (a1 & 0x7648B720)) ^ 0xB3F44EC);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0x1706FB9DE6F6FC5CLL) - 1471797814;
  v3 = *(_DWORD *)(a1 + 20) + v1 + 157191910;
  v4 = v2 < 0x1CC240BC;
  v5 = v2 > v3;
  if (v3 < 0x1CC240BC != v4)
    v5 = v4;
  __asm { BR              X13 }
}

uint64_t sub_100075030(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + (v3 - 1954290419));
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((62
                                          * (((v4
                                             - ((v4 << ((((v1 ^ 0x20) - 118) | 2) + 46)) & (((v1 ^ 0x120) - 224) ^ 0x48D))
                                             - 1434871179) & 0x1F) == 10)) ^ v1 ^ 0x120))
                            - 12))();
}

uint64_t sub_1000750B0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v5 = ((v4 - 1394964716) & 0x5325777F ^ 0xFEBD368F) + v3;
  v6 = v5 < 0x73394DD9;
  v7 = v5 > v1 + 1607834627;
  if ((v1 + 1607834627) < 0x73394DD9 != v6)
    v7 = v6;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * ((62 * v7) ^ v4)) - 8))(a1, 1262711478);
}

uint64_t sub_100075130(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  v6 = v3 + v4 + 1066;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v2
                                                            + 8
                                                            * (int)(((*(unsigned __int8 *)(v1 + v6) >> 7)
                                                                   * ((v5 + 123128236) & 0xF8A934E7 ^ 0x47E)) ^ (v5 + 410))))(a1, (v5 - 1484) | 0x460u, ((*(unsigned __int8 *)(v1 + v6) << (((v5 + 52) | 0x60) - 102)) & 0xF6)+ (*(unsigned __int8 *)(v1 + v6) ^ 0x6B77EF7Bu)- 55697665);
}

uint64_t sub_1000751BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v5
                                                     + 8
                                                     * (a5 ^ (1008
                                                            * (((v6 + 5) & 0x7F ^ 0x97FBDB35)
                                                             + ((2 * (v6 + 5)) & 0x6A)
                                                             + 1745102026 < 4)))))(a1, 1262711478);
}

uint64_t sub_10007520C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _BOOL4 v11;
  _BOOL4 v12;

  v10 = a7 + v9 + ((a5 + 961816984) & 0xC6ABD2BC ^ 0xE7C02179);
  v11 = v10 < 0xF43817EB;
  v12 = v10 > v7 - 522951147;
  if ((v7 - 522951147) < 0xF43817EB != v11)
    v12 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8 * ((1019 * !v12) ^ a5)))(a1, 1262711478);
}

uint64_t sub_100075290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  int v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8
                                             * ((1595 * (((7 * (v8 ^ 0x1D)) ^ 0x6F74F3A8) + a7 != 124834565)) ^ v8))
                            - 12))();
}

uint64_t sub_100075330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8)
{
  uint64_t v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((31 * (v9 - 1 == a6)) ^ a8)) - 12))();
}

uint64_t sub_1000753AC(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  _BOOL4 v11;

  v8 = a3 + v5 + v6 + v7 + 1344469923 + 1549718476;
  v9 = v3 + 230433337;
  v10 = (v9 < 0x211FD40F) ^ (v8 < 0x211FD40F);
  v11 = v8 > v9;
  if (v10)
    v11 = v8 < 0x211FD40F;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8 * ((249 * !v11) ^ a2)))(a1, 1262711478);
}

uint64_t *sub_100075428@<X0>(uint64_t *result@<X0>, int a2@<W2>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = result[6];
  v9 = *result;
  v8 = result[1];
  *a3 = v4 - 1346692432;
  *(_DWORD *)(v9 - 0x53A673BF11B47F23) = v5;
  *(_DWORD *)(v7 - 0x5FC20BA57156132) = a2;
  *(_QWORD *)(v8 - 0x1F962A9297594DE9) = v3 + (v6 - 1553658313);
  *((_DWORD *)result + 8) = -1262737048;
  return result;
}

void sub_1000754A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  int v12;

  if (a2)
    v8 = a3 == 0;
  else
    v8 = 1;
  v12 = !v8 && a6 != 0 && a7 != 0 && a8 != 0;
  __asm { BR              X8 }
}

uint64_t sub_100075528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,unsigned int a22)
{
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v27;

  *a6 = 0;
  *a7 = 0;
  a22 = 108757529 * ((&a21 & 0xA7DA3C6 | ~(&a21 | 0xA7DA3C6)) ^ 0x151E3E12) - 504207030;
  v27 = v22;
  v25 = sub_100081E5C(&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v27 + 8 * ((1800 * (a21 == v24)) ^ v23)) - 4))(v25);
}

uint64_t sub_1000755DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t *a21,unsigned int a22,unsigned int a23,int a24)
{
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v24 = 1759421093 * ((302028066 - (&a21 | 0x12009522) + (&a21 | 0xEDFF6ADD)) ^ 0x5E82DA89);
  a22 = v24 + 276;
  a24 = v24 ^ 0x65CC81C5;
  LODWORD(a21) = v24 ^ 0x69CCD154;
  HIDWORD(a21) = v24 ^ 0x7C8B1567;
  sub_10004E0E8((uint64_t)&a21);
  HIDWORD(a11) = a23;
  a23 = 1224
      - 460628867
      * ((((&a21 | 0x22DC427A) ^ 0xFFFFFFFE) - (~&a21 | 0xDD23BD85)) ^ 0x91B53FF8);
  a21 = &STACK[0x1A8FA111108FB35A];
  sub_10007FB7C((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a14 + 8 * ((21 * (a22 != -1262737048)) ^ 0x169u)) - 4))(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10007573C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,uint64_t a23,int a24,uint64_t a25)
{
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  void (*v33)(int *);
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;

  v31 = v30 + 662;
  v32 = 1178560073
      * (((&a21 ^ 0x6D335C6D) + 874547561 - 2 * ((&a21 ^ 0x6D335C6D) & 0x34208969)) ^ 0xE387AD66);
  a23 = a16;
  a22 = v29 - ((2 * v29) & 0x4C55314) + ((v31 - 643) ^ 0x262A8F6) + v32;
  a24 = (v31 - 755) ^ v32;
  v33 = (void (*)(int *))((char *)*(&off_100212870 + (v31 ^ 0x3F4)) - 12);
  v33(&a21);
  a25 = v28;
  a24 = v31
      + 1224239923 * ((&a21 + 1000414565 - 2 * (&a21 & 0x3BA11D65)) ^ 0xC912E0B2)
      - 735;
  a23 = a16;
  ((void (*)(int *))((char *)*(&off_100212870 + (v31 & 0x8B)) - 12))(&a21);
  v34 = 1178560073 * ((((2 * &a21) | 0xBE750D4E) - &a21 + 549812569) ^ 0x65AEFEC5);
  a22 = v27 + 40020214 - ((2 * v27) & 0x4C55314) + v34 + 148;
  a24 = (v31 - 755) ^ v34;
  a23 = a16;
  v33(&a21);
  v35 = 1178560073 * ((2 * (&a21 & 0x155A7990) - &a21 + 1789232746) ^ 0xD031FE08);
  a25 = v25;
  a23 = a16;
  a24 = v35 ^ ((v26 ^ 0x1B7FFFFE) - 53498066 + ((2 * v26) & 0x36FFFFFC));
  a22 = v35 + v31 + 51;
  v36 = ((uint64_t (*)(int *))*(&off_100212870 + (v31 & 0x434)))(&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a14 + 8 * ((2007 * (a21 == -1262737048)) ^ v31)) - 12))(v36);
}

uint64_t sub_100075994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t *a22,uint64_t a23,int a24,int a25,int a26,int a27)
{
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;

  if (a12 == 70636352)
    v29 = -1217699515;
  else
    v29 = -39006090;
  v30 = 460628867 * ((&a22 - 768152863 - 2 * ((unint64_t)&a22 & 0xD236EAE1)) ^ 0x9EA0689C);
  a22 = &STACK[0x37C70005964C1025];
  a23 = a17;
  a24 = v30 - 1922635655;
  a25 = v30 + v27 - 2024874106;
  a26 = v29 - v30;
  v31 = sub_100081858((uint64_t)&a22);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a15 + 8 * ((1172 * (a27 == v28)) ^ v27))
                                          - ((((v27 - 1003) | 0x168) + 915) ^ (v27 - 317076572) & 0x155F)))(v31);
}

uint64_t sub_100075A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,unint64_t *a24,unint64_t *a25,unsigned int a26)
{
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  a24 = &STACK[0x79D937EF4F9B0C46];
  a25 = &STACK[0x6A5CFF2CF2E1649B];
  a23 = a19;
  a26 = (v28 - 172) ^ (1225351577
                     * ((1978797034 - (&a22 | 0x75F20BEA) + (&a22 | 0x8A0DF415)) ^ 0xA9972C03));
  v29 = v26;
  v30 = ((uint64_t (*)(char *))((char *)*(&off_100212870 + v28 - 1211) - 8))(&a22);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v29 + 8 * ((((v28 - 1059) ^ 0x19) * (a12 == v27)) ^ v28)) - 4))(v30);
}

uint64_t sub_100075BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _BYTE *a18, uint64_t a19, int a20,char a21,unsigned int a22,char *a23,_BYTE *a24)
{
  char *v24;
  void (*v25)(unsigned int *);
  int v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  a22 = (v27 - 717) ^ ((((&a22 ^ 0x7253DB1C)
                       - 818624752
                       - 2 * ((&a22 ^ 0x7253DB1C) & 0xCF34C710)) ^ 0xD0930405)
                     * v28);
  a23 = &a21 + v30;
  a24 = a18;
  v25(&a22);
  a22 = (v26 + 342) ^ ((&a22 ^ 0x6DF41809) * v28);
  a23 = v29;
  a24 = a18;
  v25(&a22);
  a22 = (v26 + 342) ^ ((((&a22 | 0x9642B3CC) - (&a22 & 0x9642B3CC)) ^ 0xFBB6ABC5) * v28);
  a23 = v24;
  a24 = a18;
  v25(&a22);
  a22 = (v26 + 394) ^ (1755732067
                     * ((104643172 - (&a22 | 0x63CBA64) + (&a22 | 0xF9C3459B)) ^ 0x2705F840));
  a23 = a18;
  v31 = sub_100070A3C((uint64_t)&a22);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a14
                                                      + 8
                                                      * ((1000 * ((_DWORD)a24 == ((v26 + 799) ^ 0xB4BC2A97))) ^ v26))
                                          - 4))(v31);
}

uint64_t sub_100075D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  uint64_t v20;
  int v21;
  int v22;

  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8
                                        * ((1430 * (a20 == v22 + ((6 * (v21 ^ 0xF7) - 109819019) & 0x68BB7FF) - 1023)) ^ v21))
                            - 4))();
}

uint64_t sub_100075D68@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  uint64_t v14;
  _BYTE *v15;
  int v16;

  *v15 = a9 ^ (a1 + 97) & 0xF4 ^ 0x88;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((106 * (a14 == v16)) ^ a1))
                            - ((a1 - 721939595) & 0x2B07EFFF)
                            + 1019))();
}

uint64_t sub_100075DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  int v15;
  unsigned int v16;
  _BOOL4 v17;

  v17 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_100212870 + (v15 | 2)))(v14 ^ v16, 1644418179) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a14 + 8 * ((v17 * (((v15 + 181) | 0x26A) - 738)) | v15)) - 4))();
}

uint64_t sub_100075E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20)
{
  int v20;
  uint64_t v21;
  int v22;
  int v23;

  v23 = (a20 ^ v22) - (((a20 ^ v22) << (5 * ((v20 + 21) ^ 0xD4) + ((v20 + 21) ^ 0xA9))) & 0x256989FC) + 313836798;
  return ((uint64_t (*)(void))(*(_QWORD *)(v21
                                        + 8
                                        * ((489
                                          * (((2 * v23) & 0x77EF3FFE ^ 0x256909FC) + (v23 ^ 0xA9435B01) + 1609296719 != 467897166)) ^ (v20 + 1557)))
                            - 4))();
}

uint64_t sub_100075ED4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((306 * (v1 + v0 + 1141399553 >= ((v2 + 518) ^ 0x2A3u))) ^ v2))
                            - 4))();
}

uint64_t sub_100075F40(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((21
                                          * (v2 - a1 >= (((a2 ^ 0xF4657C95) - 4100290989) ^ (unint64_t)(a2 ^ 0x61Au)))) ^ a2))
                            - 12))();
}

uint64_t sub_100075F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  unsigned int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * ((((a7 - 263) ^ 0x21F) * (v8 < 0x20)) ^ a7))
                                                  - (a7 - v7 - 1089)
                                                  + 4100292154))(a1, 0);
}

uint64_t sub_100075FD0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v10 = v8 + (a4 ^ (a3 + 516) ^ v5);
  v11 = *(_OWORD *)(v4 + v10 - 15);
  v12 = *(_OWORD *)(v4 + v10 - 31);
  v13 = a1 + v10;
  *(_OWORD *)(v13 - 15) = v11;
  *(_OWORD *)(v13 - 31) = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((1277 * ((v7 & 0xFFFFFFE0) == 32)) ^ (v6 + a4 + 559))) - 8))();
}

void sub_10007602C()
{
  JUMPOUT(0x100075FE0);
}

uint64_t sub_100076038(uint64_t a1)
{
  int v1;
  int v2;
  void (*v3)(_BYTE *);
  int v4;
  int v5;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[4];
  unsigned int v12;
  uint64_t v13;

  v5 = (v2 ^ 0x615) + 799;
  *v7 = a1;
  *v8 = v1;
  v13 = v10;
  v12 = v5 + 535753261 * ((2 * (v11 & 0x523675F0) - v11 - 1379300850) ^ 0xA73D8421) - 746;
  v3(v11);
  v12 = (v5 ^ 0x283)
      + 535753261 * ((v11 + 1479933763 - 2 * (v11 & 0x5835FF43)) ^ 0x52C1F16C)
      - 103;
  v13 = v9;
  v3(v11);
  return v4 ^ 0xB4BC2968;
}

void sub_1000762E4(uint64_t a1)
{
  int v1;

  v1 = 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  __asm { BR              X13 }
}

uint64_t sub_1000763EC()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((53
                                          * (((2 * v1) & 0xFD6FA6EC ^ 0xCC0DA444)
                                           + (v1 ^ 0x19B121DC)
                                           + (((72 * (v0 ^ 0x69E) - 1583) | 0x212) ^ 0xDFEB3FEF) != 1587745138)) ^ v0))
                            - 8))();
}

uint64_t sub_100076468()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((178 * (v0 + (((v1 - 1216) | 0x204) ^ 0x81482FFE) < 8)) ^ v1))
                            - (((v1 - 559) | 0x10u) ^ 0x41DLL)))();
}

uint64_t sub_1000764EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7
                                                                                 + 8
                                                                                 * (int)(a3 ^ (1964
                                                                                             * ((v6 + v5 + a5) > 0xFFFFFFEF))))
                                                                     - (((_DWORD)a3 + 140) | 0x11u)
                                                                     + 1037))(a1, a2, a3, a2);
}

uint64_t sub_100076528(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BOOL4 v23;

  v14 = (a5 + a8 + 16);
  v15 = v14 + v13;
  v16 = v14 & 0xF;
  v17 = v16 - v15;
  v18 = (v11 | v16) - v15;
  v19 = (v9 | v16) - v15;
  v23 = (unint64_t)(v8 - v13) > 0xF
     && v17 + v10 >= ((347 * (a3 ^ 0x377u)) ^ 0x401uLL)
     && (unint64_t)(v18 + 1) > 0xF
     && v19 >= (((a3 ^ 0x377u) + 1532) ^ 0x5EFuLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((248 * v23) ^ a3)) - 4))();
}

uint64_t sub_1000765B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7
                                                                       + 8
                                                                       * ((794 * (v6 >= (a6 ^ 0x676u) - 889)) ^ a6))
                                                           - ((a6 - 1102) ^ 0x1B9)))(a1, a2, 0);
}

uint64_t sub_1000765EC(int a1, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16x4_t v72;
  int8x16x4_t v73;

  v72.val[1].i64[0] = (a2 + 11) & 0xF;
  v72.val[1].i64[1] = (a2 + 10) & 0xF;
  v72.val[2].i64[0] = (a2 + 9) & 0xF;
  v72.val[2].i64[1] = (a2 + 8) & 0xF;
  v72.val[3].i64[0] = (a2 + 7) & 0xF;
  v72.val[3].i64[1] = (a2 + 6) & 0xF;
  v67 = a1 + v66 + v65 + v60;
  v68.i64[0] = 0x5555555555555555;
  v68.i64[1] = 0x5555555555555555;
  v72.val[0].i64[0] = v67 & 0xF;
  v72.val[0].i64[1] = (a2 + 12) & 0xF;
  v69.i64[0] = vqtbl4q_s8(v72, (int8x16_t)xmmword_1001B7290).u64[0];
  v73.val[0].i64[1] = (a2 + 4) & 0xF;
  v73.val[1].i64[1] = (a2 + 2) & 0xF;
  v73.val[2].i64[1] = a2 & 0xF;
  v73.val[3].i64[1] = (a2 + 14) & 0xF;
  v73.val[0].i64[0] = (a2 + 5) & 0xF;
  v73.val[1].i64[0] = (a2 + 3) & 0xF;
  v73.val[2].i64[0] = (a2 + 1) & 0xF;
  v73.val[3].i64[0] = (a2 - 1) & 0xF;
  v69.i64[1] = vqtbl4q_s8(v73, (int8x16_t)xmmword_1001B7290).u64[0];
  v70 = vrev64q_s8(vmulq_s8(v69, v68));
  *(int8x16_t *)(a56 - 15 + v67) = veorq_s8(veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v62 + v72.val[0].i64[0] - 15), *(int8x16_t *)(v59 - 15 + v67)), *(int8x16_t *)(v61 + v72.val[0].i64[0] - 15)), *(int8x16_t *)(v63 + v72.val[0].i64[0] + (((a4 - 712) | 0x10Cu) ^ 0x1CCLL) - 15)), vextq_s8(v70, v70, 8uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a59 + 8 * ((56 * ((v64 & 0xFFFFFFF0) == 16)) ^ a4)) - 12))();
}

void sub_10007675C()
{
  JUMPOUT(0x1000766D4);
}

uint64_t sub_100076768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6
                                                                                         + 8
                                                                                         * (v4 ^ (1964
                                                                                                * (v5 != 0x6706F2AA))))
                                                                             - 4))(a1, a2, a3, a4, (v4 + 68));
}

uint64_t sub_1000767B8()
{
  uint64_t v0;
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;

  v11 = v3 > v5;
  v12 = (v7 - 2053965077);
  *(_BYTE *)(v10 + v12) = *(_BYTE *)(*(_QWORD *)(v8 + 8 * (v1 - 455)) + (v12 & 0xF) - 4) ^ *(_BYTE *)(v0 + v12) ^ (23 * (v12 & 0xF)) ^ *(_BYTE *)(*(_QWORD *)(v8 + 8 * (v1 - 354)) + (v12 & 0xF) - 12) ^ *(_BYTE *)(*(_QWORD *)(v8 + 8 * (v1 - 315)) + (v12 & 0xF) - 11);
  v13 = ((9 * (v1 ^ 0x1F4)) ^ 0xC02D010E) + v7;
  LODWORD(v12) = v11 ^ (v13 < v2);
  v14 = v13 < v4;
  if (!(_DWORD)v12)
    v11 = v14;
  return ((uint64_t (*)(_BOOL8))(*(_QWORD *)(v9 + 8 * ((v11 * v6) ^ v1)) - 4))(v14);
}

uint64_t sub_100076870(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8 * ((((((v4 - 371950030) & 0x162B85FF) - 1004) ^ 0x211) * (v3 == a3)) ^ v4))
                            - 4))();
}

uint64_t sub_1000768BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7
                                                                                + 8
                                                                                * ((1013
                                                                                  * (((((a6 - 494) ^ 0xFFFFFA46)
                                                                                     + a6
                                                                                     - 1102) & v6) == 0)) ^ a6))
                                                                    - 8))(a1, a2, a3, (a2 - a3));
}

uint64_t sub_1000768F4(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  char v70;
  char v71;
  unsigned int v72;
  int8x16x4_t v74;

  v68 = a3 - (v64 & 0xFFFFFFF8) + 8;
  v69 = a1 + v66 + v65;
  v70 = v69 - a3;
  v71 = v69 - a3;
  v72 = v69 + v60 - a3;
  v74.val[0].i64[0] = v72 & 0xF;
  v74.val[0].i64[1] = (v70 + 12) & 0xF;
  v74.val[1].i64[0] = (v70 + 11) & 0xF;
  v74.val[1].i64[1] = (v71 + (((_BYTE)a5 + 42) & 0x2E)) & 0xF;
  v74.val[2].i64[0] = (v70 + 9) & 0xF;
  v74.val[2].i64[1] = (v70 + 8) & 0xF;
  v74.val[3].i64[0] = (v70 + 7) & 0xF;
  v74.val[3].i64[1] = (v70 + 6) & 0xF;
  *(int8x8_t *)(v67 - 7 + v72) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v62 + v74.val[0].i64[0] - 7), *(int8x8_t *)(v59 - 7 + v72)), veor_s8(*(int8x8_t *)(v74.val[0].i64[0] + v63 - 6), *(int8x8_t *)(v61 + v74.val[0].i64[0] - 7))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v74, (int8x16_t)xmmword_1001B72A0), (int8x8_t)0x5555555555555555)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a59 + 8 * ((1531 * (v68 == 0)) ^ a5)) - 12))((__n128)xmmword_1001B72A0);
}

void sub_100076A24()
{
  JUMPOUT(0x100076954);
}

uint64_t sub_100076A2C@<X0>(int a1@<W8>)
{
  int v1;
  unsigned int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v2 + 1124717007) & 0x3CF62C37 ^ 0x493) * (v1 == a1)) ^ v2))
                            - ((v2 + 1124717007) ^ 0x4309D5CA)
                            + 523))();
}

uint64_t sub_100076A84(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = (a4 + v9);
  v16 = (((a7 - 1040) | 0x212) ^ 0x21C) & v15;
  *(_BYTE *)(v14 + v15) = *(_BYTE *)(v11 + v16) ^ *(_BYTE *)(v7 + v15) ^ *(_BYTE *)(v16 + v12 + 1) ^ *(_BYTE *)(v10 + v16) ^ (85 * v16);
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((2044 * (a4 - 1 != v8)) ^ (a7 - 578))) - 4))();
}

uint64_t sub_100076AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  char v56;

  v54 = *(_QWORD *)(v50 + 24);
  *(int8x16_t *)(v53 - 112) = veorq_s8(*(int8x16_t *)(*(_QWORD *)(v50 + 16) - 0x72725D8527681A84), (int8x16_t)xmmword_1001B72C0);
  if (v52)
    v55 = v54 == 0x6BB64013357C0BE9;
  else
    v55 = 1;
  v56 = v55;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 + 8 * (int)((1875 * (((-101 * (a5 ^ 0x10)) ^ v56) & 1)) ^ a5)) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_100076B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  int v50;
  uint64_t v51;
  _BOOL4 v53;

  v53 = ((BYTE4(a26) + 4) & 0xF) != 0 || HIDWORD(a26) == ((14 * (v50 ^ 0x1DB)) ^ 0x4FC51D90);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 + 8 * ((962 * v53) ^ v50)) - ((8 * v50) ^ 0xCC0u) + 576))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_100076BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59,int a60)
{
  uint64_t v60;

  return ((uint64_t (*)(void))(*(_QWORD *)(v60
                                        + 8
                                        * (a60 ^ (1839
                                                * (((2 * (a27 - ((2 * a58) & 0x2571D6) - 1337091121)) & 0x7BAD577E ^ 0x255156)
                                                 + ((a27 - ((2 * a58) & 0x2571D6) - 1337091121) ^ 0xBDC41354)
                                                 + 2146172892 != 1036168091))))
                            - 12))();
}

uint64_t sub_100076CAC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * ((11 * (v2 + v1 + v0 + 1110003403 - 555 < ((v0 - 912) ^ 0x419u))) ^ v0)))(1110004800);
}

uint64_t sub_100076D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (a6 ^ (2
                                               * (((483 * (a6 ^ 0x228) - 1948) & a7) == ((347 * (a6 ^ 0x22F)) ^ 0xBDD6AFD1)))))
                            - 12))();
}

uint64_t sub_100076D74(int a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v22;
  int v25;

  v10 = (v7 + v6 + a1);
  v11 = v10 + v9 + 1;
  v12 = (v7 + v6) & 0xF;
  v13 = v12 - v10;
  v14 = v3 + v13;
  v15 = ((133 * (a3 ^ 0x78Bu)) ^ 0x3A2) + v12;
  v16 = v3 + v15;
  v17 = v4 + v13;
  v18 = v4 + v15;
  v19 = v5 + v13;
  v20 = v5 + v15;
  v22 = v14 < v11 && v16 > v9;
  if (v17 < v11 && v18 > v9)
    v22 = 1;
  v25 = v19 < v11 && v20 > v9 || v22;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (v25 | a3)) - 4))();
}

uint64_t sub_100076E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8
                                                                       + 8
                                                                       * (((v7 >= (a7 ^ 0x1E6u) - 565)
                                                                         * ((199 * (a7 ^ 0x3A6)) ^ 0x4AE)) ^ a7))
                                                           - 12))(a1, a2, 0);
}

uint64_t sub_100076E44(int a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16x4_t v19;
  int8x16x4_t v20;

  v19.val[1].i64[0] = ((_BYTE)a2 + 2) & 0xF;
  v19.val[1].i64[1] = ((_BYTE)a2 + 1) & 0xF;
  v19.val[2].i64[0] = a2 & 0xF;
  v19.val[2].i64[1] = ((_BYTE)a2 - 1) & 0xF;
  v19.val[3].i64[0] = ((_BYTE)a2 + 14) & 0xF;
  v19.val[3].i64[1] = ((_BYTE)a2 + 13) & 0xF;
  v20.val[0].i64[0] = ((_BYTE)a2 + 12) & 0xF;
  v20.val[0].i64[1] = ((_BYTE)a2 + 11) & 0xF;
  v20.val[1].i64[0] = (a2 + 10) & 0xF;
  v20.val[1].i64[1] = (a2 + 9) & 0xF;
  v20.val[2].i64[0] = (a2 + 8) & 0xF;
  v20.val[2].i64[1] = ((_BYTE)a2 + 7) & 0xF;
  v20.val[3].i64[0] = ((_BYTE)a2 + 6) & 0xF;
  v20.val[3].i64[1] = ((_BYTE)a2 + 5) & 0xF;
  v12 = v9 + v8 + a1;
  v13.i64[0] = 0x505050505050505;
  v13.i64[1] = 0x505050505050505;
  v14.i64[0] = 0x3939393939393939;
  v14.i64[1] = 0x3939393939393939;
  v19.val[0].i64[0] = v12 & 0xF;
  v19.val[0].i64[1] = ((_BYTE)a2 + 3) & 0xF;
  v15.i64[0] = vqtbl4q_s8(v19, (int8x16_t)xmmword_1001B7290).u64[0];
  v15.i64[1] = vqtbl4q_s8(v20, (int8x16_t)xmmword_1001B7290).u64[0];
  v16 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v11 - 15 + v12), *(int8x16_t *)(v4 + v19.val[0].i64[0] - 15)), veorq_s8(*(int8x16_t *)(v5 + v19.val[0].i64[0] - 15), *(int8x16_t *)(v6 + v19.val[0].i64[0] - 15))));
  v17 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v16, v16, 8uLL), v14), vmulq_s8(v15, v13)));
  *(int8x16_t *)(v11 - 15 + v12) = vextq_s8(v17, v17, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((1694 * ((v7 & 0xFFFFFFF0) == 16)) ^ a4))
                            - (a4 - 411)
                            + 580))();
}

void sub_100076FA0()
{
  JUMPOUT(0x100076F18);
}

uint64_t sub_100076FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,unsigned __int8 *a56,unsigned int a57,uint64_t a58,uint64_t a59)
{
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned __int8 v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  int v141;
  char *v142;
  unsigned int v143;
  char *v144;
  int v145;
  uint64_t v146;
  int v147;
  char *v148;
  int v149;
  int v150;
  unsigned int v151;
  int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  int v203;
  int v204;
  unsigned int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  unsigned int v216;
  int v217;
  int v218;
  unsigned int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  unsigned int v224;
  int v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  int v229;
  int v230;
  int v231;
  char *v232;
  char *v233;
  char *v234;
  char *v235;
  unsigned int v236;
  int v237;
  unsigned int v238;
  int v239;
  int v240;
  unsigned int v241;
  int v242;
  int v243;
  int v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  uint64_t v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  uint64_t v260;
  int v261;
  int v262;
  unsigned int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  uint64_t v268;
  unsigned int v269;
  char *v270;
  unsigned int v271;
  int v272;
  char *v273;
  unsigned int v274;
  int v275;
  int v276;
  char *v277;
  int v278;
  int v279;
  unint64_t v280;
  int v281;
  char *v282;
  int v283;
  int v284;
  int v285;
  int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  unsigned int v326;
  int v327;
  int v328;
  unsigned int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  int v341;
  unsigned int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  int v352;
  int v353;
  unsigned int v354;
  int v355;
  int v356;
  int v357;
  unsigned int v358;
  int v359;
  unsigned int v360;
  int v361;
  int v362;
  unsigned int v363;
  unsigned int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  unsigned int v369;
  int v370;
  int v371;
  unsigned int v372;
  unsigned int v373;
  int v374;
  int v375;
  unsigned int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  unsigned int v385;
  int v386;
  char *v387;
  char *v388;
  unsigned int v389;
  char *v390;
  unsigned int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  uint64_t v396;
  int v397;
  int v398;
  int v399;
  uint64_t v400;
  char *v401;
  char *v402;
  char *v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  unsigned int v418;
  uint64_t v419;
  int v420;
  unsigned int v421;
  uint64_t v422;
  unsigned int v423;
  unsigned int v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  unsigned __int8 v428;
  unsigned int v429;
  int v430;
  int v431;
  uint64_t v432;
  int v433;
  unsigned int v434;
  __int16 v435;
  uint64_t v436;
  unsigned int v437;
  uint64_t v438;
  unsigned __int8 v439;
  unsigned int v440;
  uint64_t v441;
  int v442;
  int v443;
  int v444;
  int v445;
  uint64_t v446;
  unsigned int v447;
  int v448;
  unsigned int v449;
  int v450;
  uint64_t v451;
  int v452;
  unsigned int v453;
  int v454;
  unsigned int v455;
  int v456;
  uint64_t v457;
  int v458;
  unsigned int v459;
  int v460;
  unsigned int v461;
  unsigned int v462;
  uint64_t v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  uint64_t v468;
  unsigned int v469;
  unsigned int v470;
  uint64_t v471;
  unsigned int v472;
  int v473;
  unsigned int v474;
  uint64_t v475;
  unsigned int v476;
  unsigned int v477;
  int v478;
  unsigned int v479;
  uint64_t v480;
  int v481;
  unsigned int v482;
  int v483;
  unsigned int v484;
  uint64_t v485;
  unsigned int v486;
  int v487;
  unsigned int v488;
  unsigned int v489;
  uint64_t v490;
  int v491;
  unsigned int v492;
  int v493;
  int v494;
  unsigned int v495;
  uint64_t v496;
  int v497;
  int v498;
  unsigned int v499;
  unsigned int v500;
  int v501;
  uint64_t v502;
  int v503;
  int v504;
  unsigned int v505;
  int v506;
  uint64_t v507;
  int v508;
  int v509;
  int v510;
  unsigned int v511;
  uint64_t v512;
  unsigned int v513;
  int v514;
  int v515;
  unsigned int v516;
  uint64_t v517;
  int v518;
  unsigned int v519;
  unsigned int v520;
  unsigned int v521;
  uint64_t v522;
  unsigned int v523;
  unsigned int v524;
  int v525;
  int v526;
  int v527;
  uint64_t v528;
  unsigned int v529;
  int v530;
  int v531;
  uint64_t v532;
  int v533;
  unsigned int v534;
  unsigned int v535;
  uint64_t v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  unsigned int v542;
  char *v543;
  unsigned int v544;
  char *v545;
  int v546;
  char *v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unsigned int v552;
  int v553;
  unsigned int v554;
  int v555;
  unsigned int v556;
  int v557;
  unsigned int v558;
  int v559;
  int v560;
  unsigned int v561;
  int v562;
  int v563;
  unsigned int v564;
  unsigned int v565;
  int v566;
  int v567;
  int v568;
  int v569;

  v64 = v61;
  v65 = *(_QWORD *)(v62 + 8 * (v61 - 97)) - 8;
  v66 = *(_QWORD *)(v62 + 8 * (v64 - 102)) - 4;
  v67 = *(_QWORD *)(v62 + 8 * (v64 ^ 0xA2)) - 4;
  v68 = *(unsigned __int8 *)(v67 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BDCLL) ^ 0x49));
  v69 = v64;
  HIDWORD(v70) = v68 ^ (v64 + 885);
  LODWORD(v70) = (v68 ^ 0xFFFFFFBF) << 24;
  LOBYTE(v68) = v70 >> 26;
  v71 = ((*(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BE7) ^ 0xD7)) ^ 0xAC) << 8) | ((*(unsigned __int8 *)(v66 + (*v59 ^ 0xB1)) ^ 0xE4) << 24);
  v72 = *(_QWORD *)(v62 + 8 * (v64 - 77)) - 12;
  v73 = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BDDLL) ^ 0xB8));
  v74 = *(unsigned __int8 *)(v67 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BE0) ^ 0x6BLL));
  HIDWORD(v70) = v74 ^ 1;
  LODWORD(v70) = (v74 ^ 0xFFFFFFBF) << 24;
  v75 = ((v70 >> 26) ^ 0x53) << 16;
  v76 = *(_BYTE *)(v65 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BDBLL) ^ 0x2ELL));
  v77 = *(unsigned __int8 *)(v67 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BE8) ^ 0x47));
  HIDWORD(v70) = v77 ^ 1;
  LODWORD(v70) = (v77 ^ 0xFFFFFFBF) << 24;
  v78 = v71 & 0xFF00FF00 | (*(_BYTE *)(v72 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BE6) ^ 0xECLL))
                                           + 120) ^ 9 | (((v70 >> 26) ^ 0x1E) << 16);
  v79 = v75 | ((*(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BDFLL) ^ 0x77)) ^ 0x63) << 8);
  LOBYTE(v75) = *(_BYTE *)(v72 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BDALL) ^ 0x36));
  v80 = (*(_BYTE *)(v72 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BE2) ^ 0xA9)) + 120) | ((*(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BE3) ^ 0x30)) ^ 0x99) << 8);
  v81 = ((v68 ^ 0xFB) << 16) | ((v73 ^ 0x5C) << 24) | ((v76 ^ 0x69) << 8);
  LODWORD(v65) = *(unsigned __int8 *)(v67 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BE4) ^ 0xCBLL));
  HIDWORD(v70) = v65 ^ 1;
  LODWORD(v70) = (v65 ^ 0xFFFFFFBF) << 24;
  LOBYTE(v65) = *(_BYTE *)(v72 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BDELL) ^ 0xB5));
  v82 = v80 & 0xFF00FFFF | (((v70 >> 26) ^ 0xBA) << 16) | ((*(unsigned __int8 *)(v66
                                                                                                + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BE5) ^ 0x35)) ^ 0x2B) << 24);
  v83 = v79 | ((*(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v60 - 0x6BB64013357C0BE1) ^ 0xBFLL)) ^ 0x32) << 24);
  v84 = *(_QWORD *)(v62 + 8 * (v69 ^ 0x95));
  v85 = v68 ^ 0x61u;
  v86 = *(_QWORD *)(v62 + 8 * (v69 - 29)) - 4;
  LODWORD(v66) = *(_DWORD *)(v84 + 4 * ((v75 + 120) ^ 0xFDu)) ^ 0x4F1596F2 ^ *(_DWORD *)(v86 + 4 * v85);
  LODWORD(v67) = v66 - ((2 * v66) & 0xC9FF3294);
  *(_DWORD *)(v63 - 144) = v69;
  v87 = *(_QWORD *)(v62 + 8 * (v69 ^ 0xBE)) - 8;
  v88 = (v67 + 1694472522) ^ *(_DWORD *)(v87 + 4 * (v73 ^ 0xC9u));
  v89 = v76 ^ 0x51u;
  v90 = *(_QWORD *)(v62 + 8 * (v69 - 89));
  HIDWORD(v551) = v78;
  LODWORD(v85) = *(_DWORD *)(v90 + 4 * v89) ^ v78 ^ (v88 - ((2 * v88) & 0xF12F46B6) - 124279973);
  LODWORD(v551) = v81 & 0xFFFFFF00 | (v75 + 120) ^ 0x2A;
  LOBYTE(v89) = (v65 + 120) ^ 0xA8;
  v91 = v83 & 0xFFFFFF00 | v89;
  v92 = v85;
  v442 = v85;
  LODWORD(v72) = v85 ^ v82 ^ 0x4D;
  LODWORD(v85) = v85 ^ v82;
  *(_DWORD *)(v63 - 168) = v85;
  *(_DWORD *)(v63 - 120) = v72 ^ v91;
  v93 = v72;
  v439 = v72;
  LODWORD(v65) = v72 ^ v91 ^ (v551 - 2 * (v551 & 0x35595E7B ^ ((v75 + 120) ^ 0x2A) & 0x18) + 895049315);
  v464 = BYTE1(v65);
  v466 = v65;
  v473 = BYTE2(v65);
  v94 = v65;
  LODWORD(v65) = *(_DWORD *)(v90 + 4 * (BYTE1(v65) ^ 0xA4u)) ^ *(_DWORD *)(v86 + 4 * (BYTE2(v65) ^ 0xE7u)) ^ 0x61B60C9C;
  v481 = (v72 ^ v91 ^ (v551 - 2 * (v551 & 0x7B ^ ((v75 + 120) ^ 0x2A) & 0x18) + 99));
  LODWORD(v72) = (v65 - ((2 * v65) & 0xAC68726A) - 701220555) ^ *(_DWORD *)(v84 + 4 * (v481 ^ 0x4Au));
  v95 = (v94 ^ 0x8FAE73CA) >> 24;
  *(_DWORD *)(v63 - 192) = v95;
  v96 = v92 ^ *(_DWORD *)(v87 + 4 * (v95 ^ 0x65)) ^ (v72 - ((2 * v72) & 0xC9FF3294) + 1694472522);
  v550 = __PAIR64__(v82, v91);
  v557 = v96 ^ 0x7906C8B5;
  v97 = v96;
  *(_DWORD *)(v63 - 160) = v96;
  v98 = v96 ^ 0x7906C8B5 ^ (v91 - 2 * (v91 & 0x7906C8BD ^ v89 & 8) + 2030487733);
  LODWORD(v89) = v98 ^ v94 ^ 0x8FAE73CA;
  *(_DWORD *)(v63 - 116) = v98;
  v491 = BYTE2(v89);
  v494 = BYTE1(v89);
  v99 = *(_DWORD *)(v86 + 4 * (BYTE2(v89) ^ 0x2Eu)) ^ *(_DWORD *)(v90 + 4 * (BYTE1(v89) ^ 0x9Bu)) ^ 0x61B60C9C;
  *(_DWORD *)(v63 - 256) = (v98 ^ v94 ^ 0xCA);
  v100 = (v99 - ((2 * v99) & 0xAC68726A) - 701220555) ^ *(_DWORD *)(v84
                                                                  + 4 * ((v98 ^ v94 ^ 0xCA) ^ 0xD2u));
  v101 = v89 ^ 0x8450D179;
  LODWORD(v89) = BYTE3(v89);
  *(_DWORD *)(v63 - 200) = v89;
  LODWORD(v89) = (v100 - ((2 * v100) & 0xC9FF3294) + 1694472522) ^ *(_DWORD *)(v87 + 4 * (v89 ^ 0x69));
  v102 = v89 ^ v93 ^ 0x42334914;
  v518 = v89 ^ v93;
  *(_DWORD *)(v63 - 152) = v102 ^ v98;
  v103 = ((v102 ^ v98 ^ 0xD8B544FE) - ((2 * (v102 ^ v98 ^ 0xD8B544FE)) & 0xE1EEE060) - 252219344) ^ v101 ^ 0x9547167F;
  v533 = BYTE2(v103);
  v541 = ((unsigned __int16)(((v102 ^ v98 ^ 0x44FE) - ((2 * (v102 ^ v98 ^ 0x44FE)) & 0xE060) + 28720) ^ v101 ^ 0x167F) >> 8);
  v104 = *(_DWORD *)(v86 + 4 * (BYTE2(v103) ^ 0x89u)) ^ *(_DWORD *)(v90 + 4 * (v541 ^ 0x3Au)) ^ 0x61B60C9C;
  v537 = (((v102 ^ v98 ^ 0xFE) - ((2 * (v102 ^ v98 ^ 0xFE)) & 0x60) + 48) ^ v101);
  v105 = (v104 - ((2 * v104) & 0xAC68726A) - 701220555) ^ *(_DWORD *)(v84 + 4 * (v537 ^ 0xE4u));
  v552 = HIBYTE(v103);
  v106 = (v105 - ((2 * v105) & 0xC9FF3294) + 1694472522) ^ *(_DWORD *)(v87 + 4 * (HIBYTE(v103) ^ 0x1D));
  v499 = v89 ^ v97;
  v566 = (v106 - ((2 * v106) & 0x65D4AB80) - 1293265472) ^ v89 ^ v97;
  v107 = v566 ^ 0xB2EA55C0 ^ v89 ^ v93;
  *(_DWORD *)(v63 - 232) = v566 ^ 0xB2EA55C0;
  *(_DWORD *)(v63 - 248) = v107;
  v108 = ((v107 ^ 0xFE25CD6D) - ((2 * (v107 ^ 0xFE25CD6D)) & 0xE1EEE060) - 252219344) ^ v101;
  *(_DWORD *)(v63 - 208) = ((unsigned __int16)(((v107 ^ 0xCD6D)
                                                               - ((2 * (v107 ^ 0xCD6D)) & 0xE060)
                                                               + 28720) ^ v101) >> 8);
  v109 = *(_DWORD *)(v90
                   + 4
                   * (((unsigned __int16)(((v107 ^ 0xCD6D) - ((2 * (v107 ^ 0xCD6D)) & 0xE060) + 28720) ^ v101) >> 8) ^ 0x6Fu));
  *(_DWORD *)(v63 - 216) = BYTE2(v108);
  v110 = (v85 ^ 0xBAF72DE4) - ((2 * (v85 ^ 0xBAF72DE4)) & 0xF20D916A);
  v111 = v109 ^ *(_DWORD *)(v86 + 4 * (BYTE2(v108) ^ 0xA8u)) ^ 0x61B60C9C;
  v561 = HIBYTE(v108);
  v112 = (v111 - ((2 * v111) & 0xC9FF3294) + 1694472522) ^ *(_DWORD *)(v87 + 4 * (HIBYTE(v108) ^ 0x85));
  v559 = (((v107 ^ 0x6D) - ((2 * (v107 ^ 0x6D)) & 0x60) + 48) ^ v101);
  v113 = (v112 - ((2 * v112) & 0xAC68726A) - 701220555) ^ *(_DWORD *)(v84 + 4 * (v559 ^ 0x25u));
  v564 = v107 ^ v102 ^ v98;
  v114 = (v113 - 121346882 + (~(2 * v113) | 0xE773685)) ^ v102 ^ v564;
  v115 = (v113 - 121346882 + (~(2 * v113) | 0xE773685)) ^ v102;
  *(_DWORD *)(v63 - 124) = v114;
  v116 = v108 ^ v114 ^ 0xDDDF12A;
  v117 = v114 ^ 0xDDDF12A;
  v435 = v114 ^ 0xF12A;
  *(_DWORD *)(v63 - 240) = v108;
  v472 = (v116 ^ 0xC21C02D7) >> 24;
  v452 = ((v116 ^ 0xC21C02D7) >> 16);
  v118 = *(_DWORD *)(v87 + 4 * (v472 ^ 0x1D)) ^ *(_DWORD *)(v86 + 4 * (v452 ^ 0x89u)) ^ 0xFDDE368D;
  v119 = (v118 - ((2 * v118) & 0xF12F46B6) - 124279973) ^ *(_DWORD *)(v90
                                                                    + 4
                                                                    * (((unsigned __int16)(v116 ^ 0x2D7) >> 8) ^ 0x3Au));
  v458 = v116;
  v460 = ((unsigned __int16)(v116 ^ 0x2D7) >> 8);
  v120 = *(_DWORD *)(v84 + 4 * (v116 ^ 0x4Cu));
  *(_DWORD *)(v63 - 184) = v566 ^ 0xB2EA55C0 ^ v113;
  LODWORD(v65) = v566 ^ 0xB2EA55C0 ^ v113 ^ v120 ^ (v119 - ((2 * v119) & 0xAC68726A) - 701220555) ^ v115 ^ 0x7C166C11;
  v529 = v566 ^ 0xB2EA55C0 ^ v113 ^ v120 ^ (v119 - ((2 * v119) & 0xAC68726A) - 701220555);
  v121 = (v65 ^ v108) >> 24;
  *(_DWORD *)(v63 - 224) = v121;
  v539 = v566 ^ 0xC0 ^ v113 ^ v120 ^ (v119 - ((2 * v119) & 0x6A) + 53) ^ v115 ^ 0x11 ^ v108;
  v122 = *(_DWORD *)(v87 + 4 * (v121 ^ 0x9B)) ^ *(_DWORD *)(v84 + 4 * (v539 ^ 0x31u)) ^ 0xB2CBA07F;
  v513 = ((v65 ^ v108) >> 8) ^ 0x86839A;
  v515 = ((unsigned __int16)(v566 ^ 0x55C0 ^ v113 ^ v120 ^ (v119 - ((2 * v119) & 0x726A) + 14645) ^ v115 ^ 0x6C11 ^ v108) >> 8) ^ 0x9A;
  v123 = (v122 - ((2 * v122) & 0xF12F46B6) - 124279973) ^ *(_DWORD *)(v90
                                                                    + 4
                                                                    * (((unsigned __int16)(v566 ^ 0x55C0 ^ v113 ^ v120 ^ (v119 - ((2 * v119) & 0x726A) + 14645) ^ v115 ^ 0x6C11 ^ v108) >> 8) ^ 0xA0u));
  v124 = v123 - ((2 * v123) & 0x32435F8E);
  v125 = v65 ^ v108 ^ 0xE4977269;
  v508 = ((v65 ^ v108) >> 16);
  v126 = (v124 - 1725845561) ^ *(_DWORD *)(v86 + 4 * (v508 ^ 0xAu));
  v127 = (v126 - ((2 * v126) & 0x21494C78) - 1868257732) ^ v529;
  *(_DWORD *)(v63 - 128) = v127;
  v128 = v127 ^ 0x6D273C96;
  v129 = v127 ^ 0x6D273C96 ^ v65;
  v523 = v65 ^ v117;
  v497 = v65;
  v510 = v65 ^ v117 ^ 0xD2CC21D5;
  v130 = ((v129 ^ 0x5A137D54) - ((2 * (v129 ^ 0x5A137D54)) & 0x3685961C) - 1690121458) ^ v510;
  *(_DWORD *)(v63 - 132) = v130;
  v131 = v130 ^ 0x4FC3EB16;
  v132 = ((v130 ^ 0xC85C3316) - 2 * ((v130 ^ 0x4FC3EB16) & 4 ^ (v130 ^ 0xC85C3316) & 0x6214E8C7) + 1645537475) ^ v125 ^ 0x479AB031;
  v546 = (((v130 ^ 0x16) - 2 * ((v130 ^ 0x16) & 4 ^ (v130 ^ 0x16) & 0xC7) - 61) ^ v125);
  v568 = ((unsigned __int16)(((v130 ^ 0x3316)
                                             - 2 * ((v130 ^ 0xEB16) & 4 ^ (v130 ^ 0x3316) & 0xE8C7)
                                             - 5949) ^ v125 ^ 0xB031) >> 8);
  v133 = *(_DWORD *)(v90 + 4 * (v568 ^ 0x3Au)) ^ *(_DWORD *)(v84 + 4 * (v546 ^ 0xAAu)) ^ 0x2EA39A6E;
  v134 = (v133 - 1725845561 + (~(2 * v133) | 0xCDBCA071) + 1) ^ *(_DWORD *)(v86 + 4 * (BYTE2(v132) ^ 0x89u));
  LODWORD(v85) = (v134 - ((2 * v134) & 0xC9FF3294) + 1694472522) ^ *(_DWORD *)(v87 + 4 * (HIBYTE(v132) ^ 0x1D));
  LODWORD(v65) = v85 ^ v65;
  v135 = ((v65 ^ 0xA6C48CD5) - ((2 * (v65 ^ 0xA6C48CD5)) & 0xC429D186) + 1645537475) ^ v125;
  v136 = v110 + 2030487733;
  v137 = *(_DWORD *)(v90 + 4 * (BYTE1(v135) ^ 0x6Fu)) ^ *(_DWORD *)(v87 + 4 * (HIBYTE(v135) ^ 5));
  v530 = (((v65 ^ 0xD5) - ((2 * (v65 ^ 0xD5)) & 0x86) - 61) ^ v125);
  LODWORD(v89) = ((v137 ^ 0x9C683A11) - 2 * ((v137 ^ 0x9C683A11) & 0x56343937 ^ v137 & 2) - 701220555) ^ *(_DWORD *)(v84 + 4 * (v530 ^ 0x25u));
  LOWORD(v110) = v128 ^ v85;
  v138 = v128 ^ v85 ^ *(_DWORD *)(v86 + 4 * (BYTE2(v135) ^ 0xA8u)) ^ (v89 - ((2 * v89) & 0x32435F8E) - 1725845561);
  v139 = v130 ^ 0x4FC3EB16 ^ v138;
  LODWORD(v89) = v139 ^ v135;
  *(_DWORD *)(v63 - 176) = v139;
  v555 = ((unsigned __int16)(v139 ^ ((v65 ^ 0x8CD5) - ((2 * (v65 ^ 0x8CD5)) & 0xD186) - 5949) ^ v125) >> 8);
  v478 = v557 ^ v136;
  LODWORD(v87) = *(_DWORD *)(v87 + 4 * (((v139 ^ v135) >> 24) ^ 0x47)) ^ *(_DWORD *)(v90 + 4 * (v555 ^ 0x44u));
  LODWORD(v84) = ((v87 ^ 0x9C683A11) - 2 * ((v87 ^ 0x9C683A11) & 0x5634393D ^ v87 & 8) - 701220555) ^ *(_DWORD *)(v84 + 4 * ((v139 ^ ((v65 ^ 0xD5) - ((2 * (v65 ^ 0xD5)) & 0x86) - 61) ^ v125) ^ 0xD5u));
  v430 = ((v139 ^ v135) >> 16);
  v140 = (v84 - ((2 * v84) & 0x32435F8E) - 1725845561) ^ *(_DWORD *)(v86 + 4 * (v430 ^ 0xCBu));
  HIDWORD(v549) = v138 ^ 0xE881A4D9 ^ (v140 - ((2 * v140) & 0xD0ED12E0) + 1752598896);
  v433 = v138 ^ v65;
  LODWORD(v549) = v138 ^ v65 ^ 0x378A6DD3 ^ (HIDWORD(v549) - ((2 * HIDWORD(v549)) & 0x2651458E) + 321430215);
  HIDWORD(v548) = v139 ^ 0x4018996 ^ v549;
  LODWORD(v548) = (HIDWORD(v548) - ((2 * HIDWORD(v548)) & 0x41A39812) + 550620169) ^ v139 ^ v135;
  LODWORD(v85) = v128 ^ v85 ^ 0x1B9155BD;
  v141 = *(_DWORD *)(v63 - 144);
  v142 = (char *)*(&off_100212870 + v141 + 15) - 8;
  v143 = (BYTE2(v85) - 2127935507 + ((2 * BYTE2(v85) + 88) & 0x380 ^ 0xF77B6FFF)) ^ *(_DWORD *)&v142[4 * (BYTE2(v85) ^ 0x2D)];
  LODWORD(v84) = ((BYTE2(v135) ^ 0x89) - 2127935507 + ((2 * (BYTE2(v135) ^ 0x89) + 88) & 0x380 ^ 0xF77B6FFF)) ^ *(_DWORD *)&v142[4 * (BYTE2(v135) ^ 0xA4)];
  v144 = (char *)*(&off_100212870 + v141 + 76) - 8;
  v145 = (v143 - ((2 * v143) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4 * (BYTE1(v110) ^ 0x47)];
  v146 = (uint64_t)*(&off_100212870 + v141 + 73);
  v147 = v84 - ((2 * v84) & 0xFB34EC1A) - 40208883;
  v148 = (char *)*(&off_100212870 + (v141 ^ 0x56)) - 4;
  v149 = *(_DWORD *)&v148[4 * ((v131 ^ v65) ^ 0x53)];
  v150 = v147 ^ *(_DWORD *)(v146 + 4 * (HIBYTE(v135) ^ 0xCC));
  v428 = BYTE1(v131) ^ BYTE1(v65);
  v151 = *(_DWORD *)&v142[4 * (((v131 ^ v65) >> 16) ^ 0xAA)] ^ *(_DWORD *)(v146 + 4 * (((v131 ^ v65) >> 24) ^ 0x3E)) ^ ((((v131 ^ v65) >> 16) ^ 0x87) - 2127935507 + ((2 * (((v131 ^ v65) >> 16) ^ 0x87) + 88) & 0x380 ^ 0xF77B6FFF)) ^ (181304767 * v149 - ((362609534 * v149 + 498793862) & 0xFB34EC1A) + 209188048);
  v535 = v65;
  v152 = *(_DWORD *)&v148[4 * (v65 ^ 0x74)];
  v153 = (181304767 * v152 - ((362609534 * v152 + 498793862) & 0x4A7B9102) + 874202948) ^ *(_DWORD *)&v144[4 * (BYTE1(v65) ^ 0x5A)];
  v544 = v153 - ((2 * v153) & 0xFB34EC1A);
  v558 = (BYTE2(v65) ^ 0x4C) - 2127935507 + ((2 * (BYTE2(v65) ^ 0x4C) + 88) & 0x380 ^ 0xF77B6FFF);
  v503 = BYTE2(v65);
  v505 = ((unsigned __int16)(((v65 ^ 0x8CD5) - ((2 * (v65 ^ 0x8CD5)) & 0xD186) - 5949) ^ v125) >> 8) ^ 0xB0;
  v526 = v150 - ((2 * v150) & 0x4A7B9102);
  v520 = v151 - ((2 * v151) & 0x4A7B9102);
  v554 = (v145 - ((2 * v145) & 0xFB34EC1A) - 40208883) ^ *(_DWORD *)(v146 + 4 * BYTE3(v85)) ^ (181304767
                                                                                               * *(_DWORD *)&v148[4 * (v110 ^ 0x7D)]
                                                                                               + 249396931);
  v154 = *(_DWORD *)&v142[4 * (((v478 ^ 0xE9B45E6C) >> 16) ^ 0xF5)] ^ ((((v478 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                      - 2127935507
                                                                                      + ((2
                                                                                        * (((v478 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                        + 88) & 0x380 ^ 0xF77B6FFF));
  v155 = *(_DWORD *)(v63 - 116) ^ 0x31676F78;
  v156 = *(_DWORD *)&v142[4 * (BYTE2(v155) ^ 0x7B)] ^ ((BYTE2(v155) ^ 0x56)
                                                     - 2127935507
                                                     + ((2 * (BYTE2(v155) ^ 0x56) + 88) & 0x380 ^ 0xF77B6FFF));
  v157 = (v156 - ((2 * v156) & 0xFB34EC1A) - 40208883) ^ *(_DWORD *)(v146 + 4 * HIBYTE(v155));
  v158 = *(_DWORD *)&v142[4 * (v491 ^ 0x34)] ^ ((v491 ^ 0x19)
                                              - 2127935507
                                              + ((2 * ((unsigned __int16)v491 ^ 0x19) + 88) & 0x380 ^ 0xF77B6FFF));
  v159 = (v158 - ((2 * v158) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4 * (v494 ^ 5)];
  v492 = v157 - ((2 * v157) & 0x4A7B9102);
  v495 = v159 - ((2 * v159) & 0xFB34EC1A);
  v160 = *(_DWORD *)&v148[4 * (*(_DWORD *)(v63 - 160) ^ 0xDF)];
  v161 = *(_DWORD *)(v63 - 160) ^ 0x5A18571F;
  v162 = *(_DWORD *)(v146 + 4 * HIBYTE(v161)) ^ ((BYTE2(v161) ^ 0xC1)
                                                 - 2127935507
                                                 + ((2 * (BYTE2(v161) ^ 0xC1) + 88) & 0x380 ^ 0xF77B6FFF)) ^ *(_DWORD *)&v142[4 * (BYTE2(v161) ^ 0xEC)] ^ (181304767 * v160 - ((362609534 * v160 + 498793862) & 0xFB34EC1A) + 209188048);
  v488 = v162 - ((2 * v162) & 0x4A7B9102);
  v163 = *(_DWORD *)(v146 + 4 * ((v478 ^ 0xE9B45E6C) >> 24)) ^ (v154 - ((2 * v154) & 0xFB34EC1A) - 40208883);
  v486 = v163 - ((2 * v163) & 0x4A7B9102);
  LOWORD(v154) = v129 ^ 0x8EA4;
  v129 ^= 0x35C48CD5u;
  v164 = *(_DWORD *)&v142[4 * (BYTE2(v132) ^ 0xDE)] ^ ((BYTE2(v132) ^ 0xF3)
                                                     - 2127935507
                                                     + ((2 * (BYTE2(v132) ^ 0xF3) + 88) & 0x380 ^ 0xF77B6FFF));
  v165 = *(_DWORD *)&v142[4 * (BYTE2(v129) ^ 0xFE)] ^ ((BYTE2(v129) ^ 0xD3)
                                                     - 2127935507
                                                     + ((2 * (BYTE2(v129) ^ 0xD3) + 88) & 0x380 ^ 0xF77B6FFF));
  v166 = *(_DWORD *)&v148[4 * (v131 ^ 0xC5)];
  v167 = (v164 - ((2 * v164) & 0xFB34EC1A) - 40208883) ^ *(_DWORD *)(v146 + 4 * (HIBYTE(v132) ^ 0x36));
  v168 = BYTE2(*(_DWORD *)(v63 - 128));
  v169 = *(_DWORD *)&v142[4 * (v168 ^ 0xB)] ^ ((v168 ^ 0x26)
                                             - 2127935507
                                             + ((2 * ((unsigned __int16)v168 ^ 0x26) + 88) & 0x380 ^ 0xF77B6FFF));
  v170 = (v169 - ((2 * v169) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4 * (BYTE1(v128) ^ 0x8B)];
  v476 = v167 - ((2 * v167) & 0x4A7B9102);
  v484 = v170 - ((2 * v170) & 0xFB34EC1A);
  v171 = *(_DWORD *)(v63 - 132) ^ 0x2D5C3316;
  v172 = *(_DWORD *)&v144[4 * (BYTE1(v171) ^ 0x20)] ^ ((BYTE2(v171) ^ 0xD7)
                                                     - 2127935507
                                                     + ((2
                                                       * (((BYTE2(v171) ^ 0xD7) + 44) & 0xFFFFFFC1 ^ (BYTE2(v171) ^ 0xD7 | 0x7FFFFFFE))) ^ 0x8849003)) ^ *(_DWORD *)&v142[4 * (BYTE2(v171) ^ 0xFA)] ^ (181304767 * v166 - ((362609534 * v166 + 498793862) & 0x4A7B9102) + 874202948);
  v173 = (v165 - ((2 * v165) & 0xFB34EC1A) - 40208883) ^ *(_DWORD *)(v146 + 4 * HIBYTE(v129)) ^ (181304767
                                                                                                 * *(_DWORD *)&v148[4 * (v154 ^ 0x99)]
                                                                                                 + 249396931);
  v449 = BYTE1(v154) ^ 0x14;
  v429 = v128 ^ 0xA3;
  v455 = v173 - ((2 * v173) & 0x4A7B9102);
  v470 = v172 - ((2 * v172) & 0xFB34EC1A);
  v174 = v464 ^ 0xCE;
  v175 = *(_DWORD *)(v63 - 120);
  v437 = BYTE1(v175) ^ 0xF5;
  v447 = v442 ^ 0x2BEAE26B;
  v176 = *(_DWORD *)&v142[4 * (((v442 ^ 0x2BEAE26Bu) >> 16) ^ 0xEC)] ^ ((((v442 ^ 0x2BEAE26Bu) >> 16) ^ 0xC1)
                                                                                       - 2127935507
                                                                                       + ((2
                                                                                         * (((v442 ^ 0x2BEAE26Bu) >> 16) ^ 0xC1)
                                                                                         + 88) & 0x380 ^ 0xF77B6FFF)) ^ (181304767 * *(_DWORD *)&v148[4 * (v442 ^ 0x1E)] + 249396931);
  v177 = (v176 - ((2 * v176) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4 * (BYTE1(v442) ^ 8)];
  v178 = *(_DWORD *)&v142[4 * (v473 ^ 0x79)] ^ ((v473 ^ 0x54)
                                              - 2127935507
                                              + ((2 * (((v473 ^ 0x54) + 44) & 0xFFFFFFC3 ^ (HIWORD(v466) | 0x7FFFFFFC))) ^ 0x8849007));
  v179 = *(_DWORD *)&v148[4 * (v439 ^ 0x55)];
  v474 = v177 - ((2 * v177) & 0xFB34EC1A);
  v443 = BYTE2(v175);
  v465 = (BYTE2(v175) ^ 0xA7) - 2127935507 + ((2 * (BYTE2(v175) ^ 0xA7) + 88) & 0x380 ^ 0xF77B6FFF);
  v180 = (v178 - ((2 * v178) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4 * v174] ^ (181304767
                                                                                      * *(_DWORD *)&v148[4 * (v481 ^ 0x39)]
                                                                                      + 249396931);
  v482 = v180 - ((2 * v180) & 0xFB34EC1A);
  v181 = *(_DWORD *)(v63 - 168);
  v182 = (181304767 * v179 - ((362609534 * v179 + 498793862) & 0xFB34EC1A) + 209188048) ^ ((BYTE2(v181) ^ 0xBA)
                                                                                         - 2127935507
                                                                                         + ((2 * (BYTE2(v181) ^ 0xBA)
                                                                                           + 88) & 0x380 ^ 0xF77B6FFF)) ^ *(_DWORD *)(v146 + 4 * (HIBYTE(v181) ^ 0x2F)) ^ *(_DWORD *)&v142[4 * (BYTE2(v181) ^ 0x97)];
  v467 = v182 + 624806017 + (~(2 * v182) | 0xB5846EFD);
  v183 = BYTE2(*(_DWORD *)(v63 - 124));
  v184 = *(_DWORD *)&v142[4 * (v183 ^ 0x36)] ^ ((v183 ^ 0x1B)
                                              - 2127935507
                                              + ((2 * ((unsigned __int16)v183 ^ 0x1B) + 88) & 0x380 ^ 0xF77B6FFF));
  v185 = *(_DWORD *)&v142[4 * (BYTE2(*(_DWORD *)(v63 - 184)) ^ 0x56)] ^ ((BYTE2(*(_DWORD *)(v63 - 184)) ^ 0x7B)
                                                                                        - 2127935507
                                                                                        + ((2
                                                                                          * (BYTE2(*(_DWORD *)(v63 - 184)) ^ 0x7B)
                                                                                          + 88) & 0x380 ^ 0xF77B6FFF));
  v186 = (v184 - ((2 * v184) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4 * (HIBYTE(v435) ^ 0x42)] ^ (181304767 * *(_DWORD *)&v148[4 * (v435 ^ 0xA4)] + 249396931);
  v187 = *(_DWORD *)&v148[4 * (v115 ^ 0xFB)];
  v188 = (181304767 * v187 - ((362609534 * v187 + 498793862) & 0x4A7B9102) + 874202948) ^ *(_DWORD *)&v144[4 * (BYTE1(v115) ^ 0xEF)];
  v440 = v186 - ((2 * v186) & 0xFB34EC1A);
  LODWORD(v436) = v188 - ((2 * v188) & 0xFB34EC1A);
  v189 = (v185 - ((2 * v185) & 0xFB34EC1A) - 40208883) ^ *(_DWORD *)(v146
                                                                   + 4 * (HIBYTE(*(_DWORD *)(v63 - 184)) ^ 0xD9u)) ^ (181304767 * *(_DWORD *)&v148[4 * (*(_DWORD *)(v63 - 184) ^ 0x79)] + 249396931);
  v190 = *(_DWORD *)&v142[4 * (v452 ^ 0x86)] ^ ((v452 ^ 0xAB)
                                              - 2127935507
                                              + ((2 * ((unsigned __int16)v452 ^ 0xAB) + 88) & 0x380 ^ 0xF77B6FFF));
  v191 = (v190 - ((2 * v190) & 0xFB34EC1A) - 40208883) ^ *(_DWORD *)(v146 + 4 * v472);
  v453 = v460 ^ 0xEE;
  v421 = v458 ^ 0xEA;
  v461 = v191 - ((2 * v191) & 0x4A7B9102);
  v459 = v189 - ((2 * v189) & 0x4A7B9102);
  v192 = *(_DWORD *)&v142[4 * (v430 ^ 0x8B)] ^ ((v430 ^ 0xA6)
                                              - 2127935507
                                              + ((2 * ((unsigned __int16)v430 ^ 0xA6) + 88) & 0x380 ^ 0xF77B6FFF));
  v431 = BYTE2(*(_DWORD *)(v63 - 176));
  v469 = (v431 ^ 0x8F) - 2127935507 + ((2 * ((unsigned __int16)v431 ^ 0x8F) + 88) & 0x380 ^ 0xF77B6FFF);
  LODWORD(v65) = *(_DWORD *)&v142[4 * (BYTE2(v138) ^ 0xE8)] ^ ((BYTE2(v138) ^ 0xC5)
                                                             - 2127935507
                                                             + ((2 * (BYTE2(v138) ^ 0xC5) + 88) & 0x380 ^ 0xF77B6FFF));
  v424 = v428 ^ 0x8E;
  LODWORD(v65) = (181304767 * *(_DWORD *)&v148[4 * (v138 ^ 0xCA)] + 249396931) ^ *(_DWORD *)(v146 + 4 * (HIBYTE(v138) ^ 0x8E)) ^ (v65 - ((2 * v65) & 0xFB34EC1A) - 40208883);
  HIDWORD(v436) = v433 ^ 0x44039AAA;
  v193 = (181304767 * *(_DWORD *)&v148[4 * (v433 ^ 0xDB)] + 249396931) ^ (((v433 ^ 0x44039AAAu) >> 16)
                                                                                         - 2127935507
                                                                                         + ((2
                                                                                           * ((v433 ^ 0x44039AAAu) >> 16)
                                                                                           + 88) & 0x380 ^ 0xF77B6FFF)) ^ *(_DWORD *)&v142[4 * (((v433 ^ 0x44039AAAu) >> 16) ^ 0x2D)];
  v423 = BYTE1(v138) ^ 0x16;
  v426 = v65 - ((2 * v65) & 0x4A7B9102);
  LODWORD(v65) = (v193 - ((2 * v193) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4 * (BYTE1(v433) ^ 0xC0)];
  v194 = *(_DWORD *)(v146 + 4 * (BYTE3(v89) ^ 0x22)) ^ (181304767
                                                        * *(_DWORD *)&v148[4 * (v89 ^ 0xFE)]
                                                        + 249396931) ^ (v192 - ((2 * v192) & 0xFB34EC1A) - 40208883);
  v445 = v65 - ((2 * v65) & 0xFB34EC1A);
  v434 = v194 - ((2 * v194) & 0x4A7B9102);
  v195 = *(_DWORD *)&v148[4 * (v499 ^ 0xEC)];
  LODWORD(v65) = *(_DWORD *)&v142[4 * (v533 ^ 0x32)] ^ ((v533 ^ 0x1F)
                                                      - 2127935507
                                                      + ((2 * ((unsigned __int16)v533 ^ 0x1F) + 88) & 0x380 ^ 0xF77B6FFF));
  v196 = *(_DWORD *)&v148[4 * (v518 ^ 0xE6)];
  v197 = *(_DWORD *)(v146 + 4 * (HIBYTE(v499) ^ 0xCA)) ^ ((BYTE2(v499) ^ 0x2F)
                                                          - 2127935507
                                                          + ((2 * (BYTE2(v499) ^ 0x2F) + 88) & 0x380 ^ 0xF77B6FFF)) ^ *(_DWORD *)&v142[4 * (BYTE2(v499) ^ 2)] ^ (181304767 * v195 - ((362609534 * v195 + 498793862) & 0xFB34EC1A) + 209188048);
  LODWORD(v65) = (v65 - ((2 * v65) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4 * (v541 ^ 0x8C)] ^ (181304767 * *(_DWORD *)&v148[4 * (v537 ^ 0xD9)] + 249396931);
  v198 = *(_DWORD *)(v146 + 4 * ((v518 ^ 0x49A657C7u) >> 24)) ^ ((((v518 ^ 0x49A657C7u) >> 16) ^ 0x35)
                                                                 - 2127935507
                                                                 + ((2
                                                                   * (((v518 ^ 0x49A657C7u) >> 16) ^ 0x35)
                                                                   + 88) & 0x380 ^ 0xF77B6FFF)) ^ *(_DWORD *)&v142[4 * (((v518 ^ 0x49A657C7u) >> 16) ^ 0x18)] ^ (181304767 * v196 - ((362609534 * v196 + 498793862) & 0xFB34EC1A) + 209188048);
  v199 = *(_DWORD *)(v63 - 152);
  v200 = *(_DWORD *)&v142[4 * (((v199 ^ 0xE6485281) >> 16) ^ 0x2D)] ^ (((v199 ^ 0xE6485281) >> 16)
                                                                                      - 2127935507
                                                                                      + ((2
                                                                                        * ((((v199 ^ 0xE6485281) >> 16)
                                                                                          + 44) & 0xFFFFFFC1 ^ (((v199 ^ 0xE6485281) >> 16) | 0x7FFFFFFE))) ^ 0x8849003));
  v542 = v552 ^ 0xAA;
  v553 = (v197 - ((2 * v197) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4 * (BYTE1(v499) ^ 0x2E)];
  v538 = v65 - ((2 * v65) & 0xFB34EC1A);
  v500 = BYTE1(v518) ^ 0xB9;
  v201 = (v200 - ((2 * v200) & 0xFB34EC1A) - 40208883) ^ *(_DWORD *)(v146 + 4 * ((v199 ^ 0xE6485281) >> 24)) ^ (181304767 * *(_DWORD *)&v148[4 * (v199 ^ 0x11)] + 249396931);
  v534 = v198 - ((2 * v198) & 0x4A7B9102);
  v519 = v201 - ((2 * v201) & 0x4A7B9102);
  LODWORD(v65) = *(_DWORD *)&v142[4 * (v508 ^ 0xC1)] ^ ((v508 ^ 0xEC)
                                                      - 2127935507
                                                      + ((2 * ((unsigned __int16)v508 ^ 0xEC) + 88) & 0x380 ^ 0xF77B6FFF));
  v202 = (v65 - ((2 * v65) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4
                                                                       * ((v515 - ((2 * v513) & 0x166) + 179) ^ 0x54)] ^ (181304767 * *(_DWORD *)&v148[4 * (v539 ^ 0xE2)] + 249396931);
  LODWORD(v65) = *(_DWORD *)&v148[4 * (v510 ^ 0x4C)];
  LODWORD(v65) = (181304767 * v65 - ((362609534 * v65 + 498793862) & 0xFB34EC1A) + 209188048) ^ *(_DWORD *)(v146 + 4 * (HIBYTE(v523) ^ 0x91));
  v418 = BYTE1(v510) ^ 0xF4;
  v540 = v202 - ((2 * v202) & 0xFB34EC1A);
  v420 = v65 - ((2 * v65) & 0x4A7B9102);
  v516 = v497 ^ 0xEEA2BFA8;
  LODWORD(v65) = *(_DWORD *)&v142[4 * (((v497 ^ 0xEEA2BFA8) >> 16) ^ 0x86)] ^ ((((v497 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                              - 2127935507
                                                                                              + ((2
                                                                                                * (((v497 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                                + 88) & 0x380 ^ 0xF77B6FFF));
  v203 = (181304767 * *(_DWORD *)&v148[4 * (v497 ^ 0x68)] + 249396931) ^ *(_DWORD *)&v144[4 * (BYTE1(v497) ^ 0x55)] ^ (v65 - ((2 * v65) & 0x4A7B9102) + 624806017);
  LODWORD(v65) = ((v529 ^ 0x231B9DB5) >> 16);
  v415 = v65 ^ 0xEC;
  v514 = (v65 ^ 0xC1) - 2127935507 + ((2 * ((unsigned __int16)v65 ^ 0xC1) + 88) & 0x380 ^ 0xF77B6FFF);
  HIDWORD(v417) = v203 - ((2 * v203) & 0xFB34EC1A);
  v204 = BYTE2(v523);
  v511 = (BYTE2(v523) ^ 0x58) - 2127935507 + ((2 * (BYTE2(v523) ^ 0x58) + 88) & 0x380 ^ 0xF77B6FFF);
  v205 = v566 ^ 0x23489AD4;
  v524 = v561 ^ 0x7B;
  v206 = *(_DWORD *)&v148[4 * (v559 ^ 0x74)];
  v207 = *(_DWORD *)&v148[4 * (v530 ^ 0x60)];
  LODWORD(v72) = *(_DWORD *)&v148[4 * (*(_DWORD *)(v63 - 256) ^ 0xFB)];
  v208 = *(_DWORD *)&v148[4 * (*(_DWORD *)(v63 - 116) ^ 0xB8)];
  v209 = *(_DWORD *)&v148[4 * (v478 ^ 0xAC)];
  v210 = *(_DWORD *)&v148[4 * v429];
  v211 = *(_DWORD *)&v148[4 * (v546 ^ 0xF0)];
  v212 = *(_DWORD *)&v148[4 * (*(_DWORD *)(v63 - 120) ^ 0x57)];
  v213 = *(_DWORD *)&v148[4 * v421];
  LODWORD(v87) = *(_DWORD *)(v63 - 176);
  v214 = *(_DWORD *)&v148[4 * (v87 ^ 0x78)];
  v215 = *(_DWORD *)&v148[4 * (v529 ^ 0x75)];
  LODWORD(v65) = *(_DWORD *)&v148[4 * (v564 ^ 0xBC)];
  v216 = *(_DWORD *)(v63 - 248);
  v217 = *(_DWORD *)&v148[4 * (v216 ^ 0x2A)];
  LODWORD(v148) = *(_DWORD *)&v148[4 * (v566 ^ 0xED)];
  v531 = 181304767 * v207 + 249396931;
  v567 = 181304767 * v72 + 249396931;
  v562 = 181304767 * v209 + 249396931;
  LODWORD(v416) = 181304767 * v211 + 249396931;
  HIDWORD(v416) = 181304767 * v210 + 249396931;
  *(_DWORD *)(v63 - 256) = 181304767 * v212 + 249396931;
  HIDWORD(v427) = 181304767 * v213 + 249396931;
  LODWORD(v417) = 181304767 * v215 + 249396931;
  LODWORD(v422) = 181304767 * (_DWORD)v148 + 249396931;
  LODWORD(v148) = (181304767 * v206 - ((362609534 * v206 + 498793862) & 0xFB34EC1A) + 209188048) ^ *(_DWORD *)(v146 + 4 * v524);
  v218 = *(_DWORD *)&v142[4 * (BYTE2(v564) ^ 0x68)] ^ ((BYTE2(v564) ^ 0x45)
                                                     - 2127935507
                                                     + ((2 * (BYTE2(v564) ^ 0x45) + 88) & 0x380 ^ 0xF77B6FFF)) ^ (181304767 * v65 + 249396931);
  LODWORD(v89) = (v218 - ((2 * v218) & 0x4A7B9102) + 624806017) ^ *(_DWORD *)&v144[4 * (BYTE1(v564) ^ 0xE0)];
  v219 = *(_DWORD *)&v142[4 * (BYTE2(v205) ^ 0x3C)] ^ ((BYTE2(v205) ^ 0x11)
                                                     - 2127935507
                                                     + ((2 * (BYTE2(v205) ^ 0x11) + 88) & 0x380 ^ 0xF77B6FFF));
  LODWORD(v65) = (181304767 * v217 + 249396931) ^ ((BYTE2(v216) ^ 0x37)
                                                 - 2127935507
                                                 + ((2 * (BYTE2(v216) ^ 0x37) + 88) & 0x380 ^ 0xF77B6FFF)) ^ *(_DWORD *)&v142[4 * (BYTE2(v216) ^ 0x1A)];
  v220 = (_DWORD)v148 - ((2 * (_DWORD)v148) & 0x4A7B9102);
  BYTE1(v179) = BYTE1(v216);
  LODWORD(v65) = (v65 - ((2 * v65) & 0xFB34EC1A) - 40208883) ^ *(_DWORD *)(v146 + 4 * (HIBYTE(v216) ^ 0xF9));
  v525 = *(_DWORD *)&v142[4 * (v503 ^ 0x61)];
  v444 = *(_DWORD *)&v142[4 * (v443 ^ 0x8A)];
  HIDWORD(v425) = *(_DWORD *)&v142[4 * (BYTE2(v115) ^ 0x5E)];
  LODWORD(v72) = v568 ^ 0x1A;
  LODWORD(v414) = *(_DWORD *)&v142[4 * (v431 ^ 0xA2)];
  v221 = *(_DWORD *)(v63 - 216);
  LODWORD(v432) = *(_DWORD *)&v142[4 * v415];
  v504 = *(_DWORD *)&v142[4 * (v204 ^ 0x75)];
  *(_DWORD *)(v63 - 216) = *(_DWORD *)&v142[4 * (v221 ^ 0x1A)];
  LODWORD(v148) = ((*(_DWORD *)(v63 - 240) >> 15) & 0x58 ^ 0x48) + (v221 ^ 0x4C64A1B);
  HIDWORD(v414) = *(_DWORD *)&v144[4 * v505];
  v506 = *(_DWORD *)&v144[4 * v424];
  *(_DWORD *)(v63 - 116) = *(_DWORD *)&v144[4 * (BYTE1(*(_DWORD *)(v63 - 116)) ^ 0x85)];
  *(_DWORD *)(v63 - 240) = *(_DWORD *)&v144[4 * (BYTE1(*(_DWORD *)(v63 - 160)) ^ 0xBD)];
  v569 = *(_DWORD *)&v144[4 * (BYTE1(v478) ^ 0xB4)];
  LODWORD(v425) = *(_DWORD *)&v144[4 * v72];
  v479 = (_DWORD)v148 + 2086927809 + ((2 * (_DWORD)v148) & 0x380 ^ 0xF77B6FFF);
  v450 = *(_DWORD *)&v144[4 * v449];
  *(_DWORD *)(v63 - 160) = *(_DWORD *)&v144[4 * v437];
  *(_DWORD *)(v63 - 168) = *(_DWORD *)&v144[4 * (BYTE1(*(_DWORD *)(v63 - 168)) ^ 0xD6)];
  v454 = *(_DWORD *)&v144[4 * v453];
  *(_DWORD *)(v63 - 184) = *(_DWORD *)&v144[4 * (BYTE1(*(_DWORD *)(v63 - 184)) ^ 0xD7)];
  LODWORD(v142) = BYTE3(v87) ^ 0xA6;
  v222 = *(_DWORD *)&v144[4 * v423];
  LODWORD(v413) = *(_DWORD *)&v144[4 * (v555 ^ 0xBE)];
  HIDWORD(v413) = *(_DWORD *)&v144[4 * (BYTE1(v87) ^ 0x76)];
  *(_DWORD *)(v63 - 176) = *(_DWORD *)&v144[4 * v500];
  *(_DWORD *)(v63 - 152) = *(_DWORD *)&v144[4 * (BYTE1(*(_DWORD *)(v63 - 152)) ^ 0xD2)];
  v501 = *(_DWORD *)&v144[4 * (BYTE1(v529) ^ 0x77)];
  v509 = *(_DWORD *)&v144[4 * v418];
  *(_DWORD *)(v63 - 208) = *(_DWORD *)&v144[4 * (*(_DWORD *)(v63 - 208) ^ 0x84)];
  *(_DWORD *)(v63 - 248) = *(_DWORD *)&v144[4 * (BYTE1(v179) ^ 0x2E)];
  LODWORD(v87) = *(_DWORD *)&v144[4 * (BYTE1(*(_DWORD *)(v63 - 232)) ^ 0xC8)];
  LODWORD(v419) = *(_DWORD *)(v146 + 4 * (HIBYTE(v535) ^ 0xB2));
  v527 = v526 + 624806017;
  v521 = v520 + 624806017;
  *(_DWORD *)(v63 - 200) = *(_DWORD *)(v146 + 4 * (*(_DWORD *)(v63 - 200) ^ 7u));
  *(_DWORD *)(v63 - 232) = v492 + 624806017;
  LODWORD(v438) = v488 + 624806017;
  v556 = v486 + 624806017;
  v487 = *(_DWORD *)(v146 + 4 * (HIBYTE(*(_DWORD *)(v63 - 128)) ^ 0x81u));
  LODWORD(v412) = v476 + 624806017;
  HIDWORD(v412) = *(_DWORD *)(v146 + 4 * (HIBYTE(*(_DWORD *)(v63 - 132)) ^ 0x5Au));
  HIDWORD(v422) = *(_DWORD *)(v146 + 4 * (HIBYTE(*(_DWORD *)(v63 - 120)) ^ 0xB8u));
  v448 = *(_DWORD *)(v146 + 4 * HIBYTE(v447));
  *(_DWORD *)(v63 - 192) = *(_DWORD *)(v146 + 4 * (*(_DWORD *)(v63 - 192) ^ 0x4Bu));
  LODWORD(v411) = v455 + 624806017;
  v456 = *(_DWORD *)(v146 + 4 * (HIBYTE(v115) ^ 0xE8));
  v489 = v461 + 624806017;
  v493 = *(_DWORD *)(v146 + 4 * (HIBYTE(*(_DWORD *)(v63 - 124)) ^ 0x80u));
  HIDWORD(v411) = v459 + 624806017;
  v223 = v426 + 624806017;
  v224 = v434 + 624806017;
  v477 = v534 + 624806017;
  v462 = v519 + 624806017;
  HIDWORD(v419) = v420 + 624806017;
  HIDWORD(v432) = v65 - ((2 * v65) & 0x4A7B9102) + 624806017;
  v225 = *(_DWORD *)(v146 + 4 * v142);
  v226 = *(_DWORD *)(v146 + 4 * HIBYTE(HIDWORD(v436)));
  HIDWORD(v438) = *(_DWORD *)(v146 + 4 * v542);
  LODWORD(v409) = *(_DWORD *)(v146 + 4 * ((v529 ^ 0x231B9DB5) >> 24));
  v498 = *(_DWORD *)(v146 + 4 * (*(_DWORD *)(v63 - 224) ^ 0x38u));
  HIDWORD(v409) = *(_DWORD *)(v146 + 4 * HIBYTE(v516));
  HIDWORD(v410) = *(_DWORD *)(v146 + 4 * (HIBYTE(v564) ^ 0x72));
  LODWORD(v410) = *(_DWORD *)(v146 + 4 * HIBYTE(v205));
  LODWORD(v148) = v87 ^ (v219 - ((2 * v219) & 0x4A7B9102) + 624806017);
  v227 = v544 - 40208883;
  LODWORD(v427) = v495 - 40208883;
  v565 = v474 - 40208883;
  HIDWORD(v436) = v482 - 40208883;
  v483 = v538 - 40208883;
  *(_DWORD *)(v63 - 224) = v89 - ((2 * v89) & 0xFB34EC1A) - 40208883;
  v228 = (_DWORD)v148 - ((2 * (_DWORD)v148) & 0xFB34EC1A) - 40208883;
  v229 = v554 ^ v553 ^ 0x6285F181;
  v230 = v223 ^ v222 ^ v229;
  v231 = *(_DWORD *)(v63 - 144);
  v232 = (char *)*(&off_100212870 + v231 - 135) - 8;
  v233 = (char *)*(&off_100212870 + v231 + 63) - 8;
  v234 = (char *)*(&off_100212870 + v231 - 32) - 12;
  v235 = (char *)*(&off_100212870 + v231 + 24) - 8;
  v236 = (v235[*(unsigned __int8 *)(v63 - 105) ^ 0xE4] ^ 0x2F) & 0xFF00FFFF | ((v232[*(unsigned __int8 *)(v63 - 108) ^ 0x3ELL] ^ (*(unsigned __int8 *)(v63 - 108) + (~(2 * *(unsigned __int8 *)(v63 - 108)) | 0xF) - 7) ^ 0xFFFFFFE1) << 24) | (((v234[*(unsigned __int8 *)(v63 - 107) ^ 0x27] + 97) ^ 0x96) << 16);
  v237 = ((v232[*(unsigned __int8 *)(v63 - 104) ^ 0xD3] ^ (*(unsigned __int8 *)(v63 - 104)
                                                                            - ((2 * *(unsigned __int8 *)(v63 - 104)) & 0xF0)
                                                                            - 8) ^ 0xE0) << 24) | ((v233[*(unsigned __int8 *)(v63 - 102) ^ 0xBELL] ^ 0xFC) << 8);
  v238 = (v235[*(unsigned __int8 *)(v63 - 109) ^ 0x41] ^ 0x19) & 0xFF00FFFF | (((v234[*(unsigned __int8 *)(v63 - 111) ^ 0x40] + 97) ^ 0x5A) << 16) | ((v233[*(unsigned __int8 *)(v63 - 110) ^ 0xBBLL] ^ 0x5E) << 8) | ((v232[*(unsigned __int8 *)(v63 - 112) ^ 0x1ELL] ^ (*(unsigned __int8 *)(v63 - 112) + (~(2 * *(unsigned __int8 *)(v63 - 112)) | 0xF) - 7) ^ 0x84) << 24);
  v545 = v233;
  v547 = v232;
  v239 = v235[*(unsigned __int8 *)(v63 - 97) ^ 0x74] ^ 0xBE | (((v234[*(unsigned __int8 *)(v63 - 99) ^ 0xF3] + 97) ^ 2) << 16) | ((v233[*(unsigned __int8 *)(v63 - 98) ^ 0x20] ^ 0xB4) << 8) | ((v232[*(unsigned __int8 *)(v63 - 100) ^ 0xF3] ^ (*(unsigned __int8 *)(v63 - 100) - ((2 * *(unsigned __int8 *)(v63 - 100)) & 0xF0) - 8) ^ 0x85) << 24);
  v543 = v234;
  v240 = v236 | ((v233[*(unsigned __int8 *)(v63 - 106) ^ 9] ^ 0x5B) << 8);
  v241 = (v235[*(unsigned __int8 *)(v63 - 101) ^ 0xF2] ^ 0x96 | v237) & 0xFF00FFFF | (((v234[*(unsigned __int8 *)(v63 - 103) ^ 0xE9] + 97) ^ 0x8A) << 16);
  v242 = v230 ^ 0x2497E332;
  if ((v230 & 0x80) != 0)
    v243 = -128;
  else
    v243 = 128;
  *(_DWORD *)(v63 - 120) = v239 ^ 0x84CEEA93;
  *(_DWORD *)(v63 - 124) = v238 ^ 0x9D6B3DAE;
  *(_DWORD *)(v63 - 128) = v240 ^ 0xC08ACC62;
  *(_DWORD *)(v63 - 132) = v241 ^ 0xA7CD0577;
  HIDWORD(v536) = v224 ^ v413;
  LODWORD(v536) = v225 ^ v469 ^ HIDWORD(v413) ^ v414 ^ (181304767 * v214 + 249396931);
  HIDWORD(v532) = (v445 - 40208883) ^ v226;
  LODWORD(v532) = v531 ^ HIDWORD(v414) ^ v527;
  HIDWORD(v528) = v521 ^ v506;
  LODWORD(v528) = v419 ^ v558 ^ v525 ^ v227;
  HIDWORD(v522) = v411 ^ v450;
  LODWORD(v522) = v412 ^ v425 ^ v416;
  HIDWORD(v517) = (v484 - 40208883) ^ v487 ^ HIDWORD(v416);
  LODWORD(v517) = (v470 - 40208883) ^ HIDWORD(v412);
  HIDWORD(v512) = v501 ^ v409 ^ v514 ^ v432 ^ v417;
  LODWORD(v512) = v509 ^ v511 ^ v504 ^ HIDWORD(v419);
  HIDWORD(v507) = (HIDWORD(v417) - 40208883) ^ HIDWORD(v409);
  LODWORD(v507) = (v540 - 40208883) ^ v498;
  HIDWORD(v502) = HIDWORD(v411) ^ *(_DWORD *)(v63 - 184);
  LODWORD(v502) = v456 ^ ((BYTE2(v115) ^ 0x73) - 2127935507 + ((2 * (BYTE2(v115) ^ 0x73) + 88) & 0x380 ^ 0xF77B6FFF)) ^ HIDWORD(v425) ^ (v436 - 40208883);
  HIDWORD(v496) = (v440 - 40208883) ^ v493;
  LODWORD(v496) = HIDWORD(v427) ^ v454 ^ v489;
  HIDWORD(v490) = v422 ^ v410 ^ v228;
  LODWORD(v490) = HIDWORD(v432) ^ *(_DWORD *)(v63 - 248);
  HIDWORD(v485) = *(_DWORD *)(v63 - 224) ^ HIDWORD(v410);
  LODWORD(v485) = *(_DWORD *)(v63 - 208) ^ v479 ^ *(_DWORD *)(v63 - 216) ^ (v220 + 624806017);
  HIDWORD(v480) = v483 ^ HIDWORD(v438);
  LODWORD(v480) = *(_DWORD *)(v63 - 176) ^ v477;
  HIDWORD(v475) = v462 ^ *(_DWORD *)(v63 - 152);
  LODWORD(v475) = v438 ^ *(_DWORD *)(v63 - 240);
  HIDWORD(v471) = *(_DWORD *)(v63 - 232) ^ *(_DWORD *)(v63 - 116) ^ (181304767 * v208 + 249396931);
  LODWORD(v471) = v562 ^ v569 ^ v556;
  HIDWORD(v468) = v567 ^ *(_DWORD *)(v63 - 200) ^ v427;
  LODWORD(v468) = (v467 + 1) ^ *(_DWORD *)(v63 - 168);
  HIDWORD(v463) = *(_DWORD *)(v63 - 160) ^ v465 ^ HIDWORD(v422) ^ v444 ^ *(_DWORD *)(v63 - 256);
  LODWORD(v463) = HIDWORD(v436) ^ *(_DWORD *)(v63 - 192);
  HIDWORD(v457) = v565 ^ v448;
  LODWORD(v457) = (v243 + v242) ^ v229;
  HIDWORD(v451) = (v231 + 901) ^ 0x4C5;
  LODWORD(v451) = (v231 + 901) ^ 0x49E;
  HIDWORD(v446) = (v231 + 901) ^ 0x47B;
  LODWORD(v446) = (v231 + 901) ^ 0x442;
  HIDWORD(v441) = (v231 + 901) ^ 0x455;
  *(_DWORD *)(v63 - 116) = v231 + 901;
  LODWORD(v441) = (v231 + 901) ^ 0x4A1;
  v245 = *(_DWORD *)(v63 - 116);
  *(_QWORD *)(v63 - 168) = 13;
  v246 = v234[a56[13] ^ 0xF3];
  *(_QWORD *)(v63 - 144) = 1;
  v247 = a56[1] ^ 0x57;
  *(_QWORD *)(v63 - 152) = 10;
  v248 = a56[10] ^ 0xB6;
  v249 = ((v543[v247] + 97) ^ 0xF6) << 16;
  *(_QWORD *)(v63 - 184) = 4;
  v250 = (v545[v248] ^ 0xD1) << 8;
  v251 = a56[4];
  v252 = v547[v251 ^ 0x9A];
  *(_QWORD *)(v63 - 216) = 7;
  LODWORD(v251) = v252 ^ (v251 - ((2 * v251) & 0xF0) - 8) ^ 0xFFFFFFCF;
  v253 = v235[a56[7] ^ 0xD6];
  *(_QWORD *)(v63 - 208) = 2;
  LODWORD(v251) = v253 ^ 0x7C | ((_DWORD)v251 << 24);
  v254 = v545[a56[2]] ^ 0xC3;
  *(_QWORD *)(v63 - 176) = 3;
  v255 = v249 | (v254 << 8);
  v256 = v235[a56[3] ^ 0x74];
  *(_QWORD *)(v63 - 160) = 12;
  v257 = v255 | v256 ^ 0xBE;
  v258 = v547[a56[12] ^ 0x6ELL] ^ (a56[12] - ((2 * a56[12]) & 0xF0) - 8) ^ 0x51;
  *(_QWORD *)(v63 - 200) = 0;
  v259 = (((v246 + ((v245 + 55) ^ 0x29)) ^ 2) << 16) | (v258 << 24);
  v260 = *a56;
  v261 = v547[v260 ^ 0x15];
  *(_QWORD *)(v63 - 248) = 8;
  v262 = v257 | ((v261 ^ ((_DWORD)v260 - ((2 * (_DWORD)v260) & 0xF0) - 8) ^ 0xAE) << 24);
  v263 = v250 | ((v547[a56[8] ^ 0x46] ^ (a56[8] - ((2 * a56[8]) & 0xF0) - 8) ^ 0xFFFFFFE7) << 24);
  *(_QWORD *)(v63 - 192) = 14;
  v264 = v545[a56[14] ^ 0xD5] ^ 0x4B;
  *(_QWORD *)(v63 - 224) = 5;
  v265 = v259 | (v264 << 8);
  *(_QWORD *)(v63 - 240) = 11;
  LODWORD(v251) = v251 & 0xFF00FFFF | (((v543[a56[5] ^ 0x9DLL] + 97) ^ 0xF7) << 16);
  v266 = v235[a56[11] ^ 0xC2] ^ 0x9B;
  *(_QWORD *)(v63 - 256) = 9;
  v267 = v266 | v263;
  v268 = a56[6] ^ 0xA4;
  v269 = v267 & 0xFF00FFFF | (((v543[a56[9] ^ 0x3ELL] + 97) ^ 0xDF) << 16);
  *(_QWORD *)(v63 - 232) = 15;
  v563 = v251 | ((v545[v268] ^ 0x1B) << 8);
  v270 = (char *)*(&off_100212870 + v245 - 812) - 8;
  v271 = *(_DWORD *)&v270[4 * (((unsigned __int16)(v563 ^ v549) >> 8) ^ 0x21)] ^ ((((unsigned __int16)(v563 ^ v549) >> 8) ^ 0x4C)
                                                                                                 - 868706597
                                                                                                 + (~(2 * (((v563 ^ v549) >> 8) ^ 0xB71C4C)) | 0xFFFFFE49)
                                                                                                 + 1);
  v272 = v271 + 89367894 - ((2 * v271) & 0xAA74AAC);
  v273 = (char *)*(&off_100212870 + SHIDWORD(v451)) - 8;
  v274 = v262 ^ HIDWORD(v549) ^ 0x730032AA;
  v275 = v272 ^ *(_DWORD *)&v273[4 * ((v262 ^ BYTE4(v549)) ^ 0xAA)];
  v560 = v235[a56[15] ^ 0x47] ^ 0xBE | v265;
  LODWORD(v260) = *(_DWORD *)&v270[4 * (((unsigned __int16)(v548 ^ v560) >> 8) ^ 0xC0)] ^ ((((unsigned __int16)(v548 ^ v560) >> 8) ^ 0xAD) - 868706597 - ((2 * (((v548 ^ v560) >> 8) ^ 0x7621AD)) & 0x1B6));
  v276 = v275 - 2045310435 - ((2 * v275) & 0xC2E143A);
  v277 = (char *)*(&off_100212870 + v245 - 944) - 4;
  v278 = *(_DWORD *)&v277[4 * (((v269 ^ HIDWORD(v548)) >> 16) ^ 0x68)];
  HIDWORD(v280) = v278 ^ 0x640;
  LODWORD(v280) = v278 ^ 0xAAF86000;
  v279 = v280 >> 12;
  v281 = *(_DWORD *)&v277[4 * (BYTE2(v262) ^ BYTE6(v549))];
  HIDWORD(v280) = v281 ^ 0x640;
  LODWORD(v280) = v281 ^ 0xAAF86000;
  v282 = (char *)*(&off_100212870 + (int)v451) - 8;
  v283 = (v260 - 2045310435 - ((2 * v260) & 0xC2E143A)) ^ *(_DWORD *)&v282[4
                                                                         * (((v563 ^ v549) >> 24) ^ 0xB7)] ^ (v280 >> 12);
  v284 = *(_DWORD *)&v277[4 * (((v548 ^ v560) >> 16) ^ 0x21)];
  HIDWORD(v280) = v284 ^ 0x640;
  LODWORD(v280) = v284 ^ 0xAAF86000;
  v285 = *(_DWORD *)&v273[4 * ((v563 ^ v549) ^ 0xFB)] ^ ((unsigned __int16)(v269 ^ WORD2(v548)) >> 8) ^ *(_DWORD *)&v270[4 * (((unsigned __int16)(v269 ^ WORD2(v548)) >> 8) ^ 0x23)] ^ 0xC96B33C3 ^ (v280 >> 12);
  LODWORD(v268) = *(_DWORD *)&v277[4 * (((v563 ^ v549) >> 16) ^ 0x1C)];
  HIDWORD(v280) = v268 ^ 0x640;
  LODWORD(v280) = v268 ^ 0xAAF86000;
  LODWORD(v247) = *(_DWORD *)&v282[4 * (((v269 ^ HIDWORD(v548)) >> 24) ^ 0xF6)] ^ (BYTE1(v274)
                                                                                 - 868706597
                                                                                 - ((v274 >> 7) & 0x1B6)) ^ *(_DWORD *)&v270[4 * (BYTE1(v274) ^ 0x6D)] ^ ((v280 >> 12) - 2045310435 - ((2 * (v280 >> 12)) & 0xC2E143A));
  LODWORD(v268) = v283 + 89367894 - ((2 * v283) & 0xAA74AAC);
  v286 = HIDWORD(v536) ^ *(_DWORD *)&v282[4 * (((v548 ^ v560) >> 24) ^ 0x76)] ^ v279 ^ v276;
  v287 = v536 ^ *(_DWORD *)&v273[4 * ((v548 ^ v560) ^ 0x46)] ^ (v247
                                                                               + 89367894
                                                                               - ((2 * v247) & 0xAA74AAC));
  LODWORD(v268) = HIDWORD(v532) ^ *(_DWORD *)&v273[4 * ((v269 ^ BYTE4(v548)) ^ 0x5F)] ^ v268;
  v288 = v457 ^ *(_DWORD *)&v282[4 * HIBYTE(v274)] ^ (v285 - 2045310435 - ((2 * v285) & 0xC2E143A));
  v289 = v286 ^ 0xF9388C2F;
  LODWORD(v247) = *(_DWORD *)&v277[4 * ((v286 ^ 0xF9388C2F) >> 16)];
  HIDWORD(v280) = v247 ^ 0x640;
  LODWORD(v280) = v247 ^ 0xAAF86000;
  LODWORD(v247) = v280 >> 12;
  LODWORD(v260) = *(_DWORD *)&v277[4 * (BYTE2(v287) ^ 0xDF)];
  HIDWORD(v280) = v260 ^ 0x640;
  LODWORD(v280) = v260 ^ 0xAAF86000;
  v290 = v280 >> 12;
  v291 = *(_DWORD *)&v277[4 * (BYTE2(v268) ^ 0x66)];
  HIDWORD(v280) = v291 ^ 0x640;
  LODWORD(v280) = v291 ^ 0xAAF86000;
  v292 = (v280 >> 12) ^ *(_DWORD *)&v270[4 * (BYTE1(v288) ^ 5)] ^ ((BYTE1(v288) ^ 0x68)
                                                                 - 868706597
                                                                 - ((2 * ((v288 >> 8) ^ 0x42BD68)) & 0x1B6));
  LODWORD(v247) = (v247 + 89367894 - ((2 * v247) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4 * (v268 ^ 0xB6)];
  v293 = (v292 + 89367894 - ((2 * v292) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4 * (v286 ^ 0x61)];
  v294 = (((unsigned __int16)(v286 ^ 0x8C2F) >> 8) - 868706597 - (((v286 ^ 0xF9388C2F) >> 7) & 0x1B6)) ^ 0xD678EAEF ^ *(_DWORD *)&v270[4 * (((unsigned __int16)(v286 ^ 0x8C2F) >> 8) ^ 0x6D)];
  v295 = *(_DWORD *)&v282[4 * (BYTE3(v268) ^ 0x43)] ^ 0x240D51A3;
  v296 = v294 + v295 - 2 * (v294 & v295);
  v297 = *(_DWORD *)&v277[4 * (BYTE2(v288) ^ 0xBD)];
  HIDWORD(v280) = v297 ^ 0x640;
  LODWORD(v280) = v297 ^ 0xAAF86000;
  v298 = *(_DWORD *)&v282[4 * HIBYTE(v289)] ^ (v290 - 2045310435 - ((2 * v290) & 0xC2E143A));
  v299 = (v298 + 89367894 - ((2 * v298) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4 * (v288 ^ 0xAB)];
  v300 = *(_DWORD *)&v282[4 * (HIBYTE(v288) ^ 0x42)] ^ v554 ^ *(_DWORD *)&v270[4 * (BYTE1(v287) ^ 0x48)] ^ ((BYTE1(v287) ^ 0x25) - 868706597 - ((2 * ((v287 >> 8) ^ 0xDDF25)) & 0x1B6)) ^ (v247 - 2045310435 - ((2 * v247) & 0xC2E143A));
  v301 = v532 ^ *(_DWORD *)&v270[4 * (BYTE1(v268) ^ 0x39)] ^ (v299 - 868706597 - ((2 * v299) & 0x98712DB6));
  v302 = HIDWORD(v528) ^ *(_DWORD *)&v282[4 * (HIBYTE(v287) ^ 0xD)] ^ (v293 - 2045310435 - ((2 * v293) & 0xC2E143A));
  v303 = v528 ^ *(_DWORD *)&v273[4 * (v287 ^ 0xE4)] ^ ((v296 ^ (v280 >> 12))
                                                                      + 89367894
                                                                      - ((2 * (v296 ^ (v280 >> 12))) & 0xAA74AAC));
  LODWORD(v247) = *(_DWORD *)&v277[4 * (BYTE2(v303) ^ 0x79)];
  HIDWORD(v280) = v247 ^ 0x640;
  LODWORD(v280) = v247 ^ 0xAAF86000;
  BYTE1(v287) = ((unsigned __int16)(WORD2(v528) ^ *(_WORD *)&v282[4 * (HIBYTE(v287) ^ 0xD)] ^ (v293
                                                                                             + 2589
                                                                                             - ((2 * v293) & 0x143A))) >> 8) ^ 0x68;
  LODWORD(v260) = ((v280 >> 12) - 2045310435 - ((2 * (v280 >> 12)) & 0xC2E143A)) ^ *(_DWORD *)&v282[4 * ((v302 ^ 0x2261685Eu) >> 24)];
  LODWORD(v247) = ((BYTE1(v303) ^ 0xD0) - 868706597 - ((2 * ((v303 >> 8) ^ 0x679D0)) & 0x1B6)) ^ *(_DWORD *)&v270[4 * (BYTE1(v303) ^ 0xBD)];
  LODWORD(v247) = (v247 + 89367894 - ((2 * v247) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4 * (v300 ^ 0x76)];
  v304 = ((BYTE1(v301) ^ 0xEC) - 868706597 - ((2 * ((v301 >> 8) ^ 0xE5FEC)) & 0x1B6)) ^ *(_DWORD *)&v270[4 * (BYTE1(v301) ^ 0x81)];
  v305 = *(_DWORD *)&v277[4 * (BYTE2(v301) ^ 0x5F)];
  HIDWORD(v280) = v305 ^ 0x640;
  LODWORD(v280) = v305 ^ 0xAAF86000;
  v306 = v280 >> 12;
  HIDWORD(v280) = *(_DWORD *)&v273[4 * (v302 ^ 0x5E)] ^ 0xEC4482DE;
  LODWORD(v280) = HIDWORD(v280);
  v307 = (v280 >> 28) ^ __ROR4__(*(_DWORD *)&v282[4 * (HIBYTE(v303) ^ 6)] ^ 0x7462B151 ^ (v304- 2045310435- ((2 * v304) & 0xC2E143A)), 28);
  v308 = (v306 - 2045310435 - ((2 * v306) & 0xC2E143A)) ^ *(_DWORD *)&v282[4 * (HIBYTE(v300) ^ 0xD2)];
  v309 = (v308 + 89367894 - ((2 * v308) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4 * (v303 ^ 0x4C)];
  v310 = *(_DWORD *)&v277[4 * (BYTE2(v302) ^ 0x1B)];
  HIDWORD(v280) = v310 ^ 0x640;
  LODWORD(v280) = v310 ^ 0xAAF86000;
  v311 = v280 >> 12;
  v312 = BYTE1(v300) ^ 0xC0;
  v313 = v312 - 868706597 - 2 * (((v300 >> 8) ^ 0xD2CCC0) & 0xDF ^ (v300 >> 8) & 4);
  v314 = *(_DWORD *)&v277[4 * (BYTE2(v300) ^ 0xCC)];
  HIDWORD(v280) = v314 ^ 0x640;
  LODWORD(v280) = v314 ^ 0xAAF86000;
  v315 = HIDWORD(v522) ^ (v280 >> 12) ^ __ROR4__(v307 ^ 0x78071371, 4);
  LOBYTE(v307) = v301 ^ BYTE1(v268) ^ 0x54;
  v316 = v522 ^ *(_DWORD *)&v282[4 * (HIBYTE(v301) ^ 0xE)] ^ v311 ^ (v247 - 2045310435 - ((2 * v247) & 0xC2E143A));
  LODWORD(v247) = BYTE1(v287);
  LODWORD(v268) = HIDWORD(v517) ^ *(_DWORD *)&v270[4 * (BYTE1(v287) ^ 0x6D)] ^ (v309
                                                                              - 868706597
                                                                              - ((2 * v309) & 0x98712DB6));
  v317 = v517 ^ v313 ^ *(_DWORD *)&v273[4 * (v307 ^ 0xCA)] ^ *(_DWORD *)&v270[4 * (v312 ^ 0x6D)] ^ (v260 + 89367894 - ((2 * v260) & 0xAA74AAC));
  LODWORD(v247) = v247 ^ 0x4552953C ^ v268;
  v318 = *(_DWORD *)&v277[4 * BYTE2(v247)];
  HIDWORD(v280) = v318 ^ 0x640;
  LODWORD(v280) = v318 ^ 0xAAF86000;
  v319 = v280 >> 12;
  BYTE1(v301) = BYTE1(v315) ^ 0xE7;
  v320 = *(_DWORD *)&v277[4 * ((v315 ^ 0x99FEE750) >> 16)];
  HIDWORD(v280) = v320 ^ 0x640;
  LODWORD(v280) = v320 ^ 0xAAF86000;
  v321 = (BYTE1(v247) - 868706597 - ((v247 >> 7) & 0x1B6)) ^ *(_DWORD *)&v273[4
                                                                                          * (v316 ^ 0x72)] ^ *(_DWORD *)&v270[4 * (BYTE1(v247) ^ 0x6D)] ^ ((v280 >> 12) + 89367894 - ((2 * (v280 >> 12)) & 0xAA74AAC));
  v322 = *(_DWORD *)&v277[4 * (BYTE2(v317) ^ 2)];
  HIDWORD(v280) = v322 ^ 0x640;
  LODWORD(v280) = v322 ^ 0xAAF86000;
  v323 = *(_DWORD *)&v282[4 * (HIBYTE(v316) ^ 0xA7)] ^ (v280 >> 12);
  v324 = *(_DWORD *)&v277[4 * (BYTE2(v316) ^ 0x3B)];
  HIDWORD(v280) = v324 ^ 0x640;
  LODWORD(v280) = v324 ^ 0xAAF86000;
  LODWORD(v247) = v323 ^ *(_DWORD *)&v273[4 * v247];
  v325 = HIDWORD(v512) ^ *(_DWORD *)&v273[4 * (v315 ^ 0x1E)] ^ ((BYTE1(v317) ^ 0xD9)
                                                                               - 868706597
                                                                               - 2
                                                                               * (((v317 >> 8) ^ 0x9802D9) & 0xDF ^ (v317 >> 8) & 4)) ^ *(_DWORD *)&v270[4 * (BYTE1(v317) ^ 0xB4)] ^ *(_DWORD *)&v282[4 * (BYTE3(v268) ^ 0x61)] ^ (v280 >> 12);
  LODWORD(v268) = v512 ^ *(_DWORD *)&v282[4 * (HIBYTE(v317) ^ 0x98)] ^ (v321 - 2045310435 - ((2 * v321) & 0xC2E143A));
  LODWORD(v260) = *(_DWORD *)&v277[4 * (BYTE2(v325) ^ 5)];
  v326 = HIDWORD(v507) ^ *(_DWORD *)&v273[4 * (v317 ^ 0x3D)] ^ ((BYTE1(v316) ^ 0x29)
                                                                               - 868706597
                                                                               - 2
                                                                               * (((v316 >> 8) ^ 0xA73B29) & 0xDF ^ (v316 >> 8) & 4)) ^ *(_DWORD *)&v282[4 * ((v315 ^ 0x99FEE750) >> 24)] ^ *(_DWORD *)&v270[4 * (BYTE1(v316) ^ 0x44)] ^ v319;
  HIDWORD(v280) = v260 ^ 0x640;
  LODWORD(v280) = v260 ^ 0xAAF86000;
  v327 = v280 >> 12;
  v328 = *(_DWORD *)&v277[4 * (BYTE2(v326) ^ 0xAC)];
  HIDWORD(v280) = v328 ^ 0x640;
  LODWORD(v280) = v328 ^ 0xAAF86000;
  v329 = v507 ^ *(_DWORD *)&v270[4 * (((unsigned __int16)(v315 ^ 0xE750) >> 8) ^ 0x6D)] ^ ((v247 ^ 0x8344AF4B) - 868706597 - 2 * ((v247 ^ 0x8344AF4B) & 0x4C3896DF ^ v247 & 4));
  v330 = BYTE1(v326) ^ 0x50;
  v331 = v330 - 868706597 - ((2 * ((v326 >> 8) ^ 0x56AC50)) & 0x1B6);
  LODWORD(v260) = v325 ^ 0xCD7F8967;
  LODWORD(v247) = *(_DWORD *)&v273[4 * ((v329 ^ BYTE1(v301)) ^ 0x41)] ^ (((unsigned __int16)(v325 ^ 0x8967) >> 8)
                                                                                        - 868706597
                                                                                        - (((v325 ^ 0xCD7F8967) >> 7) & 0x1B6)) ^ *(_DWORD *)&v270[4 * (((unsigned __int16)(v325 ^ 0x8967) >> 8) ^ 0x6D)] ^ ((v280 >> 12) + 89367894 - ((2 * (v280 >> 12)) & 0xAA74AAC));
  v332 = *(_DWORD *)&v277[4 * (BYTE2(v329) ^ 0x81)];
  HIDWORD(v280) = v332 ^ 0x640;
  LODWORD(v280) = v332 ^ 0xAAF86000;
  v333 = ((v280 >> 12) - 2045310435 - ((2 * (v280 >> 12)) & 0xC2E143A)) ^ *(_DWORD *)&v282[4 * BYTE3(v260)];
  v334 = (v333 + 89367894 - ((2 * v333) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4 * (v326 ^ 0x4E)];
  v335 = *(_DWORD *)&v273[4 * (v268 ^ 0xFC)] ^ (v327 + 89367894 - ((2 * v327) & 0xAA74AAC)) ^ ((BYTE1(v329) ^ 0xA0) - 868706597 - ((2 * ((v329 >> 8) ^ 0x6881A0)) & 0x1B6)) ^ *(_DWORD *)&v270[4 * (BYTE1(v329) ^ 0xCD)];
  v336 = *(_DWORD *)&v277[4 * (BYTE2(v268) ^ 0xC6)];
  LODWORD(v280) = __ROR4__((v336 >> 12) ^ 0x26772A4, 17) ^ 0xEE910136;
  HIDWORD(v280) = v280;
  v337 = HIDWORD(v502) ^ *(_DWORD *)&v270[4 * (BYTE1(v268) ^ 0x75)] ^ (v334 - 868706597 - ((2 * v334) & 0x98712DB6));
  v338 = v502 ^ *(_DWORD *)&v282[4 * (HIBYTE(v326) ^ 0x56)] ^ (v335 - 2045310435 - ((2 * v335) & 0xC2E143A));
  v339 = HIDWORD(v496) ^ *(_DWORD *)&v282[4 * (BYTE3(v268) ^ 0x5A)] ^ (v247 - 2045310435 - ((2 * v247) & 0xC2E143A));
  v340 = v496 ^ v331 ^ *(_DWORD *)&v273[4 * v260] ^ *(_DWORD *)&v270[4 * (v330 ^ 0x6D)] ^ *(_DWORD *)&v282[4 * (HIBYTE(v329) ^ 0x68)] ^ ((v280 >> 15) + (v336 << 20));
  v341 = ((BYTE1(v337) ^ 0x9D) - 868706597 - ((2 * ((v337 >> 8) ^ 0xC2489D)) & 0x1B6)) ^ *(_DWORD *)&v270[4 * (BYTE1(v337) ^ 0xF0)];
  v342 = *(_DWORD *)&v277[4 * (BYTE2(v338) ^ 0x8F)];
  v343 = *(_DWORD *)&v273[4 * (v340 ^ 0xC1)] ^ (v342 << 20) ^ (v342 >> 12) ^ 0x640AAF86 ^ (v341 + 89367894 - ((2 * v341) & 0xAA74AAC));
  LODWORD(v247) = *(_DWORD *)&v277[4 * ((v339 ^ 0xCFB8D782) >> 16)];
  HIDWORD(v280) = v247 ^ 0x640;
  LODWORD(v280) = v247 ^ 0xAAF86000;
  LODWORD(v247) = ((v280 >> 12) + 89367894 - ((2 * (v280 >> 12)) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4
                                                                                                * ((v337 ^ BYTE1(v268)) ^ 0x3F)];
  LODWORD(v268) = v343 - 2045310435 - ((2 * v343) & 0xC2E143A);
  LODWORD(v260) = v247 - 2045310435 - ((2 * v247) & 0xC2E143A);
  v344 = ((v338 >> 8) ^ 0xC78FD9) & 0xDF ^ (v338 >> 8) & 4;
  LODWORD(v247) = BYTE1(v338) ^ 0xD9;
  v345 = *(_DWORD *)&v277[4 * (BYTE2(v337) ^ 0x48)];
  HIDWORD(v280) = v345 ^ 0x640;
  LODWORD(v280) = v345 ^ 0xAAF86000;
  v346 = ((BYTE1(v340) ^ 0xCF) - 868706597 - ((2 * ((v340 >> 8) ^ 0xC1CFCF)) & 0x1B6)) ^ *(_DWORD *)&v273[4 * (v339 ^ 0xCC)] ^ *(_DWORD *)&v270[4 * (BYTE1(v340) ^ 0xA2)] ^ ((v280 >> 12) + 89367894 - ((2 * (v280 >> 12)) & 0xAA74AAC));
  v347 = *(_DWORD *)&v277[4 * (BYTE2(v340) ^ 0xCF)];
  HIDWORD(v280) = v347 ^ 0x640;
  LODWORD(v280) = v347 ^ 0xAAF86000;
  v348 = HIDWORD(v490) ^ (((unsigned __int16)(v339 ^ 0xD782) >> 8)
                        - 868706597
                        - (((v339 ^ 0xCFB8D782) >> 7) & 0x1B6)) ^ *(_DWORD *)&v273[4 * (v338 ^ 0x50)] ^ *(_DWORD *)&v270[4 * (((unsigned __int16)(v339 ^ 0xD782) >> 8) ^ 0x6D)] ^ (v280 >> 12) ^ *(_DWORD *)&v282[4 * (HIBYTE(v337) ^ 0xC2)];
  v349 = v490 ^ *(_DWORD *)&v282[4 * (HIBYTE(v338) ^ 0xC7)] ^ (v346 - 2045310435 - ((2 * v346) & 0xC2E143A));
  LODWORD(v268) = HIDWORD(v485) ^ *(_DWORD *)&v282[4 * ((v339 ^ 0xCFB8D782) >> 24)] ^ v268;
  v350 = v485 ^ (v247 - 868706597 - 2 * v344) ^ *(_DWORD *)&v282[4 * (HIBYTE(v340) ^ 0xC1)] ^ *(_DWORD *)&v270[4 * (v247 ^ 0x6D)] ^ v260;
  v351 = *(_DWORD *)&v277[4 * (BYTE2(v349) ^ 0xE6)];
  HIDWORD(v280) = v351 ^ 0x640;
  LODWORD(v280) = v351 ^ 0xAAF86000;
  v352 = v280 >> 12;
  v353 = *(_DWORD *)&v277[4 * (BYTE2(v268) ^ 0x1C)];
  HIDWORD(v280) = v353 ^ 0x640;
  LODWORD(v280) = v353 ^ 0xAAF86000;
  v354 = (((unsigned __int16)(v350 ^ 0xCCA2) >> 8) - 868706597 - (((v350 ^ 0x33C8CCA2) >> 7) & 0x1B6)) ^ *(_DWORD *)&v270[4 * (((unsigned __int16)(v350 ^ 0xCCA2) >> 8) ^ 0x6D)];
  v355 = (v280 >> 12) ^ *(_DWORD *)&v270[4 * (BYTE1(v349) ^ 0xD9)] ^ ((BYTE1(v349) ^ 0xB4)
                                                                    - 868706597
                                                                    - ((2 * ((v349 >> 8) ^ 0x4FE6B4)) & 0x1B6));
  v356 = (v355 + 89367894 - ((2 * v355) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4 * (v348 ^ 0xA1)];
  v357 = (v354 + 89367894 - ((2 * v354) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4 * (v268 ^ 0x3A)];
  v358 = *(_DWORD *)&v273[4 * (v350 ^ 0xA2)] ^ (((unsigned __int16)(v348 ^ 0xBBA1) >> 8)
                                                               - 868706597
                                                               - (((v348 ^ 0x9A77BBA1) >> 7) & 0x1B6)) ^ *(_DWORD *)&v270[4 * (((unsigned __int16)(v348 ^ 0xBBA1) >> 8) ^ 0x6D)] ^ (v352 + 89367894 - ((2 * v352) & 0xAA74AAC));
  HIDWORD(v280) = *(_DWORD *)&v273[4 * (v349 ^ 0x96)] ^ 0x553A556;
  LODWORD(v280) = *(_DWORD *)&v273[4 * (v349 ^ 0x96)];
  HIDWORD(v280) = (v280 >> 29) ^ 0x6615DA09;
  LODWORD(v280) = HIDWORD(v280);
  v359 = (v280 >> 3) - 868706597 - ((2 * (v280 >> 3)) & 0x98712DB6);
  LODWORD(v247) = *(_DWORD *)&v277[4 * ((v348 ^ 0x9A77BBA1) >> 16)];
  HIDWORD(v280) = v247 ^ 0x640;
  LODWORD(v280) = v247 ^ 0xAAF86000;
  LODWORD(v247) = v280 >> 12;
  LODWORD(v260) = *(_DWORD *)&v277[4 * ((v350 ^ 0x33C8CCA2) >> 16)];
  HIDWORD(v280) = v260 ^ 0x640;
  LODWORD(v280) = v260 ^ 0xAAF86000;
  v360 = HIDWORD(v480) ^ *(_DWORD *)&v282[4 * (HIBYTE(v350) ^ 0x17)] ^ (v356 - 2045310435 - ((2 * v356) & 0xC2E143A));
  v361 = BYTE1(v268);
  v362 = v359 ^ *(_DWORD *)&v270[4 * (BYTE1(v268) ^ 0xD1)] ^ (v280 >> 12);
  v363 = *(_DWORD *)&v282[4 * (HIBYTE(v348) ^ 0xBE)] ^ v553 ^ (v362 - 2045310435 - ((2 * v362) & 0xC2E143A));
  v364 = v480 ^ *(_DWORD *)&v282[4 * (HIBYTE(v349) ^ 0x4F)] ^ v247 ^ (v357 - 2045310435 - ((2 * v357) & 0xC2E143A));
  LODWORD(v268) = HIDWORD(v475) ^ *(_DWORD *)&v282[4 * (BYTE3(v268) ^ 0x1B)] ^ (v358
                                                                              - 2045310435
                                                                              - ((2 * v358) & 0xC2E143A));
  v365 = *(_DWORD *)&v277[4 * (BYTE2(v268) ^ 0x7E)];
  HIDWORD(v280) = v365 ^ 0x640;
  LODWORD(v280) = v365 ^ 0xAAF86000;
  v366 = v280 >> 12;
  LODWORD(v247) = *(_DWORD *)&v277[4 * (BYTE2(v364) ^ 1)];
  HIDWORD(v280) = v247 ^ 0x640;
  LODWORD(v280) = v247 ^ 0xAAF86000;
  LODWORD(v247) = ((v280 >> 12) + 89367894 - ((2 * (v280 >> 12)) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4
                                                                                                * (v360 ^ 0xC6)];
  v367 = ((BYTE1(v360) ^ 0x71) - 868706597 - ((2 * ((v360 >> 8) ^ 0xF25B71)) & 0x1B6)) ^ *(_DWORD *)&v270[4 * (BYTE1(v360) ^ 0x1C)];
  v368 = (v367 - 2045310435 - ((2 * v367) & 0xC2E143A)) ^ *(_DWORD *)&v282[4 * (HIBYTE(v364) ^ 0x1F)];
  LODWORD(v260) = *(_DWORD *)&v277[4 * (BYTE2(v360) ^ 0x5B)];
  HIDWORD(v280) = v260 ^ 0x640;
  LODWORD(v280) = v260 ^ 0xAAF86000;
  LODWORD(v260) = v280 >> 12;
  v369 = v361 ^ 0x73F4E0AF ^ v363;
  v370 = *(_DWORD *)&v277[4 * BYTE2(v369)];
  HIDWORD(v280) = v370 ^ 0x640;
  LODWORD(v280) = v370 ^ 0xAAF86000;
  v371 = v280 >> 12;
  HIDWORD(v280) = v366 ^ ((BYTE1(v364) ^ 0x81) - 868706597 - ((2 * ((v364 >> 8) ^ 0x1F0181)) & 0x1B6)) ^ 0xD678EAEF ^ *(_DWORD *)&v270[4 * (BYTE1(v364) ^ 0xEC)];
  LODWORD(v280) = HIDWORD(v280);
  LODWORD(v280) = (v280 >> 11) ^ __ROR4__(*(_DWORD *)&v282[4 * (HIBYTE(v360) ^ 0xF2)] ^ 0x240D51A3, 11) ^ 0xD490839A;
  HIDWORD(v280) = v280;
  v372 = v475 ^ *(_DWORD *)&v273[4 * (v364 ^ 0xB8)] ^ ((BYTE1(v268) ^ 0xAA)
                                                                      - 868706597
                                                                      - 2
                                                                      * (((v268 >> 8) ^ 0x967EAA) & 0xDF ^ (v268 >> 8) & 4)) ^ *(_DWORD *)&v282[4 * (HIBYTE(v363) ^ 0x57)] ^ *(_DWORD *)&v270[4 * (BYTE1(v268) ^ 0xC7)] ^ v260;
  LODWORD(v260) = HIDWORD(v471) ^ (BYTE1(v369) - 868706597 - ((v369 >> 7) & 0x1B6)) ^ *(_DWORD *)&v282[4 * (BYTE3(v268) ^ 0x96)] ^ *(_DWORD *)&v270[4 * (BYTE1(v369) ^ 0x6D)] ^ (v247 - 2045310435 - ((2 * v247) & 0xC2E143A));
  LODWORD(v247) = v471 ^ *(_DWORD *)&v273[4 * (v268 ^ 0x88)] ^ v371 ^ (v368
                                                                                      + 89367894
                                                                                      - ((2 * v368) & 0xAA74AAC));
  v373 = HIDWORD(v468) ^ *(_DWORD *)&v273[4 * v369] ^ ((v280 >> 21)
                                                                      + 89367894
                                                                      - ((2 * (v280 >> 21)) & 0xAA74AAC));
  BYTE2(v268) = BYTE2(v247) ^ 0x4A;
  v374 = *(_DWORD *)&v277[4 * (BYTE2(v372) ^ 0xAF)];
  HIDWORD(v280) = v374 ^ 0x640;
  LODWORD(v280) = v374 ^ 0xAAF86000;
  v375 = v280 >> 12;
  v376 = *(_DWORD *)&v270[4 * (BYTE1(v260) ^ 0x96)] ^ ((BYTE1(v260) ^ 0xFB)
                                                     - 868706597
                                                     - ((2 * ((v260 >> 8) ^ 0x3EA2FB)) & 0x1B6));
  v377 = (v376 + 89367894 - ((2 * v376) & 0xAA74AAC)) ^ *(_DWORD *)&v273[4 * (v247 ^ 0x75)];
  v378 = *(_DWORD *)&v277[4 * (BYTE2(v260) ^ 0xA2)];
  HIDWORD(v280) = v378 ^ 0x640;
  LODWORD(v280) = v378 ^ 0xAAF86000;
  v379 = (((unsigned __int16)(v247 ^ 0xF075) >> 8)
        - 868706597
        - (((v247 ^ 0xB54AF075) >> 7) & 0x1B6)) ^ (v280 >> 12) ^ *(_DWORD *)&v270[4
                                                                                              * (((unsigned __int16)(v247 ^ 0xF075) >> 8) ^ 0x6D)];
  v380 = (v379 - 2045310435 - ((2 * v379) & 0xC2E143A)) ^ *(_DWORD *)&v282[4 * (HIBYTE(v373) ^ 0xED)];
  LODWORD(v247) = *(_DWORD *)&v282[4 * (BYTE3(v247) ^ 0x91)];
  v381 = *(_DWORD *)&v282[4 * (BYTE3(v260) ^ 0x3E)];
  v382 = *(_DWORD *)&v282[4 * (HIBYTE(v372) ^ 0x44)];
  v373 ^= 0xC9AF1D8F;
  LODWORD(v282) = *(_DWORD *)&v273[4 * v373];
  v383 = BYTE1(v373);
  v384 = BYTE1(v373) - 868706597 - ((v373 >> 7) & 0x1B6);
  v385 = *(_DWORD *)&v277[4 * BYTE2(v373)];
  LODWORD(v277) = *(_DWORD *)&v277[4 * BYTE2(v268)];
  HIDWORD(v280) = v277 ^ 0x640;
  LODWORD(v280) = v277 ^ 0xAAF86000;
  v386 = *(_DWORD *)&v270[4 * (BYTE1(v372) ^ 2)];
  LODWORD(v270) = v468 ^ *(_DWORD *)&v273[4 * (v260 ^ 0x9A)] ^ v375 ^ v247 ^ v384 ^ *(_DWORD *)&v270[4 * (v383 ^ 0x6D)];
  LODWORD(v247) = HIDWORD(v463) ^ ((BYTE1(v372) ^ 0x6F) - 868706597 - ((2 * ((v372 >> 8) ^ 0x44AF6F)) & 0x1B6)) ^ v381 ^ v386 ^ v282;
  LODWORD(v282) = v463 ^ *(_DWORD *)&v273[4 * (v372 ^ 0x24)] ^ (v380
                                                                               + 89367894
                                                                               - ((2 * v380) & 0xAA74AAC));
  LODWORD(v268) = HIDWORD(v457) ^ v382 ^ (v385 >> 12) ^ (v385 << 20) ^ (v377 - 2045310435 - ((2 * v377) & 0xC2E143A));
  v387 = (char *)*(&off_100212870 + SHIDWORD(v446)) - 8;
  v388 = (char *)*(&off_100212870 + (int)v446) - 12;
  v389 = v247 ^ (v280 >> 12);
  LODWORD(v273) = *(_DWORD *)&v387[4 * (v282 ^ 7)] ^ *(_DWORD *)&v388[4 * (BYTE1(v268) ^ 0x8C)] ^ 0x8C3D4D6C;
  v390 = (char *)*(&off_100212870 + SHIDWORD(v441)) - 8;
  v391 = *(_DWORD *)&v390[4 * (HIBYTE(v389) ^ 0xA5)] ^ ((_DWORD)v273 + 1662448704 - ((2 * (_DWORD)v273) & 0xC62DE880));
  LODWORD(v273) = *(_DWORD *)&v388[4 * (BYTE1(v270) ^ 0xDE)];
  LODWORD(v260) = *(_DWORD *)&v388[4 * ((unsigned __int16)((unsigned __int16)v282 ^ 0x6F07) >> 8)];
  v392 = *(_DWORD *)&v388[4 * (BYTE1(v389) ^ 0x54)];
  LODWORD(v277) = *(_DWORD *)&v390[4 * ((v282 >> 24) ^ 0xEF)];
  v393 = *(_DWORD *)&v390[4 * (BYTE3(v268) ^ 0xF9)];
  v394 = *(_DWORD *)&v390[4 * ((v270 >> 24) ^ 0xB2)];
  v395 = *(_DWORD *)(v63 - 116);
  v396 = (uint64_t)*(&off_100212870 + v395 - 922);
  LODWORD(v388) = *(_DWORD *)(v396 + 4 * (BYTE2(v268) ^ 0xB6u));
  v397 = *(_DWORD *)(v396 + 4 * (BYTE2(v282) ^ 0x2Au));
  LODWORD(v282) = *(_DWORD *)(v396 + 4 * (BYTE2(v389) ^ 0x69u));
  LODWORD(v396) = *(_DWORD *)(v396 + 4 * (BYTE2(v270) ^ 0xCFu)) ^ (v391 + 490784367 - ((2 * v391) & 0x3A818CDE));
  v398 = *(_DWORD *)&v387[4 * (v270 ^ 0x97)];
  v399 = *(_DWORD *)&v387[4 * (v389 ^ 0xE0)];
  v400 = *(unsigned int *)&v387[4 * (v268 ^ 0x5D)];
  LODWORD(v387) = *(_DWORD *)(v63 - 132) ^ v550 ^ (v396 - ((2 * v396) & 0x4A9F0FEA) + 625969141);
  v401 = (char *)*(&off_100212870 + v395 - 961) - 4;
  a56[*(_QWORD *)(v63 - 248)] = v401[(v387 >> 24) ^ 0xD7] ^ 0x4D;
  LODWORD(v388) = ((v388 ^ 0x7C98DA2A ^ v260)
                 + 1662448704
                 - ((2 * (v388 ^ 0x7C98DA2A ^ v260)) & 0xC62DE880)) ^ v394;
  LODWORD(v388) = ((_DWORD)v388 - 303738583 - ((2 * (_DWORD)v388) & 0xDBCAA252)) ^ v399;
  LODWORD(v388) = *(_DWORD *)(v63 - 128) ^ HIDWORD(v550) ^ ((_DWORD)v388 - ((2 * (_DWORD)v388) & 0x84109DC0) + 1107840736);
  v402 = (char *)*(&off_100212870 + v395 - 971) - 12;
  a56[*(_QWORD *)(v63 - 216)] = (v402[v388 ^ 0xC7] - 114) ^ 0x5F;
  v403 = (char *)*(&off_100212870 + (int)v441) - 4;
  LODWORD(v396) = v403[BYTE1(v388) ^ 0x13];
  HIDWORD(v280) = v396 ^ 4;
  LODWORD(v280) = (v396 ^ 0x40) << 24;
  a56[6] = (v280 >> 30) ^ 0x40;
  LODWORD(v396) = ((v398 ^ 0xF0A59746 ^ v397) + 1662448704 - ((2 * (v398 ^ 0xF0A59746 ^ v397)) & 0xC62DE880)) ^ v393;
  LODWORD(v396) = (v396 - ((2 * v396) & 0xC3B0388A) + 1641552965) ^ v392;
  LODWORD(v396) = *(_DWORD *)(v63 - 124) ^ HIDWORD(v551) ^ (v396 - ((2 * v396) & 0x3FD37E58) + 535412524);
  v404 = v403[BYTE1(v396)];
  HIDWORD(v280) = v404 ^ 4;
  LODWORD(v280) = (v404 ^ 0x40) << 24;
  a56[*(_QWORD *)(v63 - 208)] = (v280 >> 30) ^ 0x7E;
  v405 = (uint64_t)*(&off_100212870 + v395 - 882);
  v406 = *(unsigned __int8 *)(v405 - 12 + (BYTE2(v387) ^ 0xFBLL)) ^ 0x1Eu;
  a56[*(_QWORD *)(v63 - 256)] = *(_BYTE *)(v405 - 12 + (BYTE2(v387) ^ 0xFBLL)) ^ 0x1E;
  LODWORD(v273) = ((v273 ^ 0x2CEE805 ^ v277)
                 + 490784367
                 - ((2 * (v273 ^ 0x2CEE805 ^ v277)) & 0x3A818CDE)) ^ v282;
  LODWORD(v273) = v400 ^ ((_DWORD)v273 - 303738583 - ((2 * (_DWORD)v273) & 0xDBCAA252));
  LODWORD(v273) = *(_DWORD *)(v63 - 120) ^ v551 ^ ((_DWORD)v273 - ((2 * (_DWORD)v273) & 0xC98D164) + 105670834);
  a56[*(_QWORD *)(v63 - 168)] = *(_BYTE *)(v405 - 12 + (BYTE2(v273) ^ 0xB8)) ^ 0xCD;
  a56[*(_QWORD *)(v63 - 240)] = (v402[v387 ^ 0x1BLL] - 114) ^ 0x7D;
  a56[*(_QWORD *)(v63 - 224)] = *(_BYTE *)(v405 - 12 + (BYTE2(v388) ^ 3)) ^ 0xB3;
  a56[*(_QWORD *)(v63 - 184)] = v401[(v388 >> 24) ^ 0x6DLL] ^ 0xB5;
  LODWORD(v388) = v403[BYTE1(v387) ^ 0x92];
  HIDWORD(v280) = v388 ^ 4;
  LODWORD(v280) = (v388 ^ 0x40) << 24;
  a56[*(_QWORD *)(v63 - 152)] = (v280 >> 30) ^ 0xD2;
  v407 = *(_QWORD *)(v63 - 200);
  a56[v407] = v401[BYTE3(v396) ^ 0x53] ^ 0x59;
  a56[*(_QWORD *)(v63 - 176)] = (v402[v396 ^ 0x95] - 114) ^ 0xAF;
  a56[*(_QWORD *)(v63 - 232)] = (v402[v273 ^ 0x64] - 114) ^ 0x27;
  a56[*(_QWORD *)(v63 - 160)] = v401[(v273 >> 24) ^ 0x6ELL] ^ 0xCF;
  LODWORD(v388) = v403[BYTE1(v273) ^ 0x1FLL];
  HIDWORD(v280) = v388 ^ 4;
  LODWORD(v280) = (v388 ^ 0x40) << 24;
  a56[*(_QWORD *)(v63 - 192)] = (v280 >> 30) ^ 0x58;
  a56[*(_QWORD *)(v63 - 144)] = *(_BYTE *)(v405 - 12 + (BYTE2(v396) ^ 0xC8)) ^ 0x9C;
  return ((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)(a59 + 8 * ((1469 * ((((_DWORD)v407 - 1562358171 - 2 * (((_DWORD)v407 + 16) & 0x22E04E5D)) ^ 0xA2E04E55) < a57)) ^ (v395 - 510))) - 8))(125, v403, v406, v405, 490784367, 3991228713, v400, 3687490130, a9, v409, v410, v411, v412, v413, v414, v416, v417, v419, v422,
           v425,
           v427,
           v432,
           v436,
           v438,
           a25,
           a26,
           v441,
           v446,
           v451,
           v457,
           v463,
           v468,
           v471,
           v475,
           v480,
           v485,
           v490,
           v496,
           v502,
           v507,
           v512,
           v517,
           v522,
           v528,
           v532,
           v536,
           v235,
           v543,
           v545,
           v547,
           v548,
           v549,
           v550,
           v551);
}

void sub_10007B6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int a60,int a61,int a62,int a63)
{
  uint64_t v63;

  *(_DWORD *)(v63 - 120) = a60 ^ 0xDD7E339E;
  *(_DWORD *)(v63 - 132) = a62 ^ 0x9E16E65A;
  *(_DWORD *)(v63 - 124) = a63 ^ 0x6BFF76D4;
  *(_DWORD *)(v63 - 128) = a61 ^ 0xBB54D1FC;
  JUMPOUT(0x100079A18);
}

uint64_t sub_10007B72C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((((v4 - 1482709002) & 0x586057ED) + 1316) * (v3 != a3)) ^ v4))
                            - ((v4 + 457) ^ 0x41DLL)))();
}

uint64_t sub_10007B770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  char v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((399
                                          * ((a7 ^ 0x3D ^ ((v7 & 8) == ((83 * (a7 ^ 0x22B)) ^ 0x245))) & 1)) ^ a7))
                            - 12))();
}

uint64_t sub_10007B7C0(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  unsigned int v78;
  int8x16x4_t v80;

  *(_DWORD *)(v67 - 116) = v62 & 0xFFFFFFF8;
  v68 = a3 - (v62 & 0xFFFFFFF8) + 8;
  v69 = v65 + v64;
  v70 = v65 + v64 + v63;
  v71 = v70 - a3;
  v72 = v70 - a3 + 13;
  v73 = v70 - a3 + 14;
  v74 = v70 - a3 + 15;
  v75 = v70 - a3 + 1;
  v76 = v70 - a3 + 2;
  v77 = v70 + a6 - a3 - 66;
  v78 = v69 + a1 - a3;
  *(_DWORD *)(v67 - 120) = a6 - 25;
  v80.val[0].i64[0] = v78 & 0xF;
  v80.val[0].i64[1] = v77 & 0xF;
  v80.val[1].i64[0] = v76 & 0xF;
  v80.val[1].i64[1] = v75 & 0xF;
  v80.val[2].i64[0] = v71 & 0xF;
  v80.val[2].i64[1] = v74 & 0xF;
  v80.val[3].i64[0] = v73 & 0xF;
  v80.val[3].i64[1] = v72 & 0xF;
  *(int8x8_t *)(v66 - 7 + v78) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(v66 - 7 + v78), *(int8x8_t *)(v59 + v80.val[0].i64[0] - 7)), veor_s8(*(int8x8_t *)(v60 + v80.val[0].i64[0] - 7), *(int8x8_t *)(v61 + v80.val[0].i64[0] - 7)))), (int8x8_t)0x3939393939393939), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v80, (int8x16_t)xmmword_1001B72A0), (int8x8_t)0x505050505050505)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a59 + 8 * ((28 * (v68 == 0)) ^ a6)) - 12))((__n128)xmmword_1001B72A0);
}

void sub_10007B8FC()
{
  JUMPOUT(0x10007B828);
}

uint64_t sub_10007B904()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((*(_DWORD *)(v2 - 120) + 347 * (*(_DWORD *)(v2 - 120) ^ 0x22F) - 1497)
                                          * (v0 == *(_DWORD *)(v2 - 116))) ^ *(_DWORD *)(v2 - 120)))
                            - 12))();
}

uint64_t sub_10007B944(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = (a5 - 1036168092);
  *(_BYTE *)(v10 + v11) ^= *(_BYTE *)(v6 + (v11 & 0xF)) ^ *(_BYTE *)(v7 + (v11 & 0xF)) ^ *(_BYTE *)(v8 + (v11 & 0xF)) ^ (5 * (v11 & 0xF)) ^ 0x39;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((117 * (a5 - 1 == v5)) ^ (a4 - 468))) - 12))();
}

void sub_10007B9AC()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 385736157)
    v1 = -1262737048;
  else
    v1 = 1262711472;
  *(_DWORD *)(v2 + 40) = v1;
}

void sub_10007BA10(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) - 1224239923 * ((-2 - ((a1 | 0xAACC30C4) + (~(_DWORD)a1 | 0x5533CF3B))) ^ 0xA78032EC);
  __asm { BR              X15 }
}

uint64_t sub_10007BB30()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;

  if (v2 >= 0)
    v4 = v2;
  else
    v4 = -v2;
  if (v1 < 0)
    v1 = -v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v0 ^ 0x6C5) * (v4 > v1)) ^ (v0 + 625)))
                            - (((v0 - 272) | 0x110u) ^ 0x118)))();
}

uint64_t sub_10007BB80()
{
  int v0;
  unsigned int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1391 * (v1 < 0x83)) ^ (v0 + 361))) - 8))();
}

void sub_10007BBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(a2 + v2) = 1346595302;
}

void sub_10007CA24(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) + 108757529 * (((a1 | 0xFA9FB8B3) - (a1 & 0xFA9FB8B3)) ^ 0x1A03DA98);
  __asm { BR              X10 }
}

uint64_t sub_10007CB08@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v12 = v8 & 0x11EFA5FF;
  v13 = 1755732067 * ((-1379875697 - (&a4 | 0xADC0C48F) + (&a4 | 0x523F3B70)) ^ 0x8CF986AB);
  a7 = &STACK[0x8C0F0A4F49AC02E];
  a8 = v13 ^ 0x26DFAE9F;
  a4 = &STACK[0x30CF5C205D591B60];
  a5 = v11;
  a6 = ((v8 & 0x11EFA5FF) + 248) ^ v13;
  v14 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v8 & 0x11EFA5FF ^ 0xC2u)) - 4))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * (((*(_DWORD *)(v11 - 0x335F4D7B17DD4DFFLL) == v12 + v9 + 781)
                                                        * (v12 + 610)) ^ v12))
                                          - 4))(v14);
}

uint64_t sub_10007CC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * (((((v13 - 181) | 0x3C2) ^ (v13 + 955621098) & 0x470A64FB ^ 0x77F)
                                          * ((a11 ^ (v11 + 1010)) > 0x14)) ^ (v13 + 311)))
                            - 8))();
}

void sub_10007CC60(_DWORD *a1@<X8>)
{
  _DWORD *v1;
  int v2;

  *a1 = v2;
  *v1 = *a1;
}

void sub_10007D0B8(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  char v3;

  v1 = 1759421093 * (((a1 | 0x9EBEB665) - (_DWORD)a1 + (a1 & 0x6141499A)) ^ 0x2DC30631);
  v2 = a1[4] + v1;
  v3 = (*a1 + v1 - 1256057647 < 0x7FFFFFFF) ^ (19 * ((v2 - 36) & 0xBF ^ 0x5A));
  __asm { BR              X14 }
}

uint64_t sub_10007D198@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD v8[2];
  uint64_t v9;

  v5 = 1058668464 - v2 - (((v3 + 422130328) & 0xE6D6CFCB ^ 0xE8782E87) & (-1782852004 - v4));
  v6 = 1755732067 * ((2 * (v8 & 0x67313C18) - v8 + 416203751) ^ 0xC6087E3C);
  v9 = a1;
  v8[0] = v5 ^ v6;
  v8[1] = (v3 - 526) ^ v6;
  return ((uint64_t (*)(_DWORD *))(*(_QWORD *)(v1 + 8 * (v3 ^ 0x596)) - 4))(v8);
}

void sub_10007D304(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_10007D374@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((19
                                          * (((a1 - 1747324538) ^ 0xDFEEFEBFEF2FFDFFLL)
                                           + 0x20110140CA25587ALL
                                           + ((2 * (a1 - 1747324538)) & 0x1DE5FFBFELL) == 3109377657)) ^ 0x145u))
                            - 8))();
}

uint64_t sub_10007D42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v12 = *(unsigned __int8 *)(v9 + v10 - 0x5ADCB8BADB8D66C4) - *(unsigned __int8 *)(v7 + v10 - 0x5ADCB8BADB8D66C4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11
                                                      + 8
                                                      * ((145
                                                        * (((v12 << (((v8 - 5) | 0x41) ^ (a6 - 1))) & (v8 ^ 0x6B37DBE7))
                                                         + (v12 ^ v6) == v6)) ^ v8))
                                          - 8))(4294925278);
}

uint64_t sub_10007D4AC()
{
  unint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = v2 < v0;
  if (v5 == v3 - 0x5ADCB8BA2238104ALL < v0)
    LOBYTE(v5) = v3 - 0x5ADCB8BA2238104ALL < v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8 * ((19 * ((v5 ^ ((v1 ^ 0x58) - 6)) & 1)) ^ v1 ^ 0x558))
                            - (((v1 ^ 0x558) - 65) | 9u)
                            + 261))();
}

uint64_t sub_10007D538@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * (((((v1 - 776897838) & 0x2E4E84BC)
                                               + ((v1 + 201329740) | 0x411C0200)
                                               - 1293684513)
                                              * (a1 == 1747324547)) ^ v1)))(4294925278);
}

uint64_t sub_10007D59C()
{
  int v0;
  unsigned __int8 *v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((2 * (*v1 - 42)) & 0xF73B3E6E) + ((*v1 - 42) ^ 0x7B9D9F37) == 2073927479)
                                * (((v0 ^ 0x3CA) - 461) ^ 0x378)) ^ v0)))();
}

uint64_t sub_10007D600()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1901
                                          * ((((*(unsigned __int8 *)(v2 + 1) - 134) << ((3 * (v3 ^ 0xD5)) ^ 0x88)) & v1)
                                           + ((*(unsigned __int8 *)(v2 + 1) - 134) ^ v0) == v0)) ^ v3))
                            - 8))();
}

uint64_t sub_10007D658()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;

  v6 = v4 ^ v3;
  v7 = ((v6 + 1190884147) & 0xB9048DB9 ^ 0xFFFFFE31) + *(unsigned __int8 *)(v2 + 2);
  return (*(uint64_t (**)(void))(v5 + 8 * ((63 * ((v1 & (2 * v7)) + (v7 ^ v0) == v0)) ^ v6)))();
}

uint64_t sub_10007D6B8()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((747
                                * ((((*(unsigned __int8 *)(v2 + 3) - 134) << (v3 + 101)) & v1)
                                 + ((*(unsigned __int8 *)(v2 + 3) - 134) ^ v0) == v0)) ^ v3)))();
}

uint64_t sub_10007D700()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (((((v1 + v3 + 698 - 854) & (2 * (*(unsigned __int8 *)(v2 + 4) - 247)))
                                 + ((*(unsigned __int8 *)(v2 + 4) - 247) ^ v0) == v0)
                                * (v3 ^ 0x72F)) ^ v3)))();
}

uint64_t sub_10007D754()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 5) - 13)))
                                           + ((*(unsigned __int8 *)(v2 + 5) - 13) ^ v0) == v0)
                                          * ((v3 - 461) ^ 0x145)) ^ v3))
                            - 8))();
}

uint64_t sub_10007D79C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((133
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 6) - 1)))
                                           + ((*(unsigned __int8 *)(v2 + 6) - 1) ^ (v0 + v3 - 393)) == v0)) ^ v4))
                            - 8))();
}

uint64_t sub_10007D7E4()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1759
                                          * (((v1 + (v3 ^ 0x3CA) + 237 - 393) & (2 * (*(unsigned __int8 *)(v2 + 7) - 1)))
                                           + ((*(unsigned __int8 *)(v2 + 7) - 1) ^ v0) == v0)) ^ v3))
                            - 8))();
}

uint64_t sub_10007D838()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((((*(unsigned __int8 *)(v2 + 8) - 4) << ((v3 + 77) & 0x9F ^ 0x88)) & v1)
                                 + ((*(unsigned __int8 *)(v2 + 8) - 4) ^ v0) == v0)
                                * (((v3 + 694) | 4) ^ 0x688)) ^ v3)))();
}

uint64_t sub_10007D8A4(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(*(_QWORD *)(v5 + 96) + 1428) = 464241834;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (int)((50 * (*(_DWORD *)(a2 + 4) != v2)) ^ v3))
                            - (v3
                             + 687
                             + (v3 ^ 0xFFFFFFFFFFFFF955))))();
}

uint64_t sub_10007D8F8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((689
                                          * ((v3 & (2 * (**(unsigned __int8 **)(a2 + 8) - 42)))
                                           + ((**(unsigned __int8 **)(a2 + 8) - 42) ^ v2) == v2)) ^ v4))
                            - ((v4 - 244) ^ 0x99)))();
}

uint64_t sub_10007D93C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((672
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
                                           + ((*(unsigned __int8 *)(v3 + 1) - 134) ^ v0) == ((v2 - 260) ^ 0x312 ^ (v0 - 663)))) ^ v2))
                            - (((v2 - 260) | 0x10u) ^ 0x99)))();
}

uint64_t sub_10007D990()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;

  v5 = ((v3 - 526) ^ 0xFFFFFE31) + *(unsigned __int8 *)(v2 + 2);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1281 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v3)) - 8))();
}

uint64_t sub_10007D9D8(int a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((25
                                          * ((v2 & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
                                           + ((v1 + ((a1 + 135) | 0x187) - 919) ^ (*(unsigned __int8 *)(v3 + 3) - 134)) == v1)) ^ a1))
                            - ((a1 - 392) | 0x94u)
                            + 137))();
}

uint64_t sub_10007DA30()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1707
                                          * ((((*(unsigned __int8 *)(v3 + 4) - 247) << (-125 * (v2 ^ 0x94) + 120)) & v1)
                                           + ((v2 - 770) ^ (v0 + 107) ^ (*(unsigned __int8 *)(v3 + 4) - 247)) == v0)) ^ v2))
                            - 8))();
}

uint64_t sub_10007DA88()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1096
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 5) - 13)))
                                           + ((*(unsigned __int8 *)(v2 + 5) - 13) ^ v0) == (((v3 ^ 0x11C) + 766) ^ (v0 - 659)))) ^ v3))
                            - 12))();
}

uint64_t sub_10007DAD0(int a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (a1 ^ (4
                                               * (((v2 + a1 - 522 - 393) & (2 * (*(unsigned __int8 *)(v3 + 6) - 1)))
                                                + (a1 ^ 0x306 ^ (v1 + 107) ^ (*(unsigned __int8 *)(v3 + 6) - 1)) != v1))))
                            - 8))();
}

uint64_t sub_10007DB18()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1725
                                          * (((v1 + (v2 ^ 0x11C) - 149) & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
                                           + ((*(unsigned __int8 *)(v3 + 7) - 1) ^ v0) == v0)) ^ v2))
                            - 12))();
}

uint64_t sub_10007DB5C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v5 = 434 * (v2 ^ 0x18B) + *(unsigned __int8 *)(v3 + 8) - 873;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v1 & (2 * v5)) + (v5 ^ v0) == v0) * (((v2 - 265) | 0x15) ^ 0x56E)) ^ v2))
                            - 12))();
}

uint64_t sub_10007DBB4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(*(_QWORD *)(v5 + 96) + 1428) = 464241838;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (int)(((*(_DWORD *)(a2 + 4) == v2)
                                               * (((v3 - 1148886183) ^ 0xBB8560B8)
                                                + ((v3 - 1148886183) & 0x447A99D7)
                                                - 1447)) ^ v3))
                            - 8))();
}

uint64_t sub_10007DC18(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)((((((v4 - 1739939119) & 0x67B55FFD ^ (v3 - 356)) & (2 * v6)) + (v6 ^ v2) != v2)
                                     * (((v4 + 2057638170) & 0x855AEEFF) - 117)) ^ v4)))();
}

uint64_t sub_10007DC84()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1774
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
                                 + ((v2 - 1237715120) & 0x49C60B64 ^ (v0 - 740) ^ (*(unsigned __int8 *)(v3 + 1) - 134)) == v0)) ^ v2)))();
}

uint64_t sub_10007DCD4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1408
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
                                 + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == v0 + ((v2 + 437) | 0x100) - 868)) ^ v2)))();
}

uint64_t sub_10007DD14()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((498
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
                                 + ((*(unsigned __int8 *)(v3 + 3) - 134) ^ v0) == v0
                                                                                + ((v2 - 1731624243) & 0x67367FE7)
                                                                                - 868)) ^ v2)))();
}

uint64_t sub_10007DD64()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
                                 + ((*(unsigned __int8 *)(v3 + 4) - 247) ^ v0) == v0)
                                * ((v2 + 693) ^ 0x7EA)) ^ v2)))();
}

uint64_t sub_10007DD9C()
{
  int v0;
  int v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1969
                                * ((((*(unsigned __int8 *)(v4 + 5) - 13) << (v3 ^ 0x65)) & v1)
                                 + ((*(unsigned __int8 *)(v4 + 5) - 13) ^ v0) == v0)) ^ v2)))();
}

uint64_t sub_10007DDD8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1803
                                * ((v1 & (2 * (*(unsigned __int8 *)(v4 + 6) - 1)))
                                 + ((*(unsigned __int8 *)(v4 + 6) - 1) ^ v0) == ((v2 + 693) ^ v3))) ^ v2)))();
}

uint64_t sub_10007DE10()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((652
                                * (((v1 + ((4 * v2) ^ 0x1D8) - 868) & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
                                 + ((*(unsigned __int8 *)(v3 + 7) - 1) ^ v0) == v0)) ^ v2)))();
}

uint64_t sub_10007DE50()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 8) - 11)))
                                 + ((*(unsigned __int8 *)(v3 + 8) - 11) ^ v0) == v0)
                                * (((v2 + 337) | 0x164) + 177)) ^ v2)))();
}

void sub_10007DE8C(int a1@<W8>)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v5 = (v1 + 693) ^ 0x561;
  *(_DWORD *)(*(_QWORD *)(v3 + 96) + 1428) = 464241850;
  v7 = (v1 + 693) ^ 0x702;
  v6 = 1178560073 * ((((v4 - 120) | 0x3AFCCB75) - (v4 - 120) + ((v4 - 120) & 0xC5033488)) ^ 0x8068B317);
  *(_QWORD *)(v4 - 112) = &STACK[0x1C0D97DFD8A7A794];
  *(_DWORD *)(v4 - 104) = v5 - v6 - 1882359005;
  *(_DWORD *)(v4 - 120) = ((a1 + 3) ^ 0x526E9B5) - v6;
  sub_100066AE4(v4 - 120);
  __asm { BR              X10 }
}

uint64_t sub_10007E0BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;

  v10 = v7 + ((a5 - a6 - 1070) ^ 0xEC1D0CDB);
  if (v10 <= 0x40)
    v10 = 64;
  v11 = a4 - v6 - v8 + v10 > 0xE;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((2 * v11) | (16 * v11)) ^ a5)) - 8))();
}

uint64_t sub_10007E130(int a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v10 = v6 + v5;
  v11 = v10 - 1593769086;
  if ((v10 - 1593769086) <= 0x40)
    v11 = v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((((193 * (a5 ^ (v9 - 1050) ^ (v9 + 1))) ^ 0xBF)
                                          * (a4 - v10 >= (a1 + v11))) ^ a5))
                            - 8))();
}

uint64_t sub_10007E18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23)
{
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;

  return ((uint64_t (*)(void))(*(_QWORD *)(v26
                                        + 8
                                        * ((((unint64_t)(&a23 + a13 + v23 + ((v25 - a6 - 523) ^ v24)) > 0xF)
                                          * (a6 + ((v25 - 811741926) & 0x7D7E3FFB) + 428)) ^ v25))
                            - 12))();
}

uint64_t sub_10007E1E8@<X0>(int a1@<W5>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;

  v8.i64[0] = 0x7272727272727272;
  v8.i64[1] = 0x7272727272727272;
  v9.i64[0] = 0x3939393939393939;
  v9.i64[1] = 0x3939393939393939;
  *(int8x16_t *)(v3 + (a2 + v2)) = vaddq_s8(vsubq_s8(*v7, vandq_s8(vaddq_s8(*v7, *v7), v8)), v9);
  return ((uint64_t (*)(int8x16_t *))(*(_QWORD *)(v6
                                                          + 8
                                                          * (((2 * (((v4 + 1) & 0x1FFFFFFF0) != 16)) | (8 * (((v4 + 1) & 0x1FFFFFFF0) != 16))) ^ (a1 + v5 + 463)))
                                              - ((a1 + v5 + 523) ^ 0x247)))(&v7[1]);
}

void sub_10007E258()
{
  JUMPOUT(0x10007E214);
}

uint64_t sub_10007E264(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((((a2 - 549) ^ (v5 - 18) ^ (v5 - 8)) * (v2 == v3)) | a2)) - 12))();
}

uint64_t sub_10007E2A4@<X0>(int a1@<W5>, int a2@<W6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  *(&a18 + (a3 + v18)) = *(_BYTE *)(v22 + ((v20 - v23 + 30) ^ 0xFFFFFFFF84A97296) + v19)
                                     - ((2
                                       * *(_BYTE *)(v22 + ((v20 - v23 + 30) ^ 0xFFFFFFFF84A97296) + v19)) & 0x72)
                                     + 57;
  return ((uint64_t (*)(void))(*(_QWORD *)(v21 + 8 * ((112 * ((a2 + a3 + 1) > 0x3F)) ^ (a1 + v20 + 515)))
                            - 12))();
}

uint64_t sub_10007E318(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33,int a34,int a35,int a36,int a37,int a38,unsigned __int8 a39,int32x4_t a40,int32x4_t a41,int32x4_t a42,int32x4_t a43)
{
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t (*v51)(uint64_t, __n128, __n128, __n128, __n128, __n128);
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  int v57;
  uint8x16_t v58;
  uint16x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint8x16_t v68;
  int8x16_t v71;
  int8x16_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint8x16_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint8x16_t v85;
  uint8x16_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  _DWORD *v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  int8x16x4_t v102;
  int8x16x4_t v103;

  v51 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128, __n128))(v45 + 8 * v43);
  v52.n128_u64[0] = 0x3939393939393939;
  v52.n128_u64[1] = 0x3939393939393939;
  v53 = (__n128)vdupq_n_s32(0x34BC296Bu);
  v54 = (__n128)vdupq_n_s32(0xB4BC2968);
  v55 = (__n128)vdupq_n_s32(0x34BC2979u);
  v56.n128_u64[0] = 0x7272727272727272;
  v56.n128_u64[1] = 0x7272727272727272;
  v57 = a39 ^ 0x27;
  if (v57 == 2)
  {
    v103 = vld4q_s8(&a23);
    v82 = (uint8x16_t)veorq_s8(v103.val[0], (int8x16_t)v52);
    v83 = vmovl_u8(*(uint8x8_t *)v82.i8);
    v84 = vmovl_high_u8(v82);
    v85 = (uint8x16_t)veorq_s8(v103.val[1], (int8x16_t)v52);
    _Q22 = vmovl_u8(*(uint8x8_t *)v85.i8);
    _Q21 = vmovl_high_u8(v85);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v90 = (uint8x16_t)veorq_s8(v103.val[2], (int8x16_t)v52);
    v91 = vmovl_high_u8(v90);
    v92 = vmovl_u8(*(uint8x8_t *)v90.i8);
    v103.val[0] = veorq_s8(v103.val[3], (int8x16_t)v52);
    v103.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v103.val[0]);
    v103.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[1]);
    v103.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[1].i8);
    v103.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v103.val[0].i8);
    v103.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[0]);
    v103.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[0].i8);
    v93 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v92.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8), 0x18uLL)), v103.val[0]);
    v94 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v92, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v83), 0x18uLL)), v103.val[3]);
    v95 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v91.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v84.i8), 0x18uLL)), v103.val[1]);
    v96 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v91, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v84), 0x18uLL)), v103.val[2]);
    v103.val[0] = veorq_s8(vandq_s8((int8x16_t)v93, (int8x16_t)v53), (int8x16_t)(*(_OWORD *)v103.val & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    v103.val[3] = veorq_s8(vandq_s8((int8x16_t)v94, (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v103.val[3] & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    v103.val[1] = veorq_s8(vandq_s8((int8x16_t)v95, (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v103.val[1] & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    v103.val[2] = veorq_s8(vandq_s8((int8x16_t)v96, (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v103.val[2] & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    a42 = vaddq_s32(vsubq_s32(v95, vaddq_s32((int32x4_t)v103.val[1], (int32x4_t)v103.val[1])), (int32x4_t)v54);
    a43 = vaddq_s32(vsubq_s32(v96, vaddq_s32((int32x4_t)v103.val[2], (int32x4_t)v103.val[2])), (int32x4_t)v54);
    a40 = vaddq_s32(vsubq_s32(v93, vaddq_s32((int32x4_t)v103.val[0], (int32x4_t)v103.val[0])), (int32x4_t)v54);
    a41 = vaddq_s32(vsubq_s32(v94, vaddq_s32((int32x4_t)v103.val[3], (int32x4_t)v103.val[3])), (int32x4_t)v54);
    v97 = (_DWORD *)&a40 + v49 + 1960163708;
    v98 = *(v97 - 8) ^ *(v97 - 3);
    v99 = v98 + v44 - (a3 & (2 * v98));
    v100 = *(v97 - 16) ^ *(v97 - 14);
    HIDWORD(v101) = v100 ^ 0x34BC2968 ^ v99;
    LODWORD(v101) = v100 ^ ~v99;
    *v97 = (v101 >> 31) + v44 - (a3 & (2 * (v101 >> 31)));
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v45 + 8 * ((269 * (v48 != 1960163645)) ^ (a6 + v50 + 1524)))
                                            - 4))(1476395008);
  }
  else if (v57 == 1)
  {
    v102 = vld4q_s8(&a23);
    v58 = (uint8x16_t)veorq_s8(v102.val[0], (int8x16_t)v52);
    v59 = vmovl_u8(*(uint8x8_t *)v58.i8);
    v60 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8);
    v61 = (int8x16_t)vmovl_high_u16(v59);
    v62 = vmovl_high_u8(v58);
    v63 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v62.i8);
    v64 = (int8x16_t)vmovl_high_u16(v62);
    v65 = (uint8x16_t)veorq_s8(v102.val[1], (int8x16_t)v52);
    v66 = vmovl_high_u8(v65);
    v67 = vmovl_u8(*(uint8x8_t *)v65.i8);
    v68 = (uint8x16_t)veorq_s8(v102.val[2], (int8x16_t)v52);
    _Q26 = (int8x16_t)vmovl_high_u8(v68);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v68.i8);
    v71 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v76 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v102.val[0] = veorq_s8(v102.val[3], (int8x16_t)v52);
    v102.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v102.val[0]);
    v102.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v102.val[1]);
    v102.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v102.val[0].i8);
    v102.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v102.val[0]);
    v102.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v102.val[0].i8), 0x18uLL), v71), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v67.i8, 8uLL), v60));
    v102.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v102.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v67, 8uLL), v61));
    v102.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v102.val[1].i8), 0x18uLL), v76), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v66.i8, 8uLL), v63));
    v102.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v102.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v66, 8uLL), v64));
    v77 = (int32x4_t)veorq_s8(vandq_s8(v102.val[0], (int8x16_t)v55), (int8x16_t)(*(_OWORD *)&v60 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    v78 = (int32x4_t)veorq_s8(vandq_s8(v102.val[3], (int8x16_t)v55), (int8x16_t)(*(_OWORD *)&v61 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    v79 = (int32x4_t)veorq_s8(vandq_s8(v102.val[1], (int8x16_t)v55), (int8x16_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    v80 = (int32x4_t)veorq_s8(vandq_s8(v102.val[2], (int8x16_t)v55), (int8x16_t)(*(_OWORD *)&v64 & __PAIR128__(0xFFFFFF11FFFFFF11, 0xFFFFFF11FFFFFF11)));
    a42 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[1], vaddq_s32(v79, v79)), (int32x4_t)v54);
    a43 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[2], vaddq_s32(v80, v80)), (int32x4_t)v54);
    a40 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[0], vaddq_s32(v77, v77)), (int32x4_t)v54);
    a41 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[3], vaddq_s32(v78, v78)), (int32x4_t)v54);
    return (*(uint64_t (**)(uint64_t))(v45 + 8 * ((6 * (v50 ^ (v50 - 10))) ^ 0x5F)))(1476395008);
  }
  else
  {
    a33 = 2 * (a33 ^ v46) + v46 - (v47 & (4 * (a33 ^ v46)));
    a34 = 2 * (a34 ^ v46) + v46 - (v47 & (4 * (a34 ^ v46)));
    a35 = 2 * (a35 ^ v46) + v46 - (v47 & (4 * (a35 ^ v46)));
    a36 = 2 * (a36 ^ v46) + v46 - (v47 & (4 * (a36 ^ v46)));
    return v51(1476395008, v52, v53, v54, v55, v56);
  }
}

void sub_10007E3AC()
{
  JUMPOUT(0x10007E3C8);
}

void sub_10007E63C()
{
  JUMPOUT(0x10007E548);
}

uint64_t sub_10007E64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  return (*(uint64_t (**)(void))(v6 + 8 * ((37 * (a6 + 1 == v7 + 16)) ^ v8)))();
}

uint64_t sub_10007E72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return (*(uint64_t (**)(void))(v6 + 8 * ((1845 * (v5 + 1 == v7 + 32)) ^ a5)))();
}

uint64_t sub_10007E7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v7 + 8 * ((28 * (a6 + 1 != v8 + 48)) ^ v9)) - 12))(a1, v6);
}

void sub_10007E8DC()
{
  JUMPOUT(0x10007EE20);
}

uint64_t sub_10007EAD0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((103 * (v1 + 1 == v3 + 4)) ^ a1)) - 4))();
}

uint64_t sub_10007EBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((84 * (a6 + 1 != v8 + 24)) ^ a7)) - 4))();
}

uint64_t sub_10007EC6C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1682 * (v1 + 1 != v3 + 44)) ^ a1)) - 4))();
}

uint64_t sub_10007ED20@<X0>(uint64_t a1@<X6>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((23 * (a1 + 1 == v3 + 64)) ^ a2)) - 4))();
}

void sub_10007EDDC()
{
  JUMPOUT(0x10007EE1CLL);
}

uint64_t sub_10007EE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, int a16, unsigned int a17)
{
  uint64_t v17;
  int v18;
  _BOOL4 v19;

  if (a17 < 0x55502BAD != (a14 - 637952395) < 0x55502BAD)
    v19 = (a14 - 637952395) < 0x55502BAD;
  else
    v19 = a14 - 637952395 > a17;
  return ((uint64_t (*)(void))(*(_QWORD *)(v17 + 8 * ((!v19 * ((7 * (v18 ^ (v18 - 73))) ^ 0x11C)) ^ (a6 + v18 + 1485)))
                            - 8))();
}

uint64_t sub_10007EF30()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((227
                                          * (((((v3 ^ 0x781) + 1276903819) | 0x1000750) ^ 0xC9B57D9E) + v0 >= v0 + v1)) ^ v3 ^ 0x781))
                            - 4))();
}

uint64_t sub_10007EF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * ((247
                                          * (a13 + v13 - v15 >= (unint64_t)(v14 - a6 - 1606)
                                                              - 1293684553)) ^ v14))
                            + 1293684561
                            - ((v14 + 1208744578) | 0x5100E59u)
                            + 4))();
}

uint64_t sub_10007F000(int8x16_t a1, double a2, double a3, double a4, int8x16_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  int v11;
  int8x16_t *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int8x16_t v18;

  v18 = *(int8x16_t *)(v16 + v11 + ((20 * (v13 ^ (v17 + 1))) ^ (v14 + 44)));
  *v12 = vaddq_s8(vsubq_s8(v18, vandq_s8(vaddq_s8(v18, v18), a5)), a1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * (a11 + v13 + 227)) - 12))();
}

uint64_t sub_10007F06C@<X0>(char a1@<W3>, int a2@<W4>, int a3@<W5>, char a4@<W7>, uint64_t a5@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  *(_BYTE *)(v7 + a5) = *(_BYTE *)(v10 + (v5 + v8))
                      - ((*(_BYTE *)(v10 + (v5 + v8)) << ((v6 - v11 + 60) ^ a4)) & a1)
                      + 57;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((a5 != 63) * a2) ^ (a3 + v6 + 368))) - 12))();
}

uint64_t sub_10007F0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;

  v16 = v13 - 1250570947 < (a13 - 438301036);
  if ((a13 - 438301036) < 0x30CC5AB5 != (v13 - 1250570947) < 0x30CC5AB5)
    v16 = (a13 - 438301036) < 0x30CC5AB5;
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v14 + 8 * ((v16 * (v15 + 506)) ^ v15)) - 8))((v15 + 857));
}

uint64_t sub_10007F128(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;

  v36 = v35 + a1 - 1368;
  v37 = 628203409 * ((((2 * (v34 - 120)) | 0xE0837094) - (v34 - 120) - 1883355210) ^ 0xF2C9B479);
  *(_QWORD *)(v34 - 120) = a10;
  *(_DWORD *)(v34 - 112) = v37 + a1 - 582;
  *(_DWORD *)(v34 - 108) = a13 - v37 + 184370127;
  v38 = sub_10007FCA0(v34 - 120);
  v39 = a33 & 0x3F ^ (a1 - 1365);
  *(&a24 + v39) = -71;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v33 + 8 * (((v39 < 0x38) * (v36 - 1293684513)) ^ a1)) - 12))(v38);
}

uint64_t sub_10007F214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  int v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (int)((((v6 - 858949859) < 0x38)
                                               * ((v8 - 1027608539) & 0xF02401B5 ^ 0x7A6)) ^ (a6 + v8 + 352)))
                            - 8))();
}

uint64_t sub_10007F264()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v4 = v0;
  v5 = v0 - 858949859;
  v6 = (unint64_t)v0 - 858949858 > 0x38;
  v7 = 56;
  if (v6)
    v7 = v5 + 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((v1 ^ (v3 - 236) ^ (v3 - 959))
                                          * ((unint64_t)(v7 - v4 + 858949859) > 7)) ^ v1))
                            - 8))();
}

uint64_t sub_10007F2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23)
{
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(&a23 + v26 + (v24 ^ v25) - 308) = 0x3939393939393939;
  return ((uint64_t (*)(void))(*(_QWORD *)(v27 + 8 * ((1739 * ((v23 & 0xFFFFFFFFFFFFFFF8) == 8)) ^ (a6 + v24 + 347)))
                            - 12))();
}

uint64_t sub_10007F310(double a1)
{
  int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)(v5 + v2) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v4 == 0) * v3) ^ v1)) - 12))();
}

uint64_t sub_10007F338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((((v8 - a6 - 252) ^ (v10 + 156)) * (v6 == v7)) ^ v8)) - 8))();
}

void sub_10007F364()
{
  JUMPOUT(0x10007E3C8);
}

uint64_t sub_10007F9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  _BOOL4 v44;

  v42 = v39 + v35;
  v43 = *(_DWORD *)(&a23 + ((v39 + v35) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a3 + v42 + 1) = (BYTE2(v43) ^ 0x82) - ((v43 >> 15) & 0x72) + 57;
  *(_BYTE *)(a3 + v42) = (HIBYTE(v43) ^ 0x5F) + ((v41 + v37 + 22) ^ 0x63) + (~(2 * (HIBYTE(v43) ^ 0x5F)) | 0x8D);
  *(_BYTE *)(a3 + v42 + 2) = (BYTE1(v43) ^ 0x59) + ~(2 * ((BYTE1(v43) ^ 0x59) & 0x3F ^ BYTE1(v43) & 6)) + 58;
  *(_BYTE *)(a3 + v42 + 3) = v43 ^ 0x49;
  v44 = v39 + 1105923264 < (a35 + 2096550965);
  if (v39 + 1105923264 < v36 != a35 + 2096550965 < v36)
    v44 = a35 + 2096550965 < v36;
  return ((uint64_t (*)(void))(*(_QWORD *)(v40 + 8 * ((!v44 * v38) ^ v37)) - 12))();
}

void sub_10007FB74()
{
  JUMPOUT(0x10007FB38);
}

void sub_10007FB7C(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 12) + 460628867 * ((a1 & 0x73B15F3F | ~(a1 | 0x73B15F3F)) ^ 0xC0D822BD);
  v2 = *(_QWORD *)((char *)*(&off_100212870 + (v1 ^ 0x409))
                 + 8
                 * ((484
                   * (((uint64_t (*)(uint64_t, uint64_t))*(&off_100212870 + (v1 ^ 0x42A)))(32, 0x101004023FF3BD5) != 0)) ^ v1)- 4);
  __asm { BR              X8 }
}

uint64_t sub_10007FC20(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0x89176B4089176B4;
  *(_QWORD *)(result + 16) = 0x1522B0EA3071EF99;
  *(_DWORD *)(result + 24) = -1262737048;
  *(_QWORD *)(v2 - 0x1A8FA111108FB322) = result + 0x335F4D7B17DD4E17;
  *((_DWORD *)v1 + 2) = -1262737048;
  return result;
}

uint64_t sub_10007FCA0(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v1 = 628203409 * (((a1 | 0xC21FEC2B) - (a1 & 0xC21FEC2B)) ^ 0x4097E018);
  v2 = *(_DWORD *)(a1 + 8) - v1;
  v3 = v1 + *(_DWORD *)(a1 + 12) - 1441370096;
  v4 = (*(_DWORD *)(*(_QWORD *)a1 - 0x1C0D97DFD8A7A9C4) ^ 0x5945F903) + v3;
  v5 = v4 - ((2 * v4) & 0xB28BF206) + 1497757955;
  *(_DWORD *)(*(_QWORD *)a1 - 0x1C0D97DFD8A7A9C4) = v5;
  return (*(uint64_t (**)(void))((char *)*(&off_100212870 + (v2 ^ 0x3D3))
                              + 8 * ((156 * ((v5 ^ 0x5945F903) < v3)) ^ v2)
                              - 4))();
}

void sub_10007FD64(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x1C0D97DFD8A7A9C8) = (*(_DWORD *)(a1 - 0x1C0D97DFD8A7A9C8) ^ 0xFFA6CEE2)
                                         - 5845278
                                         - ((2 * (*(_DWORD *)(a1 - 0x1C0D97DFD8A7A9C8) ^ 0xFFA6CEE2) + 2) & 0xFF4D9DC4)
                                         + 1;
}

void sub_10007FDAC(uint64_t a1)
{
  int v1;

  v1 = 1225351577 * (((a1 | 0xD0007703) - a1 + (a1 & 0x2FFF88FC)) ^ 0xF39AAF15);
  __asm { BR              X10 }
}

uint64_t sub_10007FE60()
{
  int v0;
  _DWORD *v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * (((*v1 != 0) * ((v0 - 1879462760) & 0x70065367 ^ 0x1B7)) ^ (v0 - 235)))
                            - 4))();
}

uint64_t sub_10007FEB8()
{
  int v0;
  _DWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  unsigned int *v4;
  int v5;
  uint64_t v6;

  v5 = v0 + 235;
  v6 = v3(*v4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * ((1327 * (*v1 != 0)) ^ v5)) - 8))(v6);
}

uint64_t sub_10007FEE8()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t (*v2)(_QWORD);
  unsigned int *v3;
  uint64_t result;

  result = v2(*v3);
  *v1 = 0;
  *(_DWORD *)v0 = 0;
  *(_QWORD *)(v0 + 344) = 0;
  *(_QWORD *)(v0 + 352) = 0;
  *(_DWORD *)(v0 + 360) = 89778892;
  *(_DWORD *)(v0 + 56) = 377236729;
  return result;
}

uint64_t sub_10007FF28()
{
  int v0;
  _DWORD *v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1327 * (*v1 != 0)) ^ v0)) - 8))();
}

void sub_10007FF4C(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = (*(_DWORD *)(a2 + 4) - 1747324538) < 0x102;
  __asm { BR              X11 }
}

uint64_t sub_10007FFB4()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v0 != 1747324538) | (16 * (v0 != 1747324538)) | 0xA4u)) - 4))();
}

uint64_t sub_10007FFE4@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v4 = v1 - (**(_BYTE **)(v3 + 8) == 0);
  *(_DWORD *)(*(_QWORD *)(v2 + 96) + 528) = 1779867473;
  *(_DWORD *)(*(_QWORD *)(v2 + 96) + 532) = 1346595302;
  *(_QWORD *)(*(_QWORD *)(v2 + 96) + 536) = *(_QWORD *)(v2 + 96) + 544;
  v5 = *(_QWORD *)(v2 + 96) + 0xCDF342D76DC37B7;
  v6 = *(_QWORD *)(v3 + 8) + (*(_DWORD *)(v3 + 4) - v4);
  v7 = 1178560073
     * (((&v10 | 0xC87B6021) - &v10 + (&v10 & 0x37849FD8)) ^ 0x72EF1843);
  v14 = v7 + v4 - 846789820;
  v11 = v6;
  v12 = v5;
  v10 = v7 + 684;
  ((void (*)(unsigned int *))(*(_QWORD *)(a1 + 360) - 8))(&v10);
  v8 = v13;
  *(_QWORD *)(*(_QWORD *)(v2 + 96) + 512) = *(_QWORD *)(v3 + 8) + (*(_DWORD *)(v3 + 4) - v4);
  return (699612005 * v8 - 1404393427);
}

void sub_100080138(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1178560073 * ((((2 * a1) | 0xD7F3130A) - a1 + 335967867) ^ 0x516DF1E7));
  __asm { BR              X15 }
}

uint64_t sub_100080268@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  _BOOL4 v18;

  v16 = v14 - 722907848;
  *(_DWORD *)(a11 + 4 * (v11 + a1)) = *(_DWORD *)(*(_QWORD *)(v13 - 0xCDF342D76DC359FLL) + 4 * (v11 + a1));
  v18 = v11 - 1943953391 > (((v12 + 305) | 0x110) ^ 0x54E94E06) || v11 - 1943953391 < v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((1205 * v18) ^ v12)) - 4))();
}

uint64_t sub_1000802F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  int v14;
  uint64_t v15;
  _BOOL4 v17;

  v17 = v13 + 1295963209 > 369525104 || v13 + 1295963209 < a13 - 1777958543;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((v17 * ((v14 - 1894895146) & 0x70F1CBFF ^ 0x103)) ^ v14)) - 4))();
}

uint64_t sub_100080370@<X0>(int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  _BOOL4 v20;

  *(_DWORD *)(a12 + 4 * (v12 + a2)) = a1;
  v18 = v14 + v12 + 1;
  v20 = v18 > v15 || v18 < v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v17 + 8 * (v13 ^ (4 * v20))) - 4))();
}

uint64_t sub_1000803B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                + 8
                                                                                * ((963
                                                                                  * (((v6 + 10) ^ (v5 == ((v6 - 1015760552) & 0x3C8B47A5) - 517)) & 1)) ^ v6)))(a1, a2, a3, a4, a5);
}

uint64_t sub_100080404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, int a12, unsigned int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _DWORD *a19)
{
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  _BOOL4 v27;

  v23 = ((v20 - 247) | 0x10A) ^ 0x1D;
  v24 = (*(_DWORD *)(*a11 - 0x139154EEB4327E0) - 1901766679) * ((v23 + 1430674054) & 0xAAB9A677 ^ (v19 - 507) ^ *a19);
  v25 = 1755732067 * ((v22 - 180749528 - 2 * ((v22 - 128) & 0xF539FBA8)) ^ 0x2BFF4673);
  *(_QWORD *)(v22 - 104) = a15;
  *(_DWORD *)(v22 - 112) = v25 ^ 0x504369E6;
  *(_DWORD *)(v22 - 108) = (v24 ^ 0x6EDDF3EB) - v25 + ((2 * v24) & 0xDDBBE7D6) - 244847201;
  *(_DWORD *)(v22 - 128) = v23 - v25 - 20;
  *(_QWORD *)(v22 - 120) = a14;
  v26 = ((uint64_t (*)(uint64_t))((char *)*(&off_100212870 + (((v20 - 247) | 0x10A) ^ 0x13F)) - 4))(v22 - 128);
  v27 = (int)(a13 + 98523564) > 98523565;
  if (a13 > 0x7A20A653)
    v27 = 1;
  return (*(uint64_t (**)(uint64_t))(v21 + 8 * ((29 * v27) ^ v23)))(v26);
}

void sub_1000805AC()
{
  JUMPOUT(0x10008046CLL);
}

uint64_t sub_1000805B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;

  v17 = 1374699841 * ((((v16 - 128) | 0x889B87A4) - ((v16 - 128) & 0x889B87A4)) ^ 0xE56F9FAD);
  *(_QWORD *)(v16 - 120) = a14;
  *(_DWORD *)(v16 - 128) = v15 - v17 + 1390;
  *(_DWORD *)(v16 - 124) = v17 + ((a13 << 6) & 0xB62DFDC0) + ((32 * a13) ^ 0xDB16FEFB) + 2012073806;
  sub_100072CD4(v16 - 128);
  v18 = *a10 - 1346595303 < (v15 ^ 0x7FFFFDFAu);
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * (((4 * v18) | (8 * v18)) ^ v15)) - 4))();
}

uint64_t sub_100080680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 - 128) = a14;
  *(_QWORD *)(v17 - 120) = &STACK[0xCDF342D76DC35D7];
  *(_DWORD *)(v17 - 112) = v16
                         + 1374699841
                         * ((698811381 - ((v17 - 128) | 0x29A703F5) + ((v17 - 128) | 0xD658FC0A)) ^ 0xBBACE403)
                         + 1079;
  sub_1000717A0(v17 - 128);
  *(_QWORD *)(v17 - 104) = v15;
  *(_QWORD *)(v17 - 120) = a14;
  *(_DWORD *)(v17 - 112) = v16
                         + 1178560073 * ((2 * ((v17 - 128) & 0x7E7CE238) - (v17 - 128) - 2122113599) ^ 0x3B1765A3)
                         + 11;
  v18 = ((uint64_t (*)(uint64_t))((char *)*(&off_100212870 + v16 - 508) - 4))(v17 - 128);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v14
                                                      + 8
                                                      * (((*(_DWORD *)(v17 - 128) != 1645153784)
                                                        * (((v16 + 139) | 0x16B) ^ 0x380)) ^ v16))
                                          - ((v16 - 505) | 0x311u)
                                          + 793))(v18);
}

uint64_t sub_1000807AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  uint64_t v18;
  int v19;
  int v20;

  if (a18 - 1346595302 >= 0)
    v20 = a18 - 1346595302;
  else
    v20 = ~(a18 - 1346595303);
  return ((uint64_t (*)(void))(*(_QWORD *)(v18
                                        + 8
                                        * ((31
                                          * ((int)((v20 ^ 0x72D77BE6)
                                                 + ((v19 + 35) ^ 0xDD6BED40)
                                                 + ((2 * v20) & 0xE5AEF7CC)
                                                 - 1346595303) >= 0)) | (v19 + 35)))
                            - ((v19 - 557) ^ 0x3EDu)
                            + 793))();
}

uint64_t sub_10008083C()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((93 * (*(_DWORD *)(v0 + 4 * v1) != v3)) ^ v2))
                            - ((v2 + 902561967) & 0xCA33FF73)
                            + 828))();
}

uint64_t sub_100080880(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((31 * (v1 - 1 + a1 >= 0)) | v2)) - ((v2 - 592) ^ 0x3EDu) + 793))();
}

uint64_t sub_1000808B8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(v5 + 32);
  *(_DWORD *)(v2 - 112) = v0 + 1374699841 * ((v2 + 1551200776 - 2 * ((v2 - 128) & 0x5C757288)) ^ 0x31816A81) + 1356;
  *(_QWORD *)(v2 - 128) = v1;
  *(_QWORD *)(v2 - 120) = v3;
  return sub_1000717A0(v2 - 128);
}

void sub_100080C5C(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8) - 1755732067 * ((a1 & 0xB853BF30 | ~(a1 | 0xB853BF30)) ^ 0x996AFD14);
  v2 = *(_QWORD *)a1;
  ((void (*)(char *, void (*)()))*(&off_100212870 + v1 - 471))((char *)*(&off_100212870 + (v1 ^ 0x2CD)) - 8, sub_10008144C);
  __asm { BR              X11 }
}

uint64_t sub_100080D10()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((**(_QWORD **)(v2 + 8 * (v3 - 489)) == 0) * v0) ^ v3))
                            - ((v3 + 41) ^ 0x2ECLL)))();
}

uint64_t sub_100080D54@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 - 595)))(v1);
}

uint64_t sub_100080D70(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * ((a1 - 2 * (a1 & 0x7A08EF3) + 127962867) ^ 0xD9663328));
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_100212870 + (v1 ^ 0x11C))
                                        + 8 * ((1271 * (*(_QWORD *)(a1 + 8) != 0x335F4D7B17DD4E17)) ^ v1)
                                        - 4)
                            - 4))();
}

uint64_t sub_100080E00@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (((*(_DWORD *)(v2 - 0x335F4D7B17DD4DFFLL) == -1262737048)
                                          * (((v1 - 476) | 0x5A2) - 534)) ^ v1))
                            - 4))();
}

uint64_t sub_100080E4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  BOOL v6;

  v3 = *(_DWORD *)(v1 - 0x335F4D7B17DD4E07) - 503419360;
  v4 = *(_DWORD *)(v1 - 0x335F4D7B17DD4E0BLL) + 165603069;
  v5 = v3 < 0x12705DB1;
  v6 = v3 > v4;
  if (v5 != v4 < 0x12705DB1)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (int)((74 * ((v2 ^ v6) & 1)) ^ v2))
                            - (v2 ^ 0x5AFLL)))();
}

uint64_t sub_100080EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  v7 = *(_DWORD *)(a1 + 32) ^ v4;
  v8 = *(_QWORD *)(v5 - 0x335F4D7B17DD4E17);
  v9 = *(unsigned __int8 *)(v8 + (v3 - 812773270)) ^ 0x39;
  v10 = ((*(unsigned __int8 *)(v8 + (v3 - 812773273)) ^ 0x39) << (v6 ^ 0x79)) | ((*(unsigned __int8 *)(v8 + (v3 - 812773272)) ^ 0x39) << 16) | ((*(unsigned __int8 *)(v8 + (v6 ^ 0xCF8E1108) + v3) ^ 0x39) << 8) | v9;
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * ((252
                                * (((v10 + v2 - 2 * (v10 & 0x34BC296B ^ v9 & 3)) & 0xFFFFFF ^ 0xBC2968) - v7 == -643217243)) ^ v6)))();
}

uint64_t sub_100080FC0@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * (((463 * (((v2 ^ 0x472) - 775) ^ 0x208) - 1804) * ((a1 & 0x40000000) == 0)) ^ v2 ^ 0x472))
                            - 12))();
}

uint64_t sub_100081078@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  _BOOL4 v10;

  v7 = (((a1 + 1548433569) & 0xA3B4C22E ^ 0xE6E3FDB2) & (2 * (v6 + v3 + (v5 ^ v2) + 8)))
     + ((v6 + v3 + (v5 ^ v2) + 8) ^ 0x7371FFDF)
     - 827210217;
  v8 = v4 + 965889858;
  v9 = (v8 < 0x4223C5F6) ^ (v7 < 0x4223C5F6);
  v10 = v7 > v8;
  if (v9)
    v10 = v7 < 0x4223C5F6;
  return (*(uint64_t (**)(void))(a2 + 8 * ((122 * !v10) ^ a1)))();
}

uint64_t sub_10008111C@<X0>(_QWORD *a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(*a1 - 0x30CF5C205D591B60) = v6 + v5 + 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((1095 * (*v3 == v4)) ^ (a2 - 47))) - 4))();
}

void sub_100081174()
{
  _DWORD *v0;

  *v0 = 1262711389;
}

uint64_t sub_1000811B8@<X0>(_QWORD *a1@<X0>, int a2@<W3>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  int v4;

  *(_QWORD *)(*a1 - 0x30CF5C205D591B60) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((1095 * (*v3 == v4)) ^ a2 ^ 0x3D1)) - 4))();
}

void sub_100081200(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  int v3;

  *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0x8C0F0A4F49AC022) = v3;
  *v1 = v2;
  JUMPOUT(0x1000811B4);
}

void sub_100081220(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8) ^ (3804331 * ((2 * (a1 & 0x520CC9FF) - a1 - 1376569856) ^ 0xD32613F6));
  v2 = *(_QWORD *)a1;
  ((void (*)(char *, void (*)()))*(&off_100212870 + (v1 ^ 0x2EA)))((char *)*(&off_100212870 + (v1 ^ 0x270)) - 8, sub_10008144C);
  __asm { BR              X10 }
}

uint64_t sub_1000812E8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((486 * (**(_QWORD **)(v1 + 8 * (v2 ^ 0x2C4)) == 0)) ^ v2))
                            - (v2 + 482)
                            + 1000))();
}

uint64_t sub_100081330@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 - 857)))(v1);
}

void sub_10008134C(_DWORD *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;

  v1 = *a1 ^ (535753261 * ((1711628207 - (a1 | 0x66055FAF) + (a1 | 0x99FAA050)) ^ 0x930EAE7F));
  v2 = *(_QWORD *)*(&off_100212870 + (int)(v1 ^ 0x7F7DFD11));
  v3 = (3804331 * (((&v2 | 0xC2EACB37) - (&v2 & 0xC2EACB37)) ^ 0xBC3FEEC1)) ^ (v1 - 2138962838);
  sub_100081220((uint64_t)&v2);
}

void sub_10008144C()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;

  qword_100262EB8 = 1801249171 * (((qword_100262EA8 ^ qword_100262EB8) - (_QWORD)&v0) ^ 0x8915C65683065AAALL);
  qword_100262EA8 = qword_100262EB8;
  v1 = (uint64_t)*(&off_100212870 + (unk_1001B7087 ^ 0x9Eu) + 186);
  v2 = 751 - 1759421093 * ((&v1 & 0xEE36C9AC | ~(&v1 | 0xEE36C9AC)) ^ 0xA2B48607);
  sub_10006EE7C((uint64_t)&v1);
}

uint64_t sub_100081554(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 88) = 90;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_100081574(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_10008158C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 24);
  return 0;
}

uint64_t sub_1000815A4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 8);
  return 0;
}

void sub_1000815BC()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v0 = (qword_100262EA8 ^ qword_100262CB8) - (_QWORD)&v2;
  qword_100262CB8 = 1801249171 * v0 + 0x4AADAB03756D799ELL;
  qword_100262EA8 = 1801249171 * (v0 ^ 0x8915C65683065AAALL);
  v4 = 751 - 1759421093 * ((2 * (&v3 & 0x65E3A2C8) - &v3 - 1709417168) ^ 0x2961ED64);
  LOBYTE(v0) = -109 * ((qword_100262EA8 + -109 * v0 - 98) ^ 0xAA);
  v3 = (uint64_t)*(&off_100212870
                + (v0 ^ byte_1001B7080[byte_1001B3ED0[v0] ^ 0x1B])
                + 131);
  sub_10006EE7C((uint64_t)&v3);
  v4 = 751 - 1759421093 * ((2 * (&v3 & 0xC091CA8) - &v3 + 1945559892) ^ 0xC08B5300);
  v3 = (uint64_t)*(&off_100212870
                + ((-109 * ((qword_100262EA8 - qword_100262CB8) ^ 0xAA)) ^ byte_1001B7080[byte_1001B3ED0[(-109 * ((qword_100262EA8 - qword_100262CB8) ^ 0xAA))] ^ 0xA6])
                - 175);
  sub_10006EE7C((uint64_t)&v3);
  v1 = 1225351577 * (&v3 ^ 0x239AD816);
  LODWORD(v3) = v1 + 290;
  BYTE4(v3) = v1 ^ 0x20;
  sub_10007FDAC((uint64_t)&v3);
}

uint64_t sub_1000817B4(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;
  int v7;
  uint64_t v8;

  v1 = 1178560073 * ((2 * (result & 0x64AC438940A5398ALL) - result + 0x1B53BC76BF5AC675) ^ 0xAFEC9E05CEBE17);
  v2 = *(_QWORD *)(result + 16) - v1;
  v3 = *(_QWORD *)(result + 40) + v1;
  v4 = v2 == v3;
  v5 = v2 > v3;
  v6 = v4;
  if (((*(_DWORD *)(result + 24) - 1178560073 * ((2 * (result & 0x40A5398A) - (_DWORD)result - 1084569995) ^ 0x5CEBE17)) & 1) != 0)
    v7 = v5;
  else
    v7 = v6;
  v4 = v7 == 0;
  v8 = 4;
  if (!v4)
    v8 = 8;
  *(_DWORD *)result = *(_DWORD *)(result + 28) ^ (1178560073
                                                * ((2 * (result & 0x40A5398A) - result - 1084569995) ^ 0x5CEBE17)) ^ (*(_DWORD *)(result + v8) - 1178560073 * ((2 * (result & 0x40A5398A) - result - 1084569995) ^ 0x5CEBE17));
  return result;
}

uint64_t sub_100081858(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;

  v2 = 460628867 * (((a1 | 0x167EA26) - a1 + (a1 & 0xFE9815D9)) ^ 0x4DF1685B);
  v3 = *(_DWORD *)(a1 + 20) - v2;
  v5 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = 762464893 * (*(_DWORD *)(a1 + 16) - v2)
     - ((1524929786 * (*(_DWORD *)(a1 + 16) - v2) + 1665562562) & 0xAE48B466)
     + 147297812;
  v7 = -628913711 * (*(_DWORD *)(a1 + 24) + v2) + 1106815404;
  v8 = 1755732067
     * (((&v10 | 0x79A15B62) - &v10 + (&v10 & 0x865EA498)) ^ 0xA767E6B9);
  v10 = (v7 ^ 0x5FEF1B9E) + v8 + ((2 * v7) & 0xBFDE373C) - 268566534;
  v13 = v4;
  v14 = v6 ^ v8;
  v12 = v8 ^ (v3 + 2024874050);
  v11 = v5;
  result = ((uint64_t (*)(unsigned int *))*(&off_100212870 + (int)(v3 ^ 0x874EE3B4)))(&v10);
  *(_DWORD *)(a1 + 28) = v15;
  return result;
}

uint64_t sub_100081A00(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  int v11;

  v1 = 235795823 * ((~result & 0x2A1D36B9A93A3D3 | result & 0xFD5E2C94656C5C2CLL) ^ 0xA1169950E3EEA8ALL);
  v2 = *(_QWORD *)(result + 8) + v1;
  v3 = *(_DWORD *)(result + 20) ^ v1;
  v4 = *(_QWORD *)(result + 32) - v1;
  v5 = *(_DWORD *)(result + 16) ^ v1;
  v6 = *(_DWORD *)(result + 40) - v1;
  v7 = *(_DWORD *)result ^ v1;
  v8 = v2 == v4;
  v9 = v2 >= v4;
  v10 = !v8;
  if ((v3 & 1) == 0)
    v9 = v10;
  if (v9)
    v11 = v5;
  else
    v11 = v6;
  *(_DWORD *)(result + 44) = v7 ^ v11;
  return result;
}

uint64_t sub_100081A94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  v3 = (*(_DWORD *)a1 ^ (235795823 * ((2 * (a1 & 0x5AD4AFC8) - a1 + 623595575) ^ 0xB186196E))) - 426522835;
  v5 = v3 + 1225351577 * ((2 * (&v5 & 0x53F62218) - &v5 + 738844130) ^ 0xF9305F4) + 392;
  v6 = v1;
  v7 = v2;
  return ((uint64_t (*)(unsigned int *))*(&off_100212870 + v3))(&v5);
}

uint64_t sub_100081B84(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t v8;

  v1 = 1755732067 * ((2 * (result & 0x155053FA18C8728CLL) - result + 0x6AAFAC05E7378D73) ^ 0xB7040B3A39F130A8);
  v2 = *(_QWORD *)(result + 8);
  v3 = v2 - v1;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 == v2;
  v6 = v4 - v1 > v3;
  if (((*(_DWORD *)(result + 20) + 1755732067 * ((2 * (result & 0x18C8728C) - (_DWORD)result - 415789709) ^ 0x39F130A8)) & 1) != 0)
    v5 = v6;
  v7 = !v5;
  v8 = 4;
  if (!v7)
    v8 = 16;
  *(_DWORD *)result = *(_DWORD *)(result + v8) ^ (1755732067
                                                * ((2 * (result & 0x18C8728C) - result - 415789709) ^ 0x39F130A8)) ^ (*(_DWORD *)(result + 24) - 1755732067 * ((2 * (result & 0x18C8728C) - result - 415789709) ^ 0x39F130A8));
  return result;
}

uint64_t sub_100081C2C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 8);
  return 0;
}

_BYTE *sub_100081C44(_BYTE *result, char a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = -(int)result & 7;
  if (v3 > a3)
    LODWORD(v3) = a3;
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }
  v4 = a3 - v3;
  v6 = v4;
  v5 = v4 & 7;
  switch(v6)
  {
    case 0uLL:
      return result;
    case 1uLL:
      goto LABEL_20;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      goto LABEL_18;
    case 4uLL:
      goto LABEL_17;
    case 5uLL:
      goto LABEL_16;
    case 6uLL:
      goto LABEL_15;
    case 7uLL:
      *result++ = a2;
LABEL_15:
      *result++ = a2;
LABEL_16:
      *result++ = a2;
LABEL_17:
      *result++ = a2;
LABEL_18:
      *result++ = a2;
LABEL_19:
      *result++ = a2;
LABEL_20:
      *result = a2;
      break;
    default:
      result = (_BYTE *)((uint64_t (*)(void))((char *)&loc_100081CD4 + 4 * byte_1001AFDD7[(v5 >> 3) & 7]))();
      break;
  }
  return result;
}

uint64_t sub_100081D38(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;

  v2 = 1374699841 * (a1 ^ 0x6DF41809);
  v3 = *(_DWORD *)(a1 + 8) ^ v2;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_DWORD *)(a1 + 56);
  v9 = 1224239923 * ((2 * (&v11 & 0x7CB74020) - &v11 - 2092384291) ^ 0x71FB420A);
  v17 = v3 - 1695026411 + v9;
  v11 = v7;
  v14 = v4;
  v15 = v6;
  v13 = v5;
  v12 = v2 + v8 - v9 + 810811810;
  result = ((uint64_t (*)(uint64_t *))((char *)*(&off_100212870 + (v3 ^ 0x65081087)) - 12))(&v11);
  *(_DWORD *)(a1 + 24) = v16;
  return result;
}

uint64_t sub_100081E5C(int *a1)
{
  unsigned int v2;
  uint64_t result;
  int v4;

  v2 = a1[1] - 108757529 * (a1 ^ 0xE09C622B);
  result = ((uint64_t (*)(char *, _QWORD))*(&off_100212870 + (int)(v2 + 504207254)))((char *)*(&off_100212870 + (int)(v2 + 504207109)) - 4, *(&off_100212870 + (int)(v2 ^ 0xE1F2698F)));
  v4 = *(_DWORD *)*(&off_100212870 + (int)(v2 ^ 0xE1F26935));
  if ((_DWORD)result)
    v4 = 1262711766;
  *a1 = v4;
  return result;
}

uint64_t sub_100081EF8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  v2 = 628203409 * (((a1 | 0xBB8CAEEC) - (a1 & 0xBB8CAEEC)) ^ 0x3904A2DF);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 20) + v2;
  v7 = *(_DWORD *)a1 - 368400146 + v2;
  v8 = 235795823 * ((((2 * &v10) | 0x2D62A18A) - &v10 - 380719301) ^ 0x821C199C);
  v16 = *(_QWORD *)(a1 + 8);
  v15 = v8 ^ (v7 + 1827);
  v10 = v5;
  v12 = v4;
  v13 = v3;
  v11 = v8 + (v6 ^ 0x3A2B3CAB) - 33865800 + ((2 * v6) & 0xAE9FCABC ^ 0x8A8982A8);
  result = ((uint64_t (*)(uint64_t *))((char *)*(&off_100212870 + v7) - 8))(&v10);
  *(_DWORD *)(a1 + 40) = v14;
  return result;
}

uint64_t sub_100082050(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  v1 = 1374699841 * ((result - 2 * (result & 0xA8F7ECC532399345) - 0x5708133ACDC66CBBLL) ^ 0xA6FB72C95FCD8B4CLL);
  v2 = *(_QWORD *)(result + 16) ^ v1;
  v3 = *(_QWORD *)(result + 8) - v1;
  v4 = v2 >= v3;
  v5 = (uint64_t)v2 < (uint64_t)v3;
  v6 = !v4;
  if (((*(_DWORD *)(result + 24) + 1374699841 * (((_DWORD)result - 2 * (result & 0x32399345) + 842634053) ^ 0x5FCD8B4C)) & 1) == 0)
    v5 = v6;
  v7 = !v5;
  v8 = 32;
  if (!v7)
    v8 = 28;
  *(_DWORD *)(result + 36) = *(_DWORD *)(result + 40) ^ (1374699841
                                                       * ((result - 2 * (result & 0x32399345) + 842634053) ^ 0x5FCD8B4C)) ^ *(_DWORD *)(result + v8) ^ (1374699841 * ((result - 2 * (result & 0x32399345) + 842634053) ^ 0x5FCD8B4C));
  return result;
}

id IntegrityReportDatasources()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  APIntegrityDatasource *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  id v11;
  APIntegrityDatasource *v12;
  void *v13;
  APIntegrityDatasource *v14;
  void *v15;
  APIntegrityDatasource *v16;
  void *v17;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  APIntegrityDatasource *v25;

  v0 = +[APConfigurationMediator configurationForClass:](APConfigurationMediator, "configurationForClass:", objc_opt_class(APCSIntegrityReport));
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[APDatabaseManager mainDatabase](APDatabaseManager, "mainDatabase"));
  v3 = objc_msgSend(v2, "getTableForClass:", objc_opt_class(APDBReportEventCount));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "reportingPurposes"));
  if (v5)
  {
    v6 = (APIntegrityDatasource *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "reportingPurposes"));
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v21 != v9)
            objc_enumerationMutation(obj);
          v11 = objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i), "integerValue");
          v12 = [APIntegrityDatasource alloc];
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          v14 = -[APBaseReport initWithReportDate:purpose:reportEventCount:](v12, "initWithReportDate:purpose:reportEventCount:", v13, v11, v4);

          -[APIntegrityDatasource addObject:](v6, "addObject:", v14);
        }
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v8);
    }

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v6));
  }
  else
  {
    v16 = [APIntegrityDatasource alloc];
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v6 = -[APBaseReport initWithReportDate:purpose:reportEventCount:](v16, "initWithReportDate:purpose:reportEventCount:", v17, 100, v4);

    v25 = v6;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
  }

  return v15;
}

id ReportDatasources()
{
  id v0;
  id v1;
  void *v2;
  void *v3;

  v0 = objc_alloc_init((Class)NSMutableArray);
  v1 = IntegrityReportDatasources();
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  objc_msgSend(v0, "addObjectsFromArray:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v0));
  return v3;
}

void CleanOldData()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  APReportDate *v6;
  void *v7;
  APReportDate *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t v18[16];

  v0 = +[APConfigurationMediator configurationForClass:](APConfigurationMediator, "configurationForClass:", objc_opt_class(APCSReports));
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "removeDataAfterDays"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "removeDataAfterDays"));
    v4 = (unint64_t)objc_msgSend(v3, "unsignedIntegerValue");

  }
  else
  {
    v4 = 100;
  }
  if (v4 >= 0x16D)
    v5 = 365;
  else
    v5 = v4;
  v6 = [APReportDate alloc];
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v8 = -[APReportDate initWithDate:](v6, "initWithDate:", v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(-[APReportDate currentDateMinusDays:](v8, "currentDateMinusDays:", v5));
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[APDatabaseManager mainDatabase](APDatabaseManager, "mainDatabase"));
    v11 = objc_msgSend(v10, "getTableForClass:", objc_opt_class(APDBReportEventCount));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

    objc_msgSend(v12, "deleteCountsOlderThan:", v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[APDatabaseManager mainDatabase](APDatabaseManager, "mainDatabase"));
    v14 = objc_msgSend(v13, "getTableForClass:", objc_opt_class(APDBDeliveredReport));
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

    objc_msgSend(v15, "deleteReportsOlderThan:", v9);
  }
  else
  {
    v16 = APLogForCategory(39);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Reports: Error creating remove date.", v18, 2u);
    }

  }
}

void LogReportDelivery(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSNumber *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[APDatabaseManager mainDatabase](APDatabaseManager, "mainDatabase"));
  v3 = objc_msgSend(v2, "getTableForClass:", objc_opt_class(APDBDeliveredReport));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "reportType"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "reportDate"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v6, "reportEndDay")));
  v8 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend((id)objc_opt_class(v1), "reportFrequency"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "storeDeliveryReportType:dayOfYear:frequency:reportDate:", v5, v7, v9, v10));

  v12 = APLogForCategory(39);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = v13;
  if (v11)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "reportType"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "reportDate"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "reportDayString"));
      v21 = 141558530;
      v22 = 1752392040;
      v23 = 2112;
      v24 = v15;
      v25 = 2114;
      v26 = v17;
      v18 = "Reports: Report %{mask.hash}@ for day %{public}@ saved to DB.";
      v19 = v14;
      v20 = OS_LOG_TYPE_DEFAULT;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, (uint8_t *)&v21, 0x20u);

    }
  }
  else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "reportType"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "reportDate"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "reportDayString"));
    v21 = 141558530;
    v22 = 1752392040;
    v23 = 2112;
    v24 = v15;
    v25 = 2114;
    v26 = v17;
    v18 = "Reports: Error saving report %{mask.hash}@ for day %{public}@ to DB.";
    v19 = v14;
    v20 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

}

void PrepareReports()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  char *v9;
  _UNKNOWN **v10;
  void *i;
  void *v12;
  id v13;
  void *v14;
  id v15;
  APReportDelivery *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  _BYTE v36[128];

  v0 = ReportDatasources();
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[APDatabaseManager mainDatabase](APDatabaseManager, "mainDatabase"));
  v3 = objc_msgSend(v2, "getTableForClass:", objc_opt_class(APDBDeliveredReport));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v5 = v1;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v27;
    v9 = (char *)&unk_10025C000;
    v10 = APECJourneyPurposeConfig_ptr;
    v25 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v8)
          objc_enumerationMutation(v5);
        v12 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        v13 = objc_alloc((Class)(v9 + 624));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[64], "date"));
        v15 = objc_msgSend(v13, "initWithReportDatasource:deliveredReport:currentDate:", v12, v4, v14);

        if (objc_msgSend(v15, "validateCurrent"))
        {
          v16 = -[APReportDelivery initWithDatasource:]([APReportDelivery alloc], "initWithDatasource:", v12);
          -[APReportDelivery prepareDelivery](v16, "prepareDelivery");
          LogReportDelivery(v12);
        }
        else
        {
          v17 = APLogForCategory(39);
          v16 = (APReportDelivery *)objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(&v16->super, OS_LOG_TYPE_INFO))
          {
            v18 = v4;
            v19 = v9;
            v20 = v5;
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "reportType"));
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "reportDate"));
            v23 = v7;
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "reportDayString"));
            *(_DWORD *)buf = 141558530;
            v31 = 1752392040;
            v32 = 2112;
            v33 = v21;
            v34 = 2114;
            v35 = v24;
            _os_log_impl((void *)&_mh_execute_header, &v16->super, OS_LOG_TYPE_INFO, "Reports: Skipping report %{mask.hash}@ for day %{public}@, report is up to date.", buf, 0x20u);

            v7 = v23;
            v5 = v20;
            v9 = v19;
            v4 = v18;
            v8 = v25;
            v10 = APECJourneyPurposeConfig_ptr;
          }
        }

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
    }
    while (v7);
  }

  CleanOldData();
}

void PreparePastDueReports()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  APReportValidator *v6;
  void *v7;
  APReportValidator *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  APReportDate *v14;
  APReportDelivery *v15;
  id obj;
  uint64_t v17;
  void *v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];

  v0 = ReportDatasources();
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[APDatabaseManager mainDatabase](APDatabaseManager, "mainDatabase"));
  v3 = objc_msgSend(v2, "getTableForClass:", objc_opt_class(APDBDeliveredReport));
  v18 = (void *)objc_claimAutoreleasedReturnValue(v3);

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  obj = v1;
  v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v19)
  {
    v17 = *(_QWORD *)v25;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v25 != v17)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v4);
        v6 = [APReportValidator alloc];
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
        v8 = -[APReportValidator initWithReportDatasource:deliveredReport:currentDate:](v6, "initWithReportDatasource:deliveredReport:currentDate:", v5, v18, v7);

        v9 = (void *)objc_claimAutoreleasedReturnValue(-[APReportValidator pastDueReportDates](v8, "pastDueReportDates"));
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v21;
          do
          {
            v13 = 0;
            do
            {
              if (*(_QWORD *)v21 != v12)
                objc_enumerationMutation(v9);
              v14 = -[APReportDate initWithDate:]([APReportDate alloc], "initWithDate:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v13));
              objc_msgSend(v5, "setReportDate:", v14);

              v15 = -[APReportDelivery initWithDatasource:]([APReportDelivery alloc], "initWithDatasource:", v5);
              -[APReportDelivery prepareDelivery](v15, "prepareDelivery");
              LogReportDelivery(v5);

              v13 = (char *)v13 + 1;
            }
            while (v11 != v13);
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
          }
          while (v11);
        }

        v4 = (char *)v4 + 1;
      }
      while (v4 != v19);
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v19);
  }

}

void sub_100086C80(uint64_t a1)
{
  APReportDate *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id obj;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v2 = -[APReportDate initWithDate:]([APReportDate alloc], "initWithDate:", v18);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  obj = *(id *)(a1 + 32);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v23;
    v19 = *(_QWORD *)v23;
    do
    {
      v6 = 0;
      v20 = v4;
      do
      {
        if (*(_QWORD *)v23 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v6);
        v8 = objc_msgSend((id)objc_opt_class(v7), "reportFrequency");
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "reportType"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deliveryReportsWithType:", v9));
        v11 = v10;
        if (v10)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lastObject"));
          if (v12 && v8 == (id)1901)
          {
            v13 = 7;
            do
            {
              v14 = -[APReportDate reportDayMinus:](v2, "reportDayMinus:", v13);
              v15 = *(void **)(a1 + 40);
              v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v14));
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "deliveryReportWithType:dayOfYear:", v9, v16));

              if (!v17)
                break;
              --v13;
            }
            while (v13);
            v5 = v19;
            v4 = v20;
          }

        }
        v6 = (char *)v6 + 1;
      }
      while (v6 != v4);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v4);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10008808C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = APLogForCategory(46);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = objc_opt_class(*(_QWORD *)(a1 + 32), v4);
    v6 = 138543362;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unexpected event type: %{public}@", (uint8_t *)&v6, 0xCu);
  }

}

void sub_100088C84(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = APLogForCategory(46);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = objc_opt_class(*(_QWORD *)(a1 + 32), v4);
    v6 = 138543362;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unexpected event type: %{public}@", (uint8_t *)&v6, 0xCu);
  }

}

void sub_100089D4C(id a1)
{
  id v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228B98, CFSTR("U18"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228BB0, CFSTR("18-24"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228BC8, CFSTR("25-34"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228BE0, CFSTR("35-44"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228BF8, CFSTR("45-54"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228C10, CFSTR("55-64"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228C28, CFSTR("O64"));
  v1 = objc_msgSend(v3, "copy");
  v2 = (void *)qword_100268760;
  qword_100268760 = (uint64_t)v1;

}

void sub_100089E38(id a1)
{
  id v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228C40, CFSTR("f"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228C58, CFSTR("m"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228C70, CFSTR("s"));
  objc_msgSend(v3, "setObject:forKey:", &off_100228C88, CFSTR("d"));
  v1 = objc_msgSend(v3, "copy");
  v2 = (void *)qword_100268768;
  qword_100268768 = (uint64_t)v1;

}

void sub_100089F1C(id a1)
{
  +[APIDAccountProvider fetchGenderAndAgeData:completionHandler:](APIDAccountProvider, "fetchGenderAndAgeData:completionHandler:", 1, &stru_100213080);
}

void sub_100089F34(id a1, NSDictionary *a2)
{
  id v2;
  void *v3;

  v2 = -[NSDictionary copy](a2, "copy");
  v3 = (void *)qword_100268780;
  qword_100268780 = (uint64_t)v2;

}

void sub_10008A918(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.ap.datasource", v4);
  v3 = (void *)qword_100268790;
  qword_100268790 = (uint64_t)v2;

}

void sub_10008ABD0(uint64_t a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  id v10;

  v7 = *(NSObject **)(a1 + 32);
  v8 = a4;
  v9 = a3;
  v10 = a2;
  dispatch_semaphore_signal(v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

id sub_10008BE28(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  NSErrorUserInfoKey v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("'%@' is not a valid date. Date must be in 'yyyy-MM-dd HH:mm:ss format."), a2));
  v6 = NSLocalizedDescriptionKey;
  v7 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.ap.dataadaptors"), 5201, v3));

  return v4;
}

void sub_10008BF08(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  objc_class *v6;
  NSString *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  void *v20;

  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = APLogForCategory(46);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
      v7 = NSStringFromClass(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
      v10 = objc_msgSend(v9, "code");
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedDescription"));
      v15 = 138543874;
      v16 = v8;
      v17 = 2048;
      v18 = v10;
      v19 = 2114;
      v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ stream failed with error %ld: %{public}@", (uint8_t *)&v15, 0x20u);

    }
  }
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
    (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v13 + 16))(v13, 0, 0, v14);

  }
}

void sub_10008C07C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v3 = a2;
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1002687A8 != -1)
      dispatch_once(&qword_1002687A8, &stru_100213118);
    v4 = (void *)qword_1002687A0;
    objc_msgSend(v3, "timestamp");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringFromDate:", v5));

    v7 = *(_QWORD *)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v11[0] = CFSTR("timestamp");
    objc_msgSend(v3, "timestamp");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    v11[1] = CFSTR("date");
    v12[0] = v9;
    v12[1] = v6;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 2));
    (*(void (**)(uint64_t, void *, void *, _QWORD))(v7 + 16))(v7, v8, v10, 0);

  }
}

void sub_10008C1F0(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1002687A0;
  qword_1002687A0 = (uint64_t)v1;

  objc_msgSend((id)qword_1002687A0, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss"));
}

BOOL sub_10008C4E0(id a1, NSObject *a2, NSDictionary *a3, BOOL *a4)
{
  return 1;
}

void sub_10008C638(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stream"));

  if (!v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_biomeStream"));
    objc_msgSend(*(id *)(a1 + 32), "setStream:", v3);

  }
}

uint64_t sub_10008C6A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  uint64_t v11;
  const __CFString *v13;
  void *v14;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "eventBody"));
  v13 = CFSTR("timestamp");
  objc_msgSend(v5, "timestamp");
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v8));
  v14 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
  v11 = (*(uint64_t (**)(uint64_t, void *, void *, uint64_t))(v4 + 16))(v4, v6, v10, a3);

  return v11;
}

void sub_10008C9B8(id a1)
{
  APDataAdaptorRepository *v1;
  void *v2;

  v1 = objc_alloc_init(APDataAdaptorRepository);
  v2 = (void *)qword_1002687B8;
  qword_1002687B8 = (uint64_t)v1;

}

void sub_10008D580(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = APLogForCategory(46);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5 = objc_opt_class(*(_QWORD *)(a1 + 32), v4);
    v6 = 138543362;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unexpected event type: %{public}@", (uint8_t *)&v6, 0xCu);
  }

}

void sub_10008D818(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[4];

  v4[0] = CFSTR("IPHONE");
  v4[1] = CFSTR("IPAD");
  v4[2] = CFSTR("IPOD");
  v4[3] = CFSTR("MAC");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 4));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1));
  v3 = (void *)qword_1002687D0;
  qword_1002687D0 = v2;

}

void sub_10008F590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008F5B0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  const __CFString **v18;
  const __CFString *v19;
  const __CFString *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  const __CFString *v24;
  __int16 v25;
  const __CFString *v26;

  v6 = a2;
  v7 = a4;
  v8 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "BOOLValue");
  }
  else
  {
    v9 = APLogForCategory(46);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = (objc_class *)objc_opt_class(v6);
      v12 = NSStringFromClass(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v21 = 138412290;
      v22 = (uint64_t)v13;

    }
    if (*(_QWORD *)(a1 + 48))
      **(_QWORD **)(a1 + 48) = objc_retainAutorelease(v7);
  }
  v14 = APLogForCategory(46);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "adaptorIdentifier"));
    v17 = (void *)v16;
    v18 = *(const __CFString ***)(a1 + 48);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      v19 = CFSTR("1");
    else
      v19 = CFSTR("0");
    if (v18)
      v20 = *v18;
    else
      v20 = CFSTR("(unknown)");
    v21 = 138543874;
    v22 = v16;
    v23 = 2114;
    v24 = v19;
    v25 = 2114;
    v26 = v20;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%{public}@ returned %{public}@ with error %{public}@", (uint8_t *)&v21, 0x20u);

  }
}

id opTokens()
{
  if (qword_1002687F8 != -1)
    dispatch_once(&qword_1002687F8, &stru_100213268);
  return (id)qword_1002687F0;
}

void sub_1000905C8(id a1)
{
  void *v1;

  v1 = (void *)qword_1002687F0;
  qword_1002687F0 = (uint64_t)&off_10022A8F8;

}

void sub_1000922B4(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  v1 = objc_autoreleasePoolPush();
  v2 = objc_claimAutoreleasedReturnValue(+[APPCPolicyFormatDaemon adPolicies](APPCPolicyFormatDaemon, "adPolicies"));
  v3 = (void *)qword_100268808;
  qword_100268808 = v2;

  objc_autoreleasePoolPop(v1);
}

void sub_100092D48(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  void *v33;
  id v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  id v48;
  void *v49;
  _UNKNOWN **v50;
  void *v51;
  void *v52;
  uint64_t v53;
  const __CFString *v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  void *i;
  void *v61;
  void *v62;
  const __CFString *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  NSObject *v79;
  void *v80;
  void *v81;
  void *v82;
  NSObject *v83;
  id v84;
  id v85;
  uint64_t v86;
  void *j;
  void *v88;
  id v89;
  void *v90;
  id v91;
  void *v92;
  uint64_t v93;
  NSObject *v94;
  void *v95;
  id v96;
  NSObject *v97;
  void *v98;
  void *v99;
  unsigned int v100;
  void *v101;
  id v102;
  id v103;
  uint64_t v104;
  void *k;
  void *v106;
  uint64_t v107;
  NSObject *v108;
  void *v109;
  const __CFString *v110;
  id v111;
  NSObject *v112;
  NSObject *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  NSObject *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  id v132;
  uint64_t v133;
  id v134;
  void *v135;
  uint64_t v136;
  unsigned int obj;
  id obja;
  NSObject *objb;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  id v152;
  uint8_t buf[4];
  void *v154;
  __int16 v155;
  id v156;
  __int16 v157;
  NSObject *v158;
  _BYTE v159[128];
  _BYTE v160[128];
  _BYTE v161[128];

  v2 = objc_autoreleasePoolPush();
  v133 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "policySettings"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "alias"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expressions"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "policy"));
  v7 = objc_msgSend(v3, "dataFetchedFromServer");
  if (+[APSystemInternal isAppleInternalInstall](APSystemInternal, "isAppleInternalInstall"))
  {
    obj = v7;
    v8 = objc_alloc((Class)NSUserDefaults);
    v9 = objc_msgSend(v8, "initWithSuiteName:", APDefaultsBundleID);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dictionaryRepresentation"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allKeys"));
    v12 = objc_msgSend(v11, "containsObject:", CFSTR("AdPolicyPayload"));

    if (v12)
    {
      v127 = v6;
      v13 = APLogForCategory(1);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = (void *)objc_opt_class(*(_QWORD *)(v133 + 32));
        *(_DWORD *)buf = 138477827;
        v154 = v15;
        v16 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[%{private}@] Ad Policy Payload is being overridden via defaults.", buf, 0xCu);

      }
      v129 = v5;

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringForKey:", CFSTR("AdPolicyPayload")));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dataUsingEncoding:", 4));
      v152 = 0;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v18, 0, &v152));
      v20 = v152;
      if (v20)
      {
        v21 = (uint64_t)v4;
        v22 = APLogForCategory(1);
        v4 = objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v23 = (void *)objc_opt_class(*(_QWORD *)(v133 + 32));
          *(_DWORD *)buf = 138478083;
          v154 = v23;
          v155 = 2114;
          v156 = v20;
          v123 = v2;
          v24 = v3;
          v25 = v23;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[%{private}@] There was an error with the overridden policy payload: %{public}@.", buf, 0x16u);

          v3 = v24;
          v2 = v123;
        }
      }
      else
      {
        v120 = v3;
        v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", CFSTR("policy")));

        v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", CFSTR("expressions")));
        v127 = (void *)v26;
        v129 = (void *)v27;
        v3 = v120;
        v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", CFSTR("alias")));
      }

      v4 = v21;
      v6 = v127;
      v5 = v129;
    }

    v7 = obj;
  }
  else
  {
    v12 = 0;
  }
  v132 = objc_alloc_init((Class)NSDictionary);
  if (v6)
  {
    v28 = objc_opt_class(NSDictionary);
    if ((objc_opt_isKindOfClass(v6, v28) & 1) != 0)
    {
      if (v4)
      {
        v29 = objc_opt_class(NSDictionary);
        if ((objc_opt_isKindOfClass(v4, v29) & 1) != 0)
        {
          v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "aliasTransformedPolicies:alias:", v6, v4));

          v132 = (id)v30;
        }
      }
    }
  }
  v31 = APLogForCategory(1);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    v33 = (void *)objc_opt_class(*(_QWORD *)(v133 + 32));
    *(_DWORD *)buf = 138478083;
    v154 = v33;
    v155 = 2114;
    v156 = v5;
    v34 = v33;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "[%{private}@] Ad Policy expressions: %{public}@", buf, 0x16u);

  }
  v35 = APLogForCategory(1);
  v36 = objc_claimAutoreleasedReturnValue(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    v37 = (void *)objc_opt_class(*(_QWORD *)(v133 + 32));
    *(_DWORD *)buf = 138478083;
    v154 = v37;
    v155 = 2114;
    v156 = v4;
    v38 = v37;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "[%{private}@] Ad Policy aliases: %{public}@", buf, 0x16u);

  }
  v39 = APLogForCategory(1);
  v40 = objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    v41 = (void *)objc_opt_class(*(_QWORD *)(v133 + 32));
    *(_DWORD *)buf = 138478083;
    v154 = v41;
    v155 = 2114;
    v156 = v132;
    v42 = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "[%{private}@] Ad Policy policy: %{public}@", buf, 0x16u);

  }
  v43 = objc_claimAutoreleasedReturnValue(+[APPCPolicyFormatDaemon adPolicies](APPCPolicyFormatDaemon, "adPolicies"));
  v44 = (void *)v43;
  if (((v7 | v12) & 1) != 0 || !v43)
  {
    v50 = APECJourneyPurposeConfig_ptr;
    v126 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v128 = v6;
    v49 = v132;
    v122 = v44;
    v124 = v2;
    if (v132)
    {
      if ((objc_msgSend(*(id *)(v133 + 32), "isValidPolicy:", v132) & 1) == 0)
      {
        v93 = APLogForCategory(1);
        v94 = objc_claimAutoreleasedReturnValue(v93);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
        {
          v95 = (void *)objc_opt_class(*(_QWORD *)(v133 + 32));
          *(_DWORD *)buf = 138477827;
          v154 = v95;
          v96 = v95;
          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "[%{private}@] FILE A RADAR. The policy is not valid", buf, 0xCu);

          v49 = v132;
        }
        goto LABEL_80;
      }
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKey:", CFSTR("adSessionBefore")));
      v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKey:", CFSTR("adSessionAfter")));
      v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKey:", CFSTR("adsAllowed")));
      v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKey:", CFSTR("spacing")));
      v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKey:", CFSTR("timer")));
      v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v132, "objectForKey:", CFSTR("timerOrSpacing")));
      v115 = v51;
      v121 = v3;
      v112 = v4;
      if (v114 && objc_msgSend(v5, "count"))
      {
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "flattenPolicy:policyType:", v114, 7));
        v134 = objc_msgSend(v52, "mutableCopy");
        if (objc_msgSend(v52, "count"))
        {
          v53 = 0;
          v54 = CFSTR("identifier");
          v130 = v5;
          v125 = v52;
          do
          {
            v136 = v53;
            v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectAtIndexedSubscript:", v53, v112));
            v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKey:", CFSTR("expression")));

            v150 = 0u;
            v151 = 0u;
            v148 = 0u;
            v149 = 0u;
            obja = v5;
            v57 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v148, v161, 16);
            if (v57)
            {
              v58 = v57;
              v59 = *(_QWORD *)v149;
              v135 = v56;
              do
              {
                for (i = 0; i != v58; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v149 != v59)
                    objc_enumerationMutation(obja);
                  v61 = *(void **)(*((_QWORD *)&v148 + 1) + 8 * (_QWORD)i);
                  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "objectForKey:", v54));
                  if (objc_msgSend(v56, "isEqualToString:", v62))
                  {
                    v63 = v54;
                    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "objectForKey:", CFSTR("expression")));
                    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "objectForKey:", CFSTR("data")));
                    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "objectAtIndexedSubscript:", v136));
                    objc_msgSend(v66, "setObject:forKey:", v64, CFSTR("targetingExpression"));

                    v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "objectAtIndexedSubscript:", v136));
                    objc_msgSend(v67, "setObject:forKey:", v65, CFSTR("dataAdapters"));

                    v54 = v63;
                    v56 = v135;
                  }

                }
                v58 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v148, v161, 16);
              }
              while (v58);
            }

            v53 = v136 + 1;
            v52 = v125;
            v5 = v130;
          }
          while (v136 + 1 < (unint64_t)objc_msgSend(v125, "count"));
        }
        -[NSObject addObjectsFromArray:](v126, "addObjectsFromArray:", v52, v112);

        v3 = v121;
        v4 = v112;
        v50 = APECJourneyPurposeConfig_ptr;
      }
      if (v51)
      {
        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKey:", CFSTR("timer")));
        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "flattenPolicy:policyType:", v68, 3));
        -[NSObject addObjectsFromArray:](v126, "addObjectsFromArray:", v69);
        v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "objectForKey:", CFSTR("spacing")));
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "flattenPolicy:policyType:", v70, 4));
        -[NSObject addObjectsFromArray:](v126, "addObjectsFromArray:", v71);

      }
      if (v119)
      {
        v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "objectForKey:", CFSTR("timer")));
        v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "flattenPolicy:policyType:", v72, 5));
        -[NSObject addObjectsFromArray:](v126, "addObjectsFromArray:", v73);
        v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "objectForKey:", CFSTR("spacing")));
        v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "flattenPolicy:policyType:", v74, 6));
        -[NSObject addObjectsFromArray:](v126, "addObjectsFromArray:", v75);

      }
      if (v118)
      {
        v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "flattenPolicy:policyType:", v118, 2));
        -[NSObject addObjectsFromArray:](v126, "addObjectsFromArray:", v76);

      }
      if (v117)
      {
        v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "flattenPolicy:policyType:", v117, 1));
        -[NSObject addObjectsFromArray:](v126, "addObjectsFromArray:", v77);

      }
      if (v116)
      {
        v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "flattenPolicy:policyType:", v116, 0));
        -[NSObject addObjectsFromArray:](v126, "addObjectsFromArray:", v78);

      }
      v79 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array", v112));
      v80 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKey:](v4, "objectForKey:", CFSTR("adFormatType")));
      v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "objectForKey:", CFSTR("XL-ad")));

      if (v81)
      {
        v131 = v5;
        v82 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKey:](v4, "objectForKey:", CFSTR("adFormatType")));
        v83 = objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "objectForKey:", CFSTR("XL-ad")));

        v146 = 0u;
        v147 = 0u;
        v144 = 0u;
        v145 = 0u;
        objb = v126;
        v84 = -[NSObject countByEnumeratingWithState:objects:count:](objb, "countByEnumeratingWithState:objects:count:", &v144, v160, 16);
        if (v84)
        {
          v85 = v84;
          v86 = *(_QWORD *)v145;
          do
          {
            for (j = 0; j != v85; j = (char *)j + 1)
            {
              if (*(_QWORD *)v145 != v86)
                objc_enumerationMutation(objb);
              v88 = *(void **)(*((_QWORD *)&v144 + 1) + 8 * (_QWORD)j);
              v89 = objc_msgSend(v88, "mutableCopy");
              v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "objectForKey:", CFSTR("adFormatType")));
              v91 = -[NSObject containsObject:](v83, "containsObject:", v90);

              v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v91));
              objc_msgSend(v89, "setObject:forKey:", v92, CFSTR("isXLFormat"));

              -[NSObject addObject:](v79, "addObject:", v89);
            }
            v85 = -[NSObject countByEnumeratingWithState:objects:count:](objb, "countByEnumeratingWithState:objects:count:", &v144, v160, 16);
          }
          while (v85);
        }

        v3 = v121;
        v4 = v113;
        v5 = v131;
        v50 = APECJourneyPurposeConfig_ptr;
      }
      else
      {
        v83 = v79;
        v79 = v126;
      }

      objc_msgSend(*(id *)(v133 + 32), "generatePolicyDataObjects:", v79);
    }
    v97 = v4;
    v98 = v3;
    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "adPolicies"));
    v100 = +[APPCPolicyFormatDaemon storeAdPolicies:](APPCPolicyFormatDaemon, "storeAdPolicies:", v99);

    v94 = objc_claimAutoreleasedReturnValue(objc_msgSend(v50[87], "array"));
    v140 = 0u;
    v141 = 0u;
    v142 = 0u;
    v143 = 0u;
    v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 32), "adPolicies"));
    v102 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v140, v159, 16);
    if (v102)
    {
      v103 = v102;
      v104 = *(_QWORD *)v141;
      do
      {
        for (k = 0; k != v103; k = (char *)k + 1)
        {
          if (*(_QWORD *)v141 != v104)
            objc_enumerationMutation(v101);
          v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v140 + 1) + 8 * (_QWORD)k), "dictionaryRepresentation"));
          -[NSObject addObject:](v94, "addObject:", v106);

        }
        v103 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v140, v159, 16);
      }
      while (v103);
    }

    v107 = APLogForCategory(1);
    v108 = objc_claimAutoreleasedReturnValue(v107);
    if (os_log_type_enabled(v108, OS_LOG_TYPE_INFO))
    {
      v109 = (void *)objc_opt_class(*(_QWORD *)(v133 + 32));
      v110 = CFSTR("NOT successfully");
      *(_DWORD *)buf = 138478339;
      v154 = v109;
      v155 = 2114;
      if (v100)
        v110 = CFSTR("successfully");
      v156 = (id)v110;
      v157 = 2114;
      v158 = v94;
      v111 = v109;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_INFO, "[%{private}@] Ad Policies were %{public}@ stored: %{public}@", buf, 0x20u);

    }
    v3 = v98;
    v4 = v97;
    v6 = v128;
    v49 = v132;
    v44 = v122;
    v2 = v124;
LABEL_80:

    v46 = v126;
    goto LABEL_81;
  }
  v45 = APLogForCategory(1);
  v46 = objc_claimAutoreleasedReturnValue(v45);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
  {
    v47 = (void *)objc_opt_class(*(_QWORD *)(v133 + 32));
    *(_DWORD *)buf = 138477827;
    v154 = v47;
    v48 = v47;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "[%{private}@] We've already processed these policies. No need to reprocess.", buf, 0xCu);

  }
  v49 = v132;
LABEL_81:

  objc_autoreleasePoolPop(v2);
}

void sub_1000957DC(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  os_signpost_id_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  os_signpost_id_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  os_signpost_id_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint8_t buf[4];
  os_signpost_id_t v32;
  __int16 v33;
  uint64_t v34;

  v2 = APPerfLogForCategory(4);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  v5 = a1[9];
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    *(_DWORD *)buf = 134349056;
    v32 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v5, "Server Delivery Queue overhead", "id=%{public, name=id}lld", buf, 0xCu);
  }

  v6 = a1[4];
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  +[APAttributionAnalytics sendTimedAnalytic:fieldName:startDate:endDate:](APAttributionAnalytics, "sendTimedAnalytic:fieldName:startDate:endDate:", CFSTR("attribution.timingQueuing"), CFSTR("tokenClientQueuingTime"), v6, v7);

  v8 = APLogForCategory(4);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Signing request for Attribution server", buf, 2u);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v11 = APPerfLogForCategory(4);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  v14 = a1[9];
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_DWORD *)buf = 134349056;
    v32 = v14;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_BEGIN, v14, "Payload Signing", "id=%{public, name=id}lld", buf, 0xCu);
  }

  v15 = APPerfLogForCategory(4);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  v18 = a1[9];
  if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    *(_DWORD *)buf = 134349056;
    v32 = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_BEGIN, v18, "Signing service selector", "id=%{public, name=id}lld", buf, 0xCu);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[APAttributionPayloadSigningSelector selectorWithAttributionConfig](APAttributionPayloadSigningSelector, "selectorWithAttributionConfig"));
  v20 = objc_msgSend(v19, "selectRandomSigningService");
  v21 = APPerfLogForCategory(4);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  v23 = v22;
  v24 = a1[9];
  v25 = v24 - 1;
  if (v20 == (id)2)
  {
    if (v25 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
    {
      *(_DWORD *)buf = 134349312;
      v32 = v24;
      v33 = 2050;
      v34 = 2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, v24, "Signing service selector", "id=%{public, name=id}lld service=%{public, name=service}lu", buf, 0x16u);
    }

    v26 = APLogForCategory(4);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Using Mescal for Signing request for Attribution server", buf, 2u);
    }

    LOBYTE(v30) = 0;
    +[APAttributionServer signPayloadWithMescal:requestTimestamp:interval:jsonBody:startDate:deliveryStartDate:isFallback:completionHandler:](APAttributionServer, "signPayloadWithMescal:requestTimestamp:interval:jsonBody:startDate:deliveryStartDate:isFallback:completionHandler:", a1[5], a1[6], a1[9], a1[7], v10, a1[4], v30, a1[8]);
  }
  else
  {
    if (v25 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
    {
      *(_DWORD *)buf = 134349312;
      v32 = v24;
      v33 = 2050;
      v34 = 1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, v24, "Signing service selector", "id=%{public, name=id}lld service=%{public, name=service}lu", buf, 0x16u);
    }

    v28 = APLogForCategory(4);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Using FPDI for Signing request for Attribution server", buf, 2u);
    }

    +[APAttributionServer signPayloadWithFpdi:requestTimestamp:interval:jsonBody:startDate:payloadDeliveryStartDate:completionHandler:](APAttributionServer, "signPayloadWithFpdi:requestTimestamp:interval:jsonBody:startDate:payloadDeliveryStartDate:completionHandler:", a1[5], a1[6], a1[9], a1[7], v10, a1[4], a1[8]);
  }

}

void sub_100096D74(id a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  void *v6;
  APSigningQueue *v7;
  void *v8;
  uint8_t v9[16];

  v1 = objc_msgSend(objc_alloc((Class)APSigningAuthorityPoolManager), "initWithName:poolSize:numberToStash:", CFSTR("attribution_fpdi"), 1, 1);
  v2 = (void *)qword_100268818;
  qword_100268818 = (uint64_t)v1;

  if (!qword_100268818)
  {
    v3 = APLogForCategory(4);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Signing: Using Mescal for Signing request for Attribution server since FPDI did not work", v9, 2u);
    }

  }
  v5 = objc_msgSend(objc_alloc((Class)APUnfairLock), "initWithOptions:", 1);
  v6 = (void *)qword_100268828;
  qword_100268828 = (uint64_t)v5;

  v7 = objc_alloc_init(APSigningQueue);
  v8 = (void *)qword_100268820;
  qword_100268820 = (uint64_t)v7;

}

void sub_100096E54(id a1)
{
  void *v1;
  const __CFString *v2;
  _UNKNOWN **v3;

  v2 = CFSTR("fallbackReason");
  v3 = &off_100228D48;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1));
  AnalyticsSendEvent(CFSTR("com.apple.adplatforms.mescal.fallback"), v1);

}

void sub_100096EE8(id a1, int64_t a2, BOOL a3)
{
  _BOOL4 v3;
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  _UNKNOWN ***v8;
  const __CFString **v9;
  void *v10;
  const __CFString *v11;
  _UNKNOWN **v12;
  const __CFString *v13;
  _UNKNOWN **v14;
  uint8_t buf[4];
  int64_t v16;
  const __CFString *v17;
  _UNKNOWN **v18;

  v3 = a3;
  byte_100268838 = a2 != 18001;
  v5 = APLogForCategory(4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Signing: signingAuthorityPoolManager setup timed out.", buf, 2u);
    }

    v17 = CFSTR("fallbackReason");
    v18 = &off_100228D78;
    v8 = &v18;
    v9 = &v17;
  }
  else
  {
    if (v7)
    {
      *(_DWORD *)buf = 134217984;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Signing: signingAuthorityPoolManager setup state: %ld. ", buf, 0xCu);
    }

    if (byte_100268838)
    {
      v13 = CFSTR("fallbackReason");
      v14 = &off_100228D48;
      v8 = &v14;
      v9 = &v13;
    }
    else
    {
      v11 = CFSTR("fallbackReason");
      v12 = &off_100228D90;
      v8 = &v12;
      v9 = &v11;
    }
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v9, 1, v11, v12, v13, v14));
  AnalyticsSendEvent(CFSTR("com.apple.adplatforms.mescal.fallback"), v10);

  +[APAttributionServer _processSigningQueue:useFpdi:signingAuthorityPoolManager:](APAttributionServer, "_processSigningQueue:useFpdi:signingAuthorityPoolManager:", qword_100268820, a2 == 18001, qword_100268818);
}

void sub_100097250(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100097274(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  __CFString *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  int64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_signpost_id_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id WeakRetained;
  _QWORD v26[3];
  _QWORD v27[3];
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  __CFString *v31;
  NSErrorUserInfoKey v32;
  const __CFString *v33;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  if (a3)
  {
    v32 = NSLocalizedDescriptionKey;
    v33 = CFSTR("Unable to sign Attribution Request to server");
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.ap.adservices.attributionError"), 1002, v7));

    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    v9 = APPerfLogForCategory(4);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = v10;
    v12 = *(_QWORD *)(a1 + 80);
    if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      *(_DWORD *)buf = 134349056;
      v29 = (const char *)v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v12, "Payload Signing", "id=%{public, name=id}lld", buf, 0xCu);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceDate:", _daemonStartTime);
    v13 = +[APAttributionAnalytics findBucketForDaemonRunningTime:](APAttributionAnalytics, "findBucketForDaemonRunningTime:");
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storefront"));

    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storefront"));
      v8 = (__CFString *)objc_claimAutoreleasedReturnValue(+[APAttributionAnalytics storefrontCountryOnly:](APAttributionAnalytics, "storefrontCountryOnly:", v15));

    }
    else
    {
      v16 = APLogForCategory(4);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136642819;
        v29 = "+[APAttributionServer signPayloadWithMescal:requestTimestamp:interval:jsonBody:startDate:deliveryStartDate"
              ":isFallback:completionHandler:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{sensitive}s, Storefront is nil", buf, 0xCu);
      }

      CreateDiagnosticReport(CFSTR("Sign Payload With Mescal: Error Storefront is nil"), 0, CFSTR("Attributtion"));
      v8 = CFSTR("NONE");
    }
    v18 = APPerfLogForCategory(4);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    v20 = v19;
    v21 = *(_QWORD *)(a1 + 80);
    if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
    {
      *(_DWORD *)buf = 134349314;
      v29 = (const char *)v21;
      v30 = 2114;
      v31 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v21, "Payload Signing", "id=%{public, name=id}lld storefront=%{public, name=storefront}@", buf, 0x16u);
    }

    v22 = 2 * *(unsigned __int8 *)(a1 + 88);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v13, CFSTR("daemonRunningTime")));
    v27[0] = v23;
    v27[1] = v8;
    v26[1] = CFSTR("storeFront");
    v26[2] = CFSTR("signingType");
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v22));
    v27[2] = v24;
    v11 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 3));

    +[APAttributionAnalytics sendTimingAnalytics:startDate:endDate:additionalFields:](APAttributionAnalytics, "sendTimingAnalytics:startDate:endDate:additionalFields:", CFSTR("payloadSigningTime"), *(_QWORD *)(a1 + 48), v6, v11);
    objc_msgSend(*(id *)(a1 + 40), "setMescalSignature:", v5);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    objc_msgSend(WeakRetained, "_serverPost:requestTimestamp:payloadDeliveryStartDate:interval:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64));

  }
}

id sub_1000976FC(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = APLogForCategory(4);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Signing: processing the queue with FPDI.", buf, 2u);
    }

    return objc_msgSend(*(id *)(a1 + 32), "processWithFPDISigningAuthorityPoolManager:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (v5)
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Signing: processing the queue with Mescal.", v7, 2u);
    }

    return objc_msgSend(*(id *)(a1 + 32), "processWithMescal");
  }
}

void sub_1000999B4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)APUnfairLock), "initWithOptions:", 1);
  v2 = (void *)qword_100268848;
  qword_100268848 = (uint64_t)v1;

}

void sub_10009C0F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  os_signpost_id_t v8;
  id v9;
  id v10;
  int v11;
  id v12;
  __int16 v13;
  id v14;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceDate:", _daemonStartTime);
  objc_msgSend(v3, "setDaemonRunningTime:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storefront"));
  objc_msgSend(v3, "setStoreFront:", v4);

  v5 = APPerfLogForCategory(4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = (char *)objc_msgSend(*(id *)(a1 + 48), "intervalId");
  if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = (os_signpost_id_t)v7;
    if (os_signpost_enabled(v6))
    {
      v9 = objc_msgSend(*(id *)(a1 + 48), "intervalId");
      v10 = objc_msgSend(*(id *)(a1 + 48), "attemptId");
      v11 = 134349312;
      v12 = v9;
      v13 = 2050;
      v14 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v8, "Token Request", "id=%{public, name=id}lld attempt=%{public, name=attempt}lld", (uint8_t *)&v11, 0x16u);
    }
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_10009CFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10009CFE8(_QWORD *a1, void *a2, uint64_t a3, void *a4)
{
  id *v7;
  id v8;
  id v9;
  id WeakRetained;

  v7 = (id *)(a1 + 7);
  v8 = a4;
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend(WeakRetained, "_continueAttribution:token:cached:requestTimestamp:error:constructionWithCompletionHandler:", a1[4], v9, a3, a1[5], v8, a1[6]);

}

void sub_10009DCF4(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  os_signpost_id_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint8_t v14[24];

  v5 = a3;
  v6 = v5;
  if ((a2 & 1) == 0)
  {
    if (!v5)
    {
LABEL_11:
      objc_msgSend(*(id *)(a1 + 32), "sendTokenAnalytics", *(_OWORD *)v14);
      goto LABEL_12;
    }
    if (objc_msgSend(v5, "code") == (id)1002)
    {
      objc_msgSend(*(id *)(a1 + 32), "setStatus:", CFSTR("ErrorServerPacketSigning"));
      v7 = APPerfLogForCategory(4);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      v9 = (char *)objc_msgSend(*(id *)(a1 + 40), "intervalId");
      if ((unint64_t)(v9 - 1) > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_10;
      v10 = (os_signpost_id_t)v9;
      if (!os_signpost_enabled(v8))
        goto LABEL_10;
    }
    else
    {
      v11 = APPerfLogForCategory(4);
      v8 = objc_claimAutoreleasedReturnValue(v11);
      v12 = (char *)objc_msgSend(*(id *)(a1 + 40), "intervalId");
      if ((unint64_t)(v12 - 1) > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_10;
      v10 = (os_signpost_id_t)v12;
      if (!os_signpost_enabled(v8))
        goto LABEL_10;
    }
    v13 = objc_msgSend(*(id *)(a1 + 40), "intervalId");
    *(_DWORD *)v14 = 134349056;
    *(_QWORD *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, v10, "HTTP Request Error", "HTTP Request Error id=%{public, name=id}lld", v14, 0xCu);
LABEL_10:

    goto LABEL_11;
  }
LABEL_12:

}

void sub_10009E140(id a1)
{
  void *v1;
  APAttributionTokenTracker *v2;
  void *v3;

  v1 = objc_autoreleasePoolPush();
  v2 = objc_alloc_init(APAttributionTokenTracker);
  v3 = (void *)qword_100268858;
  qword_100268858 = (uint64_t)v2;

  objc_autoreleasePoolPop(v1);
}

id generateRandomBytes(size_t a1)
{
  void *v2;
  void *v3;

  v2 = malloc_type_malloc(a1, 0x4E958EE1uLL);
  if (SecRandomCopyBytes(kSecRandomDefault, a1, v2))
  {
    free(v2);
    v3 = 0;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", v2, a1, 1));
  }
  return v3;
}

id generatePayload(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  size_t v7;
  __int16 v8;
  uint32_t v9;
  unsigned __int8 v10;
  unsigned __int8 *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint32_t v18;
  uint8_t buf[4];
  _BYTE v20[18];

  if ((unint64_t)(a1 - 31) > 0xFFFFFFFFFFFFFFE2)
  {
    v7 = (a1 - 1);
    v8 = 8 * (a1 - 1);
    v9 = arc4random_uniform(8 * v7);
    v10 = v9;
    v18 = v9;
    v11 = (unsigned __int8 *)malloc_type_malloc(v7, 0xF3B8873EuLL);
    if (SecRandomCopyBytes(kSecRandomDefault, v7, v11))
    {
      v12 = APLogForCategory(4);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109379;
        *(_DWORD *)v20 = 0;
        *(_WORD *)&v20[4] = 2085;
        *(_QWORD *)&v20[6] = "NSData *generatePayload(NSUInteger, BOOL)";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Error generating token %d %{sensitive}s", buf, 0x12u);
      }

      v14 = 0;
      goto LABEL_16;
    }
    v15 = v8 & 0x7F8;
    if (a2)
    {
      if (v15 >= v10)
      {
        v16 = v10 >> 3;
        v17 = v11[v16] | (1 << (v10 & 7));
LABEL_14:
        v11[v16] = v17;
      }
    }
    else if (v15 >= v10)
    {
      v16 = v10 >> 3;
      v17 = v11[v16] & ~(1 << (v10 & 7));
      goto LABEL_14;
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", &v18, 1));
    objc_msgSend(v14, "appendBytes:length:", v11, v7);
LABEL_16:
    free(v11);
    return v14;
  }
  v3 = APLogForCategory(4);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218243;
    *(_QWORD *)v20 = a1;
    *(_WORD *)&v20[8] = 2085;
    *(_QWORD *)&v20[10] = "NSData *generatePayload(NSUInteger, BOOL)";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Num of bytes out of range %lu %{sensitive}s", buf, 0x16u);
  }

  return 0;
}

id createTokenFromKey(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  v4 = a1;
  v5 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithCapacity:", (char *)objc_msgSend(v4, "length") + (_QWORD)objc_msgSend(v3, "length"));
  objc_msgSend(v5, "appendData:", v4);

  objc_msgSend(v5, "appendData:", v3);
  return v5;
}

void sub_10009F83C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)APUnfairLock), "initWithOptions:", 0);
  v2 = (void *)qword_100268868;
  qword_100268868 = (uint64_t)v1;

}

void sub_10009FC48(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  int v14;
  os_signpost_id_t v15;

  v2 = APPerfLogForCategory(4);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    v14 = 134349056;
    v15 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v5, "Cache GCD overhead", "id=%{public, name=id}lld", (uint8_t *)&v14, 0xCu);
  }

  v6 = APPerfLogForCategory(4);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    v14 = 134349056;
    v15 = v9;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "Token Cache Refill", "id=%{public, name=id}lld", (uint8_t *)&v14, 0xCu);
  }

  +[APAttributionToken _refillCacheWithTokensDetail:](APAttributionToken, "_refillCacheWithTokensDetail:", *(unsigned __int8 *)(a1 + 48));
  v10 = APPerfLogForCategory(4);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 40);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    v14 = 134349056;
    v15 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "Token Cache Refill", "id=%{public, name=id}lld", (uint8_t *)&v14, 0xCu);
  }

}

void sub_1000A0214(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  APAttributionToken *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_signpost_id_t v16;
  dispatch_queue_global_t global_queue;
  NSObject *v18;
  _QWORD block[4];
  id v20;
  uint64_t v21;
  char v22;
  uint8_t buf[4];
  os_signpost_id_t v24;

  v5 = a2;
  if (!v5 || a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v6 = -[APAttributionToken initWithKey:payload:token:signature:]([APAttributionToken alloc], "initWithKey:payload:token:signature:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[APAttributionTokenTracker defaultTracker](APAttributionTokenTracker, "defaultTracker"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[APAttributionToken signedAttributionToken](v6, "signedAttributionToken"));
    v9 = objc_msgSend(v7, "isTokenUsed:", v8);

    if (v9)
    {
      +[APAttributionAnalytics sendTokenDuplicateAnalytics:](APAttributionAnalytics, "sendTokenDuplicateAnalytics:", CFSTR("TokenDupeOnDemand"));
      v10 = APLogForCategory(4);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(-[APAttributionToken signedAttributionToken](v6, "signedAttributionToken"));
        *(_DWORD *)buf = 138543362;
        v24 = (os_signpost_id_t)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "generated token has already been used %{public}@", buf, 0xCu);

      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    v13 = APPerfLogForCategory(4);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = v14;
    v16 = *(_QWORD *)(a1 + 72);
    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      *(_DWORD *)buf = 134349056;
      v24 = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_BEGIN, v16, "Cache Queue overhead", "id=%{public, name=id}lld", buf, 0xCu);
    }

    global_queue = dispatch_get_global_queue(9, 0);
    v18 = objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A0488;
    block[3] = &unk_1002134B0;
    v21 = *(_QWORD *)(a1 + 72);
    v22 = *(_BYTE *)(a1 + 80);
    v20 = *(id *)(a1 + 56);
    dispatch_async(v18, block);

  }
}

void sub_1000A0488(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  int v14;
  os_signpost_id_t v15;

  v2 = APPerfLogForCategory(4);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    v14 = 134349056;
    v15 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v5, "Cache Queue overhead", "id=%{public, name=id}lld", (uint8_t *)&v14, 0xCu);
  }

  v6 = APPerfLogForCategory(4);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    v14 = 134349056;
    v15 = v9;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "Token Cache Refill", "id=%{public, name=id}lld", (uint8_t *)&v14, 0xCu);
  }

  +[APAttributionToken _refillCacheWithTokensDetail:](APAttributionToken, "_refillCacheWithTokensDetail:", *(unsigned __int8 *)(a1 + 48));
  v10 = APPerfLogForCategory(4);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 40);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    v14 = 134349056;
    v15 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "Token Cache Refill", "id=%{public, name=id}lld", (uint8_t *)&v14, 0xCu);
  }

}

void sub_1000A0764(_QWORD *a1, void *a2, uint64_t a3)
{
  APAttributionToken *v5;
  id v6;

  v6 = a2;
  if (!v6 || a3)
  {
    (*(void (**)(void))(a1[7] + 16))();
  }
  else
  {
    v5 = -[APAttributionToken initWithKey:payload:token:signature:]([APAttributionToken alloc], "initWithKey:payload:token:signature:", a1[4], a1[5], a1[6], v6);
    (*(void (**)(void))(a1[7] + 16))();

  }
}

void sub_1000A1E58(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_100268880;
  qword_100268880 = v1;

  v3 = objc_msgSend(objc_alloc((Class)APUnfairLock), "initWithOptions:", 1);
  v4 = (void *)qword_100268878;
  qword_100268878 = (uint64_t)v3;

}

BOOL sub_1000A315C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000A3170()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000A31B4()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000A31DC(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *sub_1000A321C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

void sub_1000A324C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

id sub_1000A32A0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for A9nErrorBucketObjC();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for A9nErrorBucketObjC()
{
  return objc_opt_self(APA9nErrorBucketObjC);
}

void type metadata accessor for APHTTPMethod()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_100263C18)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_100213928);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_100263C18);
  }
}

_QWORD *sub_1000A3344@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1000A3354(Swift::Int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t result;
  uint64_t v20[3];
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  void *v25;

  if (a2 == 1)
  {
    v3 = type metadata accessor for AttributionErrorBucketConfigSystemJSONSource();
    v4 = swift_allocObject(v3, 17, 7);
    *(_BYTE *)(v4 + 16) = 0;
    v24 = v3;
    v25 = (void *)sub_1000A3560(&qword_100263C20, (uint64_t (*)(uint64_t))type metadata accessor for AttributionErrorBucketConfigSystemJSONSource, (uint64_t)&unk_1001B75FC);
    v23[0] = v4;
    v5 = type metadata accessor for DefaultAttributionClientErrorBucketConfigurationStore();
    v6 = type metadata accessor for DefaultAttributionClientErrorBucketConfigurationStore;
    v7 = swift_allocObject(v5, 16, 7);
    v21 = v5;
    v8 = (unint64_t *)&unk_100263C28;
    v9 = &unk_1001B7818;
LABEL_5:
    v22 = sub_1000A3560(v8, (uint64_t (*)(uint64_t))v6, (uint64_t)v9);
    v20[0] = v7;
    v13 = type metadata accessor for JSONIntBucketConfigurationStore(0);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v14 = JSONIntBucketConfigurationStore.init(jsonSource:fallback:)(v23, v20);
    type metadata accessor for JSONIntBucketConfigurationStore(0);
    v24 = v13;
    v25 = &protocol witness table for JSONIntBucketConfigurationStore;
    v23[0] = v14;
    v15 = type metadata accessor for ConfigurableIntBucketStrategy(0);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    swift_retain(v14, v16);
    v17 = ConfigurableIntBucketStrategy.init(configurationStore:)(v23);
    v18 = ConfigurableIntBucketStrategy.bucketFor(value:)(a1);
    swift_release(v17);
    swift_release(v14);
    return v18;
  }
  if (!a2)
  {
    v10 = type metadata accessor for AttributionErrorBucketConfigSystemJSONSource();
    v11 = swift_allocObject(v10, 17, 7);
    *(_BYTE *)(v11 + 16) = 1;
    v24 = v10;
    v25 = (void *)sub_1000A3560(&qword_100263C20, (uint64_t (*)(uint64_t))type metadata accessor for AttributionErrorBucketConfigSystemJSONSource, (uint64_t)&unk_1001B75FC);
    v23[0] = v11;
    v12 = type metadata accessor for DefaultAttributionServerErrorBucketConfigurationStore();
    v6 = type metadata accessor for DefaultAttributionServerErrorBucketConfigurationStore;
    v7 = swift_allocObject(v12, 16, 7);
    v21 = v12;
    v8 = (unint64_t *)&unk_100263C30;
    v9 = &unk_1001B7698;
    goto LABEL_5;
  }
  v23[0] = a2;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for A9nErrorType, v23, &type metadata for A9nErrorType, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1000A3560(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for A9nErrorType()
{
  return &type metadata for A9nErrorType;
}

unint64_t sub_1000A35B4()
{
  unint64_t result;

  result = qword_100263C38;
  if (!qword_100263C38)
  {
    result = swift_getWitnessTable(&unk_1001B7508, &type metadata for A9nErrorType);
    atomic_store(result, (unint64_t *)&qword_100263C38);
  }
  return result;
}

BOOL sub_1000A35FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000A3614()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000A3658()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000A3680(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000A36C0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 17, 7);
}

uint64_t type metadata accessor for AttributionErrorBucketConfigSystemJSONSource()
{
  return objc_opt_self(_TtC11Attribution44AttributionErrorBucketConfigSystemJSONSource);
}

_BYTE *initializeBufferWithCopyOfBuffer for AttributionErrorBucketConfigSystemJSONSource.Source(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AttributionErrorBucketConfigSystemJSONSource.Source(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributionErrorBucketConfigSystemJSONSource.Source(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000A37DC + 4 * byte_1001B7545[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A3810 + 4 * byte_1001B7540[v4]))();
}

uint64_t sub_1000A3810(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A3818(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A3820);
  return result;
}

uint64_t sub_1000A382C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A3834);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000A3838(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A3840(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A384C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000A3854(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AttributionErrorBucketConfigSystemJSONSource.Source()
{
  return &type metadata for AttributionErrorBucketConfigSystemJSONSource.Source;
}

unint64_t sub_1000A3874()
{
  unint64_t result;

  result = qword_100263CE0;
  if (!qword_100263CE0)
  {
    result = swift_getWitnessTable(&unk_1001B75D4, &type metadata for AttributionErrorBucketConfigSystemJSONSource.Source);
    atomic_store(result, (unint64_t *)&qword_100263CE0);
  }
  return result;
}

unint64_t sub_1000A38B8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v1 = (void *)objc_opt_self(APConfigurationMediator);
  sub_1000A3DFC();
  v2 = objc_msgSend(v1, "configurationForClass:", swift_getObjCClassFromMetadata());
  v3 = objc_opt_self(APAttributionErrorCodeBucketsConfig);
  v4 = (void *)swift_dynamicCastObjCClass(v2, v3);
  if (!v4 || (v5 = v4, (v6 = objc_msgSend(v4, "clientCodeBuckets")) == 0))
  {
    swift_unknownObjectRelease(v2);
    return 0;
  }
  v7 = v6;
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v9 = objc_msgSend(v5, "serverCodeBuckets");
  if (!v9)
  {
    swift_unknownObjectRelease(v2);
    swift_bridgeObjectRelease(v8);
    return 0;
  }
  v10 = v9;
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  if (*(_BYTE *)(v0 + 16))
    v12 = v8;
  else
    v12 = v11;
  if (*(_BYTE *)(v0 + 16))
    v13 = v11;
  else
    v13 = v8;
  swift_bridgeObjectRelease(v12);
  v14 = sub_1000A3A1C(v13);
  swift_bridgeObjectRelease(v13);
  swift_unknownObjectRelease(v2);
  return v14;
}

unint64_t sub_1000A3A1C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  _OWORD v30[2];
  __int128 v31;
  _OWORD v32[2];
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  uint64_t v39;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100008A18(&qword_100263CF0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v26 = a1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = (v6 - 1) & v6;
      v12 = __clz(__rbit64(v6)) | (v8 << 6);
      v13 = v8;
    }
    else
    {
      v14 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_37;
      if (v14 >= v25)
      {
LABEL_33:
        sub_1000A3EF0(a1);
        return (unint64_t)v3;
      }
      v15 = *(_QWORD *)(v26 + 8 * v14);
      v13 = v8 + 1;
      if (!v15)
      {
        v13 = v8 + 2;
        if (v8 + 2 >= v25)
          goto LABEL_33;
        v15 = *(_QWORD *)(v26 + 8 * v13);
        if (!v15)
        {
          v13 = v8 + 3;
          if (v8 + 3 >= v25)
            goto LABEL_33;
          v15 = *(_QWORD *)(v26 + 8 * v13);
          if (!v15)
          {
            v13 = v8 + 4;
            if (v8 + 4 >= v25)
              goto LABEL_33;
            v15 = *(_QWORD *)(v26 + 8 * v13);
            if (!v15)
            {
              v16 = v8 + 5;
              if (v8 + 5 >= v25)
                goto LABEL_33;
              v15 = *(_QWORD *)(v26 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  v13 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_38;
                  if (v13 >= v25)
                    goto LABEL_33;
                  v15 = *(_QWORD *)(v26 + 8 * v13);
                  ++v16;
                  if (v15)
                    goto LABEL_26;
                }
              }
              v13 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      v11 = (v15 - 1) & v15;
      v12 = __clz(__rbit64(v15)) + (v13 << 6);
    }
    sub_1000A3E38(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v37);
    sub_1000A3E74(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    sub_1000A3E38((uint64_t)v34, (uint64_t)v29);
    if (!swift_dynamicCast(&v27, v29, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v27 = 0;
      v28 = 0;
      sub_1000A3EB0((uint64_t)v34);
      swift_bridgeObjectRelease(v28);
      sub_1000A3EF0(a1);
      swift_release(v3);
      return 0;
    }
    v17 = v27;
    v18 = v28;
    sub_1000A3E74((uint64_t)v35 + 8, (uint64_t)v29);
    sub_1000A3EB0((uint64_t)v34);
    sub_1000A3EF8(v29, v30);
    *(_QWORD *)&v31 = v17;
    *((_QWORD *)&v31 + 1) = v18;
    sub_1000A3EF8(v30, v32);
    v19 = v31;
    sub_1000A3EF8(v32, v33);
    sub_1000A3EF8(v33, &v31);
    result = sub_10002DDCC(v19, *((uint64_t *)&v19 + 1));
    v20 = result;
    if ((v21 & 1) != 0)
    {
      v9 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
      *(_OWORD *)v9 = v19;
      v10 = (_QWORD *)(v3[7] + 32 * v20);
      _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v10);
      result = (unint64_t)sub_1000A3EF8(&v31, v10);
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v3[6] + 16 * result) = v19;
    result = (unint64_t)sub_1000A3EF8(&v31, (_OWORD *)(v3[7] + 32 * result));
    v22 = v3[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_36;
    v3[2] = v24;
LABEL_8:
    v8 = v13;
    v6 = v11;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_1000A3DDC()
{
  return sub_1000A38B8();
}

unint64_t sub_1000A3DFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263CE8;
  if (!qword_100263CE8)
  {
    v1 = objc_opt_self(APAttributionErrorCodeBucketsConfig);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100263CE8);
  }
  return result;
}

uint64_t sub_1000A3E38(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000A3E74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000A3EB0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008A18(&qword_100263CF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A3EF0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

_OWORD *sub_1000A3EF8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000A3F08()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for DefaultAttributionServerErrorBucketConfigurationStore()
{
  return objc_opt_self(_TtC11Attribution53DefaultAttributionServerErrorBucketConfigurationStore);
}

uint64_t sub_1000A3F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  void (*v8)(void);

  v0 = sub_100008A18(&qword_100263D98);
  v1 = type metadata accessor for IntBucketContents(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 3 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1001B7630;
  v7 = (_OWORD *)(v6 + v5);
  *v7 = xmmword_1001B7640;
  v8 = *(void (**)(void))(v2 + 104);
  ((void (*)(_OWORD *, _QWORD, uint64_t))v8)(v7, enum case for IntBucketContents.range(_:), v1);
  *(_QWORD *)((char *)v7 + v3) = sub_1000A4070((uint64_t)&off_1002135B0);
  ((void (*)(char *, _QWORD, uint64_t))v8)((char *)v7 + v3, enum case for IntBucketContents.individualValues(_:), v1);
  *(_OWORD *)((char *)v7 + 2 * v3) = xmmword_1001B7650;
  v8();
  return IntBucketConfiguration.init(unknownBucketName:discreteBuckets:classifiedBuckets:)(100000, v6, _swiftEmptyArrayStorage);
}

uint64_t sub_1000A405C()
{
  return sub_1000A3F38();
}

uint64_t sub_1000A4070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100008A18(&qword_100266000);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    v7 = ~(-1 << *(_BYTE *)(v3 + 32));
    while (1)
    {
      v8 = *(_QWORD *)(v6 + 8 * v4);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), v8);
      v10 = result & v7;
      v11 = (result & (unint64_t)v7) >> 6;
      v12 = *(_QWORD *)(v5 + 8 * v11);
      v13 = 1 << (result & v7);
      v14 = *(_QWORD *)(v3 + 48);
      if ((v13 & v12) != 0)
      {
        while (*(_QWORD *)(v14 + 8 * v10) != v8)
        {
          v10 = (v10 + 1) & v7;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
        *(_QWORD *)(v14 + 8 * v10) = v8;
        v15 = *(_QWORD *)(v3 + 16);
        v16 = __OFADD__(v15, 1);
        v17 = v15 + 1;
        if (v16)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v17;
      }
      if (++v4 == v1)
        return v3;
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

unsigned __int8 *sub_1000A417C(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_10002E66C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_1000A4260(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_1000A4260(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1000A44DC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000A44F8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000A44F8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008A18(&qword_100263DC8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000A4654(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  char v8;
  char v9;
  unsigned __int8 v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  char v24;
  _QWORD v25[3];

  if (a2)
  {
    v2 = a2;
  }
  else
  {
    result = 48;
    v2 = 0xE100000000000000;
  }
  v3 = HIBYTE(v2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(v2) & 0xF;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(v2);
    return 0;
  }
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v2);
      v7 = (unint64_t)sub_1000A4260(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_40;
    }
    v25[0] = result;
    v25[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_66;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_36;
      v7 = (BYTE1(result) - 48);
      if (v3 != 2)
      {
        if ((BYTE2(result) - 48) > 9u)
          goto LABEL_36;
        v7 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        v13 = v3 - 3;
        if (v13)
        {
          v14 = (unsigned __int8 *)v25 + 3;
          while (1)
          {
            v15 = *v14 - 48;
            if (v15 > 9)
              goto LABEL_36;
            if (!is_mul_ok(v7, 0xAuLL))
              goto LABEL_36;
            v11 = __CFADD__(10 * v7, v15);
            v7 = 10 * v7 + v15;
            if (v11)
              goto LABEL_36;
            v9 = 0;
            ++v14;
            if (!--v13)
              goto LABEL_40;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1)
          {
            v10 = BYTE1(result) - 48;
            if ((BYTE1(result) - 48) <= 9u)
            {
              v7 = 0;
              v11 = v10 == 0;
              v12 = -(uint64_t)v10;
              if (!v11)
                goto LABEL_37;
              if (v3 == 2)
              {
                v9 = 0;
                v7 = v12;
                goto LABEL_40;
              }
              v19 = BYTE2(result) - 48;
              if ((BYTE2(result) - 48) <= 9u && is_mul_ok(v12, 0xAuLL))
              {
                v20 = 10 * v12;
                v7 = v20 - v19;
                if (v20 >= v19)
                {
                  v21 = v3 - 3;
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)v25 + 3;
                    while (1)
                    {
                      v23 = *v22 - 48;
                      if (v23 > 9)
                        goto LABEL_36;
                      if (!is_mul_ok(v7, 0xAuLL))
                        goto LABEL_36;
                      v11 = 10 * v7 >= v23;
                      v7 = 10 * v7 - v23;
                      if (!v11)
                        goto LABEL_36;
                      v9 = 0;
                      ++v22;
                      if (!--v21)
                        goto LABEL_40;
                    }
                  }
                  goto LABEL_39;
                }
              }
            }
          }
LABEL_36:
          v7 = 0;
LABEL_37:
          v9 = 1;
          goto LABEL_40;
        }
        __break(1u);
LABEL_66:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_36;
      v7 = (result - 48);
      if (v3 != 1)
      {
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_36;
        v7 = 10 * (result - 48) + (BYTE1(result) - 48);
        v16 = v3 - 2;
        if (v16)
        {
          v17 = (unsigned __int8 *)v25 + 2;
          while (1)
          {
            v18 = *v17 - 48;
            if (v18 > 9)
              goto LABEL_36;
            if (!is_mul_ok(v7, 0xAuLL))
              goto LABEL_36;
            v11 = __CFADD__(10 * v7, v18);
            v7 = 10 * v7 + v18;
            if (v11)
              goto LABEL_36;
            v9 = 0;
            ++v17;
            if (!--v16)
              goto LABEL_40;
          }
        }
      }
    }
LABEL_39:
    v9 = 0;
    goto LABEL_40;
  }
  v7 = (unint64_t)sub_1000A417C(result, v2, 10);
  v9 = v24;
LABEL_40:
  swift_bridgeObjectRelease(v2);
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

uint64_t sub_1000A4944(void *a1, uint64_t a2, void *a3)
{
  id v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  NSString v28;
  NSString v29;
  uint64_t v30;
  void *v31;
  NSString v32;
  NSString v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v42;
  void *v43;
  NSString v44;
  NSString v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void *v53;
  NSString v54;
  NSString v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  NSString v68;
  NSString v69;
  uint64_t v70;
  _QWORD v71[3];
  char v72[8];

  if (!a1)
  {
    v30 = static os_log_type_t.error.getter(0);
    sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
    v31 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Upload: Broken payload.", 23, 2, _swiftEmptyArrayStorage);

    v32 = String._bridgeToObjectiveC()();
    v33 = String._bridgeToObjectiveC()();
    CreateDiagnosticReport(v32, 0, v33);

    objc_msgSend(a3, "uploadFailedWithStatusCode:retryCount:", -1, a2);
    return 0;
  }
  v5 = a1;
  v6 = (char *)objc_msgSend(v5, "responseStatusCode");
  v7 = objc_msgSend(v5, "responseError");
  if (v7)
  {
    v8 = v7;
    v9 = static os_log_type_t.defaultOnInternalInstall.getter();
    sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
    v10 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    v11 = 2;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Upload: Network error.", 22, 2, _swiftEmptyArrayStorage);

    v13 = static os_log_type_t.error.getter(v12);
    v14 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    v15 = sub_100008A18((uint64_t *)&unk_1002653F0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1001B76C0;
    swift_getErrorValue(v8, v72, v71);
    v17 = Error.localizedDescription.getter(v71[1], v71[2]);
    v19 = v18;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_1000A5AF8();
    *(_QWORD *)(v16 + 32) = v17;
    *(_QWORD *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Error received from server %{public}@", 37, 2, v16);

    swift_bridgeObjectRelease(v16);
    _StringGuts.grow(_:)(61);
    v20._countAndFlagsBits = 0xD00000000000003BLL;
    v20._object = (void *)0x80000001001ED8A0;
    String.append(_:)(v20);
    v21 = (void *)_convertErrorToNSError(_:)(v8);
    v22 = objc_msgSend(v21, "debugDescription", 0);

    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);
    v26 = v25;

    v27._countAndFlagsBits = v24;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(v26);
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE000000000000000);
    v29 = String._bridgeToObjectiveC()();
    CreateDiagnosticReport(v28, 0, v29);

    return v11;
  }
  if (v6 == (char *)204)
  {
    v34 = static os_log_type_t.defaultOnInternalInstall.getter();
    sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
    v35 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Upload: Success.", 16, 2, _swiftEmptyArrayStorage);

    v36 = static os_log_type_t.info.getter();
    v37 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    v38 = sub_100008A18((uint64_t *)&unk_1002653F0);
    v39 = swift_allocObject(v38, 72, 7);
    *(_OWORD *)(v39 + 16) = xmmword_1001B76C0;
    v40 = objc_msgSend(v5, "responseStatusCode");
    *(_QWORD *)(v39 + 56) = &type metadata for Int;
    *(_QWORD *)(v39 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v39 + 32) = v40;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "server responded with %ld success", v70);

    swift_bridgeObjectRelease(v39);
    objc_msgSend(a3, "uploadSucceededWithRetryCount:", a2);

    return 1;
  }
  if ((unint64_t)(v6 - 400) <= 0x63)
  {
    v42 = static os_log_type_t.defaultOnInternalInstall.getter();
    sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
    v43 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v43, "Upload: 4xx", 11, 2, _swiftEmptyArrayStorage);

    v44 = String._bridgeToObjectiveC()();
    v45 = String._bridgeToObjectiveC()();
    CreateDiagnosticReport(v44, 0, v45);

    v47 = static os_log_type_t.error.getter(v46);
    v48 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    v49 = sub_100008A18((uint64_t *)&unk_1002653F0);
    v50 = swift_allocObject(v49, 72, 7);
    *(_OWORD *)(v50 + 16) = xmmword_1001B76C0;
    v51 = objc_msgSend(v5, "responseStatusCode");
    *(_QWORD *)(v50 + 56) = &type metadata for Int;
    *(_QWORD *)(v50 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v50 + 32) = v51;
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Unsupported format server response with status code: %lu", v70);

    swift_bridgeObjectRelease(v50);
    objc_msgSend(a3, "uploadFailedWithStatusCode:retryCount:", objc_msgSend(v5, "responseStatusCode"), a2);

    return 0;
  }
  v52 = static os_log_type_t.defaultOnInternalInstall.getter();
  sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
  v53 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
  v11 = 2;
  if ((unint64_t)(v6 - 500) > 0x63)
  {
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, v53, "Upload: Unknown", 15, 2, _swiftEmptyArrayStorage);

    v63 = static os_log_type_t.error.getter(v62);
    v64 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    v65 = sub_100008A18((uint64_t *)&unk_1002653F0);
    v66 = swift_allocObject(v65, 72, 7);
    *(_OWORD *)(v66 + 16) = xmmword_1001B76C0;
    v67 = objc_msgSend(v5, "responseStatusCode");
    *(_QWORD *)(v66 + 56) = &type metadata for Int;
    *(_QWORD *)(v66 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v66 + 32) = v67;
    os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, v64, "Unexpected server response with status code: %lu", v70);

    swift_bridgeObjectRelease(v66);
    v68 = String._bridgeToObjectiveC()();
    v69 = String._bridgeToObjectiveC()();
    CreateDiagnosticReport(v68, 0, v69);

  }
  else
  {
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, v53, "Upload: 5xx", 11, 2, _swiftEmptyArrayStorage);

    v54 = String._bridgeToObjectiveC()();
    v55 = String._bridgeToObjectiveC()();
    CreateDiagnosticReport(v54, 0, v55);

    v57 = static os_log_type_t.error.getter(v56);
    v58 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    v59 = sub_100008A18((uint64_t *)&unk_1002653F0);
    v60 = swift_allocObject(v59, 72, 7);
    *(_OWORD *)(v60 + 16) = xmmword_1001B76C0;
    v61 = objc_msgSend(v5, "responseStatusCode");
    *(_QWORD *)(v60 + 56) = &type metadata for Int;
    *(_QWORD *)(v60 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v60 + 32) = v61;
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Unsupported format server response with status code: %lu", v70);

    swift_bridgeObjectRelease(v60);
  }
  return v11;
}

uint64_t sub_1000A539C(unint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  double *v30;
  unint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  id v35;

  v2 = (void *)objc_opt_self(APConfigurationMediator);
  sub_10003E180(0, &qword_100263DC0, APAttributionConfig_ptr);
  v3 = objc_msgSend(v2, "configurationForClass:", swift_getObjCClassFromMetadata());
  v4 = objc_opt_self(APAttributionConfig);
  v5 = (void *)swift_dynamicCastObjCClass(v3, v4);
  if (!v5)
  {
    swift_unknownObjectRelease(v3);
    v14 = &off_1002135D8;
    goto LABEL_27;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, "uploadBackoffSchedule");
  if (v7)
  {
    v8 = v7;
    v9 = sub_10003E180(0, (unint64_t *)&qword_100265FB0, NSNumber_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0)
        v21 = v10;
      else
        v21 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v11 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v10);
      if (v11)
        goto LABEL_5;
    }
    else
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v11)
      {
LABEL_5:
        result = sub_1000A44DC(0, v11 & ~(v11 >> 63), 0);
        if (v11 < 0)
          goto LABEL_41;
        v35 = v3;
        v13 = 0;
        v14 = _swiftEmptyArrayStorage;
        do
        {
          if ((v10 & 0xC000000000000001) != 0)
            v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v10);
          else
            v15 = *(id *)(v10 + 8 * v13 + 32);
          v16 = v15;
          objc_msgSend(v15, "doubleValue");
          v18 = v17;

          v20 = _swiftEmptyArrayStorage[2];
          v19 = _swiftEmptyArrayStorage[3];
          if (v20 >= v19 >> 1)
            sub_1000A44DC(v19 > 1, v20 + 1, 1);
          ++v13;
          _swiftEmptyArrayStorage[2] = v20 + 1;
          _swiftEmptyArrayStorage[v20 + 4] = v18;
        }
        while (v11 != v13);
        swift_bridgeObjectRelease(v10);
        v3 = v35;
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease(v10);
    v14 = _swiftEmptyArrayStorage;
  }
  else
  {
    v14 = &off_1002135D8;
  }
LABEL_21:
  v22 = objc_msgSend(v6, "holdTransactionLimit");
  if (v22)
  {
    v23 = v22;
    objc_msgSend(v22, "doubleValue");
    if (v24 > 0.0)
    {
      objc_msgSend(v23, "doubleValue");
      swift_unknownObjectRelease(v3);

      v25 = v14[2];
      if (!v25)
        goto LABEL_31;
      goto LABEL_28;
    }

  }
  swift_unknownObjectRelease(v3);
LABEL_27:
  v25 = v14[2];
  if (!v25)
  {
LABEL_31:
    swift_bridgeObjectRelease(v14);
    return 0;
  }
LABEL_28:
  if (v25 <= a1)
    goto LABEL_31;
  v26 = a1 + 1;
  if (a1 + 1 >= 2)
  {
    v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
    v30 = (double *)(v14 + 5);
    v28 = 0.0;
    v31 = v26 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v28 = v28 + *(v30 - 1) + *v30;
      v30 += 2;
      v31 -= 2;
    }
    while (v31);
    if (v26 == v27)
      goto LABEL_37;
  }
  else
  {
    v27 = 0;
    v28 = 0.0;
  }
  v32 = a1 - v27 + 1;
  v33 = (double *)&v14[v27 + 4];
  do
  {
    v34 = *v33++;
    v28 = v28 + v34;
    --v32;
  }
  while (v32);
LABEL_37:
  result = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  if (v14[2] > (int64_t)a1)
  {
    v29 = result;
    swift_bridgeObjectRelease(v14);
    return v29;
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000A5740(void *a1, void *a2, unint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  void (*v45)(_QWORD);
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for WorkResult(0);
  v46 = *(_QWORD *)(v14 - 8);
  v47 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (_QWORD *)((char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v19 = (_QWORD *)((char *)v44 - v18);
  v20 = sub_1000A4944(a1, a3, a2);
  if (v20 == 2)
  {
    v44[1] = a5;
    v45 = a4;
    v21 = sub_1000A539C(a3);
    if (v22)
    {
      v25 = v21;
      v26 = v22;
      v27 = v23;
      v28 = v24;
      v29 = (char *)v17 + *(int *)(sub_100008A18(&qword_100263DA0) + 64);
      *v17 = v25;
      v17[1] = v26;
      v30 = swift_bridgeObjectRetain(v26);
      Date.init()(v30);
      static Date.+ infix(_:_:)(v13, v27);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      swift_bridgeObjectRelease(v26);
      v31 = type metadata accessor for WorkOrderFlags(0);
      if ((v28 & 1) != 0)
      {
        v48 = _swiftEmptyArrayStorage;
        v40 = sub_1000A5A20();
        v41 = sub_100008A18(&qword_100263DB0);
        v42 = sub_1000A5A68();
        dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v41, v42, v31, v40);
        v32 = 0;
      }
      else
      {
        v32 = 1;
      }
      a4 = v45;
      v35 = v46;
      v34 = v47;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v29, v32, 1, v31);
      v33 = (unsigned int *)&enum case for WorkResult.retry(_:);
    }
    else
    {
      v36 = objc_msgSend(a1, "responseError");
      v35 = v46;
      v34 = v47;
      if (v36)
      {
        v37 = v36;
        v38 = (void *)_convertErrorToNSError(_:)(v36);
        v39 = objc_msgSend(v38, "code");

      }
      else
      {
        v39 = objc_msgSend(a1, "responseStatusCode");
      }
      a4 = v45;
      objc_msgSend(a2, "uploadFailedWithStatusCode:retryCount:", v39, a3);
      *(_BYTE *)v19 = 0;
      v33 = (unsigned int *)&enum case for WorkResult.done(_:);
      v17 = v19;
    }
  }
  else
  {
    *(_BYTE *)v19 = v20 & 1;
    v33 = (unsigned int *)&enum case for WorkResult.done(_:);
    v17 = v19;
    v35 = v46;
    v34 = v47;
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v35 + 104))(v17, *v33, v34);
  a4(v17);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v35 + 8))(v17, v34);
}

unint64_t sub_1000A5A20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263DA8;
  if (!qword_100263DA8)
  {
    v1 = type metadata accessor for WorkOrderFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WorkOrderFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100263DA8);
  }
  return result;
}

unint64_t sub_1000A5A68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100263DB8;
  if (!qword_100263DB8)
  {
    v1 = sub_1000A5AB4(&qword_100263DB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100263DB8);
  }
  return result;
}

uint64_t sub_1000A5AB4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000A5AF8()
{
  unint64_t result;

  result = qword_100264770;
  if (!qword_100264770)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100264770);
  }
  return result;
}

uint64_t type metadata accessor for DefaultAttributionClientErrorBucketConfigurationStore()
{
  return objc_opt_self(_TtC11Attribution53DefaultAttributionClientErrorBucketConfigurationStore);
}

uint64_t sub_1000A5B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;

  v0 = sub_100008A18(&qword_100263E68);
  v1 = *(_QWORD *)(type metadata accessor for ClassifiedIntBucket(0) - 8);
  v30 = swift_allocObject(v0, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ 14 * *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
  *(_OWORD *)(v30 + 16) = xmmword_1001B76F0;
  v2 = sub_100008A18(&qword_100263D98);
  v3 = type metadata accessor for IntBucketContents(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = v6 | 7;
  v33 = v6 | 7;
  v34 = v7 + v5;
  v9 = swift_allocObject(v2, v7 + v5, v6 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v9 + v7) = sub_1000A4070((uint64_t)&off_100213670);
  v35 = enum case for IntBucketContents.individualValues(_:);
  v10 = *(void (**)(uint64_t))(v4 + 104);
  v10(v9 + v7);
  ClassifiedIntBucket.init(name:contents:)(100020, v9);
  v31 = v5;
  v36 = v7;
  v11 = swift_allocObject(v2, v7 + 3 * v5, v8);
  *(_OWORD *)(v11 + 16) = xmmword_1001B7630;
  v12 = v11 + v7;
  *(_OWORD *)(v11 + v7) = xmmword_1001B7700;
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v11 + v7, enum case for IntBucketContents.range(_:), v3);
  *(_OWORD *)(v12 + v5) = xmmword_1001B7710;
  ((void (*)(void))v10)();
  *(_OWORD *)(v12 + 2 * v5) = xmmword_1001B7720;
  ((void (*)(void))v10)();
  ClassifiedIntBucket.init(name:contents:)(100030, v11);
  v13 = swift_allocObject(v2, v7 + v5, v33);
  *(_OWORD *)(v13 + 16) = xmmword_1001B76C0;
  v14 = (uint64_t *)(v13 + v7);
  *v14 = sub_1000A4070((uint64_t)&off_1002136A0);
  ((void (*)(uint64_t *, _QWORD, uint64_t))v10)(v14, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100040, v13);
  v15 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v15 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v15 + v36) = sub_1000A4070((uint64_t)&off_1002136D0);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v15 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100050, v15);
  v16 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v16 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v16 + v36) = sub_1000A4070((uint64_t)&off_1002136F8);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v16 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100060, v16);
  v17 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v17 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v17 + v36) = sub_1000A4070((uint64_t)&off_100213720);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v17 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100070, v17);
  v18 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v18 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v18 + v36) = sub_1000A4070((uint64_t)&off_100213750);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v18 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100080, v18);
  v19 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v19 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v19 + v36) = sub_1000A4070((uint64_t)&off_100213778);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v19 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100090, v19);
  v20 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v20 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v20 + v36) = sub_1000A4070((uint64_t)&off_1002137B8);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v20 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100100, v20);
  v21 = swift_allocObject(v2, v36 - v31 + 8 * v31, v33);
  *(_OWORD *)(v21 + 16) = xmmword_1001B7730;
  v22 = (uint64_t *)(v21 + v36);
  *v22 = sub_1000A4070((uint64_t)&off_1002137E8);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v21 + v36, v35, v3);
  *(_OWORD *)((char *)v22 + v5) = xmmword_1001B7740;
  ((void (*)(void))v10)();
  *(_OWORD *)((char *)v22 + 2 * v5) = xmmword_1001B7750;
  ((void (*)(void))v10)();
  *(_OWORD *)((char *)v22 + 3 * v5) = xmmword_1001B7760;
  ((void (*)(void))v10)();
  *(_OWORD *)((char *)v22 + 4 * v5) = xmmword_1001B7770;
  ((void (*)(void))v10)();
  *(_OWORD *)((char *)v22 + 5 * v5) = xmmword_1001B7780;
  ((void (*)(void))v10)();
  *(_OWORD *)((char *)v22 + 6 * v5) = xmmword_1001B7790;
  ((void (*)(void))v10)();
  ClassifiedIntBucket.init(name:contents:)(100110, v21);
  v32 = v36 + 2 * v5;
  v23 = swift_allocObject(v2, v32, v33);
  *(_OWORD *)(v23 + 16) = xmmword_1001B77A0;
  v24 = (uint64_t *)(v23 + v36);
  *v24 = sub_1000A4070((uint64_t)&off_100213818);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v23 + v36, v35, v3);
  *(_OWORD *)((char *)v24 + v5) = xmmword_1001B77B0;
  ((void (*)(void))v10)();
  ClassifiedIntBucket.init(name:contents:)(100120, v23);
  v25 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v25 + 16) = xmmword_1001B76C0;
  *(_OWORD *)(v25 + v36) = xmmword_1001B77C0;
  ((void (*)(void))v10)();
  ClassifiedIntBucket.init(name:contents:)(100130, v25);
  v26 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v26 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v26 + v36) = sub_1000A4070((uint64_t)&off_100213840);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v26 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100140, v26);
  v27 = swift_allocObject(v2, v32, v33);
  *(_OWORD *)(v27 + 16) = xmmword_1001B77A0;
  v28 = (uint64_t *)(v27 + v36);
  *v28 = sub_1000A4070((uint64_t)&off_100213870);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v27 + v36, v35, v3);
  *(_OWORD *)((char *)v28 + v31) = xmmword_1001B77D0;
  ((void (*)(void))v10)();
  ClassifiedIntBucket.init(name:contents:)(100150, v27);
  return IntBucketConfiguration.init(unknownBucketName:discreteBuckets:classifiedBuckets:)(100011, _swiftEmptyArrayStorage, v30);
}

uint64_t sub_1000A63DC()
{
  return sub_1000A5B5C();
}

uint64_t sub_1000A63F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000A3560(&qword_100264218, (uint64_t (*)(uint64_t))type metadata accessor for APHTTPMethod, (uint64_t)&unk_1001B7444);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A6464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000A3560(&qword_100264218, (uint64_t (*)(uint64_t))type metadata accessor for APHTTPMethod, (uint64_t)&unk_1001B7444);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000A64C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A6500 + 4 * byte_1001B7840[a1]))(0x6C61767265746E69, 0xEA00000000006449);
}

unint64_t sub_1000A6500()
{
  return 0xD000000000000013;
}

BOOL sub_1000A6594(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000A65B0()
{
  unsigned __int8 *v0;

  return sub_1000A64C8(*v0);
}

uint64_t sub_1000A65B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A9184(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A65DC()
{
  return 0;
}

void sub_1000A65E8(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1000A65F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ABB68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A661C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ABB68();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A6644(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v3 = v1;
  v5 = sub_100008A18(&qword_100264178);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000B748(a1, v9);
  v11 = sub_1000ABB68();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AttributionPerfMetrics.CodingKeys, &type metadata for AttributionPerfMetrics.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v29 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v29, v5);
  if (!v2)
  {
    v13 = v3[1];
    v14 = v3[2];
    v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v28, v5);
    v15 = (int *)type metadata accessor for AttributionPerfMetrics(0);
    v16 = (char *)v3 + v15[6];
    v27 = 2;
    v17 = type metadata accessor for Date(0);
    v18 = sub_1000A3560(&qword_100264180, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v27, v5, v17, v18);
    v19 = (char *)v3 + v15[7];
    v26 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v26, v5, v17, v18);
    v20 = (char *)v3 + v15[8];
    v25 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v25, v5, v17, v18);
    v21 = (char *)v3 + v15[9];
    v24 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v24, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A6868@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  int *v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v38 = a2;
  v43 = type metadata accessor for Date(0);
  v41 = *(_QWORD *)(v43 - 8);
  v3 = __chkstk_darwin(v43);
  v39 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v35 - v6;
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v35 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v35 - v11;
  v40 = sub_100008A18(&qword_100264160);
  v13 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  __chkstk_darwin(v46);
  v44 = (uint64_t *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = a1[3];
  v18 = a1[4];
  v42 = a1;
  sub_10000B748(a1, v17);
  v19 = sub_1000ABB68();
  v20 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AttributionPerfMetrics.CodingKeys, &type metadata for AttributionPerfMetrics.CodingKeys, v19, v17, v18);
  if (v20)
    return _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v42);
  v45 = v10;
  v37 = v7;
  v21 = v13;
  v23 = v39;
  v22 = v40;
  v52 = 0;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v52, v40);
  v25 = (uint64_t)v44;
  *v44 = v24;
  v51 = 1;
  *(_QWORD *)(v25 + 8) = KeyedDecodingContainer.decode(_:forKey:)(&v51, v22);
  *(_QWORD *)(v25 + 16) = v26;
  v50 = 2;
  v27 = sub_1000A3560(&qword_100264170, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v28 = v22;
  v29 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, &v50, v28, v43, v27);
  v30 = v25 + v46[6];
  v36 = *(void (**)(uint64_t, char *, uint64_t))(v41 + 32);
  v36(v30, v12, v29);
  v49 = 3;
  v31 = v45;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, &v49, v40, v29, v27);
  v36(v25 + v46[7], v31, v29);
  v48 = 4;
  v32 = v37;
  v45 = (char *)v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, &v48, v40, v29, v27);
  v33 = v46;
  v36(v25 + v46[8], v32, v29);
  v47 = 5;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, &v47, v40, v29, v45);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v40);
  v36(v25 + v33[9], v23, v29);
  sub_10000BD40(v25, v38, type metadata accessor for AttributionPerfMetrics);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v42);
  return sub_1000070D8(v25, type metadata accessor for AttributionPerfMetrics);
}

uint64_t sub_1000A6D70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A6868(a1, a2);
}

uint64_t sub_1000A6D84(_QWORD *a1)
{
  return sub_1000A6644(a1);
}

uint64_t sub_1000A6D98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  char v30;

  v3 = v1;
  v5 = sub_100008A18(&qword_1002641C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000B748(a1, v9);
  v11 = sub_1000ABBAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AttributionNetworkRequestData.CodingKeys, &type metadata for AttributionNetworkRequestData.CodingKeys, v11, v9, v10);
  *(_QWORD *)&v29 = *(_QWORD *)v3;
  v30 = 0;
  v12 = sub_100008A18(&qword_100264198);
  v13 = sub_1000ABC48(&qword_1002641D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v30, v5, v12, v13);
  if (!v2)
  {
    v29 = *(_OWORD *)(v3 + 8);
    v30 = 1;
    v14 = sub_1000ABCA8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v30, v5, &type metadata for Data, v14);
    v15 = (int *)type metadata accessor for AttributionNetworkRequestData(0);
    v16 = v3 + v15[6];
    LOBYTE(v29) = 2;
    v17 = type metadata accessor for URL(0);
    v18 = sub_1000A3560(&qword_1002641E0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v29, v5, v17, v18);
    v19 = (uint64_t *)(v3 + v15[7]);
    v20 = *v19;
    v21 = v19[1];
    LOBYTE(v29) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v29, v5);
    *(_QWORD *)&v29 = *(_QWORD *)(v3 + v15[8]);
    v30 = 4;
    type metadata accessor for APHTTPMethod();
    v23 = v22;
    v24 = sub_1000A3560(&qword_1002641E8, (uint64_t (*)(uint64_t))type metadata accessor for APHTTPMethod, (uint64_t)&protocol conformance descriptor for APHTTPMethod);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v30, v5, v23, v24);
    v25 = v3 + v15[9];
    LOBYTE(v29) = 5;
    v26 = type metadata accessor for AttributionPerfMetrics(0);
    v27 = sub_1000A3560(&qword_1002641F0, type metadata accessor for AttributionPerfMetrics, (uint64_t)&unk_1001B79E0);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v29, v5, v26, v27);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A7060@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  char v44;

  v35 = a2;
  v36 = type metadata accessor for AttributionPerfMetrics(0);
  __chkstk_darwin(v36);
  v37 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100008A18(&qword_100264188);
  v7 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for AttributionNetworkRequestData(0);
  __chkstk_darwin(v10);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v41 = a1;
  sub_10000B748(a1, v14);
  v15 = sub_1000ABBAC();
  v40 = v9;
  v16 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AttributionNetworkRequestData.CodingKeys, &type metadata for AttributionNetworkRequestData.CodingKeys, v15, v14, v13);
  if (v16)
    return _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v41);
  v17 = v6;
  v42 = v7;
  v18 = (uint64_t)v12;
  v19 = v38;
  v20 = sub_100008A18(&qword_100264198);
  v44 = 0;
  v21 = sub_1000ABC48(&qword_1002641A0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  v22 = v39;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v43, v20, &v44, v39, v20, v21);
  *(_QWORD *)v12 = v43;
  v44 = 1;
  v23 = sub_1000ABC04();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v22, &type metadata for Data, v23);
  *(_OWORD *)(v12 + 8) = v43;
  LOBYTE(v43) = 2;
  v24 = sub_1000A3560(&qword_1002641B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, &v43, v22, v19, v24);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v12[v10[6]], v17, v19);
  LOBYTE(v43) = 3;
  v34[1] = 0;
  v25 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v22);
  v26 = (uint64_t *)&v12[v10[7]];
  *v26 = v25;
  v26[1] = v27;
  type metadata accessor for APHTTPMethod();
  v29 = v28;
  v44 = 4;
  v30 = sub_1000A3560(&qword_1002641B8, (uint64_t (*)(uint64_t))type metadata accessor for APHTTPMethod, (uint64_t)&protocol conformance descriptor for APHTTPMethod);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, &v44, v22, v29, v30);
  *(_QWORD *)(v18 + v10[8]) = v43;
  LOBYTE(v43) = 5;
  v31 = sub_1000A3560(&qword_1002641C0, type metadata accessor for AttributionPerfMetrics, (uint64_t)&unk_1001B7A08);
  v32 = (uint64_t)v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, &v43, v22, v36, v31);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v22);
  sub_10000BCFC(v32, v18 + v10[9], type metadata accessor for AttributionPerfMetrics);
  sub_10000BD40(v18, v35, type metadata accessor for AttributionNetworkRequestData);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v41);
  return sub_1000070D8(v18, type metadata accessor for AttributionNetworkRequestData);
}

uint64_t sub_1000A7568()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A7598 + 4 * byte_1001B7846[*v0]))(0x73726564616568, 0xE700000000000000);
}

uint64_t sub_1000A7598()
{
  return 2036625250;
}

uint64_t sub_1000A75A8()
{
  return 6910581;
}

uint64_t sub_1000A75B8()
{
  return 0x6449656C646E7562;
}

uint64_t sub_1000A75D0()
{
  return 0x646F6874656DLL;
}

uint64_t sub_1000A75E4()
{
  return 0x7274654D66726570;
}

uint64_t sub_1000A7604@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A940C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A7628(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ABBAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A7650(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ABBAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A7678@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A7060(a1, a2);
}

uint64_t sub_1000A768C(_QWORD *a1)
{
  return sub_1000A6D98(a1);
}

uint64_t static AttributionRetryWorkerBridge.start(session:request:requestorId:intervalId:reportingStorefront:requestTimestamp:daemonStartTime:tokenReturnedToClientDate:payloadDeliveryStartDate:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_1000A99C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

id AttributionRetryWorkerBridge.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id AttributionRetryWorkerBridge.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AttributionRetryWorkerBridge();
  return objc_msgSendSuper2(&v2, "init");
}

id AttributionRetryWorkerBridge.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AttributionRetryWorkerBridge();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000A795C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  _BYTE v23[24];

  v9 = sub_100008A18(&qword_100264200);
  v10 = __chkstk_darwin(v9);
  v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v10);
  v14 = &v23[-v13 - 8];
  v15 = type metadata accessor for AttributionRetryWorker(0);
  v16 = swift_dynamicCastClass(a1, v15);
  if (v16)
  {
    v17 = v16;
    v18 = type metadata accessor for AttributionRetryWorker.OriginalRequest(0);
    sub_10000BD40(a5, (uint64_t)v14 + *(int *)(v18 + 24), type metadata accessor for AttributionNetworkRequestData);
    *v14 = a3;
    v14[1] = a4;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 0, 1, v18);
    sub_1000AC290((uint64_t)v14, (uint64_t)v12);
    v19 = v17 + OBJC_IVAR____TtC11Attribution22AttributionRetryWorker_originalRequest;
    swift_beginAccess(v17 + OBJC_IVAR____TtC11Attribution22AttributionRetryWorker_originalRequest, v23, 33, 0);
    swift_unknownObjectRetain(a1);
    v20 = a3;
    v21 = a4;
    sub_1000AC2D8((uint64_t)v12, v19, &qword_100264200);
    swift_endAccess(v23);
    swift_unknownObjectRelease(a1);
  }
  else
  {
    v22 = String._bridgeToObjectiveC()();
    APSimulateCrash(5, v22, 0);

  }
}

uint64_t sub_1000A7B08(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSString v38;
  Class v39;
  Class v40;
  Class v41;
  Class v42;
  id v43;
  uint64_t (*v44)();
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  _QWORD *v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  id v63;
  id v64;
  uint64_t v65;
  id v66;
  unint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  os_log_type_t v72;
  NSObject *v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  id v82;
  NSString v83;
  Class isa;
  Class v85;
  Class v86;
  Class v87;
  id v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  NSString v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  NSURL *v105;
  id v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t aBlock[5];
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  char v128[32];

  v122 = a5;
  v120 = a4;
  v121 = a6;
  v119 = a3;
  v114 = type metadata accessor for URL(0);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v115 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttributionNetworkRequestData(0);
  v118 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v111 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v116 = (uint64_t *)((char *)&v108 - v12);
  v13 = sub_100008A18(&qword_1002641F8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v108 - v17;
  v19 = sub_100008A18(&qword_100264200);
  __chkstk_darwin(v19);
  v21 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for AttributionRetryWorker.OriginalRequest(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (id *)((char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v112 = mach_continuous_time();
  swift_bridgeObjectRetain(a2);
  v26 = sub_1000A4654(a1, a2);
  v27 = v123 + OBJC_IVAR____TtC11Attribution22AttributionRetryWorker_originalRequest;
  swift_beginAccess(v123 + OBJC_IVAR____TtC11Attribution22AttributionRetryWorker_originalRequest, v128, 0, 0);
  sub_1000089D4(v27, (uint64_t)v21, &qword_100264200);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_100008AD8((uint64_t)v21, &qword_100264200);
    v28 = v118;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 56))(v18, 1, 1, v9);
    v29 = objc_autoreleasePoolPush();
    sub_1000A8714(v119, v120, (uint64_t)v18);
    objc_autoreleasePoolPop(v29);
    sub_1000089D4((uint64_t)v18, (uint64_t)v16, &qword_1002641F8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v16, 1, v9) == 1)
    {
      v30 = sub_100008AD8((uint64_t)v16, &qword_1002641F8);
      v31 = static os_log_type_t.error.getter(v30);
      sub_1000ABCEC();
      v32 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
      os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Retry: Failed to de-serialize payload.", 38, 2, _swiftEmptyArrayStorage);

      v33 = (uint64_t)v18;
      return sub_100008AD8(v33, &qword_1002641F8);
    }
    v46 = v9;
    v47 = v116;
    sub_10000BCFC((uint64_t)v16, (uint64_t)v116, type metadata accessor for AttributionNetworkRequestData);
    v48 = *v47;
    v49 = (uint64_t *)v111;
    v110 = v18;
    if (v48 && *(_QWORD *)(v48 + 16))
    {
      swift_bridgeObjectRetain(v48);
      v50 = sub_10002DDCC(0xD000000000000018, 0x80000001001EDA10);
      if ((v51 & 1) != 0)
      {
        v52 = (uint64_t *)(*(_QWORD *)(v48 + 56) + 16 * v50);
        v54 = *v52;
        v53 = v52[1];
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRelease(v48);
        sub_10000BD40((uint64_t)v47, (uint64_t)v49, type metadata accessor for AttributionNetworkRequestData);
        if (v53)
          goto LABEL_20;
        v55 = *v49;
        if (!*v49)
          goto LABEL_19;
LABEL_16:
        if (!*(_QWORD *)(v55 + 16))
          goto LABEL_19;
        v68 = sub_10002DDCC(0xD000000000000017, 0x80000001001ED9F0);
        if ((v69 & 1) == 0)
          goto LABEL_19;
        v70 = (uint64_t *)(*(_QWORD *)(v55 + 56) + 16 * v68);
        v54 = *v70;
        v53 = v70[1];
        swift_bridgeObjectRetain(v53);
LABEL_20:
        v71 = sub_1000070D8((uint64_t)v49, type metadata accessor for AttributionNetworkRequestData);
        v72 = static os_log_type_t.debug.getter(v71);
        sub_1000ABCEC();
        v73 = OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
        v74 = os_log_type_enabled(v73, v72);
        v117 = v26;
        if (v74)
        {
          swift_bridgeObjectRetain(v53);
          v75 = swift_slowAlloc(22, -1);
          v76 = swift_slowAlloc(32, -1);
          aBlock[0] = v76;
          *(_DWORD *)v75 = 134218242;
          v126 = v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v75 + 4, v75 + 12);
          *(_WORD *)(v75 + 12) = 2080;
          swift_bridgeObjectRetain(v53);
          v126 = sub_1000A8B30(v54, v53, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v75 + 14, v75 + 22);
          swift_bridgeObjectRelease_n(v53, 3);
          _os_log_impl((void *)&_mh_execute_header, v73, v72, "Retry: attempt retry:%lu\nRetry: attempt sigID:%s", (uint8_t *)v75, 0x16u);
          swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1, -1);
          swift_slowDealloc(v75, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease(v53);
        }

        v77 = v121;
        v109 = v46;
        v78 = (uint64_t *)((char *)v47 + *(int *)(v46 + 36));
        v79 = *v78;
        v80 = v78[2];
        type metadata accessor for AttributionPerfMetrics(0);
        v81 = v47;
        v82 = objc_allocWithZone((Class)APAttributionUploadStatusListener);
        swift_bridgeObjectRetain(v80);
        v83 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v80);
        isa = Date._bridgeToObjectiveC()().super.isa;
        v85 = Date._bridgeToObjectiveC()().super.isa;
        v86 = Date._bridgeToObjectiveC()().super.isa;
        v87 = Date._bridgeToObjectiveC()().super.isa;
        v88 = objc_msgSend(v82, "initWithIntervalId:reportingStorefront:requestTimestamp:daemonStartTime:tokenPayloadDeliveryStartTime:tokenReturnedToClientDate:", v79, v83, isa, v85, v86, v87);

        objc_msgSend(v88, "requestBuildingStartedWithTimestamp:", v112);
        v89 = (_QWORD *)swift_allocObject(&unk_100213AB8, 48, 7);
        v90 = v117;
        v89[2] = v88;
        v89[3] = v90;
        v89[4] = v122;
        v89[5] = v77;
        v91 = (void *)objc_opt_self(APNetworkClient);
        swift_retain(v77, v92);
        v93 = v88;
        v94 = objc_msgSend(v91, "sharedAPNetworkClient");
        v95 = v109;
        v96 = *(uint64_t *)((char *)v81 + *(int *)(v109 + 28) + 8);
        swift_bridgeObjectRetain(v96);
        v97 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v96);
        v98 = objc_msgSend(v94, "temporarySessionForClient:", v97);

        v99 = (uint64_t)v115;
        (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v115, (char *)v81 + *(int *)(v95 + 24), v114);
        v100 = *(uint64_t *)((char *)v81 + *(int *)(v95 + 32));
        v101 = *v81;
        v102 = v81[1];
        v103 = v81[2];
        objc_allocWithZone((Class)APHTTPRequest);
        swift_bridgeObjectRetain(v101);
        sub_1000ABDB4(v102, v103);
        swift_retain(v89, v104);
        v106 = sub_1000A897C(v99, v100, v101, v102, v103, 0, (uint64_t)sub_1000ABD54, v105, (uint64_t)v89);
        sub_1000ABDC8(v106);
        objc_msgSend(v93, "requestIsAboutToBeSent");
        v107 = objc_msgSend(v98, "sendRequest:", v106);

        swift_release(v89);
        sub_1000070D8((uint64_t)v81, type metadata accessor for AttributionNetworkRequestData);
        v33 = (uint64_t)v110;
        return sub_100008AD8(v33, &qword_1002641F8);
      }
      swift_bridgeObjectRelease(v48);
    }
    sub_10000BD40((uint64_t)v47, (uint64_t)v49, type metadata accessor for AttributionNetworkRequestData);
    v55 = *v49;
    if (!*v49)
    {
LABEL_19:
      v54 = 0;
      v53 = 0xE000000000000000;
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  v117 = v26;
  sub_10000BCFC((uint64_t)v21, (uint64_t)v25, type metadata accessor for AttributionRetryWorker.OriginalRequest);
  v34 = (uint64_t *)((char *)v25 + *(int *)(v22 + 24) + (uint64_t)*(int *)(v9 + 36));
  v35 = *v34;
  v36 = v34[2];
  type metadata accessor for AttributionPerfMetrics(0);
  v37 = objc_allocWithZone((Class)APAttributionUploadStatusListener);
  swift_bridgeObjectRetain(v36);
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v36);
  v39 = Date._bridgeToObjectiveC()().super.isa;
  v40 = Date._bridgeToObjectiveC()().super.isa;
  v41 = Date._bridgeToObjectiveC()().super.isa;
  v42 = Date._bridgeToObjectiveC()().super.isa;
  v43 = objc_msgSend(v37, "initWithIntervalId:reportingStorefront:requestTimestamp:daemonStartTime:tokenPayloadDeliveryStartTime:tokenReturnedToClientDate:", v35, v38, v39, v40, v41, v42);

  v44 = (uint64_t (*)())objc_msgSend(v25[1], "completionHandler");
  if (v44)
  {
    v45 = swift_allocObject(&unk_100213B30, 24, 7);
    *(_QWORD *)(v45 + 16) = v44;
    v44 = sub_1000AC0F0;
  }
  else
  {
    v45 = 0;
  }
  v57 = v121;
  v56 = v122;
  v58 = v25[1];
  v59 = (_QWORD *)swift_allocObject(&unk_100213AE0, 64, 7);
  v60 = v117;
  v59[2] = v43;
  v59[3] = v60;
  v59[4] = v56;
  v59[5] = v57;
  v59[6] = v44;
  v59[7] = v45;
  aBlock[4] = (uint64_t)sub_1000AC084;
  v125 = v59;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000A86C4;
  aBlock[3] = (uint64_t)&unk_100213AF8;
  v61 = _Block_copy(aBlock);
  v62 = v125;
  v63 = v58;
  v64 = v43;
  swift_retain(v57, v65);
  sub_1000AC0AC((uint64_t)v44, v45);
  swift_release(v62);
  objc_msgSend(v63, "setCompletionHandler:", v61);
  _Block_release(v61);

  v66 = v25[1];
  sub_1000ABDC8(v66);

  objc_msgSend(v64, "requestIsAboutToBeSent");
  sub_1000AC0BC((uint64_t)v44, v45);

  return sub_1000070D8((uint64_t)v25, type metadata accessor for AttributionRetryWorker.OriginalRequest);
}

uint64_t sub_1000A8614(void *a1, id a2, unint64_t a3, void (*a4)(_QWORD), uint64_t a5, void (*a6)(void *), uint64_t a7)
{
  uint64_t result;
  uint64_t v15;

  objc_msgSend(a2, "receivedResponse:retryCount:", a1, a3);
  result = sub_1000A5740(a1, a2, a3, a4, a5);
  if (a6)
  {
    swift_retain(a7, v15);
    a6(a1);
    return sub_1000AC0BC((uint64_t)a6, a7);
  }
  return result;
}

void sub_1000A86C4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3, a2);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_1000A8714(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_100008A18(&qword_1002641F8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1(v7);
  if (v11 >> 60 == 15)
  {
    v12 = static os_log_type_t.error.getter(v10);
    sub_1000ABCEC();
    v13 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Retry: no payload.", 18, 2, _swiftEmptyArrayStorage);

  }
  else
  {
    v14 = v10;
    v15 = v11;
    v16 = type metadata accessor for AttributionNetworkRequestData(0);
    v17 = sub_1000A3560(&qword_100264210, type metadata accessor for AttributionNetworkRequestData, (uint64_t)&unk_1001B79B8);
    static Tools.codableFromBinaryData<A>(_:type:)(v14, v15, v16, v16, v17);
    if (v3)
    {
      swift_errorRelease(v3);
      sub_1000ABBF0(v14, v15);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
    }
    else
    {
      sub_1000ABBF0(v14, v15);
    }
    sub_1000AC2D8((uint64_t)v9, a3, &qword_1002641F8);
  }
}

uint64_t sub_1000A88D0()
{
  uint64_t v0;

  sub_100008AD8(v0 + OBJC_IVAR____TtC11Attribution22AttributionRetryWorker_originalRequest, &qword_100264200);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000A890C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for AttributionRetryWorker(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
  v4 = v3 + OBJC_IVAR____TtC11Attribution22AttributionRetryWorker_originalRequest;
  v5 = type metadata accessor for AttributionRetryWorker.OriginalRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  return v3;
}

id sub_1000A897C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, NSURL *a8@<X8>, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v18;
  void *v19;
  NSDictionary v20;
  Class isa;
  void *v22;
  NSString v23;
  void *v24;
  id v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v29;

  v10 = v9;
  URL._bridgeToObjectiveC()(a8);
  v19 = v18;
  if (a3)
  {
    v20.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v20.super.isa = 0;
  }
  if (a5 >> 60 == 15)
  {
    isa = 0;
    v22 = v10;
    if (a6)
      goto LABEL_6;
LABEL_9:
    v23 = 0;
    if (a7)
      goto LABEL_7;
LABEL_10:
    v24 = 0;
    goto LABEL_11;
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000ABBF0(a4, a5);
  v22 = v10;
  if (!a6)
    goto LABEL_9;
LABEL_6:
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  if (!a7)
    goto LABEL_10;
LABEL_7:
  aBlock[4] = a7;
  v29 = a9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A86C4;
  aBlock[3] = &unk_100213B48;
  v24 = _Block_copy(aBlock);
  swift_release(v29);
LABEL_11:
  v25 = objc_msgSend(v22, "initWithURL:HTTPMethod:HTTPHeaders:HTTPBody:serviceName:completionHandler:", v19, a2, v20.super.isa, isa, v23, v24);
  _Block_release(v24);

  v26 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a1, v26);
  return v25;
}

uint64_t sub_1000A8B30(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1000A8C00(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000A3E74((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000A3E74((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v12);
  return v7;
}

uint64_t sub_1000A8C00(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1000A8DB8(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000A8DB8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000A8E4C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000A9038(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000A9038(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000A8E4C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10002DF10(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000A8FC0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_1000A9038(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008A18(&qword_100264208);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000A9184(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6C61767265746E69 && a2 == 0xEA00000000006449)
  {
    v5 = 0xEA00000000006449;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61767265746E69, 0xEA00000000006449, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013)
  {
    v7 = 0x80000001001EDD60;
    if (a2 == 0x80000001001EDD60)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001EDD60, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000001001EDD80;
    if (a2 == 0x80000001001EDD80)
      goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001EDD80, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x74536E6F6D656164 && a2 == 0xEF656D6954747261)
  {
    v9 = 0xEF656D6954747261;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74536E6F6D656164, 0xEF656D6954747261, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_24;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000001001EDDA0)
  {
    v10 = 0x80000001001EDDA0;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000001001EDDA0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001001EDDC0)
  {
    swift_bridgeObjectRelease(0x80000001001EDDC0);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001001EDDC0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1000A940C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x73726564616568 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73726564616568, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 2036625250 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(2036625250, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 6910581 && a2 == 0xE300000000000000)
  {
    v8 = 0xE300000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6910581, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656C646E7562, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x646F6874656DLL && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F6874656DLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x7274654D66726570 && a2 == 0xEB00000000736369)
  {
    swift_bridgeObjectRelease(0xEB00000000736369);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7274654D66726570, 0xEB00000000736369, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1000A967C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD v50[5];

  v49 = a5;
  v9 = type metadata accessor for AttributionNetworkRequestData(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = sub_100008A18(&qword_100264220);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000A3560(&qword_100264228, type metadata accessor for AttributionNetworkRequestData, (uint64_t)&unk_1001B7990);
  v16 = static Tools.codableToBinaryData<A>(_:)(a3, v9, v15);
  v44 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v10;
  v46 = a3;
  v47 = a4;
  v48 = v14;
  if (v17 >> 60 == 15)
  {
    v18 = static os_log_type_t.error.getter(v16);
    sub_1000ABCEC();
    v19 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7475626972747441, 0xEB000000006E6F69);
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Failed to serialize network payload.", 36, 2, _swiftEmptyArrayStorage);

    return 0;
  }
  v22 = v17;
  v23 = v16;
  type metadata accessor for WorkCoordinator(0);
  result = static WorkCoordinator.shared.getter();
  v43 = result;
  if (result)
  {
    v24 = type metadata accessor for AttributionRetryWorker(0);
    v50[3] = sub_100008A18(&qword_100264230);
    v50[0] = v24;
    v25 = static Tools.fullClassName(_:)(v50);
    v41 = v26;
    v42 = v25;
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v50);
    v27 = sub_1000A9FE8(v23, v22);
    v28 = v48;
    static WorkOrderFlags.useTransaction.getter(v27);
    v29 = type metadata accessor for WorkOrderFlags(0);
    v20 = 1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
    v30 = v44;
    sub_10000BD40(v46, v44, type metadata accessor for AttributionNetworkRequestData);
    v31 = *(unsigned __int8 *)(v45 + 80);
    v32 = (v31 + 32) & ~v31;
    v33 = swift_allocObject(&unk_100213B80, v32 + v11, v31 | 7);
    *(_QWORD *)(v33 + 16) = a1;
    *(_QWORD *)(v33 + 24) = a2;
    sub_10000BCFC(v30, v33 + v32, type metadata accessor for AttributionNetworkRequestData);
    v34 = a1;
    v35 = a2;
    v36 = (uint64_t)v48;
    v37 = v41;
    v38 = v43;
    WorkCoordinator.createAndRun(workerName:group:workData:requestorId:requestorData:flags:configClosure:)(v42, v41, 0x7475626972747441, 0xEB000000006E6F69, v23, v22, v47, v49, 0, 0, v48, sub_1000AC240, v33);
    v40 = v39;
    swift_release(v33);
    sub_1000ABBF0(v23, v22);
    swift_release(v38);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v40);
    sub_1000ABBF0(v23, v22);
    sub_100008AD8(v36, &qword_100264220);
    return v20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A99C8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  int *v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  NSString v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v56 = a8;
  v57 = a5;
  v58 = a6;
  v16 = type metadata accessor for AttributionNetworkRequestData(0);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(a1, "name");
  if (v23 || (v23 = objc_msgSend(a2, "serviceName")) != 0)
  {
    v52 = (int *)v16;
    v53 = a1;
    v54 = a3;
    v55 = a4;
    v49 = a11;
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23, v22);
    v51 = v24;

    v25 = &v21[v19[6]];
    v26 = a7;
    v27 = type metadata accessor for Date(0);
    v28 = a2;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
    v29(v25, v56, v27);
    v29(&v21[v19[7]], a9, v27);
    v29(&v21[v19[8]], a10, v27);
    v29(&v21[v19[9]], v49, v27);
    v30 = v28;
    v31 = v58;
    *(_QWORD *)v21 = v57;
    *((_QWORD *)v21 + 1) = v31;
    *((_QWORD *)v21 + 2) = v26;
    swift_bridgeObjectRetain(v26);
    v32 = objc_msgSend(v28, "HTTPMethod");
    v33 = objc_msgSend(v28, "allHTTPHeaderFields");
    if (v33)
    {
      v34 = v33;
      v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v33, &type metadata for String, &type metadata for String, &protocol witness table for String);

    }
    else
    {
      v35 = 0;
    }
    v36 = objc_msgSend(v28, "HTTPBody");
    v37 = v53;
    if (v36)
    {
      v38 = v36;
      v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v41 = v40;

    }
    else
    {
      v39 = 0;
      v41 = 0xF000000000000000;
    }
    v42 = objc_msgSend(v30, "URL");
    v43 = v52;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000BD40((uint64_t)v21, (uint64_t)v18 + v43[9], type metadata accessor for AttributionPerfMetrics);
    *(uint64_t *)((char *)v18 + v43[8]) = (uint64_t)v32;
    *v18 = v35;
    v18[1] = v39;
    v18[2] = v41;
    v44 = (uint64_t *)((char *)v18 + v43[7]);
    v45 = v51;
    *v44 = v50;
    v44[1] = v45;
    v46 = sub_1000A967C(v37, v30, (uint64_t)v18, v54, v55);
    sub_1000070D8((uint64_t)v18, type metadata accessor for AttributionNetworkRequestData);
    sub_1000070D8((uint64_t)v21, type metadata accessor for AttributionPerfMetrics);
  }
  else
  {
    v48 = String._bridgeToObjectiveC()();
    APSimulateCrash(5, v48, 0);

    v46 = 0;
  }
  return v46 & 1;
}

uint64_t type metadata accessor for AttributionRetryWorkerBridge()
{
  return objc_opt_self(APAttributionRetryWorkerBridge);
}

uint64_t sub_1000A9D2C()
{
  return type metadata accessor for AttributionRetryWorker(0);
}

uint64_t type metadata accessor for AttributionRetryWorker(uint64_t a1)
{
  return sub_1000AA054(a1, (uint64_t *)&unk_100263EC8, (uint64_t)&nominal type descriptor for AttributionRetryWorker);
}

void sub_1000A9D48(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1000A9DB4(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_1000A9DB4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100263ED8)
  {
    v2 = type metadata accessor for AttributionRetryWorker.OriginalRequest(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100263ED8);
  }
}

uint64_t type metadata accessor for AttributionRetryWorker.OriginalRequest(uint64_t a1)
{
  return sub_1000AA054(a1, qword_100263FE0, (uint64_t)&nominal type descriptor for AttributionRetryWorker.OriginalRequest);
}

char *sub_1000A9E1C(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5, a2);
  }
  else
  {
    v6 = a2[1];
    *((_QWORD *)a1 + 1) = v6;
    v7 = *(int *)(a3 + 24);
    v8 = &a1[v7];
    v9 = (uint64_t)a2 + v7;
    v10 = *(uint64_t *)((char *)a2 + v7);
    *(_QWORD *)&a1[v7] = v10;
    v11 = &a1[v7 + 8];
    v12 = (uint64_t *)((char *)a2 + v7 + 8);
    v13 = *(unint64_t *)((char *)a2 + v7 + 16);
    v14 = v5;
    v15 = v6;
    swift_bridgeObjectRetain(v10);
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
    }
    else
    {
      v16 = *v12;
      sub_1000A9FE8(*v12, v13);
      *((_QWORD *)v8 + 1) = v16;
      *((_QWORD *)v8 + 2) = v13;
    }
    v17 = (int *)type metadata accessor for AttributionNetworkRequestData(0);
    v18 = v17[6];
    v19 = &v8[v18];
    v20 = v9 + v18;
    v21 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = v17[7];
    v23 = &v8[v22];
    v24 = (_QWORD *)(v9 + v22);
    v25 = v24[1];
    *(_QWORD *)v23 = *v24;
    *((_QWORD *)v23 + 1) = v25;
    *(_QWORD *)&v8[v17[8]] = *(_QWORD *)(v9 + v17[8]);
    v26 = v17[9];
    v27 = &v8[v26];
    v28 = v9 + v26;
    *(_OWORD *)v27 = *(_OWORD *)(v9 + v26);
    v29 = *(_QWORD *)(v9 + v26 + 16);
    *((_QWORD *)v27 + 2) = v29;
    v30 = (int *)type metadata accessor for AttributionPerfMetrics(0);
    v31 = v30[6];
    v32 = &v27[v31];
    v33 = v28 + v31;
    v34 = type metadata accessor for Date(0);
    v35 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v29);
    v35(v32, v33, v34);
    v35(&v27[v30[7]], v28 + v30[7], v34);
    v35(&v27[v30[8]], v28 + v30[8], v34);
    v35(&v27[v30[9]], v28 + v30[9], v34);
  }
  return a1;
}

uint64_t sub_1000A9FE8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result, a2);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL, a2);
}

uint64_t type metadata accessor for AttributionNetworkRequestData(uint64_t a1)
{
  return sub_1000AA054(a1, qword_100264118, (uint64_t)&nominal type descriptor for AttributionNetworkRequestData);
}

uint64_t type metadata accessor for AttributionPerfMetrics(uint64_t a1)
{
  return sub_1000AA054(a1, qword_100264078, (uint64_t)&nominal type descriptor for AttributionPerfMetrics);
}

uint64_t sub_1000AA054(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_1000AA088(id *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  char *v11;
  uint64_t v12;
  void (*v14)(char *, uint64_t);

  v4 = (id *)((char *)a1 + *(int *)(a2 + 24));
  swift_bridgeObjectRelease(*v4);
  v5 = v4[2];
  if (v5 >> 60 != 15)
    sub_1000AA1B4(v4[1], v5);
  v6 = (int *)type metadata accessor for AttributionNetworkRequestData(0);
  v7 = (char *)v4 + v6[6];
  v8 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v6[7] + 8));
  v9 = (char *)v4 + v6[9];
  swift_bridgeObjectRelease(*((_QWORD *)v9 + 2));
  v10 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v11 = &v9[v10[6]];
  v12 = type metadata accessor for Date(0);
  v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v14(v11, v12);
  v14(&v9[v10[7]], v12);
  v14(&v9[v10[8]], v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(&v9[v10[9]], v12);
}

uint64_t sub_1000AA1B4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_QWORD *sub_1000AA1F8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = a2 + v6;
  v9 = *(_QWORD *)(a2 + v6);
  *(_QWORD *)((char *)a1 + v6) = v9;
  v10 = (_OWORD *)((char *)a1 + v6 + 8);
  v11 = (uint64_t *)(a2 + v6 + 8);
  v12 = *(_QWORD *)(a2 + v6 + 16);
  v13 = v4;
  v14 = v5;
  swift_bridgeObjectRetain(v9);
  if (v12 >> 60 == 15)
  {
    *v10 = *(_OWORD *)v11;
  }
  else
  {
    v15 = *v11;
    sub_1000A9FE8(*v11, v12);
    *((_QWORD *)v7 + 1) = v15;
    *((_QWORD *)v7 + 2) = v12;
  }
  v16 = (int *)type metadata accessor for AttributionNetworkRequestData(0);
  v17 = v16[6];
  v18 = &v7[v17];
  v19 = v8 + v17;
  v20 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = v16[7];
  v22 = &v7[v21];
  v23 = (_QWORD *)(v8 + v21);
  v24 = v23[1];
  *(_QWORD *)v22 = *v23;
  *((_QWORD *)v22 + 1) = v24;
  *(_QWORD *)&v7[v16[8]] = *(_QWORD *)(v8 + v16[8]);
  v25 = v16[9];
  v26 = &v7[v25];
  v27 = v8 + v25;
  *(_OWORD *)v26 = *(_OWORD *)(v8 + v25);
  v28 = *(_QWORD *)(v8 + v25 + 16);
  *((_QWORD *)v26 + 2) = v28;
  v29 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v30 = v29[6];
  v31 = &v26[v30];
  v32 = v27 + v30;
  v33 = type metadata accessor for Date(0);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v28);
  v34(v31, v32, v33);
  v34(&v26[v29[7]], v27 + v29[7], v33);
  v34(&v26[v29[8]], v27 + v29[8], v33);
  v34(&v26[v29[9]], v27 + v29[9], v33);
  return a1;
}

uint64_t sub_1000AA398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a1 + v12);
  v16 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v15);
  v17 = (uint64_t *)(v14 + 8);
  v18 = *(_QWORD *)(v14 + 16);
  if (*(_QWORD *)(v13 + 16) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      v20 = *v17;
      sub_1000A9FE8(*v17, *(_QWORD *)(v14 + 16));
      v21 = *(_QWORD *)(v13 + 8);
      v22 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = v20;
      *(_QWORD *)(v13 + 16) = v18;
      sub_1000AA1B4(v21, v22);
      goto LABEL_8;
    }
    sub_1000AA5BC(v13 + 8);
    goto LABEL_6;
  }
  if (v18 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(v13 + 8) = *(_OWORD *)v17;
    goto LABEL_8;
  }
  v19 = *v17;
  sub_1000A9FE8(*v17, *(_QWORD *)(v14 + 16));
  *(_QWORD *)(v13 + 8) = v19;
  *(_QWORD *)(v13 + 16) = v18;
LABEL_8:
  v23 = (int *)type metadata accessor for AttributionNetworkRequestData(0);
  v24 = v23[6];
  v25 = v13 + v24;
  v26 = v14 + v24;
  v27 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = v23[7];
  v29 = (_QWORD *)(v13 + v28);
  v30 = (_QWORD *)(v14 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)(v13 + v23[8]) = *(_QWORD *)(v14 + v23[8]);
  v33 = v23[9];
  v34 = (char *)(v13 + v33);
  v35 = (char *)(v14 + v33);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  v36 = *((_QWORD *)v35 + 2);
  v37 = *(_QWORD *)(v13 + v33 + 16);
  *((_QWORD *)v34 + 2) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v39 = v38[6];
  v40 = &v34[v39];
  v41 = &v35[v39];
  v42 = type metadata accessor for Date(0);
  v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 24);
  v43(v40, v41, v42);
  v43(&v34[v38[7]], &v35[v38[7]], v42);
  v43(&v34[v38[8]], &v35[v38[8]], v42);
  v43(&v34[v38[9]], &v35[v38[9]], v42);
  return a1;
}

uint64_t sub_1000AA5BC(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

_OWORD *sub_1000AA5F0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_QWORD *)v5 = *(_QWORD *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)((char *)a2 + v4 + 8);
  v7 = (int *)type metadata accessor for AttributionNetworkRequestData(0);
  v8 = v7[6];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_OWORD *)&v5[v7[7]] = *(_OWORD *)&v6[v7[7]];
  *(_QWORD *)&v5[v7[8]] = *(_QWORD *)&v6[v7[8]];
  v12 = v7[9];
  v13 = &v5[v12];
  v14 = &v6[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)(v14 + 8);
  v15 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v16 = v15[6];
  v17 = &v13[v16];
  v18 = &v14[v16];
  v19 = type metadata accessor for Date(0);
  v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  v20(&v13[v15[7]], &v14[v15[7]], v19);
  v20(&v13[v15[8]], &v14[v15[8]], v19);
  v20(&v13[v15[9]], &v14[v15[9]], v19);
  return a1;
}

uint64_t sub_1000AA730(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)((char *)a2 + v8);
  swift_bridgeObjectRelease(v11);
  v12 = v10 + 8;
  v13 = *(_QWORD *)(v9 + 16);
  if (v13 >> 60 != 15)
  {
    v14 = *((_QWORD *)v10 + 2);
    if (v14 >> 60 != 15)
    {
      v15 = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v9 + 8) = *v12;
      *(_QWORD *)(v9 + 16) = v14;
      sub_1000AA1B4(v15, v13);
      goto LABEL_6;
    }
    sub_1000AA5BC(v9 + 8);
  }
  *(_OWORD *)(v9 + 8) = *(_OWORD *)v12;
LABEL_6:
  v16 = (int *)type metadata accessor for AttributionNetworkRequestData(0);
  v17 = v16[6];
  v18 = v9 + v17;
  v19 = &v10[v17];
  v20 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v21 = v16[7];
  v22 = (_QWORD *)(v9 + v21);
  v23 = &v10[v21];
  v25 = *(_QWORD *)v23;
  v24 = *((_QWORD *)v23 + 1);
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)(v9 + v16[8]) = *(_QWORD *)&v10[v16[8]];
  v27 = v16[9];
  v28 = v9 + v27;
  v29 = &v10[v27];
  *(_OWORD *)v28 = *(_OWORD *)v29;
  v30 = *(_QWORD *)(v9 + v27 + 16);
  *(_QWORD *)(v28 + 16) = *((_QWORD *)v29 + 2);
  swift_bridgeObjectRelease(v30);
  v31 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v32 = v31[6];
  v33 = v28 + v32;
  v34 = &v29[v32];
  v35 = type metadata accessor for Date(0);
  v36 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 40);
  v36(v33, v34, v35);
  v36(v28 + v31[7], &v29[v31[7]], v35);
  v36(v28 + v31[8], &v29[v31[8]], v35);
  v36(v28 + v31[9], &v29[v31[9]], v35);
  return a1;
}

uint64_t sub_1000AA8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AA900);
}

uint64_t sub_1000AA900(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for AttributionNetworkRequestData(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1000AA97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AA988);
}

char *sub_1000AA988(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for AttributionNetworkRequestData(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000AA9FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for AttributionNetworkRequestData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1000AAA74(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13, a2);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a2[2];
    a1[2] = v7;
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v12((char *)v4 + a3[7], (char *)a2 + a3[7], v11);
    v12((char *)v4 + a3[8], (char *)a2 + a3[8], v11);
    v12((char *)v4 + a3[9], (char *)a2 + a3[9], v11);
  }
  return v4;
}

uint64_t sub_1000AAB64(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  v7(a1 + a2[7], v5);
  v7(a1 + a2[8], v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + a2[9], v5);
}

uint64_t sub_1000AAC04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v11(a1 + a3[7], a2 + a3[7], v10);
  v11(a1 + a3[8], a2 + a3[8], v10);
  v11(a1 + a3[9], a2 + a3[9], v10);
  return a1;
}

char *sub_1000AACC8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24);
  v12(v9, v10, v11);
  v12(&a1[a3[7]], &a2[a3[7]], v11);
  v12(&a1[a3[8]], &a2[a3[8]], v11);
  v12(&a1[a3[9]], &a2[a3[9]], v11);
  return a1;
}

uint64_t sub_1000AAD9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(a1 + a3[7], a2 + a3[7], v9);
  v10(a1 + a3[8], a2 + a3[8], v9);
  v10(a1 + a3[9], a2 + a3[9], v9);
  return a1;
}

uint64_t sub_1000AAE58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v11(a1 + a3[7], a2 + a3[7], v10);
  v11(a1 + a3[8], a2 + a3[8], v10);
  v11(a1 + a3[9], a2 + a3[9], v10);
  return a1;
}

uint64_t sub_1000AAF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AAF28);
}

uint64_t sub_1000AAF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1000AAFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AAFB0);
}

uint64_t sub_1000AAFB0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000AB024(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1001B7928;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = v5;
    v8 = v5;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000AB0A8(uint64_t a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  _OWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5, a2);
  }
  else
  {
    v8 = a2 + 1;
    v9 = a2[2];
    swift_bridgeObjectRetain(v5);
    if (v9 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 8) = *v8;
    }
    else
    {
      v10 = *(_QWORD *)v8;
      sub_1000A9FE8(v10, v9);
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = v9;
    }
    v11 = a3[6];
    v12 = a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[7];
    v16 = a3[8];
    v17 = (_QWORD *)(a1 + v15);
    v18 = (_QWORD *)((char *)a2 + v15);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *(_QWORD *)(a1 + v16) = *(_QWORD *)((char *)a2 + v16);
    v20 = a3[9];
    v21 = a1 + v20;
    v22 = (char *)a2 + v20;
    *(_OWORD *)v21 = *(_OWORD *)((char *)a2 + v20);
    v23 = *(_QWORD *)((char *)a2 + v20 + 16);
    *(_QWORD *)(v21 + 16) = v23;
    v24 = (int *)type metadata accessor for AttributionPerfMetrics(0);
    v25 = v24[6];
    v26 = v21 + v25;
    v27 = &v22[v25];
    v28 = type metadata accessor for Date(0);
    v29 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v23);
    v29(v26, v27, v28);
    v29(v21 + v24[7], &v22[v24[7]], v28);
    v29(v21 + v24[8], &v22[v24[8]], v28);
    v29(v21 + v24[9], &v22[v24[9]], v28);
  }
  return a1;
}

uint64_t sub_1000AB244(_QWORD *a1, int *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  int *v8;
  char *v9;
  uint64_t v10;
  void (*v12)(char *, uint64_t);

  swift_bridgeObjectRelease(*a1);
  v4 = a1[2];
  if (v4 >> 60 != 15)
    sub_1000AA1B4(a1[1], v4);
  v5 = (char *)a1 + a2[6];
  v6 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
  v7 = (char *)a1 + a2[9];
  swift_bridgeObjectRelease(*((_QWORD *)v7 + 2));
  v8 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v9 = &v7[v8[6]];
  v10 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v12(v9, v10);
  v12(&v7[v8[7]], v10);
  v12(&v7[v8[8]], v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(&v7[v8[9]], v10);
}

uint64_t sub_1000AB34C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = a2[2];
  swift_bridgeObjectRetain(v6);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v7;
  }
  else
  {
    v9 = *v7;
    sub_1000A9FE8(*v7, v8);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v8;
  }
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = a3[7];
  v15 = a3[8];
  v16 = (_QWORD *)(a1 + v14);
  v17 = (uint64_t *)((char *)a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  *(_QWORD *)(a1 + v15) = *(uint64_t *)((char *)a2 + v15);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (char *)a2 + v19;
  *(_OWORD *)v20 = *(_OWORD *)((char *)a2 + v19);
  v22 = *(uint64_t *)((char *)a2 + v19 + 16);
  *(_QWORD *)(v20 + 16) = v22;
  v23 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v24 = v23[6];
  v25 = v20 + v24;
  v26 = &v21[v24];
  v27 = type metadata accessor for Date(0);
  v28 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v22);
  v28(v25, v26, v27);
  v28(v20 + v23[7], &v21[v23[7]], v27);
  v28(v20 + v23[8], &v21[v23[8]], v27);
  v28(v20 + v23[9], &v21[v23[9]], v27);
  return a1;
}

uint64_t *sub_1000AB4C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a2 + 1;
  v9 = a2[2];
  if ((unint64_t)a1[2] >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      v11 = *v8;
      sub_1000A9FE8(*v8, a2[2]);
      v12 = a1[1];
      v13 = a1[2];
      a1[1] = v11;
      a1[2] = v9;
      sub_1000AA1B4(v12, v13);
      goto LABEL_8;
    }
    sub_1000AA5BC((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v10 = *v8;
  sub_1000A9FE8(*v8, a2[2]);
  a1[1] = v10;
  a1[2] = v9;
LABEL_8:
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = a3[7];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  v23 = a3[9];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  *(_QWORD *)v24 = *(uint64_t *)((char *)a2 + v23);
  *((_QWORD *)v24 + 1) = *(uint64_t *)((char *)a2 + v23 + 8);
  v26 = *(uint64_t *)((char *)a2 + v23 + 16);
  v27 = *(uint64_t *)((char *)a1 + v23 + 16);
  *((_QWORD *)v24 + 2) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v29 = v28[6];
  v30 = &v24[v29];
  v31 = &v25[v29];
  v32 = type metadata accessor for Date(0);
  v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24);
  v33(v30, v31, v32);
  v33(&v24[v28[7]], &v25[v28[7]], v32);
  v33(&v24[v28[8]], &v25[v28[8]], v32);
  v33(&v24[v28[9]], &v25[v28[9]], v32);
  return a1;
}

uint64_t sub_1000AB6A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  v11 = a3[9];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)(a2 + v11);
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + v11 + 8);
  v14 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v15 = v14[6];
  v16 = v12 + v15;
  v17 = v13 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v19(v16, v17, v18);
  v19(v12 + v14[7], v13 + v14[7], v18);
  v19(v12 + v14[8], v13 + v14[8], v18);
  v19(v12 + v14[9], v13 + v14[9], v18);
  return a1;
}

_QWORD *sub_1000AB7CC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a2 + 1;
  v8 = a1[2];
  if (v8 >> 60 != 15)
  {
    v9 = a2[2];
    if (v9 >> 60 != 15)
    {
      v10 = a1[1];
      a1[1] = *v7;
      a1[2] = v9;
      sub_1000AA1B4(v10, v8);
      goto LABEL_6;
    }
    sub_1000AA5BC((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v7;
LABEL_6:
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_OWORD *)v22 = *(_OWORD *)((char *)a2 + v21);
  v24 = *(_QWORD *)((char *)a1 + v21 + 16);
  *((_QWORD *)v22 + 2) = *(_QWORD *)((char *)a2 + v21 + 16);
  swift_bridgeObjectRelease(v24);
  v25 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v26 = v25[6];
  v27 = &v22[v26];
  v28 = &v23[v26];
  v29 = type metadata accessor for Date(0);
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 40);
  v30(v27, v28, v29);
  v30(&v22[v25[7]], &v23[v25[7]], v29);
  v30(&v22[v25[8]], &v23[v25[8]], v29);
  v30(&v22[v25[9]], &v23[v25[9]], v29);
  return a1;
}

uint64_t sub_1000AB954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AB960);
}

uint64_t sub_1000AB960(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for AttributionPerfMetrics(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[7] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_1000ABA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ABA14);
}

uint64_t sub_1000ABA14(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[7] + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for AttributionPerfMetrics(0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[9];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_1000ABAB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = "\b";
  v5[1] = &unk_1001B7978;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = &unk_1001B7928;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for AttributionPerfMetrics(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000ABB68()
{
  unint64_t result;

  result = qword_100264168;
  if (!qword_100264168)
  {
    result = swift_getWitnessTable(&unk_1001B7C2C, &type metadata for AttributionPerfMetrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264168);
  }
  return result;
}

unint64_t sub_1000ABBAC()
{
  unint64_t result;

  result = qword_100264190;
  if (!qword_100264190)
  {
    result = swift_getWitnessTable(&unk_1001B7BDC, &type metadata for AttributionNetworkRequestData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264190);
  }
  return result;
}

uint64_t sub_1000ABBF0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000AA1B4(result, a2);
  return result;
}

unint64_t sub_1000ABC04()
{
  unint64_t result;

  result = qword_1002641A8;
  if (!qword_1002641A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002641A8);
  }
  return result;
}

uint64_t sub_1000ABC48(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A5AB4(&qword_100264198);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000ABCA8()
{
  unint64_t result;

  result = qword_1002641D8;
  if (!qword_1002641D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002641D8);
  }
  return result;
}

unint64_t sub_1000ABCEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100264750;
  if (!qword_100264750)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100264750);
  }
  return result;
}

uint64_t sub_1000ABD28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000ABD54(void *a1)
{
  _QWORD *v1;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD);

  v3 = (void *)v1[2];
  v4 = v1[3];
  v6 = (void (*)(_QWORD))v1[4];
  v5 = v1[5];
  objc_msgSend(v3, "receivedResponse:retryCount:", a1, v4);
  return sub_1000A5740(a1, v3, v4, v6, v5);
}

uint64_t sub_1000ABDB4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000A9FE8(result, a2);
  return result;
}

void sub_1000ABDC8(void *a1)
{
  id v2;
  NSString v3;
  id v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSString v13;
  NSString v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSString v22;
  NSString v23;
  id v24;

  if (objc_msgSend((id)objc_opt_self(APSystemInternal), "isAppleInternalInstall"))
  {
    v2 = objc_allocWithZone((Class)NSUserDefaults);
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend(v2, "initWithSuiteName:", v3);

    if (v4)
    {
      v5 = v4;
      v6 = String._bridgeToObjectiveC()();
      v7 = objc_msgSend(v5, "stringForKey:", v6);

      if (v7)
      {
        v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);
        v11 = v10;

        v12 = HIBYTE(v11) & 0xF;
        if ((v11 & 0x2000000000000000) == 0)
          v12 = v9 & 0xFFFFFFFFFFFFLL;
        if (v12)
        {
          v13 = String._bridgeToObjectiveC()();
          v14 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v11);
          objc_msgSend(a1, "setRequestHeader:withValue:", v13, v14);

        }
        else
        {
          swift_bridgeObjectRelease(v11);
        }
      }
      v24 = v5;
      v15 = String._bridgeToObjectiveC()();
      v16 = objc_msgSend(v24, "stringForKey:", v15);

      if (v16)
      {
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);
        v20 = v19;

        v21 = HIBYTE(v20) & 0xF;
        if ((v20 & 0x2000000000000000) == 0)
          v21 = v18 & 0xFFFFFFFFFFFFLL;
        if (v21)
        {
          v22 = String._bridgeToObjectiveC()();
          v23 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v20);
          objc_msgSend(a1, "setRequestHeader:withValue:", v22, v23);

        }
        else
        {
          swift_bridgeObjectRelease(v20);
        }
      }

    }
  }
}

uint64_t sub_1000AC048()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000AC084(void *a1)
{
  uint64_t v1;

  return sub_1000A8614(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(void *))(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1000AC094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2, a2);
}

uint64_t sub_1000AC0A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000AC0AC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2, a2);
  return result;
}

uint64_t sub_1000AC0BC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_1000AC0CC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AC0F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1000AC100()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for AttributionNetworkRequestData(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4));
  v7 = *(_QWORD *)(v0 + v4 + 16);
  if (v7 >> 60 != 15)
    sub_1000AA1B4(*(_QWORD *)(v6 + 8), v7);
  v8 = v4 + v5;
  v9 = v6 + v1[6];
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[7] + 8));
  v11 = v6 + v1[9];
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + 16));
  v12 = (int *)type metadata accessor for AttributionPerfMetrics(0);
  v13 = v11 + v12[6];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(v11 + v12[7], v14);
  v15(v11 + v12[8], v14);
  v15(v11 + v12[9], v14);
  return swift_deallocObject(v0, v8, v3 | 7);
}

void sub_1000AC240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AttributionNetworkRequestData(0) - 8) + 80);
  sub_1000A795C(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), v2 + ((v5 + 32) & ~v5));
}

uint64_t sub_1000AC290(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100264200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AC2D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008A18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for AttributionNetworkRequestData.CodingKeys()
{
  return &type metadata for AttributionNetworkRequestData.CodingKeys;
}

uint64_t _s11Attribution29AttributionNetworkRequestDataV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s11Attribution29AttributionNetworkRequestDataV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000AC410 + 4 * byte_1001B7851[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000AC444 + 4 * byte_1001B784C[v4]))();
}

uint64_t sub_1000AC444(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AC44C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AC454);
  return result;
}

uint64_t sub_1000AC460(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AC468);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000AC46C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AC474(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000AC480(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AttributionPerfMetrics.CodingKeys()
{
  return &type metadata for AttributionPerfMetrics.CodingKeys;
}

unint64_t sub_1000AC49C()
{
  unint64_t result;

  result = qword_100264238;
  if (!qword_100264238)
  {
    result = swift_getWitnessTable(&unk_1001B7AFC, &type metadata for AttributionPerfMetrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264238);
  }
  return result;
}

unint64_t sub_1000AC4E4()
{
  unint64_t result;

  result = qword_100264240;
  if (!qword_100264240)
  {
    result = swift_getWitnessTable(&unk_1001B7BB4, &type metadata for AttributionNetworkRequestData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264240);
  }
  return result;
}

unint64_t sub_1000AC52C()
{
  unint64_t result;

  result = qword_100264248;
  if (!qword_100264248)
  {
    result = swift_getWitnessTable(&unk_1001B7B24, &type metadata for AttributionNetworkRequestData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264248);
  }
  return result;
}

unint64_t sub_1000AC574()
{
  unint64_t result;

  result = qword_100264250;
  if (!qword_100264250)
  {
    result = swift_getWitnessTable(&unk_1001B7B4C, &type metadata for AttributionNetworkRequestData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264250);
  }
  return result;
}

unint64_t sub_1000AC5BC()
{
  unint64_t result;

  result = qword_100264258;
  if (!qword_100264258)
  {
    result = swift_getWitnessTable(&unk_1001B7A6C, &type metadata for AttributionPerfMetrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264258);
  }
  return result;
}

unint64_t sub_1000AC604()
{
  unint64_t result;

  result = qword_100264260;
  if (!qword_100264260)
  {
    result = swift_getWitnessTable(&unk_1001B7A94, &type metadata for AttributionPerfMetrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100264260);
  }
  return result;
}

void sub_1000AC6A0(id a1)
{
  void *v1;

  v1 = (void *)qword_100269598;
  qword_100269598 = (uint64_t)CFSTR("adprivacyd");

}

void sub_1000AC6F8(id a1)
{
  void *v1;

  v1 = (void *)qword_1002695A8;
  qword_1002695A8 = (uint64_t)CFSTR("1");

}

void sub_1000AC710(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[APAMSBagManager bagSubProfile](APAMSBagManager, "bagSubProfile"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[APAMSBagManager bagSubProfileVersion](APAMSBagManager, "bagSubProfileVersion"));
  v2 = objc_claimAutoreleasedReturnValue(+[AMSBag bagForProfile:profileVersion:](AMSBag, "bagForProfile:profileVersion:", v4, v1));
  v3 = (void *)qword_1002695B8;
  qword_1002695B8 = v2;

}

void sub_1000AC788(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;

  v5 = a3;
  if (a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "BOOLValue");
  }
  else
  {
    v6 = APLogForCategory(34);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (void *)objc_opt_class(*(_QWORD *)(a1 + 48));
      v10 = 138478083;
      v11 = v8;
      v12 = 2114;
      v13 = v5;
      v9 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{private}@: Unable to get the 'isSearchLandingAdsEnabled' status from the bag. Error: %{public}@", (uint8_t *)&v10, 0x16u);

    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1000AC888(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;

  v5 = a3;
  if (a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "BOOLValue");
  }
  else
  {
    v6 = APLogForCategory(34);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (void *)objc_opt_class(*(_QWORD *)(a1 + 48));
      v10 = 138478083;
      v11 = v8;
      v12 = 2114;
      v13 = v5;
      v9 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{private}@: Unable to get the 'isSponsoredAdsEnabledForAdTrackingd' status from the bag. Error: %{public}@", (uint8_t *)&v10, 0x16u);

    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1000ACB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000ACBA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;

  v5 = a3;
  if (a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "BOOLValue");
  }
  else
  {
    v6 = APLogForCategory(34);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (void *)objc_opt_class(*(_QWORD *)(a1 + 48));
      v10 = 138412546;
      v11 = v8;
      v12 = 2112;
      v13 = v5;
      v9 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: Unable to get the 'useAMSMescal' key from the bag. Error: %@", (uint8_t *)&v10, 0x16u);

    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1000ACD58(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  id v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;

  v6 = a4;
  v7 = v6;
  if (!a2 || v6)
  {
    v9 = APLogForCategory(34);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (void *)objc_opt_class(*(_QWORD *)(a1 + 40));
      v13 = 138412546;
      v14 = v11;
      v15 = 2112;
      v16 = v7;
      v12 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@: Unable to get the 'useAMSMescal' key from the bag. Error: %@", (uint8_t *)&v13, 0x16u);

    }
    v8 = 1;
  }
  else
  {
    v8 = (uint64_t)objc_msgSend(a2, "BOOLValue");
  }
  (*(void (**)(_QWORD, uint64_t, void *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v8, v7);

}

void sub_1000ACF10(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;

  v6 = a4;
  v7 = v6;
  if (a2 && !v6)
    objc_msgSend(a2, "BOOLValue");
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000AD020(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;

  v6 = a4;
  v7 = v6;
  if (a2 && !v6)
    objc_msgSend(a2, "integerValue");
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000AD130(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;

  v6 = a4;
  v7 = v6;
  if (a2 && !v6)
    objc_msgSend(a2, "integerValue");
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000AD240(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  __n128 v7;
  id v8;

  v6 = a4;
  v7.n128_u64[0] = 0;
  v8 = v6;
  if (a2 && !v6)
    objc_msgSend(a2, "doubleValue", 0.0);
  (*(void (**)(__n128))(*(_QWORD *)(a1 + 32) + 16))(v7);

}

void sub_1000AD34C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;

  v6 = a4;
  v7 = v6;
  if (a2 && !v6)
    objc_msgSend(a2, "integerValue");
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000AD3AC(id a1)
{
  APDeviceInfo *v1;
  void *v2;

  v1 = objc_alloc_init(APDeviceInfo);
  v2 = (void *)qword_1002695C0;
  qword_1002695C0 = (uint64_t)v1;

}

void sub_1000AD504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AD67C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_alloc_init((Class)APUnfairRecursiveLock);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_1000AD88C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updateNetwork:", a2);
}

__CFString *_statusToString(uint64_t a1)
{
  char v1;
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!a1)
  {
    v2 = CFSTR("None ");
    return v2;
  }
  v1 = a1;
  if ((a1 & 2) == 0)
  {
    v2 = &stru_100219118;
    if ((a1 & 4) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(&stru_100219118, "stringByAppendingString:", CFSTR("Wifi ")));
  if ((v1 & 4) != 0)
  {
LABEL_7:
    v3 = objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("Cellular ")));

    v2 = (__CFString *)v3;
  }
LABEL_8:
  if ((v1 & 8) != 0)
  {
    v6 = objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("Expensive ")));

    v2 = (__CFString *)v6;
    if ((v1 & 0x10) == 0)
      return v2;
    goto LABEL_10;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_10:
    v4 = objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("Constrained")));

    v2 = (__CFString *)v4;
  }
  return v2;
}

void sub_1000ADE30(id a1)
{
  APTelephony *v1;
  void *v2;

  v1 = objc_alloc_init(APTelephony);
  v2 = (void *)qword_1002695D8;
  qword_1002695D8 = (uint64_t)v1;

}

id sub_1000AE070(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceLockStateChanged");
}

void sub_1000AE238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AE254(id *a1)
{
  id v2;
  id WeakRetained;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v2 = objc_alloc((Class)CoreTelephonyClient);
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "queue"));
  v5 = objc_msgSend(v2, "initWithQueue:", v4);
  v6 = objc_loadWeakRetained(a1);
  objc_msgSend(v6, "setCtClient:", v5);

  v8 = objc_loadWeakRetained(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ctClient"));
  objc_msgSend(v7, "setDelegate:", v8);

}

void sub_1000AE49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AE4B8(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateTelephonyProperties");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "setNetworkInfoUpdatingInProgress:", 0);

}

void sub_1000AE5E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000AE5F4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "maxDisplayBars"));
  objc_msgSend(v3, "doubleValue");
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bars"));
  objc_msgSend(v6, "doubleValue");
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lock"));
  objc_msgSend(v9, "lock");
  if (v5 <= 0.0)
  {
    v14 = APLogForCategory(47);
    v12 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Unable to retrieve CT signal strength because maxBars is 0.", (uint8_t *)&v15, 2u);
    }
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", vcvtad_u64_f64(v8 / v5 * 100.0)));
    objc_msgSend(WeakRetained, "setLatestCellularSignalStrength:", v10);

    v11 = APLogForCategory(47);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "latestCellularSignalStrength"));
      v15 = 138543362;
      v16 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Update latest signal strength to %{public}@.", (uint8_t *)&v15, 0xCu);

    }
  }

  objc_msgSend(v9, "unlock");
}

void sub_1000AEB74(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1000AEB88(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  id v25;
  id v26;
  uint8_t buf[4];
  id v28;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lock"));
  objc_msgSend(WeakRetained, "setTelephonyError:", 0);
  v3 = APLogForCategory(47);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Updating telephony info", buf, 2u);
  }

  objc_msgSend(v2, "lock");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "reachability"));
  if ((objc_msgSend(v5, "currentStatus") & 4) != 0)
  {

  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "reachability"));
    v7 = objc_msgSend(v6, "currentStatus");

    if ((v7 & 8) == 0)
    {
      v8 = APLogForCategory(47);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "APNetworkStatusWWAN is false. We are on WiFi", buf, 2u);
      }
      v10 = 0;
LABEL_24:

      v12 = v10;
      goto LABEL_25;
    }
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ctSubscriptionContext"));

  if (v11)
  {
    v12 = 0;
  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ctClient"));
    v26 = 0;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "getPreferredDataSubscriptionContextSync:", &v26));
    v12 = v26;
    objc_msgSend(WeakRetained, "setCtSubscriptionContext:", v14);

    if (v12)
    {
      v15 = APLogForCategory(47);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v28 = v12;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "There was a problem getting SIM data with error: %{public}@", buf, 0xCu);
      }

      objc_msgSend(WeakRetained, "setTelephonyError:", v12);
    }
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "telephonyError"));

  if (!v17)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ctClient"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ctSubscriptionContext"));
    v25 = v12;
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "getDataStatus:error:", v19, &v25));
    v10 = v25;

    objc_msgSend(WeakRetained, "setNetworkError:", v10);
    if (!v9 || v10)
    {
      v20 = APLogForCategory(30);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v28 = v10;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Unable to find cell network type due no data or error: %@", buf, 0xCu);
      }

    }
    objc_msgSend(WeakRetained, "setNetworkType:", objc_msgSend(WeakRetained, "dataIndicatorToConnectionType:", -[NSObject indicator](v9, "indicator")));
    v22 = APLogForCategory(47);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[APTelephony connectionTypeToString:](APTelephony, "connectionTypeToString:", objc_msgSend(WeakRetained, "networkType")));
      *(_DWORD *)buf = 138412290;
      v28 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Changing network type to %@", buf, 0xCu);

    }
    goto LABEL_24;
  }
LABEL_25:
  objc_msgSend(v2, "unlock");

}

id sub_1000AF228(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_suspendTelephonyAndReachability");
}

id sub_1000AF5FC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_1000AF9E4(id a1)
{
  APIDAccountProvider *v1;
  void *v2;

  v1 = objc_alloc_init(APIDAccountProvider);
  v2 = (void *)qword_1002695F0;
  qword_1002695F0 = (uint64_t)v1;

}

void sub_1000AFB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AFFC8(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = APLogForCategory(17);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = 138543362;
    v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Triggering a forceReconcile on adprivacyd. Keychain will be reloaded when notification is received that IDs in keychain have changed. Error: %{public}@.", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1000B00B4(id a1)
{
  void *v1;

  v1 = (void *)qword_100269600;
  qword_100269600 = (uint64_t)&off_10022A920;

}

BOOL APPBLogAdEventResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

void sub_1000B11D4(id a1)
{
  void *v1;

  v1 = (void *)qword_100269610;
  qword_100269610 = (uint64_t)&off_10022A948;

}

uint64_t APPBCachedAdReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  BOOL v12;
  uint64_t String;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        v4 = 0;
        v5 = 0;
        v6 = 0;
        while (1)
        {
          v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v8 = v7 + 1;
          if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
          v6 |= (unint64_t)(v9 & 0x7F) << v4;
          if ((v9 & 0x80) == 0)
            goto LABEL_11;
          v4 += 7;
          if (v5++ >= 9)
          {
            v6 = 0;
            v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v6 = 0;
LABEL_13:
        if (v11)
          v12 = 1;
        else
          v12 = (v6 & 7) == 4;
        if (!v12)
        {
          switch((v6 >> 3))
          {
            case 1u:
              String = PBReaderReadString(a2);
              v14 = objc_claimAutoreleasedReturnValue(String);
              v15 = *(void **)(a1 + 32);
              *(_QWORD *)(a1 + 32) = v14;

              goto LABEL_36;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v16 <= 0xFFFFFFFFFFFFFFF7 && v16 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v17 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                v17 = 0;
              }
              *(_QWORD *)(a1 + 8) = v17;
              goto LABEL_36;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v18 <= 0xFFFFFFFFFFFFFFFBLL
                && (v19 = v18 + 4, v18 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)))
              {
                v20 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
              }
              else
              {
                v20 = 0;
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
              }
              *(_DWORD *)(a1 + 24) = v20;
              goto LABEL_36;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v22 <= 0xFFFFFFFFFFFFFFF7
                && (v23 = v22 + 8, v22 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)))
              {
                v24 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
              }
              else
              {
                v24 = 0;
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
              }
              *(_QWORD *)(a1 + 16) = v24;
              goto LABEL_36;
            default:
              result = PBReaderSkipValueWithTag(a2);
              if (!(_DWORD)result)
                return result;
LABEL_36:
              if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000B24D0(id a1)
{
  void *v1;

  v1 = (void *)qword_100269620;
  qword_100269620 = (uint64_t)&off_10022A970;

}

uint64_t APPBConfigurationReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  uint64_t String;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = 24;
        goto LABEL_34;
      case 2u:
        v16 = 0;
        v17 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
            v18 |= (unint64_t)(v21 & 0x7F) << v16;
            if (v21 < 0)
            {
              v16 += 7;
              v10 = v17++ >= 9;
              if (v10)
              {
                LODWORD(v18) = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v18) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 32) = v18;
        continue;
      case 3u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        break;
      case 4u:
        v28 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v28);
        v15 = 16;
LABEL_34:
        v29 = *(void **)(a1 + v15);
        *(_QWORD *)(a1 + v15) = v14;

        continue;
      case 7u:
        *(_BYTE *)(a1 + 40) |= 1u;
        v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v32 = 0;
        }
        *(_QWORD *)(a1 + 8) = v32;
        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
      v24 |= (unint64_t)(v27 & 0x7F) << v22;
      if ((v27 & 0x80) == 0)
        goto LABEL_45;
      v22 += 7;
      v10 = v23++ >= 9;
      if (v10)
      {
        v24 = 0;
        goto LABEL_47;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v24 = 0;
LABEL_47:
    *(_BYTE *)(a1 + 36) = v24 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000B3B34(uint64_t a1)
{
  double v2;
  double v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  double Current;
  double v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  _BYTE v22[24];

  objc_msgSend(*(id *)(a1 + 32), "startTime");
  v3 = v2;
  v4 = APLogForCategory(0);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v3 <= 0.0)
  {
    if (v6)
    {
      v13 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)v22 = 134217984;
      *(_QWORD *)&v22[4] = v13;
      v10 = "%p: accumulating first item.";
      v11 = v5;
      v12 = 12;
      goto LABEL_6;
    }
  }
  else if (v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    Current = CFAbsoluteTimeGetCurrent();
    objc_msgSend(*(id *)(a1 + 32), "startTime");
    *(_DWORD *)v22 = 134218240;
    *(_QWORD *)&v22[4] = v7;
    *(_WORD *)&v22[12] = 2048;
    *(double *)&v22[14] = (Current - v9) * 1000.0;
    v10 = "%p: accumulating one item after %.0f mS";
    v11 = v5;
    v12 = 22;
LABEL_6:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v10, v22, v12);
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lock"));
  objc_msgSend(v14, "lock");

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "items"));
  v16 = objc_msgSend(v15, "count");

  if (!v16 && objc_msgSend(*(id *)(a1 + 32), "accumulationTime"))
    objc_msgSend(*(id *)(a1 + 32), "_startAccumulationSource");
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "items", *(_OWORD *)v22, *(_QWORD *)&v22[16]));
  objc_msgSend(v17, "addObject:", *(_QWORD *)(a1 + 40));

  if (objc_msgSend(*(id *)(a1 + 32), "inactivityTime"))
    objc_msgSend(*(id *)(a1 + 32), "_startInactivitySource");
  if (objc_msgSend(*(id *)(a1 + 32), "itemLimit"))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "items"));
    v19 = objc_msgSend(v18, "count");
    v20 = objc_msgSend(*(id *)(a1 + 32), "itemLimit");

    if (v19 == v20)
    {
      objc_msgSend(*(id *)(a1 + 32), "_stopInactivitySource");
      objc_msgSend(*(id *)(a1 + 32), "_stopAccumulationSource");
      objc_msgSend(*(id *)(a1 + 32), "_callAccumulationHandlerWithReason:", 1);
    }
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lock"));
  objc_msgSend(v21, "unlock");

}

void sub_1000B3DD4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000B3DF4(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1000B3D9CLL);
}

id sub_1000B40CC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_accumulationEventHandler");
}

id sub_1000B4368(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_inactivityEventHandler");
}

void sub_1000B4894(id a1)
{
  void *v1;

  v1 = (void *)qword_100269630;
  qword_100269630 = (uint64_t)&off_10022A998;

}

uint64_t APPBLogSysEventRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  APPBLogMetaData *v13;
  uint64_t result;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  int v22;
  uint64_t String;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = objc_alloc_init(APPBLogMetaData);
        objc_storeStrong((id *)(a1 + 40), v13);
        v32 = 0;
        v33 = 0;
        if (PBReaderPlaceMark(a2, &v32) && (APPBLogMetaDataReadFrom(v13, a2) & 1) != 0)
          goto LABEL_32;
        goto LABEL_57;
      case 2u:
        v15 = 0;
        v16 = 0;
        v17 = 0;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (2)
        {
          v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
            v17 |= (unint64_t)(v20 & 0x7F) << v15;
            if (v20 < 0)
            {
              v15 += 7;
              v10 = v16++ >= 9;
              if (v10)
              {
                LODWORD(v17) = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v17) = 0;
LABEL_47:
        v31 = 32;
        goto LABEL_52;
      case 3u:
        v13 = objc_alloc_init(APPBClickLocation);
        objc_storeStrong((id *)(a1 + 24), v13);
        v32 = 0;
        v33 = 0;
        if (PBReaderPlaceMark(a2, &v32) && APPBClickLocationReadFrom((uint64_t)v13, a2))
        {
LABEL_32:
          PBReaderRecallMark(a2, &v32);

LABEL_55:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_57:

        return 0;
      case 4u:
        *(_BYTE *)(a1 + 52) |= 1u;
        v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v22 = 0;
        }
        *(_DWORD *)(a1 + 8) = v22;
        goto LABEL_55;
      case 5u:
        String = PBReaderReadString(a2);
        v24 = objc_claimAutoreleasedReturnValue(String);
        v25 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v24;

        goto LABEL_55;
      case 6u:
        v26 = 0;
        v27 = 0;
        v17 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v29 = v28 + 1;
          if (v28 == -1 || v29 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
            v17 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              v10 = v27++ >= 9;
              if (v10)
              {
                LODWORD(v17) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v17) = 0;
LABEL_51:
        v31 = 48;
LABEL_52:
        *(_DWORD *)(a1 + v31) = v17;
        goto LABEL_55;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

uint64_t APPBAdJourneyStartRelayValueReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t result;
  uint64_t String;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 0u:
        v13 = 0;
        do
        {
          v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            goto LABEL_58;
          }
          v16 = *(char *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15;
          if ((v16 & 0x80000000) == 0)
            break;
        }
        while (v13++ <= 8);
        continue;
      case 1u:
        String = PBReaderReadString(a2);
        v20 = objc_claimAutoreleasedReturnValue(String);
        v21 = 24;
        goto LABEL_46;
      case 2u:
        objc_msgSend((id)a1, "clearOneofValuesForValue");
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        *(_DWORD *)(a1 + 32) = 1;
        *(_BYTE *)(a1 + 52) |= 8u;
        while (2)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v10 = v23++ >= 9;
              if (v10)
              {
                v24 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v24 = 0;
LABEL_51:
        *(_BYTE *)(a1 + 48) = v24 != 0;
        continue;
      case 3u:
        objc_msgSend((id)a1, "clearOneofValuesForValue");
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        *(_DWORD *)(a1 + 32) = 2;
        *(_BYTE *)(a1 + 52) |= 2u;
        break;
      case 4u:
        objc_msgSend((id)a1, "clearOneofValuesForValue");
        *(_BYTE *)(a1 + 52) |= 4u;
        *(_DWORD *)(a1 + 32) = 3;
        *(_BYTE *)(a1 + 52) |= 1u;
        v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v35 = 0;
        }
        *(_QWORD *)(a1 + 8) = v35;
        continue;
      case 5u:
        objc_msgSend((id)a1, "clearOneofValuesForValue");
        *(_BYTE *)(a1 + 52) |= 4u;
        *(_DWORD *)(a1 + 32) = 4;
        v36 = PBReaderReadString(a2);
        v20 = objc_claimAutoreleasedReturnValue(v36);
        v21 = 40;
LABEL_46:
        v37 = *(void **)(a1 + v21);
        *(_QWORD *)(a1 + v21) = v20;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v32 = v31 + 1;
      if (v31 == -1 || v32 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
      v30 |= (unint64_t)(v33 & 0x7F) << v28;
      if ((v33 & 0x80) == 0)
        goto LABEL_53;
      v28 += 7;
      v10 = v29++ >= 9;
      if (v10)
      {
        v30 = 0;
        goto LABEL_55;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v30 = 0;
LABEL_55:
    *(_QWORD *)(a1 + 16) = v30;
LABEL_58:
    ;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL APPBPolicyDataReadFrom(_QWORD *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  uint64_t v13;
  APPBNumericParameter *v14;
  _QWORD v16[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = (APPBNumericParameter *)a1[1];
        a1[1] = v13;
LABEL_23:

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v14 = objc_alloc_init(APPBNumericParameter);
    objc_msgSend(a1, "addPolicyValues:", v14);
    v16[0] = 0;
    v16[1] = 0;
    if (!PBReaderPlaceMark(a2, v16) || (APPBNumericParameterReadFrom((uint64_t)v14, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark(a2, v16);
    goto LABEL_23;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t APPBConfigurationResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  APPBConfiguration *v12;
  uint64_t result;
  uint64_t String;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = objc_alloc_init(APPBConfiguration);
        objc_msgSend((id)a1, "addTheConfiguration:", v12);
        v25[0] = 0;
        v25[1] = 0;
        if (PBReaderPlaceMark(a2, v25) && (APPBConfigurationReadFrom((uint64_t)v12, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v25);

          continue;
        }

        return 0;
      case 2u:
        String = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(String);
        v16 = 40;
        goto LABEL_33;
      case 3u:
        v17 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v17);
        v16 = 32;
        goto LABEL_33;
      case 4u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 48) |= 1u;
        break;
      case 5u:
        v23 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v23);
        v16 = 16;
LABEL_33:
        v24 = *(void **)(a1 + v16);
        *(_QWORD *)(a1 + v16) = v15;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v20 |= (unint64_t)(v22 & 0x7F) << v18;
      if ((v22 & 0x80) == 0)
        goto LABEL_35;
      v18 += 7;
      v9 = v19++ >= 9;
      if (v9)
      {
        LODWORD(v20) = 0;
        goto LABEL_37;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_35:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v20) = 0;
LABEL_37:
    *(_DWORD *)(a1 + 8) = v20;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000B95DC(id a1)
{
  void *v1;

  v1 = (void *)qword_100269640;
  qword_100269640 = (uint64_t)&off_10022A9C0;

}

BOOL APPBOptOutResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

uint64_t APPBShadowStyleReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char **v5;
  char **v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  char **v17;
  uint64_t v18;
  char **v19;
  APPBColor *v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v5 = &selRef_hasErrorType;
    v6 = &selRef_hasErrorType;
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        v7 = 0;
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v11 = v10 + 1;
          if (v10 == -1 || v11 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v12 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v10);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v11;
          v9 |= (unint64_t)(v12 & 0x7F) << v7;
          if ((v12 & 0x80) == 0)
            goto LABEL_12;
          v7 += 7;
          v13 = v8++ >= 9;
          if (v13)
          {
            v9 = 0;
            v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
        v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v9 = 0;
LABEL_14:
        v15 = v9 & 7;
        if (!v14 && v15 != 4)
        {
          switch((v9 >> 3))
          {
            case 1u:
              v17 = v6;
              v18 = v2;
              v19 = v5;
              v20 = objc_alloc_init(APPBColor);
              objc_storeStrong((id *)(a1 + 32), v20);
              v41 = 0;
              v42 = 0;
              if (PBReaderPlaceMark(a2, &v41) && (APPBColorReadFrom(v20, a2) & 1) != 0)
              {
                PBReaderRecallMark(a2, &v41);

                v5 = v19;
                v2 = v18;
                v6 = v17;
                goto LABEL_64;
              }

              return 0;
            case 2u:
              *(_BYTE *)(a1 + *((int *)v5 + 787)) |= 1u;
              v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                v22 = 0;
              }
              v40 = 40;
              goto LABEL_63;
            case 3u:
              *(_BYTE *)(a1 + *((int *)v5 + 787)) |= 2u;
              v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                v22 = 0;
              }
              v40 = 44;
LABEL_63:
              *(_DWORD *)(a1 + v40) = v22;
              goto LABEL_64;
            case 4u:
              if (v15 == 2)
              {
                v41 = 0;
                v42 = 0;
                result = PBReaderPlaceMark(a2, &v41);
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2
                                                                                    + OBJC_IVAR___PBDataReader__length)
                     && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                {
                  v25 = 0;
                  v26 = 0;
                  v27 = 0;
                  while (1)
                  {
                    v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                    v29 = v28 + 1;
                    if (v28 == -1 || v29 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                      break;
                    v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
                    *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
                    v27 |= (unint64_t)(v30 & 0x7F) << v25;
                    if ((v30 & 0x80) == 0)
                      goto LABEL_42;
                    v25 += 7;
                    v13 = v26++ >= 9;
                    if (v13)
                    {
                      v31 = 0;
                      goto LABEL_45;
                    }
                  }
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
                  if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                    v31 = 0;
                  else
                    v31 = v27;
LABEL_45:
                  PBRepeatedInt32Add(a1 + *((int *)v6 + 785), v31);
                }
                PBReaderRecallMark(a2, &v41);
              }
              else
              {
                v32 = 0;
                v33 = 0;
                v34 = 0;
                v35 = a1 + *((int *)v6 + 785);
                while (1)
                {
                  v36 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  v37 = v36 + 1;
                  if (v36 == -1 || v37 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                    break;
                  v38 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37;
                  v34 |= (unint64_t)(v38 & 0x7F) << v32;
                  if ((v38 & 0x80) == 0)
                    goto LABEL_55;
                  v32 += 7;
                  v13 = v33++ >= 9;
                  if (v13)
                  {
                    v39 = 0;
                    goto LABEL_58;
                  }
                }
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_55:
                if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                  v39 = 0;
                else
                  v39 = v34;
LABEL_58:
                PBRepeatedInt32Add(v35, v39);
              }
LABEL_64:
              if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              continue;
            default:
              if ((PBReaderSkipValueWithTag(a2) & 1) != 0)
                goto LABEL_64;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t APPBColorReadFrom(_DWORD *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t String;
  void *v19;
  uint64_t v20;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 1)
    {
      String = PBReaderReadString(a2);
      v19 = (void *)objc_claimAutoreleasedReturnValue(String);
      if (v19)
        objc_msgSend(a1, "addColors:", v19);
    }
    else
    {
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 == 3)
        {
          v13 = 0;
          v14 = 0;
          v15 = 0;
          while (1)
          {
            v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0)
              goto LABEL_35;
            v13 += 7;
            v9 = v14++ >= 9;
            if (v9)
            {
              LODWORD(v15) = 0;
              goto LABEL_37;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_35:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v15) = 0;
LABEL_37:
          a1[6] = v15;
        }
        else
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
        }
        continue;
      }
      v20 = PBReaderReadString(a2);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v20);
      if (v19)
        objc_msgSend(a1, "addDarkModeColors:", v19);
    }

  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t APPBAdLayoutDetailsReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t String;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  APPBElement *v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 116) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_56;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_58:
        v34 = 112;
        goto LABEL_63;
      case 2u:
        String = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(String);
        v20 = 64;
        goto LABEL_51;
      case 3u:
        v21 = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(v21);
        v20 = 16;
        goto LABEL_51;
      case 4u:
        v22 = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(v22);
        v20 = 32;
        goto LABEL_51;
      case 5u:
        v23 = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(v23);
        v20 = 8;
        goto LABEL_51;
      case 6u:
        v24 = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(v24);
        v20 = 80;
        goto LABEL_51;
      case 7u:
        v25 = objc_alloc_init(APPBElement);
        objc_msgSend((id)a1, "addElements:", v25);
        v35 = 0;
        v36 = 0;
        if (!PBReaderPlaceMark(a2, &v35) || (APPBElementReadFrom((uint64_t)v25, a2) & 1) == 0)
          goto LABEL_66;
        goto LABEL_54;
      case 8u:
        v25 = objc_alloc_init(APPBStyle);
        objc_storeStrong((id *)(a1 + 104), v25);
        v35 = 0;
        v36 = 0;
        if (!PBReaderPlaceMark(a2, &v35) || !APPBStyleReadFrom((id *)v25, a2))
          goto LABEL_66;
        goto LABEL_54;
      case 9u:
        v26 = 0;
        v27 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 116) |= 1u;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_62:
        v34 = 40;
LABEL_63:
        *(_DWORD *)(a1 + v34) = v14;
        goto LABEL_64;
      case 0xAu:
        v30 = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(v30);
        v20 = 88;
        goto LABEL_51;
      case 0xBu:
        v25 = objc_alloc_init(APPBButton);
        objc_storeStrong((id *)(a1 + 48), v25);
        v35 = 0;
        v36 = 0;
        if (!PBReaderPlaceMark(a2, &v35) || (APPBButtonReadFrom((uint64_t)v25, a2) & 1) == 0)
          goto LABEL_66;
        goto LABEL_54;
      case 0xCu:
        v31 = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(v31);
        v20 = 24;
        goto LABEL_51;
      case 0xDu:
        v32 = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(v32);
        v20 = 96;
LABEL_51:
        v33 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        goto LABEL_64;
      case 0xEu:
        v25 = objc_alloc_init(APPBLocalizedStringEntry);
        objc_msgSend((id)a1, "addLocalizedHeadlines:", v25);
        v35 = 0;
        v36 = 0;
        if (PBReaderPlaceMark(a2, &v35) && APPBLocalizedStringEntryReadFrom((uint64_t)v25, a2))
        {
LABEL_54:
          PBReaderRecallMark(a2, &v35);

LABEL_64:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_66:

        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_64;
    }
  }
}

void sub_1000BD628(id a1)
{
  void *v1;

  v1 = (void *)qword_100269650;
  qword_100269650 = (uint64_t)&off_10022A9E8;

}

uint64_t APPBAdSizeReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_56;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_58:
        v35 = 16;
        goto LABEL_71;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_62:
        v35 = 8;
        goto LABEL_71;
      case 3u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_66:
        v35 = 20;
        goto LABEL_71;
      case 4u:
        v26 = 0;
        v27 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_70:
        v35 = 12;
LABEL_71:
        *(_DWORD *)(a1 + v35) = v14;
        continue;
      case 5u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 28) |= 4u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v33 == -1 || v33 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
      v32 |= (unint64_t)(v34 & 0x7F) << v30;
      if ((v34 & 0x80) == 0)
        goto LABEL_73;
      v30 += 7;
      v9 = v31++ >= 9;
      if (v9)
      {
        v32 = 0;
        goto LABEL_75;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_73:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v32 = 0;
LABEL_75:
    *(_BYTE *)(a1 + 24) = v32 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000BE868(id a1)
{
  void *v1;

  v1 = (void *)qword_100269660;
  qword_100269660 = (uint64_t)&off_10022AA10;

}

BOOL APPBLogAggregateMetricsResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

void sub_1000BEB18(id a1)
{
  void *v1;

  v1 = (void *)qword_100269670;
  qword_100269670 = (uint64_t)&off_10022AA38;

}

BOOL APPBClickLocationReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v18 = &OBJC_IVAR___APPBClickLocation__x;
            goto LABEL_52;
          }
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            break;
          v12 += 7;
          v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            v18 = &OBJC_IVAR___APPBClickLocation__x;
            goto LABEL_55;
          }
        }
        v18 = &OBJC_IVAR___APPBClickLocation__x;
        goto LABEL_53;
      case 2u:
        v19 = 0;
        v20 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 24) |= 8u;
        while (2)
        {
          v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v18 = &OBJC_IVAR___APPBClickLocation__y;
            goto LABEL_52;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
          v14 |= (unint64_t)(v22 & 0x7F) << v19;
          if (v22 < 0)
          {
            v19 += 7;
            v17 = v20++ > 8;
            if (v17)
            {
              LODWORD(v14) = 0;
              v18 = &OBJC_IVAR___APPBClickLocation__y;
              goto LABEL_55;
            }
            continue;
          }
          break;
        }
        v18 = &OBJC_IVAR___APPBClickLocation__y;
        goto LABEL_53;
      case 3u:
        v23 = 0;
        v24 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (2)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v18 = &OBJC_IVAR___APPBClickLocation__w;
            goto LABEL_52;
          }
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
          v14 |= (unint64_t)(v26 & 0x7F) << v23;
          if (v26 < 0)
          {
            v23 += 7;
            v17 = v24++ > 8;
            if (v17)
            {
              LODWORD(v14) = 0;
              v18 = &OBJC_IVAR___APPBClickLocation__w;
              goto LABEL_55;
            }
            continue;
          }
          break;
        }
        v18 = &OBJC_IVAR___APPBClickLocation__w;
        goto LABEL_53;
      case 4u:
        v27 = 0;
        v28 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        break;
      default:
        if ((PBReaderSkipValueWithTag(a2) & 1) != 0)
          continue;
        return 0;
    }
    while (1)
    {
      v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v29 == -1 || v29 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
      v14 |= (unint64_t)(v30 & 0x7F) << v27;
      if ((v30 & 0x80) == 0)
      {
        v18 = &OBJC_IVAR___APPBClickLocation__h;
        goto LABEL_53;
      }
      v27 += 7;
      v17 = v28++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        v18 = &OBJC_IVAR___APPBClickLocation__h;
        goto LABEL_55;
      }
    }
    v18 = &OBJC_IVAR___APPBClickLocation__h;
LABEL_52:
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_55:
    *(_DWORD *)(a1 + *v18) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000BF7FC(id a1)
{
  void *v1;

  v1 = (void *)qword_100269680;
  qword_100269680 = (uint64_t)&off_10022AA60;

}

BOOL APPBGeofenceReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  int v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v8 = v7 + 1;
        if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
        v6 |= (unint64_t)(v9 & 0x7F) << v4;
        if ((v9 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v11 = OBJC_IVAR___PBDataReader__error;
          v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v11 = OBJC_IVAR___PBDataReader__error;
      v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v12 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v14 = v6 >> 3;
      if ((v6 >> 3) == 3)
      {
        v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v16 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v16 = 0;
        }
        v19 = &OBJC_IVAR___APPBGeofence__radius;
        goto LABEL_37;
      }
      if ((_DWORD)v14 == 2)
        break;
      if ((_DWORD)v14 == 1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 <= 0xFFFFFFFFFFFFFFF7 && v15 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v16 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v16 = 0;
        }
        v19 = &OBJC_IVAR___APPBGeofence__latitude;
LABEL_37:
        *(_QWORD *)(a1 + *v19) = v16;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_38:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
    if (v18 <= 0xFFFFFFFFFFFFFFF7 && v18 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 8;
    }
    else
    {
      *(_BYTE *)(a2 + v11) = 1;
      v16 = 0;
    }
    v19 = &OBJC_IVAR___APPBGeofence__longitude;
    goto LABEL_37;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

const __CFString *adPositionToString(unint64_t a1)
{
  if (a1 > 7)
    return CFSTR("UNKNOWN");
  else
    return *(&off_100214328 + a1);
}

float sub_1000BFFC0(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  float v6;
  float v7;

  if (!a1)
    return 0.0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "rateLimits"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v4));

  if (v5)
  {
    objc_msgSend(v5, "floatValue");
    v7 = v6;
  }
  else
  {
    v7 = 1.0;
  }

  return v7;
}

void sub_1000C09C8(id a1)
{
  void *v1;

  v1 = (void *)qword_100269690;
  qword_100269690 = (uint64_t)&off_10022AA88;

}

uint64_t APPBUserTransparencyRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  uint64_t Data;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t String;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  uint64_t v32;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        Data = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(Data);
        v14 = 16;
        goto LABEL_25;
      case 2u:
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 40;
        goto LABEL_25;
      case 3u:
        v17 = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(v17);
        v14 = 24;
        goto LABEL_25;
      case 4u:
        v18 = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(v18);
        v14 = 8;
        goto LABEL_25;
      case 5u:
        v19 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v19);
        v14 = 32;
LABEL_25:
        v20 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        continue;
      case 6u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              v9 = v22++ >= 9;
              if (v9)
              {
                v23 = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v23 = 0;
LABEL_43:
        v31 = v23 != 0;
        v32 = 49;
        goto LABEL_48;
      case 7u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 52) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v29 == -1 || v29 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
      v28 |= (unint64_t)(v30 & 0x7F) << v26;
      if ((v30 & 0x80) == 0)
        goto LABEL_45;
      v26 += 7;
      v9 = v27++ >= 9;
      if (v9)
      {
        v28 = 0;
        goto LABEL_47;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v28 = 0;
LABEL_47:
    v31 = v28 != 0;
    v32 = 48;
LABEL_48:
    *(_BYTE *)(a1 + v32) = v31;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000C18B4(id a1)
{
  void *v1;

  v1 = (void *)qword_1002696A0;
  qword_1002696A0 = (uint64_t)&off_10022AAB0;

}

BOOL APPBConfigurationRequestReadFrom(_QWORD *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  APPBConfiguration *v12;
  uint64_t Data;
  uint64_t v14;
  _QWORD v16[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        v12 = objc_alloc_init(APPBConfiguration);
        objc_msgSend(a1, "addCurrentConfiguration:", v12);
        v16[0] = 0;
        v16[1] = 0;
        if (!PBReaderPlaceMark(a2, v16) || (APPBConfigurationReadFrom((uint64_t)v12, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark(a2, v16);
        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    Data = PBReaderReadData(a2);
    v14 = objc_claimAutoreleasedReturnValue(Data);
    v12 = (APPBConfiguration *)a1[2];
    a1[2] = v14;
LABEL_23:

    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000C23B0(id a1)
{
  void *v1;

  v1 = (void *)qword_1002696B0;
  qword_1002696B0 = (uint64_t)&off_10022AAD8;

}

uint64_t APPBMescalSignSAPSetupResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t Data;
  uint64_t v13;
  void *v14;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      Data = PBReaderReadData(a2);
      v13 = objc_claimAutoreleasedReturnValue(Data);
      v14 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v13;

    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000C2804(id a1)
{
  void *v1;

  v1 = (void *)qword_1002696C0;
  qword_1002696C0 = (uint64_t)&off_10022AB00;

}

uint64_t APPBAdDataUpdateReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  uint64_t String;
  uint64_t v14;
  void *v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v14;

        continue;
      case 2u:
        *(_BYTE *)(a1 + 40) |= 1u;
        v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v18 = 0;
        }
        *(_QWORD *)(a1 + 8) = v18;
        continue;
      case 3u:
        *(_BYTE *)(a1 + 40) |= 2u;
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 <= 0xFFFFFFFFFFFFFFF7
          && (v20 = v19 + 8, v19 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        }
        else
        {
          v21 = 0;
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        *(_QWORD *)(a1 + 16) = v21;
        continue;
      case 4u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
      v24 |= (unint64_t)(v27 & 0x7F) << v22;
      if ((v27 & 0x80) == 0)
        goto LABEL_35;
      v22 += 7;
      v10 = v23++ >= 9;
      if (v10)
      {
        LODWORD(v24) = 0;
        goto LABEL_37;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_35:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v24) = 0;
LABEL_37:
    *(_DWORD *)(a1 + 24) = v24;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000C36E0(id a1)
{
  void *v1;

  v1 = (void *)qword_1002696D0;
  qword_1002696D0 = (uint64_t)&off_10022AB28;

}

uint64_t APPBAssetMetricReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t String;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v13 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 32) |= 1u;
      v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 8;
      }
      else
      {
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        v20 = 0;
      }
      *(_QWORD *)(a1 + 8) = v20;
    }
    else
    {
      if ((_DWORD)v13 == 2)
      {
        String = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(String);
        v16 = 16;
      }
      else
      {
        if ((_DWORD)v13 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v14 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v14);
        v16 = 24;
      }
      v18 = *(void **)(a1 + v16);
      *(_QWORD *)(a1 + v16) = v15;

    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000C3FD0(id a1)
{
  void *v1;

  v1 = (void *)qword_1002696E0;
  qword_1002696E0 = (uint64_t)&off_10022AB50;

}

uint64_t APPBMediaFilesReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  unint64_t v13;
  uint64_t v14;
  APPBMediaAsset *v15;
  uint64_t result;
  _QWORD v17[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 2)
    {
      v15 = objc_alloc_init(APPBMediaAsset);
      objc_msgSend((id)a1, "addMediaAssets:", v15);
      v17[0] = 0;
      v17[1] = 0;
      if (!PBReaderPlaceMark(a2, v17) || (APPBMediaAssetReadFrom((uint64_t)v15, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark(a2, v17);

    }
    else if ((v6 >> 3) == 1)
    {
      *(_BYTE *)(a1 + 24) |= 1u;
      v13 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v13 <= 0xFFFFFFFFFFFFFFF7 && v13 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
      }
      else
      {
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        v14 = 0;
      }
      *(_QWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000C53A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C5CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C5CEC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  double v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint8_t buf[4];
  id v16;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v5, "timeIntervalSince1970");
  objc_msgSend(WeakRetained, "setResponseTime:", v6 - *(double *)(a1 + 48));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "responseError"));
  if (v7)
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "responseError"));
LABEL_3:
    v9 = (id)v8;
    v10 = 0;
    goto LABEL_4;
  }
  if ((uint64_t)objc_msgSend(v3, "responseStatusCode") >= 400 && (uint64_t)objc_msgSend(v3, "responseStatusCode") <= 599)
  {
    v8 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.ap.HTTPError"), objc_msgSend(v3, "responseStatusCode"), 0));
    goto LABEL_3;
  }
  if (objc_msgSend(v3, "responseStatusCode") == (id)200)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "responseBody"));
    v14 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_deserializeResponse:error:", v11, &v14));
    v9 = v14;

  }
  else
  {
    v12 = APLogForCategory(21);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v16 = objc_msgSend(v3, "responseStatusCode");
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unexpected server response with status code: %lu", buf, 0xCu);
    }

    v10 = 0;
    v9 = 0;
  }
LABEL_4:
  objc_msgSend(WeakRetained, "_logResponse:responseProtobuf:requestProtobufClass:error:", v3, v10, *(_QWORD *)(a1 + 56), v9);
  objc_msgSend(WeakRetained, "responseReceived:responseProtobuf:error:", v3, v10, v9);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000C60B8(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.ap.legacyinterface.delayed_request_queue", 0);
  v2 = (void *)qword_1002696F0;
  qword_1002696F0 = (uint64_t)v1;

}

id sub_1000C60E4(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  void *v6;
  void *v8;
  int v9;
  void *v10;

  v2 = objc_msgSend(*(id *)(a1 + 32), "cancelled");
  v3 = APLogForCategory(21);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if ((v2 & 1) != 0)
  {
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "requestIdentifier"));
      v9 = 138543362;
      v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "NOT sending delayed request with ID %{public}@, it was previously cancelled.", (uint8_t *)&v9, 0xCu);

    }
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    if (v5)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "requestIdentifier"));
      v9 = 138543362;
      v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending delayed request with ID %{public}@", (uint8_t *)&v9, 0xCu);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    return objc_msgSend(*(id *)(a1 + 32), "makeRequest:", *(_QWORD *)(a1 + 48));
  }
}

void sub_1000C64E4(id a1)
{
  APServerConfiguration *v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v1 = objc_alloc_init(APServerConfiguration);
  v2 = (void *)qword_100269700;
  qword_100269700 = (uint64_t)v1;

  v3 = APLogForCategory(21);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Initialized APServerConfiguration", v5, 2u);
  }

}

void sub_1000C67F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000C680C(id *a1)
{
  void *v2;
  id WeakRetained;
  id v4;
  id v5;

  v2 = objc_autoreleasePoolPush();
  a1 += 5;
  WeakRetained = objc_loadWeakRetained(a1);
  objc_msgSend(WeakRetained, "_moveAllPendingRequestsToFailed");

  v4 = objc_loadWeakRetained(a1);
  objc_msgSend(v4, "_loadFailedRequestsCache");

  v5 = objc_loadWeakRetained(a1);
  objc_msgSend(v5, "_retryFailedIfAvailable");

  objc_autoreleasePoolPop(v2);
}

void sub_1000C6A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C6A38(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_registerMetricRequest:", *(_QWORD *)(a1 + 32));

  objc_autoreleasePoolPop(v2);
}

void sub_1000C6C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C6C44(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_completeServerRequestId:serverFailureCount:result:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

  objc_autoreleasePoolPop(v2);
}

void sub_1000C71BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C71D4(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v8;

  v8 = a2;
  if (!objc_msgSend(a3, "longLongValue"))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }

}

void sub_1000C7938(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  id v5;
  void *v6;
  id v7;

  if (a3 < 0xA)
  {
    v5 = a2;
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", 0));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "failedRequests"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, v5);

  }
  else
  {
    *a4 = 1;
  }
}

void sub_1000C7F0C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000C7F34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v7 = sub_100103434(*(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
  objc_msgSend(WeakRetained, "completeServerRequestId:serverFailureCount:result:", v9, *(_QWORD *)(a1 + 72), objc_msgSend(*(id *)(a1 + 40), "responseResult"));

  v10 = *(_QWORD *)(a1 + 56);
  if (v10)
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v11, v5);

}

void sub_1000C9738(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[3];
  _QWORD v8[3];

  v7[0] = CFSTR("hasIAdID");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "hasIAdID")));
  v8[0] = v2;
  v7[1] = CFSTR("hasContentiAdID");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "hasContentiAdID")));
  v8[1] = v3;
  v7[2] = CFSTR("hasAnonymousDemandiAdID");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "hasAnonymousDemandiAdID")));
  v8[2] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 3));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
  CreateDiagnosticReport(v6, v5, CFSTR("ASE"));

}

uint64_t APPBAssetReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  uint64_t String;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  APPBAssetInfo *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  _QWORD v29[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 32;
        goto LABEL_39;
      case 2u:
        v16 = 0;
        v17 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 48) |= 2u;
        while (2)
        {
          v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v18 |= (unint64_t)(v20 & 0x7F) << v16;
            if (v20 < 0)
            {
              v16 += 7;
              v9 = v17++ >= 9;
              if (v9)
              {
                LODWORD(v18) = 0;
                goto LABEL_43;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v18) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 24) = v18;
        goto LABEL_48;
      case 3u:
        v21 = objc_alloc_init(APPBAssetInfo);
        objc_msgSend((id)a1, "addAssetInfo:", v21);
        v29[0] = 0;
        v29[1] = 0;
        if (PBReaderPlaceMark(a2, v29) && (APPBAssetInfoReadFrom((uint64_t)v21, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v29);

LABEL_48:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }

        return 0;
      case 4u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 48) |= 1u;
        while (2)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                v24 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v24 = 0;
LABEL_47:
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_48;
      case 5u:
        v27 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v27);
        v14 = 40;
LABEL_39:
        v28 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        goto LABEL_48;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_48;
    }
  }
}

int64_t sub_1000CAE60(id a1, APContentDataInternal *a2, APContentDataInternal *a3)
{
  APContentDataInternal *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[APContentDataInternal adOriginalRequesterId](a2, "adOriginalRequesterId"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[APContentDataInternal adOriginalRequesterId](v4, "adOriginalRequesterId"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

void sub_1000CB1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CB1D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  os_signpost_id_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint32_t v32;
  void *v33;
  int v34;
  id v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
  {
    v28 = APLogForCategory(21);
    v9 = objc_claimAutoreleasedReturnValue(v28);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    LOWORD(v34) = 0;
    v29 = "AdRequester has been freed.";
    v30 = v9;
    v31 = OS_LOG_TYPE_ERROR;
    v32 = 2;
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v30, v31, v29, (uint8_t *)&v34, v32);
    goto LABEL_24;
  }
  v7 = objc_msgSend(v5, "count");
  v8 = APLogForCategory(21);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
  if (!v7)
  {
    if (!v10)
      goto LABEL_24;
    v34 = 134217984;
    v35 = a3;
    v29 = "Ad request accumulator fired with reason %ld, but did not accumulate any requests.";
    v30 = v9;
    v31 = OS_LOG_TYPE_INFO;
    v32 = 12;
    goto LABEL_20;
  }
  if (v10)
  {
    v11 = objc_msgSend(v5, "count");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 0));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "bundleID"));
    v34 = 134218498;
    v35 = v11;
    v36 = 2114;
    v37 = v12;
    v38 = 2114;
    v39 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Ad request accumulator for %ld ads at %{public}@ for bundleID %{public}@.", (uint8_t *)&v34, 0x20u);

  }
  objc_msgSend(WeakRetained, "requestAds:", v5);
  v15 = APPerfLogForCategory(0);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = (char *)objc_msgSend(WeakRetained, "signpostID");
  if ((unint64_t)(v17 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v18 = (os_signpost_id_t)v17;
    if (os_signpost_enabled(v16))
    {
      LOWORD(v34) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_END, v18, "AccumulationInterval", " enableTelemetry=YES ", (uint8_t *)&v34, 2u);
    }
  }

  v9 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v5, "count")));
  -[NSObject setObject:forKey:](v9, "setObject:forKey:", v19, CFSTR("batchSize"));

  if (objc_msgSend(v5, "count") == (id)1)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 0));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "context"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "supplementalContext"));

    if (v22)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 0));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "context"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "supplementalContext"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", APSupplementalContextPlacementKey));

      if (v26 && objc_msgSend(v26, "length"))
      {
        if ((objc_msgSend(v26, "isEqualToString:", APSupplementalContextInArticleKey) & 1) != 0
          || (objc_msgSend(v26, "isEqualToString:", APSupplementalContextVideoInArticleKey) & 1) != 0
          || (objc_msgSend(v26, "isEqualToString:", APSupplementalContextNativeInArticleKey) & 1) != 0)
        {
          v27 = 1;
        }
        else if (objc_msgSend(v26, "isEqualToString:", APSupplementalContextBetweenArticleKey))
        {
          v27 = 2;
        }
        else
        {
          v27 = 0;
        }
      }
      else
      {
        v27 = 0;
      }
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v27));
      -[NSObject setObject:forKey:](v9, "setObject:forKey:", v33, CFSTR("placement"));

    }
  }
  AnalyticsSendEvent(CFSTR("com.apple.adplatforms.adbatching.batchsize"), v9);
LABEL_24:

}

CFDataRef encryptStringForAdServing(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  CFDataRef v6;
  uint64_t v7;
  NSObject *v8;
  CFIndex Code;
  CFStringRef v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  CFErrorRef error;
  uint8_t buf[4];
  CFIndex v17;
  __int16 v18;
  CFStringRef v19;

  v3 = a1;
  v4 = a2;
  if (qword_100269718)
  {
    if (v3)
      goto LABEL_3;
LABEL_9:
    v11 = APLogForCategory(21);
    v5 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v17 = (CFIndex)v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Cannot encrypt a nil string of key: %{public}@", buf, 0xCu);
    }
    goto LABEL_14;
  }
  qword_100269718 = SecKeyCreateRSAPublicKey(kCFAllocatorDefault, &unk_1001B7EA8, 270, 1);
  if (!v3)
    goto LABEL_9;
LABEL_3:
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataUsingEncoding:", 4));
  if (!v5)
  {
    v12 = APLogForCategory(21);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v17 = (CFIndex)v4;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to Base64 for %{public}@", buf, 0xCu);
    }

LABEL_14:
    v6 = 0;
    goto LABEL_15;
  }
  error = 0;
  v6 = SecKeyCreateEncryptedData((SecKeyRef)qword_100269718, kSecKeyAlgorithmRSAEncryptionPKCS1, (CFDataRef)v5, &error);
  if (error)
  {
    v7 = APLogForCategory(21);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      Code = CFErrorGetCode(error);
      v10 = CFErrorCopyDescription(error);
      *(_DWORD *)buf = 134218242;
      v17 = Code;
      v18 = 2114;
      v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error %ld encrypting string: %{public}@.", buf, 0x16u);
    }

  }
LABEL_15:

  return v6;
}

void sub_1000CBD8C(id a1)
{
  APEncryptedIDProvider *v1;
  void *v2;

  v1 = objc_alloc_init(APEncryptedIDProvider);
  v2 = (void *)qword_100269720;
  qword_100269720 = (uint64_t)v1;

}

uint64_t APPBBorderStyleReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  unint64_t v13;
  APPBColor *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD v20[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v8 = v7 + 1;
        if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
        v6 |= (unint64_t)(v9 & 0x7F) << v4;
        if ((v9 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v11 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v13 = v6 >> 3;
      if ((v6 >> 3) == 3)
        break;
      if ((_DWORD)v13 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFFBLL && v17 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v16 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v16 = 0;
        }
        v19 = 20;
LABEL_35:
        *(_DWORD *)(a1 + v19) = v16;
        goto LABEL_36;
      }
      if ((_DWORD)v13 == 1)
      {
        v14 = objc_alloc_init(APPBColor);
        objc_storeStrong((id *)(a1 + 8), v14);
        v20[0] = 0;
        v20[1] = 0;
        if (!PBReaderPlaceMark(a2, v20) || (APPBColorReadFrom(v14, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark(a2, v20);

      }
      else
      {
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
      }
LABEL_36:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    *(_BYTE *)(a1 + 24) |= 1u;
    v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
    if (v15 <= 0xFFFFFFFFFFFFFFFBLL && v15 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      v16 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 4;
    }
    else
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
      v16 = 0;
    }
    v19 = 16;
    goto LABEL_35;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t APPBElementReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  APPBAsset *v18;
  uint64_t String;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_41;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 48) = v14;
        goto LABEL_44;
      case 2u:
        v18 = objc_alloc_init(APPBAsset);
        objc_storeStrong((id *)(a1 + 24), v18);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark(a2, &v25) || (APPBAssetReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_46;
        goto LABEL_39;
      case 3u:
        String = PBReaderReadString(a2);
        v20 = objc_claimAutoreleasedReturnValue(String);
        v21 = 32;
        goto LABEL_36;
      case 4u:
        v22 = PBReaderReadString(a2);
        v20 = objc_claimAutoreleasedReturnValue(v22);
        v21 = 8;
        goto LABEL_36;
      case 5u:
        v18 = objc_alloc_init(APPBButton);
        objc_storeStrong((id *)(a1 + 40), v18);
        v25 = 0;
        v26 = 0;
        if (!PBReaderPlaceMark(a2, &v25) || (APPBButtonReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_46;
        goto LABEL_39;
      case 6u:
        v23 = PBReaderReadString(a2);
        v20 = objc_claimAutoreleasedReturnValue(v23);
        v21 = 16;
LABEL_36:
        v24 = *(void **)(a1 + v21);
        *(_QWORD *)(a1 + v21) = v20;

        goto LABEL_44;
      case 7u:
        v18 = objc_alloc_init(APPBStyle);
        objc_storeStrong((id *)(a1 + 56), v18);
        v25 = 0;
        v26 = 0;
        if (PBReaderPlaceMark(a2, &v25) && APPBStyleReadFrom((id *)v18, a2))
        {
LABEL_39:
          PBReaderRecallMark(a2, &v25);

LABEL_44:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_46:

        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

uint64_t APPBMediaAssetReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  uint64_t String;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = 72;
        goto LABEL_81;
      case 2u:
        v17 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v17);
        v15 = 56;
        goto LABEL_81;
      case 3u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_WORD *)(a1 + 88) |= 0x10u;
        while (2)
        {
          v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v22 = v21 + 1;
          if (v21 == -1 || v22 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              v10 = v19++ >= 9;
              if (v10)
              {
                LODWORD(v20) = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v20) = 0;
LABEL_85:
        v62 = 44;
        goto LABEL_102;
      case 4u:
        v24 = 0;
        v25 = 0;
        v20 = 0;
        *(_WORD *)(a1 + 88) |= 0x40u;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v20 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              v10 = v25++ >= 9;
              if (v10)
              {
                LODWORD(v20) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v20) = 0;
LABEL_89:
        v62 = 64;
        goto LABEL_102;
      case 5u:
        v29 = 0;
        v30 = 0;
        v20 = 0;
        *(_WORD *)(a1 + 88) |= 8u;
        while (2)
        {
          v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
            v20 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              v10 = v30++ >= 9;
              if (v10)
              {
                LODWORD(v20) = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v20) = 0;
LABEL_93:
        v62 = 40;
        goto LABEL_102;
      case 6u:
        v34 = 0;
        v35 = 0;
        v20 = 0;
        *(_WORD *)(a1 + 88) |= 0x80u;
        while (2)
        {
          v36 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37;
            v20 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              v10 = v35++ >= 9;
              if (v10)
              {
                LODWORD(v20) = 0;
                goto LABEL_97;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v20) = 0;
LABEL_97:
        v62 = 80;
        goto LABEL_102;
      case 7u:
        v39 = 0;
        v40 = 0;
        v20 = 0;
        *(_WORD *)(a1 + 88) |= 0x20u;
        while (2)
        {
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42;
            v20 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              v10 = v40++ >= 9;
              if (v10)
              {
                LODWORD(v20) = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v20) = 0;
LABEL_101:
        v62 = 48;
LABEL_102:
        *(_DWORD *)(a1 + v62) = v20;
        continue;
      case 8u:
        *(_WORD *)(a1 + 88) |= 1u;
        v44 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v45 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v45 = 0;
        }
        v65 = 8;
        goto LABEL_118;
      case 9u:
        *(_WORD *)(a1 + 88) |= 4u;
        v46 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v45 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v45 = 0;
        }
        v65 = 24;
        goto LABEL_118;
      case 0xAu:
        *(_WORD *)(a1 + 88) |= 2u;
        v47 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v45 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v45 = 0;
        }
        v65 = 16;
LABEL_118:
        *(_QWORD *)(a1 + v65) = v45;
        continue;
      case 0xBu:
        v48 = 0;
        v49 = 0;
        v50 = 0;
        *(_WORD *)(a1 + 88) |= 0x200u;
        while (2)
        {
          v51 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52;
            v50 |= (unint64_t)(v53 & 0x7F) << v48;
            if (v53 < 0)
            {
              v48 += 7;
              v10 = v49++ >= 9;
              if (v10)
              {
                v50 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v50 = 0;
LABEL_106:
        v63 = v50 != 0;
        v64 = 85;
        goto LABEL_111;
      case 0xCu:
        v54 = 0;
        v55 = 0;
        v56 = 0;
        *(_WORD *)(a1 + 88) |= 0x100u;
        break;
      case 0xDu:
        v60 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v60);
        v15 = 32;
LABEL_81:
        v61 = *(void **)(a1 + v15);
        *(_QWORD *)(a1 + v15) = v14;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v57 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v58 = v57 + 1;
      if (v57 == -1 || v58 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v59 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58;
      v56 |= (unint64_t)(v59 & 0x7F) << v54;
      if ((v59 & 0x80) == 0)
        goto LABEL_108;
      v54 += 7;
      v10 = v55++ >= 9;
      if (v10)
      {
        v56 = 0;
        goto LABEL_110;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_108:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v56 = 0;
LABEL_110:
    v63 = v56 != 0;
    v64 = 84;
LABEL_111:
    *(_BYTE *)(a1 + v64) = v63;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000CF9B0(id a1)
{
  void *v1;

  v1 = (void *)qword_100269730;
  qword_100269730 = (uint64_t)&off_10022AB78;

}

uint64_t APPBAttributionResponseReadFrom(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  APPBKeyedParameterList *v12;
  uint64_t result;
  _QWORD v14[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = objc_alloc_init(APPBKeyedParameterList);
      objc_msgSend(a1, "addVersionedAttributionDetails:", v12);
      v14[0] = 0;
      v14[1] = 0;
      if (!PBReaderPlaceMark(a2, v14) || !APPBKeyedParameterListReadFrom(v12, a2))
      {

        return 0;
      }
      PBReaderRecallMark(a2, v14);

    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D02D0(id a1)
{
  APPromotedContentLegacyInterface *v1;
  void *v2;

  v1 = objc_alloc_init(APPromotedContentLegacyInterface);
  v2 = (void *)qword_100269740;
  qword_100269740 = (uint64_t)v1;

}

void sub_1000D088C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;

  v2 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_msgSend(objc_alloc((Class)APUnfairLock), "initWithOptions:", 1);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 48);
  *(_QWORD *)(v6 + 48) = v5;

}

void sub_1000D0968(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D097C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = *(void **)(a1 + 40);
  v6 = a3;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a2));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1000D1138(uint64_t a1)
{
  uint64_t v2;
  APContentDataInternal *v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v2 = objc_msgSend(*(id *)(a1 + 32), "unsignedIntValue");
  v3 = [APContentDataInternal alloc];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  objc_msgSend(*(id *)(a1 + 40), "maxSize");
  v5 = -[APContentDataInternal initRateLimitedForContextId:containerSize:placementType:](v3, "initRateLimitedForContextId:containerSize:placementType:", v4, v2);

  v6 = APLogForCategory(21);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "content"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v10 = *(_QWORD *)(a1 + 48);
    v11 = 138543874;
    v12 = v9;
    v13 = 2160;
    v14 = 1752392040;
    v15 = 2112;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Returning rate limited adOpID: %{public}@. Token: %{mask.hash}@", (uint8_t *)&v11, 0x20u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000D135C(id a1)
{
  void *v1;

  v1 = (void *)qword_100269758;
  qword_100269758 = (uint64_t)&off_10022ABA0;

}

uint64_t APPBLogVideoAnalyticsEventRequestReadFrom(uint64_t a1, uint64_t a2)
{
  __objc2_class **p_superclass;
  char **v5;
  char **v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  char **v16;
  char **v17;
  __objc2_class **v18;
  _BYTE *v19;
  uint64_t result;
  uint64_t String;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    p_superclass = APLegacyMetricRetryManager.superclass;
    v5 = &selRef_hasErrorType;
    v6 = &selRef_hasErrorType;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        break;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v12 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v10);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v11;
        v9 |= (unint64_t)(v12 & 0x7F) << v7;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        v13 = v8++ >= 9;
        if (v13)
        {
          v9 = 0;
          v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v9 = 0;
LABEL_14:
      if (v14 || (v9 & 7) == 4)
        break;
      switch((v9 >> 3))
      {
        case 1u:
          v16 = v6;
          v17 = v5;
          v18 = p_superclass;
          v19 = objc_alloc_init((Class)(p_superclass + 139));
          objc_storeStrong((id *)(a1 + 56), v19);
          v45[0] = 0;
          v45[1] = 0;
          if (PBReaderPlaceMark(a2, v45) && (APPBLogMetaDataReadFrom(v19, a2) & 1) != 0)
          {
            PBReaderRecallMark(a2, v45);

            p_superclass = v18;
            v5 = v17;
            v6 = v16;
            continue;
          }

          return 0;
        case 2u:
          String = PBReaderReadString(a2);
          v22 = objc_claimAutoreleasedReturnValue(String);
          v23 = *((int *)v5 + 936);
          v24 = *(void **)(a1 + v23);
          *(_QWORD *)(a1 + v23) = v22;

          continue;
        case 3u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + *((int *)v6 + 937)) |= 0x20u;
          while (2)
          {
            v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v13 = v26++ >= 9;
                if (v13)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_57;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v27) = 0;
LABEL_57:
          v43 = 64;
          goto LABEL_62;
        case 4u:
          *(_BYTE *)(a1 + *((int *)v6 + 937)) |= 1u;
          v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v32 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v32 = 0;
          }
          v44 = 8;
          goto LABEL_71;
        case 5u:
          *(_BYTE *)(a1 + *((int *)v6 + 937)) |= 4u;
          v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v32 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v32 = 0;
          }
          v44 = 24;
          goto LABEL_71;
        case 6u:
          *(_BYTE *)(a1 + *((int *)v6 + 937)) |= 8u;
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v32 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v32 = 0;
          }
          v44 = 32;
          goto LABEL_71;
        case 7u:
          *(_BYTE *)(a1 + *((int *)v6 + 937)) |= 2u;
          v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v32 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v32 = 0;
          }
          v44 = 16;
LABEL_71:
          *(_QWORD *)(a1 + v44) = v32;
          continue;
        case 8u:
          v36 = 0;
          v37 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + *((int *)v6 + 937)) |= 0x10u;
          break;
        case 9u:
          *(_BYTE *)(a1 + *((int *)v6 + 937)) |= 0x40u;
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 <= 0xFFFFFFFFFFFFFFFBLL && v41 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v42 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v42 = 0;
          }
          *(_DWORD *)(a1 + 68) = v42;
          continue;
        default:
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v38 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v39 = v38 + 1;
        if (v38 == -1 || v39 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v40 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39;
        v27 |= (unint64_t)(v40 & 0x7F) << v36;
        if ((v40 & 0x80) == 0)
          goto LABEL_59;
        v36 += 7;
        v13 = v37++ >= 9;
        if (v13)
        {
          LODWORD(v27) = 0;
          goto LABEL_61;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v27) = 0;
LABEL_61:
      v43 = 48;
LABEL_62:
      *(_DWORD *)(a1 + v43) = v27;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D309C(id a1)
{
  void *v1;

  v1 = (void *)qword_100269768;
  qword_100269768 = (uint64_t)&off_10022ABC8;

}

uint64_t APPBAttributionRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  uint64_t Data;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t String;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        Data = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(Data);
        v15 = 88;
        goto LABEL_53;
      case 2u:
        v17 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v17);
        v15 = 104;
        goto LABEL_53;
      case 3u:
        v18 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v18);
        v15 = 56;
        goto LABEL_53;
      case 4u:
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = 64;
        goto LABEL_53;
      case 5u:
        *(_BYTE *)(a1 + 124) |= 8u;
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v48 = 32;
        goto LABEL_87;
      case 6u:
        *(_BYTE *)(a1 + 124) |= 2u;
        v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v48 = 16;
        goto LABEL_87;
      case 7u:
        *(_BYTE *)(a1 + 124) |= 4u;
        v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v48 = 24;
        goto LABEL_87;
      case 8u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 124) |= 0x80u;
        while (2)
        {
          v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v10 = v25++ >= 9;
              if (v10)
              {
                v26 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v26 = 0;
LABEL_67:
        *(_BYTE *)(a1 + 120) = v26 != 0;
        continue;
      case 9u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 124) |= 0x40u;
        while (2)
        {
          v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v10 = v31++ >= 9;
              if (v10)
              {
                LODWORD(v32) = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v32) = 0;
LABEL_71:
        v47 = 96;
        goto LABEL_76;
      case 0xAu:
        v36 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v36);
        v15 = 112;
        goto LABEL_53;
      case 0xBu:
        v37 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v37);
        v15 = 72;
        goto LABEL_53;
      case 0xCu:
        *(_BYTE *)(a1 + 124) |= 0x10u;
        v38 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v48 = 40;
        goto LABEL_87;
      case 0xDu:
        v39 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v39);
        v15 = 48;
LABEL_53:
        v40 = *(void **)(a1 + v15);
        *(_QWORD *)(a1 + v15) = v14;

        continue;
      case 0xEu:
        *(_BYTE *)(a1 + 124) |= 1u;
        v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v48 = 8;
LABEL_87:
        *(_QWORD *)(a1 + v48) = v21;
        continue;
      case 0xFu:
        v42 = 0;
        v43 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 124) |= 0x20u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v44 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v45 = v44 + 1;
      if (v44 == -1 || v45 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
      v32 |= (unint64_t)(v46 & 0x7F) << v42;
      if ((v46 & 0x80) == 0)
        goto LABEL_73;
      v42 += 7;
      v10 = v43++ >= 9;
      if (v10)
      {
        LODWORD(v32) = 0;
        goto LABEL_75;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_73:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v32) = 0;
LABEL_75:
    v47 = 80;
LABEL_76:
    *(_DWORD *)(a1 + v47) = v32;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t APPBLogMetaDataReadFrom(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char **v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  uint64_t String;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  APPBAdSize *v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t Data;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  v6 = &selRef_hasErrorType;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v10);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v11;
      v9 |= (unint64_t)(v12 & 0x7F) << v7;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      v13 = v8++ >= 9;
      if (v13)
      {
        v9 = 0;
        v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v9 = 0;
LABEL_14:
    if (v14 || (v9 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v9 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v17 = objc_claimAutoreleasedReturnValue(String);
        v18 = 64;
        goto LABEL_113;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 0x400u;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v29 = v28 + 1;
          if (v28 == -1 || v29 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v13 = v26++ >= 9;
              if (v13)
              {
                LODWORD(v27) = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v27) = 0;
LABEL_131:
        v97 = 144;
        goto LABEL_172;
      case 3u:
        Data = PBReaderReadData(a2);
        v17 = objc_claimAutoreleasedReturnValue(Data);
        v18 = 128;
        goto LABEL_113;
      case 4u:
        v32 = 0;
        v33 = 0;
        v27 = 0;
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 0x100u;
        while (2)
        {
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v35 = v34 + 1;
          if (v34 == -1 || v35 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
            v27 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              v13 = v33++ >= 9;
              if (v13)
              {
                LODWORD(v27) = 0;
                goto LABEL_135;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v27) = 0;
LABEL_135:
        v97 = 136;
        goto LABEL_172;
      case 5u:
        v37 = 0;
        v38 = 0;
        v27 = 0;
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 0x800u;
        while (2)
        {
          v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v40 = v39 + 1;
          if (v39 == -1 || v40 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
            v27 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              v13 = v38++ >= 9;
              if (v13)
              {
                LODWORD(v27) = 0;
                goto LABEL_139;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v27) = 0;
LABEL_139:
        v97 = 148;
        goto LABEL_172;
      case 6u:
      case 7u:
      case 0xCu:
LABEL_22:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_180;
      case 8u:
        v42 = 0;
        v43 = 0;
        v27 = 0;
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 0x40u;
        while (2)
        {
          v44 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
            v27 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              v42 += 7;
              v13 = v43++ >= 9;
              if (v13)
              {
                LODWORD(v27) = 0;
                goto LABEL_143;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v27) = 0;
LABEL_143:
        v97 = 88;
        goto LABEL_172;
      case 9u:
        v47 = 0;
        v48 = 0;
        v27 = 0;
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 8u;
        while (2)
        {
          v49 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50;
            v27 |= (unint64_t)(v51 & 0x7F) << v47;
            if (v51 < 0)
            {
              v47 += 7;
              v13 = v48++ >= 9;
              if (v13)
              {
                LODWORD(v27) = 0;
                goto LABEL_147;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v27) = 0;
LABEL_147:
        v97 = 48;
        goto LABEL_172;
      case 0xAu:
        v52 = PBReaderReadData(a2);
        v17 = objc_claimAutoreleasedReturnValue(v52);
        v18 = 184;
        goto LABEL_113;
      case 0xBu:
        v19 = v3;
        v20 = v6;
        v21 = v2;
        v53 = PBReaderReadData(a2);
        v22 = (APPBAdSize *)objc_claimAutoreleasedReturnValue(v53);
        if (v22)
          objc_msgSend(a1, "addTiltTrackBlob:", v22);
        goto LABEL_110;
      case 0xDu:
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 4u;
        v54 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v54 <= 0xFFFFFFFFFFFFFFF7 && v54 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v55 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v55 = 0;
        }
        v98 = 24;
        goto LABEL_179;
      case 0xEu:
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 2u;
        v56 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v56 <= 0xFFFFFFFFFFFFFFF7 && v56 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v55 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v55 = 0;
        }
        v98 = 16;
LABEL_179:
        *(_QWORD *)&a1[v98] = v55;
        goto LABEL_180;
      case 0xFu:
        v57 = 0;
        v58 = 0;
        v27 = 0;
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 0x200u;
        while (2)
        {
          v59 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v59);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v60;
            v27 |= (unint64_t)(v61 & 0x7F) << v57;
            if (v61 < 0)
            {
              v57 += 7;
              v13 = v58++ >= 9;
              if (v13)
              {
                LODWORD(v27) = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v27) = 0;
LABEL_151:
        v97 = 140;
        goto LABEL_172;
      case 0x10u:
        v62 = 0;
        v63 = 0;
        v27 = 0;
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 0x20u;
        while (2)
        {
          v64 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v65 = v64 + 1;
          if (v64 == -1 || v65 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v65;
            v27 |= (unint64_t)(v66 & 0x7F) << v62;
            if (v66 < 0)
            {
              v62 += 7;
              v13 = v63++ >= 9;
              if (v13)
              {
                LODWORD(v27) = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v27) = 0;
LABEL_155:
        v97 = 76;
        goto LABEL_172;
      case 0x11u:
        v67 = PBReaderReadString(a2);
        v17 = objc_claimAutoreleasedReturnValue(v67);
        v18 = 168;
        goto LABEL_113;
      case 0x12u:
        v68 = 0;
        v69 = 0;
        v27 = 0;
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 0x1000u;
        while (2)
        {
          v70 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v71 = v70 + 1;
          if (v70 == -1 || v71 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v72 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v70);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v71;
            v27 |= (unint64_t)(v72 & 0x7F) << v68;
            if (v72 < 0)
            {
              v68 += 7;
              v13 = v69++ >= 9;
              if (v13)
              {
                LODWORD(v27) = 0;
                goto LABEL_159;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v27) = 0;
LABEL_159:
        v97 = 176;
        goto LABEL_172;
      case 0x13u:
        v73 = 0;
        v74 = 0;
        v75 = 0;
        *(_WORD *)&a1[*((int *)v6 + 962)] |= 0x2000u;
        while (2)
        {
          v76 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v77 = v76 + 1;
          if (v76 == -1 || v77 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v78 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v76);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v77;
            v75 |= (unint64_t)(v78 & 0x7F) << v73;
            if (v78 < 0)
            {
              v73 += 7;
              v13 = v74++ >= 9;
              if (v13)
              {
                v75 = 0;
                goto LABEL_163;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v75 = 0;
LABEL_163:
        a1[200] = v75 != 0;
        goto LABEL_180;
      case 0x14u:
        v79 = PBReaderReadData(a2);
        v17 = objc_claimAutoreleasedReturnValue(v79);
        v18 = 120;
        goto LABEL_113;
      case 0x15u:
        v80 = PBReaderReadData(a2);
        v17 = objc_claimAutoreleasedReturnValue(v80);
        v18 = 56;
        goto LABEL_113;
      case 0x16u:
        v81 = PBReaderReadData(a2);
        v17 = objc_claimAutoreleasedReturnValue(v81);
        v18 = 96;
        goto LABEL_113;
      case 0x17u:
        v82 = PBReaderReadData(a2);
        v17 = objc_claimAutoreleasedReturnValue(v82);
        v18 = 104;
LABEL_113:
        v86 = *(void **)&a1[v18];
        *(_QWORD *)&a1[v18] = v17;

        goto LABEL_180;
      default:
        switch((v9 >> 3))
        {
          case 'd':
            v19 = v3;
            v20 = v6;
            v21 = v2;
            v22 = objc_alloc_init(APPBAdSize);
            v23 = 152;
            goto LABEL_107;
          case 'e':
            *(_WORD *)&a1[*((int *)v6 + 962)] |= 1u;
            v83 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v83 <= 0xFFFFFFFFFFFFFFF7 && v83 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              v55 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v83);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v83 + 8;
            }
            else
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
              v55 = 0;
            }
            v98 = 8;
            goto LABEL_179;
          case 'f':
            v19 = v3;
            v20 = v6;
            v21 = v2;
            v22 = objc_alloc_init(APPBAdSize);
            v23 = 80;
            goto LABEL_107;
          case 'g':
            v19 = v3;
            v20 = v6;
            v21 = v2;
            v22 = objc_alloc_init(APPBAdSize);
            v23 = 160;
LABEL_107:
            objc_storeStrong((id *)&a1[v23], v22);
            v99[0] = 0;
            v99[1] = 0;
            if (PBReaderPlaceMark(a2, v99) && (APPBAdSizeReadFrom((uint64_t)v22, a2) & 1) != 0)
            {
              PBReaderRecallMark(a2, v99);
LABEL_110:

              v2 = v21;
              v6 = v20;
              v3 = v19;
LABEL_180:
              if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              continue;
            }

            return 0;
          case 'h':
            v84 = PBReaderReadString(a2);
            v17 = objc_claimAutoreleasedReturnValue(v84);
            v18 = 32;
            goto LABEL_113;
          case 'i':
            v85 = PBReaderReadString(a2);
            v17 = objc_claimAutoreleasedReturnValue(v85);
            v18 = 40;
            goto LABEL_113;
          case 'j':
            v87 = 0;
            v88 = 0;
            v27 = 0;
            *(_WORD *)&a1[*((int *)v6 + 962)] |= 0x10u;
            while (2)
            {
              v89 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              v90 = v89 + 1;
              if (v89 == -1 || v90 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
              }
              else
              {
                v91 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v89);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v90;
                v27 |= (unint64_t)(v91 & 0x7F) << v87;
                if (v91 < 0)
                {
                  v87 += 7;
                  v13 = v88++ >= 9;
                  if (v13)
                  {
                    LODWORD(v27) = 0;
                    goto LABEL_167;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              LODWORD(v27) = 0;
LABEL_167:
            v97 = 72;
            goto LABEL_172;
          case 'k':
            v92 = 0;
            v93 = 0;
            v27 = 0;
            *(_WORD *)&a1[*((int *)v6 + 962)] |= 0x80u;
            while (2)
            {
              v94 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              v95 = v94 + 1;
              if (v94 == -1 || v95 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
              }
              else
              {
                v96 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v94);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v95;
                v27 |= (unint64_t)(v96 & 0x7F) << v92;
                if (v96 < 0)
                {
                  v92 += 7;
                  v13 = v93++ >= 9;
                  if (v13)
                  {
                    LODWORD(v27) = 0;
                    goto LABEL_171;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              LODWORD(v27) = 0;
LABEL_171:
            v97 = 112;
LABEL_172:
            *(_DWORD *)&a1[v97] = v27;
            goto LABEL_180;
          default:
            goto LABEL_22;
        }
    }
  }
}

void sub_1000D9200(id a1)
{
  void *v1;

  v1 = (void *)qword_100269778;
  qword_100269778 = (uint64_t)&off_10022ABF0;

}

BOOL APPBVideoAssetReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Data;
  uint64_t String;
  void *v18;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v12 = v6 >> 3;
      if ((v6 >> 3) == 3)
        break;
      if ((_DWORD)v12 == 2)
      {
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = 8;
        goto LABEL_23;
      }
      if ((_DWORD)v12 == 1)
      {
        v13 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        v15 = 16;
LABEL_23:
        v18 = *(void **)(a1 + v15);
        *(_QWORD *)(a1 + v15) = v14;

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    Data = PBReaderReadData(a2);
    v14 = objc_claimAutoreleasedReturnValue(Data);
    v15 = 24;
    goto LABEL_23;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D9950(id a1)
{
  void *v1;

  v1 = (void *)qword_100269788;
  qword_100269788 = (uint64_t)&off_10022AC18;

}

void sub_1000D99A8(id a1)
{
  void *v1;

  v1 = (void *)qword_100269798;
  qword_100269798 = (uint64_t)&off_10022AC40;

}

BOOL APPBParameterReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 8;
LABEL_21:
        v16 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_23:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v15 = PBReaderReadString(a2);
    v13 = objc_claimAutoreleasedReturnValue(v15);
    v14 = 16;
    goto LABEL_21;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D9FC4(id a1)
{
  void *v1;

  v1 = (void *)qword_1002697A8;
  qword_1002697A8 = (uint64_t)&off_10022AC68;

}

BOOL APPBLogAnalyticsResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

uint64_t APPBUserTransparencyResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  APPBTransparencyDetails *v12;
  uint64_t result;
  _QWORD v14[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = objc_alloc_init(APPBTransparencyDetails);
      objc_storeStrong((id *)(a1 + 8), v12);
      v14[0] = 0;
      v14[1] = 0;
      if (!PBReaderPlaceMark(a2, v14) || !APPBTransparencyDetailsReadFrom((uint64_t)v12, a2))
      {

        return 0;
      }
      PBReaderRecallMark(a2, v14);

    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t APPBButtonStyleReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  APPBColor *v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = objc_alloc_init(APPBColor);
        v14 = 16;
        goto LABEL_24;
      case 2u:
        v13 = objc_alloc_init(APPBColor);
        v14 = 40;
        goto LABEL_24;
      case 3u:
        v13 = objc_alloc_init(APPBColor);
        v14 = 32;
        goto LABEL_24;
      case 4u:
        v13 = objc_alloc_init(APPBColor);
        v14 = 48;
LABEL_24:
        objc_storeStrong((id *)(a1 + v14), v13);
        v18 = 0;
        v19 = 0;
        if (!PBReaderPlaceMark(a2, &v18) || (APPBColorReadFrom(v13, a2) & 1) == 0)
          goto LABEL_38;
        goto LABEL_32;
      case 5u:
        *(_BYTE *)(a1 + 56) |= 1u;
        v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 <= 0xFFFFFFFFFFFFFFFBLL && v16 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v17 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v17 = 0;
        }
        *(_DWORD *)(a1 + 24) = v17;
        goto LABEL_33;
      case 6u:
        v13 = objc_alloc_init(APPBBorderStyle);
        objc_storeStrong((id *)(a1 + 8), v13);
        v18 = 0;
        v19 = 0;
        if (PBReaderPlaceMark(a2, &v18) && (APPBBorderStyleReadFrom((uint64_t)v13, a2) & 1) != 0)
        {
LABEL_32:
          PBReaderRecallMark(a2, &v18);

LABEL_33:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_38:

        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_33;
    }
  }
}

uint64_t APPBInstallAttributionReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  uint64_t String;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  uint64_t v37;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 40;
        goto LABEL_29;
      case 2u:
        v15 = 0;
        v16 = 0;
        v17 = 0;
        *(_BYTE *)(a1 + 72) |= 2u;
        while (2)
        {
          v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v18 == -1 || v18 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
            v17 |= (unint64_t)(v19 & 0x7F) << v15;
            if (v19 < 0)
            {
              v15 += 7;
              v9 = v16++ >= 9;
              if (v9)
              {
                v17 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v17 = 0;
LABEL_56:
        v37 = 16;
        goto LABEL_69;
      case 3u:
        v20 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v20);
        v14 = 64;
        goto LABEL_29;
      case 4u:
        v21 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v21);
        v14 = 48;
        goto LABEL_29;
      case 5u:
        v22 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v22);
        v14 = 56;
LABEL_29:
        v23 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        continue;
      case 6u:
        v24 = 0;
        v25 = 0;
        v17 = 0;
        *(_BYTE *)(a1 + 72) |= 1u;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v17 |= (unint64_t)(v27 & 0x7F) << v24;
            if (v27 < 0)
            {
              v24 += 7;
              v9 = v25++ >= 9;
              if (v9)
              {
                v17 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v17 = 0;
LABEL_60:
        v37 = 8;
        goto LABEL_69;
      case 7u:
        v28 = 0;
        v29 = 0;
        v17 = 0;
        *(_BYTE *)(a1 + 72) |= 4u;
        while (2)
        {
          v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v17 |= (unint64_t)(v31 & 0x7F) << v28;
            if (v31 < 0)
            {
              v28 += 7;
              v9 = v29++ >= 9;
              if (v9)
              {
                v17 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v17 = 0;
LABEL_64:
        v37 = 24;
        goto LABEL_69;
      case 9u:
        v33 = 0;
        v34 = 0;
        v17 = 0;
        *(_BYTE *)(a1 + 72) |= 8u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v35 == -1 || v35 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
      v17 |= (unint64_t)(v36 & 0x7F) << v33;
      if ((v36 & 0x80) == 0)
        goto LABEL_66;
      v33 += 7;
      v9 = v34++ >= 9;
      if (v9)
      {
        v17 = 0;
        goto LABEL_68;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v17 = 0;
LABEL_68:
    v37 = 32;
LABEL_69:
    *(_QWORD *)(a1 + v37) = v17;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000DCB18(id a1)
{
  void *v1;

  v1 = (void *)qword_1002697B8;
  qword_1002697B8 = (uint64_t)&off_10022AC90;

}

uint64_t APPBMescalSignSAPSetupRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t Data;
  uint64_t v13;
  void *v14;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      Data = PBReaderReadData(a2);
      v13 = objc_claimAutoreleasedReturnValue(Data);
      v14 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v13;

    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000DCF6C(id a1)
{
  void *v1;

  v1 = (void *)qword_1002697C8;
  qword_1002697C8 = (uint64_t)&off_10022ACB8;

}

uint64_t APPBOptOutRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  uint64_t Data;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        Data = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(Data);
        v15 = 32;
        goto LABEL_38;
      case 2u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 48) |= 8u;
        break;
      case 3u:
        *(_BYTE *)(a1 + 48) |= 2u;
        v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v24 = 0;
        }
        v30 = 16;
        goto LABEL_47;
      case 4u:
        *(_BYTE *)(a1 + 48) |= 1u;
        v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v24 = 0;
        }
        v30 = 8;
LABEL_47:
        *(_QWORD *)(a1 + v30) = v24;
        continue;
      case 5u:
        *(_BYTE *)(a1 + 48) |= 4u;
        v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v27 = 0;
        }
        *(_DWORD *)(a1 + 40) = v27;
        continue;
      case 6u:
        v28 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v28);
        v15 = 24;
LABEL_38:
        v29 = *(void **)(a1 + v15);
        *(_QWORD *)(a1 + v15) = v14;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v21 = v20 + 1;
      if (v20 == -1 || v21 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
      v19 |= (unint64_t)(v22 & 0x7F) << v17;
      if ((v22 & 0x80) == 0)
        goto LABEL_40;
      v17 += 7;
      v10 = v18++ >= 9;
      if (v10)
      {
        v19 = 0;
        goto LABEL_42;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v19 = 0;
LABEL_42:
    *(_BYTE *)(a1 + 44) = v19 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000DDF80(id a1)
{
  void *v1;

  v1 = (void *)qword_1002697D8;
  qword_1002697D8 = (uint64_t)&off_10022ACE0;

}

uint64_t APPBAggregateDistributionMetricReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t String;
  void *v27;
  uint64_t result;
  uint64_t v29;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v13 = v6 >> 3;
    if ((int)(v6 >> 3) <= 99)
    {
      if ((_DWORD)v13 == 1)
      {
        String = PBReaderReadString(a2);
        v17 = objc_claimAutoreleasedReturnValue(String);
        v18 = 32;
      }
      else
      {
        if ((_DWORD)v13 != 2)
        {
LABEL_39:
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v16 = PBReaderReadString(a2);
        v17 = objc_claimAutoreleasedReturnValue(v16);
        v18 = 16;
      }
      v27 = *(void **)(a1 + v18);
      *(_QWORD *)(a1 + v18) = v17;

    }
    else if ((_DWORD)v13 == 100)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      *(_BYTE *)(a1 + 44) |= 2u;
      while (1)
      {
        v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0)
          goto LABEL_42;
        v19 += 7;
        v10 = v20++ >= 9;
        if (v10)
        {
          LODWORD(v21) = 0;
          goto LABEL_44;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v21) = 0;
LABEL_44:
      *(_DWORD *)(a1 + 24) = v21;
    }
    else
    {
      if ((_DWORD)v13 == 101)
      {
        *(_BYTE *)(a1 + 44) |= 1u;
        v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v29 = 8;
      }
      else
      {
        if ((_DWORD)v13 != 102)
          goto LABEL_39;
        *(_BYTE *)(a1 + 44) |= 4u;
        v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFFBLL && v14 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v29 = 40;
      }
      *(_DWORD *)(a1 + v29) = v15;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000DED48(id a1)
{
  void *v1;

  v1 = (void *)qword_1002697E8;
  qword_1002697E8 = (uint64_t)&off_10022AD08;

}

BOOL APPBAdSpaceStatusEventResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

void sub_1000DEFF8(id a1)
{
  void *v1;

  v1 = (void *)qword_1002697F8;
  qword_1002697F8 = (uint64_t)&off_10022AD30;

}

BOOL APPBLogSubscriptionEventResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

void sub_1000DF2A8(id a1)
{
  void *v1;

  v1 = (void *)qword_100269808;
  qword_100269808 = (uint64_t)&off_10022AD58;

}

BOOL APPBLogAggregateMetricsRequestReadFrom(char *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  APPBAggregateDistributionMetric *v16;
  uint64_t String;
  uint64_t v19;
  uint64_t v20;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((int)(v6 >> 3) > 99)
    {
      if ((_DWORD)v12 == 100)
      {
        v16 = objc_alloc_init(APPBAggregateDistributionMetric);
        objc_msgSend(a1, "addDistributionMetrics:", v16);
        v19 = 0;
        v20 = 0;
        if (!PBReaderPlaceMark(a2, &v19)
          || (APPBAggregateDistributionMetricReadFrom((uint64_t)v16, a2) & 1) == 0)
        {
LABEL_37:

          return 0;
        }
LABEL_30:
        PBReaderRecallMark(a2, &v19);
LABEL_31:

        continue;
      }
      if ((_DWORD)v12 == 101)
      {
        v16 = objc_alloc_init(APPBAggregateScalarMetric);
        objc_msgSend(a1, "addScalarMetrics:", v16);
        v19 = 0;
        v20 = 0;
        if (!PBReaderPlaceMark(a2, &v19)
          || (APPBAggregateScalarMetricReadFrom((uint64_t)v16, a2) & 1) == 0)
        {
          goto LABEL_37;
        }
        goto LABEL_30;
      }
    }
    else
    {
      if ((_DWORD)v12 == 1)
      {
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = 8;
        goto LABEL_27;
      }
      if ((_DWORD)v12 == 2)
      {
        v13 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        v15 = 24;
LABEL_27:
        v16 = *(APPBAggregateDistributionMetric **)&a1[v15];
        *(_QWORD *)&a1[v15] = v14;
        goto LABEL_31;
      }
    }
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000E0378(id a1)
{
  void *v1;

  v1 = (void *)qword_100269818;
  qword_100269818 = (uint64_t)&off_10022AD80;

}

BOOL APPBTagTransformationReadFrom(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  void *v13;
  uint64_t v14;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        String = PBReaderReadString(a2);
        v13 = (void *)objc_claimAutoreleasedReturnValue(String);
        if (v13)
          objc_msgSend(a1, "addRequiredTags:", v13);
LABEL_23:

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v14 = PBReaderReadString(a2);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (v13)
      objc_msgSend(a1, "addResultTags:", v13);
    goto LABEL_23;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000E0F60(id a1)
{
  void *v1;

  v1 = (void *)qword_100269828;
  qword_100269828 = (uint64_t)&off_10022ADA8;

}

uint64_t APPBAnalyticsEventReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 3)
    {
      v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 8;
      }
      else
      {
        *(_BYTE *)(a2 + v11) = 1;
        v21 = 0;
      }
      *(_QWORD *)(a1 + 8) = v21;
    }
    else if ((v6 >> 3) == 2)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v18 = v17 + 1;
        if (v17 == -1 || v18 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
        v16 |= (unint64_t)(v19 & 0x7F) << v14;
        if ((v19 & 0x80) == 0)
          goto LABEL_32;
        v14 += 7;
        v10 = v15++ >= 9;
        if (v10)
        {
          LODWORD(v16) = 0;
          goto LABEL_34;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v16) = 0;
LABEL_34:
      *(_DWORD *)(a1 + 16) = v16;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000E1830(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@%@"), CFSTR("body"), CFSTR("."), CFSTR("creativeType")));
  v2 = (void *)qword_100269838;
  qword_100269838 = v1;

}

void sub_1000E18D4(id a1)
{
  void *v1;

  v1 = (void *)qword_100269848;
  qword_100269848 = (uint64_t)&off_10022ADD0;

}

BOOL APPBLogVideoAnalyticsEventResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

BOOL APPBTargetingDimensionsReadFrom(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  APPBTargetingCriteria *v12;
  _QWORD v14[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    if ((v6 >> 3) == 2)
    {
      v12 = objc_alloc_init(APPBTargetingCriteria);
      objc_msgSend(a1, "addExclusionCriteria:", v12);
    }
    else
    {
      if ((v6 >> 3) != 1)
      {
        if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
          return 0;
        continue;
      }
      v12 = objc_alloc_init(APPBTargetingCriteria);
      objc_msgSend(a1, "addInclusionCriteria:", v12);
    }
    v14[0] = 0;
    v14[1] = 0;
    if (!PBReaderPlaceMark(a2, v14) || !APPBTargetingCriteriaReadFrom(v12, a2))
    {

      return 0;
    }
    PBReaderRecallMark(a2, v14);

  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000E2CC8(id a1)
{
  void *v1;

  v1 = (void *)qword_100269858;
  qword_100269858 = (uint64_t)&off_10022ADF8;

}

BOOL APPBMescalSignSAPSetupCertificateRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

void sub_1000E324C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E3264(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
    v8 = 1;
  else
    v8 = v6 == 0;
  v9 = v8;
  v10 = APLogForCategory(48);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if ((v9 & 1) != 0)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Time spent metric request succeeded.", (uint8_t *)&v15, 2u);
    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedDescription"));
    v15 = 138543362;
    v16 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Time spent metric request failed due to %{public}@.", (uint8_t *)&v15, 0xCu);

  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (!*(_BYTE *)(v14 + 24))
  {
    *(_BYTE *)(v14 + 24) = 1;
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

uint64_t APPBResourceCacheEntryReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t String;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v13 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 32) |= 1u;
      v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 8;
      }
      else
      {
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        v20 = 0;
      }
      *(_QWORD *)(a1 + 8) = v20;
    }
    else
    {
      if ((_DWORD)v13 == 2)
      {
        String = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(String);
        v16 = 16;
      }
      else
      {
        if ((_DWORD)v13 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v14 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v14);
        v16 = 24;
      }
      v18 = *(void **)(a1 + v16);
      *(_QWORD *)(a1 + v16) = v15;

    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000E3DF0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  v7 = a2;
  +[APAnalytics sendEvent:statusDetail:startDate:error:](APAnalytics, "sendEvent:statusDetail:startDate:error:", CFSTR("MescalSetup"), &off_100229288, v5, v6);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "buffer"));

  (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v6);
}

void sub_1000E3FB0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  v7 = a2;
  +[APAnalytics sendEvent:statusDetail:startDate:error:](APAnalytics, "sendEvent:statusDetail:startDate:error:", CFSTR("MescalSetup"), &off_1002292A0, v5, v6);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "certificate"));

  (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v6);
}

void sub_1000E4098(id a1)
{
  void *v1;

  v1 = (void *)qword_100269868;
  qword_100269868 = (uint64_t)&off_10022AE20;

}

uint64_t APPBMescalSignSAPSetupCertificateResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t Data;
  uint64_t v13;
  void *v14;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      Data = PBReaderReadData(a2);
      v13 = objc_claimAutoreleasedReturnValue(Data);
      v14 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v13;

    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000E45B4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_100269878;
  qword_100269878 = v1;

  objc_msgSend((id)qword_100269878, "setObject:forKey:", kAPMetricClientIdentifierKey, &off_1002292D0);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("capping_event"), &off_1002292E8);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("client_source"), &off_100229300);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("deletion_ids"), &off_100229318);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("element"), &off_100229330);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("elements_partially_shown"), &off_100229348);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("elements_shown"), &off_100229360);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("error_code"), &off_100229378);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("button_state"), &off_100229390);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("code"), &off_1002293A8);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("collapsed"), &off_1002293C0);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("dnu"), &off_1002293D8);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("duration"), &off_1002293F0);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("full_screen"), &off_100229408);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("height"), &off_100229420);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("impression_id"), &off_100229438);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("handle"), &off_100229450);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("news"), &off_100229468);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("percent"), &off_100229480);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("placeholder"), &off_100229498);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("placeholderIdentifier"), &off_1002294B0);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("placement"), &off_1002294C8);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("position"), &off_1002294E0);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("progress"), &off_1002294F8);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("quality"), &off_100229510);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("reason"), &off_100229528);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("representationIdentifier"), &off_100229540);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("return_time"), &off_100229558);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("scroll_velocity"), &off_100229570);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("search_term_id"), &off_100229588);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("start_date"), &off_1002295A0);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", kAPMetricSubscriptionCurrency, &off_1002295B8);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", kAPMetricSubscriptionIdentifier, &off_1002295D0);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", kAPMetricSubscriptionPrice, &off_1002295E8);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", kAPMetricSubscriptionPurchase, &off_100229600);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", kAPMetricSubscriptionSource, &off_100229618);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", kAPMetricSubscriptionToken, &off_100229630);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", kAPMetricSubscriptionType, &off_100229648);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("template_argument"), &off_100229660);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("template_metric_name"), &off_100229678);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("time_to_previous_install"), &off_100229690);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("type"), &off_1002296A8);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("url"), &off_1002296C0);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("voice_over_enabled"), &off_1002296D8);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("volume"), &off_1002296F0);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("was_native_slot"), &off_100229708);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("width"), &off_100229720);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("x_position"), &off_100229738);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("y_position"), &off_100229750);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", kAPMetricClientInfoKey, &off_100229768);
  objc_msgSend((id)qword_100269878, "setObject:forKey:", CFSTR("webview_terminated"), &off_100229780);
}

void sub_1000E4E78(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000E4E9C(uint64_t a1, void *a2, void *a3)
{
  id *v5;
  id v6;
  id v7;
  id WeakRetained;

  v5 = (id *)(a1 + 48);
  v6 = a3;
  v7 = a2;
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend(WeakRetained, "handleMetricResponse:error:forRequest:", v7, v6, *(_QWORD *)(a1 + 32));

}

void sub_1000E516C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E518C(uint64_t a1, void *a2, int a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  if (a3)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "requestIdentifier"));
    objc_msgSend(v5, "removeDelayedRequest:cancel:", v6, 0);

  }
  else
  {
    v7 = os_transaction_create("com.apple.ap.promotedcontentd.send-delayed-legacy-metric");
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_1000E521C(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = a3;
  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "requestIdentifier"));
  objc_msgSend(v5, "removeDelayedRequest:cancel:", v9, 0);

  objc_msgSend(*(id *)(a1 + 32), "handleMetricResponse:error:forRequest:", v8, v7, *(_QWORD *)(a1 + 40));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = 0;

}

void sub_1000E54B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E54CC(_QWORD *a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  id v13;

  v13 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "internalContent"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "content"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  if (!objc_msgSend(v6, "isEqualToString:", a1[4]))
  {

    goto LABEL_8;
  }
  v7 = objc_msgSend(v13, "cancelled");

  v8 = v13;
  if ((v7 & 1) == 0)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40))
    {
      v9 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array", v13));
      v10 = *(_QWORD *)(a1[6] + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

    }
    v12 = (*(uint64_t (**)(void))(a1[5] + 16))();
    v8 = v13;
    if (v12)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "addObject:", v13);
LABEL_8:
      v8 = v13;
    }
  }

}

void sub_1000E6434(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "confirmedClickLock"));
  objc_msgSend(v2, "lock");

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "internalContent"));
  objc_msgSend(v3, "confirmClick");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "internalContent"));
  objc_msgSend(v4, "pendingConfirmedClick:", 0);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "confirmedClickLock"));
  objc_msgSend(v5, "unlock");

}

BOOL sub_1000E680C(id a1, APLegacyMetricRequester *a2)
{
  return -[APLegacyMetricRequester eventType](a2, "eventType") == 6;
}

void sub_1000E7734(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000E77D8(id a1, APLegacyMetricRequester *a2)
{
  return -[APLegacyMetricRequester eventType](a2, "eventType") == 908;
}

void sub_1000E78F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000E7EB8(id a1, APLegacyMetricRequester *a2)
{
  return -[APLegacyMetricRequester statusCode](a2, "statusCode") == 3001;
}

void sub_1000E8BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000E8BE4(uint64_t a1, void *a2)
{
  unsigned __int8 v4;

  v4 = objc_msgSend(a2, "charValue");
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "appendBytes:length:", &v4, 1);
}

void sub_1000E8C2C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  objc_msgSend(*(id *)(a1 + 32), "carouselFinishedSent");
  v2 = APLogForCategory(21);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = 134217984;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Sent delayed APPBLogSysEventRequest with type CarouselFinished after %.1f seconds.", (uint8_t *)&v5, 0xCu);
  }

}

void sub_1000E9B4C(id a1, APServerRequester *a2)
{
  APServerRequester *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  int v11;

  v2 = a2;
  v3 = APLogForCategory(21);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[APServerRequester internalContent](v2, "internalContent"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "content"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    v8 = 138543618;
    v9 = v7;
    v10 = 1024;
    v11 = 2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending ASE AdNotAvailable for preroll video placeholder %{public}@ because it was not replaced in the allowed time (%d seconds)", (uint8_t *)&v8, 0x12u);

  }
}

void sub_1000E9D48(id a1)
{
  void *v1;

  v1 = (void *)qword_100269888;
  qword_100269888 = (uint64_t)&off_10022AE48;

}

uint64_t APPBAdSpaceStatusEventRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  uint64_t String;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Data;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  void *v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = 32;
        goto LABEL_63;
      case 2u:
        v16 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v16);
        v15 = 24;
        goto LABEL_63;
      case 3u:
        Data = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(Data);
        v15 = 40;
        goto LABEL_63;
      case 4u:
        v18 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v18);
        v15 = 56;
        goto LABEL_63;
      case 5u:
        v19 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v19);
        v15 = 80;
        goto LABEL_63;
      case 6u:
        *(_BYTE *)(a1 + 112) |= 2u;
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v60 = 16;
        goto LABEL_97;
      case 7u:
        *(_BYTE *)(a1 + 112) |= 1u;
        v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v60 = 8;
LABEL_97:
        *(_QWORD *)(a1 + v60) = v21;
        continue;
      case 8u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 112) |= 4u;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v10 = v24++ >= 9;
              if (v10)
              {
                LODWORD(v25) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v25) = 0;
LABEL_74:
        v57 = 96;
        goto LABEL_92;
      case 9u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        *(_BYTE *)(a1 + 112) |= 0x40u;
        while (2)
        {
          v32 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              v10 = v30++ >= 9;
              if (v10)
              {
                v31 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v31 = 0;
LABEL_78:
        v58 = v31 != 0;
        v59 = 109;
        goto LABEL_87;
      case 0xAu:
        v35 = 0;
        v36 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 112) |= 0x10u;
        while (2)
        {
          v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v38 = v37 + 1;
          if (v37 == -1 || v38 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
            v25 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v10 = v36++ >= 9;
              if (v10)
              {
                LODWORD(v25) = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v25) = 0;
LABEL_82:
        v57 = 104;
        goto LABEL_92;
      case 0xBu:
        v40 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v40);
        v15 = 88;
        goto LABEL_63;
      case 0xDu:
        v42 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v42);
        v15 = 72;
        goto LABEL_63;
      case 0xEu:
        v43 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v43);
        v15 = 48;
        goto LABEL_63;
      case 0xFu:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_BYTE *)(a1 + 112) |= 0x20u;
        while (2)
        {
          v47 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v10 = v45++ >= 9;
              if (v10)
              {
                v46 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v46 = 0;
LABEL_86:
        v58 = v46 != 0;
        v59 = 108;
LABEL_87:
        *(_BYTE *)(a1 + v59) = v58;
        continue;
      case 0x10u:
        v50 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v50);
        v15 = 64;
LABEL_63:
        v51 = *(void **)(a1 + v15);
        *(_QWORD *)(a1 + v15) = v14;

        continue;
      case 0x11u:
        v52 = 0;
        v53 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 112) |= 8u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v54 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v55 = v54 + 1;
      if (v54 == -1 || v55 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v56 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55;
      v25 |= (unint64_t)(v56 & 0x7F) << v52;
      if ((v56 & 0x80) == 0)
        goto LABEL_89;
      v52 += 7;
      v10 = v53++ >= 9;
      if (v10)
      {
        LODWORD(v25) = 0;
        goto LABEL_91;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_89:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v25) = 0;
LABEL_91:
    v57 = 100;
LABEL_92:
    *(_DWORD *)(a1 + v57) = v25;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000EE644(id a1)
{
  void *v1;

  v1 = (void *)qword_100269898;
  qword_100269898 = (uint64_t)&off_10022AE70;

}

BOOL APPBLogSysEventResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

uint64_t APPBAdActionReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  APPBAdSize *v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t String;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t result;
  char v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  v6 = &OBJC_IVAR___APPBInstallAttribution__version;
  while (1)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v10);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v11;
      v9 |= (unint64_t)(v12 & 0x7F) << v7;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      v13 = v8++ >= 9;
      if (v13)
      {
        v9 = 0;
        v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    v14 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v9 = 0;
LABEL_14:
    if (v14 || (v9 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v16 = v9 >> 3;
    if ((int)(v9 >> 3) > 199)
    {
      if ((int)v16 <= 249)
      {
        switch((int)v16)
        {
          case 200:
            *(_WORD *)(a1 + v6[89]) |= 8u;
            v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v17 <= 0xFFFFFFFFFFFFFFFBLL
              && (v18 = v17 + 4, v17 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)))
            {
              v19 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            }
            else
            {
              v19 = 0;
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            v108 = 60;
            goto LABEL_187;
          case 201:
            v53 = 0;
            v54 = 0;
            v55 = 0;
            *(_WORD *)(a1 + v6[89]) |= 0x1000u;
            while (2)
            {
              v56 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              v57 = v56 + 1;
              if (v56 == -1 || v57 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
              }
              else
              {
                v58 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v57;
                v55 |= (unint64_t)(v58 & 0x7F) << v53;
                if (v58 < 0)
                {
                  v53 += 7;
                  v13 = v54++ >= 9;
                  if (v13)
                  {
                    v55 = 0;
                    goto LABEL_156;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              v55 = 0;
LABEL_156:
            v106 = v55 != 0;
            v107 = 191;
            goto LABEL_182;
          case 202:
            v59 = v6;
            v60 = v3;
            v61 = v2;
            v62 = objc_alloc_init(APPBAdSize);
            objc_msgSend((id)a1, "addStoryboardSizes:", v62);
            v109 = 0;
            v110 = 0;
            if (!PBReaderPlaceMark(a2, &v109) || (APPBAdSizeReadFrom((uint64_t)v62, a2) & 1) == 0)
              goto LABEL_196;
            goto LABEL_139;
          case 203:
            *(_WORD *)(a1 + v6[89]) |= 0x20u;
            v63 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v63 <= 0xFFFFFFFFFFFFFFFBLL
              && (v64 = v63 + 4, v63 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)))
            {
              v19 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64;
            }
            else
            {
              v19 = 0;
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            v108 = 104;
LABEL_187:
            *(_DWORD *)(a1 + v108) = v19;
            goto LABEL_194;
          case 204:
            v65 = 0;
            v66 = 0;
            v22 = 0;
            *(_WORD *)(a1 + v6[89]) |= 0x40u;
            while (2)
            {
              v67 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              v68 = v67 + 1;
              if (v67 == -1 || v68 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
              }
              else
              {
                v69 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v67);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68;
                v22 |= (unint64_t)(v69 & 0x7F) << v65;
                if (v69 < 0)
                {
                  v65 += 7;
                  v13 = v66++ >= 9;
                  if (v13)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_160;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              LODWORD(v22) = 0;
LABEL_160:
            v105 = 144;
            goto LABEL_173;
          case 205:
            v70 = 0;
            v71 = 0;
            v22 = 0;
            *(_WORD *)(a1 + v6[89]) |= 0x80u;
            while (2)
            {
              v72 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              v73 = v72 + 1;
              if (v72 == -1 || v73 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
              }
              else
              {
                v74 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v72);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v73;
                v22 |= (unint64_t)(v74 & 0x7F) << v70;
                if (v74 < 0)
                {
                  v70 += 7;
                  v13 = v71++ >= 9;
                  if (v13)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_164;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              LODWORD(v22) = 0;
LABEL_164:
            v105 = 160;
            goto LABEL_173;
          case 210:
            v75 = 0;
            v76 = 0;
            v77 = 0;
            *(_WORD *)(a1 + v6[89]) |= 0x400u;
            break;
          case 211:
            *(_WORD *)(a1 + v6[89]) |= 2u;
            v81 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v81 <= 0xFFFFFFFFFFFFFFF7 && v81 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              v82 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v81);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v81 + 8;
            }
            else
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
              v82 = 0;
            }
            *(_QWORD *)(a1 + 16) = v82;
            goto LABEL_194;
          case 220:
            v59 = v6;
            v60 = v3;
            v61 = v2;
            String = PBReaderReadString(a2);
            v62 = (APPBAdSize *)objc_claimAutoreleasedReturnValue(String);
            if (v62)
              objc_msgSend((id)a1, "addAllowedExternalDomains:", v62);
            goto LABEL_140;
          default:
            goto LABEL_120;
        }
        while (1)
        {
          v78 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v80 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v78);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v79;
          v77 |= (unint64_t)(v80 & 0x7F) << v75;
          if ((v80 & 0x80) == 0)
            goto LABEL_166;
          v75 += 7;
          v13 = v76++ >= 9;
          if (v13)
          {
            v77 = 0;
            goto LABEL_168;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_166:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v77 = 0;
LABEL_168:
        v106 = v77 != 0;
        v107 = 189;
LABEL_182:
        *(_BYTE *)(a1 + v107) = v106;
        goto LABEL_194;
      }
      switch((int)v16)
      {
        case 250:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_WORD *)(a1 + v6[89]) |= 0x200u;
          while (2)
          {
            v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v13 = v27++ >= 9;
                if (v13)
                {
                  v28 = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v28 = 0;
LABEL_148:
          v106 = v28 != 0;
          v107 = 188;
          goto LABEL_182;
        case 251:
          v84 = PBReaderReadString(a2);
          v38 = objc_claimAutoreleasedReturnValue(v84);
          v39 = 176;
          goto LABEL_133;
        case 252:
          v85 = PBReaderReadString(a2);
          v38 = objc_claimAutoreleasedReturnValue(v85);
          v39 = 120;
          goto LABEL_133;
        case 253:
          v86 = PBReaderReadString(a2);
          v38 = objc_claimAutoreleasedReturnValue(v86);
          v39 = 64;
          goto LABEL_133;
        case 254:
          v87 = PBReaderReadString(a2);
          v38 = objc_claimAutoreleasedReturnValue(v87);
          v39 = 128;
          goto LABEL_133;
        default:
          if ((_DWORD)v16 == 300)
          {
            *(_WORD *)(a1 + v6[89]) |= 1u;
            v88 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v88 <= 0xFFFFFFFFFFFFFFF7
              && (v89 = v88 + 8, v88 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)))
            {
              v90 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v88);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v89;
            }
            else
            {
              v90 = 0;
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            *(_QWORD *)(a1 + 8) = v90;
            goto LABEL_194;
          }
          if ((_DWORD)v16 != 301)
            goto LABEL_120;
          v40 = 0;
          v41 = 0;
          v22 = 0;
          *(_WORD *)(a1 + v6[89]) |= 4u;
          while (1)
          {
            v42 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v43 = v42 + 1;
            if (v42 == -1 || v43 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43;
            v22 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0)
              goto LABEL_150;
            v40 += 7;
            v13 = v41++ >= 9;
            if (v13)
            {
              LODWORD(v22) = 0;
              goto LABEL_152;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_150:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v22) = 0;
LABEL_152:
          v105 = 56;
          break;
      }
      goto LABEL_173;
    }
    if ((int)v16 > 24)
      break;
    if ((int)v16 > 10)
    {
      if ((_DWORD)v16 == 11)
      {
        v52 = PBReaderReadString(a2);
        v38 = objc_claimAutoreleasedReturnValue(v52);
        v39 = 32;
      }
      else
      {
        if ((_DWORD)v16 != 12)
          goto LABEL_120;
        v37 = PBReaderReadString(a2);
        v38 = objc_claimAutoreleasedReturnValue(v37);
        v39 = 40;
      }
    }
    else
    {
      if ((_DWORD)v16 != 1)
      {
        if ((_DWORD)v16 != 10)
          goto LABEL_120;
        v32 = 0;
        v33 = 0;
        v22 = 0;
        while (1)
        {
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v35 = v34 + 1;
          if (v34 == -1 || v35 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
          v22 |= (unint64_t)(v36 & 0x7F) << v32;
          if ((v36 & 0x80) == 0)
            goto LABEL_142;
          v32 += 7;
          v13 = v33++ >= 9;
          if (v13)
          {
            LODWORD(v22) = 0;
            goto LABEL_144;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_142:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v22) = 0;
LABEL_144:
        v105 = 24;
LABEL_173:
        *(_DWORD *)(a1 + v105) = v22;
        goto LABEL_194;
      }
      v51 = PBReaderReadString(a2);
      v38 = objc_claimAutoreleasedReturnValue(v51);
      v39 = 96;
    }
LABEL_133:
    v102 = *(void **)(a1 + v39);
    *(_QWORD *)(a1 + v39) = v38;

LABEL_194:
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  switch((int)v16)
  {
    case 'd':
      v20 = 0;
      v21 = 0;
      v22 = 0;
      *(_WORD *)(a1 + v6[89]) |= 0x100u;
      while (2)
      {
        v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v24 = v23 + 1;
        if (v23 == -1 || v24 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        else
        {
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if (v25 < 0)
          {
            v20 += 7;
            v13 = v21++ >= 9;
            if (v13)
            {
              LODWORD(v22) = 0;
              goto LABEL_172;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v22) = 0;
LABEL_172:
      v105 = 184;
      goto LABEL_173;
    case 'e':
      v92 = 0;
      v93 = 0;
      v94 = 0;
      *(_WORD *)(a1 + v6[89]) |= 0x2000u;
      while (2)
      {
        v95 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v96 = v95 + 1;
        if (v95 == -1 || v96 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        }
        else
        {
          v97 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v95);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v96;
          v94 |= (unint64_t)(v97 & 0x7F) << v92;
          if (v97 < 0)
          {
            v92 += 7;
            v13 = v93++ >= 9;
            if (v13)
            {
              v94 = 0;
              goto LABEL_177;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v94 = 0;
LABEL_177:
      v106 = v94 != 0;
      v107 = 192;
      goto LABEL_182;
    case 'f':
      v98 = PBReaderReadString(a2);
      v38 = objc_claimAutoreleasedReturnValue(v98);
      v39 = 168;
      goto LABEL_133;
    case 'g':
      v99 = PBReaderReadString(a2);
      v38 = objc_claimAutoreleasedReturnValue(v99);
      v39 = 112;
      goto LABEL_133;
    case 'h':
      v100 = PBReaderReadString(a2);
      v38 = objc_claimAutoreleasedReturnValue(v100);
      v39 = 72;
      goto LABEL_133;
    case 'i':
      v101 = PBReaderReadString(a2);
      v38 = objc_claimAutoreleasedReturnValue(v101);
      v39 = 88;
      goto LABEL_133;
    case 'j':
    case 'k':
    case 'l':
    case 'm':
      goto LABEL_120;
    case 'n':
      *(_WORD *)(a1 + v6[89]) |= 0x10u;
      v103 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v103 <= 0xFFFFFFFFFFFFFFFBLL && v103 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        v104 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v103);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v103 + 4;
      }
      else
      {
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        v104 = 0;
      }
      *(_DWORD *)(a1 + 80) = v104;
      goto LABEL_194;
    default:
      if ((_DWORD)v16 != 25)
      {
        if ((_DWORD)v16 != 120)
        {
LABEL_120:
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_194;
        }
        v45 = 0;
        v46 = 0;
        v47 = 0;
        *(_WORD *)(a1 + v6[89]) |= 0x800u;
        while (1)
        {
          v48 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v50 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49;
          v47 |= (unint64_t)(v50 & 0x7F) << v45;
          if ((v50 & 0x80) == 0)
            goto LABEL_179;
          v45 += 7;
          v13 = v46++ >= 9;
          if (v13)
          {
            v47 = 0;
            goto LABEL_181;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_179:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v47 = 0;
LABEL_181:
        v106 = v47 != 0;
        v107 = 190;
        goto LABEL_182;
      }
      v59 = v6;
      v60 = v3;
      v61 = v2;
      v62 = objc_alloc_init(APPBParameter);
      objc_msgSend((id)a1, "addParameters:", v62);
      v109 = 0;
      v110 = 0;
      if (PBReaderPlaceMark(a2, &v109) && APPBParameterReadFrom((uint64_t)v62, a2))
      {
LABEL_139:
        PBReaderRecallMark(a2, &v109);
LABEL_140:

        v2 = v61;
        v3 = v60;
        v6 = v59;
        goto LABEL_194;
      }
LABEL_196:

      return 0;
  }
}

void sub_1000F2FD8(id a1)
{
  void *v1;

  v1 = (void *)qword_1002698A8;
  qword_1002698A8 = (uint64_t)&off_10022AE98;

}

BOOL APPBLogAdContentErrorResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

void sub_1000F3B2C(id a1)
{
  void *v1;

  v1 = (void *)qword_1002698B8;
  qword_1002698B8 = (uint64_t)&off_10022AEC0;

}

BOOL APPBLogAnalyticsRequestReadFrom(char *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t Data;
  uint64_t v13;
  uint64_t v14;
  uint64_t String;
  uint64_t v16;
  uint64_t v17;
  APPBAnalyticsEvent *v18;
  _QWORD v20[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        Data = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(Data);
        v14 = 40;
        goto LABEL_22;
      case 2u:
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 8;
        goto LABEL_22;
      case 3u:
        v16 = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(v16);
        v14 = 16;
        goto LABEL_22;
      case 4u:
        v17 = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(v17);
        v14 = 24;
LABEL_22:
        v18 = *(APPBAnalyticsEvent **)&a1[v14];
        *(_QWORD *)&a1[v14] = v13;
        goto LABEL_23;
      case 0xAu:
        v18 = objc_alloc_init(APPBAnalyticsEvent);
        objc_msgSend(a1, "addEvents:", v18);
        v20[0] = 0;
        v20[1] = 0;
        if (PBReaderPlaceMark(a2, v20) && (APPBAnalyticsEventReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v20);
LABEL_23:

LABEL_24:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }

        return 0;
      default:
        if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
          return 0;
        goto LABEL_24;
    }
  }
}

id sub_1000F4B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setProperty:forKey:internal:", a3, a2, 0);
}

void sub_1000F4F3C(id a1)
{
  void *v1;

  v1 = (void *)qword_1002698C8;
  qword_1002698C8 = (uint64_t)&off_10022AEE8;

}

BOOL APPBThirdPartySegmentUpdateResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

uint64_t APPBAdFrequencyCapDataReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  uint64_t result;
  uint64_t v28;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 24) |= 1u;
      while (1)
      {
        v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0)
          goto LABEL_48;
        v18 += 7;
        v9 = v19++ >= 9;
        if (v9)
        {
          v20 = 0;
          goto LABEL_50;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_48:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v20 = 0;
LABEL_50:
      *(_QWORD *)(a1 + 8) = v20;
    }
    else
    {
      if ((_DWORD)v12 == 2)
      {
        v23 = 0;
        v24 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
          v15 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_52;
          v23 += 7;
          v9 = v24++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_54;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_54:
        v28 = 16;
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_44;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_46;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_44:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_46:
        v28 = 20;
      }
      *(_DWORD *)(a1 + v28) = v15;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL APPBLocalizedStringEntryReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 8;
LABEL_21:
        v16 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_23:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v15 = PBReaderReadString(a2);
    v13 = objc_claimAutoreleasedReturnValue(v15);
    v14 = 16;
    goto LABEL_21;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000F63B8(id a1)
{
  void *v1;

  v1 = (void *)qword_1002698D8;
  qword_1002698D8 = (uint64_t)&off_10022AF10;

}

uint64_t APPBSegmentUpdateRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t Data;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t String;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  uint64_t v81;
  uint64_t v82;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        v4 = 0;
        v5 = 0;
        v6 = 0;
        while (1)
        {
          v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v8 = v7 + 1;
          if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
          v6 |= (unint64_t)(v9 & 0x7F) << v4;
          if ((v9 & 0x80) == 0)
            goto LABEL_11;
          v4 += 7;
          v10 = v5++ >= 9;
          if (v10)
          {
            v6 = 0;
            v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v6 = 0;
LABEL_13:
        v12 = v6 & 7;
        if (!v11 && v12 != 4)
        {
          switch((v6 >> 3))
          {
            case 2u:
              Data = PBReaderReadData(a2);
              v15 = objc_claimAutoreleasedReturnValue(Data);
              v16 = 120;
              goto LABEL_50;
            case 3u:
              String = PBReaderReadString(a2);
              v15 = objc_claimAutoreleasedReturnValue(String);
              v16 = 144;
              goto LABEL_50;
            case 4u:
              v19 = 0;
              v20 = 0;
              v21 = 0;
              *(_BYTE *)(a1 + 160) |= 0x10u;
              while (2)
              {
                v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                v23 = v22 + 1;
                if (v22 == -1 || v23 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
                  v21 |= (unint64_t)(v24 & 0x7F) << v19;
                  if (v24 < 0)
                  {
                    v19 += 7;
                    v10 = v20++ >= 9;
                    if (v10)
                    {
                      v21 = 0;
                      goto LABEL_103;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v21 = 0;
LABEL_103:
              *(_BYTE *)(a1 + 156) = v21 != 0;
              goto LABEL_141;
            case 5u:
              v25 = PBReaderReadString(a2);
              v15 = objc_claimAutoreleasedReturnValue(v25);
              v16 = 96;
LABEL_50:
              v39 = *(void **)(a1 + v16);
              *(_QWORD *)(a1 + v16) = v15;

              goto LABEL_141;
            case 6u:
            case 7u:
LABEL_21:
              if ((PBReaderSkipValueWithTag(a2) & 1) != 0)
                goto LABEL_141;
              return 0;
            case 8u:
              *(_BYTE *)(a1 + 160) |= 1u;
              v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v27 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                v27 = 0;
              }
              v79 = 80;
              goto LABEL_138;
            case 9u:
              *(_BYTE *)(a1 + 160) |= 2u;
              v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v27 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                v27 = 0;
              }
              v79 = 88;
LABEL_138:
              *(_QWORD *)(a1 + v79) = v27;
              goto LABEL_141;
            case 0xAu:
              *(_BYTE *)(a1 + 160) |= 8u;
              v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v30 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                v30 = 0;
              }
              *(_DWORD *)(a1 + 152) = v30;
              goto LABEL_141;
            case 0xBu:
              v31 = 0;
              v32 = 0;
              v33 = 0;
              *(_BYTE *)(a1 + 160) |= 4u;
              while (2)
              {
                v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                v35 = v34 + 1;
                if (v34 == -1 || v35 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
                  *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
                  v33 |= (unint64_t)(v36 & 0x7F) << v31;
                  if (v36 < 0)
                  {
                    v31 += 7;
                    v10 = v32++ >= 9;
                    if (v10)
                    {
                      LODWORD(v33) = 0;
                      goto LABEL_107;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                LODWORD(v33) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 104) = v33;
              goto LABEL_141;
            default:
              switch((v6 >> 3))
              {
                case '\'':
                  v17 = PBReaderReadString(a2);
                  v15 = objc_claimAutoreleasedReturnValue(v17);
                  v16 = 136;
                  goto LABEL_50;
                case '(':
                  v37 = PBReaderReadString(a2);
                  v15 = objc_claimAutoreleasedReturnValue(v37);
                  v16 = 128;
                  goto LABEL_50;
                case ')':
                  v38 = PBReaderReadData(a2);
                  v15 = objc_claimAutoreleasedReturnValue(v38);
                  v16 = 112;
                  goto LABEL_50;
                case '*':
                  if (v12 != 2)
                  {
                    v61 = 0;
                    v62 = 0;
                    v63 = 0;
                    v64 = a1 + 56;
                    while (1)
                    {
                      v65 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                      v66 = v65 + 1;
                      if (v65 == -1 || v66 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                        goto LABEL_129;
                      v67 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
                      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66;
                      v63 |= (unint64_t)(v67 & 0x7F) << v61;
                      if ((v67 & 0x80) == 0)
                        goto LABEL_130;
                      v61 += 7;
                      v10 = v62++ >= 9;
                      if (v10)
                        goto LABEL_128;
                    }
                  }
                  v81 = 0;
                  v82 = 0;
                  result = PBReaderPlaceMark(a2, &v81);
                  if (!(_DWORD)result)
                    return result;
                  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2
                                                                                      + OBJC_IVAR___PBDataReader__length)
                       && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                  {
                    v40 = 0;
                    v41 = 0;
                    v42 = 0;
                    while (1)
                    {
                      v43 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                      v44 = v43 + 1;
                      if (v43 == -1 || v44 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                        break;
                      v45 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
                      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44;
                      v42 |= (unint64_t)(v45 & 0x7F) << v40;
                      if ((v45 & 0x80) == 0)
                        goto LABEL_63;
                      v40 += 7;
                      v10 = v41++ >= 9;
                      if (v10)
                      {
                        v46 = 0;
                        goto LABEL_66;
                      }
                    }
                    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_63:
                    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                      v46 = 0;
                    else
                      v46 = v42;
LABEL_66:
                    PBRepeatedInt32Add(a1 + 56, v46);
                  }
                  goto LABEL_99;
                case '+':
                  if (v12 != 2)
                  {
                    v68 = 0;
                    v69 = 0;
                    v63 = 0;
                    v64 = a1 + 32;
                    while (1)
                    {
                      v70 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                      v71 = v70 + 1;
                      if (v70 == -1 || v71 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                        goto LABEL_129;
                      v72 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v70);
                      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v71;
                      v63 |= (unint64_t)(v72 & 0x7F) << v68;
                      if ((v72 & 0x80) == 0)
                        goto LABEL_130;
                      v68 += 7;
                      v10 = v69++ >= 9;
                      if (v10)
                        goto LABEL_128;
                    }
                  }
                  v81 = 0;
                  v82 = 0;
                  result = PBReaderPlaceMark(a2, &v81);
                  if (!(_DWORD)result)
                    return result;
                  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2
                                                                                      + OBJC_IVAR___PBDataReader__length)
                       && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                  {
                    v47 = 0;
                    v48 = 0;
                    v49 = 0;
                    while (1)
                    {
                      v50 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                        break;
                      v52 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
                      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51;
                      v49 |= (unint64_t)(v52 & 0x7F) << v47;
                      if ((v52 & 0x80) == 0)
                        goto LABEL_79;
                      v47 += 7;
                      v10 = v48++ >= 9;
                      if (v10)
                      {
                        v53 = 0;
                        goto LABEL_82;
                      }
                    }
                    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_79:
                    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                      v53 = 0;
                    else
                      v53 = v49;
LABEL_82:
                    PBRepeatedInt32Add(a1 + 32, v53);
                  }
                  goto LABEL_99;
                case ',':
                  if (v12 == 2)
                  {
                    v81 = 0;
                    v82 = 0;
                    result = PBReaderPlaceMark(a2, &v81);
                    if (!(_DWORD)result)
                      return result;
                    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2
                                                                                        + OBJC_IVAR___PBDataReader__length)
                         && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                    {
                      v54 = 0;
                      v55 = 0;
                      v56 = 0;
                      while (1)
                      {
                        v57 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                        v58 = v57 + 1;
                        if (v57 == -1 || v58 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                          break;
                        v59 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
                        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58;
                        v56 |= (unint64_t)(v59 & 0x7F) << v54;
                        if ((v59 & 0x80) == 0)
                          goto LABEL_95;
                        v54 += 7;
                        v10 = v55++ >= 9;
                        if (v10)
                        {
                          v60 = 0;
                          goto LABEL_98;
                        }
                      }
                      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_95:
                      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                        v60 = 0;
                      else
                        v60 = v56;
LABEL_98:
                      PBRepeatedInt32Add(a1 + 8, v60);
                    }
LABEL_99:
                    PBReaderRecallMark(a2, &v81);
                  }
                  else
                  {
                    v73 = 0;
                    v74 = 0;
                    v63 = 0;
                    v64 = a1 + 8;
                    while (1)
                    {
                      v75 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                      v76 = v75 + 1;
                      if (v75 == -1 || v76 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                        break;
                      v77 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v75);
                      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v76;
                      v63 |= (unint64_t)(v77 & 0x7F) << v73;
                      if ((v77 & 0x80) == 0)
                        goto LABEL_130;
                      v73 += 7;
                      v10 = v74++ >= 9;
                      if (v10)
                      {
LABEL_128:
                        v78 = 0;
                        goto LABEL_133;
                      }
                    }
LABEL_129:
                    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_130:
                    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                      v78 = 0;
                    else
                      v78 = v63;
LABEL_133:
                    PBRepeatedInt32Add(v64, v78);
                  }
LABEL_141:
                  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2
                                                                                    + OBJC_IVAR___PBDataReader__length))
                    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
                  continue;
                default:
                  goto LABEL_21;
              }
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000F9420(id a1)
{
  void *v1;

  v1 = (void *)qword_1002698E8;
  qword_1002698E8 = (uint64_t)&off_10022AF38;

}

BOOL APPBLogAdEventRequestReadFrom(id *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  APPBLogMetaData *v12;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        v12 = objc_alloc_init(APPBLogMetaData);
        objc_storeStrong(a1 + 2, v12);
        v14 = 0;
        v15 = 0;
        if (!PBReaderPlaceMark(a2, &v14) || (APPBLogMetaDataReadFrom(v12, a2) & 1) == 0)
          goto LABEL_28;
LABEL_24:
        PBReaderRecallMark(a2, &v14);

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v12 = objc_alloc_init(APPBAdEvent);
    objc_msgSend(a1, "addEvent:", v12);
    v14 = 0;
    v15 = 0;
    if (!PBReaderPlaceMark(a2, &v14) || (APPBAdEventReadFrom((uint64_t)v12, a2) & 1) == 0)
    {
LABEL_28:

      return 0;
    }
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000F9F58(id a1)
{
  void *v1;

  v1 = (void *)qword_1002698F8;
  qword_1002698F8 = (uint64_t)&off_10022AF60;

}

uint64_t APPBSegmentUpdateResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v11;
  unint64_t v13;
  uint64_t String;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v13 = v6 >> 3;
    if ((v6 >> 3) == 4)
    {
      *(_BYTE *)(a1 + 32) |= 1u;
      v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 8;
      }
      else
      {
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        v18 = 0;
      }
      v21 = 8;
    }
    else
    {
      if ((_DWORD)v13 != 3)
      {
        if ((_DWORD)v13 == 2)
        {
          String = PBReaderReadString(a2);
          v15 = objc_claimAutoreleasedReturnValue(String);
          v16 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v15;

        }
        else
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
        }
        continue;
      }
      *(_BYTE *)(a1 + 32) |= 2u;
      v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
      }
      else
      {
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        v18 = 0;
      }
      v21 = 16;
    }
    *(_QWORD *)(a1 + v21) = v18;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000FA948(id a1)
{
  void *v1;

  v1 = (void *)qword_100269908;
  qword_100269908 = (uint64_t)&off_10022AF88;

}

uint64_t APPBAggregateScalarMetricReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t String;
  void *v22;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 100)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      *(_BYTE *)(a1 + 32) |= 1u;
      while (1)
      {
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 == -1 || v19 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          goto LABEL_33;
        v16 += 7;
        v9 = v17++ >= 9;
        if (v9)
        {
          LODWORD(v18) = 0;
          goto LABEL_35;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v18) = 0;
LABEL_35:
      *(_DWORD *)(a1 + 16) = v18;
    }
    else
    {
      if ((_DWORD)v12 == 2)
      {
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = 8;
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v13 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        v15 = 24;
      }
      v22 = *(void **)(a1 + v15);
      *(_QWORD *)(a1 + v15) = v14;

    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t APPBRequestPropertiesReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  uint64_t String;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  int v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t Data;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  void *v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  uint64_t v162;
  BOOL v163;
  uint64_t v164;
  uint64_t v165;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 2u:
        String = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(String);
        v15 = 152;
        goto LABEL_186;
      case 3u:
        v16 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v16);
        v15 = 48;
        goto LABEL_186;
      case 4u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 0x4000u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if (v22 < 0)
            {
              v17 += 7;
              v10 = v18++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_218;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_218:
        v162 = 248;
        goto LABEL_300;
      case 5u:
        v23 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v23);
        v15 = 104;
        goto LABEL_186;
      case 6u:
        v24 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v24);
        v15 = 96;
        goto LABEL_186;
      case 9u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_DWORD *)(a1 + 304) |= 0x800000u;
        while (2)
        {
          v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v10 = v27++ >= 9;
              if (v10)
              {
                v28 = 0;
                goto LABEL_222;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v28 = 0;
LABEL_222:
        v163 = v28 != 0;
        v164 = 300;
        goto LABEL_295;
      case 0xAu:
        v32 = 0;
        v33 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 0x20u;
        while (2)
        {
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v35 = v34 + 1;
          if (v34 == -1 || v35 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
            v19 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              v10 = v33++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_226;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_226:
        v162 = 112;
        goto LABEL_300;
      case 0xEu:
        *(_DWORD *)(a1 + 304) |= 0x8000u;
        v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v38 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v38 = 0;
        }
        v165 = 272;
        goto LABEL_317;
      case 0xFu:
        v39 = 0;
        v40 = 0;
        v19 = 0;
        while (2)
        {
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42;
            v19 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              v10 = v40++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_230;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_230:
        v162 = 260;
        goto LABEL_300;
      case 0x10u:
        v44 = 0;
        v45 = 0;
        v19 = 0;
        while (2)
        {
          v46 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47;
            v19 |= (unint64_t)(v48 & 0x7F) << v44;
            if (v48 < 0)
            {
              v44 += 7;
              v10 = v45++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_234;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_234:
        v162 = 256;
        goto LABEL_300;
      case 0x11u:
        v49 = 0;
        v50 = 0;
        v19 = 0;
        while (2)
        {
          v51 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52;
            v19 |= (unint64_t)(v53 & 0x7F) << v49;
            if (v53 < 0)
            {
              v49 += 7;
              v10 = v50++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_238;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_238:
        v162 = 252;
        goto LABEL_300;
      case 0x13u:
        v54 = PBReaderReadString(a2);
        v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
        if (v55)
          objc_msgSend((id)a1, "addUserKeyboard:", v55);

        continue;
      case 0x15u:
        *(_DWORD *)(a1 + 304) |= 1u;
        v56 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v56 <= 0xFFFFFFFFFFFFFFF7 && v56 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v57 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v57 = 0;
        }
        *(_QWORD *)(a1 + 8) = v57;
        continue;
      case 0x16u:
        *(_DWORD *)(a1 + 304) |= 0x400u;
        v58 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v58 <= 0xFFFFFFFFFFFFFFFBLL && v58 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v38 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v38 = 0;
        }
        v165 = 196;
        goto LABEL_317;
      case 0x17u:
        v59 = 0;
        v60 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 0x800u;
        while (2)
        {
          v61 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62;
            v19 |= (unint64_t)(v63 & 0x7F) << v59;
            if (v63 < 0)
            {
              v59 += 7;
              v10 = v60++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_242;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_242:
        v162 = 200;
        goto LABEL_300;
      case 0x18u:
        *(_DWORD *)(a1 + 304) |= 0x1000u;
        v64 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v64 <= 0xFFFFFFFFFFFFFFFBLL && v64 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v38 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v38 = 0;
        }
        v165 = 204;
        goto LABEL_317;
      case 0x19u:
        *(_DWORD *)(a1 + 304) |= 0x80u;
        v65 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v38 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v65 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v38 = 0;
        }
        v165 = 184;
        goto LABEL_317;
      case 0x1Au:
        *(_DWORD *)(a1 + 304) |= 0x100u;
        v66 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v66 <= 0xFFFFFFFFFFFFFFFBLL && v66 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v38 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v38 = 0;
        }
        v165 = 188;
        goto LABEL_317;
      case 0x1Bu:
        *(_DWORD *)(a1 + 304) |= 0x200u;
        v67 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v67 <= 0xFFFFFFFFFFFFFFFBLL && v67 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v38 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v67);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v38 = 0;
        }
        v165 = 192;
        goto LABEL_317;
      case 0x1Cu:
        Data = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(Data);
        v15 = 160;
        goto LABEL_186;
      case 0x1Du:
        v69 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v69);
        v15 = 64;
        goto LABEL_186;
      case 0x1Eu:
        v70 = 0;
        v71 = 0;
        v72 = 0;
        *(_DWORD *)(a1 + 304) |= 0x200000u;
        while (2)
        {
          v73 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v74 = v73 + 1;
          if (v73 == -1 || v74 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v75 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v73);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v74;
            v72 |= (unint64_t)(v75 & 0x7F) << v70;
            if (v75 < 0)
            {
              v70 += 7;
              v10 = v71++ >= 9;
              if (v10)
              {
                v72 = 0;
                goto LABEL_246;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v72 = 0;
LABEL_246:
        v163 = v72 != 0;
        v164 = 298;
        goto LABEL_295;
      case 0x1Fu:
        v76 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v76);
        v15 = 128;
        goto LABEL_186;
      case 0x20u:
        v77 = 0;
        v78 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 0x10u;
        while (2)
        {
          v79 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v80 = v79 + 1;
          if (v79 == -1 || v80 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v81 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v79);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v80;
            v19 |= (unint64_t)(v81 & 0x7F) << v77;
            if (v81 < 0)
            {
              v77 += 7;
              v10 = v78++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_250;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_250:
        v162 = 80;
        goto LABEL_300;
      case 0x21u:
        v82 = 0;
        v83 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 0x2000u;
        while (2)
        {
          v84 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v85 = v84 + 1;
          if (v84 == -1 || v85 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v86 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v84);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v85;
            v19 |= (unint64_t)(v86 & 0x7F) << v82;
            if (v86 < 0)
            {
              v82 += 7;
              v10 = v83++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_254;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_254:
        v162 = 224;
        goto LABEL_300;
      case 0x22u:
        v87 = 0;
        v88 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 0x10000u;
        while (2)
        {
          v89 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v90 = v89 + 1;
          if (v89 == -1 || v90 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v91 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v89);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v90;
            v19 |= (unint64_t)(v91 & 0x7F) << v87;
            if (v91 < 0)
            {
              v87 += 7;
              v10 = v88++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_258;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_258:
        v162 = 276;
        goto LABEL_300;
      case 0x23u:
        v92 = 0;
        v93 = 0;
        v94 = 0;
        *(_DWORD *)(a1 + 304) |= 0x100000u;
        while (2)
        {
          v95 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v96 = v95 + 1;
          if (v95 == -1 || v96 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v97 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v95);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v96;
            v94 |= (unint64_t)(v97 & 0x7F) << v92;
            if (v97 < 0)
            {
              v92 += 7;
              v10 = v93++ >= 9;
              if (v10)
              {
                v94 = 0;
                goto LABEL_262;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v94 = 0;
LABEL_262:
        v163 = v94 != 0;
        v164 = 297;
        goto LABEL_295;
      case 0x24u:
        v98 = 0;
        v99 = 0;
        v100 = 0;
        *(_DWORD *)(a1 + 304) |= 0x80000u;
        while (2)
        {
          v101 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v102 = v101 + 1;
          if (v101 == -1 || v102 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v103 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v101);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v102;
            v100 |= (unint64_t)(v103 & 0x7F) << v98;
            if (v103 < 0)
            {
              v98 += 7;
              v10 = v99++ >= 9;
              if (v10)
              {
                v100 = 0;
                goto LABEL_266;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v100 = 0;
LABEL_266:
        v163 = v100 != 0;
        v164 = 296;
        goto LABEL_295;
      case 0x27u:
        v104 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v104);
        v15 = 232;
        goto LABEL_186;
      case 0x28u:
        v105 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v105);
        v15 = 208;
        goto LABEL_186;
      case 0x29u:
        *(_DWORD *)(a1 + 304) |= 0x40000u;
        v106 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v106 <= 0xFFFFFFFFFFFFFFFBLL && v106 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v38 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v106);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v106 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v38 = 0;
        }
        v165 = 284;
LABEL_317:
        *(_DWORD *)(a1 + v165) = v38;
        continue;
      case 0x2Au:
        v107 = 0;
        v108 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 0x20000u;
        while (2)
        {
          v109 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v110 = v109 + 1;
          if (v109 == -1 || v110 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v111 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v109);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v110;
            v19 |= (unint64_t)(v111 & 0x7F) << v107;
            if (v111 < 0)
            {
              v107 += 7;
              v10 = v108++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_270;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_270:
        v162 = 280;
        goto LABEL_300;
      case 0x2Bu:
        v112 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v112);
        v15 = 168;
        goto LABEL_186;
      case 0x2Du:
        v113 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v113);
        v15 = 72;
        goto LABEL_186;
      case 0x30u:
        v114 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v114);
        v15 = 40;
        goto LABEL_186;
      case 0x31u:
        v115 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v115);
        v15 = 120;
        goto LABEL_186;
      case 0x32u:
        v116 = 0;
        v117 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 0x40u;
        while (2)
        {
          v118 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v119 = v118 + 1;
          if (v118 == -1 || v119 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v120 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v118);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v119;
            v19 |= (unint64_t)(v120 & 0x7F) << v116;
            if (v120 < 0)
            {
              v116 += 7;
              v10 = v117++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_274;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_274:
        v162 = 144;
        goto LABEL_300;
      case 0x33u:
        v121 = 0;
        v122 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 2u;
        while (2)
        {
          v123 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v124 = v123 + 1;
          if (v123 == -1 || v124 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v125 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v123);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v124;
            v19 |= (unint64_t)(v125 & 0x7F) << v121;
            if (v125 < 0)
            {
              v121 += 7;
              v10 = v122++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_278;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_278:
        v162 = 16;
        goto LABEL_300;
      case 0x34u:
        v126 = PBReaderReadData(a2);
        v14 = objc_claimAutoreleasedReturnValue(v126);
        v15 = 136;
        goto LABEL_186;
      case 0x35u:
        v127 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v127);
        v15 = 216;
        goto LABEL_186;
      case 0x36u:
        v128 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v128);
        v15 = 24;
        goto LABEL_186;
      case 0x37u:
        v129 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v129);
        v15 = 264;
        goto LABEL_186;
      case 0x38u:
        v130 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v130);
        v15 = 176;
        goto LABEL_186;
      case 0x39u:
        v131 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v131);
        v15 = 240;
        goto LABEL_186;
      case 0x3Au:
        v132 = 0;
        v133 = 0;
        v134 = 0;
        *(_DWORD *)(a1 + 304) |= 0x1000000u;
        while (2)
        {
          v135 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v136 = v135 + 1;
          if (v135 == -1 || v136 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v137 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v135);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v136;
            v134 |= (unint64_t)(v137 & 0x7F) << v132;
            if (v137 < 0)
            {
              v132 += 7;
              v10 = v133++ >= 9;
              if (v10)
              {
                v134 = 0;
                goto LABEL_282;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v134 = 0;
LABEL_282:
        v163 = v134 != 0;
        v164 = 301;
        goto LABEL_295;
      case 0x3Bu:
        v138 = PBReaderReadString(a2);
        v14 = objc_claimAutoreleasedReturnValue(v138);
        v15 = 88;
LABEL_186:
        v139 = *(void **)(a1 + v15);
        *(_QWORD *)(a1 + v15) = v14;

        continue;
      case 0x3Cu:
        v140 = 0;
        v141 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 4u;
        while (2)
        {
          v142 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v143 = v142 + 1;
          if (v142 == -1 || v143 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v144 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v142);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v143;
            v19 |= (unint64_t)(v144 & 0x7F) << v140;
            if (v144 < 0)
            {
              v140 += 7;
              v10 = v141++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_286;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_286:
        v162 = 32;
        goto LABEL_300;
      case 0x3Du:
        v145 = 0;
        v146 = 0;
        v147 = 0;
        *(_DWORD *)(a1 + 304) |= 0x2000000u;
        while (2)
        {
          v148 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v149 = v148 + 1;
          if (v148 == -1 || v149 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v150 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v148);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v149;
            v147 |= (unint64_t)(v150 & 0x7F) << v145;
            if (v150 < 0)
            {
              v145 += 7;
              v10 = v146++ >= 9;
              if (v10)
              {
                v147 = 0;
                goto LABEL_290;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v147 = 0;
LABEL_290:
        v163 = v147 != 0;
        v164 = 302;
        goto LABEL_295;
      case 0x3Eu:
        v151 = 0;
        v152 = 0;
        v153 = 0;
        *(_DWORD *)(a1 + 304) |= 0x400000u;
        while (2)
        {
          v154 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v155 = v154 + 1;
          if (v154 == -1 || v155 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v156 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v154);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v155;
            v153 |= (unint64_t)(v156 & 0x7F) << v151;
            if (v156 < 0)
            {
              v151 += 7;
              v10 = v152++ >= 9;
              if (v10)
              {
                v153 = 0;
                goto LABEL_294;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v153 = 0;
LABEL_294:
        v163 = v153 != 0;
        v164 = 299;
LABEL_295:
        *(_BYTE *)(a1 + v164) = v163;
        continue;
      case 0x3Fu:
        v157 = 0;
        v158 = 0;
        v19 = 0;
        *(_DWORD *)(a1 + 304) |= 8u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v159 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v160 = v159 + 1;
      if (v159 == -1 || v160 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v161 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v159);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v160;
      v19 |= (unint64_t)(v161 & 0x7F) << v157;
      if ((v161 & 0x80) == 0)
        goto LABEL_297;
      v157 += 7;
      v10 = v158++ >= 9;
      if (v10)
      {
        LODWORD(v19) = 0;
        goto LABEL_299;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_297:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v19) = 0;
LABEL_299:
    v162 = 56;
LABEL_300:
    *(_DWORD *)(a1 + v162) = v19;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL APPBTargetingCriteriaReadFrom(_QWORD *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = (void *)a1[1];
        a1[1] = v13;
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v15 = PBReaderReadString(a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v15);
    if (v14)
      objc_msgSend(a1, "addCriteriaValues:", v14);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t APPBAssetInfoReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t String;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 48) |= 2u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v17 = v16 + 1;
          if (v16 == -1 || v17 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0)
            goto LABEL_56;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_58:
        v43 = 16;
        goto LABEL_67;
      case 2u:
        v20 = 0;
        v21 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 48) |= 0x10u;
        while (2)
        {
          v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
            v15 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              v10 = v21++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_62:
        v43 = 40;
        goto LABEL_67;
      case 3u:
        v25 = 0;
        v26 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 48) |= 4u;
        while (2)
        {
          v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v15 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v10 = v26++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_66:
        v43 = 20;
LABEL_67:
        *(_DWORD *)(a1 + v43) = v15;
        continue;
      case 4u:
        String = PBReaderReadString(a2);
        v31 = objc_claimAutoreleasedReturnValue(String);
        v32 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v31;

        continue;
      case 5u:
        *(_BYTE *)(a1 + 48) |= 8u;
        v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v34 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v34 = 0;
        }
        *(_DWORD *)(a1 + 24) = v34;
        continue;
      case 6u:
        *(_BYTE *)(a1 + 48) |= 1u;
        v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v36 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v36 = 0;
        }
        *(_QWORD *)(a1 + 8) = v36;
        continue;
      case 7u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 48) |= 0x20u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v40 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v41 = v40 + 1;
      if (v40 == -1 || v41 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v42 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41;
      v39 |= (unint64_t)(v42 & 0x7F) << v37;
      if ((v42 & 0x80) == 0)
        goto LABEL_69;
      v37 += 7;
      v10 = v38++ >= 9;
      if (v10)
      {
        v39 = 0;
        goto LABEL_71;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_69:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v39 = 0;
LABEL_71:
    *(_BYTE *)(a1 + 44) = v39 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id *sub_100103214(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id *v17;
  id v20;

  v20 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  if (a1)
  {
    v17 = objc_msgSend(a1, "init");
    a1 = v17;
    if (v17)
    {
      objc_storeStrong(v17 + 1, a2);
      objc_storeStrong(a1 + 6, a3);
      objc_storeStrong(a1 + 2, a4);
      objc_storeStrong(a1 + 3, a5);
      objc_storeStrong(a1 + 4, a6);
      objc_storeStrong(a1 + 5, a7);
    }
  }

  return a1;
}

uint64_t sub_100103434(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_100103440(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

uint64_t sub_10010344C(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

uint64_t sub_100103458(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

uint64_t sub_100103464(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 40);
  return result;
}

void sub_1001036D4(id a1)
{
  void *v1;

  v1 = (void *)qword_100269918;
  qword_100269918 = (uint64_t)&off_10022AFB0;

}

uint64_t APPBNativeMediaCreativeMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  uint64_t String;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 32;
        goto LABEL_51;
      case 2u:
        v16 = 0;
        v17 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (2)
        {
          v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v18 |= (unint64_t)(v20 & 0x7F) << v16;
            if (v20 < 0)
            {
              v16 += 7;
              v9 = v17++ >= 9;
              if (v9)
              {
                LODWORD(v18) = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v18) = 0;
LABEL_55:
        v36 = 40;
        goto LABEL_68;
      case 3u:
        v21 = 0;
        v22 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 52) |= 1u;
        while (2)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v18 |= (unint64_t)(v24 & 0x7F) << v21;
            if (v24 < 0)
            {
              v21 += 7;
              v9 = v22++ >= 9;
              if (v9)
              {
                LODWORD(v18) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v18) = 0;
LABEL_59:
        v36 = 24;
        goto LABEL_68;
      case 4u:
        v25 = 0;
        v26 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        while (2)
        {
          v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v18 |= (unint64_t)(v28 & 0x7F) << v25;
            if (v28 < 0)
            {
              v25 += 7;
              v9 = v26++ >= 9;
              if (v9)
              {
                LODWORD(v18) = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v18) = 0;
LABEL_63:
        v36 = 44;
        goto LABEL_68;
      case 5u:
        v29 = 0;
        v30 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 52) |= 8u;
        break;
      case 6u:
        v33 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v33);
        v14 = 8;
        goto LABEL_51;
      case 7u:
        v34 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v34);
        v14 = 16;
LABEL_51:
        v35 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v31 == -1 || v31 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v32 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
      v18 |= (unint64_t)(v32 & 0x7F) << v29;
      if ((v32 & 0x80) == 0)
        goto LABEL_65;
      v29 += 7;
      v9 = v30++ >= 9;
      if (v9)
      {
        LODWORD(v18) = 0;
        goto LABEL_67;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_65:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v18) = 0;
LABEL_67:
    v36 = 48;
LABEL_68:
    *(_DWORD *)(a1 + v36) = v18;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001047B4(id a1)
{
  void *v1;

  v1 = (void *)qword_100269928;
  qword_100269928 = (uint64_t)&off_10022AFD8;

}

uint64_t APPBServerErrorRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  APPBLogMetaData *v12;
  uint64_t result;
  char v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t String;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = objc_alloc_init(APPBLogMetaData);
        objc_storeStrong((id *)(a1 + 40), v12);
        v23 = 0;
        v24 = 0;
        if (PBReaderPlaceMark(a2, &v23) && (APPBLogMetaDataReadFrom(v12, a2) & 1) != 0)
          goto LABEL_32;
        goto LABEL_43;
      case 2u:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 48) |= 1u;
        while (2)
        {
          v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1 || v17 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
            v16 |= (unint64_t)(v18 & 0x7F) << v14;
            if (v18 < 0)
            {
              v14 += 7;
              v9 = v15++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_40:
        *(_DWORD *)(a1 + 16) = v16;
        goto LABEL_41;
      case 3u:
        v12 = objc_alloc_init(APPBAdData);
        objc_storeStrong((id *)(a1 + 8), v12);
        v23 = 0;
        v24 = 0;
        if (PBReaderPlaceMark(a2, &v23) && (APPBAdDataReadFrom((uint64_t)v12, a2) & 1) != 0)
        {
LABEL_32:
          PBReaderRecallMark(a2, &v23);
LABEL_35:

LABEL_41:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_43:

        return 0;
      case 4u:
        String = PBReaderReadString(a2);
        v12 = (APPBLogMetaData *)objc_claimAutoreleasedReturnValue(String);
        if (v12)
          objc_msgSend((id)a1, "addFailingURLs:", v12);
        goto LABEL_35;
      case 5u:
        v20 = PBReaderReadString(a2);
        v21 = objc_claimAutoreleasedReturnValue(v20);
        v22 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v21;

        goto LABEL_41;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

void sub_100105934(id a1)
{
  void *v1;

  v1 = (void *)qword_100269938;
  qword_100269938 = (uint64_t)&off_10022B000;

}

uint64_t APPBLogImpressionRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  APPBLogMetaData *v13;
  uint64_t result;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t Data;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t String;
  void *v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = objc_alloc_init(APPBLogMetaData);
        objc_storeStrong((id *)(a1 + 24), v13);
        v48 = 0;
        v49 = 0;
        if (PBReaderPlaceMark(a2, &v48) && (APPBLogMetaDataReadFrom(v13, a2) & 1) != 0)
          goto LABEL_25;
        goto LABEL_81;
      case 2u:
        v13 = objc_alloc_init(APPBAssetMetric);
        objc_msgSend((id)a1, "addMetric:", v13);
        v48 = 0;
        v49 = 0;
        if (PBReaderPlaceMark(a2, &v48) && (APPBAssetMetricReadFrom((uint64_t)v13, a2) & 1) != 0)
        {
LABEL_25:
          PBReaderRecallMark(a2, &v48);

LABEL_79:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_81:

        return 0;
      case 3u:
        v15 = 0;
        v16 = 0;
        v17 = 0;
        *(_BYTE *)(a1 + 52) |= 8u;
        while (2)
        {
          v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
            v17 |= (unint64_t)(v20 & 0x7F) << v15;
            if (v20 < 0)
            {
              v15 += 7;
              v10 = v16++ >= 9;
              if (v10)
              {
                v17 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v17 = 0;
LABEL_63:
        v46 = v17 != 0;
        v47 = 49;
        goto LABEL_72;
      case 4u:
        Data = PBReaderReadData(a2);
        v22 = objc_claimAutoreleasedReturnValue(Data);
        v23 = 16;
        goto LABEL_59;
      case 5u:
        *(_BYTE *)(a1 + 52) |= 1u;
        v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v25 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v25 = 0;
        }
        *(_DWORD *)(a1 + 40) = v25;
        goto LABEL_79;
      case 6u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        while (2)
        {
          v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v10 = v27++ >= 9;
              if (v10)
              {
                v28 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v28 = 0;
LABEL_67:
        v46 = v28 != 0;
        v47 = 48;
        goto LABEL_72;
      case 7u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 52) |= 0x10u;
        while (2)
        {
          v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v10 = v33++ >= 9;
              if (v10)
              {
                v34 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v34 = 0;
LABEL_71:
        v46 = v34 != 0;
        v47 = 50;
LABEL_72:
        *(_BYTE *)(a1 + v47) = v46;
        goto LABEL_79;
      case 8u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (2)
        {
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v10 = v39++ >= 9;
              if (v10)
              {
                LODWORD(v40) = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v40) = 0;
LABEL_76:
        *(_DWORD *)(a1 + 44) = v40;
        goto LABEL_79;
      case 9u:
        String = PBReaderReadString(a2);
        v22 = objc_claimAutoreleasedReturnValue(String);
        v23 = 8;
LABEL_59:
        v45 = *(void **)(a1 + v23);
        *(_QWORD *)(a1 + v23) = v22;

        goto LABEL_79;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_79;
    }
  }
}

void sub_100107664(id a1)
{
  void *v1;

  v1 = (void *)qword_100269948;
  qword_100269948 = (uint64_t)&off_10022B028;

}

uint64_t APPBThirdPartySegmentUpdateRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  uint64_t Data;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t String;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  BOOL v38;
  uint64_t v39;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        Data = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(Data);
        v14 = 32;
        goto LABEL_49;
      case 2u:
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = 8;
        goto LABEL_49;
      case 3u:
        v17 = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(v17);
        v14 = 16;
        goto LABEL_49;
      case 4u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 68) |= 1u;
        while (2)
        {
          v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v20 |= (unint64_t)(v22 & 0x7F) << v18;
            if (v22 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v20) = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v20) = 0;
LABEL_53:
        *(_DWORD *)(a1 + 40) = v20;
        continue;
      case 5u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 68) |= 4u;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if (v27 < 0)
            {
              v23 += 7;
              v9 = v24++ >= 9;
              if (v9)
              {
                v25 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v25 = 0;
LABEL_57:
        v38 = v25 != 0;
        v39 = 65;
        goto LABEL_62;
      case 6u:
        v28 = PBReaderReadString(a2);
        v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        if (v29)
          objc_msgSend((id)a1, "addSegmentIdentifiers:", v29);

        continue;
      case 7u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 68) |= 2u;
        break;
      case 8u:
        v35 = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(v35);
        v14 = 56;
        goto LABEL_49;
      case 9u:
        v36 = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(v36);
        v14 = 24;
LABEL_49:
        v37 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v33 == -1 || v33 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
      v32 |= (unint64_t)(v34 & 0x7F) << v30;
      if ((v34 & 0x80) == 0)
        goto LABEL_59;
      v30 += 7;
      v9 = v31++ >= 9;
      if (v9)
      {
        v32 = 0;
        goto LABEL_61;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v32 = 0;
LABEL_61:
    v38 = v32 != 0;
    v39 = 64;
LABEL_62:
    *(_BYTE *)(a1 + v39) = v38;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t APPBMerchantReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  int v11;
  unint64_t v13;
  uint64_t String;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Data;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    v11 = v6 & 7;
    if (v10 || v11 == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v13 = v6 >> 3;
    if ((int)(v6 >> 3) <= 99)
    {
      switch((int)v13)
      {
        case 1:
          String = PBReaderReadString(a2);
          v15 = objc_claimAutoreleasedReturnValue(String);
          v16 = 64;
          goto LABEL_62;
        case 2:
          v19 = PBReaderReadString(a2);
          v15 = objc_claimAutoreleasedReturnValue(v19);
          v16 = 56;
          goto LABEL_62;
        case 3:
          if (v11 != 2)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            v39 = a1 + 32;
            while (1)
            {
              v40 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v40 == -1 || v40 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                goto LABEL_82;
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if ((v41 & 0x80) == 0)
                goto LABEL_83;
              v36 += 7;
              v9 = v37++ >= 9;
              if (v9)
                goto LABEL_81;
            }
          }
          v47 = 0;
          v48 = 0;
          result = PBReaderPlaceMark(a2, &v47);
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)
               && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          {
            v21 = 0;
            v22 = 0;
            v23 = 0;
            while (1)
            {
              v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                break;
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
              v23 |= (unint64_t)(v25 & 0x7F) << v21;
              if ((v25 & 0x80) == 0)
                goto LABEL_40;
              v21 += 7;
              v9 = v22++ >= 9;
              if (v9)
              {
                v26 = 0;
                goto LABEL_43;
              }
            }
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              v26 = 0;
            else
              v26 = v23;
LABEL_43:
            PBRepeatedInt32Add(a1 + 32, v26);
          }
          goto LABEL_67;
        case 4:
          if (v11 == 2)
          {
            v47 = 0;
            v48 = 0;
            result = PBReaderPlaceMark(a2, &v47);
            if (!(_DWORD)result)
              return result;
            while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length)
                 && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            {
              v27 = 0;
              v28 = 0;
              v29 = 0;
              while (1)
              {
                v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                  break;
                v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
                v29 |= (unint64_t)(v31 & 0x7F) << v27;
                if ((v31 & 0x80) == 0)
                  goto LABEL_56;
                v27 += 7;
                v9 = v28++ >= 9;
                if (v9)
                {
                  v32 = 0;
                  goto LABEL_59;
                }
              }
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
                v32 = 0;
              else
                v32 = v29;
LABEL_59:
              PBRepeatedInt32Add(a1 + 8, v32);
            }
LABEL_67:
            PBReaderRecallMark(a2, &v47);
          }
          else
          {
            v42 = 0;
            v43 = 0;
            v38 = 0;
            v39 = a1 + 8;
            while (1)
            {
              v44 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v44 == -1 || v44 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                break;
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 1;
              v38 |= (unint64_t)(v45 & 0x7F) << v42;
              if ((v45 & 0x80) == 0)
                goto LABEL_83;
              v42 += 7;
              v9 = v43++ >= 9;
              if (v9)
              {
LABEL_81:
                v46 = 0;
                goto LABEL_86;
              }
            }
LABEL_82:
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_83:
            if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              v46 = 0;
            else
              v46 = v38;
LABEL_86:
            PBRepeatedInt32Add(v39, v46);
          }
          break;
        default:
          goto LABEL_65;
      }
      continue;
    }
    if ((int)v13 > 109)
    {
      if ((_DWORD)v13 == 110)
      {
        v34 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v34);
        v16 = 96;
        goto LABEL_62;
      }
      if ((_DWORD)v13 == 111)
      {
        Data = PBReaderReadData(a2);
        v15 = objc_claimAutoreleasedReturnValue(Data);
        v16 = 88;
        goto LABEL_62;
      }
    }
    else
    {
      if ((_DWORD)v13 == 100)
      {
        v33 = PBReaderReadString(a2);
        v15 = objc_claimAutoreleasedReturnValue(v33);
        v16 = 80;
        goto LABEL_62;
      }
      if ((_DWORD)v13 == 101)
      {
        v17 = PBReaderReadData(a2);
        v15 = objc_claimAutoreleasedReturnValue(v17);
        v16 = 72;
LABEL_62:
        v35 = *(void **)(a1 + v16);
        *(_QWORD *)(a1 + v16) = v15;

        continue;
      }
    }
LABEL_65:
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10010A244(id a1)
{
  void *v1;

  v1 = (void *)qword_100269958;
  qword_100269958 = (uint64_t)&off_10022B050;

}

uint64_t APPBNumericParameterReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t String;
  uint64_t v18;
  void *v19;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      String = PBReaderReadString(a2);
      v18 = objc_claimAutoreleasedReturnValue(String);
      v19 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v18;

    }
    else if ((v6 >> 3) == 2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_30;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_32;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_32:
      *(_DWORD *)(a1 + 16) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10010A890(id a1)
{
  void *v1;

  v1 = (void *)qword_100269968;
  qword_100269968 = (uint64_t)&off_10022B078;

}

uint64_t APPBAdEventReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t String;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 40) |= 1u;
        v13 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7 && v13 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v14 = 0;
        }
        *(_QWORD *)(a1 + 8) = v14;
        continue;
      case 3u:
        String = PBReaderReadString(a2);
        v17 = objc_claimAutoreleasedReturnValue(String);
        v18 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v17;

        continue;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v10 = v20++ >= 9;
              if (v10)
              {
                LODWORD(v21) = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v21) = 0;
LABEL_48:
        v35 = 32;
        goto LABEL_57;
      case 5u:
        v25 = 0;
        v26 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v10 = v26++ >= 9;
              if (v10)
              {
                LODWORD(v21) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v21) = 0;
LABEL_52:
        v35 = 16;
        goto LABEL_57;
      case 6u:
        v30 = 0;
        v31 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 40) |= 8u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v32 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v33 = v32 + 1;
      if (v32 == -1 || v33 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33;
      v21 |= (unint64_t)(v34 & 0x7F) << v30;
      if ((v34 & 0x80) == 0)
        goto LABEL_54;
      v30 += 7;
      v10 = v31++ >= 9;
      if (v10)
      {
        LODWORD(v21) = 0;
        goto LABEL_56;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v21) = 0;
LABEL_56:
    v35 = 36;
LABEL_57:
    *(_DWORD *)(a1 + v35) = v21;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10010BB90(id a1)
{
  void *v1;

  v1 = (void *)qword_100269978;
  qword_100269978 = (uint64_t)&off_10022B0A0;

}

BOOL APPBKeyedParameterListReadFrom(_QWORD *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  uint64_t v13;
  APPBParameter *v14;
  _QWORD v16[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = (APPBParameter *)a1[1];
        a1[1] = v13;
LABEL_23:

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v14 = objc_alloc_init(APPBParameter);
    objc_msgSend(a1, "addParameterList:", v14);
    v16[0] = 0;
    v16[1] = 0;
    if (!PBReaderPlaceMark(a2, v16) || !APPBParameterReadFrom((uint64_t)v14, a2))
    {

      return 0;
    }
    PBReaderRecallMark(a2, v16);
    goto LABEL_23;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10010C650(id a1)
{
  void *v1;

  v1 = (void *)qword_100269988;
  qword_100269988 = (uint64_t)&off_10022B0C8;

}

BOOL APPBLogImpressionResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

void sub_10010C900(id a1)
{
  void *v1;

  v1 = (void *)qword_100269998;
  qword_100269998 = (uint64_t)&off_10022B0F0;

}

uint64_t APPBAdRequesterReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t String;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  uint64_t result;
  uint64_t v28;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((int)(v6 >> 3) > 10)
    {
      if ((_DWORD)v12 == 11)
      {
        v23 = 0;
        v24 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (1)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
          v15 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_46;
          v23 += 7;
          v9 = v24++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_48:
        v28 = 16;
LABEL_49:
        *(_DWORD *)(a1 + v28) = v15;
        continue;
      }
      if ((_DWORD)v12 != 21)
      {
LABEL_39:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
      }
      String = PBReaderReadString(a2);
      v19 = objc_claimAutoreleasedReturnValue(String);
      v20 = 8;
    }
    else
    {
      if ((_DWORD)v12 != 1)
      {
        if ((_DWORD)v12 != 10)
          goto LABEL_39;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_42;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_44:
        v28 = 32;
        goto LABEL_49;
      }
      v21 = PBReaderReadString(a2);
      v19 = objc_claimAutoreleasedReturnValue(v21);
      v20 = 24;
    }
    v22 = *(void **)(a1 + v20);
    *(_QWORD *)(a1 + v20) = v19;

  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10010D1E8(id a1, PBCodable *a2, NSError *a3)
{
  NSError *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;

  v4 = a3;
  v5 = APLogForCategory(21);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (a2 || !v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Third party segment update succeeded.", (uint8_t *)&v9, 2u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](v4, "localizedDescription"));
    v9 = 138543362;
    v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Third party segment update failed due to %{public}@.", (uint8_t *)&v9, 0xCu);

  }
}

void sub_10010D33C(id a1)
{
  void *v1;

  v1 = (void *)qword_1002699A8;
  qword_1002699A8 = (uint64_t)&off_10022B118;

}

uint64_t APPBTagSetReadFrom(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  void *v13;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      String = PBReaderReadString(a2);
      v13 = (void *)objc_claimAutoreleasedReturnValue(String);
      if (v13)
        objc_msgSend(a1, "addTags:", v13);

    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL APPBAdLayoutDataReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  uint64_t v13;
  APPBAdLayoutDetails *v14;
  _QWORD v16[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = *(APPBAdLayoutDetails **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v13;
LABEL_23:

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v14 = objc_alloc_init(APPBAdLayoutDetails);
    objc_storeStrong((id *)(a1 + 8), v14);
    v16[0] = 0;
    v16[1] = 0;
    if (!PBReaderPlaceMark(a2, v16) || (APPBAdLayoutDetailsReadFrom((uint64_t)v14, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark(a2, v16);
    goto LABEL_23;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL APPBStyleReadFrom(id *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  APPBColor *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = objc_alloc_init(APPBColor);
        v13 = 1;
        goto LABEL_31;
      case 2u:
        v12 = objc_alloc_init(APPBBorderStyle);
        objc_storeStrong(a1 + 2, v12);
        v15 = 0;
        v16 = 0;
        if (!PBReaderPlaceMark(a2, &v15) || (APPBBorderStyleReadFrom((uint64_t)v12, a2) & 1) == 0)
          goto LABEL_36;
        goto LABEL_33;
      case 3u:
        v12 = objc_alloc_init(APPBButtonStyle);
        objc_storeStrong(a1 + 3, v12);
        v15 = 0;
        v16 = 0;
        if (!PBReaderPlaceMark(a2, &v15) || (APPBButtonStyleReadFrom((uint64_t)v12, a2) & 1) == 0)
          goto LABEL_36;
        goto LABEL_33;
      case 4u:
        v12 = objc_alloc_init(APPBShadowStyle);
        objc_storeStrong(a1 + 4, v12);
        v15 = 0;
        v16 = 0;
        if (!PBReaderPlaceMark(a2, &v15) || (APPBShadowStyleReadFrom((uint64_t)v12, a2) & 1) == 0)
          goto LABEL_36;
        goto LABEL_33;
      case 5u:
        v12 = objc_alloc_init(APPBColor);
        v13 = 5;
LABEL_31:
        objc_storeStrong(&a1[v13], v12);
        v15 = 0;
        v16 = 0;
        if (PBReaderPlaceMark(a2, &v15) && (APPBColorReadFrom(v12, a2) & 1) != 0)
        {
LABEL_33:
          PBReaderRecallMark(a2, &v15);

LABEL_34:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

void sub_100119A98(id a1)
{
  void *v1;

  v1 = (void *)qword_1002699B8;
  qword_1002699B8 = (uint64_t)&off_10022B140;

}

uint64_t APPBLogAdContentErrorRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  APPBLogMetaData *v12;
  uint64_t result;
  char v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t String;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = objc_alloc_init(APPBLogMetaData);
        objc_storeStrong((id *)(a1 + 48), v12);
        v31[0] = 0;
        v31[1] = 0;
        if (PBReaderPlaceMark(a2, v31) && (APPBLogMetaDataReadFrom(v12, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v31);
          goto LABEL_44;
        }

        return 0;
      case 2u:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (1)
        {
          v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1 || v17 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
          v16 |= (unint64_t)(v18 & 0x7F) << v14;
          if ((v18 & 0x80) == 0)
            goto LABEL_46;
          v14 += 7;
          v9 = v15++ >= 9;
          if (v9)
          {
            LODWORD(v16) = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_48:
        v30 = 16;
        goto LABEL_53;
      case 3u:
        String = PBReaderReadString(a2);
        v20 = objc_claimAutoreleasedReturnValue(String);
        v21 = 8;
        goto LABEL_39;
      case 4u:
        v22 = 0;
        v23 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 64) |= 2u;
        break;
      case 5u:
        v26 = PBReaderReadString(a2);
        v20 = objc_claimAutoreleasedReturnValue(v26);
        v21 = 56;
LABEL_39:
        v27 = *(void **)(a1 + v21);
        *(_QWORD *)(a1 + v21) = v20;

        continue;
      case 6u:
        v28 = PBReaderReadString(a2);
        v12 = (APPBLogMetaData *)objc_claimAutoreleasedReturnValue(v28);
        if (v12)
          objc_msgSend((id)a1, "addLines:", v12);
        goto LABEL_44;
      case 7u:
        v29 = PBReaderReadString(a2);
        v12 = (APPBLogMetaData *)objc_claimAutoreleasedReturnValue(v29);
        if (v12)
          objc_msgSend((id)a1, "addFunctionNames:", v12);
LABEL_44:

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v16 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_50;
      v22 += 7;
      v9 = v23++ >= 9;
      if (v9)
      {
        LODWORD(v16) = 0;
        goto LABEL_52;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v16) = 0;
LABEL_52:
    v30 = 32;
LABEL_53:
    *(_DWORD *)(a1 + v30) = v16;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10011B028(id a1)
{
  void *v1;

  v1 = (void *)qword_1002699C8;
  qword_1002699C8 = (uint64_t)&off_10022B168;

}

BOOL APPBAdBatchRequestReadFrom(id *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  APPBRequestProperties *v12;
  uint64_t String;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = objc_alloc_init(APPBRequestProperties);
        objc_storeStrong(a1 + 2, v12);
        v15 = 0;
        v16 = 0;
        if (PBReaderPlaceMark(a2, &v15) && (APPBRequestPropertiesReadFrom((uint64_t)v12, a2) & 1) != 0)
          goto LABEL_35;
        goto LABEL_42;
      case 2u:
        v12 = objc_alloc_init(APPBAdSpecification);
        objc_storeStrong(a1 + 5, v12);
        v15 = 0;
        v16 = 0;
        if (!PBReaderPlaceMark(a2, &v15) || (APPBAdSpecificationReadFrom((uint64_t)v12, a2) & 1) == 0)
          goto LABEL_42;
        goto LABEL_35;
      case 3u:
      case 4u:
      case 6u:
        goto LABEL_25;
      case 5u:
        v12 = objc_alloc_init(APPBResourceCacheEntry);
        objc_msgSend(a1, "addResourceCacheEntries:", v12);
        v15 = 0;
        v16 = 0;
        if (!PBReaderPlaceMark(a2, &v15) || (APPBResourceCacheEntryReadFrom((uint64_t)v12, a2) & 1) == 0)
          goto LABEL_42;
        goto LABEL_35;
      case 7u:
        v12 = objc_alloc_init(APPBCachedAd);
        objc_msgSend(a1, "addCachedAds:", v12);
        v15 = 0;
        v16 = 0;
        if (PBReaderPlaceMark(a2, &v15) && (APPBCachedAdReadFrom((uint64_t)v12, a2) & 1) != 0)
          goto LABEL_35;
        goto LABEL_42;
      case 8u:
        String = PBReaderReadString(a2);
        v12 = (APPBRequestProperties *)objc_claimAutoreleasedReturnValue(String);
        if (v12)
          objc_msgSend(a1, "addTags:", v12);
        goto LABEL_36;
      default:
        if ((v6 >> 3) != 20)
        {
LABEL_25:
          if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
            return 0;
          goto LABEL_37;
        }
        v12 = objc_alloc_init(APPBAdRequester);
        objc_msgSend(a1, "addRequesters:", v12);
        v15 = 0;
        v16 = 0;
        if (PBReaderPlaceMark(a2, &v15) && (APPBAdRequesterReadFrom((uint64_t)v12, a2) & 1) != 0)
        {
LABEL_35:
          PBReaderRecallMark(a2, &v15);
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
LABEL_42:

        return 0;
    }
  }
}

void sub_10011C3A4(id a1)
{
  void *v1;

  v1 = (void *)qword_1002699D8;
  qword_1002699D8 = (uint64_t)&off_10022B190;

}

uint64_t APPBLogSubscriptionEventRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  uint64_t Data;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t String;
  uint64_t v22;
  void *v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;
  APPBParameter *v34;
  _QWORD v35[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  v4 = &OBJC_IVAR___APPBInstallAttribution__version;
  v5 = &OBJC_IVAR___APPBInstallAttribution__version;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v10 = v9 + 1;
      if (v9 == -1 || v10 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v11 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v9);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v10;
      v8 |= (unint64_t)(v11 & 0x7F) << v6;
      if ((v11 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      v12 = v7++ >= 9;
      if (v12)
      {
        v8 = 0;
        v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v8 = 0;
LABEL_14:
    if (v13 || (v8 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v8 >> 3))
    {
      case 1u:
        Data = PBReaderReadData(a2);
        v16 = objc_claimAutoreleasedReturnValue(Data);
        v17 = v4[412];
        goto LABEL_26;
      case 2u:
        v19 = PBReaderReadData(a2);
        v16 = objc_claimAutoreleasedReturnValue(v19);
        v17 = v5[413];
        goto LABEL_26;
      case 3u:
        v20 = PBReaderReadData(a2);
        v16 = objc_claimAutoreleasedReturnValue(v20);
        v17 = 24;
        goto LABEL_26;
      case 4u:
        String = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(String);
        v17 = 64;
        goto LABEL_26;
      case 5u:
        v22 = PBReaderReadString(a2);
        v16 = objc_claimAutoreleasedReturnValue(v22);
        v17 = 56;
LABEL_26:
        v23 = *(void **)(a1 + v17);
        *(_QWORD *)(a1 + v17) = v16;

        goto LABEL_27;
      case 6u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 72) |= 2u;
        while (2)
        {
          v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v12 = v25++ >= 9;
              if (v12)
              {
                LODWORD(v26) = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v26) = 0;
LABEL_45:
        *(_DWORD *)(a1 + 32) = v26;
        goto LABEL_27;
      case 7u:
        *(_BYTE *)(a1 + 72) |= 1u;
        v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v31 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v31 = 0;
        }
        *(_QWORD *)(a1 + 8) = v31;
        goto LABEL_27;
      case 8u:
        v32 = v5;
        v33 = v4;
        v34 = objc_alloc_init(APPBParameter);
        objc_msgSend((id)a1, "addInfo:", v34);
        v35[0] = 0;
        v35[1] = 0;
        if (PBReaderPlaceMark(a2, v35) && APPBParameterReadFrom((uint64_t)v34, a2))
        {
          PBReaderRecallMark(a2, v35);

          v4 = v33;
          v5 = v32;
LABEL_27:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_27;
    }
  }
}

void sub_10011D980(id a1)
{
  void *v1;

  v1 = (void *)qword_1002699E8;
  qword_1002699E8 = (uint64_t)&off_10022B1B8;

}

BOOL APPBServerErrorResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v10;

  while (1)
  {
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
      return v3 == 0;
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      v3 = 1;
      return v3 == 0;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LOBYTE(v6) = 0;
LABEL_13:
    if (v3)
      v10 = 1;
    else
      v10 = (v6 & 7) == 4;
    if (v10)
      return v3 == 0;
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
      return 0;
  }
}

uint64_t APPBButtonReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t String;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  APPBButtonStyle *v23;
  _QWORD v24[2];

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_34;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_34:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_36:
        *(_DWORD *)(a1 + 24) = v14;
        goto LABEL_37;
      case 2u:
        String = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(String);
        v20 = 32;
        goto LABEL_29;
      case 3u:
        v21 = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(v21);
        v20 = 8;
LABEL_29:
        v22 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        goto LABEL_37;
      case 4u:
        v23 = objc_alloc_init(APPBButtonStyle);
        objc_storeStrong((id *)(a1 + 16), v23);
        v24[0] = 0;
        v24[1] = 0;
        if (PBReaderPlaceMark(a2, v24) && (APPBButtonStyleReadFrom((uint64_t)v23, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v24);

LABEL_37:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_37;
    }
  }
}

id APTimeSpentStoreDatabase.init(database:)(void *a1)
{
  uint64_t v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)), "initWithDatabase:", a1);

  return v3;
}

{
  void *v1;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
  v3 = v1;
  v4 = a1;
  v5 = OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x6E657053656D6954, 0xEE0065726F745374);
  v6 = type metadata accessor for DatabaseManager(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)&v3[OBJC_IVAR___APTimeSpentStoreDatabase_database] = DatabaseManager.init(database:log:)(v4, v5);

  v9.receiver = v3;
  v9.super_class = (Class)APTimeSpentStoreDatabase;
  v7 = objc_msgSendSuper2(&v9, "init");

  return v7;
}

uint64_t APTimeSpentStoreDatabase.retrieveTimeSpentEntriesOlderThan(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v39 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008A18((uint64_t *)&unk_100264760);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v6 + 56) = v2;
  *(_QWORD *)(v6 + 64) = &protocol witness table for Date;
  v7 = sub_10011F0DC((_QWORD *)(v6 + 32));
  v40 = v3;
  v41 = v2;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 16))(v7, a1, v2);
  v8 = type metadata accessor for APTimeSpentEntry();
  dispatch thunk of DatabaseManager.multipleValuesFromQuery<A>(_:parameters:transform:)(&v45, 0xD00000000000002CLL, 0x80000001001F2C20, v6, sub_10011F118, 0, v8);
  swift_bridgeObjectRelease(v6);
  if (!v47)
  {
    v42 = v45;
    v43 = v46;
    v44 = v48;
LABEL_14:
    v10 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_15:
    if (!v47)
      return v10;
LABEL_16:
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v45);
    return v10;
  }
  sub_10000D4D8((uint64_t)&v45, (uint64_t)&v42);
  v31 = *((_QWORD *)&v43 + 1);
  if (!*((_QWORD *)&v43 + 1))
    goto LABEL_14;
  v9 = v44;
  sub_10000B748(&v42, *((uint64_t *)&v43 + 1));
  v10 = Sequence.compactMap<A>(_:)(sub_10011F2B4, 0, v31, v8, v9);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v42);
  if (!objc_msgSend((id)objc_opt_self(APSystemInternal), "isAppleInternalInstall"))
    goto LABEL_15;
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v32 = v10;
    else
      v32 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v32);
    if (!v11)
      goto LABEL_22;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v10);
    if (!v11)
      goto LABEL_22;
  }
  result = sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
  v38 = result;
  if (v11 >= 1)
  {
    v13 = 0;
    v34 = 0x80000001001ED670;
    v35 = v10 & 0xC000000000000001;
    v33 = xmmword_1001B77A0;
    v36 = v11;
    v37 = v10;
    do
    {
      if (v35)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v10);
      else
        v14 = *(id *)(v10 + 8 * v13 + 32);
      v15 = v14;
      ++v13;
      v16 = static os_log_type_t.debug.getter(v14);
      v17 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, v34, 0x6E657053656D6954, 0xEE0065726F745374);
      v18 = sub_100008A18((uint64_t *)&unk_1002653F0);
      v19 = swift_allocObject(v18, 112, 7);
      *(_OWORD *)(v19 + 16) = v33;
      v20 = objc_msgSend(v15, "contentId");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);
      v24 = v23;

      *(_QWORD *)(v19 + 56) = &type metadata for String;
      v25 = sub_1000A5AF8();
      *(_QWORD *)(v19 + 64) = v25;
      *(_QWORD *)(v19 + 32) = v22;
      *(_QWORD *)(v19 + 40) = v24;
      v26 = objc_msgSend(v15, "timeStamp");
      v27 = v39;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v28 = Date.description.getter();
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v41);
      *(_QWORD *)(v19 + 96) = &type metadata for String;
      *(_QWORD *)(v19 + 104) = v25;
      *(_QWORD *)(v19 + 72) = v28;
      *(_QWORD *)(v19 + 80) = v30;
      os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "[TimeSpentDatabase] Retrieving entry for contentId: %{public}@ and timeStamp: %{public}@", 88, 2, v19);

      swift_bridgeObjectRelease(v19);
      v10 = v37;
    }
    while (v36 != v13);
LABEL_22:
    swift_bridgeObjectRelease(v10);
    if (!v47)
      return v10;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10011F0DC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10011F118@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000B748(a1, v9);
  dispatch thunk of DatabaseCursor.read(_:)(0, v9, v10);
  if (v2)
  {
    result = swift_errorRelease(v2);
    v13 = 0;
  }
  else
  {
    v14 = v11;
    v21 = v5;
    v22 = a2;
    v16 = a1[3];
    v15 = a1[4];
    sub_10000B748(a1, v16);
    dispatch thunk of DatabaseCursor.read(_:)(1, v16, v15);
    v17 = objc_allocWithZone((Class)APTimeSpentEntry);
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v13 = objc_msgSend(v17, "initWithContentId:timeStamp:", v18, isa);

    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v21);
    a2 = v22;
  }
  *a2 = v13;
  return result;
}

id sub_10011F2B4@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  return v2;
}

Swift::Void __swiftcall APTimeSpentStoreDatabase.removeEntries(forContentIds:)(Swift::OpaquePointer forContentIds)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  _QWORD *v19;
  void *rawValue;

  if (objc_msgSend((id)objc_opt_self(APSystemInternal), "isAppleInternalInstall"))
  {
    v2 = *((_QWORD *)forContentIds._rawValue + 2);
    if (v2)
    {
      sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
      swift_bridgeObjectRetain(forContentIds._rawValue);
      rawValue = forContentIds._rawValue;
      v3 = (char *)forContentIds._rawValue + 40;
      do
      {
        v4 = *(v3 - 1);
        v5 = *v3;
        v6 = swift_bridgeObjectRetain(*v3);
        v7 = static os_log_type_t.debug.getter(v6);
        v8 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x6E657053656D6954, 0xEE0065726F745374);
        v9 = sub_100008A18((uint64_t *)&unk_1002653F0);
        v10 = swift_allocObject(v9, 72, 7);
        *(_OWORD *)(v10 + 16) = xmmword_1001B76C0;
        *(_QWORD *)(v10 + 56) = &type metadata for String;
        *(_QWORD *)(v10 + 64) = sub_1000A5AF8();
        *(_QWORD *)(v10 + 32) = v4;
        *(_QWORD *)(v10 + 40) = v5;
        os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "[TimeSpentDatabase] Removing entry for contentId: %{public}@", 60, 2, v10);

        swift_bridgeObjectRelease(v10);
        v3 += 2;
        --v2;
      }
      while (v2);
      forContentIds._rawValue = rawValue;
      swift_bridgeObjectRelease(rawValue);
    }
  }
  v11 = sub_10011F63C((_QWORD *)0x3F, 0xE100000000000000, *((_QWORD *)forContentIds._rawValue + 2));
  v12 = sub_100008A18(&qword_100266260);
  v13 = sub_10011F6E8();
  v14 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v12, v13);
  v16 = v15;
  swift_bridgeObjectRelease(v11);
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(0xE000000000000000);
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18._countAndFlagsBits = 41;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19 = sub_10011F734((uint64_t)forContentIds._rawValue);
  dispatch thunk of DatabaseManager.executeQuery(_:withParameters:)(0xD00000000000002ALL, 0x80000001001F2CB0, v19);
  swift_bridgeObjectRelease(0x80000001001F2CB0);
  swift_bridgeObjectRelease(v19);
}

_QWORD *sub_10011F63C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v5 = result;
      v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a3, &type metadata for String);
      v7 = v6;
      v6[2] = a3;
      v6[4] = v5;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = v5;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = v5;
            *v9 = a2;
            swift_bridgeObjectRetain(a2);
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain(a2);
      }
    }
    else
    {
      swift_bridgeObjectRelease(a2);
      return &_swiftEmptyArrayStorage;
    }
    return v7;
  }
  return result;
}

unint64_t sub_10011F6E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100264780;
  if (!qword_100264780)
  {
    v1 = sub_1000A5AB4(&qword_100266260);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100264780);
  }
  return result;
}

_QWORD *sub_10011F734(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[2];
  _BYTE v11[40];
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v12 = _swiftEmptyArrayStorage;
    sub_10011FDDC(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v10[0] = *(v4 - 1);
      v10[1] = v5;
      swift_bridgeObjectRetain(v5);
      v6 = sub_100008A18((uint64_t *)&unk_100267DD0);
      swift_dynamicCast(v11, v10, &type metadata for String, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10011FDDC(0, v2[2] + 1, 1);
        v2 = v12;
      }
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_10011FDDC((_QWORD *)(v7 > 1), v8 + 1, 1);
        v2 = v12;
      }
      v4 += 2;
      v2[2] = v8 + 1;
      sub_100008040((uint64_t)v11, (uint64_t)&v2[5 * v8 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

Swift::Void __swiftcall APTimeSpentStoreDatabase.storeEntry(forContentId:)(Swift::String forContentId)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSString v7;
  Class isa;
  uint64_t v9;

  v2 = v1;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String._bridgeToObjectiveC()();
  Date.init()();
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_msgSend(v2, "storeEntryForContentId:timeStamp:", v7, isa);

}

uint64_t APTimeSpentStoreDatabase.storeEntry(forContentId:timeStamp:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v19;

  v6 = objc_msgSend((id)objc_opt_self(APSystemInternal), "isAppleInternalInstall");
  if ((_DWORD)v6)
  {
    v19 = static os_log_type_t.debug.getter(v6);
    sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
    v7 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x6E657053656D6954, 0xEE0065726F745374);
    v8 = sub_100008A18((uint64_t *)&unk_1002653F0);
    v9 = swift_allocObject(v8, 112, 7);
    *(_OWORD *)(v9 + 16) = xmmword_1001B77A0;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    v10 = sub_1000A5AF8();
    *(_QWORD *)(v9 + 64) = v10;
    *(_QWORD *)(v9 + 32) = a1;
    *(_QWORD *)(v9 + 40) = a2;
    v11 = swift_bridgeObjectRetain(a2);
    v12 = Date.description.getter(v11);
    *(_QWORD *)(v9 + 96) = &type metadata for String;
    *(_QWORD *)(v9 + 104) = v10;
    *(_QWORD *)(v9 + 72) = v12;
    *(_QWORD *)(v9 + 80) = v13;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v7, "[TimeSpentDatabase] Storing entry for contentId: %{public}@ and timeStamp: %{public}@", 85, 2, v9);

    swift_bridgeObjectRelease(v9);
  }
  v14 = sub_100008A18((uint64_t *)&unk_100264760);
  v15 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1001B77A0;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = &protocol witness table for String;
  *(_QWORD *)(v15 + 32) = a1;
  *(_QWORD *)(v15 + 40) = a2;
  v16 = type metadata accessor for Date(0);
  *(_QWORD *)(v15 + 96) = v16;
  *(_QWORD *)(v15 + 104) = &protocol witness table for Date;
  v17 = sub_10011F0DC((_QWORD *)(v15 + 72));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v17, a3, v16);
  swift_bridgeObjectRetain(a2);
  dispatch thunk of DatabaseManager.executeQuery(_:withParameters:)(0xD000000000000042, 0x80000001001F2D20, v15);
  return swift_bridgeObjectRelease(v15);
}

void __swiftcall APTimeSpentStoreDatabase.init()(APTimeSpentStoreDatabase *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "init");
}

void APTimeSpentStoreDatabase.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("__ObjC.APTimeSpentStoreDatabase", 31, "", 0, 0);
  __break(1u);
}

uint64_t type metadata accessor for APTimeSpentStoreDatabase(uint64_t a1)
{
  return sub_10003E180(a1, &qword_100264810, &off_10020D110);
}

_QWORD *sub_10011FDDC(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_10011FDF8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_10011FDF8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008A18((uint64_t *)&unk_100264760);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100008A18((uint64_t *)&unk_100267DD0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release(a4);
  return v11;
}

uint64_t APTimeSpentEntry.contentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___APTimeSpentEntry_contentId);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___APTimeSpentEntry_contentId + 8));
  return v1;
}

uint64_t APTimeSpentEntry.timeStamp.getter(uint64_t a1)
{
  uint64_t v1;

  return Date.init(timeIntervalSince1970:)(a1, *(double *)(v1 + OBJC_IVAR___APTimeSpentEntry_timeInterval));
}

id APTimeSpentEntry.init(contentId:timeStamp:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  NSString v6;
  Class isa;
  id v8;
  uint64_t v9;

  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v5, "initWithContentId:timeStamp:", v6, isa);

  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a3, v9);
  return v8;
}

{
  char *v3;
  char *v5;
  char *v6;
  id v7;
  uint64_t v8;
  objc_super v10;

  v5 = &v3[OBJC_IVAR___APTimeSpentEntry_contentId];
  *(_QWORD *)v5 = a1;
  *((_QWORD *)v5 + 1) = a2;
  v6 = v3;
  *(double *)&v6[OBJC_IVAR___APTimeSpentEntry_timeInterval] = Date.timeIntervalSince1970.getter();

  v10.receiver = v6;
  v10.super_class = (Class)APTimeSpentEntry;
  v7 = objc_msgSendSuper2(&v10, "init");
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a3, v8);
  return v7;
}

void APTimeSpentEntry.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("__ObjC.APTimeSpentEntry", 23, "", 0, 0);
  __break(1u);
}

unint64_t type metadata accessor for APTimeSpentEntry()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100264850;
  if (!qword_100264850)
  {
    v1 = objc_opt_self(APTimeSpentEntry);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100264850);
  }
  return result;
}

void sub_100121014(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  os_signpost_id_t v10;
  uint8_t v11[16];

  v5 = a3;
  v6 = a2;
  v7 = APPerfLogForCategory(28);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = (char *)objc_msgSend(*(id *)(a1 + 32), "intervalId");
  if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = (os_signpost_id_t)v9;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)v11 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v10, "Request Certificate", "", v11, 2u);
    }
  }

  objc_msgSend(*(id *)(a1 + 32), "certificateRetrievalDidFinish:error:", v6, v5);
}

void sub_100121580(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  os_signpost_id_t v10;
  uint8_t v11[16];

  v5 = a3;
  v6 = a2;
  v7 = APPerfLogForCategory(28);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = (char *)objc_msgSend(*(id *)(a1 + 32), "intervalId");
  if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = (os_signpost_id_t)v9;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)v11 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v10, "SAP Negotiating", "", v11, 2u);
    }
  }

  objc_msgSend(*(id *)(a1 + 32), "setupNegotiationStepDidFinish:certificateIsCached:error:", v6, *(unsigned __int8 *)(a1 + 40), v5);
}

uint64_t sub_100121DF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100122908(uint64_t a1)
{
  id v2;

  if (!objc_msgSend(*(id *)(a1 + 32), "state"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setState:", 1);
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "provider"));
    objc_msgSend(v2, "setup");

  }
}

void sub_1001229E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100122B50(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleStateChange:", *(_QWORD *)(a1 + 40));
}

void sub_100122EBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100122EF8(id a1)
{
  void *v1;
  const __CFString *v2;
  _UNKNOWN **v3;

  v2 = CFSTR("finalStatus");
  v3 = &off_100229AE0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1));
  AnalyticsSendEvent(CFSTR("com.apple.adplatforms.mescal.finalStatus"), v1);

}

void sub_1001234BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001234E0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "provider"));
  v3 = *(_QWORD *)(a1 + 40);
  v6 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rawSignatureForData:error:", v3, &v6));
  v5 = v6;

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100123560(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  void *v5;
  void (**v6)(_QWORD);
  id v7;
  void *v8;
  id v9;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "syncRequestsLock"));

  objc_msgSend(v9, "lock");
  v4 = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "requestsWhileInitializing"));
  v6 = (void (**)(_QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));

  if (v6)
  {
    v7 = objc_loadWeakRetained(v2);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "requestsWhileInitializing"));
    objc_msgSend(v8, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

    objc_msgSend(v9, "unlock");
    v6[2](v6);
  }
  else
  {
    objc_msgSend(v9, "unlock");
  }

}

void sub_1001236D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD);
  id v8;

  if (a2)
  {
    v5 = a3;
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "base64EncodedStringWithOptions:", 32));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void (**)(uint64_t, _QWORD))(v6 + 16);
    v8 = a3;
    v7(v6, 0);
  }

}

void sub_100123954(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100123AB8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "provider"));
  objc_msgSend(v1, "retrySetup");

}

void sub_100123C90(id a1)
{
  APEventChannel *v1;
  APEventChannel *v2;
  void *v3;
  id v4;

  v1 = [APEventChannel alloc];
  v4 = (id)objc_claimAutoreleasedReturnValue(+[APDestination ecRouter](APDestination, "ecRouter"));
  v2 = -[APEventChannel initWithDestination:purpose:](v1, "initWithDestination:purpose:", v4, 1234);
  v3 = (void *)qword_100269A08;
  qword_100269A08 = (uint64_t)v2;

}

void sub_100123E90(id a1)
{
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  NSSet *v4;
  id v5;

  v1 = +[MetricsModuleClasses metricClass](MetricsModuleClasses, "metricClass");
  v2 = objc_opt_class(APMetricHTTPDeliveryRequest);
  v3 = objc_opt_class(APDestination);
  v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v1, v2, v3, objc_opt_class(APEventChannel), 0);
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  +[APSupportedSecureEncodedClass addClasses:](APSupportedSecureEncodedClass, "addClasses:", v5);

}

APEventChannel *__cdecl sub_1001243D8(id a1, NSString *a2)
{
  void *v2;
  APEventChannel *v3;
  APDestination *v4;
  void *v5;
  APDestination *v6;
  void *v7;
  APEventChannel *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSString componentsSeparatedByString:](a2, "componentsSeparatedByString:", CFSTR("/")));
  if (objc_msgSend(v2, "count") == (id)2)
  {
    v3 = [APEventChannel alloc];
    v4 = [APDestination alloc];
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", 0));
    v6 = -[APDestination initWithString:](v4, "initWithString:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", 1));
    v8 = -[APEventChannel initWithDestination:purpose:](v3, "initWithDestination:purpose:", v6, (int)objc_msgSend(v7, "intValue"));

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id *sub_10012476C(id *result)
{
  if (*((_BYTE *)result + 48))
    return (id *)_objc_msgSend(result[4], "flushMetricsToServerForChannel:", result[5]);
  if (*((_BYTE *)result + 49))
    return (id *)_objc_msgSend(result[4], "metricsReadyForDeliveryToChannel:", result[5]);
  return result;
}

uint64_t sub_1001249E4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  id v26;
  id v27;
  uint8_t buf[4];
  id v29;

  v3 = a2;
  v4 = objc_autoreleasePoolPush();
  v5 = objc_msgSend(v3, "buildSignatureUsingSigningAuthority:error:", *(_QWORD *)(a1 + 32), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "destination"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "protectedDestination"));
  v8 = objc_msgSend(*(id *)(a1 + 40), "purpose");
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "signature"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[APMetricStorage_private preparedDataPathForDestination:purpose:containsSignature:](APMetricStorage_private, "preparedDataPathForDestination:purpose:containsSignature:", v7, v8, objc_msgSend(v9, "length") != 0));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "yearDayOfYearHourMinute"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "UUIDString"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), v12, v14));

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringByAppendingPathComponent:", v15));
  v17 = *(void **)(a1 + 48);
  v27 = 0;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "fileForWritingAtKeyPath:error:", v16, &v27));
  v19 = v27;
  if (v19)
  {
    v20 = v19;
    v21 = APLogForCategory(29);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v29 = v20;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to save prepared data: %{public}@", buf, 0xCu);
    }
  }
  else
  {
    v26 = 0;
    objc_msgSend(v18, "addObject:error:", v3, &v26);
    v20 = v26;
    objc_msgSend(v18, "close");
    if (!v20)
    {
      v24 = 1;
      goto LABEL_9;
    }
    v23 = APLogForCategory(29);
    v22 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v29 = v20;
      goto LABEL_7;
    }
  }

  v24 = 0;
LABEL_9:

  objc_autoreleasePoolPop(v4);
  return v24;
}

id *sub_100124FD8(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  APSequentialProcessor *v11;
  _QWORD *v12;
  id v13;
  _QWORD v15[4];
  id v16;
  id location;
  objc_super v18;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)APMetricPreparedUnsignedDataProcessor;
    v10 = (id *)objc_msgSendSuper2(&v18, "init");
    a1 = v10;
    if (v10)
    {
      objc_storeStrong(v10 + 2, a3);
      objc_storeWeak(a1 + 3, v7);
      objc_storeStrong(a1 + 5, a4);
      objc_initWeak(&location, a1);
      v11 = [APSequentialProcessor alloc];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100125134;
      v15[3] = &unk_1002158A8;
      objc_copyWeak(&v16, &location);
      v12 = sub_10012DD5C(v11, v8, v15);
      v13 = a1[4];
      a1[4] = v12;

      objc_destroyWeak(&v16);
      objc_destroyWeak(&location);
    }
  }

  return a1;
}

void sub_100125110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100125134(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id WeakRetained;
  id v9;
  _QWORD v10[4];
  id v11;

  v5 = a3;
  v6 = a2;
  v7 = (void *)os_transaction_create("com.apple.ap.prepareunsigneddata");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001251F0;
  v10[3] = &unk_100215880;
  v11 = v5;
  v9 = v5;
  objc_msgSend(WeakRetained, "_processNextFile:completionHandler:", v6, v10);

}

uint64_t sub_1001251F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_100125208(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id buf[2];

  if (a1)
  {
    v2 = APLogForCategory(29);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Unsigned prepared data server delivery update.", (uint8_t *)buf, 2u);
    }

    objc_initWeak(buf, a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "processor"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100125318;
    v5[3] = &unk_1002158D0;
    objc_copyWeak(&v6, buf);
    sub_10012DE30(v4, v5);

    objc_destroyWeak(&v6);
    objc_destroyWeak(buf);
  }
}

void sub_1001252F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

id sub_100125318(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)os_transaction_create("com.apple.ap.prepareunsigneddata");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "storage"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[APDestination ecRouter](APDestination, "ecRouter"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "preparedMetricDataForDestination:purpose:containsSignature:", v5, 1234, 0));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectEnumerator"));
  return v7;
}

void sub_1001254E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100125508(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;

  v3 = (id *)(a1 + 48);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "_signFile:usingSigningAuthority:completionHandler:", *(_QWORD *)(a1 + 32), v4, *(_QWORD *)(a1 + 40));

}

void sub_1001258FC(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 8);
}

void sub_100125A64(id a1)
{
  APSimulateCrashNoKillProcess(5, CFSTR("EC signing has failed while signing authority state is 'success'."));
}

uint64_t sub_100125A74(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "state");
  return APSimulateCrashNoKillProcess(5, CFSTR("Attempted to perform EC signing when signing authority is not ready: '%ld'"));
}

void sub_100125AA8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "URLResponse"));
  v5 = objc_msgSend(v4, "statusCode");
  v6 = APLogForCategory(29);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v9 = NSStringFromClass(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 48);
    v16 = 138478595;
    v17 = v10;
    v18 = 2113;
    v19 = v11;
    v20 = 2117;
    v21 = v12;
    v22 = 2048;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%{private}@] Metric data sent to server (%{private}@) (%{sensitive}@) with result (%ld).", (uint8_t *)&v16, 0x2Au);

  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v3;
  v15 = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100125CB8(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100269A30;
  qword_100269A30 = (uint64_t)v1;

  objc_msgSend((id)qword_100269A30, "setDateFormat:", CFSTR("yyyyDDDHHmm"));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithAbbreviation:](NSTimeZone, "timeZoneWithAbbreviation:", CFSTR("UTC")));
  objc_msgSend((id)qword_100269A30, "setTimeZone:", v3);

}

void sub_100125D80(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100269A40;
  qword_100269A40 = (uint64_t)v1;

  objc_msgSend((id)qword_100269A40, "setDateFormat:", CFSTR("yyyyDDDHHmmSSSSSS"));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithAbbreviation:](NSTimeZone, "timeZoneWithAbbreviation:", CFSTR("UTC")));
  objc_msgSend((id)qword_100269A40, "setTimeZone:", v3);

}

_QWORD *sub_100126390(_QWORD *a1, void *a2)
{
  id v4;
  id v5;
  dispatch_queue_attr_t v6;
  NSObject *v7;
  dispatch_queue_t v8;
  void *v9;
  objc_super v11;

  v4 = a2;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)APMetricsObservability;
    v5 = objc_msgSendSuper2(&v11, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a2);
      v6 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      v8 = dispatch_queue_create("com.apple.ap.observabilitymonitor", v7);
      v9 = (void *)a1[2];
      a1[2] = v8;

    }
  }

  return a1;
}

void sub_100126604(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  APExpiredObservabilityBatchesReporter *v10;
  void *v11;
  NSObject *v12;
  id v13;
  _QWORD block[4];
  id v15;
  void *v16;
  id v17;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (a1)
  {
    if (a4 == 8501)
    {
      if (v8)
      {
        v10 = -[APExpiredObservabilityBatchesReporter initWithBatchPath:]([APExpiredObservabilityBatchesReporter alloc], "initWithBatchPath:", v8);
        -[APExpiredObservabilityBatchesReporter run](v10, "run");

      }
      goto LABEL_6;
    }
    if (a4 >= 1)
    {
LABEL_6:
      v11 = (void *)os_transaction_create("com.apple.ap.observabilitymonitor");
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10012671C;
      block[3] = &unk_1002159F0;
      v15 = v7;
      v16 = a1;
      v17 = v11;
      v13 = v11;
      dispatch_async(v12, block);

    }
  }

}

void sub_10012671C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;

  v2 = APLogForCategory(13);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138543362;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Batch expired, batch ID: %{public}@", (uint8_t *)&v6, 0xCu);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "signalMonitor"));
  objc_msgSend(v5, "batchExpiredWithBatchID:", *(_QWORD *)(a1 + 32));

}

void sub_1001268B4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  const __CFString *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  const __CFString *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  void *v15;

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "compactMapObjectsUsingBlock:", &stru_100215A58));
    if (!objc_msgSend(v2, "count"))
      goto LABEL_13;
  }
  else
  {
    v2 = 0;
  }
  v3 = APLogForCategory(13);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = CFSTR("server");
    v6 = *(_QWORD *)(a1 + 64);
    if (!*(_QWORD *)(a1 + 56))
      v5 = CFSTR("client");
    v10 = 138543874;
    v11 = v5;
    v12 = 2048;
    v13 = v6;
    v14 = 2114;
    v15 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Upload failed with error %{public}@: %ld, batchIDs: %{public}@", (uint8_t *)&v10, 0x20u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "signalMonitor"));
  v8 = v7;
  if (v2)
    v9 = v2;
  else
    v9 = &__NSArray0__struct;
  objc_msgSend(v7, "uploadFailureWithType:code:batchIDs:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v9);

LABEL_13:
}

id sub_1001269F8(id a1, APMetricBatchInfoObservable *a2)
{
  APMetricBatchInfoObservable *v2;
  uint64_t v3;
  void *v5;

  v2 = a2;
  v3 = (uint64_t)-[APMetricBatchInfoObservable purpose](v2, "purpose");
  if (v3 < 1 || v3 == 8501)
    v5 = 0;
  else
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[APMetricBatchInfoObservable identifier](v2, "identifier"));

  return v5;
}

void sub_100126A4C(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  uint64_t v20;
  NSObject *v21;
  APBatchesCounter *v22;
  int64_t v23;
  void *v24;
  NSObject *v25;
  id v26;
  _QWORD v27[5];
  id v28;
  id v29;
  double v30;
  uint64_t v31;
  int64_t v32;
  uint8_t buf[16];

  v13 = a2;
  v14 = a3;
  v15 = a6;
  v16 = a7;
  if (a1 && a4 >= 1 && a4 != 8501)
  {
    if (v13)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      objc_msgSend(v17, "timeIntervalSinceDate:", v13);
      v19 = v18;

    }
    else
    {
      v20 = APLogForCategory(13);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "batchCreatedDate is missing.", buf, 2u);
      }

      v19 = -1.0;
    }
    v22 = -[APBatchesCounter initWithFileManager:startDirectory:]([APBatchesCounter alloc], "initWithFileManager:startDirectory:", v15, v16);
    v23 = -[APBatchesCounter count](v22, "count");

    v24 = (void *)os_transaction_create("com.apple.ap.observabilitymonitor");
    v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100126C20;
    v27[3] = &unk_100215AE8;
    v27[4] = a1;
    v30 = v19;
    v31 = a5;
    v32 = v23;
    v28 = v14;
    v29 = v24;
    v26 = v24;
    dispatch_async(v25, v27);

  }
}

id sub_100126C20(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_batchClosedWithBatchLifetime:batchID:eventsCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(double *)(a1 + 56));
  return _objc_msgSend(*(id *)(a1 + 32), "_batchEnqueuedWithQueueLength:", *(_QWORD *)(a1 + 72));
}

id sub_100126C58(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  BOOL v9;
  id v11;

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v11 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "createdDateForFileAtPath:error:", v5, &v11));

  v8 = v11;
  if (v8)
    v9 = 1;
  else
    v9 = v7 == 0;
  if (v9)
    APSimulateCrashNoKillProcess(5, CFSTR("NSURLCreationDateKey is not supported: %@. Path: %@"));

  return v7;
}

void sub_100126DE0(id a1)
{
  if (!qword_100269A60)
    qword_100269A60 = (uint64_t)NSClassFromString(CFSTR("APMetric"));
}

void sub_100126F08(id a1)
{
  if (!qword_100269A70)
    qword_100269A70 = (uint64_t)NSClassFromString(CFSTR("APMetricBatch"));
}

void sub_100127070(id a1)
{
  if (!qword_100269A80)
    qword_100269A80 = (uint64_t)NSClassFromString(CFSTR("APMetricNotificationRegistrar"));
}

void sub_100127220(id a1)
{
  if (!qword_100269A90)
    qword_100269A90 = (uint64_t)NSClassFromString(CFSTR("APMetricPurpose"));
}

void sub_100127388(id a1)
{
  if (!qword_100269AA0)
    qword_100269AA0 = (uint64_t)NSClassFromString(CFSTR("APMetricHTTPDelivery"));
}

void sub_1001274F0(id a1)
{
  if (!qword_100269AB0)
    qword_100269AB0 = (uint64_t)NSClassFromString(CFSTR("APMetricServerDelivery"));
}

void sub_100127618(id a1)
{
  if (!qword_100269AC0)
    qword_100269AC0 = (uint64_t)NSClassFromString(CFSTR("APMetricStorageEC"));
}

id *sub_100128420(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id *v13;
  APSequentialProcessor *v14;
  _QWORD *v15;
  id v16;
  _QWORD v18[4];
  id v19;
  id location;
  objc_super v21;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)APMetricPreparedDataServerDelivery;
    v13 = (id *)objc_msgSendSuper2(&v21, "init");
    a1 = v13;
    if (v13)
    {
      objc_storeStrong(v13 + 1, a3);
      objc_storeWeak(a1 + 2, v9);
      objc_storeWeak(a1 + 3, v11);
      objc_storeStrong(a1 + 7, a5);
      objc_initWeak(&location, a1);
      v14 = [APSequentialProcessor alloc];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1001285A0;
      v18[3] = &unk_1002158A8;
      objc_copyWeak(&v19, &location);
      v15 = sub_10012DD5C(v14, v10, v18);
      v16 = a1[6];
      a1[6] = v15;

      objc_destroyWeak(&v19);
      objc_destroyWeak(&location);
    }
  }

  return a1;
}

void sub_10012857C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001285A0(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(id, id);
  id v6;
  id WeakRetained;
  id v8;
  id v9;

  v5 = a3;
  v6 = a2;
  v9 = (id)os_transaction_create("com.apple.ap.prepareddataserverdelivery");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = objc_msgSend(WeakRetained, "_uploadFile:", v6);

  v5[2](v5, v8);
}

void sub_100128628(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id buf[2];

  if (a1)
  {
    v2 = APLogForCategory(29);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Prepared data server delivery update.", (uint8_t *)buf, 2u);
    }

    objc_initWeak(buf, a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "processor"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100128738;
    v5[3] = &unk_1002158D0;
    objc_copyWeak(&v6, buf);
    sub_10012DE30(v4, v5);

    objc_destroyWeak(&v6);
    objc_destroyWeak(buf);
  }
}

void sub_100128714(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

id sub_100128738(id *a1)
{
  void *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;

  v2 = (void *)os_transaction_create("com.apple.ap.prepareddataserverdelivery");
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "storage"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[APDestination ecRouter](APDestination, "ecRouter"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "preparedMetricDataForDestination:purpose:containsSignature:", v5, 1234, 1));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectEnumerator"));
  v8 = objc_loadWeakRetained(a1);
  objc_msgSend(v8, "setFiles:", v7);

  v9 = objc_loadWeakRetained(a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "files"));

  return v10;
}

void sub_1001288C4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_1001288E8(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "files"));

  return v2;
}

id sub_10012B594(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = objc_claimAutoreleasedReturnValue(+[APMetricOffsetSettings settings](APMetricOffsetSettings, "settings"));
  v3 = (void *)qword_100269AD8;
  qword_100269AD8 = v2;

  return _objc_msgSend(*(id *)(a1 + 32), "_setupDefaultRoutes");
}

void sub_10012B6D0(id a1)
{
  if (!qword_100269AF0)
    qword_100269AF0 = objc_opt_class(APDiagnosticDaemonMetricHelper);
}

void sub_10012B838(id a1)
{
  if (!qword_100269B00)
    qword_100269B00 = objc_opt_class(APJourneyDaemonMetricHelper);
}

id sub_10012C568(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v11;
  uint8_t buf[4];
  id v13;
  __int16 v14;
  id v15;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v11 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastModifiedDateForFileAtPath:error:", v3, &v11));
  v6 = v11;
  if (v6)
  {
    v7 = APLogForCategory(29);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138740227;
      v13 = v3;
      v14 = 2114;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error getting last modified date of batch at (%{sensitive}@)! %{public}@", buf, 0x16u);
    }

    v9 = 0;
  }
  else
  {
    v9 = objc_msgSend(v5, "isBefore:", *(_QWORD *)(a1 + 40));
  }

  return v9;
}

void sub_10012D914(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10012D928(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 5));
  v2 = (void *)qword_100269B08;
  qword_100269B08 = v1;

}

_QWORD *sub_10012DD5C(_QWORD *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  objc_super v16;

  v6 = a2;
  v7 = a3;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)APSequentialProcessor;
    v8 = objc_msgSendSuper2(&v16, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong((id *)v8 + 2, a2);
      v9 = objc_retainBlock(v7);
      v10 = (void *)a1[3];
      a1[3] = v9;

      v11 = objc_msgSend(objc_alloc((Class)APUnfairLock), "initWithOptions:", 1);
      v12 = (void *)a1[6];
      a1[6] = v11;

      v13 = objc_msgSend(objc_alloc((Class)APUnfairLock), "initWithOptions:", 1);
      v14 = (void *)a1[7];
      a1[7] = v13;

    }
  }

  return a1;
}

void sub_10012DE30(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  void *v10;

  if (a1)
  {
    v3 = a2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "collectionProviderLock"));
    objc_msgSend(v4, "lock");
    objc_msgSend(a1, "setCollectionProvider:", v3);

    objc_msgSend(v4, "unlock");
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "lock"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "queue"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10012DF0C;
    v8[3] = &unk_1002141A0;
    v9 = v5;
    v10 = a1;
    v7 = v5;
    dispatch_async(v6, v8);

  }
}

id sub_10012DF0C(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  objc_msgSend(*(id *)(a1 + 32), "lock");
  if ((objc_msgSend(*(id *)(a1 + 40), "isRunning") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "setIsRunning:", 1);
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "queue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10012DFA8;
    block[3] = &unk_100212FE0;
    block[4] = *(_QWORD *)(a1 + 40);
    dispatch_async(v2, block);

  }
  return objc_msgSend(*(id *)(a1 + 32), "unlock");
}

id sub_10012DFA8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_next:", 0);
}

void sub_10012E128(uint64_t a1, char a2)
{
  NSObject *v4;
  _QWORD v5[5];
  char v6;

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queue"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10012E1AC;
  v5[3] = &unk_100215D58;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = a2;
  dispatch_async(v4, v5);

}

id sub_10012E1AC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_next:", *(unsigned __int8 *)(a1 + 40));
}

void sub_10012E29C(id a1)
{
  uint64_t v1;
  APJourneyBatchSettings *v2;

  v2 = objc_alloc_init(APJourneyBatchSettings);
  -[APJourneyBatchSettings periodicDelayTimeInterval](v2, "periodicDelayTimeInterval");
  qword_100269B18 = v1;

}

void sub_10012E4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012E4E0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_configurePreparedDataObjects");

}

void sub_10012E5C8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10012E5EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(id, const __CFString *);
  id *v7;
  id WeakRetained;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "serverDeliveryQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10012E6F0;
  v11[3] = &unk_100215DA8;
  v10 = v5;
  v12 = v10;
  objc_copyWeak(&v13, v7);
  dispatch_async(v9, v11);

  v6[2](v6, CFSTR("OK"));
  objc_destroyWeak(&v13);

}

void sub_10012E6DC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10012E6F0(uint64_t a1)
{
  unsigned int v2;
  id *v3;
  id WeakRetained;
  APFakeNetworkResponse *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  APFakeNetworkResponse *v11;

  v11 = objc_alloc_init(APFakeNetworkResponse);
  v2 = -[APFakeNetworkResponse loadConfig:](v11, "loadConfig:", *(_QWORD *)(a1 + 32));
  v3 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained(v3);
  if (v2)
    v5 = v11;
  else
    v5 = 0;
  objc_msgSend(WeakRetained, "setFakeNetworkResponse:", v5);

  v6 = objc_loadWeakRetained(v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "backoffTimers"));
  objc_msgSend(v7, "removeAllObjects");

  v8 = objc_loadWeakRetained(v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastProcessingDates"));
  objc_msgSend(v9, "removeAllObjects");

  v10 = objc_loadWeakRetained(v3);
  objc_msgSend(v10, "processServerDeliveryTimer");

}

void sub_10012E8B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10012EA4C(uint64_t a1)
{
  id v2;
  id to;

  objc_copyWeak(&to, (id *)(a1 + 40));
  v2 = objc_loadWeakRetained(&to);
  objc_msgSend(v2, "processMetrics:forChannel:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));

  objc_destroyWeak(&to);
}

void sub_10012EAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012F16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012F18C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "preparedDataServerDelivery"));
  sub_100128628(v1);

}

void sub_10012F34C(id a1)
{
  APDestination *v1;
  void *v2;

  v1 = -[APDestination initWithString:]([APDestination alloc], "initWithString:", CFSTR("ECRouter"));
  v2 = (void *)qword_100269B30;
  qword_100269B30 = (uint64_t)v1;

}

uint64_t sub_10012F9C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for Calendar.Identifier(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar(0);
  sub_10012FAA4(v4, qword_10026D1E0);
  sub_10000ABD8(v4, (uint64_t)qword_10026D1E0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Calendar.Identifier.gregorian(_:), v0);
  Calendar.init(identifier:)(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

double variable initialization expression of ObservabilityManager.stateDumper@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t *sub_10012FAA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10012FAE4()
{
  uint64_t v0;

  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for LoggingTimeRangeOffset()
{
  return objc_opt_self(_TtC7Metrics22LoggingTimeRangeOffset);
}

float sub_10012FB28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = v0[5];
  v2 = v0[6];
  sub_10000B748(v0 + 2, v1);
  v3 = (*(float (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  if (qword_100264E78 != -1)
    swift_once(&qword_100264E78, sub_100150610);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000ABD8(v4, (uint64_t)qword_10026D208);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_DWORD *)v8 = 136315138;
    v12 = 0;
    v13 = 0xE000000000000000;
    v14 = v9;
    Float.write<A>(to:)(&v12, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v3);
    v10 = v13;
    v12 = sub_1000A8B30(v12, v13, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "time range offset: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  return v3;
}

float sub_10012FCE8()
{
  return sub_10012FB28();
}

uint64_t type metadata accessor for DefaultObservabilityServerErrorBucketConfigurationStore()
{
  return objc_opt_self(_TtC7Metrics55DefaultObservabilityServerErrorBucketConfigurationStore);
}

uint64_t sub_10012FD28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  void (*v8)(void);

  v0 = sub_100008A18(&qword_100263D98);
  v1 = type metadata accessor for IntBucketContents(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 2 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1001B77A0;
  v7 = (_OWORD *)(v6 + v5);
  *v7 = xmmword_1001B7640;
  v8 = *(void (**)(void))(v2 + 104);
  ((void (*)(_OWORD *, _QWORD, uint64_t))v8)(v7, enum case for IntBucketContents.range(_:), v1);
  *(_OWORD *)((char *)v7 + v3) = xmmword_1001B7650;
  v8();
  return IntBucketConfiguration.init(unknownBucketName:discreteBuckets:classifiedBuckets:)(100000, v6, _swiftEmptyArrayStorage);
}

Swift::Int sub_10012FE10()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10012FE68()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10012FEA0(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_10012FEF4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_10012FF0C()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  uint64_t v4;

  v4 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v0._countAndFlagsBits = 8250;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  return v4;
}

__n128 initializeBufferWithCopyOfBuffer for ObservabilityErrorBucket(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ObservabilityErrorBucket(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ObservabilityErrorBucket(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ObservabilityErrorBucket()
{
  return &type metadata for ObservabilityErrorBucket;
}

unint64_t sub_100130004()
{
  unint64_t result;

  result = qword_1002651A8[0];
  if (!qword_1002651A8[0])
  {
    result = swift_getWitnessTable(&unk_1001B87BC, &type metadata for ObservabilityErrorBucket);
    atomic_store(result, qword_1002651A8);
  }
  return result;
}

uint64_t sub_100130048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_100130050(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = v4[0];
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 40);
    return 0;
  }
  return result;
}

uint64_t *sub_1001300CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  unsigned int (*v23)(uint64_t *, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v7 + v8;
  v10 = v7 + 7;
  v11 = v8 + 8;
  if (v8 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v11 + ((v7 + 7 + (v9 & ~(unint64_t)*(_DWORD *)(v6 + 80))) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(_DWORD *)(v6 + 80))
     + v7 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain(v14, a2);
  }
  else
  {
    v15 = ~v8;
    v23 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48);
    if (v23(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v16 = (void *)(((unint64_t)a1 + v9) & v15);
    v17 = (_QWORD *)(((unint64_t)a2 + v9) & v15);
    if (v23(v17, 1, v5))
    {
      memcpy(v16, v17, v7);
    }
    else
    {
      (*(void (**)(void *, _QWORD *, uint64_t))(v6 + 16))(v16, v17, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
    }
    v18 = (_QWORD *)(((unint64_t)v16 + v10) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)v17 + v10) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (void *)(((unint64_t)v18 + v11) & v15);
    v21 = (_QWORD *)(((unint64_t)v19 + v11) & v15);
    if (v23(v21, 1, v5))
    {
      memcpy(v20, v21, v7);
    }
    else
    {
      (*(void (**)(void *, _QWORD *, uint64_t))(v6 + 16))(v20, v21, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
    }
  }
  return a1;
}

uint64_t sub_1001302D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v5(a1, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v4 + 64) + 1;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v6 + a1 + v7) & ~v7;
  if (!v5(v8, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v3);
  v9 = (v7 + ((v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7;
  result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v5)(v9, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v4 + 8))(v9, v3);
  return result;
}

void *sub_1001303CC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(const void *, uint64_t, uint64_t);
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  const void *v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
    if (v8)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = ~v12;
  v14 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v15 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v15, 1, v5))
  {
    memcpy(v14, v15, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v14, v15, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
  }
  v16 = (_QWORD *)(((unint64_t)v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (void *)(((unint64_t)v16 + v12 + 8) & v13);
  v19 = (const void *)(((unint64_t)v17 + v12 + 8) & v13);
  if (v7(v19, 1, v5))
  {
    memcpy(v18, v19, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v18, v19, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
  }
  return a1;
}

void *sub_100130580(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  int v22;
  int v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = ~v12;
  v14 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v15 = (void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  v16 = v7(v14, 1, v5);
  v17 = v7(v15, 1, v5);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v14, v15, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v14, v5);
LABEL_18:
    memcpy(v14, v15, v11);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v14, v15, v5);
LABEL_19:
  v18 = (_QWORD *)(((unint64_t)v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v15 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (void *)(((unint64_t)v18 + v12 + 8) & v13);
  v21 = (void *)(((unint64_t)v19 + v12 + 8) & v13);
  v22 = v7(v20, 1, v5);
  v23 = v7(v21, 1, v5);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v20, v21, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v20, v5);
    goto LABEL_24;
  }
  if (v23)
  {
LABEL_24:
    memcpy(v20, v21, v11);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v20, v21, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
  return a1;
}

void *sub_1001307FC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(const void *, uint64_t, uint64_t);
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  const void *v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
    if (v8)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = ~v12;
  v14 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v15 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v15, 1, v5))
  {
    memcpy(v14, v15, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v14, v15, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
  }
  v16 = (_QWORD *)(((unint64_t)v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (void *)(((unint64_t)v16 + v12 + 8) & v13);
  v19 = (const void *)(((unint64_t)v17 + v12 + 8) & v13);
  if (v7(v19, 1, v5))
  {
    memcpy(v18, v19, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v18, v19, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
  }
  return a1;
}

void *sub_1001309B0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  int v22;
  int v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = ~v12;
  v14 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v15 = (void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  v16 = v7(v14, 1, v5);
  v17 = v7(v15, 1, v5);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v14, v15, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v14, v5);
LABEL_18:
    memcpy(v14, v15, v11);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v14, v15, v5);
LABEL_19:
  v18 = (_QWORD *)(((unint64_t)v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v15 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (void *)(((unint64_t)v18 + v12 + 8) & v13);
  v21 = (void *)(((unint64_t)v19 + v12 + 8) & v13);
  v22 = v7(v20, 1, v5);
  v23 = v7(v21, 1, v5);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v20, v21, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v20, v5);
    goto LABEL_24;
  }
  if (v23)
  {
LABEL_24:
    memcpy(v20, v21, v11);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v20, v21, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
  return a1;
}

uint64_t sub_100130C2C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = ((*(unsigned __int8 *)(v4 + 80)
         + ((v7 + ((v7 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
       + v7;
    v10 = 8 * v9;
    if (v9 > 3)
      goto LABEL_8;
    v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (v11)
        goto LABEL_15;
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2)
          goto LABEL_22;
LABEL_8:
        v11 = *(unsigned __int8 *)(a1 + v9);
        if (!*(_BYTE *)(a1 + v9))
          goto LABEL_22;
LABEL_15:
        v13 = (v11 - 1) << v10;
        if (v9 > 3)
          v13 = 0;
        if ((_DWORD)v9)
        {
          if (v9 > 3)
            LODWORD(v9) = 4;
          __asm { BR              X12 }
        }
        return v6 + v13 + 1;
      }
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (*(_WORD *)(a1 + v9))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v5 < 2)
    return 0;
  v15 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v15 >= 2)
    return v15 - 1;
  else
    return 0;
}

void sub_100130D8C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = ((*(unsigned __int8 *)(v7 + 80)
        + ((v10 + ((v10 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + v10;
  v12 = a3 >= v9;
  v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v9 < a2)
        goto LABEL_15;
      goto LABEL_22;
    }
    v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v6 = &dword_100000004;
      if (v9 < a2)
      {
LABEL_15:
        v15 = ~v9 + a2;
        if (v11 < 4)
        {
          if ((_DWORD)v11)
          {
            v16 = v15 & ~(-1 << (8 * v11));
            bzero(a1, v11);
            if ((_DWORD)v11 == 3)
            {
              *a1 = v16;
              *((_BYTE *)a1 + 2) = BYTE2(v16);
            }
            else if ((_DWORD)v11 == 2)
            {
              *a1 = v16;
            }
            else
            {
              *(_BYTE *)a1 = v16;
            }
          }
        }
        else
        {
          bzero(a1, v11);
          *(_DWORD *)a1 = v15;
        }
        __asm { BR              X10 }
      }
LABEL_22:
      __asm { BR              X11 }
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v9 < a2)
    goto LABEL_15;
  goto LABEL_22;
}

void sub_100130F5C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_100130F64()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for FourNumberSummary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100131764(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FourNumberSummary);
}

uint64_t sub_100130F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  void (*v58)(char *, uint64_t);
  void (*v59)(char *, uint64_t);
  char *v60;
  void (*v61)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  char *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  char v84;
  void (*v85)(char *, uint64_t);
  void (*v86)(char *, uint64_t);
  void (*v87)(char *, uint64_t);
  unsigned int (*v88)(char *, uint64_t, uint64_t);
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v95 = a5;
  v100 = a4;
  v103 = a1;
  v104 = a2;
  v6 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v94 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional(255, v8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v9, 0, 0);
  v99 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = __chkstk_darwin(TupleTypeMetadata2);
  v92 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v96 = (char *)&v87 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v87 - v16;
  v18 = *(_QWORD *)(v9 - 8);
  v19 = __chkstk_darwin(v15);
  v89 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v90 = (char *)&v87 - v22;
  v23 = __chkstk_darwin(v21);
  v91 = (char *)&v87 - v24;
  v25 = __chkstk_darwin(v23);
  v93 = (char *)&v87 - v26;
  v27 = __chkstk_darwin(v25);
  v97 = (char *)&v87 - v28;
  v29 = __chkstk_darwin(v27);
  v98 = (char *)&v87 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v87 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v87 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v87 - v37;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v39((char *)&v87 - v37, v103, v9);
  v39(v36, v104, v9);
  v102 = TupleTypeMetadata2;
  v40 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
  v39(v17, (uint64_t)v38, v9);
  v39(v40, (uint64_t)v36, v9);
  v101 = v6;
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v41(v17, 1, a3) == 1)
  {
    v42 = v41;
    v43 = *(void (**)(char *, uint64_t))(v18 + 8);
    v43(v36, v9);
    v43(v38, v9);
    if (v42(v40, 1, a3) == 1)
    {
      v88 = v42;
      v43(v17, v9);
      v44 = v102;
      v45 = v100;
      goto LABEL_8;
    }
LABEL_6:
    v47 = *(void (**)(char *, uint64_t))(v99 + 8);
    v48 = v17;
LABEL_14:
    v47(v48, v102);
    return 0;
  }
  v39(v33, (uint64_t)v17, v9);
  if (v41(v40, 1, a3) == 1)
  {
    v46 = *(void (**)(char *, uint64_t))(v18 + 8);
    v46(v36, v9);
    v46(v38, v9);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v33, a3);
    goto LABEL_6;
  }
  v88 = v41;
  v49 = v94;
  (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v94, v40, a3);
  LODWORD(v87) = dispatch thunk of static Equatable.== infix(_:_:)(v33, v49, a3, *(_QWORD *)(v100 + 8));
  v50 = *(void (**)(char *, uint64_t))(v101 + 8);
  v50(v49, a3);
  v43 = *(void (**)(char *, uint64_t))(v18 + 8);
  v43(v36, v9);
  v43(v38, v9);
  v50(v33, a3);
  v43(v17, v9);
  v45 = v100;
  v44 = v102;
  if ((v87 & 1) == 0)
    return 0;
LABEL_8:
  v87 = v43;
  v51 = type metadata accessor for FourNumberSummary(0, a3, v45, v95);
  v52 = v103;
  v53 = v98;
  v39(v98, v103 + *(int *)(v51 + 44), v9);
  v95 = v51;
  v54 = v97;
  v39(v97, v104 + *(int *)(v51 + 44), v9);
  v55 = v96;
  v56 = &v96[*(int *)(v44 + 48)];
  v39(v96, (uint64_t)v53, v9);
  v39(v56, (uint64_t)v54, v9);
  v57 = v88;
  if (v88(v55, 1, a3) != 1)
  {
    v60 = v93;
    v39(v93, (uint64_t)v55, v9);
    if (v57(v56, 1, a3) != 1)
    {
      v63 = v60;
      v64 = v101;
      v65 = v55;
      v66 = v94;
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v94, v56, a3);
      v67 = dispatch thunk of static Equatable.== infix(_:_:)(v63, v66, a3, *(_QWORD *)(v100 + 8));
      v68 = *(void (**)(char *, uint64_t))(v64 + 8);
      v68(v66, a3);
      v59 = v87;
      v87(v97, v9);
      v59(v98, v9);
      v68(v63, a3);
      v52 = v103;
      v59(v65, v9);
      if ((v67 & 1) == 0)
        return 0;
      goto LABEL_18;
    }
    v61 = v87;
    v87(v97, v9);
    v61(v98, v9);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v60, a3);
    goto LABEL_13;
  }
  v58 = v87;
  v87(v54, v9);
  v58(v53, v9);
  if (v57(v56, 1, a3) != 1)
  {
LABEL_13:
    v47 = *(void (**)(char *, uint64_t))(v99 + 8);
    v48 = v55;
    goto LABEL_14;
  }
  v58(v55, v9);
  v59 = v58;
LABEL_18:
  v69 = v95;
  if (*(_QWORD *)(v52 + *(int *)(v95 + 48)) == *(_QWORD *)(v104 + *(int *)(v95 + 48)))
  {
    v70 = a3;
    v71 = v104;
    v72 = v91;
    v39(v91, v52 + *(int *)(v95 + 52), v9);
    v73 = v71 + *(int *)(v69 + 52);
    v74 = v70;
    v75 = v90;
    v39(v90, v73, v9);
    v76 = v102;
    v77 = v92;
    v78 = &v92[*(int *)(v102 + 48)];
    v39(v92, (uint64_t)v72, v9);
    v39(v78, (uint64_t)v75, v9);
    v79 = v88;
    if (v88(v77, 1, v74) == 1)
    {
      v59(v75, v9);
      v59(v72, v9);
      if (v79(v78, 1, v74) == 1)
      {
        v59(v77, v9);
        return 1;
      }
      goto LABEL_24;
    }
    v80 = v89;
    v39(v89, (uint64_t)v77, v9);
    if (v79(v78, 1, v74) == 1)
    {
      v81 = v87;
      v87(v75, v9);
      v81(v72, v9);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v80, v74);
LABEL_24:
      (*(void (**)(char *, uint64_t))(v99 + 8))(v77, v76);
      return 0;
    }
    v82 = v101;
    v83 = v94;
    (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v94, v78, v74);
    v84 = dispatch thunk of static Equatable.== infix(_:_:)(v80, v83, v74, *(_QWORD *)(v100 + 8));
    v85 = *(void (**)(char *, uint64_t))(v82 + 8);
    v85(v83, v74);
    v86 = v87;
    v87(v75, v9);
    v86(v72, v9);
    v85(v80, v74);
    v86(v77, v9);
    if ((v84 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t sub_100131754(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100130F94(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_100131764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t initializeBufferWithCopyOfBuffer for ObservabilityStateDumper(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2, a2);
  return v3;
}

uint64_t destroy for ObservabilityStateDumper(_QWORD *a1)
{
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
  swift_release(a1[5]);
  swift_release(a1[6]);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1 + 7);
  return _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1 + 12);
}

uint64_t initializeWithCopy for ObservabilityStateDumper(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain(v5, v10);
  swift_retain(v6, v11);
  v9(a1 + 56, a2 + 56, v8);
  v12 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 96, a2 + 96);
  return a1;
}

_QWORD *assignWithCopy for ObservabilityStateDumper(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100131928(a1, a2);
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_retain(v4, v6);
  swift_release(v5);
  v7 = a2[6];
  v8 = a1[6];
  a1[6] = v7;
  swift_retain(v7, v9);
  swift_release(v8);
  sub_100131928(a1 + 7, a2 + 7);
  sub_100131928(a1 + 12, a2 + 12);
  return a1;
}

_QWORD *sub_100131928(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v10 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v10 + 82) & 2) != 0)
      {
        v12 = *result;
        v13 = *a2;
        swift_retain(*a2, a2);
        result = (_QWORD *)swift_release(v12);
        *v3 = v13;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v10 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v11 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v15 = *a2;
          *v3 = *a2;
          swift_retain(v15, a2);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v11);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v16, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14, v9);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v16, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for ObservabilityStateDumper(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for ObservabilityStateDumper(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v7);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(a1 + 96));
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ObservabilityStateDumper(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ObservabilityStateDumper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservabilityStateDumper()
{
  return &type metadata for ObservabilityStateDumper;
}

uint64_t sub_100131C04@<X0>(int a1@<W0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  __n128 v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  __n128 v58;
  char *v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char *v64;
  uint64_t v65;
  __n128 v66;
  char *v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char *v94;

  v93 = a1;
  v89 = a2;
  v4 = sub_100008A18(&qword_100262C10);
  v5 = __chkstk_darwin(v4);
  v82 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v86 = (char *)&v78 - v8;
  __chkstk_darwin(v7);
  v85 = (char *)&v78 - v9;
  v90 = type metadata accessor for TimeRange(0);
  v10 = __chkstk_darwin(v90);
  v79 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v84 = (char *)&v78 - v13;
  __chkstk_darwin(v12);
  v83 = (char *)&v78 - v14;
  v15 = type metadata accessor for TimeZone(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Calendar(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DateComponents(0);
  v87 = *(_QWORD *)(v23 - 8);
  v88 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Date(0);
  v91 = *(_QWORD *)(v26 - 8);
  v92 = v26;
  v27 = __chkstk_darwin(v26);
  v78 = (char *)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v81 = (char *)&v78 - v30;
  v31 = __chkstk_darwin(v29);
  v80 = (char *)&v78 - v32;
  __chkstk_darwin(v31);
  v33 = floorf(a3 * 86400.0);
  v34.n128_f64[0] = -v33;
  v94 = (char *)&v78 - v35;
  Date.addingTimeInterval(_:)(v34);
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v36 = sub_10000ABD8(v19, (uint64_t)qword_10026D1E0);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v37(v22, v36, v19);
  if (qword_100264E80 != -1)
    swift_once(&qword_100264E80, sub_10015B3D8);
  v38 = sub_10000ABD8(v15, (uint64_t)qword_10026D228);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v38, v15);
  Calendar.dateComponents(in:from:)(v18, v94);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v39 = *(void (**)(char *, uint64_t))(v20 + 8);
  v39(v22, v19);
  DateComponents.second.setter(0, 0);
  v40 = DateComponents.nanosecond.setter(0, 0);
  if (!(_BYTE)v93)
  {
    DateComponents.minute.setter(0, 0);
    DateComponents.hour.setter(0, 0);
    v37(v22, v36, v19);
    v56 = v85;
    Calendar.date(from:)(v25);
    v39(v22, v19);
    v57 = v91;
    v43 = v92;
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48))(v56, 1, v92);
    if ((_DWORD)result != 1)
    {
      v59 = v80;
      v58.n128_f64[0] = v33;
      Date.addingTimeInterval(_:)(v58);
      v47 = *(void (**)(char *, uint64_t))(v57 + 8);
      v47(v56, v43);
      v48 = (uint64_t)v83;
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v83, v59, v43);
      *(_BYTE *)(v48 + *(int *)(v90 + 20)) = 0;
      v60 = sub_100008A18((uint64_t *)&unk_1002653F0);
      v50 = swift_allocObject(v60, 112, 7);
      *(_OWORD *)(v50 + 16) = xmmword_1001B77A0;
      result = DateComponents.month.getter();
      if ((v61 & 1) == 0)
      {
        *(_QWORD *)(v50 + 56) = &type metadata for Int;
        *(_QWORD *)(v50 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v50 + 32) = result;
        result = DateComponents.day.getter();
        if ((v62 & 1) == 0)
        {
          *(_QWORD *)(v50 + 96) = &type metadata for Int;
          *(_QWORD *)(v50 + 104) = &protocol witness table for Int;
          *(_QWORD *)(v50 + 72) = result;
          v54 = 0x6432302564323025;
          v55 = 0xE800000000000000;
          goto LABEL_23;
        }
        goto LABEL_30;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v93 == 1)
  {
    DateComponents.minute.setter(0, 0);
    v37(v22, v36, v19);
    v41 = v86;
    Calendar.date(from:)(v25);
    v39(v22, v19);
    v42 = v91;
    v43 = v92;
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48))(v41, 1, v92);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v46 = v81;
      v45.n128_f64[0] = v33;
      Date.addingTimeInterval(_:)(v45);
      v47 = *(void (**)(char *, uint64_t))(v42 + 8);
      v47(v41, v43);
      v48 = (uint64_t)v84;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v84, v46, v43);
      *(_BYTE *)(v48 + *(int *)(v90 + 20)) = 1;
      v49 = sub_100008A18((uint64_t *)&unk_1002653F0);
      v50 = swift_allocObject(v49, 152, 7);
      *(_OWORD *)(v50 + 16) = xmmword_1001B7630;
      result = DateComponents.month.getter();
      if ((v51 & 1) == 0)
      {
        *(_QWORD *)(v50 + 56) = &type metadata for Int;
        *(_QWORD *)(v50 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v50 + 32) = result;
        result = DateComponents.day.getter();
        if ((v52 & 1) == 0)
        {
          *(_QWORD *)(v50 + 96) = &type metadata for Int;
          *(_QWORD *)(v50 + 104) = &protocol witness table for Int;
          *(_QWORD *)(v50 + 72) = result;
          result = DateComponents.hour.getter();
          if ((v53 & 1) == 0)
          {
            *(_QWORD *)(v50 + 136) = &type metadata for Int;
            *(_QWORD *)(v50 + 144) = &protocol witness table for Int;
            *(_QWORD *)(v50 + 112) = result;
            v54 = 0x6432302564323025;
            v55 = 0xEC00000064323025;
LABEL_23:
            v73 = String.init(format:_:)(v54, v55, v50);
            v75 = v74;
            (*(void (**)(char *, uint64_t))(v87 + 8))(v25, v88);
            v47(v94, v43);
            v76 = v89;
            sub_10000ACAC(v48, v89);
            result = type metadata accessor for ObservabilityReportingInterval(0);
            v77 = (uint64_t *)(v76 + *(int *)(result + 20));
            *v77 = v73;
            v77[1] = v75;
            return result;
          }
          goto LABEL_27;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
  result = DateComponents.minute.getter(v40);
  if ((v63 & 1) != 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  DateComponents.minute.setter(15 * (result / 15), 0);
  v37(v22, v36, v19);
  v64 = v82;
  Calendar.date(from:)(v25);
  v39(v22, v19);
  v65 = v91;
  v43 = v92;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48))(v64, 1, v92);
  if ((_DWORD)result == 1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v67 = v78;
  v66.n128_f64[0] = v33;
  Date.addingTimeInterval(_:)(v66);
  v47 = *(void (**)(char *, uint64_t))(v65 + 8);
  v47(v64, v43);
  v48 = (uint64_t)v79;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v79, v67, v43);
  *(_BYTE *)(v48 + *(int *)(v90 + 20)) = 2;
  v68 = sub_100008A18((uint64_t *)&unk_1002653F0);
  v50 = swift_allocObject(v68, 192, 7);
  *(_OWORD *)(v50 + 16) = xmmword_1001B88D0;
  result = DateComponents.month.getter();
  if ((v69 & 1) != 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  *(_QWORD *)(v50 + 56) = &type metadata for Int;
  *(_QWORD *)(v50 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v50 + 32) = result;
  result = DateComponents.day.getter();
  if ((v70 & 1) != 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v50 + 96) = &type metadata for Int;
  *(_QWORD *)(v50 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v50 + 72) = result;
  result = DateComponents.hour.getter();
  if ((v71 & 1) != 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  *(_QWORD *)(v50 + 136) = &type metadata for Int;
  *(_QWORD *)(v50 + 144) = &protocol witness table for Int;
  *(_QWORD *)(v50 + 112) = result;
  result = DateComponents.minute.getter(result);
  if ((v72 & 1) == 0)
  {
    *(_QWORD *)(v50 + 176) = &type metadata for Int;
    *(_QWORD *)(v50 + 184) = &protocol witness table for Int;
    *(_QWORD *)(v50 + 152) = result;
    v55 = 0x80000001001F4690;
    v54 = 0xD000000000000010;
    goto LABEL_23;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100132418()
{
  return 1;
}

Swift::Int sub_100132420()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_100132460()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_100132484(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1001324C0()
{
  return 1701669236;
}

uint64_t sub_1001324D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1701669236 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1701669236, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

void sub_100132554(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100132560(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013444C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100132588(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013444C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001325B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v20 = a2;
  v4 = sub_100008A18(&qword_100265230);
  __chkstk_darwin(v4);
  v22 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100008A18(&qword_100265360);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ObservabilityStateDumper.ObservabilityStateDumperParams(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UtcDate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a1[3];
  v14 = a1[4];
  sub_10000B748(a1, v13);
  v15 = sub_10013444C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ObservabilityStateDumper.ObservabilityStateDumperParams.CodingKeys, &type metadata for ObservabilityStateDumper.ObservabilityStateDumperParams.CodingKeys, v15, v13, v14);
  if (v2)
  {
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
    v18 = (uint64_t)v11;
  }
  else
  {
    v16 = sub_1000A3560(&qword_100265370, type metadata accessor for UtcDate, (uint64_t)&unk_1001BB148);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v22, v12, v17, v6, v12, v16);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
    sub_100134490((uint64_t)v22, (uint64_t)v11);
    sub_10000BD40((uint64_t)v11, v20, type metadata accessor for ObservabilityStateDumper.ObservabilityStateDumperParams);
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
    v18 = (uint64_t)v11;
  }
  return sub_1000070D8(v18, type metadata accessor for ObservabilityStateDumper.ObservabilityStateDumperParams);
}

uint64_t sub_1001327C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001325B0(a1, a2);
}

void sub_1001327D8()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  id v9;
  void *v10;
  NSString v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 aBlock;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v1 = (void *)objc_opt_self(APTestingRig);
  v2 = objc_msgSend(v1, "sharedInstance");
  if (v2)
  {
    v3 = v2;
    sub_100132B84(v0, (uint64_t)&aBlock);
    v4 = swift_allocObject(&unk_100216650, 152, 7);
    v5 = v23;
    *(_OWORD *)(v4 + 112) = v22;
    *(_OWORD *)(v4 + 128) = v5;
    *(_QWORD *)(v4 + 144) = v24;
    v6 = v19;
    *(_OWORD *)(v4 + 48) = v18;
    *(_OWORD *)(v4 + 64) = v6;
    v7 = v21;
    *(_OWORD *)(v4 + 80) = v20;
    *(_OWORD *)(v4 + 96) = v7;
    v8 = v17;
    *(_OWORD *)(v4 + 16) = aBlock;
    *(_OWORD *)(v4 + 32) = v8;
    v9 = objc_msgSend(v1, "sharedInstance");
    if (v9)
    {
      v10 = v9;
      v11 = String._bridgeToObjectiveC()();
      v12 = swift_allocObject(&unk_100216678, 32, 7);
      *(_QWORD *)(v12 + 16) = sub_100132BFC;
      *(_QWORD *)(v12 + 24) = v4;
      *(_QWORD *)&v18 = sub_100133940;
      *((_QWORD *)&v18 + 1) = v12;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v17 = sub_100155378;
      *((_QWORD *)&v17 + 1) = &unk_100216690;
      v13 = _Block_copy(&aBlock);
      v14 = *((_QWORD *)&v18 + 1);
      swift_retain(v4, v15);
      swift_release(v14);
      objc_msgSend(v10, "subscribeForMessage:handler:", v11, v13);
      _Block_release(v13);

      swift_release(v4);
    }
    else
    {

      swift_release(v4);
    }
  }
}

uint64_t sub_100132988(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = sub_100008A18(&qword_100265230);
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100133960(a1, (uint64_t)v4);
  v12 = type metadata accessor for UtcDate(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v4, 1, v12) == 1)
  {
    sub_100008AD8((uint64_t)v4, &qword_100265230);
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v4, v8);
    sub_1000070D8((uint64_t)v4, type metadata accessor for UtcDate);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
    if ((_DWORD)v13 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      goto LABEL_6;
    }
  }
  Date.init()(v13);
  sub_100008AD8((uint64_t)v7, &qword_100262C10);
LABEL_6:
  v14 = sub_100132C14();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v14;
}

uint64_t sub_100132B84(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ObservabilityStateDumper(a2, a1);
  return a2;
}

uint64_t sub_100132BB8()
{
  _QWORD *v0;

  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 2);
  swift_release(v0[7]);
  swift_release(v0[8]);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 9);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 14);
  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_100132BFC(uint64_t a1)
{
  return sub_100132988(a1);
}

uint64_t sub_100132C14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  void *object;
  Swift::String v39;
  id v40;
  Class isa;
  void (*v42)(char *, uint64_t);
  Class v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(_QWORD, _QWORD, _QWORD);
  void *v66;
  uint64_t v67;
  id v68;
  char *v69;
  Class v70;
  Class v71;
  uint64_t v72;
  unsigned int (*v73)(_QWORD, _QWORD, _QWORD);
  id v74;
  uint64_t v75;
  void *v76;
  Swift::String v77;
  Swift::String v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  char *v90;
  Class v91;
  Class v92;
  id v93;
  uint64_t v94;
  void *v95;
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  Swift::String v99;
  void *v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  Swift::String v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t result;
  char *v110;
  uint64_t v111;
  Swift::String v112;
  void *v113;
  Swift::String v114;
  uint64_t v115;
  uint64_t v116;
  Swift::String v117;
  void *v118;
  Swift::String v119;
  char *v120;
  char *v121;
  Swift::String v122;
  void *v123;
  Swift::String v124;
  uint64_t v125;
  Swift::String v126;
  void *v127;
  Swift::String v128;
  char *v129;
  char *v130;
  Swift::String v131;
  void *v132;
  uint64_t v133;
  id v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  void (*v141)(char *, uint64_t);
  id v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD v161[3];

  v159 = type metadata accessor for DateComponents(0);
  v150 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v153 = (char *)&v134 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for Calendar(0);
  v148 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v151 = (char *)&v134 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v155 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v135 = (char *)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v136 = (char *)&v134 - v7;
  __chkstk_darwin(v6);
  v139 = (char *)&v134 - v8;
  v160 = type metadata accessor for TimeRange(0);
  __chkstk_darwin(v160);
  v157 = (uint64_t)&v134 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008A18(&qword_100262C10);
  v11 = __chkstk_darwin(v10);
  v138 = (char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v140 = (char *)&v134 - v14;
  v15 = __chkstk_darwin(v13);
  v147 = (char *)&v134 - v16;
  v17 = __chkstk_darwin(v15);
  v146 = (char *)&v134 - v18;
  __chkstk_darwin(v17);
  v143 = (char *)&v134 - v19;
  v20 = type metadata accessor for TimeZone(0);
  v145 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v134 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ObservabilityReportingInterval(0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v134 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v134 - v30;
  v32 = v0[3];
  v33 = v0[4];
  v158 = v0;
  sub_10000B748(v0, v32);
  v34 = (*(float (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
  v154 = v31;
  sub_100131C04(0, (uint64_t)v31, v34);
  v149 = v29;
  sub_100131C04(1, (uint64_t)v29, v34);
  v137 = v26;
  sub_100131C04(2, (uint64_t)v26, v34);
  v35 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  v161[0] = 0;
  v161[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(252);
  v36._countAndFlagsBits = 0xD000000000000033;
  v36._object = (void *)0x80000001001F4590;
  String.append(_:)(v36);
  v156 = sub_1000A3560((unint64_t *)&qword_1002677F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v156);
  object = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(object);
  v39._countAndFlagsBits = 10272;
  v39._object = (void *)0xE200000000000000;
  String.append(_:)(v39);
  v142 = (id)objc_opt_self(NSISO8601DateFormatter);
  v40 = objc_msgSend(v142, "apLocalSharedFormatter");
  static TimeZone.current.getter();
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  v42 = *(void (**)(char *, uint64_t))(v145 + 8);
  v144 = v22;
  v145 = v20;
  v141 = v42;
  v42(v22, v20);
  objc_msgSend(v40, "setTimeZone:", isa);

  v43 = Date._bridgeToObjectiveC()().super.isa;
  v44 = objc_msgSend(v40, "stringFromDate:", v43);

  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44, v45);
  v48 = v47;

  v49._countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v48);
  v50._object = (void *)0x80000001001F45D0;
  v50._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v50);
  Float.write<A>(to:)(v161, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v34);
  v51._countAndFlagsBits = 10272;
  v51._object = (void *)0xE200000000000000;
  String.append(_:)(v51);
  v134 = v35;
  v52 = objc_msgSend(v35, "stringFromTimeInterval:", floorf(v34 * 86400.0));
  if (v52)
  {
    v54 = v52;
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52, v53);
    v57 = v56;

  }
  else
  {
    v57 = (void *)0xE300000000000000;
    v55 = 7104878;
  }
  v58._countAndFlagsBits = v55;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v57);
  v59._object = (void *)0x80000001001F45F0;
  v59._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v59);
  v60 = v158;
  v61 = v158[15];
  v62 = v158[16];
  sub_10000B748(v158 + 12, v61);
  v63 = (uint64_t)v143;
  (*(void (**)(uint64_t, uint64_t))(v62 + 32))(v61, v62);
  v64 = v155;
  v65 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v155 + 48);
  if (v65(v63, 1, v3) == 1)
  {
    sub_100008AD8(v63, &qword_100262C10);
    v66 = (void *)0xE300000000000000;
    v67 = 7104878;
  }
  else
  {
    v68 = objc_msgSend(v142, "apLocalSharedFormatter");
    v69 = v144;
    static TimeZone.current.getter();
    v70 = TimeZone._bridgeToObjectiveC()().super.isa;
    v141(v69, v145);
    objc_msgSend(v68, "setTimeZone:", v70);

    v71 = Date._bridgeToObjectiveC()().super.isa;
    v72 = v63;
    v73 = v65;
    v74 = objc_msgSend(v68, "stringFromDate:", v71);

    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74, v75);
    v66 = v76;

    v65 = v73;
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v72, v3);
  }
  v77._countAndFlagsBits = v67;
  v77._object = v66;
  String.append(_:)(v77);
  swift_bridgeObjectRelease(v66);
  v78._object = (void *)0x80000001001F4610;
  v78._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v78);
  v79 = v60[10];
  v80 = v60[11];
  sub_10000B748(v60 + 7, v79);
  v81 = (uint64_t)v146;
  (*(void (**)(uint64_t, uint64_t))(v80 + 32))(v79, v80);
  v158 = v65;
  if (v65(v81, 1, v3) == 1)
  {
    sub_100008AD8(v81, &qword_100262C10);
    v82 = (void *)0xE300000000000000;
    v83 = v64;
    v84 = v152;
    v85 = v153;
    v86 = v151;
    v87 = v157;
    v88 = 7104878;
  }
  else
  {
    v89 = objc_msgSend(v142, "apLocalSharedFormatter");
    v90 = v144;
    static TimeZone.current.getter();
    v91 = TimeZone._bridgeToObjectiveC()().super.isa;
    v141(v90, v145);
    objc_msgSend(v89, "setTimeZone:", v91);

    v92 = Date._bridgeToObjectiveC()().super.isa;
    v93 = objc_msgSend(v89, "stringFromDate:", v92);

    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93, v94);
    v82 = v95;

    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v81, v3);
    v83 = v64;
    v84 = v152;
    v85 = v153;
    v86 = v151;
    v87 = v157;
  }
  v96._countAndFlagsBits = v88;
  v96._object = v82;
  String.append(_:)(v96);
  swift_bridgeObjectRelease(v82);
  v97._object = (void *)0x80000001001F4630;
  v97._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v97);
  v98 = (uint64_t)v154;
  sub_10000BD40((uint64_t)v154, v87, type metadata accessor for TimeRange);
  v99._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v156);
  v100 = v99._object;
  String.append(_:)(v99);
  swift_bridgeObjectRelease(v100);
  v101 = v87;
  v102 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
  v102(v101, v3);
  v103._countAndFlagsBits = 2108704;
  v103._object = (void *)0xE300000000000000;
  String.append(_:)(v103);
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v104 = sub_10000ABD8(v84, (uint64_t)qword_10026D1E0);
  v105 = v148;
  v106 = *(char **)(v148 + 16);
  v152 = v104;
  v153 = v106;
  ((void (*)(char *))v106)(v86);
  sub_1000093B8(*(_BYTE *)(v98 + *(int *)(v160 + 20)));
  v107 = v147;
  Calendar.date(byAdding:to:wrappingComponents:)(v85, v98, 0);
  v151 = *(char **)(v150 + 8);
  ((void (*)(char *, uint64_t))v151)(v85, v159);
  v108 = v85;
  v150 = *(_QWORD *)(v105 + 8);
  ((void (*)(char *, uint64_t))v150)(v86, v84);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v158)(v107, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_17;
  }
  v110 = v139;
  v155 = *(_QWORD *)(v155 + 32);
  ((void (*)(char *, char *, uint64_t))v155)(v139, v107, v3);
  v111 = v156;
  v112._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v156);
  v113 = v112._object;
  String.append(_:)(v112);
  swift_bridgeObjectRelease(v113);
  v102((uint64_t)v110, v3);
  v114._object = (void *)0x80000001001F4650;
  v114._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v114);
  v115 = (uint64_t)v149;
  v116 = v157;
  sub_10000BD40((uint64_t)v149, v157, type metadata accessor for TimeRange);
  v117._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v111);
  v118 = v117._object;
  String.append(_:)(v117);
  swift_bridgeObjectRelease(v118);
  v102(v116, v3);
  v119._countAndFlagsBits = 2108704;
  v119._object = (void *)0xE300000000000000;
  String.append(_:)(v119);
  ((void (*)(char *, uint64_t, uint64_t))v153)(v86, v152, v84);
  sub_1000093B8(*(_BYTE *)(v115 + *(int *)(v160 + 20)));
  v120 = v140;
  Calendar.date(byAdding:to:wrappingComponents:)(v108, v115, 0);
  ((void (*)(char *, uint64_t))v151)(v108, v159);
  ((void (*)(char *, uint64_t))v150)(v86, v84);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v158)(v120, 1, v3);
  if ((_DWORD)result == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v121 = v136;
  ((void (*)(char *, char *, uint64_t))v155)(v136, v120, v3);
  v122._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v111);
  v123 = v122._object;
  String.append(_:)(v122);
  swift_bridgeObjectRelease(v123);
  v102((uint64_t)v121, v3);
  v124._object = (void *)0x80000001001F4670;
  v124._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v124);
  v125 = (uint64_t)v137;
  sub_10000BD40((uint64_t)v137, v116, type metadata accessor for TimeRange);
  v126._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v111);
  v127 = v126._object;
  String.append(_:)(v126);
  swift_bridgeObjectRelease(v127);
  v102(v116, v3);
  v128._countAndFlagsBits = 2108704;
  v128._object = (void *)0xE300000000000000;
  String.append(_:)(v128);
  ((void (*)(char *, uint64_t, uint64_t))v153)(v86, v152, v84);
  sub_1000093B8(*(_BYTE *)(v125 + *(int *)(v160 + 20)));
  v129 = v138;
  Calendar.date(byAdding:to:wrappingComponents:)(v108, v125, 0);
  ((void (*)(char *, uint64_t))v151)(v108, v159);
  ((void (*)(char *, uint64_t))v150)(v86, v84);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v158)(v129, 1, v3);
  if ((_DWORD)result != 1)
  {
    v130 = v135;
    ((void (*)(char *, char *, uint64_t))v155)(v135, v129, v3);
    v131._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v111);
    v132 = v131._object;
    String.append(_:)(v131);
    swift_bridgeObjectRelease(v132);
    v102((uint64_t)v130, v3);

    v133 = v161[0];
    sub_1000070D8(v125, type metadata accessor for ObservabilityReportingInterval);
    sub_1000070D8((uint64_t)v149, type metadata accessor for ObservabilityReportingInterval);
    sub_1000070D8((uint64_t)v154, type metadata accessor for ObservabilityReportingInterval);
    return v133;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10013391C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100133940(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;

  return sub_100154A84(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_100133948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2, a2);
}

uint64_t sub_100133958(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100133960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100265230);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ObservabilityReportingInterval(uint64_t a1)
{
  return sub_1000AA054(a1, qword_100265290, (uint64_t)&nominal type descriptor for ObservabilityReportingInterval);
}

_QWORD *sub_1001339BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13, a2);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for TimeRange(0);
    *((_BYTE *)a1 + *(int *)(v8 + 20)) = *((_BYTE *)a2 + *(int *)(v8 + 20));
    v9 = *(int *)(a3 + 20);
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain(v12);
  }
  return a1;
}

uint64_t sub_100133A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100133AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for TimeRange(0);
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = *(_BYTE *)(a2 + *(int *)(v7 + 20));
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t sub_100133B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for TimeRange(0);
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = *(_BYTE *)(a2 + *(int *)(v7 + 20));
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100133BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for TimeRange(0);
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = *(_BYTE *)(a2 + *(int *)(v7 + 20));
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100133C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for TimeRange(0);
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = *(_BYTE *)(a2 + *(int *)(v7 + 20));
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_100133CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100133CB4);
}

uint64_t sub_100133CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for TimeRange(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100133D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100133D40);
}

uint64_t sub_100133D40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TimeRange(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100133DBC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for TimeRange(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001B8930;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100133E2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(sub_100008A18(&qword_100265230) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9, v4);
  }
  else
  {
    v7 = type metadata accessor for UtcDate(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100133F0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = type metadata accessor for UtcDate(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *sub_100133F70(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UtcDate(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = sub_100008A18(&qword_100265230);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_100134020(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for UtcDate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      v12 = type metadata accessor for Date(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(a1, a2, v12);
      return a1;
    }
    sub_1000070D8((uint64_t)a1, type metadata accessor for UtcDate);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = sub_100008A18(&qword_100265230);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    return a1;
  }
  v9 = type metadata accessor for Date(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *sub_100134128(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UtcDate(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = sub_100008A18(&qword_100265230);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_1001341D8(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for UtcDate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      v12 = type metadata accessor for Date(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(a1, a2, v12);
      return a1;
    }
    sub_1000070D8((uint64_t)a1, type metadata accessor for UtcDate);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = sub_100008A18(&qword_100265230);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    return a1;
  }
  v9 = type metadata accessor for Date(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_1001342E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001342EC);
}

uint64_t sub_1001342EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100265230);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10013432C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100134338);
}

uint64_t sub_100134338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100265230);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ObservabilityStateDumper.ObservabilityStateDumperParams(uint64_t a1)
{
  return sub_1000AA054(a1, (uint64_t *)&unk_100265320, (uint64_t)&nominal type descriptor for ObservabilityStateDumper.ObservabilityStateDumperParams);
}

void sub_100134390(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1001343F8(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_1001343F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100265330)
  {
    v2 = type metadata accessor for UtcDate(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100265330);
  }
}

unint64_t sub_10013444C()
{
  unint64_t result;

  result = qword_100265368;
  if (!qword_100265368)
  {
    result = swift_getWitnessTable(&unk_1001B8A5C, &type metadata for ObservabilityStateDumper.ObservabilityStateDumperParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265368);
  }
  return result;
}

uint64_t sub_100134490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100265230);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for ObservabilityStateDumper.ObservabilityStateDumperParams.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ObservabilityStateDumper.ObservabilityStateDumperParams.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10013456C + 4 * byte_1001B88E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10013458C + 4 * byte_1001B88E5[v4]))();
}

_BYTE *sub_10013456C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10013458C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100134594(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10013459C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001345A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001345AC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1001345B8()
{
  return 0;
}

ValueMetadata *type metadata accessor for ObservabilityStateDumper.ObservabilityStateDumperParams.CodingKeys()
{
  return &type metadata for ObservabilityStateDumper.ObservabilityStateDumperParams.CodingKeys;
}

unint64_t sub_1001345D4()
{
  unint64_t result;

  result = qword_100265378;
  if (!qword_100265378)
  {
    result = swift_getWitnessTable(&unk_1001B8A34, &type metadata for ObservabilityStateDumper.ObservabilityStateDumperParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265378);
  }
  return result;
}

unint64_t sub_10013461C()
{
  unint64_t result;

  result = qword_100265380;
  if (!qword_100265380)
  {
    result = swift_getWitnessTable(&unk_1001B89A4, &type metadata for ObservabilityStateDumper.ObservabilityStateDumperParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265380);
  }
  return result;
}

unint64_t sub_100134664()
{
  unint64_t result;

  result = qword_100265388;
  if (!qword_100265388)
  {
    result = swift_getWitnessTable(&unk_1001B89CC, &type metadata for ObservabilityStateDumper.ObservabilityStateDumperParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100265388);
  }
  return result;
}

id sub_1001346A8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  char *v16;
  char **v17;
  id v18;
  NSArray *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  objc_class *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  objc_super v64;

  v1 = type metadata accessor for URL.DirectoryHint(0);
  v60 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v61 - 8);
  v5 = __chkstk_darwin(v61);
  v59 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - v7;
  v9 = sub_100008A18(&qword_1002653E8);
  v10 = __chkstk_darwin(v9);
  v58 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v50 - v12;
  v14 = &v0[OBJC_IVAR____TtC7Metrics33PropertyListFileManagerFileSystem_propertyListDirectoryName];
  *(_QWORD *)v14 = 1280331841;
  *((_QWORD *)v14 + 1) = 0xE400000000000000;
  v15 = objc_allocWithZone((Class)NSFileManager);
  v16 = v0;
  v17 = &selRef_exclusionCriteriasCount;
  v18 = objc_msgSend(v15, "init");
  *(_QWORD *)&v16[OBJC_IVAR____TtC7Metrics33PropertyListFileManagerFileSystem_fileManager] = v18;
  v19 = NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, 1uLL, 1);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String);

  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
  {
    v45 = swift_bridgeObjectRelease(v20);
LABEL_6:
    v46 = static os_log_type_t.error.getter(v45);
    sub_1000ABCEC();
    v47 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7363697274654DLL, 0xE700000000000000);
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "Error: Could not get property list application directory path.", 62, 2, _swiftEmptyArrayStorage);

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(&v16[OBJC_IVAR____TtC7Metrics33PropertyListFileManagerFileSystem_fileDirectory], 1, 1, v61);
    goto LABEL_7;
  }
  v56 = v13;
  v57 = v8;
  v22 = v1;
  v23 = v4;
  v24 = v20 + 16 * v21;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = *(_QWORD *)(v24 + 24);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v20);
  v27 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v28 = objc_msgSend(v27, "bundleIdentifier");

  if (!v28)
  {
    v45 = swift_bridgeObjectRelease(v26);
    v4 = v23;
    goto LABEL_6;
  }
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);
  v50 = v26;
  v51 = v30;
  v32 = v31;
  v52 = v31;

  v33 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56);
  v53 = v23;
  v54 = v33;
  v34 = v58;
  v35 = v61;
  v33((uint64_t)v58, 1, 1, v61);
  v36 = enum case for URL.DirectoryHint.inferFromPath(_:);
  v55 = v16;
  v37 = v60;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 104);
  v38(v3, enum case for URL.DirectoryHint.inferFromPath(_:), v22);
  v39 = v25;
  v40 = v59;
  URL.init(filePath:directoryHint:relativeTo:)(v39, v50, v3, v34);
  v62 = v51;
  v63 = v32;
  v38(v3, v36, v22);
  v58 = (char *)sub_10002E808();
  v41 = v57;
  URL.appending<A>(path:directoryHint:)(&v62, v3, &type metadata for String, v58);
  v42 = *(void (**)(char *, uint64_t))(v37 + 8);
  v42(v3, v22);
  v60 = *(_QWORD *)(v53 + 8);
  ((void (*)(char *, uint64_t))v60)(v40, v35);
  swift_bridgeObjectRelease(v52);
  v43 = *((_QWORD *)v14 + 1);
  v62 = *(_QWORD *)v14;
  v63 = v43;
  v38(v3, v36, v22);
  v16 = v55;
  swift_bridgeObjectRetain(v43);
  v44 = (uint64_t)v56;
  URL.appending<A>(path:directoryHint:)(&v62, v3, &type metadata for String, v58);
  v42(v3, v22);
  swift_bridgeObjectRelease(v63);
  ((void (*)(char *, uint64_t))v60)(v41, v35);
  v17 = &selRef_exclusionCriteriasCount;
  v54(v44, 0, 1, v35);
  sub_1001356A0(v44, (uint64_t)&v16[OBJC_IVAR____TtC7Metrics33PropertyListFileManagerFileSystem_fileDirectory]);
LABEL_7:

  v48 = (objc_class *)type metadata accessor for PropertyListFileManagerFileSystem(0);
  v64.receiver = v16;
  v64.super_class = v48;
  return objc_msgSendSuper2(&v64, v17[234]);
}

id sub_100134B40()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PropertyListFileManagerFileSystem(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100134BC0()
{
  return type metadata accessor for PropertyListFileManagerFileSystem(0);
}

uint64_t type metadata accessor for PropertyListFileManagerFileSystem(uint64_t a1)
{
  uint64_t result;

  result = qword_1002653D0;
  if (!qword_1002653D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PropertyListFileManagerFileSystem);
  return result;
}

void sub_100134C04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100134C88(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1001B8AD8;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_100134C88(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002653E0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002653E0);
  }
}

uint64_t sub_100134CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *object;
  NSString v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  id v25;
  uint64_t v26;
  uint64_t v28;

  v5 = sub_100008A18(&qword_1002653E8);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v28 - v13;
  sub_10002EFEC(a1, a2, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10013509C((uint64_t)v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    v15 = *(void **)(v2 + OBJC_IVAR____TtC7Metrics33PropertyListFileManagerFileSystem_fileManager);
    object = URL.path(percentEncoded:)(0)._object;
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    LODWORD(object) = objc_msgSend(v15, "fileExistsAtPath:", v17);

    if ((_DWORD)object)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
      v19 = objc_allocWithZone((Class)NSDictionary);
      v25 = sub_100135598((uint64_t)v12);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      v28 = 0;
      v26 = sub_100008A18((uint64_t *)&unk_1002659F0);
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v25, &v28, &type metadata for String, v26, &protocol witness table for String);

      return v28;
    }
    v20 = static os_log_type_t.debug.getter(v18);
    sub_1000ABCEC();
    v21 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7363697274654DLL, 0xE700000000000000);
    v22 = sub_100008A18((uint64_t *)&unk_1002653F0);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_1001B76C0;
    v24 = URL.path(percentEncoded:)(0);
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    *(_QWORD *)(v23 + 64) = sub_1000A5AF8();
    *(Swift::String *)(v23 + 32) = v24;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Property list not found at path: %@", 35, 2, v23);

    swift_bridgeObjectRelease(v23);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  return 0;
}

uint64_t sub_10013509C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008A18(&qword_1002653E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1001350DC(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  void *object;
  void (*v25)(char *, uint64_t);
  void *v26;
  NSString v27;
  id v28;
  id v29;
  char *v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v44[2];
  id v45;
  uint64_t v46;
  _QWORD *v47;

  v3 = v2;
  v44[0] = a2;
  v5 = type metadata accessor for URL.DirectoryHint(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008A18(&qword_1002653E8);
  __chkstk_darwin(v9);
  v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)v44 - v17;
  sub_10002F884(v3 + OBJC_IVAR____TtC7Metrics33PropertyListFileManagerFileSystem_fileDirectory, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    v19 = sub_10013509C((uint64_t)v11);
    v20 = static os_log_type_t.error.getter(v19);
    sub_1000ABCEC();
    v21 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7363697274654DLL, 0xE700000000000000);
    v22 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Error: Could not get property list application directory path.", 62, 2, _swiftEmptyArrayStorage);

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    v45 = a1;
    v46 = v44[0];
    v47 = _swiftEmptyArrayStorage;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
    v23 = sub_10002E808();
    URL.appending<A>(path:directoryHint:)(&v45, v8, &type metadata for String, v23);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    object = URL.path(percentEncoded:)(0)._object;
    v25 = *(void (**)(char *, uint64_t))(v13 + 8);
    v25(v16, v12);
    v26 = *(void **)(v3 + OBJC_IVAR____TtC7Metrics33PropertyListFileManagerFileSystem_fileManager);
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v45 = 0;
    v28 = objc_msgSend(v26, "contentsOfDirectoryAtPath:error:", v27, &v45);

    v29 = v45;
    v30 = v18;
    if (v28)
    {
      v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, &type metadata for String);
      v32 = v29;

      sub_100149BB8(v31);
    }
    else
    {
      v33 = v45;
      v34 = _convertNSErrorToError(_:)(v29);

      v35 = swift_willThrow();
      v36 = static os_log_type_t.error.getter(v35);
      sub_1000ABCEC();
      v37 = OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7363697274654DLL, 0xE700000000000000);
      v38 = v36;
      if (os_log_type_enabled(v37, v36))
      {
        swift_errorRetain(v34);
        swift_errorRetain(v34);
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v44[0] = swift_slowAlloc(8, -1);
        *(_DWORD *)v39 = 138412290;
        swift_errorRetain(v34);
        v40 = (void *)_swift_stdlib_bridgeErrorToNSError(v34);
        v45 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v39 + 4, v39 + 12);
        v41 = v44[0];
        *(_QWORD *)v44[0] = v40;
        swift_errorRelease(v34);
        swift_errorRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Error: Could not get files in directory, error info: %@", v39, 0xCu);
        v42 = sub_100008A18(&qword_100265408);
        swift_arrayDestroy(v41, 1, v42);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v39, -1, -1);

        swift_errorRelease(v34);
      }
      else
      {
        swift_errorRelease(v34);

      }
    }
    v25(v30, v12);
    return v47;
  }
  return v22;
}

id sub_100135598(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14;

  v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v5 = v4;
  v14 = 0;
  v6 = objc_msgSend(v2, "initWithContentsOfURL:error:", v4, &v14);

  v7 = v14;
  if (v6)
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
    v12 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

uint64_t sub_1001356A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_1002653E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001356E8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 3);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 8);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 13);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 18);
  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t type metadata accessor for ObservabilityReportWorker()
{
  return objc_opt_self(_TtC7Metrics25ObservabilityReportWorker);
}

uint64_t sub_10013574C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  Class isa;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62[3];
  uint64_t v63;
  uint64_t v64;

  v2 = v1;
  v59 = a1;
  v3 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v3);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v56 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1 + 13;
  v10 = v1[16];
  v11 = v1[17];
  sub_10000B748(v1 + 13, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  v13 = v1[21];
  v14 = v1[22];
  v58 = v1 + 18;
  sub_10000B748(v1 + 18, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 8))(v12, v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return sub_100008AD8((uint64_t)v5, &qword_100262C10);
  v54 = v7;
  v16 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v17 = (uint64_t)v56;
  v16(v56, v5, v6);
  sub_10000B748(v1 + 8, v1[11]);
  v18 = sub_100135CFC(v59, 2 - (int)v12, v17);
  if (qword_100264E78 != -1)
    swift_once(&qword_100264E78, sub_100150610);
  v19 = type metadata accessor for Logger(0);
  sub_10000ABD8(v19, (uint64_t)qword_10026D208);
  v20 = swift_bridgeObjectRetain_n(v18, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  v23 = os_log_type_enabled(v21, v22);
  v55 = v6;
  if (v23)
  {
    v24 = swift_slowAlloc(22, -1);
    v59 = swift_slowAlloc(64, -1);
    v62[0] = v59;
    *(_DWORD *)v24 = 136315394;
    if ((_BYTE)v12)
    {
      if (v12 == 1)
      {
        v25 = 0xE600000000000000;
        v26 = 0x796C72756F68;
      }
      else
      {
        v25 = 0xE500000000000000;
        v26 = 0x796C696164;
      }
    }
    else
    {
      v25 = 0xED00006E6F697461;
      v26 = 0x63696E756D6D6F63;
    }
    *(_QWORD *)&v60 = sub_1000A8B30(v26, v25, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 8, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v24 + 12) = 2080;
    v28 = type metadata accessor for TimeRange(0);
    v29 = swift_bridgeObjectRetain(v18);
    v30 = Array.description.getter(v29, v28);
    v32 = v31;
    swift_bridgeObjectRelease(v18);
    *(_QWORD *)&v60 = sub_1000A8B30(v30, v32, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 8, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease_n(v18, 2);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s performing work for %s", (uint8_t *)v24, 0x16u);
    v33 = v59;
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    v6 = v55;
    v27 = *(_QWORD *)(v18 + 16);
    if (v27)
    {
LABEL_14:
      v34 = *(_QWORD *)(type metadata accessor for TimeRange(0) - 8);
      v35 = v18 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
      v57 = v2 + 3;
      v59 = *(_QWORD *)(v34 + 72);
      v53 = v18;
      swift_bridgeObjectRetain(v18);
      do
      {
        v37 = v2[16];
        v36 = v2[17];
        sub_10000B748(v9, v37);
        v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v37, v36);
        v40 = v2[16];
        v39 = v2[17];
        sub_10000B748(v9, v40);
        (*(void (**)(__int128 *__return_ptr, unint64_t, uint64_t, uint64_t))(v39 + 16))(&v60, v35, v40, v39);
        if (v61)
        {
          sub_100136930(&v60, (uint64_t)v62);
          v41 = sub_10000B748(v57, v2[6]);
          v43 = v2[16];
          v42 = v2[17];
          sub_10000B748(v9, v43);
          v44 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v42 + 8))(v43, v42) + 2801;
          v45 = v63;
          v46 = v64;
          sub_10000B748(v62, v63);
          v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v45, v46);
          v48 = *(void **)(*v41 + 16);
          sub_100008A18(&qword_1002654D0);
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v48, "recordMetric:forPurpose:properties:internalProperties:order:options:", v44, 8501, isa, 0, 0, 0);
          swift_bridgeObjectRelease(v47);

          v50 = v2[21];
          v51 = v2[22];
          sub_10000B748(v58, v50);
          (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v51 + 32))(v35, v38, v50, v51);
          _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v62);
        }
        else
        {
          sub_100008AD8((uint64_t)&v60, &qword_100267E40);
        }
        v35 += v59;
        --v27;
      }
      while (v27);
      v18 = v53;
      swift_bridgeObjectRelease(v53);
      v6 = v55;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n(v18, 2);
    v27 = *(_QWORD *)(v18 + 16);
    if (v27)
      goto LABEL_14;
  }
  (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v6);
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_100135CFC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t result;
  char *v55;
  char v56;
  void (*v57)(char *, char *);
  char *v58;
  uint64_t v59;
  char *v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  void (*v85)(char *, char *, char *);
  char *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  void (*v126)(char *, char *);
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  void (*v137)(char *, char *, uint64_t);
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  void (*v145)(char *);
  uint64_t v146;

  LODWORD(v145) = a2;
  v146 = a1;
  v4 = sub_100008A18(&qword_1002654D8);
  __chkstk_darwin(v4);
  v6 = (char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008A18(&qword_1002654E0);
  __chkstk_darwin(v7);
  v139 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for DateComponents(0);
  v142 = *(_QWORD *)(v144 - 8);
  v9 = __chkstk_darwin(v144);
  v125 = (char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v129 = (char *)&v118 - v12;
  __chkstk_darwin(v11);
  v141 = (char *)&v118 - v13;
  v14 = type metadata accessor for Calendar(0);
  v131 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v136 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v143 = (char *)&v118 - v18;
  __chkstk_darwin(v17);
  v140 = (char *)&v118 - v19;
  v20 = sub_100008A18(&qword_100262C10);
  v21 = __chkstk_darwin(v20);
  v124 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v118 - v24;
  __chkstk_darwin(v23);
  v138 = (char *)&v118 - v26;
  v27 = type metadata accessor for Date(0);
  v134 = *(_QWORD *)(v27 - 8);
  v28 = __chkstk_darwin(v27);
  v122 = (char *)&v118 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v128 = (char *)&v118 - v31;
  __chkstk_darwin(v30);
  v133 = (char *)&v118 - v32;
  v33 = type metadata accessor for TimeRange(0);
  v123 = *(_QWORD *)(v33 - 8);
  v34 = __chkstk_darwin(v33);
  v121 = (char *)&v118 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v135 = (uint64_t)&v118 - v37;
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v118 - v39;
  v41 = __chkstk_darwin(v38);
  v43 = (char *)&v118 - v42;
  __chkstk_darwin(v41);
  v45 = (char *)&v118 - v44;
  v46 = a3;
  LODWORD(a3) = (_DWORD)v145;
  sub_10000977C(v46, (int)v145, (uint64_t)&v118 - v44);
  v132 = v43;
  sub_10000977C(v146, a3, (uint64_t)v43);
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v47 = sub_10000ABD8(v14, (uint64_t)qword_10026D1E0);
  v48 = v131;
  v49 = v140;
  v145 = *(void (**)(char *))(v131 + 16);
  v146 = v47;
  v145(v140);
  v130 = v33;
  v50 = v45[*(int *)(v33 + 20)];
  v51 = v141;
  sub_1000093B8(v50);
  v52 = v138;
  Calendar.date(byAdding:to:wrappingComponents:)(v51, v45, 0);
  v142 = *(_QWORD *)(v142 + 8);
  ((void (*)(char *, uint64_t))v142)(v51, v144);
  v141 = *(char **)(v48 + 8);
  ((void (*)(char *, uint64_t))v141)(v49, v14);
  v53 = v134;
  v140 = *(char **)(v134 + 48);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v140)(v52, 1, v27);
  v118 = v45;
  if ((_DWORD)result == 1)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  v55 = v133;
  v137 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  v137(v133, v52, v27);
  v127 = sub_10000ACF0();
  v56 = dispatch thunk of static Comparable.< infix(_:_:)(v132, v55, v27, v127);
  v57 = *(void (**)(char *, char *))(v53 + 8);
  v138 = (char *)v27;
  v126 = v57;
  v57(v55, (char *)v27);
  if ((v56 & 1) == 0)
  {
    sub_10000AC68((uint64_t)v118, (uint64_t)v40);
    v59 = *(int *)(v130 + 20);
    v58 = (char *)_swiftEmptyArrayStorage;
    v120 = v6;
    v119 = v25;
    v134 = v59;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v145)(v143, v146, v14);
      if (v40[v59])
      {
        v60 = v139;
        if (v40[v59] == 1)
        {
          ((void (*)(char *, uint64_t, uint64_t))v145)(v139, v146, v14);
          v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56);
          v61(v60, 0, 1, v14);
          v62 = type metadata accessor for TimeZone(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v6, 1, 1, v62);
          LOBYTE(v116) = 1;
          LOBYTE(v114) = 1;
          LOBYTE(v112) = 1;
          LOBYTE(v110) = 1;
          LOBYTE(v108) = 1;
          LOBYTE(v106) = 1;
          LOBYTE(v104) = 1;
          LOBYTE(v102) = 1;
          LOBYTE(v100) = 1;
          v98 = 0;
          LOBYTE(v96) = 0;
          v94 = 1;
        }
        else
        {
          ((void (*)(char *, uint64_t, uint64_t))v145)(v139, v146, v14);
          v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56);
          v61(v60, 0, 1, v14);
          v64 = type metadata accessor for TimeZone(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v6, 1, 1, v64);
          LOBYTE(v116) = 1;
          LOBYTE(v114) = 1;
          LOBYTE(v112) = 1;
          LOBYTE(v110) = 1;
          LOBYTE(v108) = 1;
          LOBYTE(v106) = 1;
          LOBYTE(v104) = 1;
          LOBYTE(v102) = 1;
          LOBYTE(v100) = 0;
          v98 = 15;
          LOBYTE(v96) = 1;
          v94 = 0;
        }
        LOBYTE(v92) = 1;
        v90 = 0;
      }
      else
      {
        v60 = v139;
        ((void (*)(char *, uint64_t, uint64_t))v145)(v139, v146, v14);
        v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56);
        v61(v60, 0, 1, v14);
        v63 = type metadata accessor for TimeZone(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v6, 1, 1, v63);
        LOBYTE(v116) = 1;
        LOBYTE(v114) = 1;
        LOBYTE(v112) = 1;
        LOBYTE(v110) = 1;
        LOBYTE(v108) = 1;
        LOBYTE(v106) = 1;
        LOBYTE(v104) = 1;
        LOBYTE(v102) = 1;
        LOBYTE(v100) = 1;
        v98 = 0;
        LOBYTE(v96) = 1;
        v94 = 0;
        LOBYTE(v92) = 0;
        v90 = 1;
      }
      v65 = v129;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v60, v6, 0, 1, 0, 1, 0, 1, v90, v92, v94, v96, v98, v100, 0, v102, 0, v104, 0,
        v106,
        0,
        v108,
        0,
        v110,
        0,
        v112,
        0,
        v114,
        0,
        v116);
      v66 = v143;
      Calendar.date(byAdding:to:wrappingComponents:)(v65, v40, 0);
      ((void (*)(char *, uint64_t))v142)(v65, v144);
      ((void (*)(char *, uint64_t))v141)(v66, v14);
      v67 = v138;
      result = ((uint64_t (*)(char *, uint64_t, char *))v140)(v25, 1, v138);
      if ((_DWORD)result == 1)
        break;
      v68 = v128;
      v137(v128, v25, (uint64_t)v67);
      v69 = dispatch thunk of static Comparable.< infix(_:_:)(v132, v68, v67, v127);
      v126(v68, v67);
      v70 = v131;
      if ((v69 & 1) != 0)
      {
        sub_10000ABF0((uint64_t)v40);
        goto LABEL_28;
      }
      sub_10000AC68((uint64_t)v40, v135);
      if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
        v58 = (char *)sub_10014A91C(0, *((_QWORD *)v58 + 2) + 1, 1, (unint64_t)v58);
      v72 = *((_QWORD *)v58 + 2);
      v71 = *((_QWORD *)v58 + 3);
      if (v72 >= v71 >> 1)
        v58 = (char *)sub_10014A91C(v71 > 1, v72 + 1, 1, (unint64_t)v58);
      *((_QWORD *)v58 + 2) = v72 + 1;
      sub_10000ACAC(v135, (uint64_t)&v58[((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))+ *(_QWORD *)(v123 + 72) * v72]);
      ((void (*)(char *, uint64_t, uint64_t))v145)(v136, v146, v14);
      v73 = v40[v134];
      v133 = v58;
      if (v73)
      {
        v74 = v120;
        v77 = v139;
        if (v73 == 1)
        {
          ((void (*)(char *, uint64_t, uint64_t))v145)(v139, v146, v14);
          v61(v77, 0, 1, v14);
          v75 = type metadata accessor for TimeZone(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 1, 1, v75);
          LOBYTE(v117) = 1;
          LOBYTE(v115) = 1;
          LOBYTE(v113) = 1;
          LOBYTE(v111) = 1;
          LOBYTE(v109) = 1;
          LOBYTE(v107) = 1;
          LOBYTE(v105) = 1;
          LOBYTE(v103) = 1;
          LOBYTE(v101) = 1;
          v99 = 0;
          LOBYTE(v97) = 0;
          v95 = 1;
        }
        else
        {
          ((void (*)(char *, uint64_t, uint64_t))v145)(v139, v146, v14);
          v61(v77, 0, 1, v14);
          v78 = type metadata accessor for TimeZone(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v74, 1, 1, v78);
          LOBYTE(v117) = 1;
          LOBYTE(v115) = 1;
          LOBYTE(v113) = 1;
          LOBYTE(v111) = 1;
          LOBYTE(v109) = 1;
          LOBYTE(v107) = 1;
          LOBYTE(v105) = 1;
          LOBYTE(v103) = 1;
          LOBYTE(v101) = 0;
          v99 = 15;
          LOBYTE(v97) = 1;
          v95 = 0;
        }
        LOBYTE(v93) = 1;
        v91 = 0;
      }
      else
      {
        v77 = v139;
        ((void (*)(char *, uint64_t, uint64_t))v145)(v139, v146, v14);
        v61(v77, 0, 1, v14);
        v76 = type metadata accessor for TimeZone(0);
        v74 = v120;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v120, 1, 1, v76);
        LOBYTE(v117) = 1;
        LOBYTE(v115) = 1;
        LOBYTE(v113) = 1;
        LOBYTE(v111) = 1;
        LOBYTE(v109) = 1;
        LOBYTE(v107) = 1;
        LOBYTE(v105) = 1;
        LOBYTE(v103) = 1;
        LOBYTE(v101) = 1;
        v99 = 0;
        LOBYTE(v97) = 1;
        v95 = 0;
        LOBYTE(v93) = 0;
        v91 = 1;
      }
      v79 = v125;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v77, v74, 0, 1, 0, 1, 0, 1, v91, v93, v95, v97, v99, v101, 0, v103, 0, v105, 0,
        v107,
        0,
        v109,
        0,
        v111,
        0,
        v113,
        0,
        v115,
        0,
        v117);
      v80 = v74;
      v81 = v124;
      v82 = v136;
      Calendar.date(byAdding:to:wrappingComponents:)(v79, v40, 0);
      ((void (*)(char *, uint64_t))v142)(v79, v144);
      ((void (*)(char *, uint64_t))v141)(v82, v14);
      v83 = v138;
      result = ((uint64_t (*)(char *, uint64_t, char *))v140)(v81, 1, v138);
      if ((_DWORD)result == 1)
        goto LABEL_30;
      v84 = v122;
      v85 = (void (*)(char *, char *, char *))v137;
      v137(v122, v81, (uint64_t)v83);
      v59 = v134;
      v86 = v83;
      v87 = v40[v134];
      v88 = (uint64_t)v121;
      v85(v121, v84, v86);
      *(_BYTE *)(v88 + *(int *)(v130 + 20)) = v87;
      sub_10000ABF0((uint64_t)v40);
      sub_10000ACAC(v88, (uint64_t)v40);
      v25 = v119;
      v6 = v80;
      v58 = v133;
      v48 = v70;
    }
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v58 = (char *)_swiftEmptyArrayStorage;
LABEL_28:
  v89 = (uint64_t)v118;
  sub_10000ABF0((uint64_t)v132);
  sub_10000ABF0(v89);
  return (uint64_t)v58;
}

uint64_t sub_100136930(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

id sub_100136984()
{
  void *v0;
  id v1;
  objc_class *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  objc_class *v27;
  _QWORD v29[2];
  id v30;
  uint64_t v31;
  objc_super v32;
  _QWORD v33[3];
  uint64_t v34;
  _UNKNOWN **v35;
  _QWORD v36[3];
  uint64_t v37;
  _UNKNOWN **v38;

  v31 = OBJC_IVAR____TtC7Metrics42APSigningObservabilityCorrespondentWrapper_correspondent;
  v1 = objc_allocWithZone((Class)APSystemClock);
  v30 = v0;
  v29[0] = objc_msgSend(v1, "init");
  v2 = (objc_class *)type metadata accessor for PropertyListFileManagerFileSystem(0);
  v37 = (uint64_t)v2;
  v38 = &off_1002167E8;
  v36[0] = objc_msgSend(objc_allocWithZone(v2), "init");
  v3 = type metadata accessor for SigningObservabilityPropertyListFileStore();
  v4 = (_QWORD *)swift_allocObject(v3, 56, 7);
  v5 = sub_100136C8C((uint64_t)v36, (uint64_t)v2);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  v9 = *v7;
  v4[5] = v2;
  v4[6] = &off_1002167E8;
  v4[2] = v9;
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v36);
  v10 = type metadata accessor for SigningReportCoreAnalyticsTransmitter();
  v11 = swift_allocObject(v10, 16, 7);
  v37 = v3;
  v38 = &off_1002169C8;
  v36[0] = v4;
  v34 = v10;
  v35 = &off_100216D20;
  v33[0] = v11;
  v12 = type metadata accessor for SigningObservabilityCorrespondent();
  v13 = (_QWORD *)swift_allocObject(v12, 104, 7);
  v14 = sub_100136C8C((uint64_t)v36, v3);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_100136C8C((uint64_t)v33, v34);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = *v16;
  v23 = *v20;
  v13[6] = v3;
  v13[7] = &off_1002169C8;
  v13[11] = v10;
  v13[12] = &off_100216D20;
  v13[8] = v23;
  v13[2] = v29[0];
  v13[3] = v22;
  swift_retain(v4, v24);
  swift_retain(v11, v25);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v33);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v36);
  swift_release(v4);
  swift_release(v11);
  v26 = v30;
  *(_QWORD *)(v29[1] + v31) = v13;

  v27 = (objc_class *)type metadata accessor for APSigningObservabilityCorrespondentWrapper();
  v32.receiver = v26;
  v32.super_class = v27;
  return objc_msgSendSuper2(&v32, "init");
}

id sub_100136C2C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for APSigningObservabilityCorrespondentWrapper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for APSigningObservabilityCorrespondentWrapper()
{
  return objc_opt_self(_TtC7Metrics42APSigningObservabilityCorrespondentWrapper);
}

uint64_t sub_100136C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id sub_100136DD0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ECPrimitiveCreator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ECPrimitiveCreator()
{
  return objc_opt_self(_TtC7Metrics18ECPrimitiveCreator);
}

void sub_100136E20(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  NSDictionary v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSString v29;
  id v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __objc2_prot *v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;

  v34 = a6;
  v35 = a5;
  v36 = a2;
  v37 = a1;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.debug.getter(v10);
  v33[1] = sub_1000ABCEC();
  v14 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
  v15 = sub_100008A18((uint64_t *)&unk_1002653F0);
  v16 = swift_allocObject(v15, 72, 7);
  v17 = v16;
  *(_OWORD *)(v16 + 16) = xmmword_1001B76C0;
  if (isa)
  {
    v40 = sub_100008A18(&qword_1002655B0);
    v41 = sub_10013720C();
    *(_QWORD *)&v39 = isa;
    sub_100136930(&v39, v17 + 32);
  }
  else
  {
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_1000A5AF8();
    *(_QWORD *)(v17 + 32) = 7104878;
    *(_QWORD *)(v17 + 40) = 0xE300000000000000;
  }
  swift_bridgeObjectRetain(isa);
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "EC Observability report:\n%{public}@", 35, 2, v17);

  swift_bridgeObjectRelease(v17);
  v18 = objc_msgSend((id)objc_opt_self(MetricsModuleCommon), "metricClass");
  swift_getObjCClassMetadata(v18);
  v19 = UUID.init()();
  UUID.uuidString.getter(v19);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  if (isa)
  {
    sub_100008A18(&qword_1002654D0);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a4)
  {
    sub_100008A18((uint64_t *)&unk_1002659F0);
    v23.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v23.super.isa = 0;
  }
  v24 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v25 = objc_msgSend(v24, "initWithPurpose:metric:contentIdentifier:contextIdentifier:handle:branch:properties:internalProperties:relayData:environment:order:options:", v36, v37, 0, 0, v22, 0, isa, v23.super.isa, 0, 0, v35, v34);

  if (v25)
  {
    v38 = &OBJC_PROTOCOL___APMetricDaemonExtension;
    v27 = swift_dynamicCastObjCProtocolConditional(v25, 1, &v38);
    if (v27)
    {
      v28 = (void *)v27;
      swift_unknownObjectRetain(v25);
      v29 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "updateClientBundleID:", v29);

      swift_unknownObjectRelease(v25);
    }
    v30 = objc_msgSend((id)objc_opt_self(MetricsModule), "storage");
    objc_msgSend(v30, "receivedMetric:", v25);
    swift_unknownObjectRelease(v25);
    swift_unknownObjectRelease(v30);
  }
  else
  {
    v31 = static os_log_type_t.error.getter(v26);
    v32 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Couldn't create observability metric", 36, 2, _swiftEmptyArrayStorage);

  }
}

unint64_t sub_10013720C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002655B8;
  if (!qword_1002655B8)
  {
    v1 = sub_1000A5AB4(&qword_1002655B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1002655B8);
  }
  return result;
}

uint64_t sub_100137258()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for GroupRandomizer()
{
  return objc_opt_self(_TtC7Metrics15GroupRandomizer);
}

uint64_t sub_1001372A4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 3);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 8);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 13);
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t type metadata accessor for ObservabilityWorkSource()
{
  return objc_opt_self(_TtC7Metrics23ObservabilityWorkSource);
}

_QWORD *sub_100137300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *result;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD v28[5];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v23 - v7;
  v9 = 0;
  result = (_QWORD *)(v0 + 104);
  v11 = *(void **)(v0 + 16);
  v25 = v0;
  v26 = v11;
  v24 = (_QWORD *)(v0 + 104);
  while (1)
  {
    sub_10000B748(result, *(_QWORD *)(v1 + 128));
    v12 = sub_10015F9C0();
    v13 = v12;
    v14 = v12[2];
    if (v14)
    {
      v27 = v9;
      v15 = (uint64_t)(v12 + 4);
      do
      {
        sub_10000D4D8(v15, (uint64_t)v28);
        v16 = objc_msgSend(*(id *)(*sub_10000B748(v28, v28[3]) + 16), "now");
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

        sub_10013574C((uint64_t)v6);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
        _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v28);
        v15 += 40;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease(v13);
      v1 = v25;
      v9 = v27;
    }
    else
    {
      swift_bridgeObjectRelease(v12);
    }
    v17 = sub_1000081E4();
    v18 = objc_msgSend(v26, "now");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v19 = v17[2];
    if (!v19)
      break;
    v27 = v9 + 1;
    v20 = *(_QWORD *)(type metadata accessor for AvailablePeriodicWork(0) - 8);
    v21 = (char *)v17 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v22 = *(_QWORD *)(v20 + 72);
    swift_bridgeObjectRetain(v17);
    while ((static Date.< infix(_:_:)(v21, v8) & 1) == 0)
    {
      v21 += v22;
      if (!--v19)
      {
        swift_bridgeObjectRelease(v17);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease(v17);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    swift_bridgeObjectRelease(v17);
    v9 = v27;
    result = v24;
    if (v27 == 4)
      return result;
  }
LABEL_14:
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return (_QWORD *)swift_bridgeObjectRelease(v17);
}

uint64_t initializeBufferWithCopyOfBuffer for ObservabilityError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ObservabilityError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ObservabilityError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001375D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1001375E0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ObservabilityError()
{
  return &type metadata for ObservabilityError;
}

Swift::Int sub_1001375FC()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100137658()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(_QWORD *)v0;
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 8));
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100137694(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001376EC(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8));
}

unint64_t sub_100137714()
{
  unint64_t result;

  result = qword_1002657B8;
  if (!qword_1002657B8)
  {
    result = swift_getWitnessTable(&unk_1001B8CA4, &type metadata for ObservabilityError);
    atomic_store(result, (unint64_t *)&qword_1002657B8);
  }
  return result;
}

uint64_t sub_100137758()
{
  uint64_t v0;

  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v0 + 16));
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for PersistentTimeRangeOffset()
{
  return objc_opt_self(_TtC7Metrics25PersistentTimeRangeOffset);
}

float sub_1001377A4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD **)v0;
  v2 = (_QWORD *)(*(_QWORD *)v0 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_10000B748(v2, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  if ((v5 & 0x100000000) == 0)
    return *(float *)&v5;
  v7 = v1[10];
  v8 = v1[11];
  sub_10000B748(v1 + 7, v7);
  v6 = (*(float (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  v9 = v1[5];
  v10 = v1[6];
  sub_10000B748(v2, v9);
  (*(void (**)(uint64_t, uint64_t, float))(v10 + 16))(v9, v10, v6);
  return v6;
}

uint64_t sub_100137860()
{
  uint64_t v0;

  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 61, 7);
}

uint64_t type metadata accessor for CachingTimeRangeOffset()
{
  return objc_opt_self(_TtC7Metrics22CachingTimeRangeOffset);
}

ValueMetadata *type metadata accessor for NormalizedScaleFactor()
{
  return &type metadata for NormalizedScaleFactor;
}

BOOL sub_1001378B4(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1001378C8()
{
  float *v0;
  float v1;
  _QWORD v3[2];

  v1 = *v0;
  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  Float.write<A>(to:)(v3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v1);
  return v3[0];
}

uint64_t sub_100137908()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  char v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  void *object;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t (*v86)(char *, uint64_t);
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  _QWORD v118[2];
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int128 v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  void (*v139)(char *, uint64_t);
  void (*v140)(char *, uint64_t);
  uint64_t (*v141)(char *, uint64_t);
  uint64_t v142;
  void (*v143)(char *, uint64_t, uint64_t);
  __int128 v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char v155;
  uint64_t v156;
  unint64_t v157;

  v1 = sub_100008A18((uint64_t *)&unk_100267080);
  __chkstk_darwin(v1);
  v147 = (char *)v118 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SigningFailure(0);
  v137 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v146 = (char *)v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for TimeZone(0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v134 = (char *)v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for Calendar(0);
  v6 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v150 = (char *)v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for DateComponents(0);
  v133 = *(_QWORD *)(v148 - 8);
  v8 = __chkstk_darwin(v148);
  v129 = (char *)v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v130 = (char *)v118 - v11;
  __chkstk_darwin(v10);
  *(_QWORD *)&v144 = (char *)v118 - v12;
  v152 = type metadata accessor for Date(0);
  v149 = *(_QWORD *)(v152 - 8);
  v13 = __chkstk_darwin(v152);
  v128 = (uint64_t)v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v145 = (uint64_t)v118 - v16;
  v17 = __chkstk_darwin(v15);
  v151 = (char *)v118 - v18;
  __chkstk_darwin(v17);
  v154 = (char *)v118 - v19;
  swift_getObjectType(v0[2]);
  v20 = sub_10002DFB0();
  v22 = v21;
  v24 = v23;
  v25 = v0 + 3;
  v131 = v0;
  v26 = sub_10000B748(v0 + 3, v0[6]);
  sub_10000B748((_QWORD *)(*v26 + 16), *(_QWORD *)(*v26 + 40));
  v119 = (unint64_t)"clock";
  result = sub_100134CDC(0xD000000000000016, 0x80000001001F4B30);
  v132 = v0 + 3;
  v121 = v22;
  v120 = v24;
  if (!result || (result = sub_10013943C(result), (v30 & 1) != 0))
  {
    v35 = v20;
    static Date.distantPast.getter(result);
    if (qword_100264E60 != -1)
LABEL_46:
      swift_once(&qword_100264E60, sub_10012F9C0);
    v36 = v153;
    v37 = sub_10000ABD8(v153, (uint64_t)qword_10026D1E0);
    v38 = v150;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v150, v37, v36);
    v39 = v6;
    if (qword_100264E80 != -1)
      swift_once(&qword_100264E80, sub_10015B3D8);
    v40 = v136;
    v41 = sub_10000ABD8(v136, (uint64_t)qword_10026D228);
    v42 = v135;
    v43 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v134, v41, v40);
    v44 = v144;
    Calendar.dateComponents(in:from:)(v43, v154);
    v45 = v44;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v40);
    v46 = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v38, v36);
    result = DateComponents.year.getter(v46);
    if ((v47 & 1) != 0)
      goto LABEL_50;
    v48 = result;
    v6 = v39;
    result = DateComponents.month.getter();
    v20 = v35;
    v22 = v121;
    v24 = v120;
    if ((v49 & 1) != 0)
    {
LABEL_51:
      __break(1u);
    }
    else
    {
      v31 = result;
      result = DateComponents.day.getter(result);
      v25 = v132;
      if ((v50 & 1) == 0)
      {
        v32 = result;
        (*(void (**)(char *, uint64_t))(v149 + 8))(v154, v152);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(v133 + 8))(v45, v148);
        v33 = v48 < v20;
        if (v48 != v20)
          goto LABEL_4;
        goto LABEL_12;
      }
    }
    __break(1u);
    return result;
  }
  v31 = v28;
  v32 = v29;
  v33 = result < v20;
  if (result != v20)
  {
LABEL_4:
    v34 = v137;
    goto LABEL_14;
  }
LABEL_12:
  v33 = v31 < v22;
  v34 = v137;
  if (v31 == v22)
    v33 = v32 < v24;
LABEL_14:
  if (v33)
  {
    v51 = v131;
    v52 = sub_100138470(v20, v22, v24);
    if (v52[2])
    {
      v154 = (char *)v52[2];
      v118[1] = v20;
      v127 = v6;
      v124 = enum case for Calendar.Component.day(_:);
      v54 = v52;
      swift_retain(v51, v53);
      v118[0] = v54;
      v55 = v54 + 6;
      v144 = xmmword_1001B7630;
      v122 = (unint64_t)"lastDayReportSubmitted";
      v126 = 0x80000001001F4B50;
      v123 = xmmword_1001B76C0;
      v56 = v51;
      v125 = v3;
      while (1)
      {
        v58 = *(v55 - 1);
        v57 = *v55;
        v59 = *(v55 - 2);
        v60 = *sub_10000B748(v25, v56[6]);
        v156 = 0x736572756C696166;
        v157 = 0xE90000000000002FLL;
        v61 = sub_100008A18((uint64_t *)&unk_1002653F0);
        v62 = swift_allocObject(v61, 152, 7);
        *(_OWORD *)(v62 + 16) = v144;
        *(_QWORD *)(v62 + 56) = &type metadata for Int;
        *(_QWORD *)(v62 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v62 + 72) = v58;
        *(_QWORD *)(v62 + 32) = v59;
        *(_QWORD *)(v62 + 96) = &type metadata for Int;
        *(_QWORD *)(v62 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v62 + 136) = &type metadata for Int;
        *(_QWORD *)(v62 + 144) = &protocol witness table for Int;
        *(_QWORD *)(v62 + 112) = v57;
        v63._countAndFlagsBits = String.init(format:_:)(0x6432302564343025, 0xEC00000064323025, v62);
        object = v63._object;
        String.append(_:)(v63);
        swift_bridgeObjectRelease(object);
        v66 = v156;
        v65 = v157;
        sub_10000B748((_QWORD *)(v60 + 16), *(_QWORD *)(v60 + 40));
        v67 = sub_100134CDC(v66, v65);
        v68 = v147;
        if (v67)
          sub_100138C68(v67, v147);
        else
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v147, 1, 1, v3);
        v69 = (uint64_t)v146;
        swift_bridgeObjectRelease(v65);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v68, 1, v3) == 1)
        {
          sub_100138608((uint64_t)v68);
        }
        else
        {
          sub_100138648((uint64_t)v68, v69);
          v70 = sub_10000B748(v25, v56[6]);
          sub_10000B748((_QWORD *)(*v70 + 16), *(_QWORD *)(*v70 + 40));
          v71 = sub_100134CDC(0xD000000000000012, v126);
          if (v71)
          {
            v72 = v71;
            v73 = v153;
            if (!*(_QWORD *)(v71 + 16)
              || (v74 = sub_10002DDCC(0xD000000000000012, v122 | 0x8000000000000000), (v75 & 1) == 0)
              || (v156 = *(_QWORD *)(*(_QWORD *)(v72 + 56) + 8 * v74),
                  swift_unknownObjectRetain(v156),
                  v76 = sub_100008A18((uint64_t *)&unk_1002659F0),
                  (swift_dynamicCast(&v155, &v156, v76, &type metadata for Bool, 6) & 1) == 0))
            {
              v155 = 2;
            }
            swift_bridgeObjectRelease(v72);
            v138 = v155 & 1;
          }
          else
          {
            v138 = 0;
            v73 = v153;
          }
          v77 = v150;
          (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v151, v69, v152);
          if (qword_100264E60 != -1)
            swift_once(&qword_100264E60, sub_10012F9C0);
          v78 = sub_10000ABD8(v73, (uint64_t)qword_10026D1E0);
          v79 = v127;
          v80 = *(void (**)(char *, uint64_t, uint64_t))(v127 + 16);
          v142 = v78;
          v143 = v80;
          ((void (*)(char *))v80)(v77);
          if (qword_100264E80 != -1)
            swift_once(&qword_100264E80, sub_10015B3D8);
          v81 = v136;
          v82 = sub_10000ABD8(v136, (uint64_t)qword_10026D228);
          v83 = v135;
          v84 = v134;
          (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v134, v82, v81);
          v85 = v130;
          Calendar.dateComponents(in:from:)(v84, v151);
          (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v81);
          v86 = *(uint64_t (**)(char *, uint64_t))(v79 + 8);
          v87 = v86(v77, v73);
          result = DateComponents.year.getter(v87);
          if ((v88 & 1) != 0)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
          v89 = result;
          result = DateComponents.month.getter();
          if ((v90 & 1) != 0)
            goto LABEL_48;
          v91 = result;
          v141 = v86;
          result = ((uint64_t (*)(void))DateComponents.day.getter)();
          if ((v92 & 1) != 0)
            goto LABEL_49;
          v93 = result;
          v140 = *(void (**)(char *, uint64_t))(v149 + 8);
          v140(v151, v152);
          v139 = *(void (**)(char *, uint64_t))(v133 + 8);
          v139(v85, v148);
          v94 = v125;
          v95 = (uint64_t *)(v69 + *(int *)(v125 + 20));
          v96 = v69;
          v97 = *v95;
          v98 = v95[1];
          v99 = v95[2];
          sub_10013D5C8(v89, v91, v93, v145);
          v100 = v128;
          sub_10013D5C8(v97, v98, v99, v128);
          v101 = v150;
          v143(v150, v142, v153);
          v102 = sub_100008A18(&qword_1002659E8);
          v103 = type metadata accessor for Calendar.Component(0);
          v104 = *(_QWORD *)(v103 - 8);
          v105 = *(unsigned __int8 *)(v104 + 80);
          v106 = (v105 + 32) & ~v105;
          v107 = swift_allocObject(v102, v106 + *(_QWORD *)(v104 + 72), v105 | 7);
          *(_OWORD *)(v107 + 16) = v123;
          v108 = v107 + v106;
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v104 + 104))(v108, v124, v103);
          v3 = (uint64_t)sub_10013B0D0(v107);
          swift_setDeallocating(v107);
          swift_arrayDestroy(v108, 1, v103);
          swift_deallocClassInstance(v107, 32, 7);
          v109 = v129;
          v35 = v145;
          Calendar.dateComponents(_:from:to:)(v3, v145, v100);
          swift_bridgeObjectRelease(v3);
          v110 = v141(v101, v153);
          v111 = DateComponents.day.getter(v110);
          LOBYTE(v103) = v112;
          v139(v109, v148);
          v113 = v100;
          v6 = v152;
          v114 = (void (*)(uint64_t, uint64_t))v140;
          v140((char *)v113, v152);
          v114(v35, v6);
          if ((v103 & 1) != 0)
            v115 = 0;
          else
            v115 = v111;
          if (__OFADD__(v115, 1))
          {
            __break(1u);
            goto LABEL_46;
          }
          sub_10013E2BC();
          sub_10013868C(v96);
          v56 = v131;
          v3 = v94;
          v34 = v137;
          v25 = v132;
        }
        v55 += 3;
        if (!--v154)
        {
          swift_release(v56);
          v51 = v56;
          v52 = (_QWORD *)v118[0];
          break;
        }
      }
    }
    swift_bridgeObjectRelease(v52);
    v116 = sub_10000B748(v25, v51[6]);
    sub_10000B748((_QWORD *)(*v116 + 16), *(_QWORD *)(*v116 + 40));
    v117 = sub_100138BB0();
    sub_10002F4A4(v117, 0xD000000000000016, v119 | 0x8000000000000000);
    return swift_bridgeObjectRelease(v117);
  }
  return result;
}

_QWORD *sub_100138470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v19;
  __int128 v20;

  sub_10000B748((_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 48));
  v7 = sub_100138934();
  v8 = v7[2];
  v19 = v7;
  if (v8)
  {
    v9 = v7 + 6;
    do
    {
      v14 = *((_OWORD *)v9 - 1);
      v15 = *v9;
      v16 = *(v9 - 2);
      v17 = v16 < a1;
      if (v16 == a1)
      {
        v17 = *((_QWORD *)&v14 + 1) < a2;
        if (*((_QWORD *)&v14 + 1) == a2)
          v17 = v15 < a3;
      }
      if (v17)
      {
        v20 = *((_OWORD *)v9 - 1);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10015FEA4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v10 = v20;
        v12 = _swiftEmptyArrayStorage[2];
        v11 = _swiftEmptyArrayStorage[3];
        if (v12 >= v11 >> 1)
        {
          sub_10015FEA4(v11 > 1, v12 + 1, 1);
          v10 = v20;
        }
        _swiftEmptyArrayStorage[2] = v12 + 1;
        v13 = &_swiftEmptyArrayStorage[3 * v12];
        *((_OWORD *)v13 + 2) = v10;
        v13[6] = v15;
      }
      v9 += 3;
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease(v19);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001385B4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 3);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 8);
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for SigningObservabilityCorrespondent()
{
  return objc_opt_self(_TtC7Metrics33SigningObservabilityCorrespondent);
}

uint64_t sub_100138608(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008A18((uint64_t *)&unk_100267080);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100138648(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SigningFailure(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013868C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SigningFailure(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001386C8()
{
  uint64_t v0;

  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ObservabilityCachingSignalStore()
{
  return objc_opt_self(_TtC7Metrics31ObservabilityCachingSignalStore);
}

uint64_t sub_100138714(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  sub_10000B748((_QWORD *)(*(_QWORD *)v1 + 16), v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a1, v3, v4);
}

uint64_t sub_100138774(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  sub_10000B748((_QWORD *)(*(_QWORD *)v2 + 16), v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, a2, v5, v6);
}

uint64_t sub_1001387DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_QWORD *)*v2;
  v6 = v5[7];
  v5[7] = 0;
  swift_bridgeObjectRelease(v6);
  v7 = v5[5];
  v8 = v5[6];
  sub_10000B748(v5 + 2, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v7, v8);
}

unint64_t sub_100138848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_100138878(a1, v3);
}

unint64_t sub_100138878(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for SigningObservabilityPropertyListFileStore()
{
  return objc_opt_self(_TtC7Metrics41SigningObservabilityPropertyListFileStore);
}

_QWORD *sub_100138934()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  sub_10000B748((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  v1 = sub_1001350DC((void *)0x736572756C696166, 0xE800000000000000);
  v2 = v1;
  v3 = v1[2];
  if (v3)
  {
    swift_bridgeObjectRetain(v1);
    v4 = v2 + 5;
    v5 = _swiftEmptyArrayStorage;
    do
    {
      v7 = *(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain(*v4);
      v9 = sub_1001399CC(v7, v8);
      if ((v12 & 1) == 0)
      {
        v13 = v9;
        v14 = v10;
        v15 = v11;
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          v5 = sub_10014A930(0, v5[2] + 1, 1, v5);
        v17 = v5[2];
        v16 = v5[3];
        if (v17 >= v16 >> 1)
          v5 = sub_10014A930((_QWORD *)(v16 > 1), v17 + 1, 1, v5);
        v5[2] = v17 + 1;
        v6 = &v5[3 * v17];
        v6[4] = v13;
        v6[5] = v14;
        v6[6] = v15;
      }
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v5 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v2);
  return v5;
}

unint64_t sub_100138A7C()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  Class isa;
  _BYTE v5[104];

  v0 = sub_100008A18(&qword_100265B60);
  inited = swift_initStackObject(v0, v5);
  *(_OWORD *)(inited + 16) = xmmword_1001B7630;
  strcpy((char *)(inited + 32), "firstFailure");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(NSDate *)(inited + 48) = Date._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0x6C6961467473616CLL;
  *(_QWORD *)(inited + 64) = 0xEB00000000657275;
  type metadata accessor for SigningFailure(0);
  v2 = sub_100138BB0();
  sub_100008A18((uint64_t *)&unk_1002659F0);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  *(_QWORD *)(inited + 72) = isa;
  strcpy((char *)(inited + 80), "daysAttempted");
  *(_WORD *)(inited + 94) = -4864;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  return sub_10002E7FC(inited);
}

unint64_t sub_100138BB0()
{
  uint64_t v0;
  uint64_t inited;
  _BYTE v3[104];

  v0 = sub_100008A18(&qword_100265B60);
  inited = swift_initStackObject(v0, v3);
  *(_OWORD *)(inited + 16) = xmmword_1001B7630;
  *(_QWORD *)(inited + 32) = 1918985593;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0x68746E6F6DLL;
  *(_QWORD *)(inited + 64) = 0xE500000000000000;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 7954788;
  *(_QWORD *)(inited + 88) = 0xE300000000000000;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  return sub_10002E7FC(inited);
}

uint64_t sub_100138C68@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008A18(&qword_100262C10);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v44 - v12;
  if (*(_QWORD *)(a1 + 16) && (v14 = sub_10002DDCC(0x6961467473726966, 0xEC0000006572756CLL), (v15 & 1) != 0))
  {
    v45 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14);
    swift_unknownObjectRetain(v45);
    v16 = sub_100008A18((uint64_t *)&unk_1002659F0);
    v17 = swift_dynamicCast(v13, &v45, v16, v4, 6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, v17 ^ 1u, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    v22 = 0;
    goto LABEL_19;
  }
  v18 = sub_10002DDCC(0x6C6961467473616CLL, 0xEB00000000657275);
  if ((v19 & 1) == 0)
  {
    v22 = 0;
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_14;
LABEL_19:
    swift_bridgeObjectRelease(a1);
    v28 = 0;
    v29 = 1;
    goto LABEL_20;
  }
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v18);
  swift_unknownObjectRetain(v45);
  v20 = sub_100008A18((uint64_t *)&unk_1002659F0);
  v21 = sub_100008A18((uint64_t *)&unk_100266240);
  if (swift_dynamicCast(&v44, &v45, v20, v21, 6))
    v22 = v44;
  else
    v22 = 0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_19;
LABEL_14:
  v23 = sub_10002DDCC(0x6574744173796164, 0xED0000646574706DLL);
  if ((v24 & 1) == 0)
    goto LABEL_19;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v23);
  swift_unknownObjectRetain(v25);
  swift_bridgeObjectRelease(a1);
  v45 = v25;
  v26 = sub_100008A18((uint64_t *)&unk_1002659F0);
  v27 = swift_dynamicCast(&v44, &v45, v26, &type metadata for Int, 6);
  if (v27)
    v28 = v44;
  else
    v28 = 0;
  v29 = v27 ^ 1;
LABEL_20:
  sub_10000CE28((uint64_t)v13, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
  {
    swift_bridgeObjectRelease(v22);
    sub_10000D51C((uint64_t)v11);
  }
  else
  {
    v30 = a2;
    v31 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v31(v7, v11, v4);
    if (v22)
    {
      v32 = sub_10013943C(v22);
      if ((v35 & 1) == 0 && !v29)
      {
        v38 = v33;
        v39 = v34;
        v40 = v30;
        v41 = v32;
        v31(v40, v7, v4);
        v42 = type metadata accessor for SigningFailure(0);
        v43 = (uint64_t *)&v40[*(int *)(v42 + 20)];
        *v43 = v41;
        v43[1] = v38;
        v43[2] = v39;
        *(_QWORD *)&v40[*(int *)(v42 + 24)] = v28;
        sub_10000D51C((uint64_t)v13);
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v40, 0, 1, v42);
      }
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    a2 = v30;
  }
  sub_10000D51C((uint64_t)v13);
  v36 = type metadata accessor for SigningFailure(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a2, 1, 1, v36);
}

unsigned __int8 *sub_100139000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v7 = sub_100139D30();
  swift_bridgeObjectRetain(a4);
  v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  v10 = v8;
  v11 = v9;
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v13 = HIBYTE(v11) & 0xF;
    v18 = v10;
    v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }
  v10 = sub_10002E66C(v8, v9);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  v11 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }
LABEL_7:
  v16 = sub_1001390F0(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16;
}

unsigned __int8 *sub_1001390F0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10013936C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_1001395A8((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_10013943C(uint64_t a1)
{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_11;
  v2 = sub_10002DDCC(1918985593, 0xE400000000000000);
  if ((v3 & 1) == 0)
    goto LABEL_11;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v2);
  swift_unknownObjectRetain(v13);
  v4 = sub_100008A18((uint64_t *)&unk_1002659F0);
  if ((swift_dynamicCast(&v12, &v13, v4, &type metadata for Int, 6) & 1) == 0)
    goto LABEL_11;
  if (*(_QWORD *)(a1 + 16)
    && (v5 = v12, v6 = sub_10002DDCC(0x68746E6F6DLL, 0xE500000000000000), (v7 & 1) != 0)
    && (v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6),
        swift_unknownObjectRetain(v13),
        (swift_dynamicCast(&v12, &v13, v4, &type metadata for Int, 6) & 1) != 0)
    && *(_QWORD *)(a1 + 16)
    && (v8 = sub_10002DDCC(7954788, 0xE300000000000000), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8);
    swift_unknownObjectRetain(v10);
    swift_bridgeObjectRelease(a1);
    v13 = v10;
    if ((swift_dynamicCast(&v12, &v13, v4, &type metadata for Int, 6) & 1) != 0)
      return v5;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

uint64_t sub_1001395A8(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_1000A8FC0(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_1000A8FC0(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_1000A8FC0(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1001399CC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int16 v30;
  unsigned __int8 *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  __int16 v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  char v42;
  char v43;
  __int16 v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  if (String.count.getter() != 8)
    goto LABEL_17;
  v5 = String.index(_:offsetBy:)(15, 0, a1, a2);
  v6 = String.index(_:offsetBy:)(15, 3, a1, a2);
  if (v6 >> 14 < v5 >> 14)
  {
    __break(1u);
    goto LABEL_28;
  }
  v7 = v6;
  swift_bridgeObjectRetain(a2);
  v8 = String.index(after:)(v7, a1, a2);
  v9 = String.subscript.getter(v5, v8, a1, a2);
  v11 = v10;
  v13 = v12;
  v5 = v14;
  swift_bridgeObjectRelease(a2);
  v2 = String.index(_:offsetBy:)(15, 4, a1, a2);
  v15 = String.index(_:offsetBy:)(15, 5, a1, a2);
  if (v15 >> 14 < v2 >> 14)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v16 = v15;
  swift_bridgeObjectRetain(a2);
  v17 = String.index(after:)(v16, a1, a2);
  v18 = String.subscript.getter(v2, v17, a1, a2);
  v49 = v20;
  v50 = v19;
  v2 = v21;
  swift_bridgeObjectRelease(a2);
  v22 = String.index(_:offsetBy:)(15, 6, a1, a2);
  v23 = String.index(_:offsetBy:)(15, 7, a1, a2);
  if (v23 >> 14 < v22 >> 14)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v24 = String.index(after:)(v23, a1, a2);
  v46 = String.subscript.getter(v22, v24, a1, a2);
  v47 = v25;
  v48 = v26;
  v28 = v27;
  swift_bridgeObjectRelease(a2);
  a2 = v28;
  if (!((v9 ^ v11) >> 14))
  {
LABEL_30:
    swift_bridgeObjectRelease(a2);
    a2 = v2;
    goto LABEL_16;
  }
  v29 = sub_10013936C(v9, v11, v13, v5, 10);
  if ((v30 & 0x100) == 0)
  {
    v31 = (unsigned __int8 *)v29;
    v32 = v30;
    swift_bridgeObjectRelease(v5);
    v33 = v50;
    if ((v32 & 1) == 0)
    {
      v34 = v49;
      goto LABEL_11;
    }
LABEL_15:
    v5 = v2;
LABEL_16:
    swift_bridgeObjectRelease(a2);
    a2 = v5;
    goto LABEL_17;
  }
  v31 = sub_100139000(v9, v11, v13, v5, 10);
  v36 = v35;
  swift_bridgeObjectRelease(v5);
  v34 = v49;
  if ((v36 & 1) != 0)
    goto LABEL_15;
  v33 = v50;
LABEL_11:
  if ((v18 ^ v33) < 0x4000)
    goto LABEL_15;
  sub_10013936C(v18, v33, v34, v2, 10);
  if ((v37 & 0x100) != 0)
  {
    sub_100139000(v18, v33, v34, v2, 10);
    v43 = v42;
    swift_bridgeObjectRelease(v2);
    if ((v43 & 1) == 0)
    {
      v40 = v47;
      v39 = v48;
      goto LABEL_22;
    }
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v38 = v37;
  swift_bridgeObjectRelease(v2);
  v40 = v47;
  v39 = v48;
  if ((v38 & 1) != 0)
    goto LABEL_17;
LABEL_22:
  if ((v46 ^ v39) < 0x4000)
    goto LABEL_17;
  sub_10013936C(v46, v39, v40, v28, 10);
  if ((v44 & 0x100) != 0)
    sub_100139000(v46, v39, v40, v28, 10);
  v45 = v44;
  swift_bridgeObjectRelease(v28);
  if ((v45 & 1) != 0)
    return 0;
  return v31;
}

unint64_t sub_100139D30()
{
  unint64_t result;

  result = qword_100265B68;
  if (!qword_100265B68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100265B68);
  }
  return result;
}

uint64_t sub_100139E2C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE v15[16];

  v4 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100008A18(&qword_100265B78);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for BatchID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v15[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_bridgeObjectRetain(a2);
  sub_10002E91C(a1, a2, (uint64_t)v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  sub_10002E8D8((uint64_t)v9, (uint64_t)v13);
  sub_10002E894((uint64_t)v13, (uint64_t)v6);
  swift_storeEnumTagMultiPayload(v6, v4, 3);
  sub_100006E7C((uint64_t)v6);
  sub_1000070D8((uint64_t)v6, type metadata accessor for ObservabilitySignal);
  return sub_1000070D8((uint64_t)v13, type metadata accessor for BatchID);
}

uint64_t sub_10013A1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void (*v43)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t result;
  _BYTE v62[12];
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  void *v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  void *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;

  v7 = sub_100008A18(&qword_100265B70);
  __chkstk_darwin(v7);
  v9 = &v62[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for ExtendedUUID(0);
  v80 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v75 = &v62[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100008A18(&qword_100265B78);
  __chkstk_darwin(v12);
  v14 = &v62[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v79 = type metadata accessor for BatchID(0);
  v15 = *(_QWORD *)(v79 - 8);
  v16 = __chkstk_darwin(v79);
  v78 = &v62[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v16);
  v74 = &v62[-v19];
  v20 = __chkstk_darwin(v18);
  v73 = &v62[-v21];
  v22 = __chkstk_darwin(v20);
  v72 = &v62[-v23];
  __chkstk_darwin(v22);
  v71 = &v62[-v24];
  v25 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v25);
  v68 = &v62[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a1)
  {
    v28 = 1;
    v29 = *(_QWORD *)(a3 + 16);
    if (v29)
      goto LABEL_3;
    goto LABEL_18;
  }
  if (a1 == 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a3 + 16);
    if (v29)
    {
LABEL_3:
      v63 = v28;
      v64 = v26;
      v77 = v10;
      v66 = a2;
      v67 = v3;
      swift_bridgeObjectRetain(a3);
      v65 = a3;
      v30 = (_QWORD *)(a3 + 40);
      v31 = _swiftEmptyArrayStorage;
      v69 = 0x80000001001ED670;
      v70 = (void *)0x80000001001F4C20;
      v32 = v80;
      v33 = v77;
      do
      {
        v35 = *(v30 - 1);
        v34 = (void *)*v30;
        swift_bridgeObjectRetain_n(*v30, 2);
        ExtendedUUID.init(string:)(v35, v34);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v9, 1, v33) == 1)
        {
          sub_100008AD8((uint64_t)v9, &qword_100265B70);
          v81 = 0;
          v82 = 0xE000000000000000;
          _StringGuts.grow(_:)(52);
          v36._countAndFlagsBits = 0xD000000000000031;
          v36._object = v70;
          String.append(_:)(v36);
          v37._countAndFlagsBits = v35;
          v37._object = v34;
          String.append(_:)(v37);
          v38._countAndFlagsBits = 34;
          v38._object = (void *)0xE100000000000000;
          String.append(_:)(v38);
          v39 = swift_bridgeObjectRelease(v82);
          v40 = static os_log_type_t.error.getter(v39);
          sub_1000ABCEC();
          v41 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, v69, 0x76726573624F4345, 0xEF7974696C696261);
          os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Failed to create BatchID", 24, 2, _swiftEmptyArrayStorage);

          v42 = 1;
        }
        else
        {
          v43 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 32);
          v44 = v75;
          v43(v75, v9, v33);
          v76 = v34;
          v45 = v30;
          v46 = v29;
          v47 = v31;
          v48 = v14;
          v49 = v15;
          v50 = v9;
          v51 = v74;
          v43(v74, v44, v33);
          v52 = (uint64_t)v51;
          v9 = v50;
          v15 = v49;
          v14 = v48;
          v31 = v47;
          v29 = v46;
          v30 = v45;
          v34 = v76;
          v53 = v73;
          sub_10002E8D8(v52, (uint64_t)v73);
          v54 = (uint64_t)v53;
          v55 = v72;
          sub_10002E8D8(v54, (uint64_t)v72);
          sub_10002E8D8((uint64_t)v55, (uint64_t)v14);
          v42 = 0;
        }
        v56 = v79;
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, v42, 1, v79);
        swift_bridgeObjectRelease(v34);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v56) == 1)
        {
          sub_100008AD8((uint64_t)v14, &qword_100265B78);
        }
        else
        {
          v57 = v71;
          sub_10002E8D8((uint64_t)v14, (uint64_t)v71);
          sub_10002E8D8((uint64_t)v57, (uint64_t)v78);
          if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
            v31 = (_QWORD *)sub_10014AA54(0, v31[2] + 1, 1, (unint64_t)v31);
          v59 = v31[2];
          v58 = v31[3];
          if (v59 >= v58 >> 1)
            v31 = (_QWORD *)sub_10014AA54(v58 > 1, v59 + 1, 1, (unint64_t)v31);
          v31[2] = v59 + 1;
          sub_10002E8D8((uint64_t)v78, (uint64_t)v31+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v59);
        }
        v32 = v80;
        v30 += 2;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease(v65);
      a2 = v66;
      v26 = v64;
      LOBYTE(v28) = v63;
      goto LABEL_19;
    }
LABEL_18:
    v31 = _swiftEmptyArrayStorage;
LABEL_19:
    v60 = (uint64_t)v68;
    *v68 = a2;
    *(_BYTE *)(v60 + 8) = v28;
    *(_QWORD *)(v60 + 16) = v31;
    swift_storeEnumTagMultiPayload(v60, v26, 6);
    sub_100006E7C(v60);
    return sub_1000070D8(v60, type metadata accessor for ObservabilitySignal);
  }
  v81 = a1;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ObservabilityErrorType, &v81, &type metadata for ObservabilityErrorType, &type metadata for Int);
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ObservabilityErrorType()
{
  return &type metadata for ObservabilityErrorType;
}

unint64_t sub_10013A7D8()
{
  unint64_t result;

  result = qword_100265B88;
  if (!qword_100265B88)
  {
    result = swift_getWitnessTable(&unk_1001B8F80, &type metadata for ObservabilityErrorType);
    atomic_store(result, (unint64_t *)&qword_100265B88);
  }
  return result;
}

uint64_t type metadata accessor for DefaultObservabilityClientErrorBucketConfigurationStore()
{
  return objc_opt_self(_TtC7Metrics55DefaultObservabilityClientErrorBucketConfigurationStore);
}

uint64_t sub_10013A83C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;

  v0 = sub_100008A18(&qword_100263E68);
  v1 = *(_QWORD *)(type metadata accessor for ClassifiedIntBucket(0) - 8);
  v30 = swift_allocObject(v0, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ 14 * *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
  *(_OWORD *)(v30 + 16) = xmmword_1001B76F0;
  v2 = sub_100008A18(&qword_100263D98);
  v3 = type metadata accessor for IntBucketContents(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = v6 | 7;
  v33 = v6 | 7;
  v34 = v7 + v5;
  v9 = swift_allocObject(v2, v7 + v5, v6 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v9 + v7) = sub_1000A4070((uint64_t)&off_100216058);
  v35 = enum case for IntBucketContents.individualValues(_:);
  v10 = *(void (**)(uint64_t))(v4 + 104);
  v10(v9 + v7);
  ClassifiedIntBucket.init(name:contents:)(100020, v9);
  v31 = v5;
  v36 = v7;
  v11 = swift_allocObject(v2, v7 + 3 * v5, v8);
  *(_OWORD *)(v11 + 16) = xmmword_1001B7630;
  v12 = v11 + v7;
  *(_OWORD *)(v11 + v7) = xmmword_1001B7700;
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v11 + v7, enum case for IntBucketContents.range(_:), v3);
  *(_OWORD *)(v12 + v5) = xmmword_1001B7710;
  ((void (*)(void))v10)();
  *(_OWORD *)(v12 + 2 * v5) = xmmword_1001B7720;
  ((void (*)(void))v10)();
  ClassifiedIntBucket.init(name:contents:)(100030, v11);
  v13 = swift_allocObject(v2, v7 + v5, v33);
  *(_OWORD *)(v13 + 16) = xmmword_1001B76C0;
  v14 = (uint64_t *)(v13 + v7);
  *v14 = sub_1000A4070((uint64_t)&off_100216088);
  ((void (*)(uint64_t *, _QWORD, uint64_t))v10)(v14, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100040, v13);
  v15 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v15 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v15 + v36) = sub_1000A4070((uint64_t)&off_1002160B8);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v15 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100050, v15);
  v16 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v16 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v16 + v36) = sub_1000A4070((uint64_t)&off_1002160E0);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v16 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100060, v16);
  v17 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v17 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v17 + v36) = sub_1000A4070((uint64_t)&off_100216108);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v17 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100070, v17);
  v18 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v18 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v18 + v36) = sub_1000A4070((uint64_t)&off_100216138);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v18 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100080, v18);
  v19 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v19 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v19 + v36) = sub_1000A4070((uint64_t)&off_100216160);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v19 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100090, v19);
  v20 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v20 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v20 + v36) = sub_1000A4070((uint64_t)&off_1002161A0);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v20 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100100, v20);
  v21 = swift_allocObject(v2, v36 - v31 + 8 * v31, v33);
  *(_OWORD *)(v21 + 16) = xmmword_1001B7730;
  v22 = (uint64_t *)(v21 + v36);
  *v22 = sub_1000A4070((uint64_t)&off_1002161D0);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v21 + v36, v35, v3);
  *(_OWORD *)((char *)v22 + v5) = xmmword_1001B7740;
  ((void (*)(void))v10)();
  *(_OWORD *)((char *)v22 + 2 * v5) = xmmword_1001B7750;
  ((void (*)(void))v10)();
  *(_OWORD *)((char *)v22 + 3 * v5) = xmmword_1001B7760;
  ((void (*)(void))v10)();
  *(_OWORD *)((char *)v22 + 4 * v5) = xmmword_1001B7770;
  ((void (*)(void))v10)();
  *(_OWORD *)((char *)v22 + 5 * v5) = xmmword_1001B7780;
  ((void (*)(void))v10)();
  *(_OWORD *)((char *)v22 + 6 * v5) = xmmword_1001B7790;
  ((void (*)(void))v10)();
  ClassifiedIntBucket.init(name:contents:)(100110, v21);
  v32 = v36 + 2 * v5;
  v23 = swift_allocObject(v2, v32, v33);
  *(_OWORD *)(v23 + 16) = xmmword_1001B77A0;
  v24 = (uint64_t *)(v23 + v36);
  *v24 = sub_1000A4070((uint64_t)&off_100216200);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v23 + v36, v35, v3);
  *(_OWORD *)((char *)v24 + v5) = xmmword_1001B77B0;
  ((void (*)(void))v10)();
  ClassifiedIntBucket.init(name:contents:)(100120, v23);
  v25 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v25 + 16) = xmmword_1001B76C0;
  *(_OWORD *)(v25 + v36) = xmmword_1001B77C0;
  ((void (*)(void))v10)();
  ClassifiedIntBucket.init(name:contents:)(100130, v25);
  v26 = swift_allocObject(v2, v34, v33);
  *(_OWORD *)(v26 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v26 + v36) = sub_1000A4070((uint64_t)&off_100216228);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v26 + v36, v35, v3);
  ClassifiedIntBucket.init(name:contents:)(100140, v26);
  v27 = swift_allocObject(v2, v32, v33);
  *(_OWORD *)(v27 + 16) = xmmword_1001B77A0;
  v28 = (uint64_t *)(v27 + v36);
  *v28 = sub_1000A4070((uint64_t)&off_100216258);
  ((void (*)(uint64_t, _QWORD, uint64_t))v10)(v27 + v36, v35, v3);
  *(_OWORD *)((char *)v28 + v31) = xmmword_1001B77D0;
  ((void (*)(void))v10)();
  ClassifiedIntBucket.init(name:contents:)(100150, v27);
  return IntBucketConfiguration.init(unknownBucketName:discreteBuckets:classifiedBuckets:)(100011, _swiftEmptyArrayStorage, v30);
}

uint64_t sub_10013B0BC()
{
  return sub_10013A83C();
}

void *sub_10013B0D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100008A18(&qword_100265C30);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_10013B328(&qword_100265C38, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_10013B328(&qword_100265C40, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_10013B328(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Calendar.Component(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013B368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t KeyPath;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t *v80;
  _QWORD *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95[7];
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108[8];
  uint64_t v109;

  v3 = v2;
  v91 = a2;
  v90 = type metadata accessor for Date(0);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v94 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimeRange(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100264E78 != -1)
    swift_once(&qword_100264E78, sub_100150610);
  v9 = type metadata accessor for Logger(0);
  sub_10000ABD8(v9, (uint64_t)qword_10026D208);
  sub_10000BD40(a1, (uint64_t)v8, type metadata accessor for TimeRange);
  v11 = swift_retain(v2, v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v93 = a1;
    v16 = v15;
    v95[0] = v15;
    *(_DWORD *)v14 = 136446466;
    v107 = sub_1000A8B30(0x796C696164, 0xE500000000000000, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v14 + 4, v14 + 12);
    swift_release(v2);
    *(_WORD *)(v14 + 12) = 2082;
    v17 = sub_10014E218();
    v19 = v18;
    v107 = sub_1000A8B30(v17, v18, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v19);
    sub_1000070D8((uint64_t)v8, type metadata accessor for TimeRange);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Generating %{public}s report for %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    v20 = v16;
    a1 = v93;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_release(v2);
    sub_1000070D8((uint64_t)v8, type metadata accessor for TimeRange);
  }

  v21 = v3[19];
  v22 = v3[20];
  sub_10000B748(v3 + 16, v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 24))(&v107, a1, 2, v21, v22);
  v105 = 0;
  v106 = 0;
  v104 = 0;
  v23 = v3[4];
  v24 = v3[5];
  swift_bridgeObjectRetain(v24);
  v101 = sub_10013BC5C(v23, v24, (uint64_t (*)(uint64_t))sub_10013CD14, (void (*)(BOOL, uint64_t, uint64_t))sub_10015FE30);
  v102 = v25;
  v103 = v26;
  v27 = v3[2];
  v28 = v3[3];
  swift_bridgeObjectRetain(v28);
  v98 = sub_10013BC5C(v27, v28, (uint64_t (*)(uint64_t))sub_10013CB18, (void (*)(BOOL, uint64_t, uint64_t))sub_10015FDBC);
  v99 = v29;
  v100 = v30;
  v96 = _swiftEmptyArrayStorage;
  v97 = _swiftEmptyArrayStorage;
  v31 = sub_10000B748(&v107, v109);
  __chkstk_darwin(v31);
  *(&v83 - 8) = (uint64_t)&v104;
  *(&v83 - 7) = (uint64_t)&v98;
  *(&v83 - 6) = (uint64_t)&v96;
  *(&v83 - 5) = (uint64_t)&v97;
  *(&v83 - 4) = (uint64_t)&v106;
  *(&v83 - 3) = (uint64_t)&v105;
  *(&v83 - 2) = (uint64_t)&v101;
  Sequence.forEach(_:)(sub_10013CAF4);
  v87 = 0;
  v32 = (uint64_t)v97;
  v33 = swift_bridgeObjectRetain(v97);
  v93 = sub_10013C404(v33);
  v92 = v34;
  swift_bridgeObjectRelease(v32);
  sub_10000B748(v3 + 21, v3[24]);
  v35 = v96;
  v36 = swift_bridgeObjectRetain(v96);
  sub_10014F5C8(v36);
  swift_bridgeObjectRelease(v35);
  v88 = v106;
  if (v106 > 0 || v105 > 0 || v104 > 0)
    goto LABEL_23;
  v38 = v102;
  v37 = v103;
  v39 = *(_QWORD *)(v103 + 16);
  if (v39)
  {
    v40 = v103 + 32;
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v37);
    while (1)
    {
      sub_1000089D4(v40, (uint64_t)v95, &qword_100265D20);
      v41 = v95[0];
      sub_100008AD8((uint64_t)v95, &qword_100265D20);
      if (v41)
        break;
      v40 += 48;
      if (!--v39)
      {
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v38);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v38);
    goto LABEL_23;
  }
LABEL_14:
  v42 = v99;
  v43 = v100;
  v44 = *(_QWORD *)(v100 + 16);
  if (v44)
  {
    v86 = v38;
    v45 = a1;
    v46 = v100 + 32;
    v47 = v99;
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRetain(v43);
    while (1)
    {
      sub_1000089D4(v46, (uint64_t)v95, (uint64_t *)&unk_100267DF0);
      v48 = v95[0];
      sub_100008AD8((uint64_t)v95, (uint64_t *)&unk_100267DF0);
      if (v48)
        break;
      v46 += 48;
      if (!--v44)
      {
        swift_bridgeObjectRelease(v43);
        v42 = v47;
        swift_bridgeObjectRelease(v47);
        a1 = v45;
        v38 = v86;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v47);
    a1 = v45;
    goto LABEL_23;
  }
LABEL_19:
  v49 = v42;
  v95[0] = v32;
  v50 = sub_100008A18(&qword_100265D28);
  v51 = sub_10013D588(&qword_100265D30, &qword_100265D28, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isPopulated.getter(v50, v51) & 1) != 0)
  {
LABEL_23:
    v53 = v89;
    v54 = v90;
    v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 16))(v94, a1, v90);
    v84 = v105;
    v56 = v103;
    v85 = v104;
    v57 = v102;
    v86 = v101;
    __chkstk_darwin(v55);
    *(&v83 - 2) = (uint64_t)&type metadata for Int;
    *(&v83 - 1) = (uint64_t)&protocol witness table for Int;
    KeyPath = swift_getKeyPath(&unk_1001B9090);
    swift_retain(KeyPath, v59);
    swift_bridgeObjectRetain(v57);
    v60 = swift_bridgeObjectRetain(v56);
    v87 = sub_10013D474(v60, KeyPath);
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v57);
    v61 = swift_release_n(KeyPath, 2);
    v62 = v99;
    v83 = v98;
    v63 = v100;
    __chkstk_darwin(v61);
    *(&v83 - 2) = (uint64_t)&type metadata for Double;
    *(&v83 - 1) = (uint64_t)&protocol witness table for Double;
    v64 = swift_getKeyPath(&unk_1001B9090);
    swift_retain(v64, v65);
    swift_bridgeObjectRetain(v62);
    v66 = swift_bridgeObjectRetain(v63);
    v67 = sub_10013D474(v66, v64);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v62);
    swift_release_n(v64, 2);
    v68 = v97;
    v69 = v97[2];
    v70 = v91;
    v71 = v93;
    swift_retain(v93, v72);
    v73 = sub_100147EDC();
    v74 = v92;
    swift_retain(v92, v75);
    swift_release(v71);
    v76 = sub_100147EDC();
    swift_release_n(v74, 2);
    swift_release(v71);
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v70, v94, v54);
    v77 = (int *)type metadata accessor for ObservabilityDailyReport(0);
    *(_QWORD *)(v70 + v77[5]) = v88;
    *(_QWORD *)(v70 + v77[6]) = v84;
    *(_QWORD *)(v70 + v77[7]) = v85;
    v78 = (uint64_t *)(v70 + v77[8]);
    v79 = v87;
    *v78 = v86;
    v78[1] = (uint64_t)v79;
    v80 = (uint64_t *)(v70 + v77[9]);
    *v80 = v83;
    v80[1] = (uint64_t)v67;
    *(_QWORD *)(v70 + v77[10]) = v69;
    *(_QWORD *)(v70 + v77[11]) = v73;
    *(_QWORD *)(v70 + v77[12]) = v76;
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v77 - 1) + 56))(v70, 0, 1, v77);
    v81 = v96;
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v103);
    return _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v107);
  }
  v52 = type metadata accessor for ObservabilityDailyReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v91, 1, 1, v52);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v35);
  swift_release(v92);
  swift_release(v93);
  return _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v107);
}

uint64_t sub_10013BC5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(BOOL, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v18;
  _QWORD v19[5];
  _OWORD v20[3];
  _QWORD *v21;

  swift_bridgeObjectRetain(a2);
  v8 = a3(a2);
  swift_bridgeObjectRelease(a2);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v18 = a1;
    v21 = _swiftEmptyArrayStorage;
    a4(0, v9, 0);
    v10 = v8 + 32;
    v11 = _swiftEmptyArrayStorage;
    do
    {
      sub_10000D4D8(v10, (uint64_t)v19);
      sub_10000D4D8((uint64_t)v19, (uint64_t)v20 + 8);
      *(_QWORD *)&v20[0] = 0;
      _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v19);
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      {
        a4(0, v11[2] + 1, 1);
        v11 = v21;
      }
      v13 = v11[2];
      v12 = v11[3];
      if (v13 >= v12 >> 1)
      {
        a4(v12 > 1, v13 + 1, 1);
        v11 = v21;
      }
      v11[2] = v13 + 1;
      v14 = &v11[6 * v13];
      v15 = v20[0];
      v16 = v20[2];
      v14[3] = v20[1];
      v14[4] = v16;
      v14[2] = v15;
      v10 += 40;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease(v8);
    return v18;
  }
  else
  {
    swift_bridgeObjectRelease(v8);
  }
  return a1;
}

void sub_10013BDDC(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t *a4, unint64_t *a5, _QWORD *a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  double *v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  unint64_t *v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  _QWORD v45[2];
  _QWORD *v46;
  unint64_t *v47;
  unint64_t *v48;
  uint64_t v49;

  v45[0] = a8;
  v45[1] = a3;
  v46 = a7;
  v47 = a5;
  v48 = a4;
  v11 = type metadata accessor for BatchID(0);
  v49 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (_QWORD *)((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v45 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)v45 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)v45 - v21;
  v23 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v23);
  v25 = (double *)((char *)v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000BD40(a1, (uint64_t)v25, v26);
  switch(swift_getEnumCaseMultiPayload(v25, v23))
  {
    case 0u:
      v27 = *((_QWORD *)v25 + 1);
      v28 = __OFADD__(*a2, v27);
      v29 = *a2 + v27;
      if (v28)
      {
        __break(1u);
LABEL_24:
        v23 = sub_10014AA54(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
        *v14 = v23;
LABEL_5:
        v34 = *(_QWORD *)(v23 + 16);
        v33 = *(_QWORD *)(v23 + 24);
        if (v34 >= v33 >> 1)
        {
          v23 = sub_10014AA54(v33 > 1, v34 + 1, 1, v23);
          *v14 = v23;
        }
        *(_QWORD *)(v23 + 16) = v34 + 1;
        sub_10000BCFC((uint64_t)v20, v23+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v34, type metadata accessor for BatchID);
        v35 = (uint64_t)v22;
LABEL_14:
        v36 = type metadata accessor for BatchID;
LABEL_15:
        sub_1000070D8(v35, v36);
      }
      else
      {
        v30 = *v25;
        *a2 = v29;
        sub_10013C204(v30);
      }
      return;
    case 1u:
      v31 = sub_100008A18(&qword_100265B80);
      sub_10000BCFC((uint64_t)v25 + *(int *)(v31 + 64), (uint64_t)v22, type metadata accessor for BatchID);
      sub_10000BD40((uint64_t)v22, (uint64_t)v20, type metadata accessor for BatchID);
      v14 = v48;
      v23 = *v48;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
      *v14 = v23;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_5;
      goto LABEL_24;
    case 3u:
      sub_10000BCFC((uint64_t)v25, (uint64_t)v17, type metadata accessor for BatchID);
      sub_10000BD40((uint64_t)v17, (uint64_t)v14, type metadata accessor for BatchID);
      v37 = v47;
      v38 = *v47;
      v39 = swift_isUniquelyReferenced_nonNull_native(*v47);
      *v37 = v38;
      if ((v39 & 1) == 0)
      {
        v38 = sub_10014AA54(0, *(_QWORD *)(v38 + 16) + 1, 1, v38);
        *v37 = v38;
      }
      v41 = *(_QWORD *)(v38 + 16);
      v40 = *(_QWORD *)(v38 + 24);
      if (v41 >= v40 >> 1)
      {
        v38 = sub_10014AA54(v40 > 1, v41 + 1, 1, v38);
        *v37 = v38;
      }
      *(_QWORD *)(v38 + 16) = v41 + 1;
      sub_10000BCFC((uint64_t)v14, v38+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v41, type metadata accessor for BatchID);
      v35 = (uint64_t)v17;
      goto LABEL_14;
    case 4u:
      if (__OFADD__(*a6, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x10013C1ECLL);
      }
      ++*a6;
      v42 = type metadata accessor for Date(0);
      (*(void (**)(double *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v25, v42);
      break;
    case 5u:
      if (__OFADD__(*v46, 1))
        goto LABEL_26;
      v43 = *v25;
      ++*v46;
      v44 = round(v43 * 1000.0);
      if ((~*(_QWORD *)&v44 & 0x7FF0000000000000) == 0)
        goto LABEL_27;
      if (v44 <= -9.22337204e18)
        goto LABEL_28;
      if (v44 >= 9.22337204e18)
        goto LABEL_29;
      sub_10013C304((uint64_t)v44);
      break;
    default:
      v36 = type metadata accessor for ObservabilitySignal;
      v35 = (uint64_t)v25;
      goto LABEL_15;
  }
}

void sub_10013C204(double a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  double v12;

  v2 = *(_QWORD **)(v1 + 16);
  v3 = v2[2];
  if (v3)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 16));
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v12 = a1;
      v7 = v2[v5 + 8];
      v8 = v2[v5 + 9];
      sub_10000B748(&v2[v5 + 5], v7);
      if ((dispatch thunk of RangeExpression.contains(_:)(&v12, v7, v8) & 1) != 0)
        break;
      ++v6;
      v5 += 6;
      if (v3 == v6)
      {
        swift_bridgeObjectRelease(v2);
        return;
      }
    }
    swift_bridgeObjectRelease(v2);
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10013D460(v2);
    if (v6 >= v2[2])
    {
      __break(1u);
    }
    else
    {
      v9 = v2[v5 + 4];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (!v10)
      {
        v2[v5 + 4] = v11;
        *(_QWORD *)(v1 + 16) = v2;
        return;
      }
    }
    __break(1u);
  }
}

uint64_t sub_10013C304(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD **)(v1 + 16);
  v3 = v2[2];
  if (v3)
  {
    v4 = result;
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 16));
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v12 = v4;
      v7 = v2[v5 + 8];
      v8 = v2[v5 + 9];
      sub_10000B748(&v2[v5 + 5], v7);
      if ((dispatch thunk of RangeExpression.contains(_:)(&v12, v7, v8) & 1) != 0)
        break;
      ++v6;
      v5 += 6;
      if (v3 == v6)
        return swift_bridgeObjectRelease(v2);
    }
    swift_bridgeObjectRelease(v2);
    result = swift_isUniquelyReferenced_nonNull_native(v2);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_10013D44C(v2);
      v2 = (_QWORD *)result;
    }
    if (v6 >= v2[2])
    {
      __break(1u);
    }
    else
    {
      v9 = v2[v5 + 4];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (!v10)
      {
        v2[v5 + 4] = v11;
        *(_QWORD *)(v1 + 16) = v2;
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10013C404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v3 = type metadata accessor for BatchID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v73 = (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D4D8(v1 + 88, (uint64_t)&v81);
  v6 = type metadata accessor for ErrorCollector();
  v7 = (_QWORD *)swift_allocObject(v6, 64, 7);
  v7[7] = sub_100141900((uint64_t)_swiftEmptyArrayStorage);
  v8 = v7 + 7;
  v75 = v7 + 2;
  sub_100136930(&v81, (uint64_t)(v7 + 2));
  sub_10000D4D8(v1 + 48, (uint64_t)&v81);
  v9 = (_QWORD *)swift_allocObject(v6, 64, 7);
  v9[7] = sub_100141900((uint64_t)_swiftEmptyArrayStorage);
  v10 = v9 + 7;
  v74 = v9 + 2;
  sub_100136930(&v81, (uint64_t)(v9 + 2));
  v72 = *(_QWORD *)(a1 + 16);
  if (!v72)
    return (uint64_t)v7;
  v70 = (_QWORD *)(v1 + 168);
  v71 = v1;
  v69 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v11 = *(_QWORD *)(v4 + 72);
  v67 = a1;
  v68 = v11;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  v13 = v73;
  while (1)
  {
    sub_10000BD40(v69 + v68 * v12, v13, type metadata accessor for BatchID);
    sub_10000B748(v70, *(_QWORD *)(v71 + 192));
    sub_10014F898(&v77);
    v14 = v79;
    v15 = v80;
    v16 = sub_10000B748(&v77, v79);
    __chkstk_darwin(v16);
    (*(void (**)(char *))(v18 + 16))((char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v15, v14, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Iterator);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v15, v14, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    sub_10011F0DC(&v81);
    dispatch thunk of Sequence.makeIterator()(v14, v15);
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v77);
    v19 = AssociatedTypeWitness;
    v20 = AssociatedConformanceWitness;
    sub_100136C8C((uint64_t)&v81, AssociatedTypeWitness);
    dispatch thunk of IteratorProtocol.next()(&v77, v19, v20);
    v21 = v78;
    if (v78 != 255)
      break;
LABEL_3:
    ++v12;
    v13 = v73;
    sub_1000070D8(v73, type metadata accessor for BatchID);
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v81);
    if (v12 == v72)
    {
      swift_bridgeObjectRelease(v67);
      return (uint64_t)v7;
    }
  }
  v22 = v77;
  while ((v21 & 1) != 0)
  {
    v42 = v9[5];
    v43 = v9[6];
    sub_10000B748(v74, v42);
    v44 = dispatch thunk of IntBucketStrategy.bucketFor(value:)(v22, v42, v43);
    swift_beginAccess(v9 + 7, &v77, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9[7]);
    v76 = v9[7];
    v46 = v76;
    v9[7] = 0x8000000000000000;
    v35 = sub_100138848(v44);
    v48 = *(_QWORD *)(v46 + 16);
    v49 = (v47 & 1) == 0;
    v50 = v48 + v49;
    if (__OFADD__(v48, v49))
      goto LABEL_33;
    v51 = v47;
    if (*(_QWORD *)(v46 + 24) >= v50)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1001411F4();
        v46 = v76;
      }
    }
    else
    {
      sub_1001405F4(v50, isUniquelyReferenced_nonNull_native);
      v46 = v76;
      v52 = sub_100138848(v44);
      if ((v51 & 1) != (v53 & 1))
        goto LABEL_38;
      v35 = v52;
    }
    v60 = (_QWORD *)*v10;
    *v10 = v46;
    swift_bridgeObjectRelease(v60);
    v61 = (_QWORD *)*v10;
    if ((v51 & 1) == 0)
    {
      v61[(v35 >> 6) + 8] |= 1 << v35;
      v62 = 8 * v35;
      *(_QWORD *)(v61[6] + v62) = v44;
      *(_QWORD *)(v61[7] + v62) = 0;
      v63 = v61[2];
      v25 = __OFADD__(v63, 1);
      v64 = v63 + 1;
      if (v25)
        goto LABEL_37;
      v61[2] = v64;
    }
    v23 = v61[7];
    v24 = *(_QWORD *)(v23 + 8 * v35);
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_34;
LABEL_7:
    *(_QWORD *)(v23 + 8 * v35) = v26;
    swift_endAccess(&v77);
    v27 = AssociatedTypeWitness;
    v28 = AssociatedConformanceWitness;
    sub_100136C8C((uint64_t)&v81, AssociatedTypeWitness);
    dispatch thunk of IteratorProtocol.next()(&v77, v27, v28);
    v22 = v77;
    v21 = v78;
    if (v78 == 255)
      goto LABEL_3;
  }
  v29 = v7[5];
  v30 = v7[6];
  sub_10000B748(v75, v29);
  v31 = dispatch thunk of IntBucketStrategy.bucketFor(value:)(v22, v29, v30);
  swift_beginAccess(v7 + 7, &v77, 33, 0);
  v32 = swift_isUniquelyReferenced_nonNull_native(v7[7]);
  v76 = v7[7];
  v33 = v76;
  v7[7] = 0x8000000000000000;
  v35 = sub_100138848(v31);
  v36 = *(_QWORD *)(v33 + 16);
  v37 = (v34 & 1) == 0;
  v38 = v36 + v37;
  if (!__OFADD__(v36, v37))
  {
    v39 = v34;
    if (*(_QWORD *)(v33 + 24) >= v38)
    {
      if ((v32 & 1) == 0)
      {
        sub_1001411F4();
        v33 = v76;
      }
    }
    else
    {
      sub_1001405F4(v38, v32);
      v33 = v76;
      v40 = sub_100138848(v31);
      if ((v39 & 1) != (v41 & 1))
        goto LABEL_38;
      v35 = v40;
    }
    v54 = (_QWORD *)*v8;
    *v8 = v33;
    swift_bridgeObjectRelease(v54);
    v55 = (_QWORD *)*v8;
    if ((v39 & 1) == 0)
    {
      v55[(v35 >> 6) + 8] |= 1 << v35;
      v56 = 8 * v35;
      *(_QWORD *)(v55[6] + v56) = v31;
      *(_QWORD *)(v55[7] + v56) = 0;
      v57 = v55[2];
      v25 = __OFADD__(v57, 1);
      v58 = v57 + 1;
      if (v25)
        goto LABEL_36;
      v55[2] = v58;
    }
    v23 = v55[7];
    v59 = *(_QWORD *)(v23 + 8 * v35);
    v25 = __OFADD__(v59, 1);
    v26 = v59 + 1;
    if (v25)
      goto LABEL_35;
    goto LABEL_7;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_10013C998()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 6);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 11);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 16);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 21);
  return swift_deallocClassInstance(v0, 208, 7);
}

uint64_t type metadata accessor for ObservabilityDailyReporter()
{
  return objc_opt_self(_TtC7Metrics26ObservabilityDailyReporter);
}

uint64_t sub_10013CA04()
{
  return 2;
}

uint64_t sub_10013CA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;

  v4 = sub_100008A18(&qword_100265D18);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10013B368(a1, (uint64_t)v6);
  v7 = type metadata accessor for ObservabilityDailyReport(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    result = sub_100008AD8((uint64_t)v6, &qword_100265D18);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v7;
    *(_QWORD *)(a2 + 32) = &off_100216E30;
    v9 = sub_10011F0DC((_QWORD *)a2);
    return sub_10000BCFC((uint64_t)v6, (uint64_t)v9, type metadata accessor for ObservabilityDailyReport);
  }
  return result;
}

void sub_10013CAF4(uint64_t a1)
{
  uint64_t v1;

  sub_10013BDDC(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(unint64_t **)(v1 + 32), *(unint64_t **)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD **)(v1 + 56), *(_QWORD *)(v1 + 64));
}

_QWORD *sub_10013CB18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v18[8];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 32 + 8 * v1 - 8);
  v5 = 2 * v1 - 1;
  v18[0] = a1;
  v18[1] = a1 + 32;
  if (v1 == 1)
    v5 = 1;
  v18[2] = 0;
  v18[3] = v5;
  v18[4] = a1;
  v18[5] = a1 + 32;
  v18[6] = 1;
  v18[7] = (2 * v1) | 1;
  v6 = sub_100008A18(&qword_100265D38);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v7 + 56) = sub_100008A18(&qword_100265D40);
  *(_QWORD *)(v7 + 64) = sub_10013D588(&qword_100265D48, &qword_100265D40, (uint64_t)&protocol conformance descriptor for PartialRangeUpTo<A>);
  *(_QWORD *)(v7 + 32) = v3;
  v17 = (_QWORD *)v7;
  swift_bridgeObjectRetain_n(a1, 2);
  v8 = sub_10013CEF0(v18);
  v9 = sub_1001474B8((uint64_t)v8);
  swift_bridgeObjectRelease(v8);
  sub_100149D0C((uint64_t)v9);
  v10 = v17;
  if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
    v10 = sub_10014A7C8(0, v17[2] + 1, 1, v17);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_10014A7C8((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v15 = sub_100008A18(&qword_100265D50);
  v16 = sub_10013D588(&qword_100265D58, &qword_100265D50, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
  *(_QWORD *)&v14 = v4;
  v10[2] = v12 + 1;
  sub_100136930(&v14, (uint64_t)&v10[5 * v12 + 4]);
  swift_unknownObjectRelease_n(a1, 2);
  return v10;
}

_QWORD *sub_10013CD14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v18[8];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 32 + 8 * v1 - 8);
  v5 = 2 * v1 - 1;
  v18[0] = a1;
  v18[1] = a1 + 32;
  if (v1 == 1)
    v5 = 1;
  v18[2] = 0;
  v18[3] = v5;
  v18[4] = a1;
  v18[5] = a1 + 32;
  v18[6] = 1;
  v18[7] = (2 * v1) | 1;
  v6 = sub_100008A18((uint64_t *)&unk_100267E20);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v7 + 56) = sub_100008A18(&qword_100265D60);
  *(_QWORD *)(v7 + 64) = sub_10013D588(&qword_100265D68, &qword_100265D60, (uint64_t)&protocol conformance descriptor for PartialRangeUpTo<A>);
  *(_QWORD *)(v7 + 32) = v3;
  v17 = (_QWORD *)v7;
  swift_bridgeObjectRetain_n(a1, 2);
  v8 = sub_10013D1A0(v18);
  v9 = sub_1001475EC((uint64_t)v8);
  swift_bridgeObjectRelease(v8);
  sub_100149D20((uint64_t)v9);
  v10 = v17;
  if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
    v10 = sub_10014A7DC(0, v17[2] + 1, 1, v17);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_10014A7DC((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v15 = sub_100008A18(&qword_100265D70);
  v16 = sub_10013D588(&qword_100265D78, &qword_100265D70, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
  *(_QWORD *)&v14 = v4;
  v10[2] = v12 + 1;
  sub_100136930(&v14, (uint64_t)&v10[5 * v12 + 4]);
  swift_unknownObjectRelease_n(a1, 2);
  return v10;
}

_QWORD *sub_10013CEF0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = result[2];
  v2 = result[3] >> 1;
  if (__OFSUB__(v2, v1))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v3 = result;
  v4 = result[6];
  v5 = result[7] >> 1;
  if (!__OFSUB__(v5, v4))
  {
    v37 = result[7] >> 1;
    v38 = result[6];
    v39 = result[3] >> 1;
    v40 = result[2];
    v6 = *result;
    v36 = result[1];
    v7 = result[4];
    v35 = result[5];
    if (v5 - v4 >= v2 - v1)
      v8 = v2 - v1;
    else
      v8 = v5 - v4;
    result = (_QWORD *)sub_10015FE14(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      goto LABEL_46;
    v34 = v7;
    result = sub_10013D554(v3);
    if (v8)
    {
      v9 = 0;
      v11 = v37;
      v10 = v38;
      v12 = v38 - v37;
      if (v38 <= v37)
        v13 = v37;
      else
        v13 = v38;
      v14 = v13 - v38;
      v16 = v35;
      v15 = v36;
      v18 = v39;
      v17 = v40;
      do
      {
        if (!(v40 - v39 + v9))
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v17 + v9 >= v18 || v9 >= v8)
          goto LABEL_37;
        if (!(v12 + v9))
          goto LABEL_38;
        if (v14 == v9)
          goto LABEL_39;
        v19 = *(double *)(v36 + 8 * v40 + 8 * v9);
        v20 = *(double *)(v35 + 8 * v38 + 8 * v9);
        if (v19 > v20)
          goto LABEL_40;
        v22 = _swiftEmptyArrayStorage[2];
        v21 = _swiftEmptyArrayStorage[3];
        if (v22 >= v21 >> 1)
        {
          v33 = v12;
          result = (_QWORD *)sub_10015FE14(v21 > 1, v22 + 1, 1);
          v12 = v33;
          v16 = v35;
          v15 = v36;
          v11 = v37;
          v10 = v38;
          v18 = v39;
          v17 = v40;
        }
        ++v9;
        _swiftEmptyArrayStorage[2] = v22 + 1;
        v23 = (double *)&_swiftEmptyArrayStorage[2 * v22];
        v23[4] = v19;
        v23[5] = v20;
      }
      while (v8 != v9);
      v24 = v10 + v9;
      v25 = v17 + v9;
      if (v25 == v18)
        goto LABEL_24;
    }
    else
    {
      v10 = v38;
      v18 = v39;
      v24 = v38;
      v17 = v40;
      v25 = v40;
      v15 = v36;
      v11 = v37;
      v16 = v35;
      if (v40 == v39)
      {
LABEL_24:
        swift_unknownObjectRelease(v34);
        swift_unknownObjectRelease(v6);
        return _swiftEmptyArrayStorage;
      }
    }
    v26 = v25;
    v27 = v24;
    while (v25 >= v17 && v26 < v18)
    {
      if (v11 == v27)
        goto LABEL_24;
      if (v24 < v10 || v27 >= v11)
        goto LABEL_42;
      v28 = *(double *)(v15 + 8 * v26);
      v29 = *(double *)(v16 + 8 * v27);
      if (v28 > v29)
        goto LABEL_43;
      v31 = _swiftEmptyArrayStorage[2];
      v30 = _swiftEmptyArrayStorage[3];
      if (v31 >= v30 >> 1)
      {
        result = (_QWORD *)sub_10015FE14(v30 > 1, v31 + 1, 1);
        v16 = v35;
        v15 = v36;
        v11 = v37;
        v10 = v38;
        v18 = v39;
        v17 = v40;
      }
      ++v26;
      _swiftEmptyArrayStorage[2] = v31 + 1;
      v32 = (double *)&_swiftEmptyArrayStorage[2 * v31];
      v32[4] = v28;
      v32[5] = v29;
      ++v27;
      if (v18 == v26)
        goto LABEL_24;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

_QWORD *sub_10013D1A0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = result[2];
  v2 = result[3] >> 1;
  if (__OFSUB__(v2, v1))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v3 = result;
  v4 = result[6];
  v5 = result[7] >> 1;
  if (!__OFSUB__(v5, v4))
  {
    v41 = result[7] >> 1;
    v42 = result[6];
    v43 = result[3] >> 1;
    v44 = result[2];
    v6 = *result;
    v40 = result[1];
    v7 = result[4];
    v39 = result[5];
    if (v5 - v4 >= v2 - v1)
      v8 = v2 - v1;
    else
      v8 = v5 - v4;
    result = (_QWORD *)sub_10015FE88(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      goto LABEL_46;
    v37 = v7;
    v38 = v6;
    result = sub_10013D554(v3);
    if (v8)
    {
      v9 = 0;
      v11 = v41;
      v10 = v42;
      v12 = v42 - v41;
      if (v42 <= v41)
        v13 = v41;
      else
        v13 = v42;
      v14 = v13 - v42;
      v16 = v39;
      v15 = v40;
      v17 = v39 + 8 * v42;
      v19 = v43;
      v18 = v44;
      do
      {
        if (!(v44 - v43 + v9))
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v18 + v9 >= v19 || v9 >= v8)
          goto LABEL_37;
        if (!(v12 + v9))
          goto LABEL_38;
        if (v14 == v9)
          goto LABEL_39;
        v20 = *(_QWORD *)(v40 + 8 * v44 + 8 * v9);
        v21 = *(_QWORD *)(v17 + 8 * v9);
        if (v21 < v20)
          goto LABEL_40;
        v23 = _swiftEmptyArrayStorage[2];
        v22 = _swiftEmptyArrayStorage[3];
        if (v23 >= v22 >> 1)
        {
          v35 = v14;
          v36 = v12;
          v34 = v17;
          result = (_QWORD *)sub_10015FE88(v22 > 1, v23 + 1, 1);
          v17 = v34;
          v14 = v35;
          v12 = v36;
          v16 = v39;
          v15 = v40;
          v11 = v41;
          v10 = v42;
          v19 = v43;
          v18 = v44;
        }
        ++v9;
        _swiftEmptyArrayStorage[2] = v23 + 1;
        v24 = &_swiftEmptyArrayStorage[2 * v23];
        v24[4] = v20;
        v24[5] = v21;
      }
      while (v8 != v9);
      v25 = v10 + v9;
      v26 = v18 + v9;
      if (v26 == v19)
        goto LABEL_24;
    }
    else
    {
      v10 = v42;
      v19 = v43;
      v25 = v42;
      v18 = v44;
      v26 = v44;
      v15 = v40;
      v11 = v41;
      v16 = v39;
      if (v44 == v43)
      {
LABEL_24:
        swift_unknownObjectRelease(v37);
        swift_unknownObjectRelease(v38);
        return _swiftEmptyArrayStorage;
      }
    }
    v27 = v26;
    v28 = v25;
    while (v26 >= v18 && v27 < v19)
    {
      if (v11 == v28)
        goto LABEL_24;
      if (v25 < v10 || v28 >= v11)
        goto LABEL_42;
      v29 = *(_QWORD *)(v15 + 8 * v27);
      v30 = *(_QWORD *)(v16 + 8 * v28);
      if (v30 < v29)
        goto LABEL_43;
      v32 = _swiftEmptyArrayStorage[2];
      v31 = _swiftEmptyArrayStorage[3];
      if (v32 >= v31 >> 1)
      {
        result = (_QWORD *)sub_10015FE88(v31 > 1, v32 + 1, 1);
        v16 = v39;
        v15 = v40;
        v11 = v41;
        v10 = v42;
        v19 = v43;
        v18 = v44;
      }
      ++v27;
      _swiftEmptyArrayStorage[2] = v32 + 1;
      v33 = &_swiftEmptyArrayStorage[2 * v32];
      v33[4] = v29;
      v33[5] = v30;
      ++v28;
      if (v19 == v27)
        goto LABEL_24;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

_QWORD *sub_10013D44C(_QWORD *a1)
{
  return sub_10014AA68(0, a1[2], 0, a1);
}

_QWORD *sub_10013D460(_QWORD *a1)
{
  return sub_10014AA7C(0, a1[2], 0, a1);
}

_QWORD *sub_10013D474(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10015FDA0(0, v2, 0);
    v5 = a1 + 32;
    do
    {
      swift_getAtKeyPath(v5, a2);
      v7 = _swiftEmptyArrayStorage[2];
      v6 = _swiftEmptyArrayStorage[3];
      if (v7 >= v6 >> 1)
        sub_10015FDA0(v6 > 1, v7 + 1, 1);
      _swiftEmptyArrayStorage[2] = v7 + 1;
      _swiftEmptyArrayStorage[v7 + 4] = v9;
      v5 += 48;
      --v2;
    }
    while (v2);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10013D554(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[4];
  swift_unknownObjectRetain(*a1);
  swift_unknownObjectRetain(v2);
  return a1;
}

uint64_t sub_10013D588(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A5AB4(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013D5C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a3;
  v32 = a1;
  v33 = a2;
  v28 = a4;
  v4 = sub_100008A18(&qword_1002654D8);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008A18(&qword_1002654E0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DateComponents(0);
  v29 = *(_QWORD *)(v10 - 8);
  v30 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Calendar(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v17);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v20 = sub_10000ABD8(v13, (uint64_t)qword_10026D1E0);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v21(v16, v20, v13);
  v21(v9, v20, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
  if (qword_100264E80 != -1)
    swift_once(&qword_100264E80, sub_10015B3D8);
  v22 = type metadata accessor for TimeZone(0);
  v23 = sub_10000ABD8(v22, (uint64_t)qword_10026D228);
  v24 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v6, v23, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v6, 0, 1, v22);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v9, v6, 0, 1, v32, 0, v33, 0, v31, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  Calendar.date(from:)(v12);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v25 = type metadata accessor for Date(0);
  v26 = *(_QWORD *)(v25 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v19, 1, v25);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v19, v25);
  __break(1u);
  return result;
}

Swift::Int sub_10013D910()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5, 0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10013D978()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = v0[1];
  v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_10013D9BC(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_10013DA20(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

BOOL sub_10013DA50(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v2 == v3;
  v5 = v2 < v3;
  if (v4)
    v5 = a1[2] < a2[2];
  if (*a1 == *a2)
    return v5;
  else
    return *a1 < *a2;
}

BOOL sub_10013DA88(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v3 == v2;
  v5 = v3 < v2;
  if (v4)
    v5 = a2[2] < a1[2];
  if (*a2 == *a1)
    v6 = v5;
  else
    v6 = *a2 < *a1;
  return !v6;
}

BOOL sub_10013DAC4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v2 == v3;
  v5 = v2 < v3;
  if (v4)
    v5 = a1[2] < a2[2];
  if (*a1 == *a2)
    v6 = v5;
  else
    v6 = *a1 < *a2;
  return !v6;
}

BOOL sub_10013DB00(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v3 == v2;
  v5 = v3 < v2;
  if (v4)
    v5 = a2[2] < a1[2];
  if (*a2 == *a1)
    return v5;
  else
    return *a2 < *a1;
}

uint64_t sub_10013DB38()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  uint64_t v7;

  v7 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v0._countAndFlagsBits = 47;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 47;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  return v7;
}

uint64_t sub_10013DC0C()
{
  return sub_10013DB38();
}

unint64_t sub_10013DC1C()
{
  unint64_t result;

  result = qword_100265D80;
  if (!qword_100265D80)
  {
    result = swift_getWitnessTable(&unk_1001B911C, &type metadata for Day);
    atomic_store(result, (unint64_t *)&qword_100265D80);
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for Day(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Day(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Day(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Day()
{
  return &type metadata for Day;
}

unint64_t sub_10013DCD4()
{
  unint64_t result;

  result = qword_100265D88;
  if (!qword_100265D88)
  {
    result = swift_getWitnessTable(&unk_1001B91E4, &type metadata for PeriodicWorkPriority);
    atomic_store(result, (unint64_t *)&qword_100265D88);
  }
  return result;
}

uint64_t sub_10013DD18()
{
  _BYTE *v0;

  if (*v0)
    return 7827308;
  else
    return 1751607656;
}

uint64_t sub_10013DD44(_BYTE *a1, _BYTE *a2)
{
  return *a1 & ~*a2 & 1;
}

uint64_t sub_10013DD58(_BYTE *a1, _BYTE *a2)
{
  return *a1 & 1 | ((*a2 & 1) == 0);
}

uint64_t sub_10013DD6C(_BYTE *a1, _BYTE *a2)
{
  return *a2 & 1 | ((*a1 & 1) == 0);
}

uint64_t sub_10013DD80(_BYTE *a1, _BYTE *a2)
{
  return *a2 & ~*a1 & 1;
}

uint64_t storeEnumTagSinglePayload for PeriodicWorkPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10013DDE0 + 4 * byte_1001B9195[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10013DE14 + 4 * byte_1001B9190[v4]))();
}

uint64_t sub_10013DE14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013DE1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013DE24);
  return result;
}

uint64_t sub_10013DE30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013DE38);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10013DE3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013DE44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PeriodicWorkPriority()
{
  return &type metadata for PeriodicWorkPriority;
}

uint64_t sub_10013DE60()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 20, 7);
}

uint64_t type metadata accessor for ConstantTimeRangeOffset()
{
  return objc_opt_self(_TtC7Metrics23ConstantTimeRangeOffset);
}

float sub_10013DE90()
{
  uint64_t v0;

  return *(float *)(*(_QWORD *)v0 + 16);
}

uint64_t type metadata accessor for LoggingNormalizedScaleFactorStore()
{
  return objc_opt_self(_TtC7Metrics33LoggingNormalizedScaleFactorStore);
}

uint64_t sub_10013DEBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16[2];

  v1 = v0[5];
  v2 = v0[6];
  sub_10000B748(v0 + 2, v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  if (qword_100264E78 != -1)
    swift_once(&qword_100264E78, sub_100150610);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000ABD8(v4, (uint64_t)qword_10026D208);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16[0] = v9;
    *(_DWORD *)v8 = 136315138;
    LODWORD(v15) = v3;
    BYTE4(v15) = BYTE4(v3) & 1;
    v10 = sub_100008A18(&qword_100265ED0);
    v11 = String.init<A>(describing:)(&v15, v10);
    v13 = v12;
    v15 = sub_1000A8B30(v11, v12, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "stored scale factor: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_10013E07C(float a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = v1;
  if (qword_100264E78 != -1)
    swift_once(&qword_100264E78, sub_100150610);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10000ABD8(v4, (uint64_t)qword_10026D208);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_DWORD *)v8 = 136315138;
    v15 = 0;
    v16 = 0xE000000000000000;
    v17 = v9;
    Float.write<A>(to:)(&v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
    v10 = v16;
    v15 = sub_1000A8B30(v15, v16, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "storing scale factor: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v11 = v2 + 2;
  v13 = v2[5];
  v12 = v2[6];
  sub_10000B748(v11, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(v12 + 16))(v13, v12, a1);
}

uint64_t sub_10013E248()
{
  unint64_t v0;

  v0 = sub_10013DEBC();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

uint64_t sub_10013E27C(float a1)
{
  return sub_10013E07C(a1);
}

uint64_t type metadata accessor for SigningReportCoreAnalyticsTransmitter()
{
  return objc_opt_self(_TtC7Metrics37SigningReportCoreAnalyticsTransmitter);
}

void sub_10013E2BC()
{
  void *v0;
  NSString v1;
  uint64_t v2;
  uint64_t inited;
  unint64_t v4;
  Class isa;
  _BYTE v6[104];

  v0 = (void *)objc_opt_self(APAnalytics);
  v1 = String._bridgeToObjectiveC()();
  v2 = sub_100008A18(&qword_100265F70);
  inited = swift_initStackObject(v2, v6);
  *(_OWORD *)(inited + 16) = xmmword_1001B7630;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x80000001001F4B50;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0x6C69614673796164;
  *(_QWORD *)(inited + 64) = 0xEA00000000006465;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  strcpy((char *)(inited + 80), "daysAttempted");
  *(_WORD *)(inited + 94) = -4864;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  v4 = sub_10013E6E8(inited);
  sub_10013E430();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v0, "sendEvent:customPayload:", v1, isa);

}

unint64_t sub_10013E430()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100265F78;
  if (!qword_100265F78)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100265F78);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TimeRange.Duration(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ObservabilityReportType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10013E548 + 4 * byte_1001B93C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10013E57C + 4 * asc_1001B93C0[v4]))();
}

uint64_t sub_10013E57C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013E584(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013E58CLL);
  return result;
}

uint64_t sub_10013E598(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013E5A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10013E5A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013E5AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservabilityReportType()
{
  return &type metadata for ObservabilityReportType;
}

unint64_t sub_10013E5CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100265F80;
  if (!qword_100265F80)
  {
    v1 = sub_1000A5AB4(&qword_100265F88);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100265F80);
  }
  return result;
}

void sub_10013E618(_QWORD *a1@<X8>)
{
  *a1 = &off_100216280;
}

unint64_t sub_10013E62C()
{
  unint64_t result;

  result = qword_100265F90;
  if (!qword_100265F90)
  {
    result = swift_getWitnessTable(&unk_1001B9440, &type metadata for ObservabilityReportType);
    atomic_store(result, (unint64_t *)&qword_100265F90);
  }
  return result;
}

uint64_t sub_10013E670()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x796C72756F68;
  if (*v0 != 1)
    v1 = 0x796C696164;
  if (*v0)
    return v1;
  else
    return 0x63696E756D6D6F63;
}

unint64_t sub_10013E6D0(uint64_t a1)
{
  return sub_10013E6F4(a1, &qword_100265FB8);
}

unint64_t sub_10013E6DC(uint64_t a1)
{
  return sub_10002E6E8(a1, &qword_100265FA8);
}

unint64_t sub_10013E6E8(uint64_t a1)
{
  return sub_10013E6F4(a1, &qword_100265FF8);
}

unint64_t sub_10013E6F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  unint64_t result;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v6 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008A18(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v6 = (_QWORD *)v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v6;
  }
  swift_retain(v4, v5);
  v8 = (void **)(a1 + 48);
  while (1)
  {
    v9 = (uint64_t)*(v8 - 2);
    v10 = (uint64_t)*(v8 - 1);
    v11 = *v8;
    swift_bridgeObjectRetain(v10);
    v12 = v11;
    result = sub_10002DDCC(v9, v10);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = (uint64_t *)(v6[6] + 16 * result);
    *v15 = v9;
    v15[1] = v10;
    *(_QWORD *)(v6[7] + 8 * result) = v12;
    v16 = v6[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v6[2] = v18;
    v8 += 3;
    if (!--v7)
    {
      swift_release(v6);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10013E808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = sub_100008A18(&qword_100265FA0);
  inited = swift_initStackObject(v1, &v11);
  *(_OWORD *)(inited + 16) = xmmword_1001B94D0;
  *(_QWORD *)(inited + 32) = 0x444D4D5F65746164;
  *(_QWORD *)(inited + 40) = 0xEB00000000484844;
  *(_QWORD *)(inited + 48) = sub_10013EA1C();
  strcpy((char *)(inited + 56), "created_events");
  *(_BYTE *)(inited + 71) = -18;
  v3 = (int *)type metadata accessor for ObservabilityDailyReport(0);
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0x6465726566667562;
  *(_QWORD *)(inited + 88) = 0xEF73746E6576655FLL;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  strcpy((char *)(inited + 104), "queued_events");
  *(_WORD *)(inited + 118) = -4864;
  *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 128) = 0xD000000000000018;
  *(_QWORD *)(inited + 136) = 0x80000001001F4E40;
  *(_QWORD *)(inited + 144) = sub_10013ECB4(*(_QWORD *)(v0 + v3[8]), *(_QWORD *)(v0 + v3[8] + 8));
  strcpy((char *)(inited + 152), "buffered_time");
  *(_WORD *)(inited + 166) = -4864;
  *(_QWORD *)(inited + 168) = sub_10013ECB4(*(_QWORD *)(v0 + v3[9]), *(_QWORD *)(v0 + v3[9] + 8));
  *(_QWORD *)(inited + 176) = 0x5F64657269707865;
  *(_QWORD *)(inited + 184) = 0xEF73656863746162;
  *(NSNumber *)(inited + 192) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 200) = 0xD000000000000016;
  *(_QWORD *)(inited + 208) = 0x80000001001F4E60;
  v4 = v3[11];
  v5 = *(_QWORD *)(v0 + v3[12]);
  v6 = *(_QWORD *)(v0 + v4);
  swift_bridgeObjectRetain(v5);
  v7 = swift_bridgeObjectRetain(v6);
  v8 = sub_10013EF60(v7, v5);
  v9 = sub_10013F0BC(v8);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(inited + 216) = v9;
  return sub_10002E6E8(inited, &qword_100265FA8);
}

uint64_t sub_10013EA1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = type metadata accessor for TimeZone(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DateComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v13 = sub_10000ABD8(v5, (uint64_t)qword_10026D1E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, v5);
  if (qword_100264E80 != -1)
    swift_once(&qword_100264E80, sub_10015B3D8);
  v14 = sub_10000ABD8(v1, (uint64_t)qword_10026D228);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v14, v1);
  Calendar.dateComponents(in:from:)(v4, v0);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10003E180(0, (unint64_t *)&qword_100265FD0, NSString_ptr);
  v15 = (void *)NSString.init(stringLiteral:)("%02d%02d%02d", v23, v24, v25);
  v16 = sub_100008A18((uint64_t *)&unk_1002653F0);
  v17 = swift_allocObject(v16, 152, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1001B7630;
  result = DateComponents.month.getter();
  if ((v19 & 1) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  *(_QWORD *)(v17 + 56) = &type metadata for Int;
  *(_QWORD *)(v17 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v17 + 32) = result;
  result = DateComponents.day.getter(result);
  if ((v20 & 1) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_QWORD *)(v17 + 96) = &type metadata for Int;
  *(_QWORD *)(v17 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v17 + 72) = result;
  result = DateComponents.hour.getter();
  if ((v21 & 1) == 0)
  {
    *(_QWORD *)(v17 + 136) = &type metadata for Int;
    *(_QWORD *)(v17 + 144) = &protocol witness table for Int;
    *(_QWORD *)(v17 + 112) = result;
    v22 = NSString.init(format:_:)(v15, v17);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return v22;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10013ECB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t inited;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  NSNumber v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  Class isa;
  uint64_t result;
  uint64_t v27;
  _BYTE v28[56];

  v3 = sub_100008A18(&qword_100265FC8);
  inited = swift_initStackObject(v3, v28);
  *(_OWORD *)(inited + 16) = xmmword_1001B76C0;
  *(_QWORD *)(inited + 32) = 0x6E6F6973726576;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  v5 = (_QWORD *)sub_10013E6F4(inited, &qword_100265FB8);
  v27 = *(_QWORD *)(a2 + 16);
  if (!v27)
  {
LABEL_19:
    sub_10003E180(0, (unint64_t *)&qword_100265FB0, NSNumber_ptr);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    return (uint64_t)isa;
  }
  swift_bridgeObjectRetain(a2);
  v6 = 0;
  while (1)
  {
    v8 = *(_QWORD *)(a2 + 8 * v6++ + 32);
    if (v8 < 1)
      goto LABEL_5;
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(object);
    v11.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    v14 = sub_10002DDCC(0x74656B637562, 0xE600000000000000);
    v15 = v5[2];
    v16 = (v13 & 1) == 0;
    v17 = v15 + v16;
    if (__OFADD__(v15, v16))
      break;
    v18 = v13;
    if (v5[3] >= v17)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v13 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        sub_100141380();
        if ((v18 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      sub_100140898(v17, isUniquelyReferenced_nonNull_native);
      v19 = sub_10002DDCC(0x74656B637562, 0xE600000000000000);
      if ((v18 & 1) != (v20 & 1))
        goto LABEL_22;
      v14 = v19;
      if ((v18 & 1) == 0)
      {
LABEL_14:
        v5[(v14 >> 6) + 8] |= 1 << v14;
        v21 = (_QWORD *)(v5[6] + 16 * v14);
        *v21 = 0x74656B637562;
        v21[1] = 0xE600000000000000;
        *(NSNumber *)(v5[7] + 8 * v14) = v11;
        v22 = v5[2];
        v23 = __OFADD__(v22, 1);
        v24 = v22 + 1;
        if (v23)
          goto LABEL_21;
        v5[2] = v24;
        swift_bridgeObjectRetain(0xE600000000000000);
        goto LABEL_4;
      }
    }
    v7 = v5[7];

    *(NSNumber *)(v7 + 8 * v14) = v11;
LABEL_4:
    swift_bridgeObjectRelease(0xE600000000000000);
    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_5:
    if (v27 == v6)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10013EF60(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  __int128 v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_10013F42C(&v14, *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v10), *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v10 + 8));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10013F0BC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSNumber v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  Class isa;
  uint64_t result;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v2 = (_QWORD *)sub_10013E6F4((uint64_t)_swiftEmptyArrayStorage, &qword_100265FB8);
  v30 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v31 = (unint64_t)(v3 + 63) >> 6;
  v32 = a1;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v5 &= v5 - 1;
    }
    else
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_40;
      if (v8 >= v31)
      {
LABEL_37:
        swift_release(v32);
        sub_10003E180(0, (unint64_t *)&qword_100265FB0, NSNumber_ptr);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v2);
        return (uint64_t)isa;
      }
      v9 = *(_QWORD *)(v30 + 8 * v8);
      ++v6;
      if (!v9)
      {
        v6 = v8 + 1;
        if (v8 + 1 >= v31)
          goto LABEL_37;
        v9 = *(_QWORD *)(v30 + 8 * v6);
        if (!v9)
        {
          v6 = v8 + 2;
          if (v8 + 2 >= v31)
            goto LABEL_37;
          v9 = *(_QWORD *)(v30 + 8 * v6);
          if (!v9)
          {
            v6 = v8 + 3;
            if (v8 + 3 >= v31)
              goto LABEL_37;
            v9 = *(_QWORD *)(v30 + 8 * v6);
            if (!v9)
            {
              v6 = v8 + 4;
              if (v8 + 4 >= v31)
                goto LABEL_37;
              v9 = *(_QWORD *)(v30 + 8 * v6);
              if (!v9)
              {
                v10 = v8 + 5;
                if (v10 >= v31)
                  goto LABEL_37;
                v9 = *(_QWORD *)(v30 + 8 * v10);
                if (!v9)
                {
                  while (1)
                  {
                    v6 = v10 + 1;
                    if (__OFADD__(v10, 1))
                      goto LABEL_41;
                    if (v6 >= v31)
                      goto LABEL_37;
                    v9 = *(_QWORD *)(v30 + 8 * v6);
                    ++v10;
                    if (v9)
                      goto LABEL_25;
                  }
                }
                v6 = v10;
              }
            }
          }
        }
      }
LABEL_25:
      v5 = (v9 - 1) & v9;
    }
    v11 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v13 = v12;
    v14.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v17 = sub_10002DDCC(v11, v13);
    v18 = v2[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      break;
    v21 = v16;
    if (v2[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v16 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100141380();
        if ((v21 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100140898(v20, isUniquelyReferenced_nonNull_native);
      v22 = sub_10002DDCC(v11, v13);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_42;
      v17 = v22;
      if ((v21 & 1) != 0)
      {
LABEL_4:
        v7 = v2[7];

        *(NSNumber *)(v7 + 8 * v17) = v14;
        goto LABEL_5;
      }
    }
    v2[(v17 >> 6) + 8] |= 1 << v17;
    v24 = (uint64_t *)(v2[6] + 16 * v17);
    *v24 = v11;
    v24[1] = v13;
    *(NSNumber *)(v2[7] + 8 * v17) = v14;
    v25 = v2[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_39;
    v2[2] = v27;
    swift_bridgeObjectRetain(v13);
LABEL_5:
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10013F42C(_OWORD *a1, Swift::UInt a2, Swift::UInt a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  __int128 v18;
  uint64_t result;
  _QWORD v20[9];

  v7 = *v3;
  Hasher.init(_seed:)(v20, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      if (v14 == a2 && v13 == a3)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_8;
    }
    result = 0;
    v18 = *(_OWORD *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
  }
  else
  {
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v20[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_10013FB88(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    v17 = *v3;
    *v3 = v20[0];
    swift_bridgeObjectRelease(v17);
    *(_QWORD *)&v18 = a2;
    *((_QWORD *)&v18 + 1) = a3;
    result = 1;
  }
  *a1 = v18;
  return result;
}

uint64_t sub_10013F568(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_10013FCE4(a2, v9, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v15;
    swift_bridgeObjectRelease(v14);
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_10013F660(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  Swift::Int v12;
  unint64_t v13;
  Swift::UInt *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt *v20;
  Swift::UInt v21;
  Swift::UInt v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  _QWORD *v32;
  uint64_t v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008A18(&qword_100265FC0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v31 = v2;
    v32 = (_QWORD *)(v3 + 56);
    v8 = 1 << *(_BYTE *)(v3 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = result + 56;
    while (1)
    {
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v3 + 56;
        if (v17 >= v11)
          goto LABEL_34;
        v18 = v32[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v11)
            goto LABEL_34;
          v18 = v32[v7];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v11)
            {
LABEL_34:
              v30 = 1 << *(_BYTE *)(v3 + 32);
              if (v30 > 63)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v2 = v31;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v18 = v32[v19];
            if (!v18)
            {
              while (1)
              {
                v7 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v7 >= v11)
                  goto LABEL_34;
                v18 = v32[v7];
                ++v19;
                if (v18)
                  goto LABEL_24;
              }
            }
            v7 = v19;
          }
        }
LABEL_24:
        v10 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = (Swift::UInt *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v21);
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (Swift::UInt *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_10013F908(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008A18(&qword_100266000);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_10013FB88(uint64_t result, Swift::UInt a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  Swift::UInt v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  Swift::UInt *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_15;
  v10 = v8 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10013F660(v10);
  }
  else
  {
    if (v9 > v8)
    {
      result = (uint64_t)sub_10013FE04();
      goto LABEL_15;
    }
    sub_100140118(v10);
  }
  v11 = *v4;
  Hasher.init(_seed:)(v23, *(_QWORD *)(*v4 + 40));
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(a2);
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      v14 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * a3);
      v16 = *v14;
      v15 = v14[1];
      if (v16 == v7 && v15 == a2)
        goto LABEL_18;
      a3 = (a3 + 1) & v13;
    }
    while (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_15:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v19 = (Swift::UInt *)(*(_QWORD *)(v18 + 48) + 16 * a3);
  *v19 = v7;
  v19[1] = a2;
  v20 = *(_QWORD *)(v18 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (!v21)
  {
    *(_QWORD *)(v18 + 16) = v22;
    return result;
  }
  __break(1u);
LABEL_18:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObservabilityErrorBucket);
  __break(1u);
  return result;
}

uint64_t sub_10013FCE4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10013F908(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_10013FF84();
      goto LABEL_14;
    }
    sub_100140394(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

void *sub_10013FE04()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;

  v1 = v0;
  sub_100008A18(&qword_100265FC0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
        break;
    }
LABEL_25:
    v19 = __clz(__rbit64(v17));
    v12 = (v17 - 1) & v17;
    v15 = v19 + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
  }
  v18 = v16 + 2;
  if (v18 >= v13)
    goto LABEL_26;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10013FF84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100008A18(&qword_100266000);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100140118(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  Swift::UInt *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt *v20;
  Swift::UInt v21;
  Swift::UInt v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  Swift::Int *v30;
  int64_t v31;
  uint64_t v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008A18(&qword_100265FC0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_36:
    *v2 = v6;
    return result;
  }
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v30 = v2;
  v31 = (unint64_t)(v9 + 63) >> 6;
  v12 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_25;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v17 >= v31)
      goto LABEL_34;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v31)
        goto LABEL_34;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
        break;
    }
LABEL_24:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_25:
    v20 = (Swift::UInt *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(v21);
    Hasher._combine(_:)(v22);
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (Swift::UInt *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 2;
  if (v19 >= v31)
  {
LABEL_34:
    result = swift_release(v3);
    v2 = v30;
    goto LABEL_36;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_24;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v31)
      goto LABEL_34;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_24;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100140394(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008A18(&qword_100266000);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1001405F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008A18(&qword_100265FF0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v35 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_34;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_34;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v35;
                goto LABEL_41;
              }
              if (v34 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v9 = v22;
          }
        }
LABEL_24:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v24);
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v15 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

Swift::Int sub_100140898(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008A18(&qword_100265FB8);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v37 = v3;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5, v8);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v41, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

Swift::Int sub_100140BA4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008A18(&qword_100265FA8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5, v8);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v5);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_unknownObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v5);
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

Swift::Int sub_100140EB8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  Swift::Int result;
  Swift::Int v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  Swift::UInt v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[9];

  v3 = v2;
  v41 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100008A18(&qword_100266008);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v38 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    v37 = a2;
    v18 = 16;
    if ((a2 & 1) != 0)
      v18 = 32;
    v40 = v18;
    while (1)
    {
      if (v16)
      {
        v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        result = (Swift::Int)v39;
        if (v22 >= v38)
          goto LABEL_35;
        v23 = v39[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_35;
          v23 = v39[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_35:
              if ((v37 & 1) == 0)
              {
                result = swift_release(v9);
                v3 = v36;
                goto LABEL_42;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v39, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v12 >= v38)
                  goto LABEL_35;
                v23 = v39[v12];
                ++v24;
                if (v23)
                  goto LABEL_25;
              }
            }
            v12 = v24;
          }
        }
LABEL_25:
        v16 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + v21);
      v26 = *(_QWORD *)(v6 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + v40))(v8, *(_QWORD *)(v9 + 56) + v26 * v21, v41);
      Hasher.init(_seed:)(v42, *(_QWORD *)(v11 + 40));
      Hasher._combine(_:)(v25);
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_BYTE *)(*(_QWORD *)(v11 + 48) + v19) = v25;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 56) + v26 * v19, v8, v41);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release(v9);
LABEL_42:
  *v3 = v11;
  return result;
}

void *sub_1001411F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_100008A18(&qword_100265FF0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100141380()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100008A18(&qword_100265FB8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100141530()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100008A18(&qword_100265FA8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_unknownObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001416E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008A18(&qword_100266008);
  v23 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
    v18 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v18, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v17;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v18, v4, v1);
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_100141900(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100008A18(&qword_100265FF0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_100138848(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1001419D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_100008A18((uint64_t *)&unk_100266010);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (unsigned __int8 *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_100008A18(&qword_100266008);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v6);
    v8 = &v5[*(int *)(v2 + 48)];
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_100141B34(v9, (uint64_t)v5);
      v11 = *v5;
      result = sub_1000092C0(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v7[6] + result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for Date(0);
      result = (*(uint64_t (**)(unint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, v8, v16);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_100141B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18((uint64_t *)&unk_100266010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100141B7C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 115;
  else
    v2 = 99;
  if ((a2 & 1) != 0)
    v3 = 115;
  else
    v3 = 99;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000, v3, 0xE100000000000000, 0);
  swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  return v4 & 1;
}

uint64_t sub_100141BE0(char *a1, char *a2)
{
  return sub_100141B7C(*a1, *a2);
}

Swift::Int sub_100141BEC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 115;
  else
    v2 = 99;
  String.hash(into:)(v4, v2, 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100141C48(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 115;
  else
    v2 = 99;
  String.hash(into:)(a1, v2, 0xE100000000000000);
  return swift_bridgeObjectRelease(0xE100000000000000);
}

Swift::Int sub_100141C78(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 115;
  else
    v3 = 99;
  String.hash(into:)(v5, v3, 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100141CD0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002162A8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100141D2C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 99;
  if (*v1)
    v2 = 115;
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_100141D4C()
{
  _BYTE *v0;

  if (*v0)
    return 115;
  else
    return 99;
}

uint64_t sub_100141D68@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002162A8, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100141DC8(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100141DD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001424B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100141DFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001424B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100141E24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v7 = sub_100008A18(&qword_100266048);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000B748(a1, v11);
  v13 = sub_1001424B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ObservabilityCommunicationCodes.CodingKeys, &type metadata for ObservabilityCommunicationCodes.CodingKeys, v13, v11, v12);
  v19 = a2;
  v18 = 0;
  v14 = sub_100008A18(&qword_100266038);
  v15 = sub_1001424F8(&qword_100266050, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v7, v14, v15);
  if (!v3)
  {
    v19 = a3;
    v18 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v7, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100141F8C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100141FCC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100141FB4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100141E24(a1, *v1, v1[1]);
}

uint64_t sub_100141FCC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v3 = sub_100008A18(&qword_100266028);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000B748(a1, v7);
  v9 = sub_1001424B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ObservabilityCommunicationCodes.CodingKeys, &type metadata for ObservabilityCommunicationCodes.CodingKeys, v9, v7, v8);
  if (v1)
  {
    v13 = 0;
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
    swift_bridgeObjectRelease(0);
  }
  else
  {
    v10 = sub_100008A18(&qword_100266038);
    v15 = 0;
    v11 = sub_1001424F8(&qword_100266040, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v16, v10, &v15, v3, v10, v11);
    v13 = v16;
    v15 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v16, v10, &v15, v3, v10, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
  }
  return v13;
}

uint64_t sub_10014217C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for String.Encoding(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = JSONDecoder.init()();
  static String.Encoding.utf8.getter();
  v11 = String.data(using:allowLossyConversion:)(v8, 0, a1, a2);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v13 >> 60 == 15)
  {
    swift_release(v10);
    return 1;
  }
  else
  {
    v15 = sub_1001422BC();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v16, &type metadata for ObservabilityCommunicationCodes, v11, v13, &type metadata for ObservabilityCommunicationCodes, v15);
    sub_1000ABBF0(v11, v13);
    result = swift_release(v10);
    if (!v2)
      return v16;
  }
  return result;
}

unint64_t sub_1001422BC()
{
  unint64_t result;

  result = qword_100266020;
  if (!qword_100266020)
  {
    result = swift_getWitnessTable(&unk_1001B9548, &type metadata for ObservabilityCommunicationCodes);
    atomic_store(result, (unint64_t *)&qword_100266020);
  }
  return result;
}

uint64_t destroy for ObservabilityCommunicationCodes(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s7Metrics31ObservabilityCommunicationCodesVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for ObservabilityCommunicationCodes(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

_QWORD *assignWithTake for ObservabilityCommunicationCodes(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ObservabilityCommunicationCodes(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ObservabilityCommunicationCodes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservabilityCommunicationCodes()
{
  return &type metadata for ObservabilityCommunicationCodes;
}

unint64_t sub_1001424B4()
{
  unint64_t result;

  result = qword_100266030;
  if (!qword_100266030)
  {
    result = swift_getWitnessTable(&unk_1001B966C, &type metadata for ObservabilityCommunicationCodes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266030);
  }
  return result;
}

uint64_t sub_1001424F8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A5AB4(&qword_100266038);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ObservabilityCommunicationCodes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001425A4 + 4 * byte_1001B94F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001425D8 + 4 * byte_1001B94F0[v4]))();
}

uint64_t sub_1001425D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001425E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001425E8);
  return result;
}

uint64_t sub_1001425F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001425FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100142600(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100142608(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservabilityCommunicationCodes.CodingKeys()
{
  return &type metadata for ObservabilityCommunicationCodes.CodingKeys;
}

unint64_t sub_100142628()
{
  unint64_t result;

  result = qword_100266058;
  if (!qword_100266058)
  {
    result = swift_getWitnessTable(&unk_1001B9644, &type metadata for ObservabilityCommunicationCodes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266058);
  }
  return result;
}

unint64_t sub_100142670()
{
  unint64_t result;

  result = qword_100266060;
  if (!qword_100266060)
  {
    result = swift_getWitnessTable(&unk_1001B957C, &type metadata for ObservabilityCommunicationCodes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266060);
  }
  return result;
}

unint64_t sub_1001426B8()
{
  unint64_t result;

  result = qword_100266068;
  if (!qword_100266068)
  {
    result = swift_getWitnessTable(&unk_1001B95A4, &type metadata for ObservabilityCommunicationCodes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266068);
  }
  return result;
}

uint64_t *sub_1001426FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10, a2);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_bridgeObjectRetain(v9);
  }
  return a1;
}

uint64_t sub_100142788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_1001427CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_10014282C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_100142898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001428F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_100142958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100142964);
}

uint64_t sub_100142964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001429E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001429EC);
}

uint64_t sub_1001429EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ObservabilityCommunicationReport(uint64_t a1)
{
  uint64_t result;

  result = qword_1002660C8;
  if (!qword_1002660C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ObservabilityCommunicationReport);
  return result;
}

uint64_t sub_100142AA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100142B14()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for GroupConfigPersistence()
{
  return objc_opt_self(_TtC7Metrics22GroupConfigPersistence);
}

uint64_t sub_100142B68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100142B98 + 4 * a7[a1]))(0x63697274656DLL, 0xE600000000000000);
}

uint64_t sub_100142B98()
{
  return 0x5465736F70727570;
}

uint64_t sub_100142BB8()
{
  return 0x726564726FLL;
}

uint64_t sub_100142BCC()
{
  return 0x736E6F6974706FLL;
}

unint64_t sub_100142BE4()
{
  return 0xD000000000000011;
}

uint64_t sub_100142C0C()
{
  return 0x696669746E656469;
}

uint64_t sub_100142C28()
{
  return 0x68636E617262;
}

unint64_t sub_100142C38()
{
  return 0xD000000000000016;
}

uint64_t sub_100142C58()
{
  return 0x6D6E6F7269766E65;
}

uint64_t sub_100142C78()
{
  return 0x69747265706F7270;
}

uint64_t sub_100142C9C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32[8];
  _BYTE v33[8];
  _BYTE v34[8];

  v3 = v1;
  v5 = sub_100008A18(&qword_100266270);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000B748(a1, v9);
  v11 = sub_100144908();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MetricsInjector.MetricsInjectorParams.CodingKeys, &type metadata for MetricsInjector.MetricsInjectorParams.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v32[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v32, v5);
  if (!v2)
  {
    v13 = v3[1];
    v32[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v32, v5);
    v14 = v3[2];
    v15 = *((unsigned __int8 *)v3 + 24);
    v32[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v32, v5);
    v16 = v3[4];
    v17 = *((unsigned __int8 *)v3 + 40);
    v32[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v32, v5);
    v18 = v3[6];
    v19 = v3[7];
    v32[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v32, v5);
    v20 = v3[8];
    v21 = v3[9];
    v32[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v32, v5);
    v22 = v3[10];
    v23 = v3[11];
    v32[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, v32, v5);
    sub_1001444A8((uint64_t)(v3 + 12), (uint64_t)v34, &qword_100266238);
    sub_1001444A8((uint64_t)v34, (uint64_t)v32, &qword_100266238);
    HIBYTE(v31) = 7;
    v24 = sub_100008A18(&qword_100266260);
    v25 = sub_100144A4C(&qword_100266278, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, (char *)&v31 + 7, v5, v24, v25);
    v26 = v3[13];
    v27 = v3[14];
    v32[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, v32, v5);
    v28 = v3[15];
    v29 = v3[16];
    v32[0] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, v32, v5);
    sub_1001444A8((uint64_t)(v3 + 17), (uint64_t)v33, &qword_100266238);
    sub_1001444A8((uint64_t)v33, (uint64_t)v32, &qword_100266238);
    HIBYTE(v31) = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, (char *)&v31 + 7, v5, v24, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100142FB0()
{
  unsigned __int8 *v0;

  return sub_100142B68(*v0);
}

uint64_t sub_100142FB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001430E0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100142FDC(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_100142FE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100144908();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100143010(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100144908();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100143038@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[9];

  sub_100143580(a1, v8);
  if (!v2)
  {
    v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100143090(_QWORD *a1)
{
  return sub_100142C9C(a1);
}

uint64_t sub_1001430E0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x63697274656DLL && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63697274656DLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x5465736F70727570 && a2 == 0xEB00000000657079)
  {
    v7 = 0xEB00000000657079;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5465736F70727570, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x726564726FLL && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726564726FLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000011)
  {
    v10 = 0x80000001001F4EE0;
    if (a2 == 0x80000001001F4EE0)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001F4EE0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0xD000000000000011)
  {
    v11 = 0x80000001001F4F00;
    if (a2 == 0x80000001001F4F00)
      goto LABEL_36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001F4F00, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v12 = 0xEA00000000007265;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0x68636E617262 && a2 == 0xE600000000000000)
  {
    v13 = 0xE600000000000000;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x68636E617262, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x69747265706F7270 && a2 == 0xEE006E6F734A7365)
  {
    v14 = 0xEE006E6F734A7365;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69747265706F7270, 0xEE006E6F734A7365, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000001001F4F20)
  {
    v15 = 0x80000001001F4F20;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001001F4F20, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_60;
  }
  if (a1 == 0x6D6E6F7269766E65 && a2 == 0xEB00000000746E65)
  {
    swift_bridgeObjectRelease(0xEB00000000746E65);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D6E6F7269766E65, 0xEB00000000746E65, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

_QWORD *sub_100143580@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD v65[3];
  char v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;

  v5 = sub_100008A18(&qword_100266250);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = 1;
  v9 = a1[3];
  v10 = a1[4];
  v55 = a1;
  sub_10000B748(a1, v9);
  v11 = sub_100144908();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MetricsInjector.MetricsInjectorParams.CodingKeys, &type metadata for MetricsInjector.MetricsInjectorParams.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v55);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(0);
    return (_QWORD *)swift_bridgeObjectRelease(0);
  }
  else
  {
    v54 = v6;
    LOBYTE(v65[0]) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(v65, v5);
    LOBYTE(v65[0]) = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v65, v5);
    LOBYTE(v65[0]) = 2;
    v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v65, v5);
    v82 = v14 & 1;
    LOBYTE(v65[0]) = 3;
    v52 = v14;
    v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v65, v5);
    v81 = v15 & 1;
    LOBYTE(v65[0]) = 4;
    v50 = v15;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v65, v5);
    v18 = v17;
    *(_QWORD *)&v49 = v16;
    LOBYTE(v65[0]) = 5;
    swift_bridgeObjectRetain(v17);
    *((_QWORD *)&v49 + 1) = v18;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v65, v5);
    LOBYTE(v65[0]) = 6;
    v48 = v19;
    swift_bridgeObjectRetain(v19);
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v65, v5);
    v47 = v20;
    v21 = sub_100008A18(&qword_100266260);
    LOBYTE(v56) = 7;
    v22 = sub_100144A4C(&qword_100266268, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v47);
    v44 = v22;
    v45 = v21;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v65, v21, &v56, v5, v21, v22);
    v23 = v65[0];
    LOBYTE(v65[0]) = 8;
    v41 = v13;
    v42 = v23;
    swift_bridgeObjectRetain(v23);
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v65, v5);
    v25 = v24;
    LOBYTE(v65[0]) = 9;
    swift_bridgeObjectRetain(v24);
    v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v65, v5);
    v27 = v26;
    v83 = 10;
    swift_bridgeObjectRetain(v26);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v80, v45, &v83, v5, v45, v44);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v5);
    v28 = v80;
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRelease(0);
    *(_QWORD *)&v56 = v12;
    *((_QWORD *)&v56 + 1) = v41;
    *(_QWORD *)&v57 = v53;
    BYTE8(v57) = v52 & 1;
    *(_QWORD *)&v58 = v51;
    BYTE8(v58) = v50 & 1;
    v29 = *((_QWORD *)&v49 + 1);
    v59 = v49;
    v30 = v48;
    *(_QWORD *)&v60 = v46;
    *((_QWORD *)&v60 + 1) = v48;
    *(_QWORD *)&v61 = v43;
    *((_QWORD *)&v61 + 1) = v47;
    *(_QWORD *)&v62 = v42;
    *((_QWORD *)&v62 + 1) = v40;
    *(_QWORD *)&v63 = v25;
    *((_QWORD *)&v63 + 1) = v39;
    *(_QWORD *)&v64 = v27;
    *((_QWORD *)&v64 + 1) = v28;
    sub_10014494C(&v56);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v30);
    v31 = v47;
    swift_bridgeObjectRelease(v47);
    v32 = v42;
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v28);
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v55);
    v65[0] = v12;
    v65[1] = v41;
    v65[2] = v53;
    v66 = v82;
    v67 = v51;
    v68 = v81;
    v69 = v49;
    v70 = v46;
    v71 = v48;
    v72 = v43;
    v73 = v31;
    v74 = v32;
    v75 = v40;
    v76 = v25;
    v77 = v39;
    v78 = v27;
    v79 = v28;
    result = sub_1001449CC(v65);
    v34 = v63;
    a2[6] = v62;
    a2[7] = v34;
    a2[8] = v64;
    v35 = v59;
    a2[2] = v58;
    a2[3] = v35;
    v36 = v61;
    a2[4] = v60;
    a2[5] = v36;
    v37 = v57;
    *a2 = v56;
    a2[1] = v37;
  }
  return result;
}

void sub_100143C5C()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  NSString v4;
  void *v5;
  id v6;
  _QWORD aBlock[5];
  uint64_t v8;

  v0 = (void *)objc_opt_self(APTestingRig);
  v1 = objc_msgSend(v0, "sharedInstance");
  if (v1)
  {
    v6 = v1;
    v2 = objc_msgSend(v0, "sharedInstance");
    if (v2)
    {
      v3 = v2;
      v4 = String._bridgeToObjectiveC()();
      aBlock[4] = sub_100162268;
      v8 = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100155378;
      aBlock[3] = &unk_100217028;
      v5 = _Block_copy(aBlock);
      swift_release(v8);
      objc_msgSend(v3, "subscribeForMessage:handler:", v4, v5);
      _Block_release(v5);

    }
    else
    {

    }
  }
}

uint64_t sub_100143D88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2, a2);
}

uint64_t sub_100143D98(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100143DA0(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  Class isa;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  Class v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  NSArray v41;
  NSDictionary v42;
  NSDictionary v43;
  uint64_t v44;
  _QWORD *v45;
  NSArray v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  id v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ObjCClassMetadata;
  NSString v63;
  uint64_t v64;
  uint64_t v65;
  id v66[4];
  _BYTE v67[8];
  _BYTE v68[16];
  _BYTE v69[16];
  _BYTE v70[16];
  _BYTE v71[16];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  _QWORD v77[2];
  uint64_t v78;

  v61 = type metadata accessor for UUID(0);
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001444A8(a1 + 104, (uint64_t)v71, &qword_100266230);
  v8 = sub_1001444A8((uint64_t)v71, (uint64_t)&v72, &qword_100266230);
  v9 = v73;
  if (v73
    && (v10 = v72,
        static String.Encoding.utf8.getter(v8),
        v11 = String.data(using:allowLossyConversion:)(v7, 1, v10, v9),
        v13 = v12,
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4),
        v13 >> 60 != 15))
  {
    v15 = (void *)objc_opt_self(NSJSONSerialization);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v66[0] = 0;
    v17 = objc_msgSend(v15, "JSONObjectWithData:options:error:", isa, 0, v66);

    v18 = v66[0];
    if (!v17)
    {
      v54 = v66[0];
      _convertNSErrorToError(_:)(v18);

      swift_willThrow();
      v55 = v11;
      v56 = v13;
      return sub_1000ABBF0(v55, v56);
    }
    v19 = v66[0];
    _bridgeAnyObjectToAny(_:)(v66, v17);
    sub_1000ABBF0(v11, v13);
    swift_unknownObjectRelease(v17);
    v20 = sub_100008A18(&qword_1002655B0);
    if (swift_dynamicCast(&v65, v66, (char *)&type metadata for Any + 8, v20, 6))
      v14 = v65;
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  sub_1001444A8(a1 + 120, (uint64_t)v70, &qword_100266230);
  v21 = sub_1001444A8((uint64_t)v70, (uint64_t)&v74, &qword_100266230);
  v22 = v75;
  if (v75)
  {
    v23 = v74;
    static String.Encoding.utf8.getter(v21);
    v24 = String.data(using:allowLossyConversion:)(v7, 1, v23, v22);
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (v26 >> 60 != 15)
    {
      v28 = (void *)objc_opt_self(NSJSONSerialization);
      v29 = Data._bridgeToObjectiveC()().super.isa;
      v66[0] = 0;
      v30 = objc_msgSend(v28, "JSONObjectWithData:options:error:", v29, 0, v66);

      v31 = v66[0];
      if (v30)
      {
        v32 = v66[0];
        _bridgeAnyObjectToAny(_:)(v66, v30);
        sub_1000ABBF0(v24, v26);
        swift_unknownObjectRelease(v30);
        v33 = sub_100008A18((uint64_t *)&unk_100266240);
        if (swift_dynamicCast(&v65, v66, (char *)&type metadata for Any + 8, v33, 6))
          v27 = v65;
        else
          v27 = 0;
        goto LABEL_15;
      }
      v57 = v66[0];
      swift_bridgeObjectRelease(v14);
      _convertNSErrorToError(_:)(v31);

      swift_willThrow();
      v55 = v24;
      v56 = v26;
      return sub_1000ABBF0(v55, v56);
    }
  }
  v27 = 0;
LABEL_15:
  v34 = objc_msgSend((id)objc_opt_self(MetricsModuleCommon), "metricClass");
  ObjCClassMetadata = swift_getObjCClassMetadata(v34);
  v64 = *(_QWORD *)(a1 + 8);
  sub_1001444A8(a1 + 48, (uint64_t)v69, &qword_100266230);
  sub_1001444A8((uint64_t)v69, (uint64_t)v76, &qword_100266230);
  if (v76[1])
    v63 = String._bridgeToObjectiveC()();
  else
    v63 = 0;
  sub_1001444A8(a1 + 64, (uint64_t)v68, &qword_100266230);
  sub_1001444A8((uint64_t)v68, (uint64_t)v77, &qword_100266230);
  if (v77[1])
  {
    v35 = String._bridgeToObjectiveC()();
    v36 = *(_QWORD *)(a1 + 88);
    if (v36)
    {
LABEL_20:
      v37 = v36;
      goto LABEL_23;
    }
  }
  else
  {
    v35 = 0;
    v36 = *(_QWORD *)(a1 + 88);
    if (v36)
      goto LABEL_20;
  }
  v38 = UUID.init()();
  UUID.uuidString.getter(v38);
  v37 = v39;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v3, v61);
  v36 = 0;
LABEL_23:
  swift_bridgeObjectRetain(v36);
  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  sub_1001444A8(a1 + 96, (uint64_t)v67, &qword_100266238);
  sub_1001444A8((uint64_t)v67, (uint64_t)&v78, &qword_100266238);
  if (v78)
  {
    v41.super.isa = Array._bridgeToObjectiveC()().super.isa;
    if (v14)
      goto LABEL_25;
LABEL_28:
    v42.super.isa = 0;
    if (v27)
      goto LABEL_26;
LABEL_29:
    v43.super.isa = 0;
    goto LABEL_30;
  }
  v41.super.isa = 0;
  if (!v14)
    goto LABEL_28;
LABEL_25:
  sub_100008A18(&qword_1002654D0);
  v42.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  if (!v27)
    goto LABEL_29;
LABEL_26:
  sub_100008A18((uint64_t *)&unk_1002659F0);
  v43.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
LABEL_30:
  v44 = *(_QWORD *)(a1 + 136);
  if (v44)
    v45 = *(_QWORD **)(a1 + 136);
  else
    v45 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v44);
  v46.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v45);
  if (*(_BYTE *)(a1 + 24))
    v47 = 0;
  else
    v47 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 40))
    v48 = 0;
  else
    v48 = *(_QWORD *)(a1 + 32);
  v49 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v58 = v48;
  v50 = v63;
  v51 = objc_msgSend(v49, "initWithPurpose:metric:contentIdentifier:contextIdentifier:handle:branch:properties:internalProperties:relayData:environment:order:options:", v64, *(_QWORD *)a1, v63, v35, v40, v41.super.isa, v42.super.isa, v43.super.isa, 0, v46.super.isa, v47, v58);

  if (!v51)
    return 0xD000000000000024;
  v52 = objc_msgSend((id)objc_opt_self(MetricsModule), "storage");
  objc_msgSend(v52, "receivedMetric:", v51);
  swift_unknownObjectRelease(v51);
  swift_unknownObjectRelease(v52);
  return 0x207363697274654DLL;
}

uint64_t sub_1001444A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008A18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for MetricsInjector()
{
  return &type metadata for MetricsInjector;
}

uint64_t destroy for MetricsInjector.MetricsInjectorParams(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  return swift_bridgeObjectRelease(a1[17]);
}

uint64_t initializeWithCopy for MetricsInjector.MetricsInjectorParams(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  v7 = *(_QWORD *)(a2 + 96);
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = v6;
  v9 = *(_QWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = v8;
  v10 = *(_QWORD *)(a2 + 128);
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for MetricsInjector.MetricsInjectorParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a1 + 136);
  v19 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  return a1;
}

__n128 initializeWithTake for MetricsInjector.MetricsInjectorParams(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for MetricsInjector.MetricsInjectorParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  v8 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 128));
  v11 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsInjector.MetricsInjectorParams(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsInjector.MetricsInjectorParams(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsInjector.MetricsInjectorParams()
{
  return &type metadata for MetricsInjector.MetricsInjectorParams;
}

unint64_t sub_100144908()
{
  unint64_t result;

  result = qword_100266258;
  if (!qword_100266258)
  {
    result = swift_getWitnessTable(&unk_1001B98CC, &type metadata for MetricsInjector.MetricsInjectorParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266258);
  }
  return result;
}

_QWORD *sub_10014494C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[7];
  v3 = a1[9];
  v4 = a1[11];
  v5 = a1[12];
  v6 = a1[14];
  v7 = a1[16];
  swift_bridgeObjectRetain(a1[17]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *sub_1001449CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[9];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[14];
  v6 = a1[16];
  v7 = a1[17];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_100144A4C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A5AB4(&qword_100266260);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MetricsInjector.MetricsInjectorParams.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsInjector.MetricsInjectorParams.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100144B88 + 4 * byte_1001B9780[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100144BBC + 4 * byte_1001B977B[v4]))();
}

uint64_t sub_100144BBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100144BC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100144BCCLL);
  return result;
}

uint64_t sub_100144BD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100144BE0);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100144BE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100144BEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsInjector.MetricsInjectorParams.CodingKeys()
{
  return &type metadata for MetricsInjector.MetricsInjectorParams.CodingKeys;
}

unint64_t sub_100144C0C()
{
  unint64_t result;

  result = qword_100266280;
  if (!qword_100266280)
  {
    result = swift_getWitnessTable(&unk_1001B98A4, &type metadata for MetricsInjector.MetricsInjectorParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266280);
  }
  return result;
}

unint64_t sub_100144C54()
{
  unint64_t result;

  result = qword_100266288;
  if (!qword_100266288)
  {
    result = swift_getWitnessTable(&unk_1001B9814, &type metadata for MetricsInjector.MetricsInjectorParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266288);
  }
  return result;
}

unint64_t sub_100144C9C()
{
  unint64_t result;

  result = qword_100266290;
  if (!qword_100266290)
  {
    result = swift_getWitnessTable(&unk_1001B983C, &type metadata for MetricsInjector.MetricsInjectorParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100266290);
  }
  return result;
}

uint64_t sub_100144CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  objc_class *v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  _QWORD *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  id v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  _UNKNOWN **v154;
  _QWORD v155[5];
  _QWORD v156[5];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _QWORD v160[6];
  _BYTE v161[32];
  uint64_t v162;

  v1 = v0;
  sub_10000D4D8(v0 + 16, (uint64_t)&v157);
  v144 = type metadata accessor for ObservabilityXPCTimer(0);
  swift_allocObject(v144, *(unsigned int *)(v144 + 48), *(unsigned __int16 *)(v144 + 52));
  v2 = sub_100155DC0(&v157);
  v143 = type metadata accessor for ObservabilityRegularTimer(0);
  v3 = swift_allocObject(v143, *(unsigned int *)(v143 + 48), *(unsigned __int16 *)(v143 + 52));
  *(_QWORD *)(v3 + 24) = 0;
  swift_unknownObjectWeakInit(v3 + 16, 0);
  v4 = v3 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_scheduledTime;
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_dispatchWorkItem) = 0;
  v148 = v3;
  v6 = OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_lock;
  *(_QWORD *)(v3 + v6) = objc_msgSend(objc_allocWithZone((Class)APUnfairLock), "initWithOptions:", 1);
  v7 = type metadata accessor for ObservabilityPeriodicPlanner();
  v8 = (_QWORD *)swift_allocObject(v7, 120, 7);
  v151 = v2;
  swift_retain(v2, v9);
  swift_retain(v3, v10);
  v11 = sub_100145DC0(0, 0, v2, v3, v8);
  *((_QWORD *)&v158 + 1) = v7;
  *(_QWORD *)&v159 = &off_1002178B0;
  *(_QWORD *)&v157 = v11;
  v149 = v11;
  v12 = type metadata accessor for QueryingPeriodicScheduler();
  v13 = (_QWORD *)swift_allocObject(v12, 64, 7);
  v14 = sub_100136C8C((uint64_t)&v157, v7);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = *v16;
  v150 = v13;
  v13[5] = v7;
  v13[6] = &off_1002178B0;
  v13[2] = v18;
  v13[7] = _swiftEmptyArrayStorage;
  v140 = v13 + 7;
  swift_retain(v11, v19);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v157);
  v20 = *(void **)(v1 + 56);
  v21 = type metadata accessor for ObservabilitySignalDatabase();
  v22 = swift_allocObject(v21, 24, 7);
  sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
  v23 = v20;
  v24 = OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
  v25 = type metadata accessor for DatabaseManager(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  *(_QWORD *)(v22 + 16) = DatabaseManager.init(database:log:)(v23, v24);
  *((_QWORD *)&v158 + 1) = v21;
  *(_QWORD *)&v159 = &off_100217258;
  *(_QWORD *)&v157 = v22;
  v26 = type metadata accessor for ObservabilityCachingSignalStore();
  v27 = swift_allocObject(v26, 64, 7);
  v147 = v27;
  *(_QWORD *)(v27 + 56) = 0;
  sub_100136930(&v157, v27 + 16);
  v28 = type metadata accessor for ObservabilityStateStoreDatabase();
  v29 = swift_allocObject(v28, 24, 7);
  v139 = v29;
  v30 = v23;
  v142 = v22;
  swift_retain(v22, v31);
  v32 = OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  *(_QWORD *)(v29 + 16) = DatabaseManager.init(database:log:)(v30, v32);
  v33 = objc_msgSend(objc_allocWithZone((Class)APSystemClock), "init");
  v34 = (objc_class *)type metadata accessor for PropertyListFileManagerFileSystem(0);
  v35 = objc_msgSend(objc_allocWithZone(v34), "init");
  *((_QWORD *)&v158 + 1) = v34;
  *(_QWORD *)&v159 = &off_1002167E8;
  *(_QWORD *)&v157 = v35;
  v36 = type metadata accessor for NormalizedScaleFactorPropertyListStore();
  v37 = (_QWORD *)swift_allocObject(v36, 56, 7);
  v38 = sub_100136C8C((uint64_t)&v157, (uint64_t)v34);
  __chkstk_darwin(v38);
  v40 = (uint64_t *)((char *)&v129 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v41 + 16))(v40);
  v42 = *v40;
  v37[5] = v34;
  v37[6] = &off_1002167E8;
  v37[2] = v42;
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v157);
  *((_QWORD *)&v158 + 1) = v36;
  *(_QWORD *)&v159 = &off_100217D28;
  *(_QWORD *)&v157 = v37;
  v43 = type metadata accessor for LoggingNormalizedScaleFactorStore();
  v44 = swift_allocObject(v43, 56, 7);
  sub_100136930(&v157, v44 + 16);
  v45 = type metadata accessor for RandomTimeRangeOffset();
  v46 = swift_allocObject(v45, 16, 7);
  *((_QWORD *)&v158 + 1) = v43;
  *(_QWORD *)&v159 = &off_100216D00;
  *(_QWORD *)&v157 = v44;
  v153 = v45;
  v154 = &off_100217748;
  *(_QWORD *)&v152 = v46;
  v47 = type metadata accessor for PersistentTimeRangeOffset();
  v48 = swift_allocObject(v47, 96, 7);
  sub_100136930(&v157, v48 + 16);
  sub_100136930(&v152, v48 + 56);
  *((_QWORD *)&v158 + 1) = v47;
  *(_QWORD *)&v159 = &off_100216918;
  *(_QWORD *)&v157 = v48;
  v49 = type metadata accessor for LoggingTimeRangeOffset();
  v50 = swift_allocObject(v49, 56, 7);
  sub_100136930(&v157, v50 + 16);
  *((_QWORD *)&v158 + 1) = v49;
  *(_QWORD *)&v159 = &off_100216448;
  *(_QWORD *)&v157 = v50;
  v51 = type metadata accessor for CachingTimeRangeOffset();
  v138 = v51;
  v52 = swift_allocObject(v51, 61, 7);
  *(_DWORD *)(v52 + 56) = 0;
  *(_BYTE *)(v52 + 60) = 1;
  v53 = v52;
  sub_100136930(&v157, v52 + 16);
  *((_QWORD *)&v158 + 1) = v51;
  *(_QWORD *)&v159 = &off_100216930;
  *(_QWORD *)&v157 = v53;
  v146 = v53;
  v54 = type metadata accessor for OffsetTimeRangeReferenceFrame();
  v145 = swift_allocObject(v54, 56, 7);
  sub_100136930(&v157, v145 + 16);
  v141 = v48;
  swift_retain(v48, v55);
  swift_retain(v53, v56);
  v57 = sub_1001461B8();
  v136 = v58;
  v137 = v57;
  v134 = v60;
  v135 = v59;
  v61 = type metadata accessor for ObservabilityErrorBucketConfigSystemJSONSource();
  v62 = swift_allocObject(v61, 17, 7);
  *(_BYTE *)(v62 + 16) = 0;
  *((_QWORD *)&v158 + 1) = v61;
  v63 = sub_1000A3560(&qword_100266390, (uint64_t (*)(uint64_t))type metadata accessor for ObservabilityErrorBucketConfigSystemJSONSource, (uint64_t)&unk_1001B9C60);
  *(_QWORD *)&v159 = v63;
  *(_QWORD *)&v157 = v62;
  v64 = type metadata accessor for DefaultObservabilityClientErrorBucketConfigurationStore();
  v65 = swift_allocObject(v64, 16, 7);
  v153 = v64;
  v130 = sub_1000A3560(&qword_100266398, (uint64_t (*)(uint64_t))type metadata accessor for DefaultObservabilityClientErrorBucketConfigurationStore, (uint64_t)&unk_1001B8FE8);
  v154 = (_UNKNOWN **)v130;
  *(_QWORD *)&v152 = v65;
  v66 = type metadata accessor for JSONIntBucketConfigurationStore(0);
  swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  v133 = v33;
  v67 = JSONIntBucketConfigurationStore.init(jsonSource:fallback:)(&v157, &v152);
  *((_QWORD *)&v158 + 1) = v66;
  *(_QWORD *)&v159 = &protocol witness table for JSONIntBucketConfigurationStore;
  *(_QWORD *)&v157 = v67;
  v68 = type metadata accessor for ConfigurableIntBucketStrategy(0);
  swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
  v132 = ConfigurableIntBucketStrategy.init(configurationStore:)(&v157);
  v69 = swift_allocObject(v61, 17, 7);
  *(_BYTE *)(v69 + 16) = 1;
  *((_QWORD *)&v158 + 1) = v61;
  *(_QWORD *)&v159 = v63;
  *(_QWORD *)&v157 = v69;
  v70 = type metadata accessor for DefaultObservabilityServerErrorBucketConfigurationStore();
  v71 = swift_allocObject(v70, 16, 7);
  v153 = v70;
  v72 = sub_1000A3560(&qword_1002663A0, (uint64_t (*)(uint64_t))type metadata accessor for DefaultObservabilityServerErrorBucketConfigurationStore, (uint64_t)&unk_1001B8748);
  v154 = (_UNKNOWN **)v72;
  *(_QWORD *)&v152 = v71;
  swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  v73 = JSONIntBucketConfigurationStore.init(jsonSource:fallback:)(&v157, &v152);
  *((_QWORD *)&v158 + 1) = v66;
  *(_QWORD *)&v159 = &protocol witness table for JSONIntBucketConfigurationStore;
  *(_QWORD *)&v157 = v73;
  swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
  v131 = ConfigurableIntBucketStrategy.init(configurationStore:)(&v157);
  v74 = swift_allocObject(v61, 17, 7);
  *(_BYTE *)(v74 + 16) = 2;
  *((_QWORD *)&v158 + 1) = v61;
  *(_QWORD *)&v159 = v63;
  *(_QWORD *)&v157 = v74;
  v75 = swift_allocObject(v64, 16, 7);
  v153 = v64;
  v154 = (_UNKNOWN **)v130;
  *(_QWORD *)&v152 = v75;
  swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  v76 = JSONIntBucketConfigurationStore.init(jsonSource:fallback:)(&v157, &v152);
  *((_QWORD *)&v158 + 1) = v66;
  *(_QWORD *)&v159 = &protocol witness table for JSONIntBucketConfigurationStore;
  *(_QWORD *)&v157 = v76;
  swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
  v77 = ConfigurableIntBucketStrategy.init(configurationStore:)(&v157);
  v78 = swift_allocObject(v61, 17, 7);
  *(_BYTE *)(v78 + 16) = 3;
  *((_QWORD *)&v158 + 1) = v61;
  *(_QWORD *)&v159 = v63;
  *(_QWORD *)&v157 = v78;
  v79 = swift_allocObject(v70, 16, 7);
  v153 = v70;
  v154 = (_UNKNOWN **)v72;
  *(_QWORD *)&v152 = v79;
  swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  v80 = JSONIntBucketConfigurationStore.init(jsonSource:fallback:)(&v157, &v152);
  *((_QWORD *)&v158 + 1) = v66;
  *(_QWORD *)&v159 = &protocol witness table for JSONIntBucketConfigurationStore;
  *(_QWORD *)&v157 = v80;
  swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
  v81 = ConfigurableIntBucketStrategy.init(configurationStore:)(&v157);
  v82 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ECPrimitiveCreator()), "init");
  v83 = type metadata accessor for ECPrimitiveEventSink();
  v84 = swift_allocObject(v83, 24, 7);
  *(_QWORD *)(v84 + 16) = v82;
  v85 = v145;
  swift_retain(v145, v86);
  v87 = v147;
  swift_retain(v147, v88);
  v90 = swift_retain(v139, v89);
  v128 = v81;
  v91 = v133;
  v92 = sub_100146580(v135, v134, (uint64_t)v133, v132, v131, v137, v136, v77, v128, v84, v85, v87, v90);

  v93 = v91;
  swift_retain(v85, v94);
  swift_retain(v87, v95);
  swift_retain(v92, v96);
  v97 = sub_100145AA4((uint64_t)v93, v87, v85, (uint64_t)v92);
  v98 = sub_100008A18(&qword_1002663A8);
  v99 = swift_allocObject(v98, 72, 7);
  *(_OWORD *)(v99 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v99 + 56) = type metadata accessor for ObservabilityWorkSource();
  *(_QWORD *)(v99 + 64) = &off_100216830;
  *(_QWORD *)(v99 + 32) = v97;
  swift_beginAccess(v140, &v157, 33, 0);
  swift_retain(v97, v100);
  v101 = swift_bridgeObjectRetain(v99);
  sub_10014A508(v101);
  swift_endAccess(&v157);
  swift_setDeallocating(v99);
  v102 = *(_QWORD *)(v99 + 16);
  v103 = sub_100008A18(&qword_1002663B0);
  swift_arrayDestroy(v99 + 32, v102, v103);
  swift_deallocClassInstance(v99, 32, 7);
  v104 = (uint64_t)v150;
  v105 = v149 + 2;
  v149[3] = &off_1002173B8;
  swift_unknownObjectWeakAssign(v105, v104);
  v106 = v93;
  v107 = v90;
  v108 = v106;
  swift_retain(v87, v109);
  swift_retain(v90, v110);
  swift_retain(v104, v111);
  v112 = sub_100145C34((uint64_t)v108, v104, v87, v90);
  v153 = v138;
  v154 = &off_100216930;
  v113 = v146;
  *(_QWORD *)&v152 = v146;
  v156[4] = &off_100217B40;
  v156[3] = v144;
  v114 = v151;
  v155[4] = &off_1002172A8;
  v156[0] = v151;
  v155[3] = v143;
  v115 = v148;
  v155[0] = v148;
  v116 = (void *)objc_opt_self(APSystemInternal);
  swift_retain(v114, v117);
  swift_retain(v115, v118);
  swift_retain(v113, v119);
  if (objc_msgSend(v116, "isAppleInternalInstall"))
  {
    sub_10000D4D8((uint64_t)&v152, (uint64_t)&v157);
    sub_10000D4D8((uint64_t)v156, (uint64_t)&v160[1]);
    sub_10000D4D8((uint64_t)v155, (uint64_t)v161);
    *((_QWORD *)&v159 + 1) = v107;
    v160[0] = v142;
    v120 = v142;
    swift_retain(v142, v121);
    v122 = v107;
    swift_retain(v107, v123);
  }
  else
  {
    v122 = v107;
    v120 = v142;
    v162 = 0;
    memset(v161, 0, sizeof(v161));
    v159 = 0u;
    memset(v160, 0, sizeof(v160));
    v157 = 0u;
    v158 = 0u;
  }
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v155);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v156);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v152);
  sub_100146790((uint64_t)&v157, (uint64_t)&v152);
  v124 = type metadata accessor for ObservabilityManager();
  v125 = swift_allocObject(v124, 160, 7);
  *(_OWORD *)(v125 + 40) = 0u;
  *(_OWORD *)(v125 + 56) = 0u;
  *(_OWORD *)(v125 + 72) = 0u;
  *(_OWORD *)(v125 + 88) = 0u;
  *(_OWORD *)(v125 + 104) = 0u;
  *(_OWORD *)(v125 + 120) = 0u;
  *(_OWORD *)(v125 + 136) = 0u;
  *(_QWORD *)(v125 + 152) = 0;
  *(_OWORD *)(v125 + 24) = 0u;
  *(_QWORD *)(v125 + 16) = v112;
  swift_beginAccess(v125 + 24, v156, 33, 0);
  swift_retain(v112, v126);
  sub_1001467D8((uint64_t)&v152, v125 + 24);
  swift_endAccess(v156);
  objc_msgSend((id)objc_opt_self(MetricsModuleInternal), "setSignalMonitor:", v112);
  if (objc_msgSend(v116, "isAppleInternalInstall"))
  {
    sub_100146790((uint64_t)&v157, (uint64_t)&v152);
    if (v153)
    {
      sub_1001327D8();
      sub_100146860(&v152);
    }
    else
    {
      sub_100146820((uint64_t)&v152);
    }
    sub_100143C5C();
    swift_release(v151);
    swift_release(v148);
    swift_release(v149);
    swift_release(v120);
    swift_release(v141);
    swift_release(v146);

    swift_release(v145);
    swift_release(v147);
    swift_release(v122);
    swift_release(v92);
    swift_release(v97);
    swift_release(v150);
    swift_release(v112);
    sub_100146820((uint64_t)&v157);
  }
  else
  {
    sub_100146820((uint64_t)&v157);
    swift_release(v150);
    swift_release(v149);
    swift_release(v122);
    swift_release(v120);
    swift_release(v112);
    swift_release(v97);
    swift_release(v92);
    swift_release(v147);
    swift_release(v145);

    swift_release(v146);
    swift_release(v141);
    swift_release(v148);
    swift_release(v151);
  }
  return v125;
}

uint64_t sub_100145A58()
{
  uint64_t v0;

  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ObservabilityManagerBuilder()
{
  return objc_opt_self(_TtC7Metrics27ObservabilityManagerBuilder);
}

_QWORD *sub_100145AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  _QWORD v27[5];
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;

  v29 = type metadata accessor for ObservabilityCachingSignalStore();
  v30 = &off_100216990;
  *(_QWORD *)&v28 = a2;
  v8 = type metadata accessor for OffsetTimeRangeReferenceFrame();
  v27[3] = v8;
  v27[4] = &off_100217290;
  v27[0] = a3;
  v9 = type metadata accessor for ObservabilityProductionWorkerFactory();
  v25 = v9;
  v26 = &off_1002182A0;
  v24[0] = a4;
  v10 = type metadata accessor for ObservabilityWorkSource();
  v11 = (_QWORD *)swift_allocObject(v10, 144, 7);
  v12 = sub_100136C8C((uint64_t)v27, v8);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)&v24[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_100136C8C((uint64_t)v24, v25);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)&v24[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = *v14;
  v21 = *v18;
  v11[11] = v8;
  v11[12] = &off_100217290;
  v11[8] = v20;
  v11[16] = v9;
  v11[17] = &off_1002182A0;
  v11[13] = v21;
  v11[2] = a1;
  sub_100136930(&v28, (uint64_t)(v11 + 3));
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v24);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v27);
  return v11;
}

_QWORD *sub_100145C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  __int128 v27;
  uint64_t v28;
  _UNKNOWN **v29;
  _QWORD v30[5];

  v8 = type metadata accessor for QueryingPeriodicScheduler();
  v30[3] = v8;
  v30[4] = &off_1002173C8;
  v30[0] = a2;
  v28 = type metadata accessor for ObservabilityCachingSignalStore();
  v29 = &off_100216990;
  *(_QWORD *)&v27 = a3;
  v9 = type metadata accessor for ObservabilityStateStoreDatabase();
  v25 = v9;
  v26 = &off_1002176D0;
  v24[0] = a4;
  v10 = type metadata accessor for ObservabilitySignalMonitor();
  v11 = (_QWORD *)swift_allocObject(v10, 144, 7);
  v12 = sub_100136C8C((uint64_t)v30, v8);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)&v24[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_100136C8C((uint64_t)v24, v25);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)&v24[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = *v14;
  v21 = *v18;
  v11[6] = v8;
  v11[7] = &off_1002173C8;
  v11[16] = v9;
  v11[17] = &off_1002176D0;
  v11[13] = v21;
  v11[2] = a1;
  v11[3] = v20;
  sub_100136930(&v27, (uint64_t)(v11 + 8));
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v24);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v30);
  return v11;
}

_QWORD *sub_100145DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD v36[5];
  _QWORD v37[5];

  v33 = a2;
  v34 = a1;
  v32 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[3] = type metadata accessor for ObservabilityXPCTimer(0);
  v37[4] = &off_100217B40;
  v37[0] = a3;
  v36[3] = type metadata accessor for ObservabilityRegularTimer(0);
  v36[4] = &off_1002172A8;
  v36[0] = a4;
  a5[3] = 0;
  swift_unknownObjectWeakInit(a5 + 2, 0);
  sub_10003E180(0, (unint64_t *)&unk_100266890, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter();
  v35[0] = _swiftEmptyArrayStorage;
  v17 = sub_1000A3560(&qword_1002663D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_100008A18((uint64_t *)&unk_1002668A0);
  v19 = sub_100146894();
  dispatch thunk of SetAlgebra.init<A>(_:)(v35, v18, v19, v11, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v32);
  a5[14] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x726F772D7931316FLL, 0xEB0000000072656BLL, v16, v13, v10, 0);
  v20 = v34;
  a5[3] = v33;
  swift_unknownObjectWeakAssign(a5 + 2, v20);
  sub_10000D4D8((uint64_t)v37, (uint64_t)(a5 + 4));
  sub_10000D4D8((uint64_t)v36, (uint64_t)(a5 + 9));
  swift_beginAccess(a5 + 4, v35, 33, 0);
  v21 = a5[7];
  v22 = a5[8];
  sub_100136C8C((uint64_t)(a5 + 4), v21);
  v23 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v22 + 16);
  v25 = swift_retain(a5, v24);
  v23(v25, &off_1002178A0, v21, v22);
  swift_endAccess(v35);
  swift_beginAccess(a5 + 9, v35, 33, 0);
  v26 = a5[12];
  v27 = a5[13];
  sub_100136C8C((uint64_t)(a5 + 9), v26);
  v28 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v27 + 16);
  v30 = swift_retain(a5, v29);
  v28(v30, &off_1002178A0, v26, v27);
  swift_endAccess(v35);
  sub_100154350();
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v36);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v37);
  return a5;
}

uint64_t sub_1001460BC(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[32];

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v4 = sub_10002DDCC(0x6E6F6973726576, 0xE700000000000000);
  if ((v5 & 1) == 0)
    return 0;
  sub_1000A3E74(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v12);
  if ((swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
    return 0;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v6 = v11;
  v7 = sub_10002DDCC(0x7374656B637562, 0xE700000000000000);
  if ((v8 & 1) == 0)
    return 0;
  sub_1000A3E74(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)v12);
  v9 = sub_100008A18(a2);
  if ((swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    return 0;
  return v6;
}

uint64_t sub_1001461B8()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;

  v0 = (void *)objc_opt_self(APConfigurationMediator);
  sub_10003E180(0, (unint64_t *)&qword_100262C20, APECObservabilityConfig_ptr);
  v1 = objc_msgSend(v0, "configurationForClass:", swift_getObjCClassFromMetadata());
  v2 = objc_opt_self(APECObservabilityConfig);
  v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
    goto LABEL_7;
  v4 = v3;
  v5 = objc_msgSend(v3, "createdToBufferedTimeHistogram");
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = sub_1000A3A1C(v6);
  swift_bridgeObjectRelease(v6);
  if (!v7 || (v8 = sub_1001460BC(v7, &qword_1002663C8), v10 = v9, swift_bridgeObjectRelease(v7), !v10))
  {
LABEL_7:
    swift_unknownObjectRelease(v1);
LABEL_8:
    v16 = String._bridgeToObjectiveC()();
    APSimulateCrash(5, v16, 0);

    return 0;
  }
  v11 = objc_msgSend(v4, "bufferedTimeHistogram");
  v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = sub_1000A3A1C(v12);
  swift_bridgeObjectRelease(v12);
  if (!v13)
  {
    swift_unknownObjectRelease(v1);
LABEL_11:
    swift_bridgeObjectRelease(v10);
    goto LABEL_8;
  }
  sub_1001460BC(v13, &qword_1002663C0);
  v15 = v14;
  swift_bridgeObjectRelease(v13);
  swift_unknownObjectRelease(v1);
  if (!v15)
    goto LABEL_11;
  return v8;
}

_QWORD *sub_1001463C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  _QWORD v23[5];
  _QWORD v24[5];
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[5];
  _QWORD v28[5];
  _QWORD v29[5];
  _QWORD v30[3];
  uint64_t v31;
  void *v32;

  v31 = type metadata accessor for ConfigurableIntBucketStrategy(0);
  v32 = &protocol witness table for ConfigurableIntBucketStrategy;
  v29[4] = &protocol witness table for ConfigurableIntBucketStrategy;
  v30[0] = a4;
  v29[3] = v31;
  v28[4] = &protocol witness table for ConfigurableIntBucketStrategy;
  v29[0] = a5;
  v28[3] = v31;
  v28[0] = a8;
  v27[3] = v31;
  v27[4] = &protocol witness table for ConfigurableIntBucketStrategy;
  v27[0] = a9;
  v26[3] = type metadata accessor for ObservabilityCachingSignalStore();
  v26[4] = &off_100216990;
  v26[0] = a12;
  v25[3] = type metadata accessor for ECPrimitiveEventSink();
  v25[4] = &off_100217B08;
  v25[0] = a10;
  v24[3] = type metadata accessor for OffsetTimeRangeReferenceFrame();
  v24[4] = &off_100217290;
  v24[0] = a11;
  v23[3] = type metadata accessor for ObservabilityStateStoreDatabase();
  v23[4] = &off_1002176D0;
  v23[0] = a13;
  a14[2] = a1;
  a14[3] = a2;
  a14[4] = a3;
  sub_10000D4D8((uint64_t)v30, (uint64_t)(a14 + 5));
  sub_10000D4D8((uint64_t)v29, (uint64_t)(a14 + 10));
  a14[15] = a6;
  a14[16] = a7;
  sub_10000D4D8((uint64_t)v28, (uint64_t)(a14 + 17));
  sub_10000D4D8((uint64_t)v27, (uint64_t)(a14 + 22));
  sub_10000D4D8((uint64_t)v25, (uint64_t)(a14 + 27));
  sub_10000D4D8((uint64_t)v24, (uint64_t)(a14 + 32));
  sub_10000D4D8((uint64_t)v26, (uint64_t)(a14 + 37));
  sub_10000D4D8((uint64_t)v23, (uint64_t)(a14 + 42));
  swift_unknownObjectRetain(a3);
  sub_10015EB84();
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v23);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v26);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v24);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v25);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v27);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v28);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v29);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v30);
  return a14;
}

_QWORD *sub_100146580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  _UNKNOWN **v40;
  _QWORD v41[3];
  uint64_t v42;
  _UNKNOWN **v43;
  _QWORD v44[3];
  uint64_t v45;
  _UNKNOWN **v46;

  v36 = a7;
  v37 = a8;
  v34 = a5;
  v35 = a6;
  v33 = a4;
  v45 = type metadata accessor for ECPrimitiveEventSink();
  v46 = &off_100217B08;
  v44[0] = a10;
  v42 = type metadata accessor for OffsetTimeRangeReferenceFrame();
  v43 = &off_100217290;
  v41[0] = a11;
  v39 = type metadata accessor for ObservabilityStateStoreDatabase();
  v40 = &off_1002176D0;
  v38[0] = a13;
  v16 = type metadata accessor for ObservabilityProductionWorkerFactory();
  v17 = (_QWORD *)swift_allocObject(v16, 376, 7);
  v18 = sub_100136C8C((uint64_t)v44, v45);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_100136C8C((uint64_t)v41, v42);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = sub_100136C8C((uint64_t)v38, v39);
  __chkstk_darwin(v26);
  v28 = (uint64_t *)((char *)&v32 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  v30 = sub_1001463C4(a1, a2, a3, v33, v34, v35, v36, v37, a9, *v20, *v24, a12, *v28, v17);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v38);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v41);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v44);
  return v30;
}

uint64_t sub_100146790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_1002663B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001467D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_1002663B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100146820(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008A18(&qword_1002663B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100146860(_QWORD *a1)
{
  destroy for ObservabilityStateDumper(a1);
  return a1;
}

unint64_t sub_100146894()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002663D8;
  if (!qword_1002663D8)
  {
    v1 = sub_1000A5AB4((uint64_t *)&unk_1002668A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002663D8);
  }
  return result;
}

uint64_t sub_1001468E0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v6 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10000D51C(a1);
    v13 = sub_1000092C0(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      v17 = *v3;
      v24 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1001416E4();
        v17 = v24;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, v9);
      sub_10015110C(v15, v17);
      v18 = *v3;
      *v3 = v17;
      swift_bridgeObjectRelease(v18);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v19, 1, v9);
    return sub_10000D51C((uint64_t)v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    v20 = swift_isUniquelyReferenced_nonNull_native(*v3);
    v24 = *v3;
    *v3 = 0x8000000000000000;
    sub_100147CB0((uint64_t)v12, a2, v20);
    v21 = *v3;
    *v3 = v24;
    return swift_bridgeObjectRelease(v21);
  }
}

uint64_t sub_100146AA8@<X0>(unsigned __int8 a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_100008A18((uint64_t *)&unk_100264760);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v5 + 56) = &type metadata for Int;
  *(_QWORD *)(v5 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v5 + 32) = a1;
  v6 = type metadata accessor for Date(0);
  dispatch thunk of DatabaseManager.singleValueFromQuery<A>(_:parameters:transform:)(a2, 0xD00000000000004CLL, 0x80000001001F51F0, v5, sub_100146BB4, 0, v6);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100146BB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  char v6;
  uint64_t v7;
  uint64_t v9;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000B748(a1, v3);
  v5 = COERCE_DOUBLE(dispatch thunk of DatabaseCursor.read(_:)(0, v3, v4));
  if ((v6 & 1) != 0 || v5 <= 0.0)
  {
    v9 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  }
  else
  {
    Date.init(timeIntervalSince1970:)(*(_QWORD *)&v5, v5);
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 0, 1, v7);
  }
}

uint64_t sub_100146C64()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1001419D4((uint64_t)_swiftEmptyArrayStorage);
  v3 = v0;
  v1 = sub_100008A18(&qword_1002664C8);
  dispatch thunk of DatabaseManager.reduceFromQuery<A>(_:parameters:into:_:)(&v4, 0xD000000000000059, 0x80000001001F5160, 0, &v3, sub_100146D1C, 0, v1);
  swift_bridgeObjectRelease(v0);
  return v4;
}

uint64_t sub_100146D1C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v4 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[3];
  v12 = a2[4];
  sub_10000B748(a2, v11);
  result = dispatch thunk of DatabaseCursor.read(_:)(0, v11, v12);
  if (!v2)
  {
    v21 = v6;
    v22 = v8;
    Date.init(timeIntervalSince1970:)(result, v14);
    v15 = a2[3];
    v16 = a2[4];
    sub_10000B748(a2, v15);
    v17 = dispatch thunk of DatabaseCursor.read(_:)(1, v15, v16);
    v18 = sub_100159D20(v17);
    v20 = (uint64_t)v21;
    v19 = v22;
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v21, v10, v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v20, 0, 1, v7);
    sub_1001468E0(v20, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v10, v7);
  }
  return result;
}

uint64_t sub_100146F4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t inited;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  double v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[120];

  v32 = a2;
  v31 = (_QWORD *)a3;
  v34 = type metadata accessor for DateComponents(0);
  v33 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008A18(&qword_1002664A8);
  inited = swift_initStackObject(v17, v42);
  *(_OWORD *)(inited + 16) = xmmword_1001B7630;
  v19 = Date.timeIntervalSince1970.getter(inited);
  *(_QWORD *)(inited + 56) = &type metadata for Double;
  *(_QWORD *)(inited + 64) = &protocol witness table for Double;
  *(double *)(inited + 32) = v19;
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v20 = sub_10000ABD8(v6, (uint64_t)qword_10026D1E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v20, v6);
  v21 = type metadata accessor for TimeRange(0);
  sub_1000093B8(*(_BYTE *)(a1 + *(int *)(v21 + 20)));
  Calendar.date(byAdding:to:wrappingComponents:)(v5, a1, 0);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v34);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    v24 = Date.timeIntervalSince1970.getter(v23);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    *(_QWORD *)(inited + 96) = &type metadata for Double;
    *(_QWORD *)(inited + 104) = &protocol witness table for Double;
    *(double *)(inited + 72) = v24;
    v25 = v32;
    *(_QWORD *)(inited + 136) = &type metadata for Int;
    *(_QWORD *)(inited + 144) = &protocol witness table for Int;
    *(_QWORD *)(inited + 112) = v25;
    v26 = sub_100147380(inited);
    swift_bridgeObjectRelease(inited);
    v27 = type metadata accessor for ObservabilitySignal(0);
    dispatch thunk of DatabaseManager.multipleValuesFromQuery<A>(_:parameters:transform:)(&v38, 0xD000000000000058, 0x80000001001F5100, v26, sub_100147720, 0, v27);
    swift_bridgeObjectRelease(v26);
    if (v40)
    {
      sub_10000D4D8((uint64_t)&v38, (uint64_t)&v35);
    }
    else
    {
      v35 = v38;
      v36 = v39;
      v37 = v41;
    }
    if (*((_QWORD *)&v36 + 1))
    {
      if (v40)
        _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v38);
      return sub_100136930(&v35, (uint64_t)v31);
    }
    else
    {
      v28 = sub_100008A18(&qword_1002664B8);
      v29 = v31;
      v31[3] = v28;
      result = sub_100147C30();
      v29[4] = result;
      *v29 = _swiftEmptyArrayStorage;
      if (v40)
      {
        result = _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v38);
        if (*((_QWORD *)&v36 + 1))
          return _s7Metrics31ObservabilitySignalDeserializerVwxx_0(&v35);
      }
    }
  }
  return result;
}

_QWORD *sub_100147380(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v10[40];
  _BYTE v11[40];
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v12 = _swiftEmptyArrayStorage;
    sub_10011FDDC(0, v1, 0);
    v4 = a1 + 32;
    v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_10000D4D8(v4, (uint64_t)v10);
      v5 = sub_100008A18(&qword_1002664B0);
      v6 = sub_100008A18((uint64_t *)&unk_100267DD0);
      swift_dynamicCast(v11, v10, v5, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10011FDDC(0, v2[2] + 1, 1);
        v2 = v12;
      }
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_10011FDDC((_QWORD *)(v7 > 1), v8 + 1, 1);
        v2 = v12;
      }
      v2[2] = v8 + 1;
      sub_100008040((uint64_t)v11, (uint64_t)&v2[5 * v8 + 4]);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1001474B8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11[2];
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v12 = _swiftEmptyArrayStorage;
    sub_10015FDE8(0, v1, 0);
    v4 = (__int128 *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v10 = *v4;
      v5 = sub_100008A18(&qword_1002664D0);
      v6 = sub_100008A18(&qword_100267E00);
      swift_dynamicCast(v11, &v10, v5, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10015FDE8(0, v2[2] + 1, 1);
        v2 = v12;
      }
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_10015FDE8(v7 > 1, v8 + 1, 1);
        v2 = v12;
      }
      v2[2] = v8 + 1;
      sub_100136930(v11, (uint64_t)&v2[5 * v8 + 4]);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1001475EC(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11[2];
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v12 = _swiftEmptyArrayStorage;
    sub_10015FE5C(0, v1, 0);
    v4 = (__int128 *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v10 = *v4;
      v5 = sub_100008A18(&qword_1002664D8);
      v6 = sub_100008A18(&qword_1002664E0);
      swift_dynamicCast(v11, &v10, v5, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10015FE5C(0, v2[2] + 1, 1);
        v2 = v12;
      }
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_10015FE5C(v7 > 1, v8 + 1, 1);
        v2 = v12;
      }
      v2[2] = v8 + 1;
      sub_100136930(v11, (uint64_t)&v2[5 * v8 + 4]);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_100147720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[5];

  sub_10000D4D8(a1, (uint64_t)v6);
  sub_10014C4A8(a2);
  result = sub_100147C7C(v6);
  if (!v2)
  {
    v5 = type metadata accessor for ObservabilitySignal(0);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 1, v5);
  }
  return result;
}

void sub_1001477A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[160];

  v31 = a2;
  v34 = type metadata accessor for DateComponents(0);
  v33 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008A18(&qword_1002664A8);
  inited = swift_initStackObject(v15, v35);
  *(_OWORD *)(inited + 16) = xmmword_1001B7630;
  *(double *)(inited + 32) = Date.timeIntervalSince1970.getter(inited);
  v30 = inited + 32;
  *(_QWORD *)(inited + 56) = &type metadata for Double;
  *(_QWORD *)(inited + 64) = &protocol witness table for Double;
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v17 = sub_10000ABD8(v5, (uint64_t)qword_10026D1E0);
  v18 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v7, v17, v5);
  v19 = type metadata accessor for TimeRange(0);
  sub_1000093B8(*(_BYTE *)(a1 + *(int *)(v19 + 20)));
  Calendar.date(byAdding:to:wrappingComponents:)(v4, a1, 0);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    __break(1u);
  }
  else
  {
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v21 = Date.timeIntervalSince1970.getter(v20);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(_QWORD *)(inited + 96) = &type metadata for Double;
    *(_QWORD *)(inited + 104) = &protocol witness table for Double;
    *(double *)(inited + 72) = v21;
    v22 = v31;
    *(_QWORD *)(inited + 136) = &type metadata for Int;
    *(_QWORD *)(inited + 144) = &protocol witness table for Int;
    *(_QWORD *)(inited + 112) = v22;
    v23 = sub_100147380(inited);
    swift_setDeallocating(inited);
    v24 = *(_QWORD *)(inited + 16);
    v25 = sub_100008A18(&qword_1002664B0);
    swift_arrayDestroy(v30, v24, v25);
    v26 = dispatch thunk of DatabaseManager.executeQuery(_:withParameters:)(0xD000000000000056, 0x80000001001F50A0, v23);
    v27 = swift_bridgeObjectRelease(v23);
    if ((v26 & 1) == 0)
    {
      v28 = static os_log_type_t.error.getter(v27);
      sub_1000ABCEC();
      v29 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x7363697274654DLL, 0xE700000000000000);
      os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Failed to save observability signal.", 36, 2, _swiftEmptyArrayStorage);

    }
  }
}

uint64_t sub_100147B6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ObservabilitySignalDatabase()
{
  return objc_opt_self(_TtC7Metrics27ObservabilitySignalDatabase);
}

uint64_t sub_100147BB0@<X0>(unsigned __int8 a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_100146AA8(a1, a2);
}

uint64_t sub_100147BD0()
{
  return sub_100146C64();
}

uint64_t sub_100147BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100146F4C(a1, a2, a3);
}

void sub_100147C10(uint64_t a1, uint64_t a2)
{
  sub_1001477A0(a1, a2);
}

unint64_t sub_100147C30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002664C0;
  if (!qword_1002664C0)
  {
    v1 = sub_1000A5AB4(&qword_1002664B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002664C0);
  }
  return result;
}

_QWORD *sub_100147C7C(_QWORD *a1)
{
  destroy for ObservabilitySignalDeserializer(a1);
  return a1;
}

uint64_t sub_100147CB0(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1000092C0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for Date(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, a1, v18);
      }
      return sub_10015AC18(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001416E4();
      goto LABEL_7;
    }
    sub_100140EB8(v13, a3 & 1);
    v20 = sub_1000092C0(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_10015AC18(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObservabilityReportType);
  __break(1u);
  return result;
}

uint64_t sub_100147DD4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for GroupConfigurator()
{
  return objc_opt_self(_TtC7Metrics17GroupConfigurator);
}

uint64_t type metadata accessor for OffsetTimeRangeReferenceFrame()
{
  return objc_opt_self(_TtC7Metrics29OffsetTimeRangeReferenceFrame);
}

uint64_t (*sub_100147E38(uint64_t a1, unint64_t a2, uint64_t a3))(_QWORD)
{
  uint64_t (*result)(_QWORD);

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    type metadata accessor for TimeRange(0);
    return nullsub_1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100147E9C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008A18(&qword_100266660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100147EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  __int128 v14;
  void *v15;
  _BYTE v16[24];

  swift_beginAccess(v0 + 56, v16, 0, 0);
  v1 = *(_QWORD *)(v0 + 56);
  v15 = &_swiftEmptySetSingleton;
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n(v1, 2);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v6)
      goto LABEL_25;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_25;
      v12 = *(_QWORD *)(v2 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_25;
        v12 = *(_QWORD *)(v2 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_25;
          v12 = *(_QWORD *)(v2 + 8 * v8);
          if (!v12)
          {
            v8 = v11 + 4;
            if (v11 + 4 >= v6)
              goto LABEL_25;
            v12 = *(_QWORD *)(v2 + 8 * v8);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_24:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_5:
    result = sub_10013F42C(&v14, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v10), *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v10));
  }
  v13 = v11 + 5;
  if (v13 >= v6)
  {
LABEL_25:
    swift_release(v1);
    swift_bridgeObjectRelease(v1);
    return (uint64_t)v15;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_25;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100148080(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  _BYTE v24[24];

  v3 = v1[5];
  v4 = v1[6];
  sub_10000B748(v1 + 2, v3);
  v5 = dispatch thunk of IntBucketStrategy.bucketFor(value:)(a1, v3, v4);
  v6 = (_QWORD **)(v1 + 7);
  swift_beginAccess(v1 + 7, v24, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1[7]);
  v8 = *v6;
  v23 = *v6;
  *v6 = (_QWORD *)0x8000000000000000;
  v10 = sub_100138848(v5);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  LOBYTE(v4) = v9;
  if (v8[3] >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_12;
  }
  else
  {
    sub_1001405F4(v13, isUniquelyReferenced_nonNull_native);
    v8 = v23;
    v14 = sub_100138848(v5);
    if ((v4 & 1) != (v15 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      __break(1u);
      return result;
    }
    v10 = v14;
  }
  while (1)
  {
    v16 = *v6;
    *v6 = v8;
    swift_bridgeObjectRelease(v16);
    v17 = *v6;
    if ((v4 & 1) == 0)
      sub_10015ABD0(v10, v5, 0, *v6);
    v18 = v17[7];
    v19 = *(_QWORD *)(v18 + 8 * v10);
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
      break;
LABEL_11:
    __break(1u);
LABEL_12:
    sub_1001411F4();
    v8 = v23;
  }
  *(_QWORD *)(v18 + 8 * v10) = v21;
  return swift_endAccess(v24);
}

uint64_t type metadata accessor for ErrorCollector()
{
  return objc_opt_self(_TtC7Metrics14ErrorCollector);
}

id sub_100148204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  Class isa;
  Class v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59[24];

  v56 = a1;
  v2 = type metadata accessor for TimeZone(0);
  v54 = *(_QWORD *)(v2 - 8);
  v55 = v2;
  __chkstk_darwin(v2);
  v53 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v52 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v52 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v52 - v11;
  v13 = sub_100008A18(&qword_100262C10);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v52 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v52 - v20;
  v57 = OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_lock;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_lock), "lock");
  v58 = v1;
  v22 = v1 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_scheduledTime;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_scheduledTime, v59, 0, 0);
  sub_10000CE28(v22, (uint64_t)v21);
  sub_10000CE28((uint64_t)v21, (uint64_t)v19);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v23(v19, 1, v4) == 1)
  {
    sub_10000D51C((uint64_t)v19);
    v24 = sub_10000D51C((uint64_t)v21);
    v25 = v56;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v19, v4);
    v25 = v56;
    v26 = static Date.< infix(_:_:)(v56, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    v24 = sub_10000D51C((uint64_t)v21);
    if ((v26 & 1) == 0)
      return objc_msgSend(*(id *)(v58 + v57), "unlock");
  }
  Date.init()(v24);
  v27 = static Date.> infix(_:_:)(v25, v10);
  v28 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v29 = v28(v10, v4);
  if ((v27 & 1) != 0)
  {
    sub_10000CE28(v22, (uint64_t)v16);
    if (v23(v16, 1, v4) == 1)
    {
      sub_10000D51C((uint64_t)v16);
LABEL_12:
      sub_10014876C(v25);
      return objc_msgSend(*(id *)(v58 + v57), "unlock");
    }
    v43 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v44 = v52;
    v43(v52, v16, v4);
    v46 = *(_QWORD *)(v58 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_dispatchWorkItem);
    if (!v46)
    {
      v28(v44, v4);
      goto LABEL_12;
    }
    swift_retain(*(_QWORD *)(v58 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_dispatchWorkItem), v45);
    v47 = static Date.< infix(_:_:)(v25, v44);
    if ((v47 & 1) != 0)
    {
      v48 = static os_log_type_t.debug.getter(v47);
      sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
      v49 = v25;
      v50 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
      os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v50, "Cancelling regular active timer", 31, 2, _swiftEmptyArrayStorage);

      dispatch thunk of DispatchWorkItem.cancel()();
      sub_10014876C(v49);
      swift_release(v46);
      v28(v44, v4);
    }
    else
    {
      v28(v44, v4);
      swift_release(v46);
    }
  }
  else
  {
    v30 = static os_log_type_t.error.getter(v29);
    sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
    v31 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
    v32 = sub_100008A18((uint64_t *)&unk_1002653F0);
    v33 = swift_allocObject(v32, 72, 7);
    *(_OWORD *)(v33 + 16) = xmmword_1001B76C0;
    v34 = objc_msgSend((id)objc_opt_self(NSISO8601DateFormatter), "apLocalSharedFormatter");
    v35 = v53;
    static TimeZone.current.getter();
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v55);
    objc_msgSend(v34, "setTimeZone:", isa);

    v37 = Date._bridgeToObjectiveC()().super.isa;
    v38 = objc_msgSend(v34, "stringFromDate:", v37);

    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38, v39);
    v42 = v41;

    *(_QWORD *)(v33 + 56) = &type metadata for String;
    *(_QWORD *)(v33 + 64) = sub_1000A5AF8();
    *(_QWORD *)(v33 + 32) = v40;
    *(_QWORD *)(v33 + 40) = v42;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Requested regular timer for %{public}@ in past", 46, 2, v33);

    swift_bridgeObjectRelease(v33);
  }
  return objc_msgSend(*(id *)(v58 + v57), "unlock");
}

uint64_t sub_10014876C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD aBlock[5];
  uint64_t v82;

  v65 = a1;
  v1 = type metadata accessor for DispatchTime(0);
  v78 = *(_QWORD *)(v1 - 8);
  v79 = v1;
  v2 = __chkstk_darwin(v1);
  v77 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v76 = (char *)&v64 - v4;
  v75 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v75);
  v74 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v69 = *(_QWORD *)(v6 - 8);
  v70 = v6;
  v72 = *(_QWORD *)(v69 + 64);
  __chkstk_darwin(v6);
  v71 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008A18(&qword_100262C10);
  v9 = __chkstk_darwin(v8);
  v68 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v64 - v11;
  v67 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v66 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = static os_log_type_t.debug.getter(v19);
  sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
  v23 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
  v24 = sub_100008A18((uint64_t *)&unk_1002653F0);
  v25 = swift_allocObject(v24, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1001B76C0;
  v26 = Date.debugDescription.getter();
  v28 = v27;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 64) = sub_1000A5AF8();
  *(_QWORD *)(v25 + 32) = v26;
  *(_QWORD *)(v25 + 40) = v28;
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Scheduling regular timer for %{public}@", 39, 2, v25);

  swift_bridgeObjectRelease(v25);
  v29 = sub_10003E180(0, (unint64_t *)&unk_100266890, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v29);
  aBlock[0] = _swiftEmptyArrayStorage;
  v30 = sub_1000A3560(&qword_1002663D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v31 = sub_100008A18((uint64_t *)&unk_1002668A0);
  v32 = sub_1001496B0((unint64_t *)&qword_1002663D8, (uint64_t *)&unk_1002668A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v31, v32, v15, v30);
  (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v67);
  v33 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x2D72616C75676572, 0xED000072656D6974, v21, v17, v14, 0);
  v34 = v65;
  v35 = Date.timeIntervalSinceNow.getter();
  v37 = v69;
  v36 = v70;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
  v38(v12, v34, v70);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v12, 0, 1, v36);
  v39 = v68;
  sub_10000D55C((uint64_t)v12, v68);
  v40 = v73;
  v41 = v73 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_scheduledTime;
  swift_beginAccess(v73 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_scheduledTime, aBlock, 33, 0);
  sub_10003E0A4(v39, v41);
  swift_endAccess(aBlock);
  v42 = swift_allocObject(&unk_1002172E8, 24, 7);
  swift_weakInit(v42 + 16, v40);
  v43 = v71;
  v38(v71, v34, v36);
  v44 = *(unsigned __int8 *)(v37 + 80);
  v45 = (v44 + 24) & ~v44;
  v46 = swift_allocObject(&unk_100217310, v45 + v72, v44 | 7);
  *(_QWORD *)(v46 + 16) = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v46 + v45, v43, v36);
  aBlock[4] = sub_100149668;
  v82 = v46;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001493D0;
  aBlock[3] = &unk_100217328;
  v47 = _Block_copy(aBlock);
  v80 = _swiftEmptyArrayStorage;
  v48 = sub_1000A3560(&qword_1002668B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain(v42, v49);
  v50 = sub_100008A18(&qword_1002668B8);
  v51 = sub_1001496B0(&qword_1002668C0, &qword_1002668B8);
  v52 = v74;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v50, v51, v75, v48);
  v53 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v54 = DispatchWorkItem.init(flags:block:)(v52, v47);
  v55 = v82;
  swift_release(v42);
  v56 = swift_release(v55);
  v57 = v77;
  static DispatchTime.now()(v56);
  v58 = v76;
  + infix(_:_:)(v57, v35);
  v59 = *(void (**)(char *, uint64_t))(v78 + 8);
  v60 = v57;
  v61 = v79;
  v59(v60, v79);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v58, v54);

  v59(v58, v61);
  v62 = *(_QWORD *)(v40 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_dispatchWorkItem);
  *(_QWORD *)(v40 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_dispatchWorkItem) = v54;
  return swift_release(v62);
}

uint64_t sub_100148DE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD aBlock[5];
  _QWORD *v55;
  char v56[24];
  char v57[24];
  char v58[24];
  char v59[24];
  char v60[32];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v52 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v6 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v7);
  v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1 + 16;
  swift_beginAccess(v10, v60, 0, 0);
  Strong = swift_weakLoadStrong(v10);
  if (Strong)
  {
    v12 = Strong;
    v13 = *(id *)(Strong + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_lock);
    swift_release(v12);
    objc_msgSend(v13, "lock");

  }
  swift_beginAccess(v10, v59, 0, 0);
  v14 = swift_weakLoadStrong(v10);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_dispatchWorkItem);
    *(_QWORD *)(v14 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_dispatchWorkItem) = 0;
    swift_release(v14);
    swift_release(v15);
  }
  swift_beginAccess(v10, v58, 0, 0);
  v16 = swift_weakLoadStrong(v10);
  if (v16)
  {
    v17 = v16;
    v18 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v9, 1, 1, v18);
    v19 = v17 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_scheduledTime;
    swift_beginAccess(v17 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_scheduledTime, aBlock, 33, 0);
    sub_10003E0A4((uint64_t)v9, v19);
    swift_endAccess(aBlock);
    swift_release(v17);
  }
  swift_beginAccess(v10, v57, 0, 0);
  v20 = swift_weakLoadStrong(v10);
  if (v20)
  {
    v21 = v20;
    v22 = *(id *)(v20 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_lock);
    swift_release(v21);
    objc_msgSend(v22, "unlock");

  }
  v23 = static os_log_type_t.debug.getter(v20);
  sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
  v24 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
  v25 = sub_100008A18((uint64_t *)&unk_1002653F0);
  v26 = swift_allocObject(v25, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_1001B76C0;
  v27 = Date.debugDescription.getter();
  v29 = v28;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = sub_1000A5AF8();
  *(_QWORD *)(v26 + 32) = v27;
  *(_QWORD *)(v26 + 40) = v29;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Regular timer %{public}@ fired", 30, 2, v26);

  swift_bridgeObjectRelease(v26);
  swift_beginAccess(v10, v56, 0, 0);
  result = swift_weakLoadStrong(v10);
  if (result)
  {
    v31 = result;
    v32 = swift_unknownObjectWeakLoadStrong(result + 16);
    result = swift_release(v31);
    if (v32)
    {
      if (qword_100264E78 != -1)
        swift_once(&qword_100264E78, sub_100150610);
      v33 = type metadata accessor for Logger(0);
      v34 = sub_10000ABD8(v33, (uint64_t)qword_10026D208);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.debug.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "ObservabilityPeriodicPlanner got 'Timer Fired' signal from underlying timer", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      v38 = swift_unknownObjectWeakLoadStrong(v32 + 16);
      if (v38)
      {
        v39 = v38;
        v40 = *(_QWORD *)(v32 + 24);
        v41 = os_transaction_create("com.apple.ap.o11y-worker-task");
        v49[1] = *(_QWORD *)(v32 + 112);
        v42 = (_QWORD *)swift_allocObject(&unk_100217360, 56, 7);
        v42[2] = v41;
        v42[3] = v39;
        v42[4] = v40;
        v42[5] = nullsub_1;
        v42[6] = 0;
        aBlock[4] = sub_100149724;
        v55 = v42;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1001493D0;
        aBlock[3] = &unk_100217378;
        v43 = _Block_copy(aBlock);
        swift_unknownObjectRetain(v41);
        v44 = swift_unknownObjectRetain(v39);
        static DispatchQoS.unspecified.getter(v44);
        v53 = _swiftEmptyArrayStorage;
        v45 = sub_1000A3560(&qword_1002668B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v46 = sub_100008A18(&qword_1002668B8);
        v47 = sub_1001496B0(&qword_1002668C0, &qword_1002668B8);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v46, v47, v2, v45);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v4, v43);
        _Block_release(v43);
        swift_unknownObjectRelease(v41);
        swift_unknownObjectRelease(v39);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v4, v2);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v6, v51);
        v48 = v55;
        swift_unknownObjectRelease(v32);
        return swift_release(v48);
      }
      else
      {
        return swift_unknownObjectRelease(v32);
      }
    }
  }
  return result;
}

uint64_t sub_1001493D0(uint64_t a1, uint64_t a2)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v2 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = swift_retain(v3, a2);
  v2(v4);
  return swift_release(v3);
}

uint64_t sub_1001493FC()
{
  uint64_t v0;

  sub_10003E238(v0 + 16);
  sub_10000D51C(v0 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_scheduledTime);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_dispatchWorkItem));

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100149454()
{
  return type metadata accessor for ObservabilityRegularTimer(0);
}

uint64_t type metadata accessor for ObservabilityRegularTimer(uint64_t a1)
{
  uint64_t result;

  result = qword_100266778;
  if (!qword_100266778)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ObservabilityRegularTimer);
  return result;
}

void sub_100149498(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1001B9A50;
  sub_10003E050(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1001B9A68;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t sub_100149528(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)v2 + 16;
  *(_QWORD *)(*(_QWORD *)v2 + 24) = a2;
  swift_unknownObjectWeakAssign(v4, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_10014955C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = *v1 + OBJC_IVAR____TtC7Metrics25ObservabilityRegularTimer_scheduledTime;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10000CE28(v3, a1);
}

id sub_1001495B0(uint64_t a1)
{
  return sub_100148204(a1);
}

uint64_t sub_1001495D0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001495F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100149668()
{
  uint64_t v0;

  type metadata accessor for Date(0);
  return sub_100148DE4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100149698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2, a2);
}

uint64_t sub_1001496A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001496B0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000A5AB4(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001496F0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100149724()
{
  uint64_t v0;

  return sub_100154880(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(uint64_t))(v0 + 40));
}

uint64_t *sub_10014973C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12, a2);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
  }
  return a1;
}

uint64_t sub_1001497DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100149810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100149884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100149904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100149978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_1001499EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001499F8);
}

uint64_t sub_1001499F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100149A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100149A40);
}

uint64_t sub_100149A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SigningFailure(uint64_t a1)
{
  uint64_t result;

  result = qword_100266988;
  if (!qword_100266988)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SigningFailure);
  return result;
}

uint64_t sub_100149ABC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001B9AA8;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

BOOL sub_100149B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  if ((static Date.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = type metadata accessor for SigningFailure(0);
  v5 = *(int *)(v4 + 20);
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = *(_QWORD *)(a1 + v5 + 16);
  v9 = (uint64_t *)(a2 + v5);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[2];
  v13 = v6 == v10 && v7 == v11;
  return v13 && v8 == v12 && *(_QWORD *)(a1 + *(int *)(v4 + 24)) == *(_QWORD *)(a2 + *(int *)(v4 + 24));
}

uint64_t sub_100149BB8(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_10014A6BC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100149D0C(uint64_t a1)
{
  return sub_100149D34(a1, &qword_100265D38, &qword_100267E00);
}

uint64_t sub_100149D20(uint64_t a1)
{
  return sub_100149D34(a1, (uint64_t *)&unk_100267E20, &qword_1002664E0);
}

uint64_t sub_100149D34(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  int64_t v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int64_t v18;
  uint64_t result;
  char v20;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v7 <= v5[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v6 <= v7)
    v18 = v6 + v4;
  else
    v18 = v6;
  v5 = sub_10014A7F0(isUniquelyReferenced_nonNull_native, v18, 1, v5, a2, a3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v4)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v12 = v5[2];
  if ((v5[3] >> 1) - v12 < v4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v13 = (unint64_t)&v5[5 * v12 + 4];
  if (a1 + 32 < v13 + 40 * v4 && v13 < a1 + 32 + 40 * v4)
    goto LABEL_24;
  sub_100008A18(a3);
  swift_arrayInitWithCopy(v13);
  if (!v4)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
  v15 = v5[2];
  v16 = __OFADD__(v15, v4);
  v17 = v15 + v4;
  if (!v16)
  {
    v5[2] = v17;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v20 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v20, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100149EB0(uint64_t a1)
{
  return sub_10000C054(a1, &qword_100266658, type metadata accessor for TimeRange);
}

uint64_t sub_100149EC4(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  int isUniquelyReferenced_nonNull_native;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(_QWORD);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  int64_t v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _BYTE v49[32];
  uint64_t v50;
  uint64_t v51;

  v47 = type metadata accessor for TimeRange(0);
  v4 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v48 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008A18(&qword_100266660);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v46 = (uint64_t)&v43 - v11;
  result = __chkstk_darwin(v10);
  v14 = (char *)&v43 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *v1;
  v17 = *(_QWORD *)(*v1 + 16);
  v18 = v17 + v15;
  if (__OFADD__(v17, v15))
  {
    __break(1u);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    *v1 = v16;
    if (!isUniquelyReferenced_nonNull_native || (v20 = *(_QWORD *)(v16 + 24) >> 1, v20 < v18))
    {
      if (v17 <= v18)
        v21 = v17 + v15;
      else
        v21 = v17;
      v16 = sub_100008B68(isUniquelyReferenced_nonNull_native, v21, 1, v16, &qword_100266658, type metadata accessor for TimeRange);
      *v1 = v16;
      v20 = *(_QWORD *)(v16 + 24) >> 1;
    }
    v22 = *(_QWORD *)(v16 + 16);
    v2 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v17 = *(_QWORD *)(v4 + 72);
    v23 = v20 - v22;
    result = sub_10014ADD8((uint64_t)&v50, v16 + v2 + v17 * v22, v20 - v22, a1);
    if (result >= v15)
    {
      if (!result)
        goto LABEL_12;
      v24 = *(_QWORD *)(v16 + 16);
      v25 = __OFADD__(v24, result);
      v26 = v24 + result;
      if (!v25)
      {
        *(_QWORD *)(v16 + 16) = v26;
LABEL_12:
        if (result != v23)
          return swift_bridgeObjectRelease(v50);
        goto LABEL_16;
      }
      __break(1u);
      while (1)
      {
LABEL_25:
        sub_100008AD8(a1, &qword_100266660);
        v31 = *v1;
        v32 = *(_QWORD *)(*v1 + 24);
        v33 = v32 >> 1;
        if ((uint64_t)(v32 >> 1) < v16 + 1)
        {
          v31 = sub_100008B68(v32 > 1, v16 + 1, 1, *v1, &qword_100266658, type metadata accessor for TimeRange);
          *v1 = v31;
          v33 = *(_QWORD *)(v31 + 24) >> 1;
        }
        sub_1000089D4((uint64_t)v14, (uint64_t)v9, &qword_100266660);
        if (v45(v9, 1, v15) != 1)
          break;
LABEL_23:
        sub_100008AD8((uint64_t)v9, &qword_100266660);
        v30 = v16;
LABEL_24:
        *(_QWORD *)(*v1 + 16) = v30;
        a1 = v46;
        sub_1000089D4((uint64_t)v14, v46, &qword_100266660);
        if (v45((char *)a1, 1, v15) == 1)
          goto LABEL_20;
      }
      if (v16 <= v33)
        v34 = v33;
      else
        v34 = v16;
      v44 = v34;
      v35 = v31 + v2 + v17 * v16;
      while (1)
      {
        v4 = v15;
        sub_10000BCFC((uint64_t)v9, v23, type metadata accessor for TimeRange);
        if (v44 == v16)
        {
          sub_1000070D8(v23, type metadata accessor for TimeRange);
          v30 = v44;
          v16 = v44;
          goto LABEL_24;
        }
        sub_100008AD8((uint64_t)v14, &qword_100266660);
        sub_10000BCFC(v23, v35, type metadata accessor for TimeRange);
        if (v51)
        {
          v36 = v51 - 1;
          if (__OFSUB__(v51, 1))
          {
            __break(1u);
LABEL_41:
            v15 = v47;
            v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
            v43(v14, 1, 1, v47);
            v23 = (uint64_t)v48;
LABEL_19:
            a1 = v46;
            sub_1000089D4((uint64_t)v14, v46, &qword_100266660);
            v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
            if (v45((char *)a1, 1, v15) == 1)
            {
LABEL_20:
              sub_100008AD8((uint64_t)v14, &qword_100266660);
              swift_bridgeObjectRelease(v50);
              return sub_100008AD8(a1, &qword_100266660);
            }
            goto LABEL_25;
          }
          --v51;
          v37 = sub_100147E38((uint64_t)v49, v36, v50);
          sub_10000BD40(v38, (uint64_t)v14, type metadata accessor for TimeRange);
          ((void (*)(_BYTE *, _QWORD))v37)(v49, 0);
          v39 = v14;
          v40 = 0;
          v15 = v47;
          v41 = v47;
        }
        else
        {
          v39 = v14;
          v40 = 1;
          v41 = v15;
        }
        v43(v39, v40, 1, v41);
        sub_1000089D4((uint64_t)v14, (uint64_t)v9, &qword_100266660);
        v42 = v45(v9, 1, v15);
        v35 += v17;
        ++v16;
        v23 = (uint64_t)v48;
        if (v42 == 1)
          goto LABEL_23;
      }
    }
  }
  __break(1u);
LABEL_16:
  v16 = *(_QWORD *)(v16 + 16);
  if (!v51)
    goto LABEL_41;
  v27 = v51 - 1;
  v15 = v47;
  v23 = (uint64_t)v48;
  if (!__OFSUB__(v51, 1))
  {
    --v51;
    v28 = sub_100147E38((uint64_t)v49, v27, v50);
    sub_10000BD40(v29, (uint64_t)v14, type metadata accessor for TimeRange);
    ((void (*)(_BYTE *, _QWORD))v28)(v49, 0);
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v43(v14, 0, 1, v15);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_10014A3C0(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_10014ABC0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[2 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[2 * v8] && (unint64_t)v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 16 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10014A508(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_10014A7F0(isUniquelyReferenced_nonNull_native, v15, 1, v3, &qword_1002663A8, &qword_1002663B0);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  sub_100008A18(&qword_1002663B0);
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for QueryingPeriodicScheduler()
{
  return objc_opt_self(_TtC7Metrics25QueryingPeriodicScheduler);
}

void sub_10014A6AC()
{
  qword_1002669C8 = 0x405E000000000000;
}

_QWORD *sub_10014A6BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008A18(&qword_100266AD8);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10014AED8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10014A7C8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10014A7F0(a1, a2, a3, a4, &qword_100265D38, &qword_100267E00);
}

_QWORD *sub_10014A7DC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10014A7F0(a1, a2, a3, a4, (uint64_t *)&unk_100267E20, &qword_1002664E0);
}

_QWORD *sub_10014A7F0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_100008A18(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4])
          memmove(v16, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10014B0B0(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_10014A91C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100008B68(a1, a2, a3, a4, &qword_100266658, type metadata accessor for TimeRange);
}

_QWORD *sub_10014A930(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008A18(&qword_100266AD0);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10014B1B8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10014AA54(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100008B68(a1, a2, a3, a4, &qword_100266AB8, type metadata accessor for BatchID);
}

_QWORD *sub_10014AA68(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10014AA90(a1, a2, a3, a4, (uint64_t *)&unk_100267E10, &qword_100265D20);
}

_QWORD *sub_10014AA7C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10014AA90(a1, a2, a3, a4, &qword_100266AC8, (uint64_t *)&unk_100267DF0);
}

_QWORD *sub_10014AA90(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_100008A18(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 48 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 48);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[6 * v11 + 4])
          memmove(v16, a4 + 4, 48 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10014B3B0(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10014ABC0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008A18((uint64_t *)&unk_100267DC0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10014AFC8(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10014ACCC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008A18(&qword_100266AC0);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10014B4B8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10014ADD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(a4 + 16);
  if (!a2)
  {
    v12 = *(_QWORD *)(a4 + 16);
    v6 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v12 = *(_QWORD *)(a4 + 16);
LABEL_13:
    v6 = a3;
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v6)
    {
      v8 = a2;
      v9 = 0;
      while (v6 + v9 <= *(_QWORD *)(a4 + 16))
      {
        v10 = *(_QWORD *)(type metadata accessor for TimeRange(0) - 8);
        v11 = *(_QWORD *)(v10 + 72);
        result = sub_10000BD40(a4+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ v11 * (v6 + v9 - 1), v8, type metadata accessor for TimeRange);
        if (a3 + v9 == 1)
        {
          v12 = v6 + v9 - 1;
          goto LABEL_13;
        }
        v8 += v11;
        --v9;
        if (!(v6 + v9))
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_16;
    }
LABEL_9:
    v12 = 0;
LABEL_14:
    *v5 = a4;
    v5[1] = v12;
    return v6;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10014AED8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_10014AFC8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10014B0B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_100008A18(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_10014B1B8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 24 * a1 + 32);
  v6 = 24 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10014B2A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100008A18((uint64_t *)&unk_100267DD0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10014B3B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 48 * a1 + 32;
  v8 = a3 + 48 * v5;
  if (v7 >= v8 || v7 + 48 * v5 <= a3)
  {
    sub_100008A18(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10014B4B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ObservabilityErrorBucketConfigSystemJSONSource()
{
  return objc_opt_self(_TtC7Metrics46ObservabilityErrorBucketConfigSystemJSONSource);
}

uint64_t getEnumTagSinglePayload for ObservabilityErrorBucketConfigSystemJSONSource.Source(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ObservabilityErrorBucketConfigSystemJSONSource.Source(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10014B6A4 + 4 * byte_1001B9BA5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10014B6D8 + 4 * byte_1001B9BA0[v4]))();
}

uint64_t sub_10014B6D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B6E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014B6E8);
  return result;
}

uint64_t sub_10014B6F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014B6FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10014B700(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B708(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservabilityErrorBucketConfigSystemJSONSource.Source()
{
  return &type metadata for ObservabilityErrorBucketConfigSystemJSONSource.Source;
}

unint64_t sub_10014B728()
{
  unint64_t result;

  result = qword_100266B80;
  if (!qword_100266B80)
  {
    result = swift_getWitnessTable(&unk_1001B9C38, &type metadata for ObservabilityErrorBucketConfigSystemJSONSource.Source);
    atomic_store(result, (unint64_t *)&qword_100266B80);
  }
  return result;
}

unint64_t sub_10014B76C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;

  v1 = (void *)objc_opt_self(APConfigurationMediator);
  sub_10014B878();
  v2 = objc_msgSend(v1, "configurationForClass:", swift_getObjCClassFromMetadata());
  v3 = objc_opt_self(APECObservabilityConfig);
  v4 = (void *)swift_dynamicCastObjCClass(v2, v3);
  if (v4)
  {
    v5 = objc_msgSend(v4, *off_100217480[*(char *)(v0 + 16)]);
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    v7 = sub_1000A3A1C(v6);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  swift_unknownObjectRelease(v2);
  return v7;
}

unint64_t sub_10014B858()
{
  return sub_10014B76C();
}

unint64_t sub_10014B878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100262C20;
  if (!qword_100262C20)
  {
    v1 = objc_opt_self(APECObservabilityConfig);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100262C20);
  }
  return result;
}

_QWORD *sub_10014B8B4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8, a2);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10014B93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10014B998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10014B9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10014BA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10014BAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return v9 - 1;
  else
    return 0;
}

uint64_t sub_10014BB24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_10014BB9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001B9CA8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10014BC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  if ((static Date.== infix(_:_:)() & 1) != 0)
    v6 = *(_BYTE *)(a1 + *(int *)(a3 + 20)) ^ *(_BYTE *)(a2 + *(int *)(a3 + 20)) ^ 1;
  else
    v6 = 0;
  return v6 & 1;
}

uint64_t sub_10014BC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18((uint64_t *)&unk_100267DD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

char *sub_10014BCD4(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for ObservabilitySignal(0);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if ((v7 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v13 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain(v13, v5);
  }
  else
  {
    v8 = v4;
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v9 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
        v10 = &a1[v9];
        v11 = &a2[v9];
        v12 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        swift_storeEnumTagMultiPayload(a1, v8, 1);
        break;
      case 3u:
        v15 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        swift_storeEnumTagMultiPayload(a1, v8, 3);
        break;
      case 4u:
        v16 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        swift_storeEnumTagMultiPayload(a1, v8, 4);
        break;
      case 6u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v17 = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 2) = v17;
        swift_bridgeObjectRetain(v17);
        swift_storeEnumTagMultiPayload(a1, v8, 6);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v6 + 64));
        break;
    }
  }
  return a1;
}

char *sub_10014BE64(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for ObservabilitySignal(0);
  switch(swift_getEnumCaseMultiPayload(a2, v4))
  {
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v5 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
      v6 = &a1[v5];
      v7 = &a2[v5];
      v8 = type metadata accessor for ExtendedUUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
      v9 = a1;
      v10 = v4;
      v11 = 1;
      goto LABEL_7;
    case 3u:
      v12 = type metadata accessor for ExtendedUUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v9 = a1;
      v10 = v4;
      v11 = 3;
      goto LABEL_7;
    case 4u:
      v13 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v9 = a1;
      v10 = v4;
      v11 = 4;
      goto LABEL_7;
    case 6u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v14 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 2) = v14;
      swift_bridgeObjectRetain(v14);
      v9 = a1;
      v10 = v4;
      v11 = 6;
LABEL_7:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_10014BFC0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_1000070D8((uint64_t)a1, type metadata accessor for ObservabilitySignal);
    v4 = type metadata accessor for ObservabilitySignal(0);
    switch(swift_getEnumCaseMultiPayload(a2, v4))
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        v5 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
        v6 = (char *)a1 + v5;
        v7 = (char *)a2 + v5;
        v8 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
        v9 = a1;
        v10 = v4;
        v11 = 1;
        goto LABEL_8;
      case 3u:
        v12 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v9 = a1;
        v10 = v4;
        v11 = 3;
        goto LABEL_8;
      case 4u:
        v13 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = v4;
        v11 = 4;
        goto LABEL_8;
      case 6u:
        v14 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        *a1 = v14;
        v15 = a2[2];
        a1[2] = v15;
        swift_bridgeObjectRetain(v15);
        v9 = a1;
        v10 = v4;
        v11 = 6;
LABEL_8:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *sub_10014C13C(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for ObservabilitySignal(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  switch(EnumCaseMultiPayload)
  {
    case 4:
      v10 = type metadata accessor for Date(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload(a1, v4, 4);
      break;
    case 3:
      v11 = type metadata accessor for ExtendedUUID(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, v4, 3);
      break;
    case 1:
      *a1 = *a2;
      v6 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for ExtendedUUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *sub_10014C268(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_1000070D8((uint64_t)a1, type metadata accessor for ObservabilitySignal);
    v4 = type metadata accessor for ObservabilitySignal(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    switch(EnumCaseMultiPayload)
    {
      case 4:
        v10 = type metadata accessor for Date(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        swift_storeEnumTagMultiPayload(a1, v4, 4);
        break;
      case 3:
        v11 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        swift_storeEnumTagMultiPayload(a1, v4, 3);
        break;
      case 1:
        *a1 = *a2;
        v6 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
        v7 = (char *)a1 + v6;
        v8 = (char *)a2 + v6;
        v9 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
        swift_storeEnumTagMultiPayload(a1, v4, 1);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10014C3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014C3B8);
}

uint64_t sub_10014C3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObservabilitySignal(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10014C3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014C400);
}

uint64_t sub_10014C400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObservabilitySignal(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10014C440(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ObservabilitySignal(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10014C4A8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t result;
  char *v21;
  _QWORD v22[14];
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;

  v22[13] = a1;
  v2 = sub_100008A18(&qword_100265B70);
  __chkstk_darwin(v2);
  v22[11] = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ExtendedUUID(0);
  v22[12] = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v24 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008A18(&qword_100265B78);
  __chkstk_darwin(v5);
  v22[10] = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BatchID(0);
  v22[9] = *(_QWORD *)(v23 - 8);
  v7 = __chkstk_darwin(v23);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v22 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v22 - v14;
  v16 = __chkstk_darwin(v13);
  __chkstk_darwin(v16);
  v17 = v1[3];
  v18 = v1[4];
  sub_10000B748(v1, v17);
  v19 = v26;
  result = dispatch thunk of DatabaseCursor.read(_:)(1, v17, v18);
  if (!v19)
  {
    v22[7] = v15;
    v22[8] = v12;
    v26 = v9;
    v21 = (char *)sub_10014C6DC + 4 * word_1001B9D30[sub_100159E10(result)];
    __asm { BR              X10 }
  }
  return result;
}

void sub_10014C6DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = v0[3];
  v4 = v0[4];
  sub_10000B748(v0, v3);
  dispatch thunk of DatabaseCursor.read(_:)(3, v3, v4);
  if (!v1)
  {
    v6 = v5;
    v7 = v0[3];
    v8 = v0[4];
    sub_10000B748(v0, v7);
    v9 = dispatch thunk of DatabaseCursor.read(_:)(4, v7, v8);
    v10 = *(_QWORD **)(v2 - 136);
    *v10 = v6;
    v10[1] = v9;
    v11 = type metadata accessor for ObservabilitySignal(0);
    swift_storeEnumTagMultiPayload(v10, v11, 0);
  }
  JUMPOUT(0x10014C694);
}

uint64_t sub_10014CE5C(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t result;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  _QWORD v57[4];

  v57[3] = a4;
  if (a1 < 0)
    goto LABEL_44;
  v10 = swift_allocObject(&unk_100217508, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v54 = swift_allocObject(&unk_100217530, 24, 7);
  *(_QWORD *)(v54 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v33 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v33 = 11;
    sub_10014D2F8(v33 | (v11 << 16), v54, a2 & 1, v10, a5, a6);
    swift_bridgeObjectRelease(a6);
    v14 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    v34 = v54;
LABEL_41:
    swift_release(v34);
    return (uint64_t)v14;
  }
  v49 = a1;
  v50 = v10;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v48 = v13 | (v12 << 16);
  v55 = 4 * v12;
  v14 = _swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v18 = String.subscript.getter(v15, a5, a6);
    v20 = v19;
    v57[0] = v18;
    v57[1] = v19;
    v21 = a3(v57);
    if (v6)
    {
      swift_release(v50);
      swift_release(v54);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }
    v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) != 0)
      break;
    v15 = String.index(after:)(v15, a5, a6);
LABEL_11:
    if (v55 == v15 >> 14)
      goto LABEL_31;
  }
  if (v16 >> 14 == v15 >> 14 && (a2 & 1) != 0)
  {
    v15 = String.index(after:)(v15, a5, a6);
    *(_QWORD *)(v54 + 16) = v15;
    v16 = v15;
    v17 = v15;
    goto LABEL_11;
  }
  if (v15 >> 14 < v16 >> 14)
    goto LABEL_43;
  v23 = String.subscript.getter(v16, v15, a5, a6);
  v51 = v24;
  v52 = v23;
  v26 = v25;
  v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
    v14 = sub_10014ACCC(0, v14[2] + 1, 1, v14);
  v30 = v14[2];
  v29 = v14[3];
  if (v30 >= v29 >> 1)
    v14 = sub_10014ACCC((_QWORD *)(v29 > 1), v30 + 1, 1, v14);
  v14[2] = v30 + 1;
  v31 = &v14[4 * v30];
  v31[4] = v52;
  v31[5] = v26;
  v31[6] = v28;
  v31[7] = v51;
  *(_QWORD *)(v50 + 16) = v14;
  v32 = String.index(after:)(v15, a5, a6);
  v15 = v32;
  *(_QWORD *)(v54 + 16) = v32;
  if (v14[2] != v49)
  {
    v16 = v32;
    v17 = v32;
    goto LABEL_11;
  }
  v17 = v32;
  v16 = v32;
LABEL_31:
  if (v55 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    v35 = v50;
LABEL_40:
    swift_bridgeObjectRetain(v14);
    swift_release(v35);
    v34 = v54;
    goto LABEL_41;
  }
  if (v55 >= v17 >> 14)
  {
    v36 = String.subscript.getter(v17, v48, a5, a6);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_10014ACCC(0, v14[2] + 1, 1, v14);
    v44 = v14[2];
    v43 = v14[3];
    if (v44 >= v43 >> 1)
      v14 = sub_10014ACCC((_QWORD *)(v43 > 1), v44 + 1, 1, v14);
    v14[2] = v44 + 1;
    v45 = &v14[4 * v44];
    v45[4] = v36;
    v45[5] = v38;
    v45[6] = v40;
    v45[7] = v42;
    v35 = v50;
    *(_QWORD *)(v50 + 16) = v14;
    goto LABEL_40;
  }
LABEL_43:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
LABEL_44:
  LOBYTE(v47) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, v47, 1552, 0);
  __break(1u);
  return result;
}

uint64_t sub_10014D2F8(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t result;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = (v7 >> 14 == a1 >> 14) & a3;
  if (v8 == 1)
    return v8 ^ 1u;
  if (a1 >> 14 >= v7 >> 14)
  {
    v10 = String.subscript.getter(v7, a1, a5, a6);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v17 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    *(_QWORD *)(a4 + 16) = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_10014ACCC(0, v17[2] + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v20 = v17[2];
    v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      v17 = sub_10014ACCC((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v17[2] = v20 + 1;
    v21 = &v17[4 * v20];
    v21[4] = v10;
    v21[5] = v12;
    v21[6] = v14;
    v21[7] = v16;
    return v8 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

uint64_t sub_10014D450(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = *a1;
  v5 = a1[1];
  v6 = v3[1];
  if (v4 == *v3 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0) & 1;
}

unint64_t sub_10014D4A4()
{
  unint64_t result;

  result = qword_100266CA8;
  if (!qword_100266CA8)
  {
    result = swift_getWitnessTable(&unk_1001BA8F8, &type metadata for DeserializationError);
    atomic_store(result, (unint64_t *)&qword_100266CA8);
  }
  return result;
}

uint64_t sub_10014D4E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014D50C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t initializeWithCopy for ObservabilitySignalDeserializer(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for ObservabilitySignalDeserializer(_QWORD *a1, _QWORD *a2)
{
  sub_100131928(a1, a2);
  return a1;
}

__n128 initializeWithTake for ObservabilitySignalDeserializer(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ObservabilitySignalDeserializer(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ObservabilitySignalDeserializer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ObservabilitySignalDeserializer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservabilitySignalDeserializer()
{
  return &type metadata for ObservabilitySignalDeserializer;
}

_QWORD *sub_10014D668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *result;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  char v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;

  v3 = sub_100008A18(&qword_1002654D8);
  __chkstk_darwin(v3);
  v71 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008A18(&qword_1002654E0);
  __chkstk_darwin(v5);
  v70 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DateComponents(0);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v80 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v13);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v74 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v68 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TimeRange(0);
  v73 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v67 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v72 = (uint64_t)&v65 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v65 - v23;
  v69 = a1;
  if (a1 < 0)
    return &_swiftEmptyArrayStorage;
  sub_10000AC68(v1, (uint64_t)&v65 - v23);
  v25 = 0;
  v65 = v18;
  v66 = v16;
  v26 = *(int *)(v18 + 20);
  v78 = v10;
  v79 = v26;
  v27 = &_swiftEmptyArrayStorage;
  while (1)
  {
    v28 = v72;
    sub_10000AC68((uint64_t)v24, v72);
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      v27 = (_QWORD *)sub_10014A91C(0, v27[2] + 1, 1, (unint64_t)v27);
    v30 = v27[2];
    v29 = v27[3];
    if (v30 >= v29 >> 1)
      v27 = (_QWORD *)sub_10014A91C(v29 > 1, v30 + 1, 1, (unint64_t)v27);
    v27[2] = v30 + 1;
    sub_10000ACAC(v28, (uint64_t)v27+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(_QWORD *)(v73 + 72) * v30);
    if (qword_100264E60 != -1)
      swift_once(&qword_100264E60, sub_10012F9C0);
    v31 = sub_10000ABD8(v10, (uint64_t)qword_10026D1E0);
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v32(v80, v31, v10);
    v33 = v24[v79];
    v77 = v27;
    v34 = v11;
    if (v33)
    {
      v35 = v70;
      v36 = v78;
      if (v33 == 1)
      {
        v32(v70, v31, v78);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v36);
        v37 = type metadata accessor for TimeZone(0);
        v38 = v71;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v71, 1, 1, v37);
        LOBYTE(v64) = 1;
        LOBYTE(v63) = 1;
        LOBYTE(v62) = 1;
        LOBYTE(v61) = 1;
        LOBYTE(v60) = 1;
        LOBYTE(v59) = 1;
        LOBYTE(v58) = 1;
        LOBYTE(v57) = 1;
        LOBYTE(v56) = 1;
        v55 = 0;
        LOBYTE(v54) = 0;
        v53 = 1;
      }
      else
      {
        v32(v70, v31, v78);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v36);
        v42 = type metadata accessor for TimeZone(0);
        v38 = v71;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v71, 1, 1, v42);
        LOBYTE(v64) = 1;
        LOBYTE(v63) = 1;
        LOBYTE(v62) = 1;
        LOBYTE(v61) = 1;
        LOBYTE(v60) = 1;
        LOBYTE(v59) = 1;
        LOBYTE(v58) = 1;
        LOBYTE(v57) = 1;
        LOBYTE(v56) = 0;
        v55 = 15;
        LOBYTE(v54) = 1;
        v53 = 0;
      }
      LOBYTE(v52) = 1;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v35, v38, 0, 1, 0, 1, 0, 1, 0, v52, v53, v54, v55, v56, 0, v57, 0, v58, 0,
        v59,
        0,
        v60,
        0,
        v61,
        0,
        v62,
        0,
        v63,
        0,
        v64);
    }
    else
    {
      v39 = v70;
      v36 = v78;
      v32(v70, v31, v78);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v39, 0, 1, v36);
      v40 = type metadata accessor for TimeZone(0);
      v41 = v71;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v71, 1, 1, v40);
      LOBYTE(v64) = 1;
      LOBYTE(v63) = 1;
      LOBYTE(v62) = 1;
      LOBYTE(v61) = 1;
      LOBYTE(v60) = 1;
      LOBYTE(v59) = 1;
      LOBYTE(v58) = 1;
      LOBYTE(v57) = 1;
      LOBYTE(v56) = 1;
      LOBYTE(v54) = 1;
      LOBYTE(v52) = 0;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v39, v41, 0, 1, 0, 1, 0, 1, 1, v52, 0, v54, 0, v56, 0, v57, 0, v58, 0,
        v59,
        0,
        v60,
        0,
        v61,
        0,
        v62,
        0,
        v63,
        0,
        v64);
    }
    v43 = v80;
    Calendar.date(byAdding:to:wrappingComponents:)(v9, v24, 0);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v9, v76);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v43, v36);
    v44 = v74;
    v45 = v66;
    result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48))(v15, 1, v66);
    if ((_DWORD)result == 1)
      break;
    v11 = v34;
    v47 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v48 = v68;
    v47(v68, v15, v45);
    v49 = v24[v79];
    v50 = (uint64_t)v67;
    v47(v67, v48, v45);
    *(_BYTE *)(v50 + *(int *)(v65 + 20)) = v49;
    sub_10000ABF0((uint64_t)v24);
    result = (_QWORD *)sub_10000ACAC(v50, (uint64_t)v24);
    if (v69 == v25)
    {
      sub_10000ABF0((uint64_t)v24);
      return v77;
    }
    v51 = __OFADD__(v25++, 1);
    v27 = v77;
    v10 = v78;
    if (v51)
    {
      __break(1u);
      break;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_10014DD08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, 0);
  v3 = type metadata accessor for Date(0);
  v4 = sub_1000A3560(&qword_100266D50, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(a1 + 20)));
  return Hasher._finalize()();
}

void sub_10014DD90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for Date(0);
  v6 = sub_1000A3560(&qword_100266D50, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(a2 + 20)));
}

Swift::Int sub_10014DE00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, a1);
  v4 = type metadata accessor for Date(0);
  v5 = sub_1000A3560(&qword_100266D50, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(a2 + 20)));
  return Hasher._finalize()();
}

BOOL sub_10014DE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.== infix(_:_:)() & 1) != 0
      && *(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(a3 + 20));
}

uint64_t sub_10014DED4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x72756F682031;
  if (*v0 != 1)
    v1 = 0x74756E696D203531;
  if (*v0)
    return v1;
  else
    return 0x7961642031;
}

BOOL sub_10014DF30(uint64_t a1, uint64_t a2)
{
  return (sub_10014E614(a2, a1) & 1) == 0;
}

BOOL sub_10014DF58(uint64_t a1, uint64_t a2)
{
  return (sub_10014E614(a1, a2) & 1) == 0;
}

uint64_t sub_10014DF74(uint64_t a1, uint64_t a2)
{
  return sub_10014E614(a2, a1);
}

id sub_10014DF84()
{
  id result;

  result = sub_10014DFA0();
  qword_10026D200 = (uint64_t)result;
  return result;
}

id sub_10014DFA0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;
  Class v15;
  Class v16;
  uint64_t v18;
  uint64_t v19;

  v19 = type metadata accessor for Locale(0);
  v0 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TimeZone(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSDateIntervalFormatter), "init");
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v12 = sub_10000ABD8(v7, (uint64_t)qword_10026D1E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  objc_msgSend(v11, "setCalendar:", isa);

  objc_msgSend(v11, "setDateStyle:", 1);
  objc_msgSend(v11, "setTimeStyle:", 2);
  if (qword_100264E80 != -1)
    swift_once(&qword_100264E80, sub_10015B3D8);
  v14 = sub_10000ABD8(v3, (uint64_t)qword_10026D228);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
  v15 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_msgSend(v11, "setTimeZone:", v15);

  Locale.init(identifier:)(0x53552D6E65, 0xE500000000000000);
  v16 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v19);
  objc_msgSend(v11, "setLocale:", v16);

  return v11;
}

uint64_t sub_10014E218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSDate v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Class isa;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = type metadata accessor for DateComponents(0);
  v36 = *(_QWORD *)(v1 - 8);
  v37 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100264E70 != -1)
    swift_once(&qword_100264E70, sub_10014DF84);
  v35 = (id)qword_10026D200;
  v15.super.isa = Date._bridgeToObjectiveC()().super.isa;
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v16 = sub_10000ABD8(v4, (uint64_t)qword_10026D1E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
  v17 = type metadata accessor for TimeRange(0);
  sub_1000093B8(*(_BYTE *)(v0 + *(int *)(v17 + 20)));
  Calendar.date(byAdding:to:wrappingComponents:)(v3, v0, 0);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v3, v37);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v20 = v35;
    v21 = objc_msgSend(v35, "stringFromDate:toDate:", v15.super.isa, isa);

    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);
    v25 = v24;

    v42 = v23;
    v43 = v25;
    v40 = 9011426;
    v41 = 0xA300000000000000;
    v38 = 32;
    v39 = 0xE100000000000000;
    v26 = sub_10002E808();
    v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v40, &v38, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
    v29 = v28;
    swift_bridgeObjectRelease(v25);
    v42 = v27;
    v43 = v29;
    v40 = 11501794;
    v41 = 0xA300000000000000;
    v38 = 32;
    v39 = 0xE100000000000000;
    v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v40, &v38, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
    v32 = v31;
    swift_bridgeObjectRelease(v29);
    v42 = v30;
    v43 = v32;
    v40 = 9666786;
    v41 = 0xA300000000000000;
    v38 = 45;
    v39 = 0xE100000000000000;
    v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v40, &v38, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
    swift_bridgeObjectRelease(v32);
    return v33;
  }
  return result;
}

uint64_t sub_10014E5E8()
{
  return sub_1000A3560(&qword_100266CB0, type metadata accessor for TimeRange, (uint64_t)&unk_1001B9DEC);
}

uint64_t sub_10014E614(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = type metadata accessor for DateComponents(0);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008A18(&qword_100262C10);
  v12 = __chkstk_darwin(v11);
  v38 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v32 - v14;
  v16 = type metadata accessor for Date(0);
  v41 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v32 - v20;
  if ((static Date.< infix(_:_:)(a1, a2) & 1) != 0)
  {
    v22 = 1;
    return v22 & 1;
  }
  v37 = a2;
  if ((static Date.== infix(_:_:)(a1, a2) & 1) == 0)
  {
    v22 = 0;
    return v22 & 1;
  }
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v23 = sub_10000ABD8(v7, (uint64_t)qword_10026D1E0);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v35 = v23;
  v36 = v24;
  ((void (*)(char *))v24)(v10);
  v32 = type metadata accessor for TimeRange(0);
  sub_1000093B8(*(_BYTE *)(a1 + *(int *)(v32 + 20)));
  Calendar.date(byAdding:to:wrappingComponents:)(v6, a1, 0);
  v25 = v40;
  v39 = *(_QWORD *)(v39 + 8);
  ((void (*)(char *, uint64_t))v39)(v6, v40);
  v33 = *(void (**)(char *, uint64_t))(v8 + 8);
  v33(v10, v7);
  v26 = v41;
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  result = v34(v15, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v28(v21, v15, v16);
    v36(v10, v35, v7);
    v29 = v37;
    sub_1000093B8(*(_BYTE *)(v37 + *(int *)(v32 + 20)));
    v30 = v38;
    Calendar.date(byAdding:to:wrappingComponents:)(v6, v29, 0);
    ((void (*)(char *, uint64_t))v39)(v6, v25);
    v33(v10, v7);
    result = v34(v30, 1, v16);
    if ((_DWORD)result != 1)
    {
      v28(v19, v30, v16);
      v22 = static Date.< infix(_:_:)(v21, v19);
      v31 = *(void (**)(char *, uint64_t))(v41 + 8);
      v31(v19, v16);
      v31(v21, v16);
      return v22 & 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10014E95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t sub_10014E9D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t sub_10014EA4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001B9E48;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TimeRange.Duration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10014EB08 + 4 * byte_1001B9D75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10014EB3C + 4 * asc_1001B9D70[v4]))();
}

uint64_t sub_10014EB3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014EB44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014EB4CLL);
  return result;
}

uint64_t sub_10014EB58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014EB60);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10014EB64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014EB6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimeRange.Duration()
{
  return &type metadata for TimeRange.Duration;
}

unint64_t sub_10014EB8C()
{
  unint64_t result;

  result = qword_100266D48;
  if (!qword_100266D48)
  {
    result = swift_getWitnessTable(&unk_1001B9EAC, &type metadata for TimeRange.Duration);
    atomic_store(result, (unint64_t *)&qword_100266D48);
  }
  return result;
}

_QWORD *sub_10014EBD0(uint64_t a1, uint64_t a2, char a3)
{
  int64_t v3;
  _QWORD *result;
  int64_t v7;
  int v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  sub_10015FF08(0, v3, 0);
  result = (_QWORD *)sub_10014FC2C(a1);
  v7 = (int64_t)result;
  v9 = v8;
  v11 = v10 & 1;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != v9)
      goto LABEL_14;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v7);
    v14 = _swiftEmptyArrayStorage[2];
    v13 = _swiftEmptyArrayStorage[3];
    if (v14 >= v13 >> 1)
      sub_10015FF08(v13 > 1, v14 + 1, 1);
    _swiftEmptyArrayStorage[2] = v14 + 1;
    v15 = &_swiftEmptyArrayStorage[2 * v14];
    v15[4] = v12;
    *((_BYTE *)v15 + 40) = a3 & 1;
    result = (_QWORD *)sub_10014FCCC(v7, v9, v11 & 1, a1);
    v7 = (int64_t)result;
    v9 = v16;
    v11 = v17 & 1;
    if (!--v3)
    {
      sub_10014FE20((uint64_t)result, v16, v17 & 1);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_10014ED48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  char v4;

  v0 = sub_100008A18((uint64_t *)&unk_100264760);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1001B76C0;
  *(_QWORD *)(v1 + 56) = &type metadata for String;
  *(_QWORD *)(v1 + 64) = &protocol witness table for String;
  *(_QWORD *)(v1 + 32) = 0x756575517473614CLL;
  *(_QWORD *)(v1 + 40) = 0xEF6874676E654C65;
  dispatch thunk of DatabaseManager.singleValueFromQuery<A>(_:parameters:transform:)(&v3, 0xD000000000000036, 0x80000001001F5660, v1, sub_10014EE44, 0, &type metadata for Int);
  swift_bridgeObjectRelease(v1);
  if (v4)
    return 0;
  else
    return v3;
}

uint64_t sub_10014EE44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000B748(a1, v3);
  result = dispatch thunk of DatabaseCursor.read(_:)(0, v3, v4);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

void sub_10014EEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = sub_100008A18((uint64_t *)&unk_100264760);
  v4 = swift_allocObject(v3, 112, 7);
  *(_QWORD *)(v4 + 56) = &type metadata for String;
  *(_QWORD *)(v4 + 64) = &protocol witness table for String;
  *(_QWORD *)(v4 + 32) = 0x756575517473614CLL;
  *(_QWORD *)(v4 + 40) = 0xEF6874676E654C65;
  *(_OWORD *)(v4 + 16) = xmmword_1001B77A0;
  *(_QWORD *)(v4 + 96) = &type metadata for Int;
  *(_QWORD *)(v4 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v4 + 72) = a2;
  LOBYTE(a2) = dispatch thunk of DatabaseManager.executeQuery(_:withParameters:)(0xD00000000000003DLL, 0x80000001001F5740, v4);
  v5 = swift_bridgeObjectRelease(v4);
  if ((a2 & 1) == 0)
  {
    v6 = static os_log_type_t.error.getter(v5);
    sub_1000ABCEC();
    v7 = (id)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Failed to update observability state store.", 43, 2, _swiftEmptyArrayStorage);

  }
}

uint64_t sub_10014F01C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _BYTE v42[40];
  _BYTE v43[40];
  _BYTE v44[40];
  _BYTE v45[48];
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v6 = &v42[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v7 = sub_100008A18((uint64_t *)&unk_100264760);
  v8 = swift_allocObject(v7, 72, 7);
  v41 = xmmword_1001B76C0;
  *(_OWORD *)(v8 + 16) = xmmword_1001B76C0;
  v46 = 1598374469;
  v47 = 0xE400000000000000;
  v9._countAndFlagsBits = ExtendedUUID.string.getter();
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11 = v46;
  v12 = v47;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = &protocol witness table for String;
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = v12;
  dispatch thunk of DatabaseManager.singleValueFromQuery<A>(_:parameters:transform:)(&v48, 0xD000000000000036, 0x80000001001F5660, v8, sub_10014F49C, 0, &type metadata for ObservabilityCommunicationCodes);
  swift_bridgeObjectRelease(v8);
  v13 = v48;
  if (v48 == 1)
  {
    v14 = sub_100008A18((uint64_t *)&unk_100267DE0);
    if ((a2 & 1) == 0)
    {
      inited = swift_initStackObject(v14, v44);
      v13 = 0;
LABEL_4:
      *(_OWORD *)(inited + 16) = v41;
      *(_QWORD *)(inited + 32) = a1;
      v16 = sub_10014FDB0(inited);
      swift_setDeallocating(inited);
      goto LABEL_8;
    }
    v17 = swift_initStackObject(v14, v45);
    v16 = 0;
    goto LABEL_6;
  }
  v16 = v49;
  if ((a2 & 1) != 0)
  {
    if (v48)
    {
      v18 = sub_10013F568(&v46, a1);
      v13 = v48;
      if ((v18 & 1) == 0)
        return sub_10014FE70(v13, v16);
LABEL_7:
      if (v13 == 1)
      {
LABEL_9:
        v23 = static os_log_type_t.error.getter(v18);
        sub_1000ABCEC();
        v24 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
        os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Failed to update observability state store.", 43, 2, _swiftEmptyArrayStorage);

        return sub_10014FE70(v13, v16);
      }
      goto LABEL_8;
    }
    v40 = sub_100008A18((uint64_t *)&unk_100267DE0);
    v17 = swift_initStackObject(v40, v43);
LABEL_6:
    *(_OWORD *)(v17 + 16) = v41;
    *(_QWORD *)(v17 + 32) = a1;
    v13 = sub_10014FDB0(v17);
    v18 = swift_setDeallocating(v17);
    goto LABEL_7;
  }
  if (!v49)
  {
    v39 = sub_100008A18((uint64_t *)&unk_100267DE0);
    inited = swift_initStackObject(v39, v42);
    goto LABEL_4;
  }
  v48 = v49;
  v38 = sub_10013F568(&v46, a1);
  v16 = v48;
  if ((v38 & 1) == 0)
    return sub_10014FE70(v13, v16);
LABEL_8:
  v19 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  swift_bridgeObjectRetain(v13);
  v20 = swift_bridgeObjectRetain(v16);
  v21 = JSONEncoder.init()(v20);
  v48 = v13;
  v49 = v16;
  v22 = sub_10014FE2C();
  v26 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v48, &type metadata for ObservabilityCommunicationCodes, v22);
  v28 = v27;
  static String.Encoding.utf8.getter();
  v29 = String.init(data:encoding:)(v26, v28, v6);
  v31 = v30;
  sub_1000AA1B4(v26, v28);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v13);
  v18 = swift_release(v21);
  if (!v31)
    goto LABEL_9;
  v32 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v32 + 16) = xmmword_1001B77A0;
  v48 = 1598374469;
  v49 = 0xE400000000000000;
  v33._countAndFlagsBits = ExtendedUUID.string.getter();
  v34 = v33._object;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v34);
  v35 = v48;
  v36 = v49;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  *(_QWORD *)(v32 + 64) = &protocol witness table for String;
  *(_QWORD *)(v32 + 72) = v29;
  *(_QWORD *)(v32 + 32) = v35;
  *(_QWORD *)(v32 + 40) = v36;
  *(_QWORD *)(v32 + 96) = &type metadata for String;
  *(_QWORD *)(v32 + 104) = &protocol witness table for String;
  *(_QWORD *)(v32 + 80) = v31;
  v37 = dispatch thunk of DatabaseManager.executeQuery(_:withParameters:)(0xD00000000000003DLL, 0x80000001001F5740, v32);
  v18 = swift_bridgeObjectRelease(v32);
  if ((v37 & 1) == 0)
    goto LABEL_9;
  return sub_10014FE70(v13, v16);
}

void sub_10014F49C(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v4 = a1[3];
  v5 = a1[4];
  sub_10000B748(a1, v4);
  v6 = dispatch thunk of DatabaseCursor.read(_:)(0, v4, v5);
  if (!v7)
    goto LABEL_6;
  v8 = v7;
  v9 = sub_10014217C(v6, v7);
  if (v2)
  {
    swift_errorRelease(v2);
    v11 = swift_bridgeObjectRelease(v8);
LABEL_5:
    v14 = static os_log_type_t.error.getter(v11);
    sub_1000ABCEC();
    v15 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Failed to update observability state store.", 43, 2, _swiftEmptyArrayStorage);

LABEL_6:
    v13 = 0;
    v12 = 1;
    goto LABEL_7;
  }
  v12 = v9;
  v13 = v10;
  v11 = swift_bridgeObjectRelease(v8);
  if (v12 == 1)
    goto LABEL_5;
LABEL_7:
  *a2 = v12;
  a2[1] = v13;
}

void sub_10014F5C8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  _QWORD *v32;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_10011F63C((_QWORD *)0x3F, 0xE100000000000000, v2);
  v4 = sub_100008A18(&qword_100266260);
  v5 = sub_10013D588((unint64_t *)&qword_100264780, &qword_100266260, (uint64_t)&protocol conformance descriptor for [A]);
  v6 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v4, v5);
  v8 = v7;
  swift_bridgeObjectRelease(v3);
  v28 = 0;
  v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v9._countAndFlagsBits = 0xD000000000000032;
  v9._object = (void *)0x80000001001F56D0;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v6;
  v10._object = v8;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v8);
  v11._countAndFlagsBits = 15145;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12 = 0;
  v13 = 0xE000000000000000;
  v14 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v26 = v28;
    v27 = v29;
    v32 = _swiftEmptyArrayStorage;
    sub_10011FDDC(0, v2, 0);
    v14 = _swiftEmptyArrayStorage;
    v15 = *(_QWORD *)(type metadata accessor for BatchID(0) - 8);
    v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v17 = *(_QWORD *)(v15 + 72);
    do
    {
      v28 = 1598374469;
      v29 = 0xE400000000000000;
      v18._countAndFlagsBits = ExtendedUUID.string.getter();
      object = v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object);
      v30 = &type metadata for String;
      v31 = &protocol witness table for String;
      v32 = v14;
      v21 = v14[2];
      v20 = v14[3];
      if (v21 >= v20 >> 1)
      {
        sub_10011FDDC((_QWORD *)(v20 > 1), v21 + 1, 1);
        v14 = v32;
      }
      v14[2] = v21 + 1;
      sub_100008040((uint64_t)&v28, (uint64_t)&v14[5 * v21 + 4]);
      v16 += v17;
      --v2;
    }
    while (v2);
    v12 = v26;
    v13 = v27;
  }
  v22 = dispatch thunk of DatabaseManager.executeQuery(_:withParameters:)(v12, v13, v14);
  swift_bridgeObjectRelease(v14);
  v23 = swift_bridgeObjectRelease(v13);
  if ((v22 & 1) == 0)
  {
    v24 = static os_log_type_t.error.getter(v23);
    sub_1000ABCEC();
    v25 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Failed to update observability state store.", 43, 2, _swiftEmptyArrayStorage);

  }
}

uint64_t sub_10014F898@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;

  v2 = sub_100008A18((uint64_t *)&unk_100264760);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1001B76C0;
  v4._countAndFlagsBits = ExtendedUUID.string.getter();
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  *(_QWORD *)(v3 + 56) = &type metadata for String;
  *(_QWORD *)(v3 + 64) = &protocol witness table for String;
  *(_QWORD *)(v3 + 32) = 1598374469;
  *(_QWORD *)(v3 + 40) = 0xE400000000000000;
  v6 = sub_100008A18(&qword_100266E20);
  dispatch thunk of DatabaseManager.singleValueFromQuery<A>(_:parameters:transform:)(&v8, 0xD000000000000036, 0x80000001001F5660, v3, sub_10014FA28, 0, v6);
  swift_bridgeObjectRelease(v3);
  if (v9)
    return sub_100136930(&v8, (uint64_t)a1);
  a1[3] = sub_100008A18(&qword_100266E28);
  result = sub_10013D588(&qword_100266E30, &qword_100266E28, (uint64_t)&protocol conformance descriptor for [A]);
  a1[4] = result;
  *a1 = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10014FA28@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE v22[8];
  _QWORD *v23;

  v4 = a1[3];
  v5 = a1[4];
  sub_10000B748(a1, v4);
  v6 = dispatch thunk of DatabaseCursor.read(_:)(0, v4, v5);
  if (v7)
  {
    v8 = v7;
    v9 = sub_10014217C(v6, v7);
    if (v2)
    {
      swift_errorRelease(v2);
      v11 = swift_bridgeObjectRelease(v8);
    }
    else
    {
      v14 = v9;
      v15 = v10;
      v11 = swift_bridgeObjectRelease(v8);
      if (v14 != 1)
      {
        v23 = _swiftEmptyArrayStorage;
        if (v14)
        {
          v19 = sub_10014EBD0(v14, (uint64_t)&v21, 1);
          sub_10014A3C0((uint64_t)v19);
        }
        if (v15)
        {
          v20 = sub_10014EBD0(v15, (uint64_t)v22, 0);
          sub_10014A3C0((uint64_t)v20);
          swift_bridgeObjectRelease(v15);
        }
        swift_bridgeObjectRelease(v14);
        v13 = v23;
        goto LABEL_7;
      }
    }
    v16 = static os_log_type_t.error.getter(v11);
    sub_1000ABCEC();
    v17 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
    v13 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Failed access observability state store.", 40, 2, _swiftEmptyArrayStorage);

LABEL_7:
    v12 = sub_100008A18(&qword_100266E28);
    goto LABEL_8;
  }
  v12 = sub_100008A18(&qword_100266E28);
  v13 = _swiftEmptyArrayStorage;
LABEL_8:
  a2[3] = v12;
  result = sub_10013D588(&qword_100266E30, &qword_100266E28, (uint64_t)&protocol conformance descriptor for [A]);
  a2[4] = result;
  *a2 = v13;
  return result;
}

uint64_t type metadata accessor for ObservabilityStateStoreDatabase()
{
  return objc_opt_self(_TtC7Metrics31ObservabilityStateStoreDatabase);
}

uint64_t sub_10014FC2C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_10014FCCC(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10014FDB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for Int, &protocol witness table for Int);
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_10013F568(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_10014FE20(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t sub_10014FE2C()
{
  unint64_t result;

  result = qword_100266E38;
  if (!qword_100266E38)
  {
    result = swift_getWitnessTable(&unk_1001B9520, &type metadata for ObservabilityCommunicationCodes);
    atomic_store(result, (unint64_t *)&qword_100266E38);
  }
  return result;
}

uint64_t sub_10014FE70(uint64_t result, uint64_t a2)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_10014FEA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[5];

  v5 = type metadata accessor for TimeRange(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2[15];
  v9 = v2[16];
  sub_10000B748(v2 + 12, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 24))(v30, a1, 0, v8, v9);
  v10 = sub_1001501E0(v30);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v30);
  v30[0] = v10;
  v11 = sub_100008A18(&qword_100266F00);
  v12 = sub_1001504D8();
  if ((Collection.isPopulated.getter(v11, v12) & 1) != 0)
  {
    if (qword_100264E78 != -1)
      swift_once(&qword_100264E78, sub_100150610);
    v13 = type metadata accessor for Logger(0);
    sub_10000ABD8(v13, (uint64_t)qword_10026D208);
    sub_10000BD40(a1, (uint64_t)v7, type metadata accessor for TimeRange);
    v15 = swift_retain(v2, v14);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v28 = swift_slowAlloc(64, -1);
      v30[0] = v28;
      *(_DWORD *)v18 = 136446466;
      v29 = sub_1000A8B30(0x63696E756D6D6F63, 0xED00006E6F697461, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v18 + 4, v18 + 12);
      swift_release(v2);
      *(_WORD *)(v18 + 12) = 2082;
      v19 = sub_10014E218();
      v21 = v20;
      v29 = sub_1000A8B30(v19, v20, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease(v21);
      sub_1000070D8((uint64_t)v7, type metadata accessor for TimeRange);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Generating %{public}s report for %{public}s", (uint8_t *)v18, 0x16u);
      v22 = v28;
      swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_release(v2);
      sub_1000070D8((uint64_t)v7, type metadata accessor for TimeRange);
    }

    v25 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a2, a1, v25);
    v26 = type metadata accessor for ObservabilityCommunicationReport(0);
    *(_QWORD *)(a2 + *(int *)(v26 + 20)) = v10;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a2, 0, 1, v26);
  }
  else
  {
    v23 = type metadata accessor for ObservabilityCommunicationReport(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 1, 1, v23);
    return swift_bridgeObjectRelease(v10);
  }
}

uint64_t sub_1001501E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[64];
  __int128 v11[2];
  _BYTE v12[64];
  __int128 v13[2];

  sub_10000D4D8(v1 + 56, (uint64_t)v13);
  v3 = type metadata accessor for ErrorCollector();
  inited = swift_initStackObject(v3, v12);
  *(_QWORD *)(inited + 56) = sub_100141900((uint64_t)_swiftEmptyArrayStorage);
  sub_100136930(v13, inited + 16);
  sub_10000D4D8(v1 + 16, (uint64_t)v11);
  v5 = swift_initStackObject(v3, v10);
  *(_QWORD *)(v5 + 56) = sub_100141900((uint64_t)_swiftEmptyArrayStorage);
  sub_100136930(v11, v5 + 16);
  sub_10000B748(a1, a1[3]);
  Sequence.forEach(_:)(sub_1001505F8);
  v6 = sub_100147EDC();
  v7 = sub_100147EDC();
  v8 = sub_10013EF60(v7, v6);
  swift_setDeallocating(v5);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v5 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 56));
  swift_setDeallocating(inited);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(inited + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(inited + 56));
  return v8;
}

uint64_t sub_100150328()
{
  _QWORD *v0;

  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 2);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 7);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v0 + 12);
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for ObservabilityCommunicationReporter()
{
  return objc_opt_self(_TtC7Metrics34ObservabilityCommunicationReporter);
}

uint64_t sub_10015037C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;

  v4 = sub_100008A18(&qword_100266EF8);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10014FEA0(a1, (uint64_t)v6);
  v7 = type metadata accessor for ObservabilityCommunicationReport(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    result = sub_100150454((uint64_t)v6);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v7;
    *(_QWORD *)(a2 + 32) = &off_100218020;
    v9 = sub_10011F0DC((_QWORD *)a2);
    return sub_100150494((uint64_t)v6, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100150454(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008A18(&qword_100266EF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100150494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObservabilityCommunicationReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001504D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100266F08;
  if (!qword_100266F08)
  {
    v1 = sub_1000A5AB4(&qword_100266F00);
    result = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100266F08);
  }
  return result;
}

uint64_t sub_100150524(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000BD40(a1, (uint64_t)v4, v5);
  if (swift_getEnumCaseMultiPayload(v4, v2) != 6)
    return sub_1000070D8((uint64_t)v4, type metadata accessor for ObservabilitySignal);
  v6 = *v4;
  swift_bridgeObjectRelease(v4[2]);
  return sub_100148080(v6);
}

uint64_t sub_1001505F8(uint64_t a1)
{
  return sub_100150524(a1);
}

uint64_t sub_100150610()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012FAA4(v0, qword_10026D208);
  sub_10000ABD8(v0, (uint64_t)qword_10026D208);
  return Logger.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
}

int64_t sub_100150690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  int64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  double v9;
  int64_t v10;
  Class v11;
  char v12;
  double v13;
  Class isa;
  int64_t v15;
  char isUniquelyReferenced_nonNull_native;
  double v17;
  Class v18;
  int64_t v19;
  char v20;
  int64_t v21;
  char v22[344];
  int64_t v23;

  v1 = sub_100008A18(&qword_100265FA0);
  inited = swift_initStackObject(v1, v22);
  *(_OWORD *)(inited + 16) = xmmword_1001BA020;
  *(_QWORD *)(inited + 32) = 0x444D4D5F65746164;
  *(_QWORD *)(inited + 40) = 0xEB00000000484844;
  *(_QWORD *)(inited + 48) = sub_100150BE4();
  *(_QWORD *)(inited + 56) = 0xD000000000000018;
  *(_QWORD *)(inited + 64) = 0x80000001001F57D0;
  v3 = v0 + *(int *)(type metadata accessor for ObservabilityHourlyReport(0) + 36);
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0xD000000000000015;
  *(_QWORD *)(inited + 88) = 0x80000001001F57F0;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD000000000000015;
  *(_QWORD *)(inited + 112) = 0x80000001001F5810;
  *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 128) = 0xD000000000000017;
  *(_QWORD *)(inited + 136) = 0x80000001001F5830;
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 152) = 0xD000000000000015;
  *(_QWORD *)(inited + 160) = 0x80000001001F5850;
  *(NSNumber *)(inited + 168) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 176) = 0xD000000000000013;
  *(_QWORD *)(inited + 184) = 0x80000001001F5870;
  *(NSNumber *)(inited + 192) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 200) = 0xD000000000000010;
  *(_QWORD *)(inited + 208) = 0x80000001001F5890;
  *(NSNumber *)(inited + 216) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 224) = 0xD000000000000010;
  *(_QWORD *)(inited + 232) = 0x80000001001F58B0;
  *(NSNumber *)(inited + 240) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 248) = 0x5F64657269707865;
  *(_QWORD *)(inited + 256) = 0xEF73656863746162;
  *(NSNumber *)(inited + 264) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 272) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 280) = 0x80000001001F58D0;
  *(NSNumber *)(inited + 288) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 296) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 304) = 0x80000001001F58F0;
  *(NSNumber *)(inited + 312) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 320) = 0xD000000000000015;
  *(_QWORD *)(inited + 328) = 0x80000001001F5910;
  *(NSNumber *)(inited + 336) = Int._bridgeToObjectiveC()();
  result = sub_10013E6DC(inited);
  v23 = result;
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    v5 = sub_100150E6C(0xD000000000000016, 0x80000001001F5930);
    result = swift_unknownObjectRelease(v5);
    if ((*(_BYTE *)(v3 + 48) & 1) != 0)
      goto LABEL_3;
LABEL_10:
    v13 = round(*(double *)(v3 + 40) / (double)*(uint64_t *)(v3 + 32) * 10.0);
    if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) != 0)
    {
      if (v13 > -9.22337204e18)
      {
        if (v13 < 9.22337204e18)
        {
          result = 100 * (uint64_t)v13;
          if ((unsigned __int128)((uint64_t)v13 * (__int128)100) >> 64 == result >> 63)
          {
            isa = Int._bridgeToObjectiveC()().super.super.isa;
            v15 = v23;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
            v21 = v15;
            sub_1001512EC((uint64_t)isa, 0xD000000000000016, 0x80000001001F5950, isUniquelyReferenced_nonNull_native, &v21);
            v23 = v21;
            result = swift_bridgeObjectRelease(0x8000000000000000);
            if ((*(_BYTE *)(v3 + 24) & 1) != 0)
              goto LABEL_4;
            goto LABEL_15;
          }
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = round(*(double *)v3 * 10.0);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = result;
  result = 100 * (uint64_t)v9;
  if ((unsigned __int128)((uint64_t)v9 * (__int128)100) >> 64 != result >> 63)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v11 = Int._bridgeToObjectiveC()().super.super.isa;
  v12 = swift_isUniquelyReferenced_nonNull_native(v10);
  v21 = v10;
  sub_1001512EC((uint64_t)v11, 0xD000000000000016, 0x80000001001F5930, v12, &v21);
  v23 = v21;
  result = swift_bridgeObjectRelease(0x8000000000000000);
  if ((*(_BYTE *)(v3 + 48) & 1) == 0)
    goto LABEL_10;
LABEL_3:
  v6 = sub_100150E6C(0xD000000000000016, 0x80000001001F5950);
  result = swift_unknownObjectRelease(v6);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
  {
LABEL_4:
    v7 = sub_100150E6C(0xD000000000000016, 0x80000001001F5970);
    swift_unknownObjectRelease(v7);
    return v23;
  }
LABEL_15:
  v17 = round(*(double *)(v3 + 16) * 10.0);
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v17 >= 9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  result = 100 * (uint64_t)v17;
  if ((unsigned __int128)((uint64_t)v17 * (__int128)100) >> 64 == result >> 63)
  {
    v18 = Int._bridgeToObjectiveC()().super.super.isa;
    v19 = v23;
    v20 = swift_isUniquelyReferenced_nonNull_native(v23);
    v21 = v19;
    sub_1001512EC((uint64_t)v18, 0xD000000000000016, 0x80000001001F5970, v20, &v21);
    v8 = v21;
    swift_bridgeObjectRelease(0x8000000000000000);
    return v8;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100150BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = type metadata accessor for TimeZone(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DateComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v13 = sub_10000ABD8(v5, (uint64_t)qword_10026D1E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, v5);
  if (qword_100264E80 != -1)
    swift_once(&qword_100264E80, sub_10015B3D8);
  v14 = sub_10000ABD8(v1, (uint64_t)qword_10026D228);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v14, v1);
  Calendar.dateComponents(in:from:)(v4, v0);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100151448();
  v15 = (void *)NSString.init(stringLiteral:)("%02d%02d%02d", v23, v24, v25);
  v16 = sub_100008A18((uint64_t *)&unk_1002653F0);
  v17 = swift_allocObject(v16, 152, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1001B7630;
  result = DateComponents.month.getter();
  if ((v19 & 1) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  *(_QWORD *)(v17 + 56) = &type metadata for Int;
  *(_QWORD *)(v17 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v17 + 32) = result;
  result = DateComponents.day.getter(result);
  if ((v20 & 1) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_QWORD *)(v17 + 96) = &type metadata for Int;
  *(_QWORD *)(v17 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v17 + 72) = result;
  result = DateComponents.hour.getter();
  if ((v21 & 1) == 0)
  {
    *(_QWORD *)(v17 + 136) = &type metadata for Int;
    *(_QWORD *)(v17 + 144) = &protocol witness table for Int;
    *(_QWORD *)(v17 + 112) = result;
    v22 = NSString.init(format:_:)(v15, v17);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return v22;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100150E6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10002DDCC(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100141530();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_100150F38(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

unint64_t sub_100150F38(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10015110C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_BYTE *)(v11 + v3);
        v13 = (_BYTE *)(v11 + v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1001512EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v10 = (_QWORD *)*a5;
  v12 = sub_10002DDCC(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100141530();
LABEL_7:
    v18 = (_QWORD *)*a5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_unknownObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_100140BA4(v15, a4 & 1);
  v21 = sub_10002DDCC(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*a5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_100151448()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100265FD0;
  if (!qword_100265FD0)
  {
    v1 = objc_opt_self(NSString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100265FD0);
  }
  return result;
}

uint64_t *sub_100151484(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22, a2);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v9 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = a3[9];
    v14 = a3[10];
    v15 = (uint64_t *)((char *)a1 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    v18 = a3[11];
    v19 = a3[12];
    v20 = *(uint64_t *)((char *)a2 + v18);
    *(uint64_t *)((char *)a1 + v18) = v20;
    v21 = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)a1 + v19) = v21;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
  }
  return a1;
}

uint64_t sub_10015157C(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
}

uint64_t sub_1001515EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a3[9];
  v13 = a3[10];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v17 = a3[11];
  v18 = a3[12];
  v19 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v19;
  v20 = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v20;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  return a1;
}

uint64_t sub_1001516B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[9];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v17 = a3[11];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a3[12];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t sub_1001517C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  return a1;
}

uint64_t sub_100151868(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[9];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v21 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[12];
  v23 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t sub_10015193C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100151948);
}

uint64_t sub_100151948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001519C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001519D4);
}

uint64_t sub_1001519D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ObservabilityDailyReport(uint64_t a1)
{
  uint64_t result;

  result = qword_100266F68;
  if (!qword_100266F68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ObservabilityDailyReport);
  return result;
}

uint64_t sub_100151A8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_1001BA0C0;
    v4[5] = &unk_1001BA0C0;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100151B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;

  v1 = v0;
  v2 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v2);
  v66 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for Date(0);
  v67 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v59 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SigningFailure(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v63 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008A18((uint64_t *)&unk_100267080);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v58 - v13;
  __chkstk_darwin(v12);
  v69 = (char *)&v58 - v15;
  v16 = *(void **)(v0 + 16);
  swift_getObjectType(v16);
  v58 = v16;
  v17 = sub_10002DFB0();
  v19 = v18;
  v21 = v20;
  v22 = v1;
  v23 = *(_QWORD *)(v1 + 48);
  v68 = (_QWORD *)(v1 + 24);
  v24 = *sub_10000B748((_QWORD *)(v1 + 24), v23);
  v64 = v19;
  v65 = v17;
  v62 = v21;
  v25 = sub_10002EACC(v17, v19, v21);
  v27 = v26;
  sub_10000B748((_QWORD *)(v24 + 16), *(_QWORD *)(v24 + 40));
  v28 = sub_100134CDC(v25, v27);
  if (v28)
    sub_100138C68(v28, v14);
  else
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1, 1, v5);
  v29 = v22;
  v30 = v60;
  v31 = v69;
  swift_bridgeObjectRelease(v27);
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v32(v14, 1, v5) == 1)
  {
    v33 = sub_10000B748(v68, *(_QWORD *)(v29 + 48));
    sub_10000B748((_QWORD *)(*v33 + 16), *(_QWORD *)(*v33 + 40));
    v34 = sub_100134CDC(0x6146657669746361, 0xED00006572756C69);
    if (v34)
      sub_100138C68(v34, v31);
    else
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v31, 1, 1, v5);
    sub_100008AD8((uint64_t)v14, (uint64_t *)&unk_100267080);
  }
  else
  {
    sub_100138648((uint64_t)v14, (uint64_t)v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v31, 0, 1, v5);
  }
  sub_10015208C((uint64_t)v31, (uint64_t)v11);
  v35 = v32(v11, 1, v5);
  v37 = (uint64_t)v66;
  v36 = v67;
  v61 = v29;
  if (v35 == 1)
  {
    sub_100008AD8((uint64_t)v11, (uint64_t *)&unk_100267080);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v37, 1, 1, v30);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v66, v11, v30);
    sub_10013868C((uint64_t)v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v30);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v37, 1, v30) != 1)
    {
      v38 = v5;
      v40 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v59, v37, v30);
      goto LABEL_15;
    }
  }
  v38 = v5;
  v39 = objc_msgSend(v58, "now");
  v40 = v59;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

  sub_100008AD8(v37, &qword_100262C10);
LABEL_15:
  v41 = (uint64_t)v31;
  v42 = v64;
  v43 = v65;
  v44 = v62;
  v45 = sub_1001520D4(v41, v65, v64, v62);
  v46 = (uint64_t)v63;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v63, v40, v30);
  v47 = (uint64_t *)(v46 + *(int *)(v38 + 20));
  *v47 = v43;
  v47[1] = v42;
  v47[2] = v44;
  *(_QWORD *)(v46 + *(int *)(v38 + 24)) = v45;
  v48 = v61;
  v49 = v68;
  v50 = sub_10000B748(v68, *(_QWORD *)(v61 + 48));
  sub_10000B748((_QWORD *)(*v50 + 16), *(_QWORD *)(*v50 + 40));
  v51 = sub_100138A7C();
  v52 = sub_10002EACC(v43, v42, v44);
  v54 = v53;
  sub_10002F4A4(v51, v52, v53);
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v54);
  v55 = sub_10000B748(v49, *(_QWORD *)(v48 + 48));
  sub_10000B748((_QWORD *)(*v55 + 16), *(_QWORD *)(*v55 + 40));
  v56 = sub_100138A7C();
  sub_10002F4A4(v56, 0x6146657669746361, 0xED00006572756C69);
  swift_bridgeObjectRelease(v56);
  sub_10013868C(v46);
  return sub_100008AD8((uint64_t)v69, (uint64_t *)&unk_100267080);
}

uint64_t sub_100152040()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for SigningObservabilityDiary()
{
  return objc_opt_self(_TtC7Metrics25SigningObservabilityDiary);
}

uint64_t sub_10015208C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18((uint64_t *)&unk_100267080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001520D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  BOOL v21;
  uint64_t v22;

  v8 = sub_100008A18((uint64_t *)&unk_100267080);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SigningFailure(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015208C(a1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100008AD8((uint64_t)v10, (uint64_t *)&unk_100267080);
    return 1;
  }
  sub_100138648((uint64_t)v10, (uint64_t)v14);
  v16 = &v14[*(int *)(v11 + 20)];
  v17 = *(_QWORD *)v16 < a2;
  if (*(_QWORD *)v16 == a2 && (v18 = *((_QWORD *)v16 + 1), v17 = v18 < a3, v18 == a3))
  {
    if (*((_QWORD *)v16 + 2) >= a4)
    {
LABEL_6:
      v15 = *(_QWORD *)&v14[*(int *)(v11 + 24)];
      sub_10013868C((uint64_t)v14);
      return v15;
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  v19 = *(_QWORD *)&v14[*(int *)(v11 + 24)];
  result = sub_10013868C((uint64_t)v14);
  v21 = __OFADD__(v19, 1);
  v15 = v19 + 1;
  if (!v21)
    return v15;
  __break(1u);
  return result;
}

uint64_t sub_100152274()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE v17[56];

  v1 = *(_QWORD **)(v0 + OBJC_IVAR____TtC7Metrics27APSigningObservabilityDiary_diary);
  v2 = sub_10000B748(v1 + 3, v1[6]);
  sub_10000B748((_QWORD *)(*v2 + 16), *(_QWORD *)(*v2 + 40));
  v3 = sub_100008A18(&qword_100265B60);
  inited = swift_initStackObject(v3, v17);
  *(_OWORD *)(inited + 16) = xmmword_1001B76C0;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x80000001001F4B50;
  sub_10002DF74();
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  v5 = sub_10002E7FC(inited);
  sub_10002F4A4(v5, 0xD000000000000012, 0x80000001001F4B50);
  swift_bridgeObjectRelease(v5);
  v6 = sub_10000B748(v1 + 3, v1[6]);
  swift_getObjectType(v1[2]);
  v7 = sub_10002DFB0();
  v9 = v8;
  v11 = v10;
  sub_10000B748((_QWORD *)(*v6 + 16), *(_QWORD *)(*v6 + 40));
  v12 = sub_10002EACC(v7, v9, v11);
  v14 = v13;
  sub_10002F230(v12, v13);
  swift_bridgeObjectRelease(v14);
  v15 = sub_10000B748(v1 + 3, v1[6]);
  sub_10000B748((_QWORD *)(*v15 + 16), *(_QWORD *)(*v15 + 40));
  return sub_10002F230(0x6146657669746361, 0xED00006572756C69);
}

id sub_1001523FC()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  id v4;
  objc_class *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  uint64_t v22;
  objc_super v23;
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  v1 = OBJC_IVAR____TtC7Metrics27APSigningObservabilityDiary_diary;
  v2 = objc_allocWithZone((Class)APSystemClock);
  v3 = v0;
  v4 = objc_msgSend(v2, "init");
  v5 = (objc_class *)type metadata accessor for PropertyListFileManagerFileSystem(0);
  v25 = (uint64_t)v5;
  v26 = &off_1002167E8;
  v24[0] = objc_msgSend(objc_allocWithZone(v5), "init");
  v6 = type metadata accessor for SigningObservabilityPropertyListFileStore();
  v7 = (_QWORD *)swift_allocObject(v6, 56, 7);
  v8 = sub_100136C8C((uint64_t)v24, (uint64_t)v5);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = *v10;
  v7[5] = v5;
  v7[6] = &off_1002167E8;
  v7[2] = v12;
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v24);
  v25 = v6;
  v26 = &off_1002169C8;
  v24[0] = v7;
  v13 = type metadata accessor for SigningObservabilityDiary();
  v14 = (_QWORD *)swift_allocObject(v13, 64, 7);
  v15 = sub_100136C8C((uint64_t)v24, v6);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = *v17;
  v14[6] = v6;
  v14[7] = &off_1002169C8;
  v14[2] = v4;
  v14[3] = v19;
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v24);
  *(_QWORD *)&v0[v1] = v14;

  v20 = (objc_class *)type metadata accessor for APSigningObservabilityDiary();
  v23.receiver = v3;
  v23.super_class = v20;
  return objc_msgSendSuper2(&v23, "init");
}

id sub_1001525D8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for APSigningObservabilityDiary();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for APSigningObservabilityDiary()
{
  return objc_opt_self(_TtC7Metrics27APSigningObservabilityDiary);
}

uint64_t type metadata accessor for RandomTimeRangeOffset()
{
  return objc_opt_self(_TtC7Metrics21RandomTimeRangeOffset);
}

uint64_t sub_100152658(uint64_t a1)
{
  uint64_t result;
  float v2;

  result = sub_100152690(a1, 0.0, 1.0);
  if (v2 < 0.0 || v2 >= 1.0)
    __break(1u);
  return result;
}

uint64_t sub_100152690(uint64_t result, float a2, float a3)
{
  float v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE_INT(a3 - a2) & 0x7F800000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = swift_stdlib_random(&v7, 8);
  if ((float)((float)(v5 * (float)((float)(v7 & 0xFFFFFF) * 0.000000059605)) + a2) == a3)
    return sub_100152690(v6, a2, a3);
  return result;
}

uint64_t sub_100152738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100152744(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *sub_10015276C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_1001527A8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *sub_10015280C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100152850(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100152898(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for Histogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100131764(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Histogram);
}

_QWORD *initializeBufferWithCopyOfBuffer for HistogramCounts(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for HistogramCounts(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for HistogramCounts(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for HistogramCounts(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HistogramCounts(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HistogramCounts(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for Histogram.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100131764(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Histogram.Configuration);
}

uint64_t sub_100152A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v13 = 0;
  v14 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  v5._countAndFlagsBits = 0x3A6E6F6973726576;
  v5._object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 0x74656B637562202CLL;
  v8._object = (void *)0xEB00000000203A73;
  String.append(_:)(v8);
  v12 = a2;
  v9 = type metadata accessor for Array(0, a3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v12, v9, WitnessTable);
  return v13;
}

uint64_t sub_100152B18(uint64_t a1)
{
  uint64_t *v1;

  return sub_100152A18(*v1, v1[1], *(_QWORD *)(a1 + 16));
}

uint64_t sub_100152B28(uint64_t a1)
{
  return _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(a1 + 8));
}

uint64_t sub_100152B30(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

_QWORD *sub_100152B78(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  sub_100131928(a1 + 1, a2 + 1);
  return a1;
}

__n128 sub_100152BA4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100152BB8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t sub_100152C00(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100152C48(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AvailableBucket(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100131764(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AvailableBucket);
}

void sub_100152CA4(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = a1;
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
  {
    v2 = *(double *)v1;
    if (*(double *)v1 > a1)
      v2 = a1;
  }
  *(double *)v1 = v2;
  *(_BYTE *)(v1 + 8) = 0;
  v3 = a1;
  if ((*(_BYTE *)(v1 + 24) & 1) == 0)
  {
    v3 = *(double *)(v1 + 16);
    if (v3 <= a1)
      v3 = a1;
  }
  *(double *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 24) = 0;
  if ((*(_BYTE *)(v1 + 48) & 1) == 0)
    a1 = *(double *)(v1 + 40) + a1;
  *(double *)(v1 + 40) = a1;
  *(_BYTE *)(v1 + 48) = 0;
  v4 = *(_QWORD *)(v1 + 32);
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    *(_QWORD *)(v1 + 32) = v6;
}

uint64_t sub_100152D14@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t (**v41)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  char v52;
  double v53;
  double v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int *v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (**v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  double v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[4];

  v3 = v2;
  v79 = a1;
  v76 = type metadata accessor for DateComponents(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v74 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for Calendar(0);
  v6 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008A18(&qword_100262C10);
  __chkstk_darwin(v9);
  v71 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v77 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v67 = (char *)&v65 - v15;
  v69 = type metadata accessor for TimeRange(0);
  __chkstk_darwin(v69);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100264E78 != -1)
    swift_once(&qword_100264E78, sub_100150610);
  v18 = type metadata accessor for Logger(0);
  sub_10000ABD8(v18, (uint64_t)qword_10026D208);
  sub_10000BD40(v79, (uint64_t)v17, type metadata accessor for TimeRange);
  v20 = swift_retain(v2, v19);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  v23 = os_log_type_enabled(v21, v22);
  v68 = a2;
  v78 = v11;
  v72 = v6;
  v70 = v8;
  if (v23)
  {
    v24 = v14;
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v84 = v26;
    *(_DWORD *)v25 = 136446466;
    v93 = sub_1000A8B30(0x796C72756F68, 0xE600000000000000, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v25 + 4, v25 + 12);
    swift_release(v2);
    *(_WORD *)(v25 + 12) = 2082;
    v27 = sub_10014E218();
    v29 = v28;
    v93 = sub_1000A8B30(v27, v28, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease(v29);
    sub_1000070D8((uint64_t)v17, type metadata accessor for TimeRange);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Generating %{public}s report for %{public}s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    v30 = v25;
    v14 = v24;
    v11 = v78;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    swift_release(v2);
    sub_1000070D8((uint64_t)v17, type metadata accessor for TimeRange);
  }

  v31 = v3[5];
  v32 = v3[6];
  sub_10000B748(v3 + 2, v31);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 24))(v100, v79, 1, v31, v32);
  v99 = 0;
  sub_10000B748(v3 + 7, v3[10]);
  v93 = sub_10014ED48();
  v94 = v93;
  v95 = v93;
  v96 = (char *)v93;
  v97 = 0;
  v98 = 0;
  v91 = 0;
  v92 = 0;
  v84 = 0;
  v85 = 1;
  v86 = 0;
  v87 = 1;
  v88 = 0;
  v89 = 0.0;
  v90 = 1;
  v83 = 0;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v33 = sub_10000B748(v100, v100[3]);
  __chkstk_darwin(v33);
  *(&v65 - 10) = (uint64_t)&v93;
  *(&v65 - 9) = (uint64_t)&v84;
  *(&v65 - 8) = (uint64_t)&v91;
  *(&v65 - 7) = (uint64_t)&v92;
  *(&v65 - 6) = (uint64_t)&v99;
  *(&v65 - 5) = (uint64_t)&v81;
  *(&v65 - 4) = (uint64_t)&v82;
  *(&v65 - 3) = (uint64_t)&v80;
  *(&v65 - 2) = (uint64_t)&v83;
  Sequence.forEach(_:)(sub_1001539D8);
  sub_10000B748(v3 + 7, v3[10]);
  if (qword_100264E60 != -1)
    swift_once(&qword_100264E60, sub_10012F9C0);
  v34 = v73;
  v35 = sub_10000ABD8(v73, (uint64_t)qword_10026D1E0);
  v36 = v72;
  v37 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v70, v35, v34);
  v38 = v79;
  v39 = v74;
  sub_1000093B8(*(_BYTE *)(v79 + *(int *)(v69 + 20)));
  v40 = v71;
  Calendar.date(byAdding:to:wrappingComponents:)(v39, v38, 0);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v39, v76);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v34);
  v41 = v77;
  result = v77[6](v40, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v43 = v41[4];
    v44 = (uint64_t)v67;
    v43(v67, (uint64_t)v40, v11);
    sub_10014EEA4(v44, v94);
    ((void (*)(uint64_t, uint64_t))v41[1])(v44, v11);
    v45 = v99;
    if (v99 > 0 || v97 || v98 || v88 || v83 > 0 || v82 > 0 || v81 > 0 || v80 >= 1)
    {
      v46 = v41[2];
      v77 = (uint64_t (**)(char *, uint64_t, uint64_t))v14;
      v46(v14, v79, v11);
      v47 = v93;
      v48 = v94;
      v49 = v95;
      v50 = v88;
      v51 = v89;
      v52 = v90;
      v79 = v84;
      LODWORD(v76) = v85;
      v75 = v86;
      LODWORD(v74) = v87;
      v73 = v92;
      v72 = v91;
      v71 = v96;
      v70 = v97;
      v69 = v98;
      if ((v90 & 1) == 0)
      {
        v53 = v89 / (double)v88;
        v54 = COERCE_DOUBLE(sub_100153A0C(v88));
        if ((v55 & 1) != 0)
          v54 = 1.0;
        v51 = v53 * v54;
      }
      v56 = v83;
      v57 = v82;
      v66 = v81;
      v67 = (char *)v80;
      v58 = v68;
      v43(v68, (uint64_t)v77, v78);
      v59 = (int *)type metadata accessor for ObservabilityHourlyReport(0);
      *(_QWORD *)&v58[v59[5]] = v45;
      v60 = (uint64_t *)&v58[v59[6]];
      *v60 = v47;
      v60[1] = v48;
      v61 = v71;
      v60[2] = v49;
      v60[3] = (uint64_t)v61;
      v62 = v69;
      v60[4] = (uint64_t)v70;
      v60[5] = v62;
      *(_QWORD *)&v58[v59[7]] = v73;
      *(_QWORD *)&v58[v59[8]] = v72;
      v63 = &v58[v59[9]];
      *(_QWORD *)v63 = v79;
      v63[8] = v76;
      *((_QWORD *)v63 + 2) = v75;
      v63[24] = (char)v74;
      *((_QWORD *)v63 + 4) = v50;
      *((double *)v63 + 5) = v51;
      v63[48] = v52;
      *(_QWORD *)&v58[v59[10]] = v56;
      *(_QWORD *)&v58[v59[11]] = v57;
      *(_QWORD *)&v58[v59[12]] = v66;
      *(_QWORD *)&v58[v59[13]] = v67;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v59 - 1) + 56))(v58, 0, 1, v59);
    }
    else
    {
      v64 = type metadata accessor for ObservabilityHourlyReport(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v68, 1, 1, v64);
    }
    return _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v100);
  }
  return result;
}

uint64_t sub_1001535D8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  char v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;

  v28 = a8;
  v15 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000BD40(a1, (uint64_t)v17, v18);
  result = swift_getEnumCaseMultiPayload(v17, v15);
  switch((int)result)
  {
    case 1:
      v20 = *v17;
      v21 = v17[1];
      v22 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
      sub_100153800(v21);
      sub_100152CA4(*(double *)&v20);
      if (__OFADD__(*a4, 1))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      v23 = (uint64_t)v17 + v22;
      ++*a4;
      v24 = type metadata accessor for BatchID;
      return sub_1000070D8(v23, v24);
    case 2:
      result = sub_100153800(*v17);
      if (__OFADD__(*a5, 1))
        goto LABEL_22;
      ++*a5;
      return result;
    case 3:
      if (__OFADD__(*a6, 1))
        goto LABEL_23;
      ++*a6;
      v24 = type metadata accessor for BatchID;
LABEL_9:
      v23 = (uint64_t)v17;
      return sub_1000070D8(v23, v24);
    case 6:
      v25 = *((_BYTE *)v17 + 8);
      result = swift_bridgeObjectRelease(v17[2]);
      if ((v25 & 1) == 0)
      {
        if (!__OFADD__(*a7, 1))
        {
          ++*a7;
          return result;
        }
LABEL_26:
        __break(1u);
        JUMPOUT(0x1001537E0);
      }
      if (!__OFADD__(*v28, 1))
      {
        ++*v28;
        return result;
      }
      goto LABEL_25;
    case 7:
      v26 = a10;
      v27 = *a10 + *v17;
      if (!__OFADD__(*a10, *v17))
        goto LABEL_18;
      __break(1u);
LABEL_17:
      v26 = a9;
      v27 = *a9 + 1;
      if (__OFADD__(*a9, 1))
        goto LABEL_24;
LABEL_18:
      *v26 = v27;
      return result;
    case 8:
      goto LABEL_17;
    default:
      v24 = type metadata accessor for ObservabilitySignal;
      goto LABEL_9;
  }
}

uint64_t sub_100153800(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1[1];
  v3 = v2 <= result;
  if (v2 < result)
  {
    v4 = v1 + 4;
    v5 = v1[4];
    v6 = __OFADD__(v5, 1);
    v7 = v5 + 1;
    v3 = (v7 < 0) ^ v6 | (v7 == 0);
    if (!v6)
    {
LABEL_7:
      *v4 = v7;
      goto LABEL_8;
    }
    __break(1u);
  }
  if (!v3)
  {
    v4 = v1 + 5;
    v8 = v1[5];
    v6 = __OFADD__(v8, 1);
    v7 = v8 + 1;
    if (v6)
    {
      __break(1u);
      return result;
    }
    goto LABEL_7;
  }
LABEL_8:
  v9 = v1[2];
  v10 = v1[3];
  if (v9 >= result)
    v9 = result;
  v1[1] = result;
  v1[2] = v9;
  if (v10 <= result)
    v11 = result;
  else
    v11 = v10;
  v1[3] = v11;
  return result;
}

uint64_t type metadata accessor for ObservabilityHourlyReporter()
{
  return objc_opt_self(_TtC7Metrics27ObservabilityHourlyReporter);
}

uint64_t sub_10015387C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;

  v4 = sub_100008A18(&qword_100267388);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100152D14(a1, v6);
  v7 = type metadata accessor for ObservabilityHourlyReport(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    result = sub_100153954((uint64_t)v6);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v7;
    *(_QWORD *)(a2 + 32) = &off_100217730;
    v9 = sub_10011F0DC((_QWORD *)a2);
    return sub_100153994((uint64_t)v6, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100153954(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008A18(&qword_100267388);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100153994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObservabilityHourlyReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001539D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001535D8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD **)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD **)(v1 + 56), *(_QWORD **)(v1 + 64), *(uint64_t **)(v1 + 72), *(uint64_t **)(v1 + 80));
}

uint64_t sub_100153A0C(uint64_t result)
{
  double v1;

  v1 = (double)result;
  if ((double)result >= 9.22337204e18)
  {
    *(double *)&result = 0.0;
    return result;
  }
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if ((uint64_t)v1 == result)
    *(double *)&result = (double)result;
  else
    *(double *)&result = 0.0;
  return result;
}

uint64_t sub_100153A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSString v29;
  id v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  NSString v41;
  id v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  __n128 v50;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];
  _BYTE v62[16];
  _BYTE v63[16];
  _BYTE v64[16];
  unint64_t v65;
  char v66;
  _QWORD v67[2];
  unint64_t v68;
  char v69;
  _QWORD v70[3];

  v3 = v2;
  v59 = a1;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v55 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v54 = (char *)&v52 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v52 - v11;
  v13 = sub_100008A18(&qword_100262C10);
  v14 = __chkstk_darwin(v13);
  v56 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v52 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v52 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v52 - v22;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v24((char *)&v52 - v22, 1, 1, v5);
  v60 = a2;
  v24((char *)a2, 1, 1, v5);
  sub_1001444A8(v3, (uint64_t)v64, &qword_1002674D0);
  v25 = sub_1001444A8((uint64_t)v64, (uint64_t)&v65, &qword_1002674D0);
  v58 = v6;
  v57 = v12;
  if ((v66 & 1) == 0)
  {
    v36 = v65;
    v37 = static Date.now.getter(v25);
    v37.n128_u64[0] = v36;
    Date.addingTimeInterval(_:)(v37);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    sub_100008AD8((uint64_t)v23, &qword_100262C10);
    v24(v21, 0, 1, v5);
    sub_1001444A8((uint64_t)v21, (uint64_t)v23, &qword_100262C10);
    v26 = v60;
    v27 = (uint64_t)v21;
    goto LABEL_10;
  }
  v53 = v18;
  sub_1001444A8(v3 + 16, (uint64_t)v63, &qword_100266230);
  sub_1001444A8((uint64_t)v63, (uint64_t)v67, &qword_100266230);
  v26 = v60;
  v27 = (uint64_t)v21;
  if (!v67[1])
    goto LABEL_10;
  v28 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v28, "dateFromString:", v29);

  if (!v30)
  {
    v34 = (uint64_t)v53;
    v24(v53, 1, 1, v5);
    v27 = (uint64_t)v21;
    goto LABEL_8;
  }
  v31 = v57;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v30);

  v32 = v58;
  v33 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  v34 = (uint64_t)v53;
  v33(v53, v31, v5);
  v24((char *)v34, 0, 1, v5);
  v27 = (uint64_t)v21;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1, v5) == 1)
  {
LABEL_8:
    sub_100008AD8(v34, &qword_100262C10);
    goto LABEL_9;
  }
  sub_100008AD8((uint64_t)v23, &qword_100262C10);
  v35 = v54;
  v33(v54, (char *)v34, v5);
  v33(v23, v35, v5);
  v24(v23, 0, 1, v5);
LABEL_9:
  v26 = v60;
LABEL_10:
  sub_1001444A8(v3 + 32, (uint64_t)v62, &qword_1002674D0);
  v38 = sub_1001444A8((uint64_t)v62, (uint64_t)&v68, &qword_1002674D0);
  if ((v69 & 1) == 0)
  {
    v48 = v68;
    v49 = v57;
    v50 = static Date.now.getter(v38);
    v50.n128_u64[0] = v48;
    Date.addingTimeInterval(_:)(v50);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v49, v5);
    sub_100008AD8(v26, &qword_100262C10);
    v24((char *)v27, 0, 1, v5);
    sub_1001444A8(v27, v26, &qword_100262C10);
    return sub_1001444A8((uint64_t)v23, v59, &qword_100262C10);
  }
  sub_1001444A8(v3 + 48, (uint64_t)v61, &qword_100266230);
  sub_1001444A8((uint64_t)v61, (uint64_t)v70, &qword_100266230);
  if (v70[1])
  {
    v39 = v26;
    v40 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v40, "dateFromString:", v41);

    if (v42)
    {
      v43 = v57;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v42);

      v44 = v58;
      v45 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
      v46 = (uint64_t)v56;
      v45(v56, v43, v5);
      v24((char *)v46, 0, 1, v5);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v46, 1, v5) != 1)
      {
        sub_100008AD8(v39, &qword_100262C10);
        v47 = v55;
        v45(v55, (char *)v46, v5);
        v45((char *)v39, v47, v5);
        v24((char *)v39, 0, 1, v5);
        return sub_1001444A8((uint64_t)v23, v59, &qword_100262C10);
      }
    }
    else
    {
      v46 = (uint64_t)v56;
      v24(v56, 1, 1, v5);
    }
    sub_100008AD8(v46, &qword_100262C10);
  }
  return sub_1001444A8((uint64_t)v23, v59, &qword_100262C10);
}

uint64_t sub_100154074(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_100008A18(&qword_100267518);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000B748(a1, v9);
  v11 = sub_100155B94();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PlannerTestParams.CodingKeys, &type metadata for PlannerTestParams.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((unsigned __int8 *)v3 + 8);
  v25 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v25, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v24 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v24, v5);
    v16 = v3[4];
    v17 = *((unsigned __int8 *)v3 + 40);
    v23 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v23, v5);
    v18 = v3[6];
    v19 = v3[7];
    v22 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001541E0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100154210 + 4 * byte_1001BA250[*v0]))(0x79616C6544776F6CLL, 0xE800000000000000);
}

uint64_t sub_100154210()
{
  return 0x656D6954776F6CLL;
}

uint64_t sub_100154228()
{
  return 0x616C654468676968;
}

uint64_t sub_100154244()
{
  return 0x656D695468676968;
}

uint64_t sub_100154258@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001557D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10015427C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100154288(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100155B94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001542B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100155B94();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001542D8@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_100155994(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_100154318(_QWORD *a1)
{
  return sub_100154074(a1);
}

void sub_100154350()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  NSString v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;

  v1 = (void *)objc_opt_self(APTestingRig);
  v2 = objc_msgSend(v1, "sharedInstance");
  if (v2)
  {
    v4 = v2;
    swift_retain(v0, v3);
    v5 = objc_msgSend(v1, "sharedInstance");
    if (v5)
    {
      v6 = v5;
      v7 = String._bridgeToObjectiveC()();
      v8 = swift_allocObject(&unk_1002178D0, 32, 7);
      *(_QWORD *)(v8 + 16) = sub_100155468;
      *(_QWORD *)(v8 + 24) = v0;
      v12[4] = sub_1001554A4;
      v13 = v8;
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 1107296256;
      v12[2] = sub_100155378;
      v12[3] = &unk_1002178E8;
      v9 = _Block_copy(v12);
      v10 = v13;
      swift_retain(v0, v11);
      swift_release(v10);
      objc_msgSend(v6, "subscribeForMessage:handler:", v7, v9);
      _Block_release(v9);

      swift_release(v0);
    }
    else
    {

      swift_release(v0);
    }
  }
}

uint64_t sub_1001544C0(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  BOOL v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v49 = a2;
  v47 = type metadata accessor for PeriodicWorkRequest(0);
  __chkstk_darwin(v47);
  v48 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD **)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v46 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v50 = (char *)&v45 - v8;
  v9 = sub_100008A18(&qword_1002674C8);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008A18(&qword_100262C10);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v45 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v45 - v19;
  v21 = a1[1];
  v51 = *a1;
  v52 = v21;
  v22 = a1[3];
  v53 = a1[2];
  v54 = v22;
  sub_100153A6C((uint64_t)&v45 - v19, (uint64_t)v18);
  v23 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_1001444A8((uint64_t)v20, (uint64_t)v11, &qword_100262C10);
  v24 = v4;
  sub_1001444A8((uint64_t)v18, v23, &qword_100262C10);
  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v5[6];
  if (v25((uint64_t)v11, 1, v4) != 1)
  {
    sub_10000CE28((uint64_t)v11, (uint64_t)v15);
    v29 = v25(v23, 1, v4);
    v30 = (void (*)(char *, char *, uint64_t))v5[4];
    v31 = v50;
    v30(v50, v15, v24);
    v32 = v29 == 1;
    v33 = v31;
    if (!v32)
    {
      v38 = v46;
      v30(v46, (char *)v23, v24);
      v39 = sub_100008A18(&qword_100266AB0);
      v40 = (uint64_t)v48;
      v41 = &v48[*(int *)(v39 + 48)];
      v42 = (void (*)(char *, char *, uint64_t))v5[2];
      v42(v48, v33, v24);
      v42(v41, v38, v24);
      swift_storeEnumTagMultiPayload(v40, v47, 2);
      sub_10000C1D4(v40);
      sub_1000070D8(v40, type metadata accessor for PeriodicWorkRequest);
      v43 = (void (*)(char *, uint64_t))v5[1];
      v43(v38, v24);
      v43(v33, v24);
LABEL_9:
      v28 = &qword_100262C10;
      v27 = 19279;
      goto LABEL_10;
    }
    v34 = (uint64_t)v48;
    ((void (*)(char *, char *, uint64_t))v5[2])(v48, v31, v24);
    v35 = v34;
    v36 = v47;
    v37 = 0;
LABEL_8:
    swift_storeEnumTagMultiPayload(v35, v36, v37);
    sub_10000C1D4(v34);
    sub_1000070D8(v34, type metadata accessor for PeriodicWorkRequest);
    ((void (*)(char *, uint64_t))v5[1])(v33, v24);
    goto LABEL_9;
  }
  v26 = v50;
  if (v25(v23, 1, v24) != 1)
  {
    v33 = v26;
    ((void (*)(char *, uint64_t, uint64_t))v5[4])(v26, v23, v24);
    v34 = (uint64_t)v48;
    ((void (*)(char *, char *, uint64_t))v5[2])(v48, v26, v24);
    v35 = v34;
    v36 = v47;
    v37 = 1;
    goto LABEL_8;
  }
  v27 = 0x726F727245;
  v28 = &qword_1002674C8;
LABEL_10:
  sub_100008AD8((uint64_t)v11, v28);
  return v27;
}

uint64_t sub_100154880(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  return sub_1001548B8(a2, a3, a4);
}

uint64_t sub_1001548B8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  _BYTE v16[24];

  if (qword_100264E78 != -1)
    swift_once(&qword_100264E78, sub_100150610);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000ABD8(v5, (uint64_t)qword_10026D208);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Starting work…", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = swift_beginAccess(a1 + 56, v16, 0, 0);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = v11 + 32;
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 56));
    do
    {
      sub_10000D4D8(v13, (uint64_t)v15);
      sub_10000B748(v15, v15[3]);
      sub_100137300();
      _s7Metrics31ObservabilitySignalDeserializerVwxx_0(v15);
      v13 += 40;
      --v12;
    }
    while (v12);
    v10 = swift_bridgeObjectRelease(v11);
  }
  a3(v10);
  return sub_10000B1B4();
}

uint64_t sub_100154A28()
{
  uint64_t v0;

  sub_10003E238(v0 + 16);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v0 + 32));
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v0 + 72));

  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for ObservabilityPeriodicPlanner()
{
  return objc_opt_self(_TtC7Metrics28ObservabilityPeriodicPlanner);
}

uint64_t sub_100154A84(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100154D98(a1, a2, a3, a4, a5, a6, &qword_1002674D8, type metadata accessor for ObservabilityStateDumper.ObservabilityStateDumperParams, &qword_1002674E0, (uint64_t)&unk_1001B8970);
}

uint64_t sub_100154AC4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t (*a5)(Swift::String *))
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *object;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void (*v31)(_QWORD);
  _QWORD v32[2];
  _QWORD v33[3];
  char v34[8];
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[24];
  uint64_t v51;

  sub_100155048(a1, a2, &v43);
  v31 = a3;
  v7 = v43;
  v8 = BYTE8(v43);
  v10 = v44;
  v9 = v45;
  v11 = v46;
  v12 = v47;
  v13 = v49;
  v30 = v48;
  sub_1001444A8((uint64_t)&v43, (uint64_t)v50, &qword_1002674B0);
  if (v51 == 1)
  {
    v14 = sub_1001554F0();
    v15 = swift_allocError(&type metadata for TestingRigError, v14, 0, 0);
    *v16 = 0xD00000000000001DLL;
    v16[1] = 0x80000001001F5AC0;
    swift_willThrow();
    v35 = v15;
    swift_errorRetain(v15);
    v18 = sub_100008A18(&qword_1002674A8);
    if ((swift_dynamicCast(&v36, &v35, v18, &type metadata for TestingRigError, 0) & 1) != 0)
    {
      swift_errorRelease(v15);
      object = v36._object;
      strcpy((char *)v32, "Parse Error: ");
      HIWORD(v32[1]) = -4864;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(object);
      ((void (*)(_QWORD, _QWORD))v31)(v32[0], v32[1]);
      swift_bridgeObjectRelease(v32[1]);
      v20 = v35;
    }
    else
    {
      swift_errorRelease(v35);
      swift_getErrorValue(v15, v34, v33);
      v21 = Error.localizedDescription.getter(v33[1], v33[2]);
      v23 = v22;
      v24 = String.debugDescription.getter(v21);
      v26 = v25;
      swift_bridgeObjectRelease(v23);
      ((void (*)(uint64_t, uint64_t))v31)(v24, v26);
      swift_bridgeObjectRelease(v26);
      v20 = v15;
    }
    return swift_errorRelease(v20);
  }
  else
  {
    v36._countAndFlagsBits = v7;
    LOBYTE(v36._object) = v8 & 1;
    v37 = v10;
    v38 = v9;
    v39 = v11;
    v40 = v12 & 1;
    v41 = v30;
    v42 = v13;
    v17 = a5(&v36);
    v28 = v27;
    v31(v17);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v9);
    return swift_bridgeObjectRelease(v13);
  }
}

uint64_t sub_100154D18(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100154D98(a1, a2, a3, a4, a5, a6, &qword_1002674F8, type metadata accessor for ObservabilityReportWorkerParamsTime, &qword_100267500, (uint64_t)&unk_1001BAE20);
}

uint64_t sub_100154D58(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100154D98(a1, a2, a3, a4, a5, a6, &qword_1002674E8, type metadata accessor for ObservabilityReportWorkerParamsRange, &qword_1002674F0, (uint64_t)&unk_1001BAE48);
}

uint64_t sub_100154D98(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t (*a8)(uint64_t), unint64_t *a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(char *);
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *object;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[3];
  void (*v40)(_QWORD);
  _QWORD v41[2];
  _QWORD v42[3];
  char v43[8];
  Swift::String v44;
  uint64_t v45;

  v39[0] = a5;
  v39[1] = a6;
  v39[2] = a4;
  v40 = a3;
  v14 = sub_100008A18(a7);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = a8(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)v39 - v19;
  sub_1001551BC(a1, a2, a8, a9, a10, v16);
  v21 = (uint64_t (*)(char *))v39[0];
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_100008AD8((uint64_t)v16, a7);
    v22 = sub_1001554F0();
    v23 = swift_allocError(&type metadata for TestingRigError, v22, 0, 0);
    *v24 = 0xD00000000000001DLL;
    v24[1] = 0x80000001001F5AC0;
    swift_willThrow();
    v45 = v23;
    swift_errorRetain(v23);
    v26 = sub_100008A18(&qword_1002674A8);
    if ((swift_dynamicCast(&v44, &v45, v26, &type metadata for TestingRigError, 0) & 1) != 0)
    {
      swift_errorRelease(v23);
      object = v44._object;
      strcpy((char *)v41, "Parse Error: ");
      HIWORD(v41[1]) = -4864;
      String.append(_:)(v44);
      swift_bridgeObjectRelease(object);
      v28 = v41[1];
      ((void (*)(_QWORD, _QWORD))v40)(v41[0], v41[1]);
      swift_bridgeObjectRelease(v28);
      v29 = v45;
    }
    else
    {
      swift_errorRelease(v45);
      swift_getErrorValue(v23, v43, v42);
      v30 = Error.localizedDescription.getter(v42[1], v42[2]);
      v32 = v31;
      v33 = String.debugDescription.getter(v30);
      v35 = v34;
      swift_bridgeObjectRelease(v32);
      ((void (*)(uint64_t, uint64_t))v40)(v33, v35);
      swift_bridgeObjectRelease(v35);
      v29 = v23;
    }
    return swift_errorRelease(v29);
  }
  else
  {
    sub_10000BCFC((uint64_t)v16, (uint64_t)v20, a8);
    v25 = v21(v20);
    v37 = v36;
    v40(v25);
    swift_bridgeObjectRelease(v37);
    return sub_1000070D8((uint64_t)v20, a8);
  }
}

uint64_t sub_100155048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  __int128 v22;
  _OWORD v23[4];

  v7 = type metadata accessor for String.Encoding(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7);
  v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = xmmword_1001BA470;
  v13 = 0uLL;
  if (a2)
  {
    v22 = xmmword_1001BA470;
    v14 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v15 = JSONDecoder.init()();
    static String.Encoding.utf8.getter(v15);
    v16 = String.data(using:allowLossyConversion:)(v11, 0, a1, a2);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if (v18 >> 60 == 15)
    {
      result = swift_release(v15);
      v19 = 0uLL;
      v20 = 0uLL;
      v12 = v22;
      v13 = 0uLL;
    }
    else
    {
      v21 = sub_100155534();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v23, &type metadata for PlannerTestParams, v16, v18, &type metadata for PlannerTestParams, v21);
      sub_1000ABBF0(v16, v18);
      result = swift_release(v15);
      if (v3)
        return result;
      v13 = v23[0];
      v12 = v23[1];
      v19 = v23[2];
      v20 = v23[3];
    }
  }
  else
  {
    v19 = 0uLL;
    v20 = 0uLL;
  }
  *a3 = v13;
  a3[1] = v12;
  a3[2] = v19;
  a3[3] = v20;
  return result;
}

uint64_t sub_1001551BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;

  v28 = a4;
  v12 = type metadata accessor for String.Encoding(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v27 = a5;
    v16 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v17 = JSONDecoder.init()();
    static String.Encoding.utf8.getter();
    v18 = String.data(using:allowLossyConversion:)(v15, 0, a1, a2);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v21 = a3(0);
    v22 = v21;
    if (v20 >> 60 == 15)
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a6, 1, 1, v21);
    }
    else
    {
      v25 = sub_1000A3560(v28, a3, v27);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(a6, v22, v18, v20, v22, v25);
      if (!v6)
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a6, 0, 1, v22);
      sub_1000ABBF0(v18, v20);
    }
    return swift_release(v17);
  }
  else
  {
    v23 = a3(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a6, 1, 1, v23);
  }
}

uint64_t sub_100155378(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, void (*)(uint64_t, void *), uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, void *), uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2, a2);
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = _Block_copy(a3);
  v10 = swift_allocObject(&unk_100217920, 24, 7);
  *(_QWORD *)(v10 + 16) = v9;
  swift_retain(v4, v11);
  v5(v6, v8, sub_1001554E8, v10);
  swift_release(v4);
  swift_release(v10);
  return swift_bridgeObjectRelease(v8);
}

void sub_100155424(uint64_t a1, NSString a2, uint64_t a3)
{
  id v4;

  if (a2)
    a2 = String._bridgeToObjectiveC()();
  v4 = a2;
  (*(void (**)(uint64_t))(a3 + 16))(a3);

}

uint64_t sub_100155468(__int128 *a1)
{
  uint64_t v1;

  return sub_1001544C0(a1, v1);
}

uint64_t sub_100155480()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001554A4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;

  return sub_100154AC4(a1, a2, a3, a4, *(uint64_t (**)(Swift::String *))(v4 + 16));
}

uint64_t sub_1001554AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2, a2);
}

uint64_t sub_1001554BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001554C4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001554E8(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_100155424(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_1001554F0()
{
  unint64_t result;

  result = qword_1002674B8;
  if (!qword_1002674B8)
  {
    result = swift_getWitnessTable(&unk_1001BB170, &type metadata for TestingRigError);
    atomic_store(result, (unint64_t *)&qword_1002674B8);
  }
  return result;
}

unint64_t sub_100155534()
{
  unint64_t result;

  result = qword_1002674C0;
  if (!qword_1002674C0)
  {
    result = swift_getWitnessTable(&unk_1001BA32C, &type metadata for PlannerTestParams);
    atomic_store(result, (unint64_t *)&qword_1002674C0);
  }
  return result;
}

uint64_t destroy for PlannerTestParams(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for PlannerTestParams(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for PlannerTestParams(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = a2[3];
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  v7 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = a2[6];
  v8 = a2[7];
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for PlannerTestParams(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PlannerTestParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlannerTestParams(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlannerTestParams(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlannerTestParams()
{
  return &type metadata for PlannerTestParams;
}

uint64_t sub_1001557D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x79616C6544776F6CLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C6544776F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656D6954776F6CLL && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D6954776F6CLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x616C654468676968 && a2 == 0xE900000000000079)
  {
    v8 = 0xE900000000000079;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616C654468676968, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x656D695468676968 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656D695468676968, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100155994@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v5 = sub_100008A18(&qword_100267508);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000B748(a1, v9);
  v11 = sub_100155B94();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PlannerTestParams.CodingKeys, &type metadata for PlannerTestParams.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
    return swift_bridgeObjectRelease(0);
  }
  else
  {
    v32 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    v28 = v13;
    v31 = 1;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
    v16 = v15;
    v27 = v14;
    v30 = 2;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    v25 = v18;
    v26 = v17;
    v29 = 3;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v5);
    v20 = v8;
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
    result = _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = v28 & 1;
    *(_QWORD *)(a2 + 16) = v27;
    *(_QWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 32) = v26;
    *(_BYTE *)(a2 + 40) = v25 & 1;
    *(_QWORD *)(a2 + 48) = v19;
    *(_QWORD *)(a2 + 56) = v22;
  }
  return result;
}

unint64_t sub_100155B94()
{
  unint64_t result;

  result = qword_100267510;
  if (!qword_100267510)
  {
    result = swift_getWitnessTable(&unk_1001BA418, &type metadata for PlannerTestParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267510);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PlannerTestParams.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100155C24 + 4 * byte_1001BA259[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100155C58 + 4 * byte_1001BA254[v4]))();
}

uint64_t sub_100155C58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100155C60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100155C68);
  return result;
}

uint64_t sub_100155C74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100155C7CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100155C80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100155C88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlannerTestParams.CodingKeys()
{
  return &type metadata for PlannerTestParams.CodingKeys;
}

unint64_t sub_100155CA8()
{
  unint64_t result;

  result = qword_100267520;
  if (!qword_100267520)
  {
    result = swift_getWitnessTable(&unk_1001BA3F0, &type metadata for PlannerTestParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267520);
  }
  return result;
}

unint64_t sub_100155CF0()
{
  unint64_t result;

  result = qword_100267528;
  if (!qword_100267528)
  {
    result = swift_getWitnessTable(&unk_1001BA360, &type metadata for PlannerTestParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267528);
  }
  return result;
}

unint64_t sub_100155D38()
{
  unint64_t result;

  result = qword_100267530;
  if (!qword_100267530)
  {
    result = swift_getWitnessTable(&unk_1001BA388, &type metadata for PlannerTestParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267530);
  }
  return result;
}

uint64_t sub_100155D7C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ECPrimitiveEventSink()
{
  return objc_opt_self(_TtC7Metrics20ECPrimitiveEventSink);
}

uint64_t sub_100155DC0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  v2 = v1;
  *(_QWORD *)(v1 + 24) = 0;
  v4 = swift_unknownObjectWeakInit(v1 + 16, 0);
  v5 = v1 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime;
  static Date.distantPast.getter(v4);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
  v7 = OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_lock;
  *(_QWORD *)(v2 + v7) = objc_msgSend(objc_allocWithZone((Class)APUnfairLock), "initWithOptions:", 1);
  v8 = v2 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_xpcActivity;
  sub_10000D4D8((uint64_t)a1, v2 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_xpcActivity);
  swift_beginAccess(v8, v15, 33, 0);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v8 + 32);
  sub_100136C8C(v8, v9);
  v11 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v10 + 16);
  v13 = swift_retain(v2, v12);
  v11(v13, &off_100217B20, v9, v10);
  swift_endAccess(v15);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
  return v2;
}

uint64_t sub_100155EDC()
{
  uint64_t v0;

  sub_10003E238(v0 + 16);
  sub_10000D51C(v0 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0((_QWORD *)(v0
                                                             + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_xpcActivity));

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100155F34()
{
  return type metadata accessor for ObservabilityXPCTimer(0);
}

uint64_t type metadata accessor for ObservabilityXPCTimer(uint64_t a1)
{
  uint64_t result;

  result = qword_100267618;
  if (!qword_100267618)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ObservabilityXPCTimer);
  return result;
}

void sub_100155F78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1001BA528;
  sub_10003E050(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1001BA540;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t sub_100156008@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = *v1 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10000CE28(v3, a1);
}

uint64_t sub_10015605C(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t Strong;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(void);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD aBlock[5];
  _QWORD *v79;
  char v80[32];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v74 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v73 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v70 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008A18(&qword_100262C10);
  v16 = __chkstk_darwin(v15);
  v71 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v66 - v18;
  Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
  if (!Strong)
    return a1();
  v72 = (void (*)(void))a1;
  v66 = v10;
  v67 = v9;
  v75 = Strong;
  v76 = a2;
  v68 = v7;
  v69 = v6;
  v21 = static os_log_type_t.debug.getter(Strong);
  sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
  v22 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
  v23 = sub_100008A18((uint64_t *)&unk_1002653F0);
  v24 = swift_allocObject(v23, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1001B76C0;
  v25 = v3;
  v26 = v3 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime;
  swift_beginAccess(v3 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime, v80, 0, 0);
  sub_10000CE28(v26, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v19, 1, v12))
  {
    sub_10000D51C((uint64_t)v19);
    v27 = 0;
    v28 = 0;
  }
  else
  {
    v30 = v70;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v70, v19, v12);
    v31 = sub_10000D51C((uint64_t)v19);
    v27 = Date.debugDescription.getter(v31);
    v28 = v32;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v30, v12);
  }
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 64) = sub_1000A5AF8();
  v33 = 7104878;
  if (v28)
    v33 = v27;
  v34 = 0xE300000000000000;
  if (v28)
    v34 = v28;
  *(_QWORD *)(v24 + 32) = v33;
  *(_QWORD *)(v24 + 40) = v34;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "XPC timer %{public}@ fired", 26, 2, v24);

  swift_bridgeObjectRelease(v24);
  v35 = (_QWORD *)swift_allocObject(&unk_100217BF8, 40, 7);
  v36 = v72;
  v37 = v76;
  v35[2] = v72;
  v35[3] = v37;
  v38 = v25;
  v35[4] = v25;
  v39 = qword_100264E78;
  swift_retain_n(v37, 2);
  swift_retain_n(v25, 2);
  if (v39 != -1)
    swift_once(&qword_100264E78, sub_100150610);
  v40 = type metadata accessor for Logger(0);
  v41 = sub_10000ABD8(v40, (uint64_t)qword_10026D208);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.debug.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "ObservabilityPeriodicPlanner got 'Timer Fired' signal from underlying timer", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

  v45 = v75;
  v46 = swift_unknownObjectWeakLoadStrong(v75 + 16);
  if (v46)
  {
    v47 = v46;
    v48 = *(_QWORD *)(v45 + 24);
    v49 = os_transaction_create("com.apple.ap.o11y-worker-task");
    v72 = *(void (**)(void))(v45 + 112);
    v50 = (_QWORD *)swift_allocObject(&unk_100217C20, 56, 7);
    v50[2] = v49;
    v50[3] = v47;
    v50[4] = v48;
    v50[5] = sub_1001573A8;
    v50[6] = v35;
    aBlock[4] = sub_100157378;
    v79 = v50;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001493D0;
    aBlock[3] = &unk_100217C38;
    v51 = v38;
    v52 = _Block_copy(aBlock);
    swift_unknownObjectRetain(v49);
    swift_unknownObjectRetain(v47);
    v54 = swift_retain(v35, v53);
    v55 = v73;
    static DispatchQoS.unspecified.getter(v54);
    v77 = _swiftEmptyArrayStorage;
    v56 = sub_1000A3560(&qword_1002668B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v57 = sub_100008A18(&qword_1002668B8);
    v58 = sub_1001496B0(&qword_1002668C0, &qword_1002668B8);
    v59 = v67;
    v60 = v57;
    v61 = v69;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v60, v58, v69, v56);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v59, v52);
    _Block_release(v52);
    swift_unknownObjectRelease(v49);
    swift_unknownObjectRelease(v47);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v59, v61);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v55, v66);
    v62 = v79;
    swift_unknownObjectRelease(v75);
    swift_release(v51);
    swift_release(v76);
    swift_release(v35);
    v63 = v62;
  }
  else
  {
    v36();
    v64 = OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_lock;
    objc_msgSend(*(id *)(v38 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_lock), "lock");
    v65 = (uint64_t)v71;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v71, 1, 1, v12);
    swift_beginAccess(v26, aBlock, 33, 0);
    sub_10003E0A4(v65, v26);
    swift_endAccess(aBlock);
    objc_msgSend(*(id *)(v38 + v64), "unlock");
    swift_unknownObjectRelease(v45);
    swift_release(v38);
    swift_release(v37);
    v63 = v35;
  }
  return swift_release(v63);
}

id sub_1001566A8(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v14[24];

  v5 = sub_100008A18(&qword_100262C10);
  v6 = __chkstk_darwin(v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1(v6);
  v9 = OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_lock;
  objc_msgSend(*(id *)(a3 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_lock), "lock");
  v10 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  v11 = a3 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime;
  swift_beginAccess(a3 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime, v14, 33, 0);
  sub_10003E0A4((uint64_t)v8, v11);
  swift_endAccess(v14);
  return objc_msgSend(*(id *)(a3 + v9), "unlock");
}

uint64_t sub_100156798(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  Class isa;
  Class v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  void *v45;
  double v46;
  id v47;
  void *v48;
  double v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  void *v56;
  _BYTE *v57;
  _BYTE *v58;
  void (*v59)(_BYTE *, uint64_t);
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v70[4];
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD aBlock[5];
  uint64_t v91;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v87 = *(_QWORD *)(v2 - 8);
  v88 = v2;
  __chkstk_darwin(v2);
  v86 = &v70[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v74 = type metadata accessor for DispatchTime(0);
  v80 = *(_QWORD *)(v74 - 8);
  v4 = __chkstk_darwin(v74);
  v79 = &v70[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v85 = &v70[-v6];
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v77 = *(_QWORD *)(v7 - 8);
  v78 = v7;
  __chkstk_darwin(v7);
  v73 = &v70[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v75 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v75);
  v76 = &v70[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DispatchQoS(0);
  v82 = *(_QWORD *)(v10 - 8);
  v83 = v10;
  __chkstk_darwin(v10);
  v81 = &v70[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for TimeZone(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_100008A18(&qword_100262C10);
  v17 = __chkstk_darwin(v16);
  v19 = &v70[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v71 = static os_log_type_t.debug.getter(v17);
  sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
  v20 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
  v21 = sub_100008A18((uint64_t *)&unk_1002653F0);
  v22 = swift_allocObject(v21, 72, 7);
  *(_OWORD *)(v22 + 16) = xmmword_1001B76C0;
  v72 = a1;
  sub_10000CE28(a1, (uint64_t)v19);
  v23 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v23) == 1)
  {
    sub_10000D51C((uint64_t)v19);
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v27 = objc_msgSend((id)objc_opt_self(NSISO8601DateFormatter), "apLocalSharedFormatter");
    static TimeZone.current.getter();
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
    objc_msgSend(v27, "setTimeZone:", isa);

    v29 = Date._bridgeToObjectiveC()().super.isa;
    v30 = objc_msgSend(v27, "stringFromDate:", v29);

    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);
    v26 = v32;

    (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v19, v23);
  }
  v33 = v74;
  v34 = v73;
  v35 = v72;
  v36 = v71;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  *(_QWORD *)(v22 + 64) = sub_1000A5AF8();
  v37 = 7104878;
  if (v26)
    v37 = v25;
  v38 = 0xE300000000000000;
  if (v26)
    v38 = v26;
  *(_QWORD *)(v22 + 32) = v37;
  *(_QWORD *)(v22 + 40) = v38;
  os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v20, "Recovered scheduled time from XPC Activity: %{public}@", 54, 2, v22);

  swift_bridgeObjectRelease(v22);
  v39 = OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_lock;
  v40 = v84;
  objc_msgSend(*(id *)(v84 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_lock), "lock");
  v41 = v40 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime;
  swift_beginAccess(v40 + OBJC_IVAR____TtC7Metrics21ObservabilityXPCTimer_scheduledTime, aBlock, 33, 0);
  sub_10015730C(v35, v41);
  swift_endAccess(aBlock);
  objc_msgSend(*(id *)(v40 + v39), "unlock");
  v42 = (void *)objc_opt_self(APConfigurationMediator);
  sub_10003E180(0, (unint64_t *)&qword_100262C20, APECObservabilityConfig_ptr);
  v43 = objc_msgSend(v42, "configurationForClass:", swift_getObjCClassFromMetadata());
  v44 = objc_opt_self(APECObservabilityConfig);
  v45 = (void *)swift_dynamicCastObjCClass(v43, v44);
  v46 = 7.0;
  if (v45)
  {
    v47 = objc_msgSend(v45, "regularJobDaemonStartDelay");
    if (v47)
    {
      v48 = v47;
      objc_msgSend(v47, "doubleValue");
      v46 = v49;

    }
  }
  swift_unknownObjectRelease(v43);
  v50 = sub_10003E180(0, (unint64_t *)&unk_100266890, OS_dispatch_queue_ptr);
  v51 = v81;
  static DispatchQoS.unspecified.getter(v50);
  aBlock[0] = _swiftEmptyArrayStorage;
  v52 = sub_1000A3560(&qword_1002663D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v53 = sub_100008A18((uint64_t *)&unk_1002668A0);
  v54 = sub_1001496B0((unint64_t *)&qword_1002663D8, (uint64_t *)&unk_1002668A0);
  v55 = v76;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v53, v54, v75, v52);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v77 + 104))(v34, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v78);
  v56 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000011, 0x80000001001F5BB0, v51, v55, v34, 0);
  v57 = v79;
  static DispatchTime.now()(v56);
  v58 = v85;
  + infix(_:_:)(v57, v46);
  v59 = *(void (**)(_BYTE *, uint64_t))(v80 + 8);
  v59(v57, v33);
  aBlock[4] = sub_100157354;
  v91 = v40;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001493D0;
  aBlock[3] = &unk_100217B70;
  v60 = _Block_copy(aBlock);
  v62 = swift_retain(v40, v61);
  static DispatchQoS.unspecified.getter(v62);
  v89 = _swiftEmptyArrayStorage;
  v63 = sub_1000A3560(&qword_1002668B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v64 = sub_100008A18(&qword_1002668B8);
  v65 = sub_1001496B0(&qword_1002668C0, &qword_1002668B8);
  v66 = v86;
  v67 = v64;
  v68 = v88;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v89, v67, v65, v88, v63);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v58, v51, v66, v60);
  _Block_release(v60);

  (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v66, v68);
  (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v51, v83);
  v59(v58, v33);
  return swift_release(v91);
}

uint64_t sub_100156F28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  _QWORD *v40;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static os_log_type_t.debug.getter(v7);
  sub_10003E180(0, (unint64_t *)&qword_100264750, OS_os_log_ptr);
  v11 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000015, 0x80000001001ED670, 0x76726573624F4345, 0xEF7974696C696261);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "XPC timer checkin", 17, 2, _swiftEmptyArrayStorage);

  result = swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (result)
  {
    v13 = result;
    if (qword_100264E78 != -1)
      swift_once(&qword_100264E78, sub_100150610);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10000ABD8(v14, (uint64_t)qword_10026D208);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "ObservabilityPeriodicPlanner got 'Timer Fired' signal from underlying timer", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    Strong = swift_unknownObjectWeakLoadStrong(v13 + 16);
    if (Strong)
    {
      v20 = Strong;
      v21 = *(_QWORD *)(v13 + 24);
      v22 = os_transaction_create("com.apple.ap.o11y-worker-task");
      v36 = *(_QWORD *)(v13 + 112);
      v23 = (_QWORD *)swift_allocObject(&unk_100217BA8, 56, 7);
      v23[2] = v22;
      v23[3] = v20;
      v23[4] = v21;
      v23[5] = nullsub_1;
      v23[6] = 0;
      aBlock[4] = sub_100157378;
      v40 = v23;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001493D0;
      aBlock[3] = &unk_100217BC0;
      v24 = _Block_copy(aBlock);
      v35 = v6;
      v25 = v24;
      swift_unknownObjectRetain(v22);
      v26 = swift_unknownObjectRetain(v20);
      static DispatchQoS.unspecified.getter(v26);
      v38 = _swiftEmptyArrayStorage;
      v27 = v9;
      v28 = sub_1000A3560(&qword_1002668B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v29 = sub_100008A18(&qword_1002668B8);
      v34 = v5;
      v30 = v29;
      v31 = sub_1001496B0(&qword_1002668C0, &qword_1002668B8);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v30, v31, v2, v28);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v4, v25);
      _Block_release(v25);
      swift_unknownObjectRelease(v22);
      swift_unknownObjectRelease(v20);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v4, v2);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v34);
      v32 = v40;
      swift_unknownObjectRelease(v13);
      return swift_release(v32);
    }
    else
    {
      return swift_unknownObjectRelease(v13);
    }
  }
  return result;
}

uint64_t sub_1001572EC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10015730C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100262C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100157354()
{
  uint64_t v0;

  return sub_100156F28(v0);
}

uint64_t sub_10015735C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2, a2);
}

uint64_t sub_10015736C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10015737C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

id sub_1001573A8()
{
  uint64_t v0;

  return sub_1001566A8(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1001573B8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

BOOL sub_1001573FC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && sub_10015BF8C(*(_QWORD **)(a1 + 8), *(_QWORD **)(a2 + 8));
}

uint64_t sub_100157420(uint64_t a1, uint64_t a2)
{
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  void *v8;

  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6 = swift_bridgeObjectRetain(a2);
  v7._countAndFlagsBits = Array.description.getter(v6, &type metadata for Int);
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v8);
  return 0x6172676F74736968;
}

uint64_t sub_100157500()
{
  uint64_t *v0;

  return sub_100157420(*v0, v0[1]);
}

ValueMetadata *type metadata accessor for HistogramCounts()
{
  return &type metadata for HistogramCounts;
}

uint64_t type metadata accessor for ObservabilitySignalMonitor()
{
  return objc_opt_self(_TtC7Metrics26ObservabilitySignalMonitor);
}

void sub_10015753C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for Date(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for BatchID(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for ObservabilitySignal(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BD40(v0, (uint64_t)v5, v6);
  v7 = (char *)sub_100157660 + 4 * word_1001BA5E0[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

uint64_t sub_100157660()
{
  double *v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *object;

  v2 = *v0;
  v3 = *((_QWORD *)v0 + 1);
  *(_QWORD *)(v1 - 96) = 0;
  *(_QWORD *)(v1 - 88) = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  v4 = *(_QWORD *)(v1 - 88);
  *(_QWORD *)(v1 - 96) = *(_QWORD *)(v1 - 96);
  *(_QWORD *)(v1 - 88) = v4;
  v5._countAndFlagsBits = 0xD000000000000017;
  v5._object = (void *)0x80000001001F5D90;
  String.append(_:)(v5);
  ((void (*)(uint64_t, void *, void *, double))Double.write<A>(to:))(v1 - 96, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v2);
  v6._countAndFlagsBits = 0x73746E657665202CLL;
  v6._object = (void *)0xEF203A746E756F43;
  String.append(_:)(v6);
  *(_QWORD *)(v1 - 112) = v3;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  return *(_QWORD *)(v1 - 96);
}

unint64_t sub_100157B48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002677F0;
  if (!qword_1002677F0)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1002677F0);
  }
  return result;
}

void sub_100157B90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD v26[8];
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a2;
  v2 = type metadata accessor for Date(0);
  v26[6] = *(_QWORD *)(v2 - 8);
  v26[7] = v2;
  __chkstk_darwin(v2);
  v26[1] = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BatchID(0);
  v5 = __chkstk_darwin(v4);
  v26[0] = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v26[2] = (char *)v26 - v8;
  __chkstk_darwin(v7);
  v26[3] = (char *)v26 - v9;
  v10 = type metadata accessor for ObservabilitySignal(0);
  v11 = __chkstk_darwin(v10);
  v26[5] = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v14 = __chkstk_darwin(v13);
  v15 = __chkstk_darwin(v14);
  v26[4] = (char *)v26 - v16;
  v17 = __chkstk_darwin(v15);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  v20 = sub_100008A18(&qword_1002678A8);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t)&v23[*(int *)(v21 + 48)];
  sub_10000BD40(v27, (uint64_t)v23, type metadata accessor for ObservabilitySignal);
  sub_10000BD40(v28, v24, type metadata accessor for ObservabilitySignal);
  v25 = (char *)sub_100157E00 + 4 * byte_1001BA5FB[swift_getEnumCaseMultiPayload(v23, v10)];
  __asm { BR              X10 }
}

BOOL sub_100157E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  sub_10000BD40(v0, v2, type metadata accessor for ObservabilitySignal);
  v4 = *(_QWORD *)(v2 + 8);
  if (swift_getEnumCaseMultiPayload(v3, v1))
  {
    sub_100158848(v0);
    return 0;
  }
  if (*(double *)v2 != *(double *)v3)
  {
    sub_1000070D8(v0, type metadata accessor for ObservabilitySignal);
    return 0;
  }
  v5 = v4 == *(_QWORD *)(v3 + 8);
  sub_1000070D8(v0, type metadata accessor for ObservabilitySignal);
  return v5;
}

char *sub_1001581F8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v12, a2);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v8 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
        v9 = &a1[v8];
        v10 = &a2[v8];
        v11 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 3u:
        v14 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v15 = type metadata accessor for Date(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 6u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v16 = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 2) = v16;
        swift_bridgeObjectRetain(v16);
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

_QWORD *sub_100158380(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_1000070D8((uint64_t)a1, type metadata accessor for ObservabilitySignal);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        v6 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
        v7 = (char *)a1 + v6;
        v8 = (char *)a2 + v6;
        v9 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
        v10 = a1;
        v11 = a3;
        v12 = 1;
        goto LABEL_8;
      case 3u:
        v13 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v10 = a1;
        v11 = a3;
        v12 = 3;
        goto LABEL_8;
      case 4u:
        v14 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v10 = a1;
        v11 = a3;
        v12 = 4;
        goto LABEL_8;
      case 6u:
        v15 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        *a1 = v15;
        v16 = a2[2];
        a1[2] = v16;
        swift_bridgeObjectRetain(v16);
        v10 = a1;
        v11 = a3;
        v12 = 6;
LABEL_8:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *sub_1001584F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 4:
      v11 = type metadata accessor for Date(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 4);
      break;
    case 3:
      v12 = type metadata accessor for ExtendedUUID(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      swift_storeEnumTagMultiPayload(a1, a3, 3);
      break;
    case 1:
      *a1 = *a2;
      v7 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for ExtendedUUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *sub_100158618(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1000070D8((uint64_t)a1, type metadata accessor for ObservabilitySignal);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 4:
        v11 = type metadata accessor for Date(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 3:
        v12 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 1:
        *a1 = *a2;
        v7 = *(int *)(sub_100008A18(&qword_100265B80) + 64);
        v8 = (char *)a1 + v7;
        v9 = (char *)a2 + v7;
        v10 = type metadata accessor for ExtendedUUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100158754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100158760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100158770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100158780(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v6[32];
  _QWORD v7[8];

  v7[0] = &unk_1001BA6A8;
  result = type metadata accessor for ExtendedUUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout3(v6, (char *)&value witness table for Builtin.Int64 + 64, (char *)&value witness table for Builtin.Int64 + 64, v4);
    v7[1] = v6;
    v7[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v7[3] = v4;
    result = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v7[4] = *(_QWORD *)(result - 8) + 64;
      v7[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v7[6] = &unk_1001BA6C0;
      v7[7] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 8, v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100158848(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008A18(&qword_1002678A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for NormalizedScaleFactorPropertyListStore()
{
  return objc_opt_self(_TtC7Metrics38NormalizedScaleFactorPropertyListStore);
}

unint64_t sub_1001588A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  float v8;
  float v9;
  _BOOL4 v10;
  uint64_t v11;

  sub_10000B748((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  v1 = sub_100134CDC(0xD000000000000012, 0x80000001001F5DF0);
  if (!v1)
    goto LABEL_11;
  v2 = v1;
  if (!*(_QWORD *)(v1 + 16) || (v3 = sub_10002DDCC(0x636146656C616373, 0xEB00000000726F74), (v4 & 1) == 0))
  {
    swift_bridgeObjectRelease(v2);
LABEL_11:
    v11 = 0;
    LOBYTE(v10) = 1;
    return v11 | ((unint64_t)v10 << 32);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
  swift_unknownObjectRetain(v5);
  swift_bridgeObjectRelease(v2);
  v6 = objc_opt_self(NSNumber);
  v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
  if (!v7)
  {
    swift_unknownObjectRelease(v5);
    goto LABEL_11;
  }
  objc_msgSend(v7, "floatValue");
  v9 = v8;
  swift_unknownObjectRelease(v5);
  v10 = v9 < 0.0;
  if (v9 >= 1.0)
    v10 = 1;
  v11 = LODWORD(v9);
  if (v10)
    v11 = 0;
  return v11 | ((unint64_t)v10 << 32);
}

uint64_t sub_1001589C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  unint64_t v3;
  _BYTE v5[56];

  sub_10000B748((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  v1 = sub_100008A18(&qword_100265B60);
  inited = swift_initStackObject(v1, v5);
  *(_OWORD *)(inited + 16) = xmmword_1001B76C0;
  *(_QWORD *)(inited + 32) = 0x636146656C616373;
  *(_QWORD *)(inited + 40) = 0xEB00000000726F74;
  *(NSNumber *)(inited + 48) = Float._bridgeToObjectiveC()();
  v3 = sub_10002E7FC(inited);
  sub_10002F4A4(v3, 0xD000000000000012, 0x80000001001F5DF0);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100158A90()
{
  unint64_t v0;

  v0 = sub_1001588A8();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

uint64_t sub_100158AC4()
{
  return sub_1001589C8();
}

uint64_t destroy for GroupConfig(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for GroupConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  v9 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v8;
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for GroupConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v12;
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

__n128 initializeWithTake for GroupConfig(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for GroupConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupConfig()
{
  return &type metadata for GroupConfig;
}

uint64_t sub_100158E2C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char v29[8];
  _BYTE v30[8];

  v3 = v1;
  v5 = sub_100008A18(&qword_100267968);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000B748(a1, v9);
  v11 = sub_1001599F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GroupConfig.CodingKeys, &type metadata for GroupConfig.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v29[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v29, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v29[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v29, v5);
    v16 = v3[4];
    v17 = v3[5];
    v29[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v29, v5);
    v18 = v3[6];
    v19 = v3[7];
    v29[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v29, v5);
    v20 = v3[8];
    v21 = *((unsigned __int8 *)v3 + 72);
    v29[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v29, v5);
    sub_100159A34((uint64_t)(v3 + 10), (uint64_t)v30);
    sub_100159A34((uint64_t)v30, (uint64_t)v29);
    v28 = 5;
    v22 = sub_100008A18(&qword_1002663C8);
    v23 = sub_100159A7C(&qword_100267978, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v28, v5, v22, v23);
    v24 = v3[11];
    v25 = v3[12];
    v29[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, v29, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100159058()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100159080 + 4 * byte_1001BA748[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_100159080()
{
  return 0x6F72477265707573;
}

uint64_t sub_10015909C()
{
  return 0x646F69726570;
}

uint64_t sub_1001590B0()
{
  return 0x746E65696C63;
}

uint64_t sub_1001590C4()
{
  return 0x65736F70727570;
}

uint64_t sub_1001590DC()
{
  return 0x65676E6172;
}

uint64_t sub_1001590F0()
{
  return 0x7265506563617267;
}

uint64_t sub_100159110@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100159234(a1, a2);
  *a3 = result;
  return result;
}

void sub_100159134(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100159140(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001599F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100159168(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001599F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100159190@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  sub_100159514(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1001591EC(_QWORD *a1)
{
  return sub_100158E2C(a1);
}

uint64_t sub_100159234(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F72477265707573 && a2 == 0xEA00000000007075)
  {
    v7 = 0xEA00000000007075;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F72477265707573, 0xEA00000000007075, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x646F69726570 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F69726570, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746E65696C63 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65696C63, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x65736F70727570 && a2 == 0xE700000000000000)
  {
    v10 = 0xE700000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736F70727570, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65676E6172, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x7265506563617267 && a2 == 0xEB00000000646F69)
  {
    swift_bridgeObjectRelease(0xEB00000000646F69);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265506563617267, 0xEB00000000646F69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_100159514@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v5 = sub_100008A18(&qword_100267950);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000B748(a1, v9);
  v11 = sub_1001599F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GroupConfig.CodingKeys, &type metadata for GroupConfig.CodingKeys, v11, v9, v10);
  if (v2)
    return _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
  v54 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v5);
  v14 = v13;
  v46 = v12;
  v53 = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v53, v5);
  v17 = v16;
  v44 = v15;
  v45 = v14;
  v52 = 2;
  swift_bridgeObjectRetain(v16);
  v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v5);
  v43 = v17;
  v51 = 3;
  v19 = v18;
  swift_bridgeObjectRetain(v18);
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v5);
  v42 = v21;
  v39 = v20;
  v50 = 4;
  swift_bridgeObjectRetain(v21);
  v40 = 0;
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v5);
  v37 = v23;
  v38 = v22;
  v24 = sub_100008A18(&qword_1002663C8);
  v49 = 5;
  v25 = sub_100159A7C(&qword_100267960, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v47, v24, &v49, v5, v24, v25);
  v48 = 6;
  v36 = v47;
  swift_bridgeObjectRetain(v47);
  v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v27);
  _s7Metrics31ObservabilitySignalDeserializerVwxx_0(a1);
  swift_bridgeObjectRelease(v27);
  v28 = v36;
  swift_bridgeObjectRelease(v36);
  v29 = v42;
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v19);
  v30 = v43;
  swift_bridgeObjectRelease(v43);
  v31 = v45;
  result = swift_bridgeObjectRelease(v45);
  *(_QWORD *)a2 = v46;
  *(_QWORD *)(a2 + 8) = v31;
  *(_QWORD *)(a2 + 16) = v44;
  *(_QWORD *)(a2 + 24) = v30;
  *(_QWORD *)(a2 + 32) = v41;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v39;
  *(_QWORD *)(a2 + 56) = v29;
  *(_QWORD *)(a2 + 64) = v38;
  *(_BYTE *)(a2 + 72) = v37 & 1;
  v33 = v35;
  *(_QWORD *)(a2 + 80) = v28;
  *(_QWORD *)(a2 + 88) = v33;
  *(_QWORD *)(a2 + 96) = v27;
  return result;
}

unint64_t sub_1001599F0()
{
  unint64_t result;

  result = qword_100267958;
  if (!qword_100267958)
  {
    result = swift_getWitnessTable(&unk_1001BA87C, &type metadata for GroupConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100267958);
  }
  return result;
}

uint64_t sub_100159A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008A18(&qword_100267970);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100159A7C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A5AB4(&qword_1002663C8);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GroupConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

