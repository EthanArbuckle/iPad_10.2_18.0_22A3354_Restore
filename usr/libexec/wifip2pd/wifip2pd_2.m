uint64_t sub_100113E74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANDataHostAssistRequest.Reason()
{
  return &type metadata for NANDataHostAssistRequest.Reason;
}

ValueMetadata *type metadata accessor for NANSubscribeTerminatedEvent()
{
  return &type metadata for NANSubscribeTerminatedEvent;
}

ValueMetadata *type metadata accessor for NANPublishTerminatedEvent()
{
  return &type metadata for NANPublishTerminatedEvent;
}

uint64_t _s7CoreP2P23NANDiscoveryResultEventVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(_WORD *)(a1 + 6) = *(_WORD *)(a2 + 6);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s7CoreP2P23NANDiscoveryResultEventVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *_s7CoreP2P23NANDiscoveryResultEventVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[2];
  v4 = a1[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANFollowUpReceivedEvent()
{
  return &type metadata for NANFollowUpReceivedEvent;
}

ValueMetadata *type metadata accessor for NANTransferCompleteStatus()
{
  return &type metadata for NANTransferCompleteStatus;
}

uint64_t initializeBufferWithCopyOfBuffer for NANDataManagementFrameTransferCompleteEvent(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NANFollowUpTransferCompleteEvent()
{
  return &type metadata for NANFollowUpTransferCompleteEvent;
}

uint64_t _s7CoreP2P43NANDataManagementFrameTransferCompleteEventVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s7CoreP2P43NANDataManagementFrameTransferCompleteEventVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDataManagementFrameTransferCompleteEvent()
{
  return &type metadata for NANDataManagementFrameTransferCompleteEvent;
}

uint64_t storeEnumTagSinglePayload for WatchdogResetStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1001140E0 + 4 * byte_1003475D7[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100114114 + 4 * byte_1003475D2[v4]))();
}

uint64_t sub_100114114(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011411C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100114124);
  return result;
}

uint64_t sub_100114130(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100114138);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10011413C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100114144(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WatchdogResetStatus()
{
  return &type metadata for WatchdogResetStatus;
}

uint64_t getEnumTagSinglePayload for NANOOBActionFrameTrasmitStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 3);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANOOBActionFrameTrasmitStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)(result + 3) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameTrasmitStatus()
{
  return &type metadata for NANOOBActionFrameTrasmitStatus;
}

uint64_t _s7CoreP2P25NANTransferCompleteStatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100114240 + 4 * byte_1003475E1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100114274 + 4 * byte_1003475DC[v4]))();
}

uint64_t sub_100114274(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011427C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100114284);
  return result;
}

uint64_t sub_100114290(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100114298);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10011429C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001142A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameTrasmitStatus.Reason()
{
  return &type metadata for NANOOBActionFrameTrasmitStatus.Reason;
}

uint64_t storeEnumTagSinglePayload for NANOOBActionFrameTrasmitStatus.Result(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10011430C + 4 * byte_1003475EB[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100114340 + 4 * byte_1003475E6[v4]))();
}

uint64_t sub_100114340(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100114348(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100114350);
  return result;
}

uint64_t sub_10011435C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100114364);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100114368(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100114370(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameTrasmitStatus.Result()
{
  return &type metadata for NANOOBActionFrameTrasmitStatus.Result;
}

uint64_t destroy for NANOOBActionFrameReceivedEvent(uint64_t *a1)
{
  return sub_1000632E8(a1[3], a1[4], a1[5]);
}

uint64_t initializeWithCopy for NANOOBActionFrameReceivedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  sub_100063D24(v3, v4, v5);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for NANOOBActionFrameReceivedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  sub_100063D24(v3, v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  sub_1000632E8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NANOOBActionFrameReceivedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  sub_1000632E8(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANOOBActionFrameReceivedEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFE && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 32766);
  HIDWORD(v3) = (*(_DWORD *)(a1 + 24) >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)(a1 + 24) >> 9);
  LODWORD(v3) = *(_DWORD *)(a1 + 24);
  v4 = (v3 >> 30) ^ 0x7FFF;
  if (v4 >= 0x7FFD)
    v4 = -1;
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for NANOOBActionFrameReceivedEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 32766;
    if (a3 >= 0x7FFE)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFE)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 24) = ((-(__int16)a2 & 0x7FFF) << 7) & 0xFE00 | ((((-a2 >> 2) & 0x1FFF) - (a2 << 13)) << 17) & 0xFF00FFFF;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANOOBActionFrameReceivedEvent()
{
  return &type metadata for NANOOBActionFrameReceivedEvent;
}

uint64_t getEnumTagSinglePayload for NANDiscoveryWindowStartEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 30))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 28);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDiscoveryWindowStartEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 30) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 30) = 0;
    if (a2)
      *(_BYTE *)(result + 28) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDiscoveryWindowStartEvent()
{
  return &type metadata for NANDiscoveryWindowStartEvent;
}

uint64_t storeEnumTagSinglePayload for AWDLThreadCoexistenceEvent(_WORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if ((a3 + 0xFFFF) < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_10011472C + 4 * byte_1003475F5[v4]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_10011470C + 4 * byte_1003475F0[v4]))();
}

uint64_t sub_10011470C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10011472C(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_100114734(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10011473C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100114744(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_10011474C(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

ValueMetadata *type metadata accessor for AWDLThreadCoexistenceEvent()
{
  return &type metadata for AWDLThreadCoexistenceEvent;
}

uint64_t initializeBufferWithCopyOfBuffer for AWDLSoftAPChannelChangedEvent(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLSoftAPChannelChangedEvent(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[10])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLSoftAPChannelChangedEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLSoftAPChannelChangedEvent()
{
  return &type metadata for AWDLSoftAPChannelChangedEvent;
}

uint64_t destroy for AWDLSoftErrorReport(uint64_t a1)
{
  return sub_10006156C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100061540(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100061540(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_10006156C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AWDLSoftErrorReport(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_10006156C(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLSoftErrorReport(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLSoftErrorReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001149E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1001149E8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLSoftErrorReport()
{
  return &type metadata for AWDLSoftErrorReport;
}

uint64_t *initializeBufferWithCopyOfBuffer for AWDLIdleActivity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for DispatchTimeInterval(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t destroy for AWDLIdleActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for DispatchTimeInterval(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t initializeWithCopy for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithCopy for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t initializeWithTake for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithTake for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100114CD4);
}

uint64_t sub_100114CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AWDLIdleActivity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100114D1C);
}

uint64_t sub_100114D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_100114D5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for DriverEvent(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  void *v84;
  id v85;
  uint64_t v86;
  void (*v87)(unint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v22 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v23 = *(_QWORD *)a2;
        v24 = *(_QWORD *)(a2 + 8);
        v25 = *(_QWORD *)(a2 + 16);
        v26 = *(_QWORD *)(a2 + 24);
        v27 = *(_QWORD *)(a2 + 32);
        v28 = *(_BYTE *)(a2 + 41);
        v29 = *(_BYTE *)(a2 + 40);
        sub_1000087D0(v23, v24, v25, v26, v27, v29, v28);
        *(_QWORD *)a1 = v23;
        *(_QWORD *)(a1 + 8) = v24;
        *(_QWORD *)(a1 + 16) = v25;
        *(_QWORD *)(a1 + 24) = v26;
        *(_QWORD *)(a1 + 32) = v27;
        *(_BYTE *)(a1 + 40) = v29;
        *(_BYTE *)(a1 + 41) = v28;
        v19 = a1;
        v20 = a3;
        v21 = 2;
        goto LABEL_19;
      case 1:
        v30 = type metadata accessor for DriverEvent.AWDL(0);
        switch(swift_getEnumCaseMultiPayload(a2, v30))
        {
          case 1u:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            v31 = *(_QWORD *)(a2 + 8);
            v32 = *(_QWORD *)(a2 + 16);
            v33 = *(_QWORD *)(a2 + 24);
            sub_100063D24(v31, v32, v33);
            *(_QWORD *)(a1 + 8) = v31;
            *(_QWORD *)(a1 + 16) = v32;
            *(_QWORD *)(a1 + 24) = v33;
            v34 = *(int *)(sub_100012C44(&qword_100405BB0) + 48);
            v35 = a1 + v34;
            v36 = a2 + v34;
            *(_DWORD *)v35 = *(_DWORD *)(a2 + v34);
            *(_WORD *)(v35 + 4) = *(_WORD *)(a2 + v34 + 4);
            *(_DWORD *)(v35 + 6) = *(_DWORD *)(a2 + v34 + 6);
            *(_WORD *)(v35 + 10) = *(_WORD *)(a2 + v34 + 10);
            *(_DWORD *)(v35 + 12) = *(_DWORD *)(a2 + v34 + 12);
            *(_WORD *)(v35 + 16) = *(_WORD *)(a2 + v34 + 16);
            *(_DWORD *)(v35 + 20) = *(_DWORD *)(a2 + v34 + 20);
            v37 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
            v38 = v37[8];
            v39 = v35 + v38;
            v40 = v36 + v38;
            v41 = type metadata accessor for DispatchTimeInterval(0);
            v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
            v42(v39, v40, v41);
            v42(v35 + v37[9], v36 + v37[9], v41);
            *(_DWORD *)(v35 + v37[10]) = *(_DWORD *)(v36 + v37[10]);
            *(_DWORD *)(v35 + v37[11]) = *(_DWORD *)(v36 + v37[11]);
            *(_QWORD *)(v35 + v37[12]) = *(_QWORD *)(v36 + v37[12]);
            *(_DWORD *)(v35 + v37[13]) = *(_DWORD *)(v36 + v37[13]);
            *(_QWORD *)(v35 + v37[14]) = *(_QWORD *)(v36 + v37[14]);
            *(_DWORD *)(v35 + v37[15]) = *(_DWORD *)(v36 + v37[15]);
            v43 = v37[16];
            v44 = *(_QWORD *)(v36 + v43);
            *(_QWORD *)(v35 + v43) = v44;
            swift_bridgeObjectRetain(v44);
            v45 = a1;
            v46 = v30;
            v47 = 1;
            goto LABEL_17;
          case 2u:
            v48 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v48;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
            *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
            *(_WORD *)(a1 + 43) = *(_WORD *)(a2 + 43);
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
            *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
            *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
            *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
            *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
            v49 = *(_QWORD *)(a2 + 80);
            v50 = *(_QWORD *)(a2 + 88);
            *(_QWORD *)(a1 + 80) = v49;
            *(_QWORD *)(a1 + 88) = v50;
            v52 = *(_QWORD *)(a2 + 96);
            v51 = *(_QWORD *)(a2 + 104);
            *(_QWORD *)(a1 + 96) = v52;
            *(_QWORD *)(a1 + 104) = v51;
            swift_bridgeObjectRetain(v49);
            swift_bridgeObjectRetain(v50);
            swift_bridgeObjectRetain(v52);
            swift_bridgeObjectRetain(v51);
            v45 = a1;
            v46 = v30;
            v47 = 2;
            goto LABEL_17;
          case 3u:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
            *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
            *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
            v53 = *(_DWORD *)(a2 + 48);
            *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
            *(_DWORD *)(a1 + 48) = v53;
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
            *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
            v54 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 80) = v54;
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
            *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
            v55 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
            v56 = v55[20];
            v57 = a1 + v56;
            v58 = a2 + v56;
            v59 = type metadata accessor for DispatchTimeInterval(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
            *(_QWORD *)(a1 + v55[21]) = *(_QWORD *)(a2 + v55[21]);
            *(_QWORD *)(a1 + v55[22]) = *(_QWORD *)(a2 + v55[22]);
            *(_QWORD *)(a1 + v55[23]) = *(_QWORD *)(a2 + v55[23]);
            *(_QWORD *)(a1 + v55[24]) = *(_QWORD *)(a2 + v55[24]);
            *(_QWORD *)(a1 + v55[25]) = *(_QWORD *)(a2 + v55[25]);
            *(_QWORD *)(a1 + v55[26]) = *(_QWORD *)(a2 + v55[26]);
            *(_QWORD *)(a1 + v55[27]) = *(_QWORD *)(a2 + v55[27]);
            *(_QWORD *)(a1 + v55[28]) = *(_QWORD *)(a2 + v55[28]);
            *(_WORD *)(a1 + v55[29]) = *(_WORD *)(a2 + v55[29]);
            *(_BYTE *)(a1 + v55[30]) = *(_BYTE *)(a2 + v55[30]);
            *(_BYTE *)(a1 + v55[31]) = *(_BYTE *)(a2 + v55[31]);
            *(_BYTE *)(a1 + v55[32]) = *(_BYTE *)(a2 + v55[32]);
            *(_BYTE *)(a1 + v55[33]) = *(_BYTE *)(a2 + v55[33]);
            *(_BYTE *)(a1 + v55[34]) = *(_BYTE *)(a2 + v55[34]);
            *(_BYTE *)(a1 + v55[35]) = *(_BYTE *)(a2 + v55[35]);
            v60 = v55[36];
            v61 = (_QWORD *)(a1 + v60);
            v62 = (_QWORD *)(a2 + v60);
            v140 = v62[1];
            *v61 = *v62;
            v61[1] = v140;
            *(_BYTE *)(a1 + v55[37]) = *(_BYTE *)(a2 + v55[37]);
            *(_QWORD *)(a1 + v55[38]) = *(_QWORD *)(a2 + v55[38]);
            *(_QWORD *)(a1 + v55[39]) = *(_QWORD *)(a2 + v55[39]);
            *(_QWORD *)(a1 + v55[40]) = *(_QWORD *)(a2 + v55[40]);
            *(_QWORD *)(a1 + v55[41]) = *(_QWORD *)(a2 + v55[41]);
            v63 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
            v64 = a1 + v63;
            v65 = a2 + v63;
            v66 = *(_OWORD *)(v65 + 176);
            *(_OWORD *)(v64 + 160) = *(_OWORD *)(v65 + 160);
            *(_OWORD *)(v64 + 176) = v66;
            *(_OWORD *)(v64 + 192) = *(_OWORD *)(v65 + 192);
            v67 = *(_OWORD *)(v65 + 112);
            *(_OWORD *)(v64 + 96) = *(_OWORD *)(v65 + 96);
            *(_OWORD *)(v64 + 112) = v67;
            v68 = *(_OWORD *)(v65 + 144);
            *(_OWORD *)(v64 + 128) = *(_OWORD *)(v65 + 128);
            *(_OWORD *)(v64 + 144) = v68;
            v69 = *(_OWORD *)(v65 + 48);
            *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
            *(_OWORD *)(v64 + 48) = v69;
            v70 = *(_OWORD *)(v65 + 80);
            *(_OWORD *)(v64 + 64) = *(_OWORD *)(v65 + 64);
            *(_OWORD *)(v64 + 80) = v70;
            v71 = *(_OWORD *)(v65 + 16);
            *(_OWORD *)v64 = *(_OWORD *)v65;
            *(_OWORD *)(v64 + 16) = v71;
            v72 = *(_QWORD *)(v65 + 216);
            *(_QWORD *)(v64 + 208) = *(_QWORD *)(v65 + 208);
            *(_QWORD *)(v64 + 216) = v72;
            v73 = *(_QWORD *)(v65 + 224);
            v74 = *(_QWORD *)(v65 + 232);
            *(_QWORD *)(v64 + 224) = v73;
            *(_QWORD *)(v64 + 232) = v74;
            v76 = *(_QWORD *)(v65 + 240);
            v75 = *(_QWORD *)(v65 + 248);
            *(_QWORD *)(v64 + 240) = v76;
            *(_QWORD *)(v64 + 248) = v75;
            v77 = *(_QWORD *)(v65 + 256);
            v78 = *(_QWORD *)(v65 + 264);
            *(_QWORD *)(v64 + 256) = v77;
            *(_QWORD *)(v64 + 264) = v78;
            v118 = *(_QWORD *)(v65 + 272);
            v120 = *(_QWORD *)(v65 + 280);
            *(_QWORD *)(v64 + 272) = v118;
            *(_QWORD *)(v64 + 280) = v120;
            v122 = *(_QWORD *)(v65 + 288);
            v124 = *(_QWORD *)(v65 + 296);
            *(_QWORD *)(v64 + 288) = v122;
            *(_QWORD *)(v64 + 296) = v124;
            v126 = *(_QWORD *)(v65 + 304);
            v128 = *(_QWORD *)(v65 + 312);
            *(_QWORD *)(v64 + 304) = v126;
            *(_QWORD *)(v64 + 312) = v128;
            v130 = *(_QWORD *)(v65 + 320);
            v132 = *(_QWORD *)(v65 + 328);
            *(_QWORD *)(v64 + 320) = v130;
            *(_QWORD *)(v64 + 328) = v132;
            v134 = *(_QWORD *)(v65 + 336);
            v136 = *(_QWORD *)(v65 + 344);
            *(_QWORD *)(v64 + 336) = v134;
            *(_QWORD *)(v64 + 344) = v136;
            v138 = *(_QWORD *)(v65 + 352);
            *(_QWORD *)(v64 + 352) = v138;
            swift_bridgeObjectRetain(v140);
            swift_bridgeObjectRetain(v72);
            swift_bridgeObjectRetain(v73);
            swift_bridgeObjectRetain(v74);
            swift_bridgeObjectRetain(v76);
            swift_bridgeObjectRetain(v75);
            swift_bridgeObjectRetain(v77);
            swift_bridgeObjectRetain(v78);
            swift_bridgeObjectRetain(v118);
            swift_bridgeObjectRetain(v120);
            swift_bridgeObjectRetain(v122);
            swift_bridgeObjectRetain(v124);
            swift_bridgeObjectRetain(v126);
            swift_bridgeObjectRetain(v128);
            swift_bridgeObjectRetain(v130);
            swift_bridgeObjectRetain(v132);
            swift_bridgeObjectRetain(v134);
            swift_bridgeObjectRetain(v136);
            swift_bridgeObjectRetain(v138);
            v45 = a1;
            v46 = v30;
            v47 = 3;
            goto LABEL_17;
          case 6u:
            v79 = *(_QWORD *)a2;
            v80 = *(_QWORD *)(a2 + 8);
            v81 = *(_QWORD *)(a2 + 16);
            v82 = *(_QWORD *)(a2 + 24);
            v83 = *(_BYTE *)(a2 + 32);
            sub_100061540(v79, v80, v81, v82, v83);
            *(_QWORD *)a1 = v79;
            *(_QWORD *)(a1 + 8) = v80;
            *(_QWORD *)(a1 + 16) = v81;
            *(_QWORD *)(a1 + 24) = v82;
            *(_BYTE *)(a1 + 32) = v83;
            v45 = a1;
            v46 = v30;
            v47 = 6;
            goto LABEL_17;
          case 8u:
            v84 = *(void **)a2;
            *(_QWORD *)a1 = *(_QWORD *)a2;
            *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
            v85 = v84;
            v45 = a1;
            v46 = v30;
            v47 = 8;
            goto LABEL_17;
          case 9u:
            v86 = type metadata accessor for DispatchTimeInterval(0);
            v87 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 16);
            v87(a1, a2, v86);
            v88 = type metadata accessor for AWDLIdleActivity(0);
            v87(a1 + *(int *)(v88 + 20), a2 + *(int *)(v88 + 20), v86);
            v45 = a1;
            v46 = v30;
            v47 = 9;
LABEL_17:
            swift_storeEnumTagMultiPayload(v45, v46, v47);
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
            break;
        }
        v19 = a1;
        v20 = a3;
        v21 = 1;
        goto LABEL_19;
      case 0:
        v119 = a3;
        v137 = *(_QWORD *)(a2 + 80);
        v139 = *(_QWORD *)(a2 + 72);
        v133 = *(_QWORD *)(a2 + 96);
        v135 = *(_QWORD *)(a2 + 88);
        v129 = *(_QWORD *)(a2 + 112);
        v131 = *(_QWORD *)(a2 + 104);
        v125 = *(_QWORD *)(a2 + 128);
        v127 = *(_QWORD *)(a2 + 120);
        v121 = *(_QWORD *)(a2 + 144);
        v123 = *(_QWORD *)(a2 + 136);
        v90 = *(_QWORD *)(a2 + 152);
        v91 = *(_QWORD *)(a2 + 160);
        v92 = *(_QWORD *)(a2 + 168);
        v93 = *(_QWORD *)(a2 + 176);
        v94 = *(_QWORD *)(a2 + 184);
        v95 = *(_QWORD *)(a2 + 192);
        v96 = *(_QWORD *)(a2 + 200);
        v97 = *(_QWORD *)(a2 + 208);
        v98 = *(_QWORD *)(a2 + 216);
        v99 = *(_QWORD *)(a2 + 224);
        v100 = *(_QWORD *)(a2 + 232);
        v101 = *(_QWORD *)(a2 + 240);
        v102 = *(_QWORD *)(a2 + 248);
        v103 = *(_QWORD *)(a2 + 256);
        v104 = *(_QWORD *)(a2 + 264);
        v105 = *(_QWORD *)(a2 + 272);
        v106 = *(_QWORD *)(a2 + 280);
        v107 = *(_QWORD *)(a2 + 288);
        v108 = *(_QWORD *)(a2 + 296);
        v109 = *(_QWORD *)(a2 + 304);
        v110 = *(_QWORD *)(a2 + 312);
        v111 = *(_QWORD *)(a2 + 320);
        v112 = *(_QWORD *)(a2 + 328);
        v113 = *(_QWORD *)(a2 + 336);
        v114 = *(_QWORD *)(a2 + 344);
        v115 = *(_QWORD *)(a2 + 352);
        v116 = *(_BYTE *)(a2 + 360);
        v117 = *(_BYTE *)(a2 + 361);
        v9 = *(_QWORD *)(a2 + 64);
        v11 = *(_QWORD *)(a2 + 8);
        v10 = *(_QWORD *)a2;
        v12 = *(_QWORD *)a2;
        v14 = *(_QWORD *)(a2 + 24);
        v13 = *(_QWORD *)(a2 + 16);
        v15 = *(_QWORD *)(a2 + 32);
        v16 = *(_QWORD *)(a2 + 40);
        v17 = *(_QWORD *)(a2 + 48);
        v18 = *(_QWORD *)(a2 + 56);
        sub_100112E60(v12, v11, v13, v14, v15, v16, v17, v18, v9, v139, v137, v135, v133, v131, v129, v127, v125, v123, v121,
          v90,
          v91,
          v92,
          v93,
          v94,
          v95,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104,
          v105,
          v106,
          v107,
          v108,
          v109,
          v110,
          v111,
          v112,
          v113,
          v114,
          v115,
          v116,
          v117);
        *(_QWORD *)a1 = v10;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v13;
        *(_QWORD *)(a1 + 24) = v14;
        *(_QWORD *)(a1 + 32) = v15;
        *(_QWORD *)(a1 + 40) = v16;
        *(_QWORD *)(a1 + 48) = v17;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v9;
        *(_QWORD *)(a1 + 72) = v139;
        *(_QWORD *)(a1 + 80) = v137;
        *(_QWORD *)(a1 + 88) = v135;
        *(_QWORD *)(a1 + 96) = v133;
        *(_QWORD *)(a1 + 104) = v131;
        *(_QWORD *)(a1 + 112) = v129;
        *(_QWORD *)(a1 + 120) = v127;
        *(_QWORD *)(a1 + 128) = v125;
        *(_QWORD *)(a1 + 136) = v123;
        *(_QWORD *)(a1 + 144) = v121;
        *(_QWORD *)(a1 + 152) = v90;
        *(_QWORD *)(a1 + 160) = v91;
        *(_QWORD *)(a1 + 168) = v92;
        *(_QWORD *)(a1 + 176) = v93;
        *(_QWORD *)(a1 + 184) = v94;
        *(_QWORD *)(a1 + 192) = v95;
        *(_QWORD *)(a1 + 200) = v96;
        *(_QWORD *)(a1 + 208) = v97;
        *(_QWORD *)(a1 + 216) = v98;
        *(_QWORD *)(a1 + 224) = v99;
        *(_QWORD *)(a1 + 232) = v100;
        *(_QWORD *)(a1 + 240) = v101;
        *(_QWORD *)(a1 + 248) = v102;
        *(_QWORD *)(a1 + 256) = v103;
        *(_QWORD *)(a1 + 264) = v104;
        *(_QWORD *)(a1 + 272) = v105;
        *(_QWORD *)(a1 + 280) = v106;
        *(_QWORD *)(a1 + 288) = v107;
        *(_QWORD *)(a1 + 296) = v108;
        *(_QWORD *)(a1 + 304) = v109;
        *(_QWORD *)(a1 + 312) = v110;
        *(_QWORD *)(a1 + 320) = v111;
        *(_QWORD *)(a1 + 328) = v112;
        *(_QWORD *)(a1 + 336) = v113;
        *(_QWORD *)(a1 + 344) = v114;
        *(_QWORD *)(a1 + 352) = v115;
        *(_BYTE *)(a1 + 360) = v116;
        *(_BYTE *)(a1 + 361) = v117;
        v19 = a1;
        v20 = v119;
        v21 = 0;
LABEL_19:
        swift_storeEnumTagMultiPayload(v19, v20, v21);
        return a1;
    }
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t assignWithCopy for DriverEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  void *v81;
  id v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  if (a1 != a2)
  {
    sub_100063824(a1, type metadata accessor for DriverEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v11 = *(_QWORD *)a2;
        v12 = *(_QWORD *)(a2 + 8);
        v13 = *(_QWORD *)(a2 + 16);
        v14 = *(_QWORD *)(a2 + 24);
        v15 = *(_QWORD *)(a2 + 32);
        v16 = *(_BYTE *)(a2 + 41);
        v17 = *(_BYTE *)(a2 + 40);
        sub_1000087D0(v11, v12, v13, v14, v15, v17, v16);
        *(_QWORD *)a1 = v11;
        *(_QWORD *)(a1 + 8) = v12;
        *(_QWORD *)(a1 + 16) = v13;
        *(_QWORD *)(a1 + 24) = v14;
        *(_QWORD *)(a1 + 32) = v15;
        *(_BYTE *)(a1 + 40) = v17;
        *(_BYTE *)(a1 + 41) = v16;
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_18;
      case 1:
        v18 = type metadata accessor for DriverEvent.AWDL(0);
        switch(swift_getEnumCaseMultiPayload(a2, v18))
        {
          case 1u:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            v19 = *(_QWORD *)(a2 + 8);
            v20 = *(_QWORD *)(a2 + 16);
            v21 = *(_QWORD *)(a2 + 24);
            sub_100063D24(v19, v20, v21);
            *(_QWORD *)(a1 + 8) = v19;
            *(_QWORD *)(a1 + 16) = v20;
            *(_QWORD *)(a1 + 24) = v21;
            v22 = *(int *)(sub_100012C44(&qword_100405BB0) + 48);
            v23 = a1 + v22;
            v24 = a2 + v22;
            LODWORD(v22) = *(_DWORD *)(a2 + v22);
            *(_WORD *)(v23 + 4) = *(_WORD *)(v24 + 4);
            *(_DWORD *)v23 = v22;
            LOWORD(v22) = *(_WORD *)(v24 + 10);
            *(_DWORD *)(v23 + 6) = *(_DWORD *)(v24 + 6);
            *(_WORD *)(v23 + 10) = v22;
            LOWORD(v22) = *(_WORD *)(v24 + 16);
            *(_DWORD *)(v23 + 12) = *(_DWORD *)(v24 + 12);
            *(_WORD *)(v23 + 16) = v22;
            *(_DWORD *)(v23 + 20) = *(_DWORD *)(v24 + 20);
            v25 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
            v26 = v25[8];
            v27 = v23 + v26;
            v28 = v24 + v26;
            v29 = type metadata accessor for DispatchTimeInterval(0);
            v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
            v30(v27, v28, v29);
            v30(v23 + v25[9], v24 + v25[9], v29);
            *(_DWORD *)(v23 + v25[10]) = *(_DWORD *)(v24 + v25[10]);
            *(_DWORD *)(v23 + v25[11]) = *(_DWORD *)(v24 + v25[11]);
            *(_QWORD *)(v23 + v25[12]) = *(_QWORD *)(v24 + v25[12]);
            *(_DWORD *)(v23 + v25[13]) = *(_DWORD *)(v24 + v25[13]);
            *(_QWORD *)(v23 + v25[14]) = *(_QWORD *)(v24 + v25[14]);
            *(_DWORD *)(v23 + v25[15]) = *(_DWORD *)(v24 + v25[15]);
            v31 = v25[16];
            v32 = *(_QWORD *)(v24 + v31);
            *(_QWORD *)(v23 + v31) = v32;
            swift_bridgeObjectRetain(v32);
            v33 = a1;
            v34 = v18;
            v35 = 1;
            goto LABEL_16;
          case 2u:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
            *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
            *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 34);
            *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
            *(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 38);
            *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
            *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
            *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
            *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
            *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
            *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
            *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
            *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
            *(_BYTE *)(a1 + 63) = *(_BYTE *)(a2 + 63);
            *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
            *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
            *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
            *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
            *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
            *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
            *(_BYTE *)(a1 + 70) = *(_BYTE *)(a2 + 70);
            *(_BYTE *)(a1 + 71) = *(_BYTE *)(a2 + 71);
            *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
            v36 = *(_QWORD *)(a2 + 80);
            *(_QWORD *)(a1 + 80) = v36;
            v37 = *(_QWORD *)(a2 + 88);
            *(_QWORD *)(a1 + 88) = v37;
            v38 = *(_QWORD *)(a2 + 96);
            *(_QWORD *)(a1 + 96) = v38;
            v39 = *(_QWORD *)(a2 + 104);
            *(_QWORD *)(a1 + 104) = v39;
            swift_bridgeObjectRetain(v36);
            swift_bridgeObjectRetain(v37);
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v39);
            v33 = a1;
            v34 = v18;
            v35 = 2;
            goto LABEL_16;
          case 3u:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
            v40 = *(_DWORD *)(a2 + 32);
            *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
            *(_DWORD *)(a1 + 32) = v40;
            v41 = *(_DWORD *)(a2 + 40);
            *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
            *(_DWORD *)(a1 + 40) = v41;
            v42 = *(_DWORD *)(a2 + 48);
            *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
            *(_DWORD *)(a1 + 48) = v42;
            v43 = *(_DWORD *)(a2 + 56);
            *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
            *(_DWORD *)(a1 + 56) = v43;
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
            *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
            *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
            *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
            v44 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
            v45 = v44[20];
            v46 = a1 + v45;
            v47 = a2 + v45;
            v48 = type metadata accessor for DispatchTimeInterval(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
            *(_QWORD *)(a1 + v44[21]) = *(_QWORD *)(a2 + v44[21]);
            *(_QWORD *)(a1 + v44[22]) = *(_QWORD *)(a2 + v44[22]);
            *(_QWORD *)(a1 + v44[23]) = *(_QWORD *)(a2 + v44[23]);
            *(_QWORD *)(a1 + v44[24]) = *(_QWORD *)(a2 + v44[24]);
            *(_QWORD *)(a1 + v44[25]) = *(_QWORD *)(a2 + v44[25]);
            *(_QWORD *)(a1 + v44[26]) = *(_QWORD *)(a2 + v44[26]);
            *(_QWORD *)(a1 + v44[27]) = *(_QWORD *)(a2 + v44[27]);
            *(_QWORD *)(a1 + v44[28]) = *(_QWORD *)(a2 + v44[28]);
            *(_WORD *)(a1 + v44[29]) = *(_WORD *)(a2 + v44[29]);
            *(_BYTE *)(a1 + v44[30]) = *(_BYTE *)(a2 + v44[30]);
            *(_BYTE *)(a1 + v44[31]) = *(_BYTE *)(a2 + v44[31]);
            *(_BYTE *)(a1 + v44[32]) = *(_BYTE *)(a2 + v44[32]);
            *(_BYTE *)(a1 + v44[33]) = *(_BYTE *)(a2 + v44[33]);
            *(_BYTE *)(a1 + v44[34]) = *(_BYTE *)(a2 + v44[34]);
            *(_BYTE *)(a1 + v44[35]) = *(_BYTE *)(a2 + v44[35]);
            v49 = v44[36];
            v50 = (_QWORD *)(a1 + v49);
            v51 = (_QWORD *)(a2 + v49);
            *v50 = *v51;
            v142 = v51[1];
            v50[1] = v142;
            *(_BYTE *)(a1 + v44[37]) = *(_BYTE *)(a2 + v44[37]);
            *(_QWORD *)(a1 + v44[38]) = *(_QWORD *)(a2 + v44[38]);
            *(_QWORD *)(a1 + v44[39]) = *(_QWORD *)(a2 + v44[39]);
            *(_QWORD *)(a1 + v44[40]) = *(_QWORD *)(a2 + v44[40]);
            *(_QWORD *)(a1 + v44[41]) = *(_QWORD *)(a2 + v44[41]);
            v52 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
            v53 = a1 + v52;
            v54 = a2 + v52;
            v55 = *(_QWORD *)(v54 + 208);
            v57 = *(_OWORD *)(v54 + 176);
            v56 = *(_OWORD *)(v54 + 192);
            *(_OWORD *)(v53 + 160) = *(_OWORD *)(v54 + 160);
            *(_OWORD *)(v53 + 176) = v57;
            *(_OWORD *)(v53 + 192) = v56;
            *(_QWORD *)(v53 + 208) = v55;
            v59 = *(_OWORD *)(v54 + 128);
            v58 = *(_OWORD *)(v54 + 144);
            v60 = *(_OWORD *)(v54 + 112);
            *(_OWORD *)(v53 + 96) = *(_OWORD *)(v54 + 96);
            *(_OWORD *)(v53 + 112) = v60;
            *(_OWORD *)(v53 + 128) = v59;
            *(_OWORD *)(v53 + 144) = v58;
            v62 = *(_OWORD *)(v54 + 64);
            v61 = *(_OWORD *)(v54 + 80);
            v63 = *(_OWORD *)(v54 + 48);
            *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
            *(_OWORD *)(v53 + 48) = v63;
            *(_OWORD *)(v53 + 64) = v62;
            *(_OWORD *)(v53 + 80) = v61;
            v64 = *(_OWORD *)(v54 + 16);
            *(_OWORD *)v53 = *(_OWORD *)v54;
            *(_OWORD *)(v53 + 16) = v64;
            v65 = *(_QWORD *)(v54 + 216);
            *(_QWORD *)(v53 + 216) = v65;
            v66 = *(_QWORD *)(v54 + 224);
            *(_QWORD *)(v53 + 224) = v66;
            v67 = *(_QWORD *)(v54 + 232);
            *(_QWORD *)(v53 + 232) = v67;
            v68 = *(_QWORD *)(v54 + 240);
            *(_QWORD *)(v53 + 240) = v68;
            v124 = a3;
            v69 = *(_QWORD *)(v54 + 248);
            *(_QWORD *)(v53 + 248) = v69;
            v144 = v18;
            v70 = *(_QWORD *)(v54 + 256);
            *(_QWORD *)(v53 + 256) = v70;
            v71 = *(_QWORD *)(v54 + 264);
            *(_QWORD *)(v53 + 264) = v71;
            v72 = *(_QWORD *)(v54 + 272);
            *(_QWORD *)(v53 + 272) = v72;
            v73 = *(_QWORD *)(v54 + 280);
            *(_QWORD *)(v53 + 280) = v73;
            v123 = *(_QWORD *)(v54 + 288);
            *(_QWORD *)(v53 + 288) = v123;
            v126 = *(_QWORD *)(v54 + 296);
            *(_QWORD *)(v53 + 296) = v126;
            v128 = *(_QWORD *)(v54 + 304);
            *(_QWORD *)(v53 + 304) = v128;
            v130 = *(_QWORD *)(v54 + 312);
            *(_QWORD *)(v53 + 312) = v130;
            v132 = *(_QWORD *)(v54 + 320);
            *(_QWORD *)(v53 + 320) = v132;
            v134 = *(_QWORD *)(v54 + 328);
            *(_QWORD *)(v53 + 328) = v134;
            v136 = *(_QWORD *)(v54 + 336);
            *(_QWORD *)(v53 + 336) = v136;
            v74 = *(_QWORD *)(v54 + 344);
            *(_QWORD *)(v53 + 344) = v74;
            v138 = v74;
            v140 = *(_QWORD *)(v54 + 352);
            *(_QWORD *)(v53 + 352) = v140;
            swift_bridgeObjectRetain(v142);
            swift_bridgeObjectRetain(v65);
            swift_bridgeObjectRetain(v66);
            swift_bridgeObjectRetain(v67);
            swift_bridgeObjectRetain(v68);
            v75 = v69;
            a3 = v124;
            swift_bridgeObjectRetain(v75);
            swift_bridgeObjectRetain(v70);
            swift_bridgeObjectRetain(v71);
            swift_bridgeObjectRetain(v72);
            swift_bridgeObjectRetain(v73);
            swift_bridgeObjectRetain(v123);
            swift_bridgeObjectRetain(v126);
            swift_bridgeObjectRetain(v128);
            swift_bridgeObjectRetain(v130);
            swift_bridgeObjectRetain(v132);
            swift_bridgeObjectRetain(v134);
            swift_bridgeObjectRetain(v136);
            swift_bridgeObjectRetain(v138);
            swift_bridgeObjectRetain(v140);
            v33 = a1;
            v34 = v144;
            v35 = 3;
            goto LABEL_16;
          case 6u:
            v76 = *(_QWORD *)a2;
            v77 = *(_QWORD *)(a2 + 8);
            v78 = *(_QWORD *)(a2 + 16);
            v79 = *(_QWORD *)(a2 + 24);
            v80 = *(_BYTE *)(a2 + 32);
            sub_100061540(v76, v77, v78, v79, v80);
            *(_QWORD *)a1 = v76;
            *(_QWORD *)(a1 + 8) = v77;
            *(_QWORD *)(a1 + 16) = v78;
            *(_QWORD *)(a1 + 24) = v79;
            *(_BYTE *)(a1 + 32) = v80;
            v33 = a1;
            v34 = v18;
            v35 = 6;
            goto LABEL_16;
          case 8u:
            v81 = *(void **)a2;
            *(_QWORD *)a1 = *(_QWORD *)a2;
            *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
            v82 = v81;
            v33 = a1;
            v34 = v18;
            v35 = 8;
            goto LABEL_16;
          case 9u:
            v83 = type metadata accessor for DispatchTimeInterval(0);
            v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 16);
            v84(a1, a2, v83);
            v85 = type metadata accessor for AWDLIdleActivity(0);
            v84(a1 + *(int *)(v85 + 20), a2 + *(int *)(v85 + 20), v83);
            v33 = a1;
            v34 = v18;
            v35 = 9;
LABEL_16:
            swift_storeEnumTagMultiPayload(v33, v34, v35);
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
            break;
        }
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_18;
      case 0:
        v116 = *(_QWORD *)(a2 + 8);
        v117 = *(_QWORD *)a2;
        v114 = *(_QWORD *)(a2 + 24);
        v115 = *(_QWORD *)(a2 + 16);
        v113 = *(_QWORD *)(a2 + 32);
        v112 = *(_QWORD *)(a2 + 40);
        v111 = *(_QWORD *)(a2 + 48);
        v118 = *(_QWORD *)(a2 + 56);
        v141 = *(_QWORD *)(a2 + 80);
        v143 = *(_QWORD *)(a2 + 72);
        v137 = *(_QWORD *)(a2 + 96);
        v139 = *(_QWORD *)(a2 + 88);
        v133 = *(_QWORD *)(a2 + 112);
        v135 = *(_QWORD *)(a2 + 104);
        v129 = *(_QWORD *)(a2 + 128);
        v131 = *(_QWORD *)(a2 + 120);
        v125 = *(_QWORD *)(a2 + 144);
        v127 = *(_QWORD *)(a2 + 136);
        v87 = *(_QWORD *)(a2 + 152);
        v88 = *(_QWORD *)(a2 + 160);
        v89 = *(_QWORD *)(a2 + 168);
        v90 = *(_QWORD *)(a2 + 176);
        v91 = *(_QWORD *)(a2 + 184);
        v92 = *(_QWORD *)(a2 + 192);
        v93 = *(_QWORD *)(a2 + 200);
        v94 = *(_QWORD *)(a2 + 208);
        v95 = *(_QWORD *)(a2 + 216);
        v96 = *(_QWORD *)(a2 + 224);
        v97 = *(_QWORD *)(a2 + 232);
        v98 = *(_QWORD *)(a2 + 240);
        v99 = *(_QWORD *)(a2 + 248);
        v100 = *(_QWORD *)(a2 + 256);
        v101 = *(_QWORD *)(a2 + 264);
        v102 = *(_QWORD *)(a2 + 272);
        v103 = *(_QWORD *)(a2 + 280);
        v104 = *(_QWORD *)(a2 + 288);
        v105 = *(_QWORD *)(a2 + 296);
        v106 = *(_QWORD *)(a2 + 304);
        v107 = *(_QWORD *)(a2 + 312);
        v108 = *(_QWORD *)(a2 + 320);
        v109 = *(_QWORD *)(a2 + 328);
        v110 = *(_QWORD *)(a2 + 336);
        v119 = *(_QWORD *)(a2 + 344);
        v120 = *(_QWORD *)(a2 + 352);
        v121 = *(_BYTE *)(a2 + 360);
        v122 = *(_BYTE *)(a2 + 361);
        v7 = *(_QWORD *)(a2 + 64);
        sub_100112E60(v117, v116, v115, v114, v113, v112, v111, v118, v7, v143, v141, v139, v137, v135, v133, v131, v129, v127, v125,
          v87,
          v88,
          v89,
          v90,
          v91,
          v92,
          v93,
          v94,
          v95,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104,
          v105,
          v106,
          v107,
          v108,
          v109,
          v110,
          v119,
          v120,
          v121,
          v122);
        *(_QWORD *)a1 = v117;
        *(_QWORD *)(a1 + 8) = v116;
        *(_QWORD *)(a1 + 16) = v115;
        *(_QWORD *)(a1 + 24) = v114;
        *(_QWORD *)(a1 + 32) = v113;
        *(_QWORD *)(a1 + 40) = v112;
        *(_QWORD *)(a1 + 48) = v111;
        *(_QWORD *)(a1 + 56) = v118;
        *(_QWORD *)(a1 + 64) = v7;
        *(_QWORD *)(a1 + 72) = v143;
        *(_QWORD *)(a1 + 80) = v141;
        *(_QWORD *)(a1 + 88) = v139;
        *(_QWORD *)(a1 + 96) = v137;
        *(_QWORD *)(a1 + 104) = v135;
        *(_QWORD *)(a1 + 112) = v133;
        *(_QWORD *)(a1 + 120) = v131;
        *(_QWORD *)(a1 + 128) = v129;
        *(_QWORD *)(a1 + 136) = v127;
        *(_QWORD *)(a1 + 144) = v125;
        *(_QWORD *)(a1 + 152) = v87;
        *(_QWORD *)(a1 + 160) = v88;
        *(_QWORD *)(a1 + 168) = v89;
        *(_QWORD *)(a1 + 176) = v90;
        *(_QWORD *)(a1 + 184) = v91;
        *(_QWORD *)(a1 + 192) = v92;
        *(_QWORD *)(a1 + 200) = v93;
        *(_QWORD *)(a1 + 208) = v94;
        *(_QWORD *)(a1 + 216) = v95;
        *(_QWORD *)(a1 + 224) = v96;
        *(_QWORD *)(a1 + 232) = v97;
        *(_QWORD *)(a1 + 240) = v98;
        *(_QWORD *)(a1 + 248) = v99;
        *(_QWORD *)(a1 + 256) = v100;
        *(_QWORD *)(a1 + 264) = v101;
        *(_QWORD *)(a1 + 272) = v102;
        *(_QWORD *)(a1 + 280) = v103;
        *(_QWORD *)(a1 + 288) = v104;
        *(_QWORD *)(a1 + 296) = v105;
        *(_QWORD *)(a1 + 304) = v106;
        *(_QWORD *)(a1 + 312) = v107;
        *(_QWORD *)(a1 + 320) = v108;
        *(_QWORD *)(a1 + 328) = v109;
        *(_QWORD *)(a1 + 336) = v110;
        *(_QWORD *)(a1 + 344) = v119;
        *(_QWORD *)(a1 + 352) = v120;
        *(_BYTE *)(a1 + 360) = v121;
        *(_BYTE *)(a1 + 361) = v122;
        v8 = a1;
        v9 = a3;
        v10 = 0;
LABEL_18:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        return a1;
    }
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for DriverEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  int v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for DriverEvent.AWDL(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    switch(EnumCaseMultiPayload)
    {
      case 9:
        v18 = type metadata accessor for DispatchTimeInterval(0);
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
        v19(a1, a2, v18);
        v20 = type metadata accessor for AWDLIdleActivity(0);
        v19(&a1[*(int *)(v20 + 20)], &a2[*(int *)(v20 + 20)], v18);
        swift_storeEnumTagMultiPayload(a1, v6, 9);
        break;
      case 3:
        *a1 = *a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18) = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22) = *((_WORD *)a2 + 22);
        v21 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26) = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12) = v21;
        *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30) = *((_WORD *)a2 + 30);
        v22 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v22;
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        a1[112] = a2[112];
        v23 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
        v24 = v23[20];
        v25 = &a1[v24];
        v26 = &a2[v24];
        v27 = type metadata accessor for DispatchTimeInterval(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
        *(_QWORD *)&a1[v23[21]] = *(_QWORD *)&a2[v23[21]];
        *(_QWORD *)&a1[v23[22]] = *(_QWORD *)&a2[v23[22]];
        *(_QWORD *)&a1[v23[23]] = *(_QWORD *)&a2[v23[23]];
        *(_QWORD *)&a1[v23[24]] = *(_QWORD *)&a2[v23[24]];
        *(_QWORD *)&a1[v23[25]] = *(_QWORD *)&a2[v23[25]];
        *(_QWORD *)&a1[v23[26]] = *(_QWORD *)&a2[v23[26]];
        *(_QWORD *)&a1[v23[27]] = *(_QWORD *)&a2[v23[27]];
        *(_QWORD *)&a1[v23[28]] = *(_QWORD *)&a2[v23[28]];
        *(_WORD *)&a1[v23[29]] = *(_WORD *)&a2[v23[29]];
        a1[v23[30]] = a2[v23[30]];
        a1[v23[31]] = a2[v23[31]];
        a1[v23[32]] = a2[v23[32]];
        a1[v23[33]] = a2[v23[33]];
        a1[v23[34]] = a2[v23[34]];
        a1[v23[35]] = a2[v23[35]];
        *(_OWORD *)&a1[v23[36]] = *(_OWORD *)&a2[v23[36]];
        a1[v23[37]] = a2[v23[37]];
        *(_QWORD *)&a1[v23[38]] = *(_QWORD *)&a2[v23[38]];
        *(_QWORD *)&a1[v23[39]] = *(_QWORD *)&a2[v23[39]];
        *(_QWORD *)&a1[v23[40]] = *(_QWORD *)&a2[v23[40]];
        *(_QWORD *)&a1[v23[41]] = *(_QWORD *)&a2[v23[41]];
        v28 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
        memcpy(&a1[*(int *)(v28 + 20)], &a2[*(int *)(v28 + 20)], 0x168uLL);
        swift_storeEnumTagMultiPayload(a1, v6, 3);
        break;
      case 1:
        v8 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v8;
        v9 = *(int *)(sub_100012C44(&qword_100405BB0) + 48);
        v10 = &a1[v9];
        v11 = &a2[v9];
        *(_DWORD *)v10 = *(_DWORD *)&a2[v9];
        *((_WORD *)v10 + 2) = *(_WORD *)&a2[v9 + 4];
        *(_DWORD *)(v10 + 6) = *(_DWORD *)&a2[v9 + 6];
        *((_WORD *)v10 + 5) = *(_WORD *)&a2[v9 + 10];
        *((_DWORD *)v10 + 3) = *(_DWORD *)&a2[v9 + 12];
        *((_WORD *)v10 + 8) = *(_WORD *)&a2[v9 + 16];
        *((_DWORD *)v10 + 5) = *(_DWORD *)&a2[v9 + 20];
        v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
        v13 = v12[8];
        v14 = &v10[v13];
        v15 = &v11[v13];
        v16 = type metadata accessor for DispatchTimeInterval(0);
        v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
        v17(v14, v15, v16);
        v17(&v10[v12[9]], &v11[v12[9]], v16);
        *(_DWORD *)&v10[v12[10]] = *(_DWORD *)&v11[v12[10]];
        *(_DWORD *)&v10[v12[11]] = *(_DWORD *)&v11[v12[11]];
        *(_QWORD *)&v10[v12[12]] = *(_QWORD *)&v11[v12[12]];
        *(_DWORD *)&v10[v12[13]] = *(_DWORD *)&v11[v12[13]];
        *(_QWORD *)&v10[v12[14]] = *(_QWORD *)&v11[v12[14]];
        *(_DWORD *)&v10[v12[15]] = *(_DWORD *)&v11[v12[15]];
        *(_QWORD *)&v10[v12[16]] = *(_QWORD *)&v11[v12[16]];
        swift_storeEnumTagMultiPayload(a1, v6, 1);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for DriverEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  int v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    sub_100063824((uint64_t)a1, type metadata accessor for DriverEvent);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for DriverEvent.AWDL(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      switch(EnumCaseMultiPayload)
      {
        case 9:
          v18 = type metadata accessor for DispatchTimeInterval(0);
          v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
          v19(a1, a2, v18);
          v20 = type metadata accessor for AWDLIdleActivity(0);
          v19(&a1[*(int *)(v20 + 20)], &a2[*(int *)(v20 + 20)], v18);
          swift_storeEnumTagMultiPayload(a1, v6, 9);
          break;
        case 3:
          *a1 = *a2;
          *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
          *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
          *((_WORD *)a1 + 18) = *((_WORD *)a2 + 18);
          *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
          *((_WORD *)a1 + 22) = *((_WORD *)a2 + 22);
          v21 = *((_DWORD *)a2 + 12);
          *((_WORD *)a1 + 26) = *((_WORD *)a2 + 26);
          *((_DWORD *)a1 + 12) = v21;
          *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
          *((_WORD *)a1 + 30) = *((_WORD *)a2 + 30);
          v22 = *((_OWORD *)a2 + 5);
          *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 5) = v22;
          *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
          a1[112] = a2[112];
          v23 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
          v24 = v23[20];
          v25 = &a1[v24];
          v26 = &a2[v24];
          v27 = type metadata accessor for DispatchTimeInterval(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
          *(_QWORD *)&a1[v23[21]] = *(_QWORD *)&a2[v23[21]];
          *(_QWORD *)&a1[v23[22]] = *(_QWORD *)&a2[v23[22]];
          *(_QWORD *)&a1[v23[23]] = *(_QWORD *)&a2[v23[23]];
          *(_QWORD *)&a1[v23[24]] = *(_QWORD *)&a2[v23[24]];
          *(_QWORD *)&a1[v23[25]] = *(_QWORD *)&a2[v23[25]];
          *(_QWORD *)&a1[v23[26]] = *(_QWORD *)&a2[v23[26]];
          *(_QWORD *)&a1[v23[27]] = *(_QWORD *)&a2[v23[27]];
          *(_QWORD *)&a1[v23[28]] = *(_QWORD *)&a2[v23[28]];
          *(_WORD *)&a1[v23[29]] = *(_WORD *)&a2[v23[29]];
          a1[v23[30]] = a2[v23[30]];
          a1[v23[31]] = a2[v23[31]];
          a1[v23[32]] = a2[v23[32]];
          a1[v23[33]] = a2[v23[33]];
          a1[v23[34]] = a2[v23[34]];
          a1[v23[35]] = a2[v23[35]];
          *(_OWORD *)&a1[v23[36]] = *(_OWORD *)&a2[v23[36]];
          a1[v23[37]] = a2[v23[37]];
          *(_QWORD *)&a1[v23[38]] = *(_QWORD *)&a2[v23[38]];
          *(_QWORD *)&a1[v23[39]] = *(_QWORD *)&a2[v23[39]];
          *(_QWORD *)&a1[v23[40]] = *(_QWORD *)&a2[v23[40]];
          *(_QWORD *)&a1[v23[41]] = *(_QWORD *)&a2[v23[41]];
          v28 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
          memcpy(&a1[*(int *)(v28 + 20)], &a2[*(int *)(v28 + 20)], 0x168uLL);
          swift_storeEnumTagMultiPayload(a1, v6, 3);
          break;
        case 1:
          v8 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v8;
          v9 = *(int *)(sub_100012C44(&qword_100405BB0) + 48);
          v10 = &a1[v9];
          v11 = &a2[v9];
          *(_DWORD *)v10 = *(_DWORD *)&a2[v9];
          *((_WORD *)v10 + 2) = *(_WORD *)&a2[v9 + 4];
          *(_DWORD *)(v10 + 6) = *(_DWORD *)&a2[v9 + 6];
          *((_WORD *)v10 + 5) = *(_WORD *)&a2[v9 + 10];
          *((_DWORD *)v10 + 3) = *(_DWORD *)&a2[v9 + 12];
          *((_WORD *)v10 + 8) = *(_WORD *)&a2[v9 + 16];
          *((_DWORD *)v10 + 5) = *(_DWORD *)&a2[v9 + 20];
          v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
          v13 = v12[8];
          v14 = &v10[v13];
          v15 = &v11[v13];
          v16 = type metadata accessor for DispatchTimeInterval(0);
          v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
          v17(v14, v15, v16);
          v17(&v10[v12[9]], &v11[v12[9]], v16);
          *(_DWORD *)&v10[v12[10]] = *(_DWORD *)&v11[v12[10]];
          *(_DWORD *)&v10[v12[11]] = *(_DWORD *)&v11[v12[11]];
          *(_QWORD *)&v10[v12[12]] = *(_QWORD *)&v11[v12[12]];
          *(_DWORD *)&v10[v12[13]] = *(_DWORD *)&v11[v12[13]];
          *(_QWORD *)&v10[v12[14]] = *(_QWORD *)&v11[v12[14]];
          *(_DWORD *)&v10[v12[15]] = *(_DWORD *)&v11[v12[15]];
          *(_QWORD *)&v10[v12[16]] = *(_QWORD *)&v11[v12[16]];
          swift_storeEnumTagMultiPayload(a1, v6, 1);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100116B20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1003486D0;
  result = type metadata accessor for DriverEvent.AWDL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1003486E8;
    v4[3] = &unk_100348700;
    v4[4] = &unk_100348718;
    swift_initEnumMetadataMultiPayload(a1, 256, 5, v4);
    return 0;
  }
  return result;
}

uint64_t destroy for DriverEvent.NAN(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int16 v10;

  v10 = *(_WORD *)(a1 + 360);
  v8 = *(_OWORD *)(a1 + 320);
  v9 = *(_OWORD *)(a1 + 336);
  v6 = *(_OWORD *)(a1 + 288);
  v7 = *(_OWORD *)(a1 + 304);
  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v2 = *(_OWORD *)(a1 + 224);
  v3 = *(_OWORD *)(a1 + 240);
  return sub_100063114(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           *(_QWORD *)(a1 + 200),
           *(_QWORD *)(a1 + 208),
           *(_QWORD *)(a1 + 216),
           v2,
           *((uint64_t *)&v2 + 1),
           v3,
           *((uint64_t *)&v3 + 1),
           v4,
           *((uint64_t *)&v4 + 1),
           v5,
           *((uint64_t *)&v5 + 1),
           v6,
           *((uint64_t *)&v6 + 1),
           v7,
           *((uint64_t *)&v7 + 1),
           v8,
           *((uint64_t *)&v8 + 1),
           v9,
           *((uint64_t *)&v9 + 1),
           *(_QWORD *)(a1 + 352),
           v10,
           SHIBYTE(v10));
}

uint64_t initializeWithCopy for DriverEvent.NAN(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = *(_QWORD *)(a2 + 72);
  v50 = *(_QWORD *)(a2 + 64);
  v47 = *(_QWORD *)(a2 + 88);
  v48 = *(_QWORD *)(a2 + 80);
  v45 = *(_QWORD *)(a2 + 104);
  v46 = *(_QWORD *)(a2 + 96);
  v43 = *(_QWORD *)(a2 + 120);
  v44 = *(_QWORD *)(a2 + 112);
  v41 = *(_QWORD *)(a2 + 136);
  v42 = *(_QWORD *)(a2 + 128);
  v40 = *(_QWORD *)(a2 + 144);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a2 + 160);
  v15 = *(_QWORD *)(a2 + 168);
  v16 = *(_QWORD *)(a2 + 176);
  v17 = *(_QWORD *)(a2 + 184);
  v18 = *(_QWORD *)(a2 + 192);
  v19 = *(_QWORD *)(a2 + 200);
  v20 = *(_QWORD *)(a2 + 208);
  v3 = *(_QWORD *)(a2 + 224);
  v21 = *(_QWORD *)(a2 + 216);
  v22 = *(_QWORD *)(a2 + 232);
  v23 = *(_QWORD *)(a2 + 240);
  v24 = *(_QWORD *)(a2 + 248);
  v25 = *(_QWORD *)(a2 + 256);
  v26 = *(_QWORD *)(a2 + 264);
  v27 = *(_QWORD *)(a2 + 272);
  v28 = *(_QWORD *)(a2 + 280);
  v29 = *(_QWORD *)(a2 + 288);
  v30 = *(_QWORD *)(a2 + 296);
  v31 = *(_QWORD *)(a2 + 304);
  v32 = *(_QWORD *)(a2 + 312);
  v33 = *(_QWORD *)(a2 + 320);
  v34 = *(_QWORD *)(a2 + 328);
  v35 = *(_QWORD *)(a2 + 336);
  v36 = *(_QWORD *)(a2 + 344);
  v37 = *(_QWORD *)(a2 + 352);
  v38 = *(_BYTE *)(a2 + 360);
  v39 = *(_BYTE *)(a2 + 361);
  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_100112E60(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v50, v49, v48, v47, v46, v45, v44, v43, v42, v41, v40,
    v13,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v21,
    v3,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v50;
  *(_QWORD *)(a1 + 72) = v49;
  *(_QWORD *)(a1 + 80) = v48;
  *(_QWORD *)(a1 + 88) = v47;
  *(_QWORD *)(a1 + 96) = v46;
  *(_QWORD *)(a1 + 104) = v45;
  *(_QWORD *)(a1 + 112) = v44;
  *(_QWORD *)(a1 + 120) = v43;
  *(_QWORD *)(a1 + 128) = v42;
  *(_QWORD *)(a1 + 136) = v41;
  *(_QWORD *)(a1 + 144) = v40;
  *(_QWORD *)(a1 + 152) = v13;
  *(_QWORD *)(a1 + 160) = v14;
  *(_QWORD *)(a1 + 168) = v15;
  *(_QWORD *)(a1 + 176) = v16;
  *(_QWORD *)(a1 + 184) = v17;
  *(_QWORD *)(a1 + 192) = v18;
  *(_QWORD *)(a1 + 200) = v19;
  *(_QWORD *)(a1 + 208) = v20;
  *(_QWORD *)(a1 + 216) = v21;
  *(_QWORD *)(a1 + 224) = v3;
  *(_QWORD *)(a1 + 232) = v22;
  *(_QWORD *)(a1 + 240) = v23;
  *(_QWORD *)(a1 + 248) = v24;
  *(_QWORD *)(a1 + 256) = v25;
  *(_QWORD *)(a1 + 264) = v26;
  *(_QWORD *)(a1 + 272) = v27;
  *(_QWORD *)(a1 + 280) = v28;
  *(_QWORD *)(a1 + 288) = v29;
  *(_QWORD *)(a1 + 296) = v30;
  *(_QWORD *)(a1 + 304) = v31;
  *(_QWORD *)(a1 + 312) = v32;
  *(_QWORD *)(a1 + 320) = v33;
  *(_QWORD *)(a1 + 328) = v34;
  *(_QWORD *)(a1 + 336) = v35;
  *(_QWORD *)(a1 + 344) = v36;
  *(_QWORD *)(a1 + 352) = v37;
  *(_BYTE *)(a1 + 360) = v38;
  *(_BYTE *)(a1 + 361) = v39;
  return a1;
}

uint64_t assignWithCopy for DriverEvent.NAN(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v77 = *(_QWORD *)a2;
  v78 = *(_QWORD *)(a2 + 8);
  v75 = *(_QWORD *)(a2 + 24);
  v76 = *(_QWORD *)(a2 + 16);
  v73 = *(_QWORD *)(a2 + 40);
  v74 = *(_QWORD *)(a2 + 32);
  v71 = *(_QWORD *)(a2 + 56);
  v72 = *(_QWORD *)(a2 + 48);
  v69 = *(_QWORD *)(a2 + 72);
  v70 = *(_QWORD *)(a2 + 64);
  v67 = *(_QWORD *)(a2 + 88);
  v68 = *(_QWORD *)(a2 + 80);
  v65 = *(_QWORD *)(a2 + 104);
  v66 = *(_QWORD *)(a2 + 96);
  v63 = *(_QWORD *)(a2 + 120);
  v64 = *(_QWORD *)(a2 + 112);
  v61 = *(_QWORD *)(a2 + 136);
  v62 = *(_QWORD *)(a2 + 128);
  v3 = *(_QWORD *)(a2 + 152);
  v60 = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 160);
  v5 = *(_QWORD *)(a2 + 168);
  v6 = *(_QWORD *)(a2 + 176);
  v7 = *(_QWORD *)(a2 + 184);
  v8 = *(_QWORD *)(a2 + 192);
  v9 = *(_QWORD *)(a2 + 200);
  v10 = *(_QWORD *)(a2 + 216);
  v11 = *(_QWORD *)(a2 + 224);
  v41 = *(_QWORD *)(a2 + 208);
  v42 = *(_QWORD *)(a2 + 232);
  v43 = *(_QWORD *)(a2 + 240);
  v44 = *(_QWORD *)(a2 + 248);
  v45 = *(_QWORD *)(a2 + 256);
  v46 = *(_QWORD *)(a2 + 264);
  v47 = *(_QWORD *)(a2 + 272);
  v48 = *(_QWORD *)(a2 + 280);
  v49 = *(_QWORD *)(a2 + 288);
  v50 = *(_QWORD *)(a2 + 296);
  v51 = *(_QWORD *)(a2 + 304);
  v52 = *(_QWORD *)(a2 + 312);
  v53 = *(_QWORD *)(a2 + 320);
  v54 = *(_QWORD *)(a2 + 328);
  v55 = *(_QWORD *)(a2 + 336);
  v56 = *(_QWORD *)(a2 + 344);
  v57 = *(_QWORD *)(a2 + 352);
  v58 = *(_BYTE *)(a2 + 360);
  v59 = *(_BYTE *)(a2 + 361);
  sub_100112E60(*(_QWORD *)a2, v78, v76, v75, v74, v73, v72, v71, v70, v69, v68, v67, v66, v65, v64, v63, v62, v61, v60,
    v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v41,
    v10,
    v11,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v77;
  *(_QWORD *)(a1 + 8) = v78;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v76;
  *(_QWORD *)(a1 + 24) = v75;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v74;
  *(_QWORD *)(a1 + 40) = v73;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v72;
  *(_QWORD *)(a1 + 56) = v71;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v70;
  *(_QWORD *)(a1 + 72) = v69;
  *(_QWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 88) = v67;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v66;
  *(_QWORD *)(a1 + 104) = v65;
  *(_QWORD *)(a1 + 112) = v64;
  *(_QWORD *)(a1 + 120) = v63;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v62;
  *(_QWORD *)(a1 + 136) = v61;
  *(_QWORD *)(a1 + 144) = v60;
  *(_QWORD *)(a1 + 152) = v3;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v4;
  *(_QWORD *)(a1 + 168) = v5;
  *(_QWORD *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 184) = v7;
  v28 = *(_OWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 192) = v8;
  *(_QWORD *)(a1 + 200) = v9;
  *(_QWORD *)(a1 + 208) = v41;
  *(_QWORD *)(a1 + 216) = v10;
  v30 = *(_OWORD *)(a1 + 224);
  v31 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v11;
  *(_QWORD *)(a1 + 232) = v42;
  *(_QWORD *)(a1 + 240) = v43;
  *(_QWORD *)(a1 + 248) = v44;
  v32 = *(_OWORD *)(a1 + 256);
  v33 = *(_OWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 256) = v45;
  *(_QWORD *)(a1 + 264) = v46;
  *(_QWORD *)(a1 + 272) = v47;
  *(_QWORD *)(a1 + 280) = v48;
  v34 = *(_OWORD *)(a1 + 288);
  v35 = *(_OWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 288) = v49;
  *(_QWORD *)(a1 + 296) = v50;
  *(_QWORD *)(a1 + 304) = v51;
  *(_QWORD *)(a1 + 312) = v52;
  v36 = *(_OWORD *)(a1 + 320);
  v37 = *(_OWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 320) = v53;
  *(_QWORD *)(a1 + 328) = v54;
  *(_QWORD *)(a1 + 336) = v55;
  *(_QWORD *)(a1 + 344) = v56;
  v38 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v57;
  v39 = *(_WORD *)(a1 + 360);
  *(_BYTE *)(a1 + 360) = v58;
  *(_BYTE *)(a1 + 361) = v59;
  sub_100063114(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    SBYTE8(v27),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v38,
    v39,
    SHIBYTE(v39));
  return a1;
}

void *initializeWithTake for DriverEvent.NAN(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x16AuLL);
}

uint64_t assignWithTake for DriverEvent.NAN(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int16 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v4 = *(_QWORD *)(a2 + 352);
  v5 = *(_WORD *)(a2 + 360);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 128);
  v19 = *(_OWORD *)(a1 + 144);
  v20 = *(_OWORD *)(a1 + 160);
  v21 = *(_OWORD *)(a1 + 176);
  v22 = *(_OWORD *)(a1 + 192);
  v23 = *(_OWORD *)(a1 + 208);
  v24 = *(_OWORD *)(a1 + 224);
  v25 = *(_OWORD *)(a1 + 240);
  v26 = *(_OWORD *)(a1 + 256);
  v27 = *(_OWORD *)(a1 + 272);
  v28 = *(_OWORD *)(a1 + 288);
  v29 = *(_OWORD *)(a1 + 304);
  v30 = *(_OWORD *)(a1 + 320);
  v31 = *(_OWORD *)(a1 + 336);
  v32 = *(_QWORD *)(a1 + 352);
  v33 = *(_WORD *)(a1 + 360);
  v34 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v34;
  v35 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v35;
  v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v36;
  v37 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v37;
  v38 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v38;
  v39 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v39;
  v40 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v40;
  v41 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v41;
  v42 = *(_OWORD *)(a2 + 272);
  v43 = *(_OWORD *)(a2 + 288);
  v44 = *(_OWORD *)(a2 + 304);
  v45 = *(_OWORD *)(a2 + 320);
  v46 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v42;
  *(_OWORD *)(a1 + 288) = v43;
  *(_OWORD *)(a1 + 304) = v44;
  *(_OWORD *)(a1 + 320) = v45;
  *(_OWORD *)(a1 + 336) = v46;
  *(_QWORD *)(a1 + 352) = v4;
  *(_WORD *)(a1 + 360) = v5;
  sub_100063114(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    SBYTE8(v21),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    v33,
    SHIBYTE(v33));
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverEvent.NAN(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xEB && *(_BYTE *)(a1 + 362))
    return (*(_DWORD *)a1 + 235);
  v3 = *(unsigned __int8 *)(a1 + 361);
  if (v3 <= 0x15)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverEvent.NAN(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEA)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 360) = 0;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 235;
    if (a3 >= 0xEB)
      *(_BYTE *)(result + 362) = 1;
  }
  else
  {
    if (a3 >= 0xEB)
      *(_BYTE *)(result + 362) = 0;
    if (a2)
      *(_BYTE *)(result + 361) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001174E4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 361) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DriverEvent.NAN()
{
  return &type metadata for DriverEvent.NAN;
}

char *initializeBufferWithCopyOfBuffer for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  void *v65;
  id v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v22 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        *a1 = *a2;
        v8 = *((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        v10 = *((_QWORD *)a2 + 3);
        sub_100063D24(v8, v9, v10);
        *((_QWORD *)a1 + 1) = v8;
        *((_QWORD *)a1 + 2) = v9;
        *((_QWORD *)a1 + 3) = v10;
        v11 = *(int *)(sub_100012C44(&qword_100405BB0) + 48);
        v12 = &a1[v11];
        v13 = &a2[v11];
        *(_DWORD *)v12 = *(_DWORD *)&a2[v11];
        *((_WORD *)v12 + 2) = *(_WORD *)&a2[v11 + 4];
        *(_DWORD *)(v12 + 6) = *(_DWORD *)&a2[v11 + 6];
        *((_WORD *)v12 + 5) = *(_WORD *)&a2[v11 + 10];
        *((_DWORD *)v12 + 3) = *(_DWORD *)&a2[v11 + 12];
        *((_WORD *)v12 + 8) = *(_WORD *)&a2[v11 + 16];
        *((_DWORD *)v12 + 5) = *(_DWORD *)&a2[v11 + 20];
        v14 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
        v15 = v14[8];
        v16 = &v12[v15];
        v17 = &v13[v15];
        v18 = type metadata accessor for DispatchTimeInterval(0);
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
        v19(v16, v17, v18);
        v19(&v12[v14[9]], &v13[v14[9]], v18);
        *(_DWORD *)&v12[v14[10]] = *(_DWORD *)&v13[v14[10]];
        *(_DWORD *)&v12[v14[11]] = *(_DWORD *)&v13[v14[11]];
        *(_QWORD *)&v12[v14[12]] = *(_QWORD *)&v13[v14[12]];
        *(_DWORD *)&v12[v14[13]] = *(_DWORD *)&v13[v14[13]];
        *(_QWORD *)&v12[v14[14]] = *(_QWORD *)&v13[v14[14]];
        *(_DWORD *)&v12[v14[15]] = *(_DWORD *)&v13[v14[15]];
        v20 = v14[16];
        v21 = *(_QWORD *)&v13[v20];
        *(_QWORD *)&v12[v20] = v21;
        swift_bridgeObjectRetain(v21);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v24 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v24;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
        a1[42] = a2[42];
        *(_WORD *)(a1 + 43) = *(_WORD *)(a2 + 43);
        *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
        a1[52] = a2[52];
        *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
        *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
        *((_DWORD *)a1 + 17) = *((_DWORD *)a2 + 17);
        a1[72] = a2[72];
        v25 = *((_QWORD *)a2 + 10);
        v26 = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 10) = v25;
        *((_QWORD *)a1 + 11) = v26;
        v28 = *((_QWORD *)a2 + 12);
        v27 = *((_QWORD *)a2 + 13);
        *((_QWORD *)a1 + 12) = v28;
        *((_QWORD *)a1 + 13) = v27;
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v27);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        *a1 = *a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18) = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22) = *((_WORD *)a2 + 22);
        v29 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26) = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12) = v29;
        *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30) = *((_WORD *)a2 + 30);
        v30 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v30;
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        a1[112] = a2[112];
        v31 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
        v32 = v31[20];
        v33 = &a1[v32];
        v34 = &a2[v32];
        v35 = type metadata accessor for DispatchTimeInterval(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
        *(_QWORD *)&a1[v31[21]] = *(_QWORD *)&a2[v31[21]];
        *(_QWORD *)&a1[v31[22]] = *(_QWORD *)&a2[v31[22]];
        *(_QWORD *)&a1[v31[23]] = *(_QWORD *)&a2[v31[23]];
        *(_QWORD *)&a1[v31[24]] = *(_QWORD *)&a2[v31[24]];
        *(_QWORD *)&a1[v31[25]] = *(_QWORD *)&a2[v31[25]];
        *(_QWORD *)&a1[v31[26]] = *(_QWORD *)&a2[v31[26]];
        *(_QWORD *)&a1[v31[27]] = *(_QWORD *)&a2[v31[27]];
        *(_QWORD *)&a1[v31[28]] = *(_QWORD *)&a2[v31[28]];
        *(_WORD *)&a1[v31[29]] = *(_WORD *)&a2[v31[29]];
        a1[v31[30]] = a2[v31[30]];
        a1[v31[31]] = a2[v31[31]];
        a1[v31[32]] = a2[v31[32]];
        a1[v31[33]] = a2[v31[33]];
        a1[v31[34]] = a2[v31[34]];
        a1[v31[35]] = a2[v31[35]];
        v36 = v31[36];
        v37 = &a1[v36];
        v38 = &a2[v36];
        v80 = *((_QWORD *)v38 + 1);
        *(_QWORD *)v37 = *(_QWORD *)v38;
        *((_QWORD *)v37 + 1) = v80;
        a1[v31[37]] = a2[v31[37]];
        *(_QWORD *)&a1[v31[38]] = *(_QWORD *)&a2[v31[38]];
        *(_QWORD *)&a1[v31[39]] = *(_QWORD *)&a2[v31[39]];
        *(_QWORD *)&a1[v31[40]] = *(_QWORD *)&a2[v31[40]];
        *(_QWORD *)&a1[v31[41]] = *(_QWORD *)&a2[v31[41]];
        v39 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
        v40 = &a1[v39];
        v41 = &a2[v39];
        v42 = *((_OWORD *)v41 + 11);
        *((_OWORD *)v40 + 10) = *((_OWORD *)v41 + 10);
        *((_OWORD *)v40 + 11) = v42;
        *((_OWORD *)v40 + 12) = *((_OWORD *)v41 + 12);
        v43 = *((_OWORD *)v41 + 7);
        *((_OWORD *)v40 + 6) = *((_OWORD *)v41 + 6);
        *((_OWORD *)v40 + 7) = v43;
        v44 = *((_OWORD *)v41 + 9);
        *((_OWORD *)v40 + 8) = *((_OWORD *)v41 + 8);
        *((_OWORD *)v40 + 9) = v44;
        v45 = *((_OWORD *)v41 + 3);
        *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
        *((_OWORD *)v40 + 3) = v45;
        v46 = *((_OWORD *)v41 + 5);
        *((_OWORD *)v40 + 4) = *((_OWORD *)v41 + 4);
        *((_OWORD *)v40 + 5) = v46;
        v47 = *((_OWORD *)v41 + 1);
        *(_OWORD *)v40 = *(_OWORD *)v41;
        *((_OWORD *)v40 + 1) = v47;
        v48 = *((_QWORD *)v41 + 27);
        *((_QWORD *)v40 + 26) = *((_QWORD *)v41 + 26);
        *((_QWORD *)v40 + 27) = v48;
        v49 = *((_QWORD *)v41 + 28);
        v50 = *((_QWORD *)v41 + 29);
        *((_QWORD *)v40 + 28) = v49;
        *((_QWORD *)v40 + 29) = v50;
        v51 = *((_QWORD *)v41 + 30);
        v52 = *((_QWORD *)v41 + 31);
        *((_QWORD *)v40 + 30) = v51;
        *((_QWORD *)v40 + 31) = v52;
        v54 = *((_QWORD *)v41 + 32);
        v53 = *((_QWORD *)v41 + 33);
        *((_QWORD *)v40 + 32) = v54;
        *((_QWORD *)v40 + 33) = v53;
        v56 = *((_QWORD *)v41 + 34);
        v55 = *((_QWORD *)v41 + 35);
        *((_QWORD *)v40 + 34) = v56;
        *((_QWORD *)v40 + 35) = v55;
        v70 = v55;
        v71 = *((_QWORD *)v41 + 36);
        v57 = *((_QWORD *)v41 + 37);
        *((_QWORD *)v40 + 36) = v71;
        *((_QWORD *)v40 + 37) = v57;
        v72 = v57;
        v73 = *((_QWORD *)v41 + 38);
        v58 = *((_QWORD *)v41 + 39);
        *((_QWORD *)v40 + 38) = v73;
        *((_QWORD *)v40 + 39) = v58;
        v74 = v58;
        v75 = *((_QWORD *)v41 + 40);
        v59 = *((_QWORD *)v41 + 41);
        *((_QWORD *)v40 + 40) = v75;
        *((_QWORD *)v40 + 41) = v59;
        v76 = v59;
        v77 = *((_QWORD *)v41 + 42);
        v78 = *((_QWORD *)v41 + 43);
        v79 = *((_QWORD *)v41 + 44);
        *((_QWORD *)v40 + 42) = v77;
        *((_QWORD *)v40 + 43) = v78;
        *((_QWORD *)v40 + 44) = v79;
        swift_bridgeObjectRetain(v80);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v51);
        swift_bridgeObjectRetain(v52);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v70);
        swift_bridgeObjectRetain(v71);
        swift_bridgeObjectRetain(v72);
        swift_bridgeObjectRetain(v73);
        swift_bridgeObjectRetain(v74);
        swift_bridgeObjectRetain(v75);
        swift_bridgeObjectRetain(v76);
        swift_bridgeObjectRetain(v77);
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v79);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 6u:
        v60 = *(_QWORD *)a2;
        v61 = *((_QWORD *)a2 + 1);
        v62 = *((_QWORD *)a2 + 2);
        v63 = *((_QWORD *)a2 + 3);
        v64 = a2[32];
        sub_100061540(v60, v61, v62, v63, v64);
        *(_QWORD *)a1 = v60;
        *((_QWORD *)a1 + 1) = v61;
        *((_QWORD *)a1 + 2) = v62;
        *((_QWORD *)a1 + 3) = v63;
        a1[32] = v64;
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 8u:
        v65 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v66 = v65;
        swift_storeEnumTagMultiPayload(a1, a3, 8);
        break;
      case 9u:
        v67 = type metadata accessor for DispatchTimeInterval(0);
        v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
        v68(a1, a2, v67);
        v69 = type metadata accessor for AWDLIdleActivity(0);
        v68(&a1[*(int *)(v69 + 20)], &a2[*(int *)(v69 + 20)], v67);
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for DriverEvent.AWDL(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 1u:
      sub_1000632E8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
      v3 = a1 + *(int *)(sub_100012C44(&qword_100405BB0) + 48);
      v4 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
      v5 = v3 + v4[8];
      v6 = type metadata accessor for DispatchTimeInterval(0);
      v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
      v7(v5, v6);
      v7(v3 + v4[9], v6);
      v8 = *(_QWORD *)(v3 + v4[16]);
      goto LABEL_5;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
      v8 = *(_QWORD *)(a1 + 104);
      goto LABEL_5;
    case 3u:
      v9 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
      v10 = a1 + *(int *)(v9 + 80);
      v11 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v9 + 144) + 8));
      v12 = (_QWORD *)(a1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20));
      swift_bridgeObjectRelease(v12[27]);
      swift_bridgeObjectRelease(v12[28]);
      swift_bridgeObjectRelease(v12[29]);
      swift_bridgeObjectRelease(v12[30]);
      swift_bridgeObjectRelease(v12[31]);
      swift_bridgeObjectRelease(v12[32]);
      swift_bridgeObjectRelease(v12[33]);
      swift_bridgeObjectRelease(v12[34]);
      swift_bridgeObjectRelease(v12[35]);
      swift_bridgeObjectRelease(v12[36]);
      swift_bridgeObjectRelease(v12[37]);
      swift_bridgeObjectRelease(v12[38]);
      swift_bridgeObjectRelease(v12[39]);
      swift_bridgeObjectRelease(v12[40]);
      swift_bridgeObjectRelease(v12[41]);
      swift_bridgeObjectRelease(v12[42]);
      swift_bridgeObjectRelease(v12[43]);
      v8 = v12[44];
LABEL_5:
      swift_bridgeObjectRelease(v8);
      break;
    case 6u:
      sub_10006156C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      break;
    case 8u:

      break;
    case 9u:
      v13 = type metadata accessor for DispatchTimeInterval(0);
      v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
      v15(a1, v13);
      v14 = a1 + *(int *)(type metadata accessor for AWDLIdleActivity(0) + 20);
      v15(v14, v13);
      break;
    default:
      return;
  }
}

char *initializeWithCopy for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void *v64;
  id v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 1u:
      *a1 = *a2;
      v6 = *((_QWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 2);
      v8 = *((_QWORD *)a2 + 3);
      sub_100063D24(v6, v7, v8);
      *((_QWORD *)a1 + 1) = v6;
      *((_QWORD *)a1 + 2) = v7;
      *((_QWORD *)a1 + 3) = v8;
      v9 = *(int *)(sub_100012C44(&qword_100405BB0) + 48);
      v10 = &a1[v9];
      v11 = &a2[v9];
      *(_DWORD *)v10 = *(_DWORD *)&a2[v9];
      *((_WORD *)v10 + 2) = *(_WORD *)&a2[v9 + 4];
      *(_DWORD *)(v10 + 6) = *(_DWORD *)&a2[v9 + 6];
      *((_WORD *)v10 + 5) = *(_WORD *)&a2[v9 + 10];
      *((_DWORD *)v10 + 3) = *(_DWORD *)&a2[v9 + 12];
      *((_WORD *)v10 + 8) = *(_WORD *)&a2[v9 + 16];
      *((_DWORD *)v10 + 5) = *(_DWORD *)&a2[v9 + 20];
      v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
      v13 = v12[8];
      v14 = &v10[v13];
      v15 = &v11[v13];
      v16 = type metadata accessor for DispatchTimeInterval(0);
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v14, v15, v16);
      v17(&v10[v12[9]], &v11[v12[9]], v16);
      *(_DWORD *)&v10[v12[10]] = *(_DWORD *)&v11[v12[10]];
      *(_DWORD *)&v10[v12[11]] = *(_DWORD *)&v11[v12[11]];
      *(_QWORD *)&v10[v12[12]] = *(_QWORD *)&v11[v12[12]];
      *(_DWORD *)&v10[v12[13]] = *(_DWORD *)&v11[v12[13]];
      *(_QWORD *)&v10[v12[14]] = *(_QWORD *)&v11[v12[14]];
      *(_DWORD *)&v10[v12[15]] = *(_DWORD *)&v11[v12[15]];
      v18 = v12[16];
      v19 = *(_QWORD *)&v11[v18];
      *(_QWORD *)&v10[v18] = v19;
      swift_bridgeObjectRetain(v19);
      v20 = a1;
      v21 = a3;
      v22 = 1;
      goto LABEL_9;
    case 2u:
      v23 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v23;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
      a1[42] = a2[42];
      *(_WORD *)(a1 + 43) = *(_WORD *)(a2 + 43);
      *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
      a1[52] = a2[52];
      *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
      *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
      *((_DWORD *)a1 + 17) = *((_DWORD *)a2 + 17);
      a1[72] = a2[72];
      v24 = *((_QWORD *)a2 + 10);
      v25 = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 10) = v24;
      *((_QWORD *)a1 + 11) = v25;
      v27 = *((_QWORD *)a2 + 12);
      v26 = *((_QWORD *)a2 + 13);
      *((_QWORD *)a1 + 12) = v27;
      *((_QWORD *)a1 + 13) = v26;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v26);
      v20 = a1;
      v21 = a3;
      v22 = 2;
      goto LABEL_9;
    case 3u:
      *a1 = *a2;
      *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
      *((_WORD *)a1 + 18) = *((_WORD *)a2 + 18);
      *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
      *((_WORD *)a1 + 22) = *((_WORD *)a2 + 22);
      v28 = *((_DWORD *)a2 + 12);
      *((_WORD *)a1 + 26) = *((_WORD *)a2 + 26);
      *((_DWORD *)a1 + 12) = v28;
      *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
      *((_WORD *)a1 + 30) = *((_WORD *)a2 + 30);
      v29 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v29;
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      a1[112] = a2[112];
      v30 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
      v31 = v30[20];
      v32 = &a1[v31];
      v33 = &a2[v31];
      v34 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
      *(_QWORD *)&a1[v30[21]] = *(_QWORD *)&a2[v30[21]];
      *(_QWORD *)&a1[v30[22]] = *(_QWORD *)&a2[v30[22]];
      *(_QWORD *)&a1[v30[23]] = *(_QWORD *)&a2[v30[23]];
      *(_QWORD *)&a1[v30[24]] = *(_QWORD *)&a2[v30[24]];
      *(_QWORD *)&a1[v30[25]] = *(_QWORD *)&a2[v30[25]];
      *(_QWORD *)&a1[v30[26]] = *(_QWORD *)&a2[v30[26]];
      *(_QWORD *)&a1[v30[27]] = *(_QWORD *)&a2[v30[27]];
      *(_QWORD *)&a1[v30[28]] = *(_QWORD *)&a2[v30[28]];
      *(_WORD *)&a1[v30[29]] = *(_WORD *)&a2[v30[29]];
      a1[v30[30]] = a2[v30[30]];
      a1[v30[31]] = a2[v30[31]];
      a1[v30[32]] = a2[v30[32]];
      a1[v30[33]] = a2[v30[33]];
      a1[v30[34]] = a2[v30[34]];
      a1[v30[35]] = a2[v30[35]];
      v35 = v30[36];
      v36 = &a1[v35];
      v37 = &a2[v35];
      v80 = *((_QWORD *)v37 + 1);
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_QWORD *)v36 + 1) = v80;
      a1[v30[37]] = a2[v30[37]];
      *(_QWORD *)&a1[v30[38]] = *(_QWORD *)&a2[v30[38]];
      *(_QWORD *)&a1[v30[39]] = *(_QWORD *)&a2[v30[39]];
      *(_QWORD *)&a1[v30[40]] = *(_QWORD *)&a2[v30[40]];
      *(_QWORD *)&a1[v30[41]] = *(_QWORD *)&a2[v30[41]];
      v38 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
      v39 = &a1[v38];
      v40 = &a2[v38];
      v41 = *((_OWORD *)v40 + 11);
      *((_OWORD *)v39 + 10) = *((_OWORD *)v40 + 10);
      *((_OWORD *)v39 + 11) = v41;
      *((_OWORD *)v39 + 12) = *((_OWORD *)v40 + 12);
      v42 = *((_OWORD *)v40 + 7);
      *((_OWORD *)v39 + 6) = *((_OWORD *)v40 + 6);
      *((_OWORD *)v39 + 7) = v42;
      v43 = *((_OWORD *)v40 + 9);
      *((_OWORD *)v39 + 8) = *((_OWORD *)v40 + 8);
      *((_OWORD *)v39 + 9) = v43;
      v44 = *((_OWORD *)v40 + 3);
      *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
      *((_OWORD *)v39 + 3) = v44;
      v45 = *((_OWORD *)v40 + 5);
      *((_OWORD *)v39 + 4) = *((_OWORD *)v40 + 4);
      *((_OWORD *)v39 + 5) = v45;
      v46 = *((_OWORD *)v40 + 1);
      *(_OWORD *)v39 = *(_OWORD *)v40;
      *((_OWORD *)v39 + 1) = v46;
      v47 = *((_QWORD *)v40 + 27);
      *((_QWORD *)v39 + 26) = *((_QWORD *)v40 + 26);
      *((_QWORD *)v39 + 27) = v47;
      v48 = *((_QWORD *)v40 + 28);
      v49 = *((_QWORD *)v40 + 29);
      *((_QWORD *)v39 + 28) = v48;
      *((_QWORD *)v39 + 29) = v49;
      v50 = *((_QWORD *)v40 + 30);
      v51 = *((_QWORD *)v40 + 31);
      *((_QWORD *)v39 + 30) = v50;
      *((_QWORD *)v39 + 31) = v51;
      v53 = *((_QWORD *)v40 + 32);
      v52 = *((_QWORD *)v40 + 33);
      *((_QWORD *)v39 + 32) = v53;
      *((_QWORD *)v39 + 33) = v52;
      v55 = *((_QWORD *)v40 + 34);
      v54 = *((_QWORD *)v40 + 35);
      *((_QWORD *)v39 + 34) = v55;
      *((_QWORD *)v39 + 35) = v54;
      v70 = v54;
      v71 = *((_QWORD *)v40 + 36);
      v56 = *((_QWORD *)v40 + 37);
      *((_QWORD *)v39 + 36) = v71;
      *((_QWORD *)v39 + 37) = v56;
      v72 = v56;
      v73 = *((_QWORD *)v40 + 38);
      v57 = *((_QWORD *)v40 + 39);
      *((_QWORD *)v39 + 38) = v73;
      *((_QWORD *)v39 + 39) = v57;
      v74 = v57;
      v75 = *((_QWORD *)v40 + 40);
      v58 = *((_QWORD *)v40 + 41);
      *((_QWORD *)v39 + 40) = v75;
      *((_QWORD *)v39 + 41) = v58;
      v76 = v58;
      v77 = *((_QWORD *)v40 + 42);
      v78 = *((_QWORD *)v40 + 43);
      v79 = *((_QWORD *)v40 + 44);
      *((_QWORD *)v39 + 42) = v77;
      *((_QWORD *)v39 + 43) = v78;
      *((_QWORD *)v39 + 44) = v79;
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v77);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v79);
      v20 = a1;
      v21 = a3;
      v22 = 3;
      goto LABEL_9;
    case 6u:
      v59 = *(_QWORD *)a2;
      v60 = *((_QWORD *)a2 + 1);
      v61 = *((_QWORD *)a2 + 2);
      v62 = *((_QWORD *)a2 + 3);
      v63 = a2[32];
      sub_100061540(v59, v60, v61, v62, v63);
      *(_QWORD *)a1 = v59;
      *((_QWORD *)a1 + 1) = v60;
      *((_QWORD *)a1 + 2) = v61;
      *((_QWORD *)a1 + 3) = v62;
      a1[32] = v63;
      v20 = a1;
      v21 = a3;
      v22 = 6;
      goto LABEL_9;
    case 8u:
      v64 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v65 = v64;
      v20 = a1;
      v21 = a3;
      v22 = 8;
      goto LABEL_9;
    case 9u:
      v66 = type metadata accessor for DispatchTimeInterval(0);
      v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16);
      v67(a1, a2, v66);
      v68 = type metadata accessor for AWDLIdleActivity(0);
      v67(&a1[*(int *)(v68 + 20)], &a2[*(int *)(v68 + 20)], v66);
      v20 = a1;
      v21 = a3;
      v22 = 9;
LABEL_9:
      swift_storeEnumTagMultiPayload(v20, v21, v22);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithCopy for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  void *v66;
  id v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  if (a1 != a2)
  {
    sub_100063824((uint64_t)a1, type metadata accessor for DriverEvent.AWDL);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        *a1 = *a2;
        v6 = *((_QWORD *)a2 + 1);
        v7 = *((_QWORD *)a2 + 2);
        v8 = *((_QWORD *)a2 + 3);
        sub_100063D24(v6, v7, v8);
        *((_QWORD *)a1 + 1) = v6;
        *((_QWORD *)a1 + 2) = v7;
        *((_QWORD *)a1 + 3) = v8;
        v9 = *(int *)(sub_100012C44(&qword_100405BB0) + 48);
        v10 = &a1[v9];
        v11 = &a2[v9];
        LODWORD(v9) = *(_DWORD *)&a2[v9];
        *((_WORD *)v10 + 2) = *((_WORD *)v11 + 2);
        *(_DWORD *)v10 = v9;
        LOWORD(v9) = *((_WORD *)v11 + 5);
        *(_DWORD *)(v10 + 6) = *(_DWORD *)(v11 + 6);
        *((_WORD *)v10 + 5) = v9;
        LOWORD(v9) = *((_WORD *)v11 + 8);
        *((_DWORD *)v10 + 3) = *((_DWORD *)v11 + 3);
        *((_WORD *)v10 + 8) = v9;
        *((_DWORD *)v10 + 5) = *((_DWORD *)v11 + 5);
        v12 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
        v13 = v12[8];
        v14 = &v10[v13];
        v15 = &v11[v13];
        v16 = type metadata accessor for DispatchTimeInterval(0);
        v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
        v17(v14, v15, v16);
        v17(&v10[v12[9]], &v11[v12[9]], v16);
        *(_DWORD *)&v10[v12[10]] = *(_DWORD *)&v11[v12[10]];
        *(_DWORD *)&v10[v12[11]] = *(_DWORD *)&v11[v12[11]];
        *(_QWORD *)&v10[v12[12]] = *(_QWORD *)&v11[v12[12]];
        *(_DWORD *)&v10[v12[13]] = *(_DWORD *)&v11[v12[13]];
        *(_QWORD *)&v10[v12[14]] = *(_QWORD *)&v11[v12[14]];
        *(_DWORD *)&v10[v12[15]] = *(_DWORD *)&v11[v12[15]];
        v18 = v12[16];
        v19 = *(_QWORD *)&v11[v18];
        *(_QWORD *)&v10[v18] = v19;
        swift_bridgeObjectRetain(v19);
        v20 = a1;
        v21 = a3;
        v22 = 1;
        goto LABEL_10;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        *((_DWORD *)a1 + 5) = *((_DWORD *)a2 + 5);
        *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
        *((_DWORD *)a1 + 7) = *((_DWORD *)a2 + 7);
        *((_WORD *)a1 + 16) = *((_WORD *)a2 + 16);
        *((_WORD *)a1 + 17) = *((_WORD *)a2 + 17);
        *((_WORD *)a1 + 18) = *((_WORD *)a2 + 18);
        *((_WORD *)a1 + 19) = *((_WORD *)a2 + 19);
        *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
        a1[42] = a2[42];
        a1[43] = a2[43];
        a1[44] = a2[44];
        *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
        a1[52] = a2[52];
        *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
        a1[60] = a2[60];
        a1[61] = a2[61];
        a1[62] = a2[62];
        a1[63] = a2[63];
        a1[64] = a2[64];
        a1[65] = a2[65];
        a1[66] = a2[66];
        a1[67] = a2[67];
        a1[68] = a2[68];
        a1[69] = a2[69];
        a1[70] = a2[70];
        a1[71] = a2[71];
        a1[72] = a2[72];
        v23 = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 10) = v23;
        v24 = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 11) = v24;
        v25 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a1 + 12) = v25;
        v26 = *((_QWORD *)a2 + 13);
        *((_QWORD *)a1 + 13) = v26;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        v20 = a1;
        v21 = a3;
        v22 = 2;
        goto LABEL_10;
      case 3u:
        *a1 = *a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        v27 = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18) = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 8) = v27;
        v28 = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22) = *((_WORD *)a2 + 22);
        *((_DWORD *)a1 + 10) = v28;
        v29 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26) = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12) = v29;
        v30 = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30) = *((_WORD *)a2 + 30);
        *((_DWORD *)a1 + 14) = v30;
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
        *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
        a1[112] = a2[112];
        v31 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
        v32 = v31[20];
        v33 = &a1[v32];
        v34 = &a2[v32];
        v35 = type metadata accessor for DispatchTimeInterval(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
        *(_QWORD *)&a1[v31[21]] = *(_QWORD *)&a2[v31[21]];
        *(_QWORD *)&a1[v31[22]] = *(_QWORD *)&a2[v31[22]];
        *(_QWORD *)&a1[v31[23]] = *(_QWORD *)&a2[v31[23]];
        *(_QWORD *)&a1[v31[24]] = *(_QWORD *)&a2[v31[24]];
        *(_QWORD *)&a1[v31[25]] = *(_QWORD *)&a2[v31[25]];
        *(_QWORD *)&a1[v31[26]] = *(_QWORD *)&a2[v31[26]];
        *(_QWORD *)&a1[v31[27]] = *(_QWORD *)&a2[v31[27]];
        *(_QWORD *)&a1[v31[28]] = *(_QWORD *)&a2[v31[28]];
        *(_WORD *)&a1[v31[29]] = *(_WORD *)&a2[v31[29]];
        a1[v31[30]] = a2[v31[30]];
        a1[v31[31]] = a2[v31[31]];
        a1[v31[32]] = a2[v31[32]];
        a1[v31[33]] = a2[v31[33]];
        a1[v31[34]] = a2[v31[34]];
        a1[v31[35]] = a2[v31[35]];
        v36 = v31[36];
        v37 = &a1[v36];
        v38 = &a2[v36];
        *(_QWORD *)v37 = *(_QWORD *)v38;
        v82 = *((_QWORD *)v38 + 1);
        *((_QWORD *)v37 + 1) = v82;
        a1[v31[37]] = a2[v31[37]];
        *(_QWORD *)&a1[v31[38]] = *(_QWORD *)&a2[v31[38]];
        *(_QWORD *)&a1[v31[39]] = *(_QWORD *)&a2[v31[39]];
        *(_QWORD *)&a1[v31[40]] = *(_QWORD *)&a2[v31[40]];
        *(_QWORD *)&a1[v31[41]] = *(_QWORD *)&a2[v31[41]];
        v39 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
        v40 = &a1[v39];
        v41 = &a2[v39];
        v42 = *((_QWORD *)v41 + 26);
        v44 = *((_OWORD *)v41 + 11);
        v43 = *((_OWORD *)v41 + 12);
        *((_OWORD *)v40 + 10) = *((_OWORD *)v41 + 10);
        *((_OWORD *)v40 + 11) = v44;
        *((_OWORD *)v40 + 12) = v43;
        *((_QWORD *)v40 + 26) = v42;
        v46 = *((_OWORD *)v41 + 8);
        v45 = *((_OWORD *)v41 + 9);
        v47 = *((_OWORD *)v41 + 7);
        *((_OWORD *)v40 + 6) = *((_OWORD *)v41 + 6);
        *((_OWORD *)v40 + 7) = v47;
        *((_OWORD *)v40 + 8) = v46;
        *((_OWORD *)v40 + 9) = v45;
        v49 = *((_OWORD *)v41 + 4);
        v48 = *((_OWORD *)v41 + 5);
        v50 = *((_OWORD *)v41 + 3);
        *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
        *((_OWORD *)v40 + 3) = v50;
        *((_OWORD *)v40 + 4) = v49;
        *((_OWORD *)v40 + 5) = v48;
        v51 = *((_OWORD *)v41 + 1);
        *(_OWORD *)v40 = *(_OWORD *)v41;
        *((_OWORD *)v40 + 1) = v51;
        v52 = *((_QWORD *)v41 + 27);
        *((_QWORD *)v40 + 27) = v52;
        v53 = *((_QWORD *)v41 + 28);
        *((_QWORD *)v40 + 28) = v53;
        v54 = *((_QWORD *)v41 + 29);
        *((_QWORD *)v40 + 29) = v54;
        v55 = *((_QWORD *)v41 + 30);
        *((_QWORD *)v40 + 30) = v55;
        v56 = *((_QWORD *)v41 + 31);
        *((_QWORD *)v40 + 31) = v56;
        v57 = *((_QWORD *)v41 + 32);
        *((_QWORD *)v40 + 32) = v57;
        v58 = *((_QWORD *)v41 + 33);
        *((_QWORD *)v40 + 33) = v58;
        v59 = *((_QWORD *)v41 + 34);
        *((_QWORD *)v40 + 34) = v59;
        v72 = *((_QWORD *)v41 + 35);
        *((_QWORD *)v40 + 35) = v72;
        v73 = *((_QWORD *)v41 + 36);
        *((_QWORD *)v40 + 36) = v73;
        v74 = *((_QWORD *)v41 + 37);
        *((_QWORD *)v40 + 37) = v74;
        v75 = *((_QWORD *)v41 + 38);
        *((_QWORD *)v40 + 38) = v75;
        v76 = *((_QWORD *)v41 + 39);
        *((_QWORD *)v40 + 39) = v76;
        v77 = *((_QWORD *)v41 + 40);
        *((_QWORD *)v40 + 40) = v77;
        v78 = *((_QWORD *)v41 + 41);
        *((_QWORD *)v40 + 41) = v78;
        v79 = *((_QWORD *)v41 + 42);
        *((_QWORD *)v40 + 42) = v79;
        v60 = *((_QWORD *)v41 + 43);
        *((_QWORD *)v40 + 43) = v60;
        v80 = v60;
        v81 = *((_QWORD *)v41 + 44);
        *((_QWORD *)v40 + 44) = v81;
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRetain(v52);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v57);
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRetain(v72);
        swift_bridgeObjectRetain(v73);
        swift_bridgeObjectRetain(v74);
        swift_bridgeObjectRetain(v75);
        swift_bridgeObjectRetain(v76);
        swift_bridgeObjectRetain(v77);
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v80);
        swift_bridgeObjectRetain(v81);
        v20 = a1;
        v21 = a3;
        v22 = 3;
        goto LABEL_10;
      case 6u:
        v61 = *(_QWORD *)a2;
        v62 = *((_QWORD *)a2 + 1);
        v63 = *((_QWORD *)a2 + 2);
        v64 = *((_QWORD *)a2 + 3);
        v65 = a2[32];
        sub_100061540(v61, v62, v63, v64, v65);
        *(_QWORD *)a1 = v61;
        *((_QWORD *)a1 + 1) = v62;
        *((_QWORD *)a1 + 2) = v63;
        *((_QWORD *)a1 + 3) = v64;
        a1[32] = v65;
        v20 = a1;
        v21 = a3;
        v22 = 6;
        goto LABEL_10;
      case 8u:
        v66 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v67 = v66;
        v20 = a1;
        v21 = a3;
        v22 = 8;
        goto LABEL_10;
      case 9u:
        v68 = type metadata accessor for DispatchTimeInterval(0);
        v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
        v69(a1, a2, v68);
        v70 = type metadata accessor for AWDLIdleActivity(0);
        v69(&a1[*(int *)(v70 + 20)], &a2[*(int *)(v70 + 20)], v68);
        v20 = a1;
        v21 = a3;
        v22 = 9;
LABEL_10:
        swift_storeEnumTagMultiPayload(v20, v21, v22);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  int v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 9:
      v17 = type metadata accessor for DispatchTimeInterval(0);
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
      v18(a1, a2, v17);
      v19 = type metadata accessor for AWDLIdleActivity(0);
      v18(&a1[*(int *)(v19 + 20)], &a2[*(int *)(v19 + 20)], v17);
      swift_storeEnumTagMultiPayload(a1, a3, 9);
      break;
    case 3:
      *a1 = *a2;
      *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
      *((_WORD *)a1 + 18) = *((_WORD *)a2 + 18);
      *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
      *((_WORD *)a1 + 22) = *((_WORD *)a2 + 22);
      v20 = *((_DWORD *)a2 + 12);
      *((_WORD *)a1 + 26) = *((_WORD *)a2 + 26);
      *((_DWORD *)a1 + 12) = v20;
      *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
      *((_WORD *)a1 + 30) = *((_WORD *)a2 + 30);
      v21 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v21;
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      a1[112] = a2[112];
      v22 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
      v23 = v22[20];
      v24 = &a1[v23];
      v25 = &a2[v23];
      v26 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
      *(_QWORD *)&a1[v22[21]] = *(_QWORD *)&a2[v22[21]];
      *(_QWORD *)&a1[v22[22]] = *(_QWORD *)&a2[v22[22]];
      *(_QWORD *)&a1[v22[23]] = *(_QWORD *)&a2[v22[23]];
      *(_QWORD *)&a1[v22[24]] = *(_QWORD *)&a2[v22[24]];
      *(_QWORD *)&a1[v22[25]] = *(_QWORD *)&a2[v22[25]];
      *(_QWORD *)&a1[v22[26]] = *(_QWORD *)&a2[v22[26]];
      *(_QWORD *)&a1[v22[27]] = *(_QWORD *)&a2[v22[27]];
      *(_QWORD *)&a1[v22[28]] = *(_QWORD *)&a2[v22[28]];
      *(_WORD *)&a1[v22[29]] = *(_WORD *)&a2[v22[29]];
      a1[v22[30]] = a2[v22[30]];
      a1[v22[31]] = a2[v22[31]];
      a1[v22[32]] = a2[v22[32]];
      a1[v22[33]] = a2[v22[33]];
      a1[v22[34]] = a2[v22[34]];
      a1[v22[35]] = a2[v22[35]];
      *(_OWORD *)&a1[v22[36]] = *(_OWORD *)&a2[v22[36]];
      a1[v22[37]] = a2[v22[37]];
      *(_QWORD *)&a1[v22[38]] = *(_QWORD *)&a2[v22[38]];
      *(_QWORD *)&a1[v22[39]] = *(_QWORD *)&a2[v22[39]];
      *(_QWORD *)&a1[v22[40]] = *(_QWORD *)&a2[v22[40]];
      *(_QWORD *)&a1[v22[41]] = *(_QWORD *)&a2[v22[41]];
      v27 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
      memcpy(&a1[*(int *)(v27 + 20)], &a2[*(int *)(v27 + 20)], 0x168uLL);
      swift_storeEnumTagMultiPayload(a1, a3, 3);
      break;
    case 1:
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      v8 = *(int *)(sub_100012C44(&qword_100405BB0) + 48);
      v9 = &a1[v8];
      v10 = &a2[v8];
      *(_DWORD *)v9 = *(_DWORD *)&a2[v8];
      *((_WORD *)v9 + 2) = *(_WORD *)&a2[v8 + 4];
      *(_DWORD *)(v9 + 6) = *(_DWORD *)&a2[v8 + 6];
      *((_WORD *)v9 + 5) = *(_WORD *)&a2[v8 + 10];
      *((_DWORD *)v9 + 3) = *(_DWORD *)&a2[v8 + 12];
      *((_WORD *)v9 + 8) = *(_WORD *)&a2[v8 + 16];
      *((_DWORD *)v9 + 5) = *(_DWORD *)&a2[v8 + 20];
      v11 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
      v12 = v11[8];
      v13 = &v9[v12];
      v14 = &v10[v12];
      v15 = type metadata accessor for DispatchTimeInterval(0);
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
      v16(v13, v14, v15);
      v16(&v9[v11[9]], &v10[v11[9]], v15);
      *(_DWORD *)&v9[v11[10]] = *(_DWORD *)&v10[v11[10]];
      *(_DWORD *)&v9[v11[11]] = *(_DWORD *)&v10[v11[11]];
      *(_QWORD *)&v9[v11[12]] = *(_QWORD *)&v10[v11[12]];
      *(_DWORD *)&v9[v11[13]] = *(_DWORD *)&v10[v11[13]];
      *(_QWORD *)&v9[v11[14]] = *(_QWORD *)&v10[v11[14]];
      *(_DWORD *)&v9[v11[15]] = *(_DWORD *)&v10[v11[15]];
      *(_QWORD *)&v9[v11[16]] = *(_QWORD *)&v10[v11[16]];
      swift_storeEnumTagMultiPayload(a1, a3, 1);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for DriverEvent.AWDL(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  int v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    sub_100063824((uint64_t)a1, type metadata accessor for DriverEvent.AWDL);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 9:
        v17 = type metadata accessor for DispatchTimeInterval(0);
        v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
        v18(a1, a2, v17);
        v19 = type metadata accessor for AWDLIdleActivity(0);
        v18(&a1[*(int *)(v19 + 20)], &a2[*(int *)(v19 + 20)], v17);
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      case 3:
        *a1 = *a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        *((_WORD *)a1 + 18) = *((_WORD *)a2 + 18);
        *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
        *((_WORD *)a1 + 22) = *((_WORD *)a2 + 22);
        v20 = *((_DWORD *)a2 + 12);
        *((_WORD *)a1 + 26) = *((_WORD *)a2 + 26);
        *((_DWORD *)a1 + 12) = v20;
        *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
        *((_WORD *)a1 + 30) = *((_WORD *)a2 + 30);
        v21 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v21;
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        a1[112] = a2[112];
        v22 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
        v23 = v22[20];
        v24 = &a1[v23];
        v25 = &a2[v23];
        v26 = type metadata accessor for DispatchTimeInterval(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
        *(_QWORD *)&a1[v22[21]] = *(_QWORD *)&a2[v22[21]];
        *(_QWORD *)&a1[v22[22]] = *(_QWORD *)&a2[v22[22]];
        *(_QWORD *)&a1[v22[23]] = *(_QWORD *)&a2[v22[23]];
        *(_QWORD *)&a1[v22[24]] = *(_QWORD *)&a2[v22[24]];
        *(_QWORD *)&a1[v22[25]] = *(_QWORD *)&a2[v22[25]];
        *(_QWORD *)&a1[v22[26]] = *(_QWORD *)&a2[v22[26]];
        *(_QWORD *)&a1[v22[27]] = *(_QWORD *)&a2[v22[27]];
        *(_QWORD *)&a1[v22[28]] = *(_QWORD *)&a2[v22[28]];
        *(_WORD *)&a1[v22[29]] = *(_WORD *)&a2[v22[29]];
        a1[v22[30]] = a2[v22[30]];
        a1[v22[31]] = a2[v22[31]];
        a1[v22[32]] = a2[v22[32]];
        a1[v22[33]] = a2[v22[33]];
        a1[v22[34]] = a2[v22[34]];
        a1[v22[35]] = a2[v22[35]];
        *(_OWORD *)&a1[v22[36]] = *(_OWORD *)&a2[v22[36]];
        a1[v22[37]] = a2[v22[37]];
        *(_QWORD *)&a1[v22[38]] = *(_QWORD *)&a2[v22[38]];
        *(_QWORD *)&a1[v22[39]] = *(_QWORD *)&a2[v22[39]];
        *(_QWORD *)&a1[v22[40]] = *(_QWORD *)&a2[v22[40]];
        *(_QWORD *)&a1[v22[41]] = *(_QWORD *)&a2[v22[41]];
        v27 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
        memcpy(&a1[*(int *)(v27 + 20)], &a2[*(int *)(v27 + 20)], 0x168uLL);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 1:
        v7 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v7;
        v8 = *(int *)(sub_100012C44(&qword_100405BB0) + 48);
        v9 = &a1[v8];
        v10 = &a2[v8];
        *(_DWORD *)v9 = *(_DWORD *)&a2[v8];
        *((_WORD *)v9 + 2) = *(_WORD *)&a2[v8 + 4];
        *(_DWORD *)(v9 + 6) = *(_DWORD *)&a2[v8 + 6];
        *((_WORD *)v9 + 5) = *(_WORD *)&a2[v8 + 10];
        *((_DWORD *)v9 + 3) = *(_DWORD *)&a2[v8 + 12];
        *((_WORD *)v9 + 8) = *(_WORD *)&a2[v8 + 16];
        *((_DWORD *)v9 + 5) = *(_DWORD *)&a2[v8 + 20];
        v11 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
        v12 = v11[8];
        v13 = &v9[v12];
        v14 = &v10[v12];
        v15 = type metadata accessor for DispatchTimeInterval(0);
        v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
        v16(v13, v14, v15);
        v16(&v9[v11[9]], &v10[v11[9]], v15);
        *(_DWORD *)&v9[v11[10]] = *(_DWORD *)&v10[v11[10]];
        *(_DWORD *)&v9[v11[11]] = *(_DWORD *)&v10[v11[11]];
        *(_QWORD *)&v9[v11[12]] = *(_QWORD *)&v10[v11[12]];
        *(_DWORD *)&v9[v11[13]] = *(_DWORD *)&v10[v11[13]];
        *(_QWORD *)&v9[v11[14]] = *(_QWORD *)&v10[v11[14]];
        *(_DWORD *)&v9[v11[15]] = *(_DWORD *)&v10[v11[15]];
        *(_QWORD *)&v9[v11[16]] = *(_QWORD *)&v10[v11[16]];
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100119308(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE v6[32];
  _QWORD v7[10];

  v7[0] = &unk_100348700;
  result = type metadata accessor for AWDLActionFrame.Header(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v6, " ", *(_QWORD *)(result - 8) + 64);
    v7[1] = v6;
    v7[2] = &unk_100348758;
    result = type metadata accessor for AWDLStatistics.LowLatencyStatistics(319);
    if (v4 <= 0x3F)
    {
      v7[3] = *(_QWORD *)(result - 8) + 64;
      v7[4] = &unk_100348770;
      v7[5] = &unk_100348788;
      v7[6] = &unk_1003487A0;
      v7[7] = &unk_1003487B8;
      v7[8] = &unk_1003487D0;
      result = type metadata accessor for AWDLIdleActivity(319);
      if (v5 <= 0x3F)
      {
        v7[9] = *(_QWORD *)(result - 8) + 64;
        swift_initEnumMetadataMultiPayload(a1, 256, 10, v7);
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for DriverEvent.Infra(uint64_t a1)
{
  return sub_1000131C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40), *(_BYTE *)(a1 + 41));
}

uint64_t initializeWithCopy for DriverEvent.Infra(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 41);
  v9 = *(_BYTE *)(a2 + 40);
  sub_1000087D0(*(_QWORD *)a2, v4, v5, v6, v7, v9, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 41) = v8;
  return a1;
}

uint64_t assignWithCopy for DriverEvent.Infra(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 41);
  v9 = *(_BYTE *)(a2 + 40);
  sub_1000087D0(*(_QWORD *)a2, v4, v5, v6, v7, v9, v8);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v15 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v9;
  v16 = *(_BYTE *)(a1 + 41);
  *(_BYTE *)(a1 + 41) = v8;
  sub_1000131C4(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for DriverEvent.Infra(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_WORD *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 41);
  v12 = *(_BYTE *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v4;
  sub_1000131C4(v5, v7, v6, v8, v9, v12, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverEvent.Infra(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 <= 0xA)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverEvent.Infra(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 246;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = -(char)a2;
  }
  return result;
}

uint64_t sub_10011961C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 41) <= 9u)
    return *(unsigned __int8 *)(a1 + 41);
  else
    return (*(_DWORD *)a1 + 10);
}

uint64_t sub_100119634(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xA)
  {
    *(_QWORD *)result = a2 - 10;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_BYTE *)(result + 40) = 0;
    LOBYTE(a2) = 10;
  }
  *(_BYTE *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DriverEvent.Infra()
{
  return &type metadata for DriverEvent.Infra;
}

uint64_t storeEnumTagSinglePayload for DriverEvent.SystemState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001196B8 + 4 * byte_10034767F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001196EC + 4 * byte_10034767A[v4]))();
}

uint64_t sub_1001196EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001196F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001196FCLL);
  return result;
}

uint64_t sub_100119708(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100119710);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100119714(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011971C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DriverEvent.SystemState()
{
  return &type metadata for DriverEvent.SystemState;
}

uint64_t sub_100119738(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
  return a1;
}

_BYTE *sub_100119774(_BYTE *a1, _BYTE *a2)
{
  initializeBufferWithCopyOfBuffer for Bandwidth(a2, a1);
  return a2;
}

_QWORD *sub_1001197B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[10];
  v3 = a1[11];
  v4 = a1[12];
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1001197FC(__int128 *a1, uint64_t a2)
{
  initializeWithTake for IEEE80211Frame.Contents(a2, a1);
  return a2;
}

uint64_t sub_100119838(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 34);
  if (v1 > 0x80000000)
    return -v1;
  else
    return 0;
}

uint64_t sub_10011984C(__int128 *a1, uint64_t a2)
{
  initializeWithTake for IEEE80211Frame.Contents(a2, a1);
  return a2;
}

void sub_1001198B0(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  if ((unint64_t)a1 >> 62)
    goto LABEL_27;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  if (!v5)
  {
LABEL_31:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
    return;
  }
  while ((a1 & 0xC000000000000001) != 0)
  {
    v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
LABEL_6:
    v2 = v6;
    if ((unint64_t)a2 >> 62)
      goto LABEL_34;
    v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      goto LABEL_38;
LABEL_8:
    v8 = 0;
    v9 = v5 - 1;
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a2);
      }
      else
      {
        if (v8 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_25;
        v10 = *(id *)(a2 + 32 + 8 * v8);
      }
      v11 = v10;
      objc_msgSend(v2, "value");
      v13 = v12;
      objc_msgSend(v11, "value");
      v15 = v13 - v14;
      if (v15 <= 0.0)
        v15 = 0.0;
      objc_msgSend(v2, "setValue:", v15);

      if (v9 == v8)
        goto LABEL_31;
      v16 = v8 + 1;
      if ((a1 & 0xC000000000000001) != 0)
      {
        v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 + 1, a1);
      }
      else
      {
        if (v16 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_26;
        v17 = *(id *)(a1 + 40 + 8 * v8);
      }
      v2 = v17;
      if (__OFADD__(v16, 1))
        break;
      if (v7 == ++v8)
        goto LABEL_38;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    if (!v5)
      goto LABEL_31;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_34:
  if (a2 < 0)
    v19 = a2;
  else
    v19 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(a2);
  if (v7)
    goto LABEL_8;
LABEL_38:
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);

}

void *AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame;
}

void *AWDLTrafficRegistrationOptions.remoteCamera.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.remoteCamera;
}

void *AWDLTrafficRegistrationOptions.tvRemoteCamera.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.tvRemoteCamera;
}

void *AWDLTrafficRegistrationOptions.remoteScreen.unsafeMutableAddressor()
{
  return &static AWDLTrafficRegistrationOptions.remoteScreen;
}

unint64_t WiFiP2PError.description.getter(uint64_t a1)
{
  unint64_t result;

  result = 0x73736563637553;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0xD000000000000012;
      break;
    case 2:
    case 3:
      result = 0x2064696C61766E49;
      break;
    case 4:
      result = 0xD000000000000019;
      break;
    case 5:
      result = 0xD000000000000016;
      break;
    case 6:
      result = 0xD00000000000001BLL;
      break;
    case 7:
      result = 0x616C696176616E55;
      break;
    case 8:
      result = 0xD000000000000018;
      break;
    default:
      result = 0x6E776F6E6B6E55;
      break;
  }
  return result;
}

unint64_t sub_100119C94()
{
  uint64_t *v0;

  return WiFiP2PError.description.getter(*v0);
}

uint64_t sub_100119C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100011DE4(&qword_100408100, (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PError, (uint64_t)&unk_100338C00);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100119D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100011DE4(&qword_100408100, (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PError, (uint64_t)&unk_100338C00);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t WiFiAwareTerminationReason.description.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = a1 + 1;
  result = 0xD000000000000011;
  switch(v1)
  {
    case 0:
      return result;
    case 2:
      result = 0x754F2064656D6954;
      break;
    case 3:
      result = 0x7165522072657355;
      break;
    case 4:
      result = 0x6961462070696843;
      break;
    case 5:
      result = 0xD000000000000018;
      break;
    default:
      result = 0x6E776F6E6B6E55;
      break;
  }
  return result;
}

unint64_t sub_100119E40()
{
  uint64_t *v0;

  return WiFiAwareTerminationReason.description.getter(*v0);
}

uint64_t sub_100119E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100011DE4(&qword_1004080F8, (uint64_t (*)(uint64_t))type metadata accessor for WiFiAwareTerminationReason, (uint64_t)&unk_100338CA0);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100119EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100011DE4(&qword_1004080F8, (uint64_t (*)(uint64_t))type metadata accessor for WiFiAwareTerminationReason, (uint64_t)&unk_100338CA0);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t WiFiP2PInternetSharingPolicy.description.getter(uint64_t a1)
{
  unint64_t result;

  result = 0x63696C6F50205249;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0xD000000000000014;
      break;
    case 3:
      result = 0xD00000000000001BLL;
      break;
    default:
      result = 0xD000000000000011;
      break;
  }
  return result;
}

unint64_t sub_100119FC8()
{
  uint64_t *v0;

  return WiFiP2PInternetSharingPolicy.description.getter(*v0);
}

id WiFiAwarePublisherDataSessionHandle.init(_:)(unint64_t a1)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;

  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  v4 = objc_msgSend(objc_allocWithZone((Class)WiFiMACAddress), "initWithAddress:", (a1 >> 8) & 0xFFFFFFFFFFFFLL);
  v5 = objc_msgSend(v3, "initWithDatapathID:initiatorDataAddress:", a1, v4);

  return v5;
}

uint64_t WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter()
{
  void *v0;
  unsigned __int8 v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, "datapathID");
  v2 = objc_msgSend(v0, "initiatorDataAddress");
  WiFiMACAddress.wifiAddress.getter();
  v4 = v3;

  return v1 | ((v4 & 0xFFFFFFFFFFFFLL) << 8);
}

uint64_t WiFiAwareDataSessionLinkStatus.description.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = 0x6E776F6E6B6E75;
  if (a1 == 1)
    v1 = 0x657669746361;
  if (a1)
    return v1;
  else
    return 1701602409;
}

uint64_t sub_10011A0F8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = 0x6E776F6E6B6E75;
  if (*v0 == 1)
    v1 = 0x657669746361;
  if (*v0)
    return v1;
  else
    return 1701602409;
}

uint64_t AWDLTrafficRegistrationService.serviceType.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceAirPlay);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6)
    goto LABEL_14;
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0)
    return 2;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceSidecar);
  v4 = v12;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v11 == v13 && v4 == v14)
    goto LABEL_14;
  v16 = v14;
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v4, v13, v14, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0)
    return 2;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteCamera);
  v4 = v19;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v22 = v20;
  if (v18 == v21 && v4 == v20)
    goto LABEL_14;
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v4, v21, v20, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v22);
  if ((v24 & 1) != 0)
    return 2;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceTVRemoteCamera);
  v4 = v26;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v29 = v27;
  if (v25 == v28 && v4 == v27)
    goto LABEL_14;
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v4, v28, v27, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v29);
  if ((v30 & 1) != 0)
    return 2;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceMPRemoteCamera);
  v4 = v32;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v35 = v33;
  if (v31 == v34 && v4 == v33)
    goto LABEL_14;
  v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v4, v34, v33, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v35);
  if ((v36 & 1) != 0)
    return 2;
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteScreen);
  v4 = v38;
  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v41 = v39;
  if (v37 == v40 && v4 == v39)
  {
LABEL_14:
    v10 = 2;
    swift_bridgeObjectRelease_n(v4, 2);
    return v10;
  }
  v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v4, v40, v39, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v41);
  if ((v42 & 1) != 0)
    return 2;
  else
    return 0;
}

uint64_t AWDLTrafficRegistrationService.showsInfraDisconnectUINotifications.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceSidecar);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6)
    goto LABEL_14;
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) == 0)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteCamera);
    v4 = v12;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v11 != v13 || v4 != v14)
    {
      v16 = v14;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v4, v13, v14, 0);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v16);
      if ((v17 & 1) != 0)
        goto LABEL_6;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceTVRemoteCamera);
      v4 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v22 = v20;
      if (v18 != v21 || v4 != v20)
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v4, v21, v20, 0);
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(v22);
        if ((v25 & 1) != 0)
          goto LABEL_6;
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceRemoteScreen);
        v4 = v27;
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
        v23 = v28;
        if (v26 != v29 || v4 != v28)
        {
          v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v4, v29, v28, 0);
          goto LABEL_15;
        }
      }
    }
LABEL_14:
    v10 = 1;
    v23 = v4;
LABEL_15:
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v23);
    return v10 & 1;
  }
LABEL_6:
  v10 = 1;
  return v10 & 1;
}

uint64_t AWDLTrafficRegistrationService.allowsMultipleConcurrentPeers.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (AWDLTrafficRegistrationService.serviceType.getter(a1) != 2)
    goto LABEL_7;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceAirPlay);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6)
    goto LABEL_13;
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) == 0)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AWDLTrafficRegistrationServiceMPRemoteCamera);
    v4 = v12;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v11 != v13 || v4 != v14)
    {
      v16 = v14;
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v4, v13, v14, 0);
LABEL_14:
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v16);
      return v10 & 1;
    }
LABEL_13:
    v10 = 1;
    v16 = v4;
    goto LABEL_14;
  }
LABEL_7:
  v10 = 1;
  return v10 & 1;
}

uint64_t sub_10011A6B0()
{
  _QWORD *v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
}

uint64_t static AWDLTrafficRegistrationOptions.remoteScreen.getter()
{
  return 0x20000000;
}

uint64_t static AWDLTrafficRegistrationOptions.tvRemoteCamera.getter()
{
  return 0x40000000;
}

uint64_t static AWDLTrafficRegistrationOptions.remoteCamera.getter()
{
  return 0x80000000;
}

const mach_header_64 *static AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame.getter()
{
  return &_mh_execute_header;
}

void AWDLTrafficRegistrationConfiguration.init(peerAddress:umiOptions:isActive:)(uint64_t a1, char a2)
{
  __asm { BR              X12 }
}

id sub_10011A718(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v5 = (void *)AWDLTrafficRegistrationServiceAirPlay;
  *a3 = 0;
  v6 = v5;
  v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  v8 = objc_msgSend(objc_allocWithZone((Class)WiFiMACAddress), "initWithAddress:", v3 & 0xFFFFFFFFFFFFLL);
  v9 = objc_msgSend(v7, "initWithUniqueIdentifier:peerAddress:", v6, v8);

  return v9;
}

uint64_t WiFiP2PSPITransactionType.desiredLatency.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 1;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 2;
      break;
    case 2:
      result = 3;
      break;
    case 3:
      result = 4;
      break;
    case 11:
      result = 5;
      break;
    case 17:
      result = 6;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

unint64_t sub_10011A914()
{
  uint64_t *v0;

  return WiFiP2PSPITransactionType.description.getter(*v0);
}

uint64_t WiFiAwarePublishConfiguration.furtherServiceDiscoveryFunction.getter()
{
  void *v0;

  if (objc_msgSend(v0, "furtherServiceDiscoveryRequired"))
    return (uint64_t)objc_msgSend(v0, "jumboServiceDiscoveryMessages");
  else
    return 2;
}

unint64_t WiFiAwarePublishDatapathServiceSpecificInfo.genericServiceProtocol.getter()
{
  void *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(BOOL *, uint64_t, uint64_t, uint64_t);
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;

  sub_100012C44(&qword_100404E70);
  __chkstk_darwin();
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v6 = (char *)&v20 - v5;
  __chkstk_darwin();
  v8 = (BOOL *)&v20 - v7;
  v21 = sub_100031A88((uint64_t)_swiftEmptyArrayStorage);
  *v8 = objc_msgSend(v0, "protocolType") != 0;
  v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  v10 = 1;
  swift_storeEnumTagMultiPayload(v8, v9, 1);
  v11 = *(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v11(v8, 0, 1, v9);
  sub_10011C6A0((uint64_t)v8, (uint64_t)v6);
  sub_10002548C((uint64_t)v6, 1);
  sub_100033A84((uint64_t)v8, &qword_100404EE8);
  NWEndpoint.Port.init(rawValue:)(objc_msgSend(v0, "servicePort"));
  NANGenericServiceProtocol.port.setter((uint64_t)v2);
  v12 = objc_msgSend(v0, "hostname");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

    v17 = _s7CoreP2P14NANServiceNameVyACSgSScfC_0(v14, v16);
    if (v18)
    {
      *v4 = v17;
      v4[1] = v18;
      swift_storeEnumTagMultiPayload(v4, v9, 2);
      v10 = 0;
    }
  }
  v11((BOOL *)v4, v10, 1, v9);
  sub_10011C6A0((uint64_t)v4, (uint64_t)v8);
  sub_10002548C((uint64_t)v8, 2);
  sub_100033A84((uint64_t)v4, &qword_100404EE8);
  return v21;
}

BOOL Layer3Protocol.init(apiProtocolType:)(uint64_t a1)
{
  return a1 != 0;
}

id WiFiAwareDiscoveryResult.init(nanDiscoveryResultEvent:serviceName:serviceDescriptor:serviceDescriptorExtension:extraServiceSpecificInfo:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v36[16];
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE v46[24];
  __int128 v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;

  sub_100063EB8(a7, (uint64_t)v36, (uint64_t *)&unk_10040EEA0);
  v14 = v37;
  v13 = v38;
  v15 = v39;
  sub_100063EB8(a7, (uint64_t)&v40, (uint64_t *)&unk_10040EEA0);
  if (v41 != 5)
  {
    v43 = v40;
    v44 = v41;
    v45 = v42;
    if (a8)
    {
      sub_100111B7C(v14, v13, v15);
      v16 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(a8);
      swift_bridgeObjectRelease(a8);
      if (v16)
      {
LABEL_19:
        sub_10011C6E8(a7);
        if ((BYTE2(v43) & 1) != 0)
          v23 = (BYTE2(v43) & 2) != 0;
        else
          v23 = 2;
        v21 = (WORD1(v43) >> 2) & 1;
        v22 = ((unint64_t)WORD1(v43) >> 6) & 1;
        goto LABEL_23;
      }
    }
    else
    {
      sub_100111B7C(v14, v13, v15);
    }
    sub_100063EB8((uint64_t)&v44, (uint64_t)v46, (uint64_t *)&unk_10040DAC0);
    sub_100063EB8((uint64_t)v46, (uint64_t)&v47, (uint64_t *)&unk_10040DAC0);
    if (v47 != 4
      && (v49 = v47, v50 = v48, v47 == 2)
      && (v24 = *((_QWORD *)&v49 + 1),
          v25 = v50,
          sub_10011C7C0((uint64_t)&v49),
          _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v24, v25),
          v26))
    {
      v27 = v26;
      v16 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(v26);
      swift_bridgeObjectRelease(v27);
    }
    else
    {
      v16 = 0;
    }
    goto LABEL_19;
  }
  if (!a8
    || (v16 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(a8), swift_bridgeObjectRelease(a8), !v16))
  {
    sub_100063EB8(a6 + 56, (uint64_t)&v47, (uint64_t *)&unk_10040DAC0);
    sub_100063EB8((uint64_t)&v47, (uint64_t)&v49, (uint64_t *)&unk_10040DAC0);
    if (v49 != 4
      && (v43 = v49, *(_QWORD *)&v44 = v50, v49 == 2)
      && (v17 = *((_QWORD *)&v43 + 1),
          v18 = v44,
          sub_10011C7C0((uint64_t)&v43),
          _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v17, v18),
          v19))
    {
      v20 = v19;
      v16 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(v19);
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      v16 = 0;
    }
  }
  v21 = 0;
  v22 = 0;
  v23 = 2;
LABEL_23:
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  v29 = objc_msgSend(objc_allocWithZone((Class)WiFiMACAddress), "initWithAddress:", a1 >> 16);
  v30 = 1;
  if ((v23 & 1) != 0)
    v30 = 2;
  if (v23 == 2)
    v31 = 0;
  else
    v31 = v30;
  v32 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithServiceName:serviceSpecificInfo:publishID:subscribeID:publisherAddressKey:datapathSupported:datapathCipherSuite:fsdFunction:rssi:", v28, v16, BYTE1(a1), a1, v29, v21, v22, v31, a2);
  sub_10011C6E8(a7);
  sub_10011C738(a6);
  swift_bridgeObjectRelease(a3);

  return v32;
}

id NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter(uint64_t a1)
{
  id v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  unint64_t v8;
  Class isa;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Class v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = objc_msgSend(objc_allocWithZone((Class)WiFiAwarePublishServiceSpecificInfo), "init");
  NANGenericServiceProtocol.instanceName.getter(a1);
  if (v3)
  {
    v5 = v3;
    v6 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v4 = swift_bridgeObjectRelease(v5).n128_u64[0];
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v2, "setInstanceName:", v6, v4);

  v7 = NANGenericServiceProtocol.textInfo.getter(a1);
  if (v8 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    v10 = v7;
    v11 = v8;
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000E658(v10, v11);
  }
  objc_msgSend(v2, "setTxtRecordData:", isa);

  v12 = NANGenericServiceProtocol.blob.getter(a1);
  if (v13 >> 60 == 15)
  {
    NANGenericServiceProtocol.vendorSpecificData.getter(a1);
    if (v15 >> 60 == 15)
    {
      v16 = 0;
      goto LABEL_13;
    }
    v17 = v14;
    v18 = v15;
  }
  else
  {
    v17 = v12;
    v18 = v13;
  }
  v16 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000E614(v17, v18);
LABEL_13:
  objc_msgSend(v2, "setBlob:", v16);

  v19 = objc_msgSend(v2, "instanceName");
  if (v19)
  {

  }
  else
  {
    v20 = objc_msgSend(v2, "txtRecordData");
    if (v20 || (v20 = objc_msgSend(v2, "blob")) != 0)
    {
      v21 = v20;
      v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

      sub_10000E614(v22, v24);
    }
    else
    {

      return 0;
    }
  }
  return v2;
}

uint64_t Layer3Protocol.init(apiProtocolType:)(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return 2;
  else
    return a1 != 0;
}

uint64_t Layer3Protocol.apiProtocolType.getter(char a1)
{
  return a1 & 1;
}

void WiFiAwareDataSessionStatisticsReport.difference(from:)(void *a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  Class isa;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  Class v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  Class v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Class v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  Class v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  Class v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  Class v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  Class v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  Class v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  Class v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  Class v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  Class v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  Class v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  Class v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  Class v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  Class v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  Class v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  Class v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  Class v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  Class v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  Class v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  Class v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  Class v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  Class v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  Class v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  Class v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  Class v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  Class v170;
  id v171;
  id v172;
  unint64_t v173;
  uint64_t v174;
  id v175;
  id v176;
  uint64_t v177;
  id v178;
  id v179;
  uint64_t v180;
  id v181;
  id v182;
  uint64_t v183;
  id v184;
  id v185;
  uint64_t v186;
  id v187;
  id v188;
  uint64_t v189;
  id v190;
  id v191;
  uint64_t v192;
  id v193;
  id v194;
  uint64_t v195;
  id v196;
  id v197;
  uint64_t v198;
  id v199;
  id v200;
  uint64_t v201;
  id v202;
  id v203;
  uint64_t v204;
  id v205;
  id v206;
  uint64_t v207;

  v3 = v1;
  v4 = objc_msgSend(v3, "dfsChannelsCount");
  v5 = objc_msgSend(v4, "integerValue");

  v6 = objc_msgSend(a1, "dfsChannelsCount");
  v7 = objc_msgSend(v6, "integerValue");

  if (__OFSUB__(v5, v7))
  {
    __break(1u);
    goto LABEL_31;
  }
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v3, "setDfsChannelsCount:", isa);

  v9 = v3;
  v10 = objc_msgSend(v9, "csaCount");
  v11 = objc_msgSend(v10, "integerValue");

  v12 = objc_msgSend(a1, "csaCount");
  v13 = objc_msgSend(v12, "integerValue");

  if (__OFSUB__(v11, v13))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v14 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v9, "setCsaCount:", v14);

  v15 = v9;
  v16 = objc_msgSend(v15, "quietIECount");
  v17 = objc_msgSend(v16, "integerValue");

  v18 = objc_msgSend(a1, "quietIECount");
  v19 = objc_msgSend(v18, "integerValue");

  if (__OFSUB__(v17, v19))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v20 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v15, "setQuietIECount:", v20);

  v21 = v15;
  v22 = objc_msgSend(v21, "txErrorCount");
  v23 = objc_msgSend(v22, "integerValue");

  v24 = objc_msgSend(a1, "txErrorCount");
  v25 = objc_msgSend(v24, "integerValue");

  if (__OFSUB__(v23, v25))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v26 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v21, "setTxErrorCount:", v26);

  v27 = v21;
  v28 = objc_msgSend(v27, "packetsOn2GCount");
  v29 = objc_msgSend(v28, "integerValue");

  v30 = objc_msgSend(a1, "packetsOn2GCount");
  v31 = objc_msgSend(v30, "integerValue");

  if (__OFSUB__(v29, v31))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v32 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v27, "setPacketsOn2GCount:", v32);

  v33 = v27;
  v34 = objc_msgSend(v33, "packetsNAVOn2GCount");
  v35 = objc_msgSend(v34, "integerValue");

  v36 = objc_msgSend(a1, "packetsNAVOn2GCount");
  v37 = objc_msgSend(v36, "integerValue");

  if (__OFSUB__(v35, v37))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v38 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v33, "setPacketsNAVOn2GCount:", v38);

  v39 = v33;
  v40 = objc_msgSend(v39, "packetsHOFOn2GCount");
  v41 = objc_msgSend(v40, "integerValue");

  v42 = objc_msgSend(a1, "packetsHOFOn2GCount");
  v43 = objc_msgSend(v42, "integerValue");

  if (__OFSUB__(v41, v43))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v44 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v39, "setPacketsHOFOn2GCount:", v44);

  v45 = v39;
  v46 = objc_msgSend(v45, "packetsOn5GCount");
  v47 = objc_msgSend(v46, "integerValue");

  v48 = objc_msgSend(a1, "packetsOn5GCount");
  v49 = objc_msgSend(v48, "integerValue");

  if (__OFSUB__(v47, v49))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v50 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v45, "setPacketsOn5GCount:", v50);

  v51 = v45;
  v52 = objc_msgSend(v51, "packetsOverridenOn5GCount");
  v53 = objc_msgSend(v52, "integerValue");

  v54 = objc_msgSend(a1, "packetsOverridenOn5GCount");
  v55 = objc_msgSend(v54, "integerValue");

  if (__OFSUB__(v53, v55))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v56 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v51, "setPacketsOverridenOn5GCount:", v56);

  v57 = v51;
  v58 = objc_msgSend(v57, "infraRelayRequestersCount");
  v59 = objc_msgSend(v58, "integerValue");

  v60 = objc_msgSend(a1, "infraRelayRequestersCount");
  v61 = objc_msgSend(v60, "integerValue");

  if (__OFSUB__(v59, v61))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v62 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v57, "setInfraRelayRequestersCount:", v62);

  v63 = v57;
  v64 = objc_msgSend(v63, "txExpiredCount");
  v65 = objc_msgSend(v64, "integerValue");

  v66 = objc_msgSend(a1, "txExpiredCount");
  v67 = objc_msgSend(v66, "integerValue");

  if (__OFSUB__(v65, v67))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v68 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v63, "setTxExpiredCount:", v68);

  v69 = v63;
  v70 = objc_msgSend(v69, "txNoACKCount");
  v71 = objc_msgSend(v70, "integerValue");

  v72 = objc_msgSend(a1, "txNoACKCount");
  v73 = objc_msgSend(v72, "integerValue");

  if (__OFSUB__(v71, v73))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v74 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v69, "setTxNoACKCount:", v74);

  v75 = v69;
  v76 = objc_msgSend(v75, "txFailedCount");
  v77 = objc_msgSend(v76, "integerValue");

  v78 = objc_msgSend(a1, "txFailedCount");
  v79 = objc_msgSend(v78, "integerValue");

  if (__OFSUB__(v77, v79))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v80 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v75, "setTxFailedCount:", v80);

  v81 = v75;
  v82 = objc_msgSend(v81, "txNoResourcesCount");
  v83 = objc_msgSend(v82, "integerValue");

  v84 = objc_msgSend(a1, "txNoResourcesCount");
  v85 = objc_msgSend(v84, "integerValue");

  if (__OFSUB__(v83, v85))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v86 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v81, "setTxNoResourcesCount:", v86);

  v87 = v81;
  v88 = objc_msgSend(v87, "txIOErrorCount");
  v89 = objc_msgSend(v88, "integerValue");

  v90 = objc_msgSend(a1, "txIOErrorCount");
  v91 = objc_msgSend(v90, "integerValue");

  if (__OFSUB__(v89, v91))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v92 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v87, "setTxIOErrorCount:", v92);

  v93 = v87;
  v94 = objc_msgSend(v93, "txMemoryErrorCount");
  v95 = objc_msgSend(v94, "integerValue");

  v96 = objc_msgSend(a1, "txMemoryErrorCount");
  v97 = objc_msgSend(v96, "integerValue");

  if (__OFSUB__(v95, v97))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v98 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v93, "setTxMemoryErrorCount:", v98);

  v99 = v93;
  v100 = objc_msgSend(v99, "txChipModeErrorCount");
  v101 = objc_msgSend(v100, "integerValue");

  v102 = objc_msgSend(a1, "txChipModeErrorCount");
  v103 = objc_msgSend(v102, "integerValue");

  if (__OFSUB__(v101, v103))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v104 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v99, "setTxChipModeErrorCount:", v104);

  v105 = v99;
  v106 = objc_msgSend(v105, "txNoRemotePeerCount");
  v107 = objc_msgSend(v106, "integerValue");

  v108 = objc_msgSend(a1, "txNoRemotePeerCount");
  v109 = objc_msgSend(v108, "integerValue");

  if (__OFSUB__(v107, v109))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v110 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v105, "setTxNoRemotePeerCount:", v110);

  v111 = v105;
  v112 = objc_msgSend(v111, "txInternalErrorCount");
  v113 = objc_msgSend(v112, "integerValue");

  v114 = objc_msgSend(a1, "txInternalErrorCount");
  v115 = objc_msgSend(v114, "integerValue");

  if (__OFSUB__(v113, v115))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v116 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v111, "setTxInternalErrorCount:", v116);

  v117 = v111;
  v118 = objc_msgSend(v117, "txDroppedCount");
  v119 = objc_msgSend(v118, "integerValue");

  v120 = objc_msgSend(a1, "txDroppedCount");
  v121 = objc_msgSend(v120, "integerValue");

  if (__OFSUB__(v119, v121))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v122 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v117, "setTxDroppedCount:", v122);

  v123 = v117;
  v124 = objc_msgSend(v123, "txFirmwareFreePacketCount");
  v125 = objc_msgSend(v124, "integerValue");

  v126 = objc_msgSend(a1, "txFirmwareFreePacketCount");
  v127 = objc_msgSend(v126, "integerValue");

  if (__OFSUB__(v125, v127))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v128 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v123, "setTxFirmwareFreePacketCount:", v128);

  v129 = v123;
  v130 = objc_msgSend(v129, "txMaxRetriesCount");
  v131 = objc_msgSend(v130, "integerValue");

  v132 = objc_msgSend(a1, "txMaxRetriesCount");
  v133 = objc_msgSend(v132, "integerValue");

  if (__OFSUB__(v131, v133))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v134 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v129, "setTxMaxRetriesCount:", v134);

  v135 = v129;
  v136 = objc_msgSend(v135, "txForceLifetimeExpiredCount");
  v137 = objc_msgSend(v136, "integerValue");

  v138 = objc_msgSend(a1, "txForceLifetimeExpiredCount");
  v139 = objc_msgSend(v138, "integerValue");

  if (__OFSUB__(v137, v139))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v140 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v135, "setTxForceLifetimeExpiredCount:", v140);

  v141 = v135;
  v142 = objc_msgSend(v141, "channelSequenceMismatchOn5GCount");
  v143 = objc_msgSend(v142, "integerValue");

  v144 = objc_msgSend(a1, "channelSequenceMismatchOn5GCount");
  v145 = objc_msgSend(v144, "integerValue");

  if (__OFSUB__(v143, v145))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v146 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v141, "setChannelSequenceMismatchOn5GCount:", v146);

  v147 = v141;
  v148 = objc_msgSend(v147, "channelSequenceMismatchOn2GCount");
  v149 = objc_msgSend(v148, "integerValue");

  v150 = objc_msgSend(a1, "channelSequenceMismatchOn2GCount");
  v151 = objc_msgSend(v150, "integerValue");

  if (__OFSUB__(v149, v151))
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v152 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v147, "setChannelSequenceMismatchOn2GCount:", v152);

  v153 = v147;
  v154 = objc_msgSend(v153, "infraScanCount");
  v155 = objc_msgSend(v154, "integerValue");

  v156 = objc_msgSend(a1, "infraScanCount");
  v157 = objc_msgSend(v156, "integerValue");

  if (__OFSUB__(v155, v157))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v158 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v153, "setInfraScanCount:", v158);

  v159 = v153;
  v160 = objc_msgSend(v159, "infraAssocCount");
  v161 = objc_msgSend(v160, "integerValue");

  v162 = objc_msgSend(a1, "infraAssocCount");
  v163 = objc_msgSend(v162, "integerValue");

  if (__OFSUB__(v161, v163))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v164 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v159, "setInfraAssocCount:", v164);

  v165 = v159;
  v166 = objc_msgSend(v165, "infraDisassocCount");
  v167 = objc_msgSend(v166, "integerValue");

  v168 = objc_msgSend(a1, "infraDisassocCount");
  v169 = objc_msgSend(v168, "integerValue");

  if (!__OFSUB__(v167, v169))
  {
    v170 = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v165, "setInfraDisassocCount:", v170);

    v171 = v165;
    v172 = objc_msgSend(v171, "txCCAHistogram");
    v173 = sub_10011C7EC();
    v174 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v172, v173);

    v175 = a1;
    v176 = objc_msgSend(v175, "txCCAHistogram");
    v177 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v176, v173);

    sub_1001198B0(v174, v177);
    swift_bridgeObjectRelease(v177);
    swift_bridgeObjectRelease(v174);
    v178 = v171;
    v179 = objc_msgSend(v178, "rxRSSIHistogram");
    v180 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v179, v173);

    v181 = v175;
    v182 = objc_msgSend(v181, "rxRSSIHistogram");
    v183 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v182, v173);

    sub_1001198B0(v180, v183);
    swift_bridgeObjectRelease(v183);
    swift_bridgeObjectRelease(v180);
    v184 = v178;
    v185 = objc_msgSend(v184, "rxFWDelayHistogram");
    v186 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v185, v173);

    v187 = v181;
    v188 = objc_msgSend(v187, "rxFWDelayHistogram");
    v189 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v188, v173);

    sub_1001198B0(v186, v189);
    swift_bridgeObjectRelease(v189);
    swift_bridgeObjectRelease(v186);
    v190 = v184;
    v191 = objc_msgSend(v190, "rxIPCDelayHistogram");
    v192 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v191, v173);

    v193 = v187;
    v194 = objc_msgSend(v193, "rxIPCDelayHistogram");
    v195 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v194, v173);

    sub_1001198B0(v192, v195);
    swift_bridgeObjectRelease(v195);
    swift_bridgeObjectRelease(v192);
    v196 = v190;
    v197 = objc_msgSend(v196, "txConsecutiveErrorsHistogram");
    v198 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v197, v173);

    v199 = v193;
    v200 = objc_msgSend(v199, "txConsecutiveErrorsHistogram");
    v201 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v200, v173);

    sub_1001198B0(v198, v201);
    swift_bridgeObjectRelease(v201);
    swift_bridgeObjectRelease(v198);
    v202 = v196;
    v203 = objc_msgSend(v202, "txPacketExpiryHistogram");
    v204 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v203, v173);

    v205 = v199;
    v206 = objc_msgSend(v205, "txPacketExpiryHistogram");
    v207 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v206, v173);

    sub_1001198B0(v204, v207);
    swift_bridgeObjectRelease(v207);
    swift_bridgeObjectRelease(v204);
    return;
  }
LABEL_57:
  __break(1u);
}

uint64_t DNSRecords.Identifier.serviceType.getter(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v5;

  v5 = a3 & 0xFF01;
  if (sub_100106584(0x79616C707269615FLL, 0xE800000000000000, 256, a1, a2, a3 & 0xFF01)
    || sub_100106584(0x79616C707269615FLL, 0xEC0000007032702DLL, 256, a1, a2, v5)
    || sub_100106584(0x706F61725FLL, 0xE500000000000000, 256, a1, a2, v5)
    || sub_100106584(0x696E61706D6F635FLL, 0xEF6B6E696C2D6E6FLL, 256, a1, a2, v5))
  {
    return 2;
  }
  if (sub_100106584(0x6B6E696C64725FLL, 0xE700000000000000, 256, a1, a2, v5))
    return 2;
  return 0;
}

id NANGenericServiceProtocol.apiDatapathServiceSpecificInfo.getter(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;

  sub_100012C44(&qword_100404E70);
  __chkstk_darwin();
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NWEndpoint.Port(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = (char *)&v25 - v11;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v13 = sub_10002D744(1);
  if ((v14 & 1) == 0)
    return 0;
  sub_10011C828(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v8 + 72) * v13, (uint64_t)v10);
  sub_10011C86C((uint64_t)v10, (uint64_t)v12);
  sub_10006F264();
  v16 = v15;
  v17 = v15;
  sub_10011C8B0((uint64_t)v12);
  if (v17 == 2)
    return 0;
  NANGenericServiceProtocol.port.getter(a1, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100033A84((uint64_t)v3, &qword_100404E70);
    return 0;
  }
  v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v18 = objc_msgSend(objc_allocWithZone((Class)WiFiAwarePublishDatapathServiceSpecificInfo), "initWithProtocolType:servicePort:", v16 & 1, (unsigned __int16)NWEndpoint.Port.rawValue.getter(v20));
  NANGenericServiceProtocol.serviceName.getter(a1);
  if (v21)
  {
    v23 = v21;
    v24 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v22 = swift_bridgeObjectRelease(v23).n128_u64[0];
  }
  else
  {
    v24 = 0;
  }
  objc_msgSend(v18, "setHostname:", v24, v22);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v18;
}

uint64_t sub_10011C6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44(&qword_100404EE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011C6E8(uint64_t a1)
{
  sub_10011C718(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_10011C718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;

  if (a3 != 5)
    return sub_100111BBC(a3, a4, a5);
  return result;
}

uint64_t sub_10011C738(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  sub_10000E614(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(v2);
  sub_100111B98(v3, v4, v5);
  sub_100111BBC(v6, v7, v8);
  return a1;
}

uint64_t sub_10011C7C0(uint64_t a1)
{
  sub_100031FEC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

unint64_t sub_10011C7EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004068D8;
  if (!qword_1004068D8)
  {
    v1 = objc_opt_self(WiFiAwareDataSessionStatisticsHistogramBin);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004068D8);
  }
  return result;
}

uint64_t sub_10011C828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011C86C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011C8B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10011C8EC(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_10011C944()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000010, 0x8000000100361FA0);
  swift_bridgeObjectRelease(0x8000000100361FA0);
  return Hasher._finalize()();
}

void sub_10011C9F4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10011CA3C(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000010, 0x8000000100361FA0);
  return swift_bridgeObjectRelease(0x8000000100361FA0);
}

void sub_10011CAD8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10011CB18(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x6172666E49796DLL, v1);
  return swift_bridgeObjectRelease(v1);
}

void *sub_10011CBB8@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  void *result;
  char v13;

  v5 = (_QWORD *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_1001A87E0(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[2 * a1];
    v10 = *((_OWORD *)v8 + 2);
    v9 = v8 + 4;
    *a2 = v10;
    v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      result = memmove(v9, v9 + 2, 16 * v11);
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  v13 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v13, 1046, 0);
  __break(1u);
  return result;
}

void *NANMatchingFilter.maximumLength.unsafeMutableAddressor()
{
  return &static NANMatchingFilter.maximumLength;
}

uint64_t NANMatchingFilter.FilterType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10011CCE0 + 4 * byte_100348B21[a1]))(0xD000000000000011, 0x8000000100361F80);
}

unint64_t sub_10011CCE0()
{
  return 0xD000000000000010;
}

uint64_t sub_10011CCFC()
{
  return 0x546873696C627570;
}

uint64_t sub_10011CD20()
{
  return 0x526873696C627570;
}

uint64_t sub_10011CD44()
{
  return 0x73655265676E6172;
}

uint64_t sub_10011CD68(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003BC9C(*a1, *a2);
}

unint64_t sub_10011CD74@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s7CoreP2P17NANMatchingFilterV0D4TypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10011CDA0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = NANMatchingFilter.FilterType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10011CDC8()
{
  char *v0;

  sub_10011C8EC(*v0);
}

void sub_10011CDD0(uint64_t a1)
{
  char *v1;

  sub_10011C9F4(a1, *v1);
}

void sub_10011CDD8(uint64_t a1)
{
  char *v1;

  sub_1001A9D18(a1, *v1);
}

uint64_t sub_10011CDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10011F114();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10011CE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10011F114();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANMatchingFilter.RespondCondition.defaultValue.unsafeMutableAddressor()
{
  return &static NANMatchingFilter.RespondCondition.defaultValue;
}

CoreP2P::NANMatchingFilter::RespondCondition_optional __swiftcall NANMatchingFilter.RespondCondition.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  CoreP2P::NANMatchingFilter::RespondCondition_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6098, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4.value = CoreP2P_NANMatchingFilter_RespondCondition_txNotEqualRx;
  else
    v4.value = CoreP2P_NANMatchingFilter_RespondCondition_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t NANMatchingFilter.RespondCondition.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x757145746F4E7874;
  else
    return 0x526C617571457874;
}

uint64_t sub_10011CF28(char *a1, char *a2)
{
  return sub_10003BBEC(*a1, *a2);
}

uint64_t sub_10011CF34@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6098, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10011CF90(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x526C617571457874;
  if (*v1)
    v2 = 0x757145746F4E7874;
  v3 = 0xE900000000000078;
  if (*v1)
    v3 = 0xEC00000078526C61;
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_10011CFDC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x757145746F4E7874;
  else
    v2 = 0x526C617571457874;
  if (v1)
    v3 = 0xEC00000078526C61;
  else
    v3 = 0xE900000000000078;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10011D068(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x757145746F4E7874;
  else
    v2 = 0x526C617571457874;
  if (*v1)
    v3 = 0xEC00000078526C61;
  else
    v3 = 0xE900000000000078;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10011D0D0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x757145746F4E7874;
  else
    v2 = 0x526C617571457874;
  if (v1)
    v3 = 0xEC00000078526C61;
  else
    v3 = 0xE900000000000078;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10011D158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10011F0D0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10011D1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10011F0D0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANMatchingFilter.addFilter(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  Swift::OpaquePointer v5;
  uint64_t v7;

  v4 = sub_100012C44(&qword_1004061E0);
  v5._rawValue = (void *)swift_initStackObject(v4, &v7);
  *((_OWORD *)v5._rawValue + 1) = xmmword_10033A110;
  *((_QWORD *)v5._rawValue + 4) = a1;
  *((_QWORD *)v5._rawValue + 5) = a2;
  sub_100031FEC(a1, a2);
  NANMatchingFilter.addFilters(_:)(v5);
  swift_setDeallocating(v5._rawValue);
  return swift_arrayDestroy((char *)v5._rawValue + 32, *((_QWORD *)v5._rawValue + 2), &type metadata for Data);
}

Swift::Void __swiftcall NANMatchingFilter.addFilters(_:)(Swift::OpaquePointer a1)
{
  if (*((_QWORD *)a1._rawValue + 2))
  {
    swift_bridgeObjectRetain(a1._rawValue);
    __asm { BR              X9 }
  }
  sub_1001A781C((uint64_t)_swiftEmptyArrayStorage);
}

void NANMatchingFilter.removeFilter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  __int128 v8;

  v5 = *(_QWORD *)(v2 + 8);
  swift_bridgeObjectRetain(v5);
  v6 = sub_10011D510(a1, a2, v5);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease(v5);
  if ((a1 & 1) == 0)
  {
    sub_10011CBB8(v6, &v8);
    sub_10000E614(v8, *((unint64_t *)&v8 + 1));
  }
}

uint64_t sub_10011D4AC(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_DWORD *)(a2 + 32) == a1)
    return 0;
  result = 0;
  v5 = v2 - 1;
  while (v5 != result)
  {
    v6 = *(_DWORD *)(a2 + 36 + 4 * result++);
    if (v6 == a1)
      return result;
  }
  return 0;
}

uint64_t sub_10011D510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
    __asm { BR              X8 }
  return 0;
}

void sub_10011DE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X9 }
}

uint64_t sub_10011DEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))((char *)&loc_10011DF54 + *((int *)qword_10011E118 + v24)))(a1, a2, a3, a4, a5, a6, a7, a8, a22, v22 >> 40, HIDWORD(v22), v22 >> 24, v22 >> 16, v22 >> 8, HIBYTE(v23));
}

uint64_t sub_10011DF68()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  if (v2 == v27)
    return 0;
  if (!v4)
  {
    if (v2 < v5)
    {
      *(_BYTE *)(v6 - 102) = v1;
      *(_BYTE *)(v6 - 101) = v25;
      *(_BYTE *)(v6 - 100) = v24;
      *(_BYTE *)(v6 - 99) = v23;
      *(_BYTE *)(v6 - 98) = v22;
      *(_BYTE *)(v6 - 97) = v21;
      *(_BYTE *)(v6 - 96) = v20;
      *(_BYTE *)(v6 - 95) = v19;
      *(_BYTE *)(v6 - 94) = v0;
      *(_BYTE *)(v6 - 93) = v18;
      *(_BYTE *)(v6 - 92) = v17;
      *(_BYTE *)(v6 - 91) = v16;
      *(_BYTE *)(v6 - 90) = v15;
      *(_BYTE *)(v6 - 89) = v14;
      if (*(unsigned __int8 *)(v6 - 102 + v2) != v3)
        goto LABEL_30;
      return v2;
    }
    goto LABEL_22;
  }
  if (v4 != 1)
  {
    if (v2 >= *(_QWORD *)(v1 + 16))
    {
      if (v2 >= *(_QWORD *)(v1 + 24))
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      v11 = __DataStorage._bytes.getter();
      if (v11)
      {
        v8 = v11;
        v12 = __DataStorage._offset.getter();
        v10 = v2 - v12;
        if (!__OFSUB__(v2, v12))
          goto LABEL_17;
LABEL_26:
        __break(1u);
        JUMPOUT(0x10011E0F8);
      }
LABEL_28:
      __break(1u);
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v2 < v26 || v2 >= v27)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = __DataStorage._bytes.getter();
  if (!v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  v8 = v7;
  v9 = __DataStorage._offset.getter();
  v10 = v2 - v9;
  if (__OFSUB__(v2, v9))
    goto LABEL_24;
LABEL_17:
  if (*(unsigned __int8 *)(v8 + v10) != v3)
LABEL_30:
    JUMPOUT(0x10011DF4CLL);
  return v2;
}

uint64_t NANMatchingFilter.count.getter(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

BOOL NANMatchingFilter.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16) == 0;
}

void NANMatchingFilter.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

void sub_10011E198()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;

  String.hash(into:)(v1, 0xD000000000000010, 0x8000000100361FA0);
  swift_bridgeObjectRelease(0x8000000100361FA0);
  v2 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain(v0);
    v3 = (unint64_t *)(v0 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      sub_100031FEC(v4, *v3);
      Data.hash(into:)(v1, v4, v5, v6);
      sub_10000E614(v4, v5);
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v0);
  }
}

uint64_t static NANMatchingFilter.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((sub_10003BC9C(a1, a3) & 1) != 0)
    return sub_1000860FC(a2, a4);
  else
    return 0;
}

uint64_t sub_10011E2F4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 1701869940;
}

uint64_t sub_10011E32C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10011EFF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10011E350(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011E8A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011E378(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011E8A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANMatchingFilter.encode(to:)(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v7 = sub_100012C44(&qword_100408108);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_10011E8A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANMatchingFilter.CodingKeys, &type metadata for NANMatchingFilter.CodingKeys, v13, v11, v12);
  v22 = a2;
  v21 = 0;
  v14 = sub_10011E8E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v7, &type metadata for NANMatchingFilter.FilterType, v14);
  if (!v3)
  {
    v19 = a3;
    v20 = 1;
    v15 = sub_100012C44(&qword_100408120);
    v16 = sub_10011F19C(&qword_100408128, (uint64_t (*)(void))sub_100068570, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANMatchingFilter.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  NANMatchingFilter.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t NANMatchingFilter.init(from:)(_QWORD *a1)
{
  return sub_10011EA38(a1);
}

Swift::Int sub_10011E56C()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  NANMatchingFilter.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10011E5B8(uint64_t a1)
{
  char *v1;

  NANMatchingFilter.hash(into:)(a1, *v1);
}

Swift::Int sub_10011E5C4()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  NANMatchingFilter.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_10011E60C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_10011EA38(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_10011E638(_QWORD *a1)
{
  uint64_t v1;

  return NANMatchingFilter.encode(to:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_10011E654(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a2 + 1);
  if ((sub_10003BC9C(*a1, *a2) & 1) != 0)
    return sub_1000860FC(v2, v3);
  else
    return 0;
}

CoreP2P::NANMatchingFilter __swiftcall NANMatchingFilter.init(type:)(CoreP2P::NANMatchingFilter::FilterType type)
{
  _QWORD *v1;
  CoreP2P::NANMatchingFilter result;

  v1 = _swiftEmptyArrayStorage;
  result.matchingFilterList._rawValue = v1;
  result.type = type;
  return result;
}

void sub_10011E6AC()
{
  char *v0;

  _s7CoreP2P17NANMatchingFilterV11descriptionSSvg_0(*v0);
}

uint64_t NANMatchingFilter.FilterType.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10011E6F4 + 4 * byte_100348B2B[a1]))(0x6269726373627553, 0xEC00000058542065);
}

uint64_t sub_10011E704()
{
  return 0x206873696C627550;
}

uint64_t sub_10011E724()
{
  return 0x206873696C627550;
}

uint64_t sub_10011E740()
{
  return 0x65522065676E6152;
}

uint64_t sub_10011E764()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10011E7A0 + 4 * byte_100348B30[*v0]))(0x6269726373627553, 0xEC00000058542065);
}

uint64_t sub_10011E7B0()
{
  return 0x206873696C627550;
}

uint64_t sub_10011E7D0()
{
  return 0x206873696C627550;
}

uint64_t sub_10011E7EC()
{
  return 0x65522065676E6152;
}

uint64_t sub_10011E810()
{
  _BYTE *v0;

  if (*v0)
    return 0x757145746F4E7874;
  else
    return 0x526C617571457874;
}

unint64_t _s7CoreP2P17NANMatchingFilterV0D4TypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6000, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_10011E8A0()
{
  unint64_t result;

  result = qword_100408110;
  if (!qword_100408110)
  {
    result = swift_getWitnessTable(byte_100348F64, &type metadata for NANMatchingFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408110);
  }
  return result;
}

unint64_t sub_10011E8E4()
{
  unint64_t result;

  result = qword_100408118;
  if (!qword_100408118)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMatchingFilter.FilterType, &type metadata for NANMatchingFilter.FilterType);
    atomic_store(result, (unint64_t *)&qword_100408118);
  }
  return result;
}

void _s7CoreP2P17NANMatchingFilterV11descriptionSSvg_0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10011E994(uint64_t a1)
{
  unint64_t v1;
  Swift::String v2;
  uint64_t v4;

  v1 = 0xEC00000058522065;
  String.append(_:)(*(Swift::String *)&a1);
  swift_bridgeObjectRelease(0xEC00000058522065);
  v2._countAndFlagsBits = 62;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v4;
}

uint64_t sub_10011EA38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v2 = sub_100012C44(&qword_100408170);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  v8 = sub_10011E8A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANMatchingFilter.CodingKeys, &type metadata for NANMatchingFilter.CodingKeys, v8, v6, v7);
  v17 = 0;
  v9 = sub_10011F158();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for NANMatchingFilter.FilterType, &v17, v2, &type metadata for NANMatchingFilter.FilterType, v9);
  v10 = v18;
  v11 = sub_100012C44(&qword_100408120);
  v15 = 1;
  v12 = sub_10011F19C(&qword_100408180, (uint64_t (*)(void))sub_10007BAC0, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, &v15, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100014430(a1);
  return v10;
}

unint64_t sub_10011EBE0()
{
  unint64_t result;

  result = qword_100408130;
  if (!qword_100408130)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMatchingFilter.FilterType, &type metadata for NANMatchingFilter.FilterType);
    atomic_store(result, (unint64_t *)&qword_100408130);
  }
  return result;
}

unint64_t sub_10011EC28()
{
  unint64_t result;

  result = qword_100408138;
  if (!qword_100408138)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMatchingFilter.RespondCondition, &type metadata for NANMatchingFilter.RespondCondition);
    atomic_store(result, (unint64_t *)&qword_100408138);
  }
  return result;
}

unint64_t sub_10011EC70()
{
  unint64_t result;

  result = qword_100408140;
  if (!qword_100408140)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMatchingFilter, &type metadata for NANMatchingFilter);
    atomic_store(result, (unint64_t *)&qword_100408140);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.CipherSuiteInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANActionFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for NANAttribute.CipherSuiteInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANMatchingFilter()
{
  return &type metadata for NANMatchingFilter;
}

uint64_t storeEnumTagSinglePayload for NANMatchingFilter.FilterType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10011EDBC + 4 * byte_100348B3F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10011EDF0 + 4 * byte_100348B3A[v4]))();
}

uint64_t sub_10011EDF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011EDF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011EE00);
  return result;
}

uint64_t sub_10011EE0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011EE14);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10011EE18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011EE20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANMatchingFilter.FilterType()
{
  return &type metadata for NANMatchingFilter.FilterType;
}

ValueMetadata *type metadata accessor for NANMatchingFilter.RespondCondition()
{
  return &type metadata for NANMatchingFilter.RespondCondition;
}

uint64_t _s7CoreP2P17NANMatchingFilterV16RespondConditionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10011EE9C + 4 * byte_100348B49[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10011EED0 + 4 * byte_100348B44[v4]))();
}

uint64_t sub_10011EED0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011EED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011EEE0);
  return result;
}

uint64_t sub_10011EEEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011EEF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10011EEF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011EF00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANMatchingFilter.CodingKeys()
{
  return &type metadata for NANMatchingFilter.CodingKeys;
}

unint64_t sub_10011EF20()
{
  unint64_t result;

  result = qword_100408148;
  if (!qword_100408148)
  {
    result = swift_getWitnessTable(asc_100348F3C, &type metadata for NANMatchingFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408148);
  }
  return result;
}

unint64_t sub_10011EF68()
{
  unint64_t result;

  result = qword_100408150;
  if (!qword_100408150)
  {
    result = swift_getWitnessTable(byte_100348EAC, &type metadata for NANMatchingFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408150);
  }
  return result;
}

unint64_t sub_10011EFB0()
{
  unint64_t result;

  result = qword_100408158;
  if (!qword_100408158)
  {
    result = swift_getWitnessTable(asc_100348ED4, &type metadata for NANMatchingFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408158);
  }
  return result;
}

uint64_t sub_10011EFF4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100365720)
  {
    swift_bridgeObjectRelease(0x8000000100365720);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100365720, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_10011F0D0()
{
  unint64_t result;

  result = qword_100408160;
  if (!qword_100408160)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMatchingFilter.RespondCondition, &type metadata for NANMatchingFilter.RespondCondition);
    atomic_store(result, (unint64_t *)&qword_100408160);
  }
  return result;
}

unint64_t sub_10011F114()
{
  unint64_t result;

  result = qword_100408168;
  if (!qword_100408168)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMatchingFilter.FilterType, &type metadata for NANMatchingFilter.FilterType);
    atomic_store(result, (unint64_t *)&qword_100408168);
  }
  return result;
}

unint64_t sub_10011F158()
{
  unint64_t result;

  result = qword_100408178;
  if (!qword_100408178)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMatchingFilter.FilterType, &type metadata for NANMatchingFilter.FilterType);
    atomic_store(result, (unint64_t *)&qword_100408178);
  }
  return result;
}

uint64_t sub_10011F19C(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_100013C64(&qword_100408120);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

void Data.load<A>(as:)(uint64_t a1)
{
  uint64_t v1;

  v1 = __chkstk_darwin(a1);
  __chkstk_darwin(v1);
  __asm { BR              X10 }
}

uint64_t Data.colonFormatedString.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = swift_allocObject(&unk_1003E6098, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = swift_allocObject(&unk_1003E60C0, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_10011FA44;
  *(_QWORD *)(v5 + 24) = v4;
  sub_100031FEC(a1, a2);
  sub_100031FEC(a1, a2);
  v6 = sub_100012C44(&qword_100408188);
  v7 = sub_10011FA9C();
  v8 = BidirectionalCollection<>.joined(separator:)(58, 0xE100000000000000, v6, v7);
  sub_10000E614(a1, a2);
  swift_release(v5);
  return v8;
}

uint64_t sub_10011F5BC(char a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100012C44((uint64_t *)&unk_100404F10);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10033A110;
  *(_QWORD *)(v3 + 56) = &type metadata for UInt8;
  *(_QWORD *)(v3 + 64) = &protocol witness table for UInt8;
  *(_BYTE *)(v3 + 32) = a1;
  return String.init(format:_:)(1479684133, 0xE400000000000000, v3);
}

void sub_10011F624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10011F690(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, size_t __n, uint64_t a10, uint64_t a11, uint64_t __src, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v36;
  __int16 v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v36 = v31;
  v37 = v32;
  v38 = BYTE2(v32);
  v39 = BYTE3(v32);
  v40 = BYTE4(v32);
  v41 = BYTE5(v32);
  v33 = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))UnsafeMutableBufferPointer.baseAddress.getter)(v29, v28, v27);
  if (!v33)
  {
    __break(1u);
    JUMPOUT(0x10011F710);
  }
  memcpy(v33, &v36, v30);
  v34 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))UnsafeMutableBufferPointer.baseAddress.getter)(v29, v28, v27);
  if (!v34)
    __break(1u);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v26, v34, v27);
}

uint64_t Data.init(uuid:)(uint64_t a1)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v13 = UUID.uuid.getter(a1);
  v14 = v2;
  v15 = v3;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v10 = sub_1000FADC0((uint64_t)&v13, (uint64_t)&v22);
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  return v10;
}

uint64_t sub_10011FA20()
{
  uint64_t v0;

  sub_10000E614(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011FA44(char a1)
{
  return sub_10011F5BC(a1);
}

uint64_t sub_10011FA4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011FA70@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

unint64_t sub_10011FA9C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_100408190;
  if (!qword_100408190)
  {
    v1 = sub_100013C64(&qword_100408188);
    v2 = sub_10011FB00();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> LazyMapSequence<A, B>, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_100408190);
  }
  return result;
}

unint64_t sub_10011FB00()
{
  unint64_t result;

  result = qword_100408198;
  if (!qword_100408198)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100408198);
  }
  return result;
}

BOOL static NANBeacon.Metadata.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10011FDB0(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4, a5, a6 & 0xFFFFFFFFFFFFLL, a7, a8);
}

uint64_t NANBeacon.Metadata.channel.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  *(_BYTE *)(v1 + 12) = BYTE4(result);
  *(_BYTE *)(v1 + 13) = BYTE5(result);
  return result;
}

BOOL sub_10011FB70(uint64_t a1, uint64_t a2)
{
  return sub_10011FDB0(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

double NANDiscoveryBeaconTransmissionSchedule.hash(into:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3)
{
  double result;

  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain(a3);
  sub_10008E0F8(a1, a3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a3).n128_u64[0];
  return result;
}

uint64_t static NANDiscoveryBeaconTransmissionSchedule.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3)
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a2, a4);
  else
    return 0;
}

Swift::Int NANDiscoveryBeaconTransmissionSchedule.hashValue.getter(Swift::UInt64 a1, uint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain(a2);
  sub_10008E0F8((uint64_t)v5, a2);
  swift_bridgeObjectRelease(a2);
  return Hasher._finalize()();
}

Swift::Int sub_10011FC78()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v2);
  sub_10008E0F8((uint64_t)v4, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

double sub_10011FCE0(uint64_t a1)
{
  Swift::UInt64 *v1;
  uint64_t v3;
  double result;

  v3 = v1[1];
  Hasher._combine(_:)(*v1);
  swift_bridgeObjectRetain(v3);
  sub_10008E0F8(a1, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

Swift::Int sub_10011FD28()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v2);
  sub_10008E0F8((uint64_t)v4, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_10011FD8C(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a2[1]);
  else
    return 0;
}

BOOL sub_10011FDB0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;

  result = 0;
  if (a1 == a5 && (_DWORD)a2 == (_DWORD)a6)
  {
    if (((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a6 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a2))
      {
        case 2:
          result = 0;
          if (BYTE5(a6) == 2)
            goto LABEL_18;
          break;
        case 3:
          result = 0;
          if (BYTE5(a6) == 3)
            goto LABEL_18;
          break;
        case 4:
          result = 0;
          if (BYTE5(a6) == 4)
            goto LABEL_18;
          break;
        case 5:
          result = 0;
          if (BYTE5(a6) == 5)
            goto LABEL_18;
          break;
        case 6:
          result = 0;
          if (BYTE5(a6) == 6)
            goto LABEL_18;
          break;
        default:
          if (BYTE5(a6) - 2 < 5)
            return 0;
          result = 0;
          if (((a2 & 0x10000000000) == 0) != ((a6 >> 40) & 1))
          {
LABEL_18:
            if (a3 == a7)
              result = a4 == a8;
          }
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_10011FEBC()
{
  unint64_t result;

  result = qword_1004081A0[0];
  if (!qword_1004081A0[0])
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANBeacon, &type metadata for NANBeacon);
    atomic_store(result, qword_1004081A0);
  }
  return result;
}

unint64_t sub_10011FF04()
{
  unint64_t result;

  result = qword_10040FAD0;
  if (!qword_10040FAD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDiscoveryBeaconTransmissionSchedule, &type metadata for NANDiscoveryBeaconTransmissionSchedule);
    atomic_store(result, (unint64_t *)&qword_10040FAD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANBeacon()
{
  return &type metadata for NANBeacon;
}

uint64_t getEnumTagSinglePayload for NANBeacon.Metadata(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANBeacon.Metadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANBeacon.Metadata()
{
  return &type metadata for NANBeacon.Metadata;
}

ValueMetadata *type metadata accessor for NANDiscoveryBeaconTransmissionSchedule()
{
  return &type metadata for NANDiscoveryBeaconTransmissionSchedule;
}

uint64_t sub_100120000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 64);
}

uint64_t sub_100120008(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_getAssociatedTypeWitness(319, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16), &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 72);
    return 0;
  }
  return result;
}

uint64_t *sub_100120088(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 <= 7 && *(_QWORD *)(v6 + 64) <= 0x18uLL && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }
  return a1;
}

uint64_t sub_100120120(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 16), &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_100120170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1001201CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100120228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100120284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1001202E0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  if (!a2)
    return 0;
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (a2 <= v7)
    goto LABEL_18;
  v8 = *(_QWORD *)(v6 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((a2 - v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if ((_DWORD)v7)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, AssociatedTypeWitness);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v7 + v12 + 1);
}

void sub_100120424(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 16), &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue)- 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v7 + 64);
  if (a3 <= v8)
  {
    v10 = 0;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = &dword_100000004;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = &_mh_execute_header.magic + 1;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for SplitBitEnum(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SplitBitEnum);
}

uint64_t sub_100120608(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6156776172, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_10012068C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;
  __int128 v23;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 32);
  v18 = *(_OWORD *)(a2 + 16);
  v19 = v6;
  v21[0] = v18;
  v21[1] = v6;
  v22 = v5;
  v20 = *(_OWORD *)(a2 + 56);
  v23 = v20;
  v7 = type metadata accessor for SplitBitEnum.CodingKeys(255, (uint64_t)v21);
  WitnessTable = swift_getWitnessTable(aQ_0, v7);
  v9 = type metadata accessor for KeyedEncodingContainer(0, v7, WitnessTable);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v18 - v11;
  v13 = a1[3];
  v14 = a1[4];
  sub_10003259C(a1, v13);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v13, v14);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v19, v18, &protocol requirements base descriptor for RawRepresentable);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v16, v9, AssociatedTypeWitness, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1001207E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t AssociatedTypeWitness;
  uint64_t v44;
  char *v45;
  uint64_t WitnessTable;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v45 = a7;
  v38 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a2, &protocol requirements base descriptor for RawRepresentable);
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v41 = (uint64_t *)((char *)&v36 - v17);
  v47 = a2;
  v48 = a3;
  v49 = a4;
  v50 = a5;
  v51 = a6;
  v52 = a7;
  v53 = a8;
  v18 = type metadata accessor for SplitBitEnum.CodingKeys(255, (uint64_t)&v47);
  WitnessTable = swift_getWitnessTable(aQ_0, v18);
  v44 = type metadata accessor for KeyedDecodingContainer(0, v18, WitnessTable);
  v39 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin();
  v20 = (char *)&v36 - v19;
  v47 = a2;
  v48 = a3;
  v49 = a4;
  v50 = a5;
  v42 = a6;
  v51 = a6;
  v52 = v45;
  v53 = a8;
  v21 = type metadata accessor for SplitBitEnum(0, (uint64_t)&v47);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin();
  v24 = (char *)&v36 - v23;
  v25 = a1[3];
  v26 = a1[4];
  sub_10003259C(a1, v25);
  v45 = v20;
  v27 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v18, v18, WitnessTable, v25, v26);
  if (!v27)
  {
    v37 = v24;
    WitnessTable = v22;
    v54 = v21;
    v29 = v39;
    v30 = v40;
    v31 = v41;
    v32 = AssociatedTypeWitness;
    v33 = v45;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, AssociatedTypeWitness, v28, v44, AssociatedTypeWitness, v42);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v44);
    v34 = v37;
    (*(void (**)(char *, _QWORD *, uint64_t))(v30 + 32))(v37, v31, v32);
    (*(void (**)(uint64_t, char *, uint64_t))(WitnessTable + 32))(v38, v34, v54);
  }
  return sub_100014430(a1);
}

uint64_t sub_100120A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
}

uint64_t sub_100120A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100120608(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100120AE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static NANBitmap.Band.tvWhiteSpaces.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100120B20(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aQ_0, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100120B54(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aQ_0, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100120B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100120A44(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a3);
}

uint64_t sub_100120B98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001207E8(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), a3);
}

uint64_t sub_100120BC0(_QWORD *a1, uint64_t a2)
{
  return sub_10012068C(a1, a2);
}

uint64_t sub_100120BD4(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aY_9, a1);
  return OptionSet<>.init()(a1, WitnessTable, *(_QWORD *)(a1 + 64));
}

uint64_t sub_100120C1C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aY_9);
  return OptionSet<>.contains(_:)(a1, a2, WitnessTable);
}

uint64_t sub_100120C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100120CD0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))&OptionSet.union(_:));
}

uint64_t sub_100120C68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aY_9);
  OptionSet.intersection(_:)(a1, a2, WitnessTable);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v2, a2);
}

uint64_t sub_100120CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100120CD0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))&OptionSet.symmetricDifference(_:));
}

uint64_t sub_100120CD0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t WitnessTable;
  void (*v10)(uint64_t, uint64_t);

  WitnessTable = swift_getWitnessTable(aY_9);
  a4(a1, a2, WitnessTable);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8);
  v10(v4, a2);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(a1, a2);
}

uint64_t sub_100120D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;
  char v7;

  WitnessTable = swift_getWitnessTable(aY_9, a3);
  v7 = OptionSet<>.insert(_:)(a1, a2, a3, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  return v7 & 1;
}

uint64_t sub_100120DC4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aY_9);
  return OptionSet<>.remove(_:)(a1, a2, WitnessTable);
}

uint64_t sub_100120E0C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aY_9);
  OptionSet<>.update(with:)(a1, a2, WitnessTable);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t sub_100120E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100120EC4(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))&OptionSet<>.formUnion(_:));
}

uint64_t sub_100120E74(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aY_9);
  return OptionSet<>.formIntersection(_:)(a1, a2, WitnessTable, *(_QWORD *)(a2 + 64));
}

uint64_t sub_100120EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100120EC4(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))&OptionSet<>.formSymmetricDifference(_:));
}

uint64_t sub_100120EC4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aY_9);
  a4(a1, a2, WitnessTable, *(_QWORD *)(a2 + 64));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t sub_100120F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  SetAlgebra.subtracting(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v2, a2);
}

uint64_t sub_100120F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100120A44(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 0, 1, a2);
}

uint64_t sub_100120FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16), &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v2, AssociatedTypeWitness);
}

uint64_t sub_100120FF8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10012102C(a1, a2, a3[2], a4, a3[4], a6, a7, a8, a3[8]) & 1;
}

uint64_t sub_10012102C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, AssociatedTypeWitness, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a9 + 8) + 16) + 8)) & 1;
}

uint64_t sub_10012109C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(byte_1003491D0);
  return SetAlgebra<>.init(arrayLiteral:)(a1, a2, WitnessTable);
}

uint64_t sub_1001210E4(uint64_t a1)
{
  return swift_getWitnessTable(byte_100349170, a1);
}

uint64_t sub_1001210F4(uint64_t a1)
{
  return swift_getWitnessTable(byte_100349140, a1);
}

uint64_t sub_100121104(uint64_t a1)
{
  return swift_getWitnessTable(aI, a1);
}

uint64_t sub_100121114(uint64_t a1)
{
  return swift_getWitnessTable(byte_1003491D0, a1);
}

uint64_t sub_100121124(uint64_t a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2[4], a2[2], &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  return dispatch thunk of Hashable.hash(into:)(a1, AssociatedTypeWitness, *(_QWORD *)(*(_QWORD *)(a2[8] + 8) + 16));
}

uint64_t sub_100121180(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aI, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 16));
}

uint64_t sub_1001211D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aI);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 8) + 16));
}

uint64_t type metadata accessor for SplitBitEnum.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SplitBitEnum.CodingKeys);
}

uint64_t sub_100121234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_10012123C(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10012127C + 4 * byte_100349116[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10012129C + 4 * byte_10034911B[v4]))();
}

_BYTE *sub_10012127C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10012129C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001212A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001212AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001212B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001212BC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1001212C8(uint64_t a1)
{
  return swift_getWitnessTable(asc_100349410, a1);
}

uint64_t sub_1001212D8(uint64_t a1)
{
  return swift_getWitnessTable(byte_100349380, a1);
}

uint64_t sub_1001212E8(uint64_t a1)
{
  return swift_getWitnessTable(byte_1003493A8, a1);
}

void sub_1001212F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;

  v22 = a2;
  v3 = *(_QWORD *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  __chkstk_darwin();
  v5 = (unsigned __int8 *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v19 - v6;
  v8 = *(_QWORD *)(a1 + 56);
  v20 = a1 + 56;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v21 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v21)
      goto LABEL_23;
    v17 = *(_QWORD *)(v20 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v21)
        goto LABEL_23;
      v17 = *(_QWORD *)(v20 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v21)
          goto LABEL_23;
        v17 = *(_QWORD *)(v20 + 8 * v12);
        if (!v17)
        {
          v12 = v16 + 3;
          if (v16 + 3 >= v21)
            goto LABEL_23;
          v17 = *(_QWORD *)(v20 + 8 * v12);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v11 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_5:
    sub_1000637E0(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * v14, (uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
    sub_100033AC0((uint64_t)v7, (uint64_t)v5, type metadata accessor for AWDLPeer.AdvertisedService);
    v15 = *v5;
    type metadata accessor for AWDLPeer(0);
    sub_100149F90(v15);
    sub_100063824((uint64_t)v5, type metadata accessor for AWDLPeer.AdvertisedService);
  }
  v18 = v16 + 4;
  if (v18 >= v21)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v20 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v21)
      goto LABEL_23;
    v17 = *(_QWORD *)(v20 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t AWDLPeer.averageRSSIAcrossBands.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for AWDLPeer(0);
  v3 = __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0 + *(int *)(v3 + 96);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned __int8 *)(v6 + 8);
  sub_1000637E0(v1, (uint64_t)v5, v9);
  if (v8 == 1)
    v7 = *(_QWORD *)&v5[*(int *)(v2 + 92)];
  sub_100063824((uint64_t)v5, type metadata accessor for AWDLPeer);
  return v7;
}

uint64_t type metadata accessor for AWDLPeer(uint64_t a1)
{
  return sub_10000D69C(a1, (uint64_t *)&unk_100408328, (uint64_t)&nominal type descriptor for AWDLPeer);
}

uint64_t AWDLPeer.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

unint64_t AWDLPeer.macAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for AWDLPeer(0);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 20)) | ((unint64_t)*(unsigned int *)(v0 + *(int *)(v1 + 20) + 2) << 16);
}

uint64_t AWDLPeer.macAddress.setter(unint64_t a1)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  _BYTE *v9;

  v2 = a1;
  v3 = a1 >> 8;
  v4 = a1 >> 16;
  v5 = a1 >> 24;
  v6 = HIDWORD(a1);
  v7 = a1 >> 40;
  result = type metadata accessor for AWDLPeer(0);
  v9 = (_BYTE *)(v1 + *(int *)(result + 20));
  *v9 = v2;
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v9[4] = v6;
  v9[5] = v7;
  return result;
}

uint64_t (*AWDLPeer.macAddress.modify())(_QWORD)
{
  type metadata accessor for AWDLPeer(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.lastUpdated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0) + 24);
  v4 = type metadata accessor for DispatchTime(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AWDLPeer.numberOfActionFrames.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 28));
}

uint64_t AWDLPeer.numberOfActionFrames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLPeer(0);
  *(_QWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*AWDLPeer.numberOfActionFrames.modify())(_QWORD)
{
  type metadata accessor for AWDLPeer(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.deprecatedElectionParameter.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 32));
}

__n128 AWDLPeer.electionParameter.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __int128 v5;
  __n128 result;

  v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0) + 36);
  v4 = *(_BYTE *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v4;
  return result;
}

uint64_t AWDLPeer.serviceParameter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 40);
  v2 = *(_QWORD *)v1;
  sub_1001218A8(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  return v2;
}

uint64_t sub_1001218A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a4 >> 60 != 15)
    return sub_100031FEC(a3, a4);
  return result;
}

uint64_t AWDLPeer.lastProcessedServiceUpdateIndicator.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for AWDLPeer(0);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 44)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 44) + 2) << 16);
}

uint64_t AWDLPeer.synchronizationParameter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AWDLPeer(0);
  return sub_100033B48(v1 + *(int *)(v3 + 48), a1, &qword_1004082A8);
}

uint64_t AWDLPeer.arpa.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 52));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[2]);
  return v2;
}

uint64_t AWDLPeer.dataPathStateParameter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AWDLPeer(0);
  return sub_100033B48(v1 + *(int *)(v3 + 56), a1, (uint64_t *)&unk_100410250);
}

__n128 AWDLPeer.nanSynchronization.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __n128 result;
  __int128 v7;

  v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0) + 60);
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_BYTE *)(v3 + 40);
  result = *(__n128 *)v3;
  v7 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v5;
  return result;
}

uint64_t AWDLPeer.version.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for AWDLPeer(0);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 64)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 64) + 2) << 16);
}

__n128 AWDLPeer.realtimeGroup.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v3 = v1 + *(int *)(type metadata accessor for AWDLPeer(0) + 68);
  v4 = *(_QWORD *)(v3 + 32);
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = v4;
  return result;
}

uint64_t AWDLPeer.preferredChannels.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 72));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t AWDLPeer.advertisedServices.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for AWDLPeer(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 80)));
}

uint64_t AWDLPeer.countryCode.getter()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v6;
  unsigned int v7;
  uint64_t v9;

  sub_100012C44((uint64_t *)&unk_100410250);
  __chkstk_darwin();
  v2 = (unsigned __int16 *)((char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for AWDLPeer(0);
  sub_100033B48(v0 + *(int *)(v3 + 56), (uint64_t)v2, (uint64_t *)&unk_100410250);
  v4 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4) == 1)
  {
    sub_100033A84((uint64_t)v2, (uint64_t *)&unk_100410250);
  }
  else
  {
    v5 = *v2;
    v6 = *((_BYTE *)v2 + 2);
    sub_100063824((uint64_t)v2, type metadata accessor for AWDLActionFrame.DataPathState);
    if ((v6 & 1) == 0)
    {
      v7 = v5 >> 8;
      return v5 | (v7 << 8);
    }
  }
  if (qword_100403F88 != -1)
    swift_once(&qword_100403F88, sub_10012D674);
  LOBYTE(v5) = static CountryCode.unknown;
  v7 = HIBYTE(static CountryCode.unknown);
  return v5 | (v7 << 8);
}

uint64_t AWDLPeer.infrastructureChannel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = v0;
  sub_100012C44((uint64_t *)&unk_100410250);
  __chkstk_darwin();
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AWDLPeer(0);
  v5 = __chkstk_darwin();
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (unint64_t *)(v1 + *(int *)(v5 + 72));
  v9 = *v8;
  v10 = v8[1];
  sub_1000637E0(v1, (uint64_t)v7, v11);
  if (v10)
  {
    v12 = type metadata accessor for AWDLPeer;
    v13 = (uint64_t)v7;
LABEL_6:
    sub_100063824(v13, v12);
    return v9 & 0xFFFFFFFFFFFFLL;
  }
  sub_100033B48((uint64_t)&v7[*(int *)(v4 + 56)], (uint64_t)v3, (uint64_t *)&unk_100410250);
  sub_100063824((uint64_t)v7, type metadata accessor for AWDLPeer);
  v14 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v3, 1, v14) != 1)
  {
    v9 = *((unsigned int *)v3 + 5) | ((unint64_t)*((unsigned __int16 *)v3 + 12) << 32);
    v12 = type metadata accessor for AWDLActionFrame.DataPathState;
    v13 = (uint64_t)v3;
    goto LABEL_6;
  }
  sub_100033A84((uint64_t)v3, (uint64_t *)&unk_100410250);
  v9 = 0x300000000;
  return v9 & 0xFFFFFFFFFFFFLL;
}

uint64_t AWDLPeer.supportsSimultaneousDualBand.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  sub_100012C44((uint64_t *)&unk_100410250);
  __chkstk_darwin();
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AWDLPeer(0);
  sub_100033B48(v0 + *(int *)(v3 + 56), (uint64_t)v2, (uint64_t *)&unk_100410250);
  v4 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4) == 1)
  {
    sub_100033A84((uint64_t)v2, (uint64_t *)&unk_100410250);
    return 0;
  }
  else
  {
    v5 = v2[84];
    sub_100063824((uint64_t)v2, type metadata accessor for AWDLActionFrame.DataPathState);
  }
  return v5;
}

uint64_t AWDLPeer.supportsDFSProxy.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  sub_100012C44((uint64_t *)&unk_100410250);
  __chkstk_darwin();
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AWDLPeer(0);
  sub_100033B48(v0 + *(int *)(v3 + 56), (uint64_t)v2, (uint64_t *)&unk_100410250);
  v4 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4) == 1)
  {
    sub_100033A84((uint64_t)v2, (uint64_t *)&unk_100410250);
    return 0;
  }
  else
  {
    v5 = v2[85];
    sub_100063824((uint64_t)v2, type metadata accessor for AWDLActionFrame.DataPathState);
  }
  return v5;
}

unint64_t AWDLPeer.syncContention.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 84));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

unint64_t AWDLPeer.mactime.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 88));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t AWDLPeer.AdvertisedService.service.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  v6 = *(_BYTE *)(v1 + 41);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 33) = v6;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

__n128 AWDLPeer.AdvertisedService.service.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v4;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v4;
  *(_WORD *)(v1 + 40) = *(_WORD *)(a1 + 32);
  return result;
}

uint64_t AWDLPeer.AdvertisedService.advertisementInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100033B48(v1 + 48, a1, &qword_1004082B0);
}

uint64_t AWDLPeer.AdvertisedService.advertisementInfo.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10006298C(a1, v1 + 48, &qword_1004082B0);
}

uint64_t (*AWDLPeer.AdvertisedService.advertisementInfo.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.AdvertisedService.datapathInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  return sub_1000637E0(v1 + *(int *)(v3 + 28), a1, type metadata accessor for DNSRecords.SRV);
}

uint64_t AWDLPeer.AdvertisedService.datapathInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AWDLPeer.AdvertisedService(0) + 28);
  return sub_100124CD4(a1, v3);
}

uint64_t (*AWDLPeer.AdvertisedService.datapathInfo.modify())(_QWORD)
{
  type metadata accessor for AWDLPeer.AdvertisedService(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.AdvertisedService.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  Swift::UInt8 v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(unsigned __int8 *)(v1 + 40);
  v6 = *(_BYTE *)(v1 + 41);
  v7 = String.lowercased()();
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v7._countAndFlagsBits, v7._object);
  swift_bridgeObjectRelease(v7._object);
  v8 = String.lowercased()();
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v8._object);
  if (v5)
    v9 = 7365749;
  else
    v9 = 7365492;
  String.hash(into:)(a1, v9, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRelease(v3);
  return swift_bridgeObjectRelease_n(v4, 2);
}

BOOL static AWDLPeer.AdvertisedService.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  unint64_t v13;
  _QWORD v16[4];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 41);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a2 + 40);
  v12 = *(unsigned __int8 *)(a2 + 41);
  v16[2] = *(_QWORD *)(a1 + 8);
  v16[3] = v2;
  v16[0] = v7;
  v16[1] = v8;
  v13 = sub_10001C920();
  return !StringProtocol.caseInsensitiveCompare<A>(_:)(v16, &type metadata for String, &type metadata for String, v13, v13)&& sub_100106584(v3, v4, v5 | (v6 << 8), v9, v10, v11 | (v12 << 8));
}

Swift::Int AWDLPeer.AdvertisedService.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  AWDLPeer.AdvertisedService.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001222BC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  AWDLPeer.AdvertisedService.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t AWDLPeer.reachability.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 104));
}

uint64_t AWDLPeer.peerPresencePosted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 108));
}

uint64_t AWDLPeer.peerPresencePosted.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLPeer(0);
  *(_BYTE *)(v1 + *(int *)(result + 108)) = a1;
  return result;
}

uint64_t (*AWDLPeer.peerPresencePosted.modify())(_QWORD)
{
  type metadata accessor for AWDLPeer(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.needsToRecoverTrafficRegistrations.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 112));
}

uint64_t AWDLPeer.needsToRecoverTrafficRegistrations.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLPeer(0);
  *(_BYTE *)(v1 + *(int *)(result + 112)) = a1;
  return result;
}

uint64_t (*AWDLPeer.needsToRecoverTrafficRegistrations.modify())(_QWORD)
{
  type metadata accessor for AWDLPeer(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.needsToRecoverResponderTrafficRegistrations.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 116));
}

uint64_t AWDLPeer.needsToRecoverResponderTrafficRegistrations.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLPeer(0);
  *(_BYTE *)(v1 + *(int *)(result + 116)) = a1;
  return result;
}

uint64_t (*AWDLPeer.needsToRecoverResponderTrafficRegistrations.modify())(_QWORD)
{
  type metadata accessor for AWDLPeer(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLPeer.init(macAddress:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE006C6477612E65, 1919247728, 0xE400000000000000);
  v8 = (int *)type metadata accessor for AWDLPeer(0);
  v9 = v8[6];
  if (qword_100403F80 != -1)
    swift_once(&qword_100403F80, sub_10012AF3C);
  v10 = a2 + v9;
  v36 = HIDWORD(a1);
  v37 = a1 >> 40;
  v34 = a1 >> 16;
  v35 = a1 >> 24;
  v33 = a1 >> 8;
  (*(void (**)(void))(*(_QWORD *)algn_1004104A8 + 8))();
  *(_QWORD *)(a2 + v8[7]) = 0;
  v11 = a2 + v8[8];
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_WORD *)(v11 + 24) = 256;
  v12 = a2 + v8[9];
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_BYTE *)(v12 + 48) = 1;
  v13 = (_QWORD *)(a2 + v8[10]);
  *v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = 0xF000000000000000;
  v14 = a2 + v8[11];
  *(_WORD *)v14 = 0;
  *(_BYTE *)(v14 + 2) = 1;
  v15 = (_OWORD *)(a2 + v8[12]);
  v15[1] = 0u;
  v15[2] = 0u;
  *v15 = 0u;
  v16 = (_QWORD *)(a2 + v8[13]);
  *v16 = 0;
  v16[1] = 0;
  v16[2] = 0;
  v17 = a2 + v8[14];
  v18 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = a2 + v8[15];
  *(_QWORD *)(v19 + 32) = 0;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_BYTE *)(v19 + 40) = 1;
  v20 = a2 + v8[16];
  *(_WORD *)v20 = 0;
  *(_BYTE *)(v20 + 2) = 1;
  v21 = a2 + v8[17];
  *(_OWORD *)v21 = xmmword_100337840;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  v22 = (_QWORD *)(a2 + v8[18]);
  *v22 = 0;
  v22[1] = 0;
  v23 = (_QWORD *)(a2 + v8[19]);
  v24 = sub_100017198((uint64_t)&off_1003D7080);
  *v23 = &_swiftEmptySetSingleton;
  v23[1] = v24;
  *(_QWORD *)(a2 + v8[20]) = &_swiftEmptySetSingleton;
  v25 = a2 + v8[21];
  *(_DWORD *)v25 = 0;
  *(_BYTE *)(v25 + 4) = 1;
  v26 = a2 + v8[22];
  *(_DWORD *)v26 = 0;
  *(_BYTE *)(v26 + 4) = 1;
  v27 = a2 + v8[23];
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 1;
  v28 = a2 + v8[24];
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = 1;
  v29 = a2 + v8[25];
  *(_QWORD *)v29 = 0;
  *(_BYTE *)(v29 + 8) = 1;
  *(_BYTE *)(a2 + v8[26]) = 0;
  *(_BYTE *)(a2 + v8[27]) = 0;
  *(_BYTE *)(a2 + v8[28]) = 0;
  *(_BYTE *)(a2 + v8[29]) = 0;
  v30 = (_BYTE *)(a2 + v8[5]);
  *v30 = a1;
  v30[1] = v33;
  v30[2] = v34;
  v30[3] = v35;
  v30[4] = v36;
  v30[5] = v37;
  (*(void (**)(void))(*(_QWORD *)algn_1004104A8 + 8))();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(v10, v7, v4);
}

uint64_t sub_10012278C(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int EnumCaseMultiPayload;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  _BOOL8 v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  _BOOL8 v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t isUniquelyReferenced_nonNull_native;
  int v144;
  unint64_t v145;
  uint64_t v146;
  _BOOL8 v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  char v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unsigned __int16 v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  char v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  void (*v232)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  char *v283;
  __int16 v284;
  char v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  __int128 *v306;
  __int128 *v307;
  __int128 *v308;
  _QWORD *v309;
  uint64_t v310;
  _QWORD *v311;
  double (*v312)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v313;
  double (*v314)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v315;
  double (*v316)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v317;
  double (*v318)@<D0>(uint64_t@<X8>);
  uint64_t v319;
  double (*v320)@<D0>(uint64_t@<X8>);
  uint64_t v321;
  double (*v322)@<D0>(uint64_t@<X8>);
  uint64_t v323;
  _QWORD *v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  __int128 v350;
  char *v351;
  uint64_t v352;
  unsigned __int16 *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int *v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  __int128 v361;
  __int128 v362;
  __int16 v363;
  __int128 v364;
  __int128 v365;
  __int16 v366;
  _OWORD v367[3];
  uint64_t v368;
  __int128 v369;
  __int128 v370;
  __int16 v371;
  __int128 v372;
  __int128 v373;
  __int16 v374;
  __int128 v375;
  __int128 v376;
  __int16 v377;
  __int128 v378;
  __int16 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int16 v383;

  LODWORD(v3) = a2;
  v310 = 0;
  sub_100012C44((uint64_t *)&unk_10040EAC0);
  __chkstk_darwin();
  v330 = (char *)&v298 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v324 = (uint64_t *)((char *)&v298 - v6);
  __chkstk_darwin();
  v329 = (uint64_t)&v298 - v7;
  __chkstk_darwin();
  v352 = (uint64_t)&v298 - v8;
  v346 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  v331 = *(_QWORD *)(v346 - 8);
  __chkstk_darwin();
  v328 = (uint64_t)&v298 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v327 = (uint64_t)&v298 - v10;
  __chkstk_darwin();
  v351 = (char *)&v298 - v11;
  sub_100012C44(&qword_100408460);
  __chkstk_darwin();
  v13 = (char *)&v298 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v343 = (uint64_t)&v298 - v14;
  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v338 = (uint64_t)&v298 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v333 = (unint64_t)&v298 - v16;
  v17 = type metadata accessor for DNSRecords.SRV(0);
  v18 = *(_QWORD *)(v17 - 8);
  v341 = v17;
  v342 = v18;
  __chkstk_darwin();
  v339 = (uint64_t)&v298 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v309 = (uint64_t *)((char *)&v298 - v20);
  v311 = v21;
  __chkstk_darwin();
  v326 = (uint64_t)&v298 - v22;
  v340 = sub_100012C44(&qword_100408468);
  v332 = *(_QWORD *)(v340 - 8);
  __chkstk_darwin();
  v337 = (uint64_t *)((char *)&v298 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v325 = (uint64_t *)((char *)&v298 - v24);
  v334 = type metadata accessor for AWDLActionFrame.ServiceResponse(0);
  __chkstk_darwin();
  v335 = (uint64_t *)((char *)&v298 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v349 = (uint64_t)&v298 - v26;
  v27 = type metadata accessor for AWDLActionFrame.AWDLAttribute(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin();
  v30 = (unsigned __int8 *)&v298 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v357 = (int *)type metadata accessor for AWDLPeer(0);
  v31 = v357[11];
  v359 = v2;
  v32 = (unsigned __int16 *)(v2 + v31);
  v33 = a1;
  v34 = *(unsigned __int8 *)(v2 + v31 + 2);
  v35 = *(_QWORD *)(a1 + 16);
  v345 = v13;
  v353 = v32;
  if (v35)
  {
    v36 = v33 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    v307 = &v376;
    v308 = &v370;
    v306 = &v362;
    v347 = v33;
    swift_bridgeObjectRetain(v33);
    v314 = 0;
    v315 = 0;
    v320 = 0;
    v321 = 0;
    v312 = 0;
    v313 = 0;
    v318 = 0;
    v319 = 0;
    v316 = 0;
    v317 = 0;
    v322 = 0;
    v323 = 0;
    v348 = 0;
    LODWORD(v336) = 0;
    v37 = 0;
    v38 = *(_QWORD *)(v28 + 72);
    v344 = _swiftEmptyDictionarySingleton;
    LODWORD(v354) = v3;
    v355 = v36;
    v358 = v38;
    while (1)
    {
      LODWORD(v356) = v34;
      v39 = v35;
      if (v37 >= v35)
      {
LABEL_155:
        __break(1u);
        goto LABEL_156;
      }
      while (2)
      {
        v42 = v36 + v38 * v37++;
        sub_1000637E0(v42, (uint64_t)v30, type metadata accessor for AWDLActionFrame.AWDLAttribute);
        switch(swift_getEnumCaseMultiPayload(v30, v27))
        {
          case 1u:
LABEL_13:
            v43 = v349;
            sub_100033AC0((uint64_t)v30, v349, type metadata accessor for AWDLActionFrame.ServiceResponse);
            if ((v356 & 1) == 0)
            {
              sub_100063824(v43, type metadata accessor for AWDLActionFrame.ServiceResponse);
              if (v37 == v35)
              {
                swift_bridgeObjectRelease(v347);
                if ((v348 & 1) != 0)
                {
                  v195 = v344;
                }
                else
                {
                  v195 = v344;
                  if ((v3 & 1) != 0)
                  {
                    v295 = v359 + v357[17];
                    *(_OWORD *)v295 = xmmword_100337840;
                    *(_QWORD *)(v295 + 24) = 0;
                    *(_QWORD *)(v295 + 32) = 0;
                    *(_QWORD *)(v295 + 16) = 0;
                  }
                }
                goto LABEL_153;
              }
              LODWORD(v356) = 0;
LABEL_8:
              if (v37 <= v35)
                v39 = v35;
              else
                v39 = v37;
              if (v37 >= v35)
                goto LABEL_155;
              continue;
            }
            v94 = v43;
            v95 = (uint64_t)v335;
            sub_1000637E0(v94, (uint64_t)v335, type metadata accessor for AWDLActionFrame.ServiceResponse);
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v95, v334);
            if (EnumCaseMultiPayload)
            {
              if (EnumCaseMultiPayload == 1)
              {
                v97 = (uint64_t)v335;
                v98 = *((_OWORD *)v335 + 1);
                v367[0] = *(_OWORD *)v335;
                v367[1] = v98;
                v367[2] = *((_OWORD *)v335 + 2);
                v99 = v335[6];
                v336 = v335[5];
                v368 = v99;
                v100 = *v335;
                v301 = v99;
                v302 = v100;
                v101 = v335[2];
                v303 = v335[1];
                v304 = v101;
                v305 = v335[3];
                v300 = *((unsigned __int8 *)v335 + 32);
                v102 = *((unsigned __int8 *)v335 + 33);
                v377 = *((_WORD *)v335 + 16);
                v375 = v367[0];
                v376 = v98;
                v103 = *((_OWORD *)v335 + 1);
                v364 = *(_OWORD *)v335;
                v365 = v103;
                v366 = *((_WORD *)v335 + 16);
                v380 = v364;
                v378 = *v307;
                v379 = *((_WORD *)v307 + 8);
                v104 = swift_allocObject(&unk_1003E65B0, 72, 7);
                v105 = *(_OWORD *)(v97 + 16);
                *(_OWORD *)(v104 + 16) = *(_OWORD *)v97;
                *(_OWORD *)(v104 + 32) = v105;
                *(_OWORD *)(v104 + 48) = *(_OWORD *)(v97 + 32);
                *(_QWORD *)(v104 + 64) = *(_QWORD *)(v97 + 48);
                sub_100031ECC((uint64_t)&v380);
                sub_100031ECC((uint64_t)&v378);
                sub_1000324C0(v367);
                sub_100012318((uint64_t)v312, v313);
                v106 = swift_allocObject(&unk_1003E65D8, 32, 7);
                *(_QWORD *)(v106 + 16) = sub_100127FC8;
                *(_QWORD *)(v106 + 24) = v104;
                v356 = v106;
                sub_1000324C0(v367);
                sub_100012318((uint64_t)v318, v319);
                v107 = v344;
                LODWORD(v350) = swift_isUniquelyReferenced_nonNull_native(v344);
                v360 = v107;
                v109 = sub_10002D93C((uint64_t)&v364);
                v110 = v107[2];
                v111 = (v108 & 1) == 0;
                v112 = v110 + v111;
                if (!__OFADD__(v110, v111))
                {
                  v113 = v108;
                  v319 = v102;
                  v114 = v107[3];
                  v299 = v104;
                  if (v114 < v112)
                  {
                    sub_1001436AC(v112, v350);
                    v115 = sub_10002D93C((uint64_t)&v364);
                    if ((v113 & 1) == (v116 & 1))
                    {
                      v117 = v113;
                      v3 = v115;
                      goto LABEL_62;
                    }
LABEL_167:
                    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DNSRecords.PTR);
                    __break(1u);
                    JUMPOUT(0x100124448);
                  }
                  v117 = v108;
                  v3 = v109;
                  if ((v350 & 1) == 0)
                    sub_100148044();
LABEL_62:
                  v153 = v360;
                  swift_bridgeObjectRelease(0x8000000000000000);
                  swift_bridgeObjectRetain(v153);
                  if ((v117 & 1) == 0)
                  {
                    v154 = (uint64_t)v325;
                    sub_100124598(*(void (**)(__int128 *__return_ptr, uint64_t))(v356 + 16), (uint64_t)v325);
                    v153[(v3 >> 6) + 8] |= 1 << v3;
                    v155 = v153[6] + 40 * v3;
                    v156 = v365;
                    *(_OWORD *)v155 = v364;
                    *(_OWORD *)(v155 + 16) = v156;
                    *(_WORD *)(v155 + 32) = v366;
                    sub_100063EB8(v154, v153[7] + *(_QWORD *)(v332 + 72) * v3, &qword_100408468);
                    v157 = v153[2];
                    v158 = __OFADD__(v157, 1);
                    v159 = v157 + 1;
                    if (!v158)
                    {
                      v153[2] = v159;
                      sub_100031ECC((uint64_t)&v380);
                      sub_100031ECC((uint64_t)&v378);
                      goto LABEL_65;
                    }
LABEL_165:
                    __break(1u);
LABEL_166:
                    __break(1u);
                    goto LABEL_167;
                  }
LABEL_65:
                  v160 = v300 | (v319 << 8);
                  v161 = v153[7];
                  v344 = v153;
                  swift_bridgeObjectRelease(v153);
                  v162 = (_QWORD *)(v161 + *(_QWORD *)(v332 + 72) * v3);
                  v163 = v162[5];
                  v164 = v162[6];
                  v165 = v162[7];
                  v166 = v162[8];
                  v167 = v162[9];
                  v168 = v162[10];
                  v169 = v162[11];
                  v170 = v303;
                  v162[5] = v302;
                  v162[6] = v170;
                  v171 = v305;
                  v162[7] = v304;
                  v162[8] = v171;
                  v172 = v336;
                  v162[9] = v160;
                  v162[10] = v172;
                  v162[11] = v301;
                  sub_100031E0C(v163, v164, v165, v166, v167, v168, v169);
                  sub_10003250C(v367);
                  sub_100031EF4((uint64_t)&v380);
                  sub_100031EF4((uint64_t)&v378);
                  v312 = sub_100127FC8;
                  v313 = v299;
                  v318 = sub_100128040;
                  v319 = v356;
                  LOBYTE(v3) = v354;
                  v38 = v358;
                  goto LABEL_79;
                }
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
                goto LABEL_165;
              }
              v134 = v326;
              sub_100033AC0((uint64_t)v335, v326, type metadata accessor for DNSRecords.SRV);
              v371 = *(_WORD *)(v134 + 32);
              v135 = *(_OWORD *)(v134 + 16);
              v369 = *(_OWORD *)v134;
              v370 = v135;
              v372 = v369;
              v136 = (uint64_t)v309;
              v373 = *v308;
              v374 = *((_WORD *)v308 + 8);
              sub_1000637E0(v134, (uint64_t)v309, type metadata accessor for DNSRecords.SRV);
              v137 = *(unsigned __int8 *)(v342 + 80);
              v138 = (v137 + 16) & ~v137;
              v139 = swift_allocObject(&unk_1003E6560, (char *)v311 + v138, v137 | 7);
              sub_100033AC0(v136, v139 + v138, type metadata accessor for DNSRecords.SRV);
              sub_100031ECC((uint64_t)&v372);
              sub_100031ECC((uint64_t)&v373);
              sub_100012318((uint64_t)v316, v317);
              v140 = v333;
              sub_1000637E0(v134, v333, type metadata accessor for DNSRecords.SRV);
              (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v342 + 56))(v140, 0, 1, v341);
              v141 = swift_allocObject(&unk_1003E6588, 32, 7);
              *(_QWORD *)(v141 + 16) = sub_100127F30;
              *(_QWORD *)(v141 + 24) = v139;
              v336 = v139;
              v356 = v141;
              sub_100012318((uint64_t)v322, v323);
              v142 = v344;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v344);
              v360 = v142;
              v145 = sub_10002D93C((uint64_t)&v369);
              v146 = v142[2];
              v147 = (v144 & 1) == 0;
              v148 = v146 + v147;
              if (__OFADD__(v146, v147))
                goto LABEL_162;
              v149 = v144;
              v150 = v142[3];
              LODWORD(v323) = v144;
              if (v150 >= v148)
              {
                v36 = v355;
                v185 = isUniquelyReferenced_nonNull_native;
                v38 = v358;
                *(_QWORD *)&v350 = v145;
                if ((v185 & 1) == 0)
                  sub_100148044();
              }
              else
              {
                sub_1001436AC(v148, isUniquelyReferenced_nonNull_native);
                v151 = sub_10002D93C((uint64_t)&v369);
                v36 = v355;
                v38 = v358;
                if ((v149 & 1) != (v152 & 1))
                  goto LABEL_167;
                *(_QWORD *)&v350 = v151;
              }
              v186 = v360;
              swift_bridgeObjectRelease(0x8000000000000000);
              swift_bridgeObjectRetain(v186);
              if ((v323 & 1) == 0)
              {
                v187 = (uint64_t)v325;
                sub_100124598(*(void (**)(__int128 *__return_ptr, uint64_t))(v356 + 16), (uint64_t)v325);
                v188 = v350;
                v186[((unint64_t)v350 >> 6) + 8] |= 1 << v350;
                v189 = v186[6] + 40 * v188;
                v190 = v370;
                *(_OWORD *)v189 = v369;
                *(_OWORD *)(v189 + 16) = v190;
                *(_WORD *)(v189 + 32) = v371;
                sub_100063EB8(v187, v186[7] + *(_QWORD *)(v332 + 72) * v188, &qword_100408468);
                v191 = v186[2];
                v158 = __OFADD__(v191, 1);
                v192 = v191 + 1;
                if (v158)
                  goto LABEL_164;
                v186[2] = v192;
                sub_100031ECC((uint64_t)&v372);
                sub_100031ECC((uint64_t)&v373);
              }
              v193 = v186[7];
              v344 = v186;
              swift_bridgeObjectRelease(v186);
              sub_10006298C(v333, v193 + *(_QWORD *)(v332 + 72) * v350 + *(int *)(v340 + 64), &qword_100404B80);
              sub_100031EF4((uint64_t)&v372);
              sub_100031EF4((uint64_t)&v373);
              sub_100063824(v326, type metadata accessor for DNSRecords.SRV);
              v316 = sub_100127F30;
              v317 = v336;
              v322 = sub_100127F8C;
              v323 = v356;
              goto LABEL_79;
            }
            v118 = (uint64_t)v335;
            v363 = *((_WORD *)v335 + 16);
            v119 = *((_OWORD *)v335 + 1);
            v361 = *(_OWORD *)v335;
            v362 = v119;
            v120 = *v306;
            v381 = v361;
            v382 = v120;
            v383 = *((_WORD *)v306 + 8);
            v121 = swift_allocObject(&unk_1003E6600, 50, 7);
            v122 = *(_OWORD *)(v118 + 16);
            *(_OWORD *)(v121 + 16) = *(_OWORD *)v118;
            *(_OWORD *)(v121 + 32) = v122;
            *(_WORD *)(v121 + 48) = *(_WORD *)(v118 + 32);
            sub_100031ECC((uint64_t)&v381);
            sub_100031ECC((uint64_t)&v382);
            sub_100031ECC((uint64_t)&v381);
            sub_100031ECC((uint64_t)&v382);
            sub_100012318((uint64_t)v314, v315);
            v123 = swift_allocObject(&unk_1003E6628, 32, 7);
            *(_QWORD *)(v123 + 16) = sub_10012800C;
            *(_QWORD *)(v123 + 24) = v121;
            v356 = v123;
            sub_100012318((uint64_t)v320, v321);
            v124 = v344;
            LODWORD(v321) = swift_isUniquelyReferenced_nonNull_native(v344);
            v360 = v124;
            v125 = sub_10002D93C((uint64_t)&v361);
            v126 = v124[2];
            LODWORD(v336) = v127;
            v128 = (v127 & 1) == 0;
            v129 = v126 + v128;
            if (__OFADD__(v126, v128))
              goto LABEL_163;
            v130 = v124[3];
            v305 = v121;
            if (v130 >= v129)
            {
              *(_QWORD *)&v350 = v125;
              if ((v321 & 1) == 0)
                sub_100148044();
              v133 = v336;
            }
            else
            {
              sub_1001436AC(v129, v321);
              v131 = sub_10002D93C((uint64_t)&v361);
              v133 = v336;
              if ((v336 & 1) != (v132 & 1))
                goto LABEL_167;
              *(_QWORD *)&v350 = v131;
            }
            v173 = v360;
            swift_bridgeObjectRelease(0x8000000000000000);
            swift_bridgeObjectRetain(v173);
            if ((v133 & 1) == 0)
            {
              v174 = (uint64_t)v325;
              sub_100124598(*(void (**)(__int128 *__return_ptr, uint64_t))(v356 + 16), (uint64_t)v325);
              v175 = v350;
              v173[((unint64_t)v350 >> 6) + 8] |= 1 << v350;
              v176 = v173[6] + 40 * v175;
              v177 = v362;
              *(_OWORD *)v176 = v361;
              *(_OWORD *)(v176 + 16) = v177;
              *(_WORD *)(v176 + 32) = v363;
              sub_100063EB8(v174, v173[7] + *(_QWORD *)(v332 + 72) * v175, &qword_100408468);
              v178 = v173[2];
              v158 = __OFADD__(v178, 1);
              v179 = v178 + 1;
              if (v158)
                goto LABEL_166;
              v173[2] = v179;
              sub_100031ECC((uint64_t)&v381);
              sub_100031ECC((uint64_t)&v382);
            }
            v180 = v173[7];
            v344 = v173;
            swift_bridgeObjectRelease(v173);
            v181 = v180 + *(_QWORD *)(v332 + 72) * v350;
            v182 = *(_QWORD *)(v181 + 8);
            v183 = *(_QWORD *)(v181 + 24);
            *(_WORD *)(v181 + 32) = v363;
            v184 = v362;
            *(_OWORD *)v181 = v361;
            *(_OWORD *)(v181 + 16) = v184;
            swift_bridgeObjectRelease(v183);
            swift_bridgeObjectRelease(v182);
            sub_100031EF4((uint64_t)&v381);
            sub_100031EF4((uint64_t)&v382);
            v314 = sub_10012800C;
            v315 = v305;
            v320 = sub_100128040;
            v321 = v356;
LABEL_79:
            sub_100063824(v349, type metadata accessor for AWDLActionFrame.ServiceResponse);
            v34 = 1;
            LODWORD(v336) = 1;
            if (v37 == v35)
              goto LABEL_157;
            break;
          case 2u:
LABEL_25:
            v58 = *v30;
            v59 = *((unsigned __int16 *)v30 + 1);
            v60 = v30[4];
            v61 = v30[5];
            v350 = *(_OWORD *)(v30 + 8);
            v62 = *((unsigned __int16 *)v30 + 16);
            v63 = *((_QWORD *)v30 + 5);
            v3 = v58 | (v59 << 16) | (v60 << 32) | (v61 << 40) | ((unint64_t)*((unsigned __int16 *)v30 + 3) << 48);
            v64 = *((_QWORD *)v30 + 3);
            v65 = v359 + v357[12];
            swift_bridgeObjectRelease(*(_QWORD *)(v65 + 40));
            *(_QWORD *)v65 = v3;
            LOBYTE(v3) = v354;
            *(_OWORD *)(v65 + 8) = v350;
            *(_QWORD *)(v65 + 24) = v64;
            *(_QWORD *)(v65 + 32) = v62;
            v38 = v358;
            *(_QWORD *)(v65 + 40) = v63;
            goto LABEL_32;
          case 3u:
LABEL_29:
            v67 = v30[24];
            v68 = *((_QWORD *)v30 + 1);
            v69 = v30[16] | ((unint64_t)*((unsigned int *)v30 + 5) << 32);
            v70 = v359 + v357[8];
            *(_QWORD *)v70 = *v30 | ((unint64_t)*((unsigned __int16 *)v30 + 1) << 16) | ((unint64_t)v30[4] << 32) | ((unint64_t)v30[5] << 40) | ((unint64_t)v30[6] << 48) | ((unint64_t)v30[7] << 56);
            *(_QWORD *)(v70 + 8) = v68;
            *(_QWORD *)(v70 + 16) = v69;
            *(_WORD *)(v70 + 24) = v67;
            goto LABEL_7;
          case 5u:
LABEL_36:
            v78 = *((unsigned __int16 *)v30 + 2);
            v79 = (v353[1] & 1) == 0 && v78 == *v353;
            v80 = *v30;
            v81 = *((unsigned __int16 *)v30 + 1);
            v82 = *((unsigned int *)v30 + 2);
            v83 = *((_QWORD *)v30 + 2);
            v84 = *((_QWORD *)v30 + 3);
            LODWORD(v356) = !v79;
            v85 = v80 | (v81 << 16) | (v78 << 32);
            v3 = v359 + v357[10];
            sub_100128024(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
            *(_QWORD *)v3 = v85;
            *(_QWORD *)(v3 + 8) = v82;
            *(_QWORD *)(v3 + 16) = v83;
            *(_QWORD *)(v3 + 24) = v84;
            LOBYTE(v3) = v354;
            v36 = v355;
            v38 = v358;
            goto LABEL_7;
          case 6u:
LABEL_6:
            v40 = v359 + v357[14];
            sub_100033A84(v40, (uint64_t *)&unk_100410250);
            sub_100033AC0((uint64_t)v30, v40, type metadata accessor for AWDLActionFrame.DataPathState);
            v41 = type metadata accessor for AWDLActionFrame.DataPathState(0);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 0, 1, v41);
            goto LABEL_7;
          case 7u:
LABEL_31:
            v71 = *v30;
            v72 = *((_QWORD *)v30 + 1);
            v73 = *((_QWORD *)v30 + 2);
            v74 = (_QWORD *)(v359 + v357[13]);
            swift_bridgeObjectRelease(v74[2]);
            *v74 = v71;
            v74[1] = v72;
            v74[2] = v73;
            v38 = v358;
LABEL_32:
            v36 = v355;
            goto LABEL_7;
          case 9u:
LABEL_27:
            v66 = v359 + v357[16];
            *(_WORD *)v66 = *(_WORD *)v30;
            *(_BYTE *)(v66 + 2) = 0;
            goto LABEL_7;
          case 0xBu:
LABEL_43:
            v91 = *((unsigned int *)v30 + 2) | ((unint64_t)v30[12] << 32) | ((unint64_t)v30[13] << 40);
            v92 = *((_QWORD *)v30 + 4);
            v93 = v359 + v357[15];
            *(_QWORD *)v93 = *(_QWORD *)v30;
            *(_QWORD *)(v93 + 8) = v91;
            *(_OWORD *)(v93 + 16) = *((_OWORD *)v30 + 1);
            *(_QWORD *)(v93 + 32) = v92;
            *(_BYTE *)(v93 + 40) = 0;
            goto LABEL_7;
          case 0xCu:
LABEL_41:
            v86 = *((_QWORD *)v30 + 2);
            v87 = *((_QWORD *)v30 + 5);
            v88 = v30[24] | ((unint64_t)*((unsigned int *)v30 + 7) << 32);
            v89 = v30[32] | ((unint64_t)*((unsigned int *)v30 + 9) << 32);
            v90 = v359 + v357[9];
            *(_OWORD *)v90 = *(_OWORD *)v30;
            *(_QWORD *)(v90 + 16) = v86;
            *(_QWORD *)(v90 + 24) = v88;
            *(_QWORD *)(v90 + 32) = v89;
            *(_QWORD *)(v90 + 40) = v87;
            *(_BYTE *)(v90 + 48) = 0;
            goto LABEL_7;
          case 0x11u:
            v44 = *((unsigned int *)v30 + 2) | ((unint64_t)*((unsigned __int16 *)v30 + 6) << 32);
            v45 = *((_QWORD *)v30 + 2);
            v46 = v30[24] | ((unint64_t)*((unsigned int *)v30 + 7) << 32);
            v47 = *((unsigned __int16 *)v30 + 16) | ((unint64_t)v30[34] << 16) | ((unint64_t)v30[35] << 24) | ((unint64_t)v30[36] << 32) | ((unint64_t)v30[37] << 40) | ((unint64_t)v30[38] << 48);
            v48 = v30[39];
            v49 = (unint64_t *)(v359 + v357[17]);
            *v49 = *(unsigned int *)v30 | ((unint64_t)v30[4] << 32) | ((unint64_t)v30[5] << 40) | ((unint64_t)v30[6] << 48);
            v49[1] = v44;
            v49[2] = v45;
            v49[3] = v46;
            v49[4] = v47 | (v48 << 56);
            if (v37 == v35)
              goto LABEL_89;
            v50 = v36 + v38 * v37;
            do
            {
              if (v39 == v37)
                goto LABEL_155;
              sub_1000637E0(v50, (uint64_t)v30, type metadata accessor for AWDLActionFrame.AWDLAttribute);
              v51 = swift_getEnumCaseMultiPayload(v30, v27);
              if (v51 != 17)
              {
                switch(v51)
                {
                  case 1:
                    ++v37;
                    v348 = 1;
                    goto LABEL_13;
                  case 2:
                    ++v37;
                    v348 = 1;
                    goto LABEL_25;
                  case 3:
                    ++v37;
                    v348 = 1;
                    goto LABEL_29;
                  case 5:
                    ++v37;
                    v348 = 1;
                    goto LABEL_36;
                  case 6:
                    ++v37;
                    v348 = 1;
                    goto LABEL_6;
                  case 7:
                    ++v37;
                    v348 = 1;
                    goto LABEL_31;
                  case 9:
                    ++v37;
                    v348 = 1;
                    goto LABEL_27;
                  case 11:
                    ++v37;
                    v348 = 1;
                    goto LABEL_43;
                  case 12:
                    ++v37;
                    v348 = 1;
                    goto LABEL_41;
                  case 18:
                    ++v37;
                    v348 = 1;
                    goto LABEL_34;
                  default:
                    ++v37;
                    v348 = 1;
                    goto LABEL_45;
                }
              }
              ++v37;
              v52 = *((unsigned int *)v30 + 2) | ((unint64_t)*((unsigned __int16 *)v30 + 6) << 32);
              v53 = *((_QWORD *)v30 + 2);
              v54 = v30[24] | ((unint64_t)*((unsigned int *)v30 + 7) << 32);
              v55 = *((unsigned __int16 *)v30 + 16) | ((unint64_t)v30[34] << 16) | ((unint64_t)v30[35] << 24) | ((unint64_t)v30[36] << 32) | ((unint64_t)v30[37] << 40) | ((unint64_t)v30[38] << 48);
              v56 = v30[39];
              v57 = (unint64_t *)(v359 + v357[17]);
              *v57 = *(unsigned int *)v30 | ((unint64_t)v30[4] << 32) | ((unint64_t)v30[5] << 40) | ((unint64_t)v30[6] << 48);
              v57[1] = v52;
              v57[2] = v53;
              v57[3] = v54;
              v57[4] = v55 | (v56 << 56);
              v50 += v38;
            }
            while (v35 != v37);
LABEL_89:
            swift_bridgeObjectRelease(v347);
LABEL_90:
            v195 = v344;
            v194 = v345;
            v32 = v353;
            if ((v356 & 1) != 0)
              goto LABEL_91;
            goto LABEL_153;
          case 0x12u:
LABEL_34:
            v75 = *((_QWORD *)v30 + 1);
            v76 = *(unsigned int *)v30 | ((unint64_t)v30[4] << 32) | ((unint64_t)v30[5] << 40);
            v77 = (unint64_t *)(v359 + v357[18]);
            swift_bridgeObjectRelease(v77[1]);
            *v77 = v76;
            v77[1] = v75;
            v38 = v358;
            goto LABEL_7;
          default:
LABEL_45:
            sub_100063824((uint64_t)v30, type metadata accessor for AWDLActionFrame.AWDLAttribute);
LABEL_7:
            if (v37 != v35)
              goto LABEL_8;
            swift_bridgeObjectRelease(v347);
            if (v348 & 1 | ((v3 & 1) == 0))
              goto LABEL_90;
            v195 = v344;
            v194 = v345;
            v32 = v353;
            LOBYTE(v34) = v356;
            goto LABEL_87;
        }
        break;
      }
    }
  }
  v194 = v13;
  if ((v3 & 1) != 0)
  {
    v314 = 0;
    v315 = 0;
    v320 = 0;
    v321 = 0;
    v312 = 0;
    v313 = 0;
    v318 = 0;
    v319 = 0;
    v316 = 0;
    v317 = 0;
    v322 = 0;
    v323 = 0;
    LODWORD(v336) = 0;
    v195 = _swiftEmptyDictionarySingleton;
LABEL_87:
    v196 = v359 + v357[17];
    *(_OWORD *)v196 = xmmword_100337840;
    *(_QWORD *)(v196 + 24) = 0;
    *(_QWORD *)(v196 + 32) = 0;
    *(_QWORD *)(v196 + 16) = 0;
    if ((v34 & 1) == 0)
      goto LABEL_153;
LABEL_91:
    if ((v336 & 1) != 0)
      goto LABEL_92;
  }
  else
  {
    v314 = 0;
    v315 = 0;
    v320 = 0;
    v321 = 0;
    v312 = 0;
    v313 = 0;
    v318 = 0;
    v319 = 0;
    v316 = 0;
    v317 = 0;
    v322 = 0;
    v323 = 0;
    v195 = _swiftEmptyDictionarySingleton;
    if ((v34 & 1) == 0)
      goto LABEL_153;
  }
  v200 = v194;
  v201 = v359 + v357[10];
  v202 = *(_QWORD *)(v201 + 24);
  if (v202 >> 60 == 15)
  {
    v203 = 0;
    v204 = 0;
    v202 = 0xF000000000000000;
  }
  else
  {
    v203 = *(unsigned int *)(v201 + 8);
    v204 = *(_QWORD *)(v201 + 16);
    sub_100031FEC(v204, *(_QWORD *)(v201 + 24));
  }
  if (qword_100403F48 != -1)
    swift_once(&qword_100403F48, sub_1000CEC48);
  v205 = static AWDLActionFrame.ServiceParameter.SSTH.zero;
  v206 = qword_100410440;
  v207 = qword_100410448;
  if (v202 >> 60 == 15)
  {
    sub_100031FEC(qword_100410440, qword_100410448);
    sub_1000634E8(v203, v204, v202);
    sub_1000634E8(v205, v206, v207);
LABEL_153:
    swift_bridgeObjectRelease(v195);
    goto LABEL_154;
  }
  if (static AWDLActionFrame.ServiceParameter.SSTH.zero != (_DWORD)v203)
  {
    sub_1000634E8(v203, v204, v202);
    goto LABEL_153;
  }
  sub_100031FEC(qword_100410440, qword_100410448);
  sub_100063C28(v203, v204, v202);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v204, v202);
  v209 = v208;
  sub_10000E614(v206, v207);
  sub_1000634E8(v203, v204, v202);
  sub_1000634E8(v203, v204, v202);
  v32 = v353;
  v194 = v200;
  if ((v209 & 1) == 0)
    goto LABEL_153;
  while (1)
  {
LABEL_92:
    v197 = v359 + v357[10];
    v198 = *(_QWORD *)(v197 + 24) >> 60;
    if (v198 == 15)
      v199 = 0;
    else
      v199 = *(_WORD *)(v197 + 4);
    *v32 = v199;
    *((_BYTE *)v32 + 2) = v198 > 0xE;
    v210 = (_QWORD *)(v359 + v357[20]);
    v211 = (_QWORD *)*v210;
    v325 = v210;
    *v210 = &_swiftEmptySetSingleton;
    v212 = v195[8];
    v311 = v195 + 8;
    v360 = v211;
    v213 = 1 << *((_BYTE *)v195 + 32);
    v214 = -1;
    if (v213 < 64)
      v214 = ~(-1 << v213);
    v3 = v214 & v212;
    v215 = (unint64_t)(v213 + 63) >> 6;
    v307 = (__int128 *)(v215 - 1);
    swift_bridgeObjectRetain(v195);
    v216 = 0;
    v326 = v215;
    v217 = (uint64_t *)&unk_100408470;
    v308 = (__int128 *)(v215 - 5);
    v309 = v195 + 13;
    v344 = v195;
    if (v3)
      break;
LABEL_112:
    v234 = v216 + 1;
    if (!__OFADD__(v216, 1))
    {
      if (v234 >= v326)
      {
        v222 = v195;
      }
      else
      {
        v235 = v311[v234];
        if (v235)
        {
LABEL_115:
          v219 = (v235 - 1) & v235;
          v220 = __clz(__rbit64(v235)) + (v234 << 6);
          v216 = v234;
          goto LABEL_111;
        }
        if (v216 + 2 >= v326)
        {
          v222 = v195;
          ++v216;
        }
        else
        {
          v235 = v311[v216 + 2];
          if (v235)
          {
            v234 = v216 + 2;
            goto LABEL_115;
          }
          if (v216 + 3 >= v326)
          {
            v222 = v195;
            v216 += 2;
          }
          else
          {
            v235 = v311[v216 + 3];
            if (v235)
            {
              v234 = v216 + 3;
              goto LABEL_115;
            }
            v234 = v216 + 4;
            if (v216 + 4 >= v326)
            {
              v222 = v195;
              v216 += 3;
            }
            else
            {
              v235 = v311[v234];
              if (v235)
                goto LABEL_115;
              while (v308 != (__int128 *)v216)
              {
                v235 = v309[v216++];
                if (v235)
                {
                  v234 = v216 + 4;
                  goto LABEL_115;
                }
              }
              v222 = v195;
              v216 = (uint64_t)v307;
            }
          }
        }
      }
      v236 = sub_100012C44(v217);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v236 - 8) + 56))(v194, 1, 1, v236);
      v219 = 0;
      goto LABEL_118;
    }
LABEL_156:
    __break(1u);
LABEL_157:
    swift_bridgeObjectRelease(v347);
    if ((v348 & 1) != 0)
    {
      v195 = v344;
      v194 = v345;
      v32 = v353;
    }
    else
    {
      v195 = v344;
      v194 = v345;
      v32 = v353;
      if ((v3 & 1) != 0)
      {
        v297 = v359 + v357[17];
        *(_OWORD *)v297 = xmmword_100337840;
        *(_QWORD *)(v297 + 24) = 0;
        *(_QWORD *)(v297 + 32) = 0;
        *(_QWORD *)(v297 + 16) = 0;
      }
    }
  }
  while (1)
  {
    v218 = __clz(__rbit64(v3));
    v219 = (v3 - 1) & v3;
    v220 = v218 | (v216 << 6);
LABEL_111:
    v221 = v195[7];
    v222 = v195;
    v223 = v195[6] + 40 * v220;
    v224 = *(_QWORD *)v223;
    v225 = *(_QWORD *)(v223 + 8);
    v226 = *(_QWORD *)(v223 + 16);
    v227 = *(_QWORD *)(v223 + 24);
    v228 = *(_BYTE *)(v223 + 32);
    LOBYTE(v223) = *(_BYTE *)(v223 + 33);
    *(_QWORD *)v194 = v224;
    *((_QWORD *)v194 + 1) = v225;
    *((_QWORD *)v194 + 2) = v226;
    *((_QWORD *)v194 + 3) = v227;
    v194[32] = v228;
    v194[33] = v223;
    v229 = v221 + *(_QWORD *)(v332 + 72) * v220;
    v230 = v217;
    v231 = sub_100012C44(v217);
    sub_100033B48(v229, (uint64_t)&v194[*(int *)(v231 + 48)], &qword_100408468);
    v232 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v231 - 8) + 56);
    v233 = v231;
    v217 = v230;
    v232(v194, 0, 1, v233);
    swift_bridgeObjectRetain(v225);
    swift_bridgeObjectRetain(v227);
LABEL_118:
    v237 = (uint64_t)v194;
    v238 = v343;
    sub_100063EB8(v237, v343, &qword_100408460);
    v239 = sub_100012C44(v217);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v239 - 8) + 48))(v238, 1, v239) == 1)
      break;
    v353 = (unsigned __int16 *)v219;
    v354 = v216;
    v240 = *(_QWORD *)(v238 + 8);
    swift_bridgeObjectRelease(*(_QWORD *)(v238 + 24));
    swift_bridgeObjectRelease(v240);
    v241 = v238 + *(int *)(v239 + 48);
    v242 = *(_QWORD *)v241;
    v243 = *(_QWORD *)(v241 + 8);
    v244 = *(_QWORD *)(v241 + 16);
    v245 = *(_QWORD *)(v241 + 24);
    v246 = *(unsigned __int8 *)(v241 + 32);
    v247 = *(unsigned __int8 *)(v241 + 33);
    v248 = *(_QWORD *)(v241 + 40);
    v249 = *(_QWORD *)(v241 + 48);
    v250 = *(_QWORD *)(v241 + 56);
    v251 = *(_QWORD *)(v241 + 64);
    v253 = *(_QWORD *)(v241 + 72);
    v252 = *(_QWORD *)(v241 + 80);
    v254 = *(_QWORD *)(v241 + 88);
    v255 = *(int *)(v340 + 64);
    v256 = v241 + v255;
    v257 = v337;
    v258 = (char *)v337 + v255;
    v349 = v244;
    *(_QWORD *)&v350 = v242;
    *v337 = v242;
    v257[1] = v243;
    v257[2] = v244;
    v257[3] = v245;
    LODWORD(v347) = v246;
    *((_BYTE *)v257 + 32) = v246;
    v348 = v247;
    *((_BYTE *)v257 + 33) = v247;
    v355 = v250;
    v356 = v248;
    v257[5] = v248;
    v257[6] = v249;
    v358 = v249;
    v257[7] = v250;
    v257[8] = v251;
    v257[9] = v253;
    v257[10] = v252;
    v257[11] = v254;
    sub_100063EB8(v256, (uint64_t)v257 + v255, &qword_100404B80);
    v259 = (uint64_t)v258;
    v260 = v338;
    sub_100063EB8(v259, v338, &qword_100404B80);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v342 + 48))(v260, 1, v341) == 1)
    {
      sub_100031E0C(v356, v358, v355, v251, v253, v252, v254);
      swift_bridgeObjectRelease(v245);
      swift_bridgeObjectRelease(v243);
      sub_100033A84(v260, &qword_100404B80);
      v195 = v344;
      v194 = v345;
      v3 = (unint64_t)v353;
      v216 = v354;
      if (!v353)
        goto LABEL_112;
    }
    else
    {
      v261 = v339;
      sub_100033AC0(v260, v339, type metadata accessor for DNSRecords.SRV);
      v262 = (uint64_t)v351;
      sub_1000637E0(v261, (uint64_t)&v351[*(int *)(v346 + 28)], type metadata accessor for DNSRecords.SRV);
      *(_BYTE *)v262 = 0;
      *(_QWORD *)(v262 + 8) = v350;
      *(_QWORD *)(v262 + 16) = v243;
      *(_QWORD *)(v262 + 24) = v349;
      *(_QWORD *)(v262 + 32) = v245;
      *(_BYTE *)(v262 + 40) = v347;
      *(_BYTE *)(v262 + 41) = v348;
      v264 = v355;
      v263 = v356;
      v265 = v358;
      *(_QWORD *)(v262 + 48) = v356;
      *(_QWORD *)(v262 + 56) = v265;
      *(_QWORD *)(v262 + 64) = v264;
      *(_QWORD *)(v262 + 72) = v251;
      *(_QWORD *)(v262 + 80) = v253;
      *(_QWORD *)(v262 + 88) = v252;
      *(_QWORD *)(v262 + 96) = v254;
      sub_100031FA0(v263, v265, v264, v251, v253, v252, v254);
      v266 = v352;
      sub_100149C70(v262, v352);
      v267 = v329;
      sub_100033B48(v266, v329, (uint64_t *)&unk_10040EAC0);
      v268 = v254;
      v269 = v252;
      v270 = v253;
      v271 = v264;
      v272 = v358;
      v335 = (uint64_t *)v253;
      v336 = v269;
      v333 = v268;
      v334 = v251;
      if (v358)
      {
        v273 = v251;
        swift_bridgeObjectRetain(v358);
        swift_bridgeObjectRetain(v251);
        sub_100031FEC(v269, v268);
        sub_100033A84(v267, (uint64_t *)&unk_10040EAC0);
        *(_QWORD *)&v350 = v356;
        v274 = v268;
        v275 = v272;
        v276 = v270;
        v277 = v269;
      }
      else
      {
        v278 = v324;
        sub_100063EB8(v267, (uint64_t)v324, (uint64_t *)&unk_10040EAC0);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v331 + 48))(v278, 1, v346) == 1)
        {
          sub_100033A84((uint64_t)v278, (uint64_t *)&unk_10040EAC0);
          *(_QWORD *)&v350 = 0;
          v275 = 0;
          v271 = 0;
          v273 = 0;
          v276 = 0;
          v277 = 0;
          v274 = 0;
        }
        else
        {
          v279 = v278[7];
          v280 = v278[8];
          v281 = v278[9];
          v276 = v278[10];
          v277 = v278[11];
          v274 = v278[12];
          *(_QWORD *)&v350 = v278[6];
          v275 = v279;
          v271 = v280;
          v273 = v281;
          sub_100031FA0(v350, v279, v280, v281, v276, v277, v274);
          sub_100063824((uint64_t)v278, type metadata accessor for AWDLPeer.AdvertisedService);
        }
      }
      v282 = v351;
      sub_100031E0C(*((_QWORD *)v351 + 6), *((_QWORD *)v351 + 7), *((_QWORD *)v351 + 8), *((_QWORD *)v351 + 9), *((_QWORD *)v351 + 10), *((_QWORD *)v351 + 11), *((_QWORD *)v351 + 12));
      v282[6] = v350;
      v282[7] = v275;
      v282[8] = v271;
      v282[9] = v273;
      v282[10] = v276;
      v282[11] = v277;
      v282[12] = v274;
      v283 = v330;
      sub_100033B48(v352, (uint64_t)v330, (uint64_t *)&unk_10040EAC0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v331 + 48))(v283, 1, v346) != 1)
      {
        v289 = (uint64_t)v283;
        v285 = *v283;
        sub_100063824(v289, type metadata accessor for AWDLPeer.AdvertisedService);
        v287 = v333;
        v286 = v334;
LABEL_129:
        v290 = (uint64_t)v351;
        *v351 = v285;
        v291 = v328;
        sub_1000637E0(v290, v328, type metadata accessor for AWDLPeer.AdvertisedService);
        v292 = v327;
        sub_1000DEC5C(v327, v291);
        sub_100031E0C(v356, v358, v355, v286, (uint64_t)v335, v336, v287);
        sub_100063824(v292, type metadata accessor for AWDLPeer.AdvertisedService);
        sub_100033A84(v352, (uint64_t *)&unk_10040EAC0);
        sub_100063824(v339, type metadata accessor for DNSRecords.SRV);
        v288 = v290;
        goto LABEL_130;
      }
      sub_100033A84((uint64_t)v283, (uint64_t *)&unk_10040EAC0);
      v284 = sub_100130C70();
      v285 = v284;
      v287 = v333;
      v286 = v334;
      if ((v284 & 0x100) == 0)
        goto LABEL_129;
      sub_100031E0C(v356, v358, v355, v334, (uint64_t)v335, v336, v333);
      sub_100033A84(v352, (uint64_t *)&unk_10040EAC0);
      sub_100063824(v339, type metadata accessor for DNSRecords.SRV);
      v288 = (uint64_t)v351;
LABEL_130:
      sub_100063824(v288, type metadata accessor for AWDLPeer.AdvertisedService);
      v3 = (unint64_t)v353;
      v216 = v354;
      v217 = (uint64_t *)&unk_100408470;
      v195 = v344;
      v194 = v345;
      if (!v353)
        goto LABEL_112;
    }
  }
  swift_release(v222);
  v293 = v360;
  swift_bridgeObjectRetain(v360);
  sub_1001212F8(v294, v359);
  swift_bridgeObjectRelease(v222);
  swift_bridgeObjectRelease_n(v293, 2);
LABEL_154:
  sub_100012318((uint64_t)v314, v315);
  sub_100012318((uint64_t)v320, v321);
  sub_100012318((uint64_t)v312, v313);
  sub_100012318((uint64_t)v318, v319);
  sub_100012318((uint64_t)v316, v317);
  return sub_100012318((uint64_t)v322, v323);
}

double sub_1001244D8@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int16 v13;
  __int128 v14;

  v5 = *((_QWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 3);
  v7 = *((_BYTE *)a2 + 33);
  v8 = a2[2] & 1;
  v14 = *a2;
  v11 = v14;
  v12 = a2[1];
  v13 = *((_WORD *)a2 + 16);
  v9 = type metadata accessor for DNSRecords.SRV(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  sub_100031ECC((uint64_t)&v14);
  sub_100031ECC((uint64_t)&v12);
  *(_OWORD *)a3 = v11;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
  *(_BYTE *)(a3 + 32) = v8;
  *(_BYTE *)(a3 + 33) = v7;
  result = 0.0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  return result;
}

double sub_100124598@<D0>(void (*a1)(__int128 *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = sub_100012C44(&qword_100408468);
  a1(&v14, a2 + *(int *)(v4 + 64));
  result = *(double *)&v14;
  v6 = v15;
  v7 = v16;
  v8 = v17;
  v9 = v18;
  v10 = v22;
  v11 = v19;
  v12 = v20;
  v13 = v21;
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 33) = v9;
  *(_OWORD *)(a2 + 40) = v11;
  *(_OWORD *)(a2 + 56) = v12;
  *(_OWORD *)(a2 + 72) = v13;
  *(_QWORD *)(a2 + 88) = v10;
  return result;
}

double sub_100124628@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  double result;

  v6 = *a2;
  v5 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v9 = *((_BYTE *)a2 + 32);
  v10 = *((_BYTE *)a2 + 33);
  v11 = type metadata accessor for DNSRecords.SRV(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v7;
  *(_BYTE *)(a3 + 32) = v9;
  *(_BYTE *)(a3 + 33) = v10;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_QWORD *)(a3 + 88) = 0;
  swift_bridgeObjectRetain(v5);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v7).n128_u64[0];
  return result;
}

uint64_t AWDLPeer.received(actionFrame:with:)(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  v5 = v4;
  v9 = a1;
  v10 = HIDWORD(a1);
  v11 = *(_QWORD *)(type metadata accessor for DispatchTime(0) - 8);
  v12 = __chkstk_darwin();
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(unsigned __int8 *)(a4 + 16);
  v32 = v12;
  v33 = a3;
  if (v15)
  {
    if (v15 == 1)
    {
      v16 = type metadata accessor for AWDLActionFrame.Header(0);
      v17 = *(_QWORD *)(a4 + *(int *)(v16 + 48));
      v18 = (int *)type metadata accessor for AWDLPeer(0);
      v19 = v18[24];
    }
    else
    {
      v16 = type metadata accessor for AWDLActionFrame.Header(0);
      v17 = *(_QWORD *)(a4 + *(int *)(v16 + 48));
      v18 = (int *)type metadata accessor for AWDLPeer(0);
      v19 = v18[25];
    }
  }
  else
  {
    v16 = type metadata accessor for AWDLActionFrame.Header(0);
    v17 = *(_QWORD *)(a4 + *(int *)(v16 + 48));
    v18 = (int *)type metadata accessor for AWDLPeer(0);
    v19 = v18[23];
  }
  v20 = v5 + v19;
  *(_QWORD *)v20 = v17;
  *(_BYTE *)(v20 + 8) = 0;
  v21 = v10 >= a2;
  v22 = v10 - a2;
  v23 = v10 < a2;
  if (v21)
    v24 = v22;
  else
    v24 = 0;
  type metadata accessor for AWDLPeer(0);
  v25 = v5 + v18[21];
  *(_DWORD *)v25 = v24;
  *(_BYTE *)(v25 + 4) = v23;
  type metadata accessor for AWDLActionFrame.Header(0);
  v26 = v5 + v18[22];
  *(_DWORD *)v26 = *(_DWORD *)(a4 + *(int *)(v16 + 52));
  *(_BYTE *)(v26 + 4) = 0;
  sub_10012278C(v33, (v9 >> 8) & 1);
  v27 = v18[7];
  v28 = *(_QWORD *)(v5 + v27);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (v29)
  {
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)(v5 + v27) = v30;
  if (qword_100403F80 != -1)
LABEL_13:
    swift_once(&qword_100403F80, sub_10012AF3C);
  (*(void (**)(void))(*(_QWORD *)algn_1004104A8 + 8))();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(v5 + v18[6], v14, v32);
}

void AWDLPeer.hash(into:)()
{
  uint64_t v0;
  Swift::UInt8 *v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;

  v1 = (Swift::UInt8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 20));
  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

BOOL static AWDLPeer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;

  v4 = *(int *)(type metadata accessor for AWDLPeer(0) + 20);
  v5 = (_DWORD *)(a1 + v4);
  v6 = *(unsigned __int16 *)(a1 + v4 + 4);
  v7 = a2 + v4;
  return *v5 == *(_DWORD *)v7 && v6 == *(unsigned __int16 *)(v7 + 4);
}

Swift::Int AWDLPeer.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 *v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v1 = (Swift::UInt8 *)(v0 + *(int *)(type metadata accessor for AWDLPeer(0) + 20));
  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int sub_100124A74(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 *v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  v3 = (Swift::UInt8 *)(v1 + *(int *)(a1 + 20));
  LOBYTE(a1) = v3[1];
  v4 = v3[2];
  v5 = v3[3];
  v6 = v3[4];
  v7 = v3[5];
  Hasher._combine(_:)(*v3);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void sub_100124B20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::UInt8 *v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;

  v3 = (Swift::UInt8 *)(v2 + *(int *)(a2 + 20));
  v4 = v3[1];
  v5 = v3[2];
  v6 = v3[3];
  v7 = v3[4];
  v8 = v3[5];
  Hasher._combine(_:)(*v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
}

Swift::Int sub_100124BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::UInt8 *v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  v4 = (Swift::UInt8 *)(v2 + *(int *)(a2 + 20));
  LOBYTE(a2) = v4[1];
  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v8 = v4[5];
  Hasher._combine(_:)(*v4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

BOOL sub_100124C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;

  v3 = *(int *)(a3 + 20);
  v4 = (_DWORD *)(a1 + v3);
  v5 = *(unsigned __int16 *)(a1 + v3 + 4);
  v6 = a2 + v3;
  return *v4 == *(_DWORD *)v6 && v5 == *(unsigned __int16 *)(v6 + 4);
}

uint64_t type metadata accessor for AWDLPeer.AdvertisedService(uint64_t a1)
{
  return sub_10000D69C(a1, qword_100408420, (uint64_t)&nominal type descriptor for AWDLPeer.AdvertisedService);
}

uint64_t sub_100124CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DNSRecords.SRV(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100124D1C()
{
  unint64_t result;

  result = qword_1004082B8;
  if (!qword_1004082B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLPeer.Reachability, &type metadata for AWDLPeer.Reachability);
    atomic_store(result, (unint64_t *)&qword_1004082B8);
  }
  return result;
}

uint64_t sub_100124D60()
{
  return sub_100011DE4(&qword_1004082C0, type metadata accessor for AWDLPeer.AdvertisedService, (uint64_t)&protocol conformance descriptor for AWDLPeer.AdvertisedService);
}

uint64_t sub_100124D8C()
{
  return sub_100011DE4(&qword_1004082C8, type metadata accessor for AWDLPeer, (uint64_t)&protocol conformance descriptor for AWDLPeer);
}

_QWORD *initializeBufferWithCopyOfBuffer for AWDLPeer(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _WORD *v41;
  _WORD *v42;
  int *v43;
  uint64_t v44;
  unsigned int (*v45)(_WORD *, uint64_t, int *);
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  __int128 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  __int128 v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *__dst;
  uint64_t v102;
  uint64_t v103;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    *((_WORD *)v10 + 2) = *((_WORD *)v11 + 2);
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    v14 = type metadata accessor for DispatchTime(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v16 = (_OWORD *)((char *)a1 + v15);
    v17 = (_OWORD *)((char *)a2 + v15);
    *v16 = *v17;
    *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v17 + 10);
    v18 = a3[9];
    v19 = a3[10];
    v20 = (char *)a1 + v18;
    v21 = (char *)a2 + v18;
    v22 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v22;
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    v20[48] = v21[48];
    v23 = (char *)a1 + v19;
    v24 = (char *)a2 + v19;
    v25 = *(_QWORD *)((char *)a2 + v19 + 24);
    if (v25 >> 60 == 15)
    {
      v26 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v26;
    }
    else
    {
      *v23 = *v24;
      *(_DWORD *)(v23 + 2) = *(_DWORD *)(v24 + 2);
      *((_DWORD *)v23 + 2) = *((_DWORD *)v24 + 2);
      v28 = *((_QWORD *)v24 + 2);
      sub_100031FEC(v28, v25);
      *((_QWORD *)v23 + 2) = v28;
      *((_QWORD *)v23 + 3) = v25;
    }
    v29 = a3[11];
    v30 = a3[12];
    v31 = (char *)a1 + v29;
    v32 = (char *)a2 + v29;
    *(_WORD *)v31 = *(_WORD *)v32;
    v31[2] = v32[2];
    v33 = (char *)a1 + v30;
    v34 = (char *)a2 + v30;
    *v33 = *v34;
    *(_DWORD *)(v33 + 2) = *(_DWORD *)(v34 + 2);
    *(_QWORD *)(v33 + 6) = *(_QWORD *)(v34 + 6);
    *(_QWORD *)(v33 + 14) = *(_QWORD *)(v34 + 14);
    *((_WORD *)v33 + 13) = *((_WORD *)v34 + 13);
    *(_DWORD *)(v33 + 22) = *(_DWORD *)(v34 + 22);
    *((_WORD *)v33 + 14) = *((_WORD *)v34 + 14);
    *(_DWORD *)(v33 + 30) = *(_DWORD *)(v34 + 30);
    v35 = *((_QWORD *)v34 + 5);
    *((_QWORD *)v33 + 5) = v35;
    v36 = a3[13];
    v37 = a3[14];
    v38 = (char *)a1 + v36;
    v39 = (char *)a2 + v36;
    *v38 = *v39;
    v40 = *((_QWORD *)v39 + 2);
    *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
    *((_QWORD *)v38 + 2) = v40;
    v41 = (_WORD *)((char *)a1 + v37);
    v42 = (_WORD *)((char *)a2 + v37);
    v43 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
    v44 = *((_QWORD *)v43 - 1);
    v45 = *(unsigned int (**)(_WORD *, uint64_t, int *))(v44 + 48);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v40);
    if (v45(v42, 1, v43))
    {
      v46 = sub_100012C44((uint64_t *)&unk_100410250);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v102 = v44;
      *v41 = *v42;
      *((_BYTE *)v41 + 2) = *((_BYTE *)v42 + 2);
      *((_DWORD *)v41 + 1) = *((_DWORD *)v42 + 1);
      v41[4] = v42[4];
      *(_DWORD *)(v41 + 5) = *(_DWORD *)(v42 + 5);
      *(_DWORD *)((char *)v41 + 13) = *(_DWORD *)((char *)v42 + 13);
      v41[12] = v42[12];
      *((_DWORD *)v41 + 5) = *((_DWORD *)v42 + 5);
      v47 = *(_DWORD *)(v42 + 13);
      *(_DWORD *)((char *)v41 + 29) = *(_DWORD *)((char *)v42 + 29);
      *(_DWORD *)(v41 + 13) = v47;
      v103 = *((_QWORD *)v42 + 6);
      *((_QWORD *)v41 + 5) = *((_QWORD *)v42 + 5);
      *((_QWORD *)v41 + 6) = v103;
      *((_DWORD *)v41 + 14) = *((_DWORD *)v42 + 14);
      *(_DWORD *)((char *)v41 + 59) = *(_DWORD *)((char *)v42 + 59);
      *((_BYTE *)v41 + 63) = *((_BYTE *)v42 + 63);
      *((_DWORD *)v41 + 16) = *((_DWORD *)v42 + 16);
      *((_BYTE *)v41 + 68) = *((_BYTE *)v42 + 68);
      v48 = *((_DWORD *)v42 + 18);
      *((_BYTE *)v41 + 76) = *((_BYTE *)v42 + 76);
      *((_DWORD *)v41 + 18) = v48;
      *(_OWORD *)((char *)v41 + 77) = *(_OWORD *)((char *)v42 + 77);
      *(_WORD *)((char *)v41 + 93) = *(_WORD *)((char *)v42 + 93);
      v49 = v43[34];
      __dst = (char *)v41 + v49;
      v50 = (char *)v42 + v49;
      v51 = type metadata accessor for DispatchTimeInterval(0);
      v52 = *(_QWORD *)(v51 - 8);
      v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
      swift_bridgeObjectRetain(v103);
      if (v53(v50, 1, v51))
      {
        v54 = sub_100012C44(&qword_100407210);
        memcpy(__dst, v50, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v50, v51);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v51);
      }
      v55 = v43[35];
      v56 = (char *)v41 + v55;
      v57 = (char *)v42 + v55;
      *(_DWORD *)v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      v58 = v43[36];
      v59 = (char *)v41 + v58;
      v60 = (char *)v42 + v58;
      v59[4] = v60[4];
      *(_DWORD *)v59 = *(_DWORD *)v60;
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v102 + 56))(v41, 0, 1, v43);
    }
    v61 = a3[15];
    v62 = a3[16];
    v63 = (_OWORD *)((char *)a1 + v61);
    v64 = (_OWORD *)((char *)a2 + v61);
    v65 = v64[1];
    *v63 = *v64;
    v63[1] = v65;
    *(_OWORD *)((char *)v63 + 25) = *(_OWORD *)((char *)v64 + 25);
    v66 = (char *)a1 + v62;
    v67 = (char *)a2 + v62;
    *(_WORD *)v66 = *(_WORD *)v67;
    v66[2] = v67[2];
    v68 = a3[17];
    v69 = a3[18];
    v70 = (char *)a1 + v68;
    v71 = (char *)a2 + v68;
    v72 = *((_OWORD *)v71 + 1);
    *(_OWORD *)v70 = *(_OWORD *)v71;
    *((_OWORD *)v70 + 1) = v72;
    *((_QWORD *)v70 + 4) = *((_QWORD *)v71 + 4);
    v73 = (char *)a1 + v69;
    v74 = (char *)a2 + v69;
    *(_DWORD *)v73 = *(_DWORD *)v74;
    *((_WORD *)v73 + 2) = *((_WORD *)v74 + 2);
    v75 = *((_QWORD *)v74 + 1);
    *((_QWORD *)v73 + 1) = v75;
    v76 = a3[19];
    v77 = a3[20];
    v78 = (_QWORD *)((char *)a1 + v76);
    v79 = (_QWORD *)((char *)a2 + v76);
    v80 = *v79;
    v81 = v79[1];
    *v78 = *v79;
    v78[1] = v81;
    v82 = *(_QWORD *)((char *)a2 + v77);
    *(_QWORD *)((char *)a1 + v77) = v82;
    v83 = a3[21];
    v84 = a3[22];
    v85 = (char *)a1 + v83;
    v86 = (char *)a2 + v83;
    *(_DWORD *)v85 = *(_DWORD *)v86;
    v85[4] = v86[4];
    v87 = (char *)a1 + v84;
    v88 = (char *)a2 + v84;
    *(_DWORD *)v87 = *(_DWORD *)v88;
    v87[4] = v88[4];
    v89 = a3[23];
    v90 = a3[24];
    v91 = (char *)a1 + v89;
    v92 = (char *)a2 + v89;
    *(_QWORD *)v91 = *(_QWORD *)v92;
    v91[8] = v92[8];
    v93 = (char *)a1 + v90;
    v94 = (char *)a2 + v90;
    *(_QWORD *)v93 = *(_QWORD *)v94;
    v93[8] = v94[8];
    v95 = a3[25];
    v96 = a3[26];
    v97 = (char *)a1 + v95;
    v98 = (char *)a2 + v95;
    v97[8] = v98[8];
    *(_QWORD *)v97 = *(_QWORD *)v98;
    *((_BYTE *)a1 + v96) = *((_BYTE *)a2 + v96);
    v99 = a3[28];
    *((_BYTE *)a1 + a3[27]) = *((_BYTE *)a2 + a3[27]);
    *((_BYTE *)a1 + v99) = *((_BYTE *)a2 + v99);
    *((_BYTE *)a1 + a3[29]) = *((_BYTE *)a2 + a3[29]);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v82);
  }
  return a1;
}

double destroy for AWDLPeer(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  double result;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[6];
  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[10];
  v8 = *(_QWORD *)(v7 + 24);
  if (v8 >> 60 != 15)
    sub_10000E614(*(_QWORD *)(v7 + 16), v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 16));
  v9 = a1 + a2[14];
  v10 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 48));
    v11 = v9 + *(int *)(v10 + 136);
    v12 = type metadata accessor for DispatchTimeInterval(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[18] + 8));
  v14 = (_QWORD *)(a1 + a2[19]);
  swift_bridgeObjectRelease(*v14);
  swift_bridgeObjectRelease(v14[1]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[20])).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  _WORD *v40;
  int *v41;
  uint64_t v42;
  unsigned int (*v43)(_WORD *, uint64_t, int *);
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  char *__dst;
  uint64_t v101;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4) = *(_WORD *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  v13 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  *v15 = *v16;
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v16 + 10);
  v17 = a3[9];
  v18 = a3[10];
  v19 = a1 + v17;
  v20 = a2 + v17;
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 32);
  *(_BYTE *)(v19 + 48) = *(_BYTE *)(v20 + 48);
  v22 = a1 + v18;
  v23 = a2 + v18;
  v24 = *(_QWORD *)(a2 + v18 + 24);
  if (v24 >> 60 == 15)
  {
    v25 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v25;
  }
  else
  {
    *(_BYTE *)v22 = *(_BYTE *)v23;
    *(_DWORD *)(v22 + 2) = *(_DWORD *)(v23 + 2);
    *(_DWORD *)(v22 + 8) = *(_DWORD *)(v23 + 8);
    v26 = *(_QWORD *)(v23 + 16);
    sub_100031FEC(v26, v24);
    *(_QWORD *)(v22 + 16) = v26;
    *(_QWORD *)(v22 + 24) = v24;
  }
  v27 = a3[11];
  v28 = a3[12];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_WORD *)v29 = *(_WORD *)v30;
  *(_BYTE *)(v29 + 2) = *(_BYTE *)(v30 + 2);
  v31 = a1 + v28;
  v32 = a2 + v28;
  *(_BYTE *)v31 = *(_BYTE *)v32;
  *(_DWORD *)(v31 + 2) = *(_DWORD *)(v32 + 2);
  *(_QWORD *)(v31 + 6) = *(_QWORD *)(v32 + 6);
  *(_QWORD *)(v31 + 14) = *(_QWORD *)(v32 + 14);
  *(_WORD *)(v31 + 26) = *(_WORD *)(v32 + 26);
  *(_DWORD *)(v31 + 22) = *(_DWORD *)(v32 + 22);
  *(_WORD *)(v31 + 28) = *(_WORD *)(v32 + 28);
  *(_DWORD *)(v31 + 30) = *(_DWORD *)(v32 + 30);
  v33 = *(_QWORD *)(v32 + 40);
  *(_QWORD *)(v31 + 40) = v33;
  v34 = a3[13];
  v35 = a3[14];
  v36 = a1 + v34;
  v37 = a2 + v34;
  *(_BYTE *)v36 = *(_BYTE *)v37;
  v38 = *(_QWORD *)(v37 + 16);
  *(_QWORD *)(v36 + 8) = *(_QWORD *)(v37 + 8);
  *(_QWORD *)(v36 + 16) = v38;
  v39 = (_WORD *)(a1 + v35);
  v40 = (_WORD *)(a2 + v35);
  v41 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
  v42 = *((_QWORD *)v41 - 1);
  v43 = *(unsigned int (**)(_WORD *, uint64_t, int *))(v42 + 48);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v38);
  if (v43(v40, 1, v41))
  {
    v44 = sub_100012C44((uint64_t *)&unk_100410250);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v101 = v42;
    *v39 = *v40;
    *((_BYTE *)v39 + 2) = *((_BYTE *)v40 + 2);
    *((_DWORD *)v39 + 1) = *((_DWORD *)v40 + 1);
    v39[4] = v40[4];
    *(_DWORD *)(v39 + 5) = *(_DWORD *)(v40 + 5);
    *(_DWORD *)((char *)v39 + 13) = *(_DWORD *)((char *)v40 + 13);
    v39[12] = v40[12];
    *((_DWORD *)v39 + 5) = *((_DWORD *)v40 + 5);
    v45 = *(_DWORD *)(v40 + 13);
    *(_DWORD *)((char *)v39 + 29) = *(_DWORD *)((char *)v40 + 29);
    *(_DWORD *)(v39 + 13) = v45;
    v99 = *((_QWORD *)v40 + 6);
    *((_QWORD *)v39 + 5) = *((_QWORD *)v40 + 5);
    *((_QWORD *)v39 + 6) = v99;
    *((_DWORD *)v39 + 14) = *((_DWORD *)v40 + 14);
    *(_DWORD *)((char *)v39 + 59) = *(_DWORD *)((char *)v40 + 59);
    *((_BYTE *)v39 + 63) = *((_BYTE *)v40 + 63);
    *((_DWORD *)v39 + 16) = *((_DWORD *)v40 + 16);
    *((_BYTE *)v39 + 68) = *((_BYTE *)v40 + 68);
    v46 = *((_DWORD *)v40 + 18);
    *((_BYTE *)v39 + 76) = *((_BYTE *)v40 + 76);
    *((_DWORD *)v39 + 18) = v46;
    *(_OWORD *)((char *)v39 + 77) = *(_OWORD *)((char *)v40 + 77);
    *(_WORD *)((char *)v39 + 93) = *(_WORD *)((char *)v40 + 93);
    v47 = v41[34];
    __dst = (char *)v39 + v47;
    v48 = (char *)v40 + v47;
    v49 = type metadata accessor for DispatchTimeInterval(0);
    v50 = *(_QWORD *)(v49 - 8);
    v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain(v99);
    if (v51(v48, 1, v49))
    {
      v52 = sub_100012C44(&qword_100407210);
      memcpy(__dst, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(__dst, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v49);
    }
    v53 = v41[35];
    v54 = (char *)v39 + v53;
    v55 = (char *)v40 + v53;
    *(_DWORD *)v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
    v56 = v41[36];
    v57 = (char *)v39 + v56;
    v58 = (char *)v40 + v56;
    v57[4] = v58[4];
    *(_DWORD *)v57 = *(_DWORD *)v58;
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v101 + 56))(v39, 0, 1, v41);
  }
  v59 = a3[15];
  v60 = a3[16];
  v61 = (_OWORD *)(a1 + v59);
  v62 = (_OWORD *)(a2 + v59);
  v63 = v62[1];
  *v61 = *v62;
  v61[1] = v63;
  *(_OWORD *)((char *)v61 + 25) = *(_OWORD *)((char *)v62 + 25);
  v64 = a1 + v60;
  v65 = a2 + v60;
  *(_WORD *)v64 = *(_WORD *)v65;
  *(_BYTE *)(v64 + 2) = *(_BYTE *)(v65 + 2);
  v66 = a3[17];
  v67 = a3[18];
  v68 = a1 + v66;
  v69 = a2 + v66;
  v70 = *(_OWORD *)(v69 + 16);
  *(_OWORD *)v68 = *(_OWORD *)v69;
  *(_OWORD *)(v68 + 16) = v70;
  *(_QWORD *)(v68 + 32) = *(_QWORD *)(v69 + 32);
  v71 = a1 + v67;
  v72 = a2 + v67;
  *(_DWORD *)v71 = *(_DWORD *)v72;
  *(_WORD *)(v71 + 4) = *(_WORD *)(v72 + 4);
  v73 = *(_QWORD *)(v72 + 8);
  *(_QWORD *)(v71 + 8) = v73;
  v74 = a3[19];
  v75 = a3[20];
  v76 = (uint64_t *)(a1 + v74);
  v77 = (uint64_t *)(a2 + v74);
  v78 = *v77;
  v79 = v77[1];
  *v76 = *v77;
  v76[1] = v79;
  v80 = *(_QWORD *)(a2 + v75);
  *(_QWORD *)(a1 + v75) = v80;
  v81 = a3[21];
  v82 = a3[22];
  v83 = a1 + v81;
  v84 = a2 + v81;
  *(_DWORD *)v83 = *(_DWORD *)v84;
  *(_BYTE *)(v83 + 4) = *(_BYTE *)(v84 + 4);
  v85 = a1 + v82;
  v86 = a2 + v82;
  *(_DWORD *)v85 = *(_DWORD *)v86;
  *(_BYTE *)(v85 + 4) = *(_BYTE *)(v86 + 4);
  v87 = a3[23];
  v88 = a3[24];
  v89 = a1 + v87;
  v90 = a2 + v87;
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  v91 = a1 + v88;
  v92 = a2 + v88;
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  v93 = a3[25];
  v94 = a3[26];
  v95 = a1 + v93;
  v96 = a2 + v93;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(a1 + v94) = *(_BYTE *)(a2 + v94);
  v97 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v97) = *(_BYTE *)(a2 + v97);
  *(_BYTE *)(a1 + a3[29]) = *(_BYTE *)(a2 + a3[29]);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v80);
  return a1;
}

uint64_t assignWithCopy for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 *v53;
  int *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, int *);
  int v57;
  int v58;
  __int16 v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  uint64_t (*v86)(void *, uint64_t, uint64_t);
  int v87;
  size_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  int v105;
  uint64_t v106;
  _OWORD *v107;
  __int128 *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  __int16 *v113;
  __int16 v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v156;
  uint64_t v157;
  void *__src;
  uint64_t v159;
  void *v160;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v8[5] = v9[5];
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v14 = a3[8];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = *(_OWORD *)((char *)v16 + 10);
  *v15 = *v16;
  *(_OWORD *)((char *)v15 + 10) = v17;
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_BYTE *)(v20 + 48);
  v23 = *(_OWORD *)(v20 + 16);
  v22 = *(_OWORD *)(v20 + 32);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v23;
  *(_OWORD *)(v19 + 32) = v22;
  *(_BYTE *)(v19 + 48) = v21;
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)(a1 + v24 + 24) >> 60;
  v28 = *(_QWORD *)(a2 + v24 + 24) >> 60;
  if (v27 <= 0xE)
  {
    if (v28 <= 0xE)
    {
      *(_BYTE *)v25 = *(_BYTE *)v26;
      *(_WORD *)(v25 + 2) = *(_WORD *)(v26 + 2);
      *(_WORD *)(v25 + 4) = *(_WORD *)(v26 + 4);
      *(_DWORD *)(v25 + 8) = *(_DWORD *)(v26 + 8);
      v33 = *(_QWORD *)(v26 + 16);
      v34 = *(_QWORD *)(v26 + 24);
      sub_100031FEC(v33, v34);
      v35 = *(_QWORD *)(v25 + 16);
      v36 = *(_QWORD *)(v25 + 24);
      *(_QWORD *)(v25 + 16) = v33;
      *(_QWORD *)(v25 + 24) = v34;
      sub_10000E614(v35, v36);
    }
    else
    {
      sub_100126360(v25);
      v30 = *(_OWORD *)(v26 + 16);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *(_OWORD *)(v25 + 16) = v30;
    }
  }
  else if (v28 <= 0xE)
  {
    *(_BYTE *)v25 = *(_BYTE *)v26;
    *(_WORD *)(v25 + 2) = *(_WORD *)(v26 + 2);
    *(_WORD *)(v25 + 4) = *(_WORD *)(v26 + 4);
    *(_DWORD *)(v25 + 8) = *(_DWORD *)(v26 + 8);
    v31 = *(_QWORD *)(v26 + 16);
    v32 = *(_QWORD *)(v26 + 24);
    sub_100031FEC(v31, v32);
    *(_QWORD *)(v25 + 16) = v31;
    *(_QWORD *)(v25 + 24) = v32;
  }
  else
  {
    v29 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 16) = v29;
  }
  v37 = a3[11];
  v38 = a1 + v37;
  v39 = (__int16 *)(a2 + v37);
  v40 = *v39;
  *(_BYTE *)(v38 + 2) = *((_BYTE *)v39 + 2);
  *(_WORD *)v38 = v40;
  v41 = a3[12];
  v42 = a1 + v41;
  v43 = a2 + v41;
  *(_BYTE *)v42 = *(_BYTE *)v43;
  *(_WORD *)(v42 + 2) = *(_WORD *)(v43 + 2);
  *(_BYTE *)(v42 + 4) = *(_BYTE *)(v43 + 4);
  *(_BYTE *)(v42 + 5) = *(_BYTE *)(v43 + 5);
  *(_WORD *)(v42 + 6) = *(_WORD *)(v43 + 6);
  *(_WORD *)(v42 + 8) = *(_WORD *)(v43 + 8);
  *(_WORD *)(v42 + 10) = *(_WORD *)(v43 + 10);
  *(_WORD *)(v42 + 12) = *(_WORD *)(v43 + 12);
  *(_WORD *)(v42 + 14) = *(_WORD *)(v43 + 14);
  *(_WORD *)(v42 + 16) = *(_WORD *)(v43 + 16);
  *(_BYTE *)(v42 + 18) = *(_BYTE *)(v43 + 18);
  *(_BYTE *)(v42 + 19) = *(_BYTE *)(v43 + 19);
  *(_BYTE *)(v42 + 20) = *(_BYTE *)(v43 + 20);
  *(_BYTE *)(v42 + 21) = *(_BYTE *)(v43 + 21);
  *(_BYTE *)(v42 + 22) = *(_BYTE *)(v43 + 22);
  *(_BYTE *)(v42 + 23) = *(_BYTE *)(v43 + 23);
  *(_BYTE *)(v42 + 24) = *(_BYTE *)(v43 + 24);
  *(_BYTE *)(v42 + 25) = *(_BYTE *)(v43 + 25);
  *(_BYTE *)(v42 + 26) = *(_BYTE *)(v43 + 26);
  *(_BYTE *)(v42 + 27) = *(_BYTE *)(v43 + 27);
  *(_BYTE *)(v42 + 28) = *(_BYTE *)(v43 + 28);
  *(_BYTE *)(v42 + 29) = *(_BYTE *)(v43 + 29);
  *(_WORD *)(v42 + 30) = *(_WORD *)(v43 + 30);
  *(_WORD *)(v42 + 32) = *(_WORD *)(v43 + 32);
  v44 = *(_QWORD *)(v43 + 40);
  v45 = *(_QWORD *)(v42 + 40);
  *(_QWORD *)(v42 + 40) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  v46 = a3[13];
  v47 = a1 + v46;
  v48 = a2 + v46;
  *(_BYTE *)v47 = *(_BYTE *)v48;
  *(_QWORD *)(v47 + 8) = *(_QWORD *)(v48 + 8);
  v49 = *(_QWORD *)(v48 + 16);
  v50 = *(_QWORD *)(v47 + 16);
  *(_QWORD *)(v47 + 16) = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v51 = a3[14];
  v52 = a1 + v51;
  v53 = (__int16 *)(a2 + v51);
  v54 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
  v55 = *((_QWORD *)v54 - 1);
  v56 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56((uint64_t)v53, 1, v54);
  if (!v57)
  {
    if (v58)
    {
      sub_100063824(v52, type metadata accessor for AWDLActionFrame.DataPathState);
      goto LABEL_14;
    }
    v73 = *v53;
    *(_BYTE *)(v52 + 2) = *((_BYTE *)v53 + 2);
    *(_WORD *)v52 = v73;
    v74 = *((_DWORD *)v53 + 1);
    *(_WORD *)(v52 + 8) = v53[4];
    *(_DWORD *)(v52 + 4) = v74;
    v75 = *(_DWORD *)(v53 + 5);
    *(_DWORD *)(v52 + 13) = *(_DWORD *)((char *)v53 + 13);
    *(_DWORD *)(v52 + 10) = v75;
    v76 = *((_DWORD *)v53 + 5);
    *(_WORD *)(v52 + 24) = v53[12];
    *(_DWORD *)(v52 + 20) = v76;
    v77 = *(_DWORD *)(v53 + 13);
    *(_DWORD *)(v52 + 29) = *(_DWORD *)((char *)v53 + 29);
    *(_DWORD *)(v52 + 26) = v77;
    *(_QWORD *)(v52 + 40) = *((_QWORD *)v53 + 5);
    v78 = *((_QWORD *)v53 + 6);
    v79 = *(_QWORD *)(v52 + 48);
    *(_QWORD *)(v52 + 48) = v78;
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRelease(v79);
    v80 = *((_DWORD *)v53 + 14);
    *(_DWORD *)(v52 + 59) = *(_DWORD *)((char *)v53 + 59);
    *(_DWORD *)(v52 + 56) = v80;
    *(_BYTE *)(v52 + 63) = *((_BYTE *)v53 + 63);
    *(_BYTE *)(v52 + 64) = *((_BYTE *)v53 + 64);
    *(_BYTE *)(v52 + 65) = *((_BYTE *)v53 + 65);
    LOWORD(v80) = v53[33];
    *(_BYTE *)(v52 + 68) = *((_BYTE *)v53 + 68);
    *(_WORD *)(v52 + 66) = v80;
    v81 = *((_DWORD *)v53 + 18);
    *(_BYTE *)(v52 + 76) = *((_BYTE *)v53 + 76);
    *(_DWORD *)(v52 + 72) = v81;
    *(_BYTE *)(v52 + 77) = *((_BYTE *)v53 + 77);
    *(_BYTE *)(v52 + 78) = *((_BYTE *)v53 + 78);
    *(_BYTE *)(v52 + 79) = *((_BYTE *)v53 + 79);
    *(_BYTE *)(v52 + 80) = *((_BYTE *)v53 + 80);
    *(_BYTE *)(v52 + 81) = *((_BYTE *)v53 + 81);
    *(_BYTE *)(v52 + 82) = *((_BYTE *)v53 + 82);
    *(_BYTE *)(v52 + 83) = *((_BYTE *)v53 + 83);
    *(_BYTE *)(v52 + 84) = *((_BYTE *)v53 + 84);
    *(_BYTE *)(v52 + 85) = *((_BYTE *)v53 + 85);
    *(_BYTE *)(v52 + 86) = *((_BYTE *)v53 + 86);
    *(_BYTE *)(v52 + 87) = *((_BYTE *)v53 + 87);
    *(_BYTE *)(v52 + 88) = *((_BYTE *)v53 + 88);
    *(_BYTE *)(v52 + 89) = *((_BYTE *)v53 + 89);
    *(_BYTE *)(v52 + 90) = *((_BYTE *)v53 + 90);
    *(_BYTE *)(v52 + 91) = *((_BYTE *)v53 + 91);
    *(_BYTE *)(v52 + 92) = *((_BYTE *)v53 + 92);
    *(_BYTE *)(v52 + 93) = *((_BYTE *)v53 + 93);
    *(_BYTE *)(v52 + 94) = *((_BYTE *)v53 + 94);
    v82 = v54[34];
    v83 = (void *)(v52 + v82);
    v84 = (char *)v53 + v82;
    v85 = type metadata accessor for DispatchTimeInterval(0);
    v157 = *(_QWORD *)(v85 - 8);
    v86 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v157 + 48);
    v160 = v83;
    LODWORD(v83) = v86(v83, 1, v85);
    v87 = v86(v84, 1, v85);
    if ((_DWORD)v83)
    {
      if (!v87)
      {
        (*(void (**)(void *, char *, uint64_t))(v157 + 16))(v160, v84, v85);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v160, 0, 1, v85);
        goto LABEL_25;
      }
      v88 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100407210) - 8) + 64);
      v89 = v160;
    }
    else
    {
      if (!v87)
      {
        (*(void (**)(void *, char *, uint64_t))(v157 + 24))(v160, v84, v85);
        goto LABEL_25;
      }
      (*(void (**)(void *, uint64_t))(v157 + 8))(v160, v85);
      v88 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100407210) - 8) + 64);
      v89 = v160;
    }
    memcpy(v89, v84, v88);
LABEL_25:
    v98 = v54[35];
    v99 = v52 + v98;
    v100 = (int *)((char *)v53 + v98);
    v101 = *v100;
    *(_BYTE *)(v99 + 4) = *((_BYTE *)v100 + 4);
    *(_DWORD *)v99 = v101;
    v102 = v54[36];
    v103 = v52 + v102;
    v104 = (int *)((char *)v53 + v102);
    v105 = *v104;
    *(_BYTE *)(v103 + 4) = *((_BYTE *)v104 + 4);
    *(_DWORD *)v103 = v105;
    goto LABEL_26;
  }
  if (v58)
  {
LABEL_14:
    v72 = sub_100012C44((uint64_t *)&unk_100410250);
    memcpy((void *)v52, v53, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_26;
  }
  v156 = v55;
  v59 = *v53;
  *(_BYTE *)(v52 + 2) = *((_BYTE *)v53 + 2);
  *(_WORD *)v52 = v59;
  v60 = *((_DWORD *)v53 + 1);
  *(_WORD *)(v52 + 8) = v53[4];
  *(_DWORD *)(v52 + 4) = v60;
  v61 = *(_DWORD *)(v53 + 5);
  *(_DWORD *)(v52 + 13) = *(_DWORD *)((char *)v53 + 13);
  *(_DWORD *)(v52 + 10) = v61;
  v62 = *((_DWORD *)v53 + 5);
  *(_WORD *)(v52 + 24) = v53[12];
  *(_DWORD *)(v52 + 20) = v62;
  v63 = *(_DWORD *)(v53 + 13);
  *(_DWORD *)(v52 + 29) = *(_DWORD *)((char *)v53 + 29);
  *(_DWORD *)(v52 + 26) = v63;
  *(_QWORD *)(v52 + 40) = *((_QWORD *)v53 + 5);
  v159 = *((_QWORD *)v53 + 6);
  *(_QWORD *)(v52 + 48) = v159;
  v64 = *((_DWORD *)v53 + 14);
  *(_DWORD *)(v52 + 59) = *(_DWORD *)((char *)v53 + 59);
  *(_DWORD *)(v52 + 56) = v64;
  *(_BYTE *)(v52 + 63) = *((_BYTE *)v53 + 63);
  *(_BYTE *)(v52 + 64) = *((_BYTE *)v53 + 64);
  *(_BYTE *)(v52 + 65) = *((_BYTE *)v53 + 65);
  LOWORD(v64) = v53[33];
  *(_BYTE *)(v52 + 68) = *((_BYTE *)v53 + 68);
  *(_WORD *)(v52 + 66) = v64;
  v65 = *((_DWORD *)v53 + 18);
  *(_BYTE *)(v52 + 76) = *((_BYTE *)v53 + 76);
  *(_DWORD *)(v52 + 72) = v65;
  *(_BYTE *)(v52 + 77) = *((_BYTE *)v53 + 77);
  *(_BYTE *)(v52 + 78) = *((_BYTE *)v53 + 78);
  *(_BYTE *)(v52 + 79) = *((_BYTE *)v53 + 79);
  *(_BYTE *)(v52 + 80) = *((_BYTE *)v53 + 80);
  *(_BYTE *)(v52 + 81) = *((_BYTE *)v53 + 81);
  *(_BYTE *)(v52 + 82) = *((_BYTE *)v53 + 82);
  *(_BYTE *)(v52 + 83) = *((_BYTE *)v53 + 83);
  *(_BYTE *)(v52 + 84) = *((_BYTE *)v53 + 84);
  *(_BYTE *)(v52 + 85) = *((_BYTE *)v53 + 85);
  *(_BYTE *)(v52 + 86) = *((_BYTE *)v53 + 86);
  *(_BYTE *)(v52 + 87) = *((_BYTE *)v53 + 87);
  *(_BYTE *)(v52 + 88) = *((_BYTE *)v53 + 88);
  *(_BYTE *)(v52 + 89) = *((_BYTE *)v53 + 89);
  *(_BYTE *)(v52 + 90) = *((_BYTE *)v53 + 90);
  *(_BYTE *)(v52 + 91) = *((_BYTE *)v53 + 91);
  *(_BYTE *)(v52 + 92) = *((_BYTE *)v53 + 92);
  *(_BYTE *)(v52 + 93) = *((_BYTE *)v53 + 93);
  *(_BYTE *)(v52 + 94) = *((_BYTE *)v53 + 94);
  v66 = v54[34];
  __src = (void *)(v52 + v66);
  v67 = (char *)v53 + v66;
  v68 = type metadata accessor for DispatchTimeInterval(0);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
  swift_bridgeObjectRetain(v159);
  if (v70(v67, 1, v68))
  {
    v71 = sub_100012C44(&qword_100407210);
    memcpy(__src, v67, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v69 + 16))(__src, v67, v68);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(__src, 0, 1, v68);
  }
  v90 = v54[35];
  v91 = v52 + v90;
  v92 = (int *)((char *)v53 + v90);
  v93 = *v92;
  *(_BYTE *)(v91 + 4) = *((_BYTE *)v92 + 4);
  *(_DWORD *)v91 = v93;
  v94 = v54[36];
  v95 = v52 + v94;
  v96 = (int *)((char *)v53 + v94);
  v97 = *v96;
  *(_BYTE *)(v95 + 4) = *((_BYTE *)v96 + 4);
  *(_DWORD *)v95 = v97;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v156 + 56))(v52, 0, 1, v54);
LABEL_26:
  v106 = a3[15];
  v107 = (_OWORD *)(a1 + v106);
  v108 = (__int128 *)(a2 + v106);
  v109 = *v108;
  v110 = v108[1];
  *(_OWORD *)((char *)v107 + 25) = *(__int128 *)((char *)v108 + 25);
  *v107 = v109;
  v107[1] = v110;
  v111 = a3[16];
  v112 = a1 + v111;
  v113 = (__int16 *)(a2 + v111);
  v114 = *v113;
  *(_BYTE *)(v112 + 2) = *((_BYTE *)v113 + 2);
  *(_WORD *)v112 = v114;
  v115 = a3[17];
  v116 = a1 + v115;
  v117 = (__int128 *)(a2 + v115);
  v118 = *v117;
  v119 = v117[1];
  *(_QWORD *)(v116 + 32) = *((_QWORD *)v117 + 4);
  *(_OWORD *)v116 = v118;
  *(_OWORD *)(v116 + 16) = v119;
  v120 = a3[18];
  v121 = a1 + v120;
  v122 = a2 + v120;
  *(_DWORD *)v121 = *(_DWORD *)v122;
  *(_BYTE *)(v121 + 4) = *(_BYTE *)(v122 + 4);
  *(_BYTE *)(v121 + 5) = *(_BYTE *)(v122 + 5);
  v123 = *(_QWORD *)(v122 + 8);
  v124 = *(_QWORD *)(v121 + 8);
  *(_QWORD *)(v121 + 8) = v123;
  swift_bridgeObjectRetain(v123);
  swift_bridgeObjectRelease(v124);
  v125 = a3[19];
  v126 = a1 + v125;
  v127 = a2 + v125;
  v128 = *(_QWORD *)(a2 + v125);
  v129 = *(_QWORD *)(a1 + v125);
  *(_QWORD *)(a1 + v125) = v128;
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRelease(v129);
  v130 = *(_QWORD *)(v126 + 8);
  v131 = *(_QWORD *)(v127 + 8);
  *(_QWORD *)(v126 + 8) = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v130);
  v132 = a3[20];
  v133 = *(_QWORD *)(a2 + v132);
  v134 = *(_QWORD *)(a1 + v132);
  *(_QWORD *)(a1 + v132) = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease(v134);
  v135 = a3[21];
  v136 = a1 + v135;
  v137 = (int *)(a2 + v135);
  v138 = *v137;
  *(_BYTE *)(v136 + 4) = *((_BYTE *)v137 + 4);
  *(_DWORD *)v136 = v138;
  v139 = a3[22];
  v140 = a1 + v139;
  v141 = (int *)(a2 + v139);
  v142 = *v141;
  *(_BYTE *)(v140 + 4) = *((_BYTE *)v141 + 4);
  *(_DWORD *)v140 = v142;
  v143 = a3[23];
  v144 = a1 + v143;
  v145 = (uint64_t *)(a2 + v143);
  v146 = *v145;
  *(_BYTE *)(v144 + 8) = *((_BYTE *)v145 + 8);
  *(_QWORD *)v144 = v146;
  v147 = a3[24];
  v148 = a1 + v147;
  v149 = (uint64_t *)(a2 + v147);
  v150 = *v149;
  *(_BYTE *)(v148 + 8) = *((_BYTE *)v149 + 8);
  *(_QWORD *)v148 = v150;
  v151 = a3[25];
  v152 = a1 + v151;
  v153 = (uint64_t *)(a2 + v151);
  v154 = *v153;
  *(_BYTE *)(v152 + 8) = *((_BYTE *)v153 + 8);
  *(_QWORD *)v152 = v154;
  *(_BYTE *)(a1 + a3[26]) = *(_BYTE *)(a2 + a3[26]);
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + a3[28]) = *(_BYTE *)(a2 + a3[28]);
  *(_BYTE *)(a1 + a3[29]) = *(_BYTE *)(a2 + a3[29]);
  return a1;
}

uint64_t sub_100126360(uint64_t a1)
{
  destroy for NANAttribute.P2POperation(a1);
  return a1;
}

uint64_t initializeWithTake for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *__dst;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4) = *(_WORD *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  v13 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  *v15 = *v16;
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v16 + 10);
  v17 = a3[9];
  v18 = a3[10];
  v19 = a1 + v17;
  v20 = a2 + v17;
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 32);
  *(_BYTE *)(v19 + 48) = *(_BYTE *)(v20 + 48);
  v22 = (_OWORD *)(a1 + v18);
  v23 = (_OWORD *)(a2 + v18);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = a3[11];
  v26 = a3[12];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_WORD *)v27 = *(_WORD *)v28;
  *(_BYTE *)(v27 + 2) = *(_BYTE *)(v28 + 2);
  v29 = (_OWORD *)(a1 + v26);
  v30 = (__int128 *)(a2 + v26);
  v31 = *v30;
  v32 = v30[2];
  v29[1] = v30[1];
  v29[2] = v32;
  *v29 = v31;
  v33 = a3[13];
  v34 = a3[14];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_QWORD *)(v35 + 16) = *(_QWORD *)(v36 + 16);
  v37 = (_WORD *)(a1 + v34);
  v38 = (_WORD *)(a2 + v34);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  v39 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
  v40 = *((_QWORD *)v39 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v40 + 48))(v38, 1, v39))
  {
    v41 = sub_100012C44((uint64_t *)&unk_100410250);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    *v37 = *v38;
    *((_BYTE *)v37 + 2) = *((_BYTE *)v38 + 2);
    *((_DWORD *)v37 + 1) = *((_DWORD *)v38 + 1);
    v37[4] = v38[4];
    *(_DWORD *)(v37 + 5) = *(_DWORD *)(v38 + 5);
    *(_DWORD *)((char *)v37 + 13) = *(_DWORD *)((char *)v38 + 13);
    v37[12] = v38[12];
    *((_DWORD *)v37 + 5) = *((_DWORD *)v38 + 5);
    v42 = *(_DWORD *)(v38 + 13);
    *(_DWORD *)((char *)v37 + 29) = *(_DWORD *)((char *)v38 + 29);
    *(_DWORD *)(v37 + 13) = v42;
    *(_OWORD *)(v37 + 20) = *(_OWORD *)(v38 + 20);
    *((_DWORD *)v37 + 14) = *((_DWORD *)v38 + 14);
    *(_DWORD *)((char *)v37 + 59) = *(_DWORD *)((char *)v38 + 59);
    *((_BYTE *)v37 + 63) = *((_BYTE *)v38 + 63);
    *((_DWORD *)v37 + 16) = *((_DWORD *)v38 + 16);
    *((_BYTE *)v37 + 68) = *((_BYTE *)v38 + 68);
    *((_DWORD *)v37 + 18) = *((_DWORD *)v38 + 18);
    *((_BYTE *)v37 + 76) = *((_BYTE *)v38 + 76);
    *(_OWORD *)((char *)v37 + 77) = *(_OWORD *)((char *)v38 + 77);
    *(_WORD *)((char *)v37 + 93) = *(_WORD *)((char *)v38 + 93);
    v43 = v39[34];
    __dst = (char *)v37 + v43;
    v44 = (char *)v38 + v43;
    v45 = type metadata accessor for DispatchTimeInterval(0);
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      v47 = sub_100012C44(&qword_100407210);
      memcpy(__dst, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(__dst, v44, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v45);
    }
    v48 = v39[35];
    v49 = (char *)v37 + v48;
    v50 = (char *)v38 + v48;
    *(_DWORD *)v49 = *(_DWORD *)v50;
    v49[4] = v50[4];
    v51 = v39[36];
    v52 = (char *)v37 + v51;
    v53 = (char *)v38 + v51;
    v52[4] = v53[4];
    *(_DWORD *)v52 = *(_DWORD *)v53;
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v40 + 56))(v37, 0, 1, v39);
  }
  v54 = a3[15];
  v55 = a3[16];
  v56 = (_OWORD *)(a1 + v54);
  v57 = (_OWORD *)(a2 + v54);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  *(_OWORD *)((char *)v56 + 25) = *(_OWORD *)((char *)v57 + 25);
  v59 = a1 + v55;
  v60 = a2 + v55;
  *(_WORD *)v59 = *(_WORD *)v60;
  *(_BYTE *)(v59 + 2) = *(_BYTE *)(v60 + 2);
  v61 = a3[17];
  v62 = a3[18];
  v63 = a1 + v61;
  v64 = a2 + v61;
  v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v65;
  *(_QWORD *)(v63 + 32) = *(_QWORD *)(v64 + 32);
  *(_OWORD *)(a1 + v62) = *(_OWORD *)(a2 + v62);
  v66 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_QWORD *)(a1 + v66) = *(_QWORD *)(a2 + v66);
  v67 = a3[21];
  v68 = a3[22];
  v69 = a1 + v67;
  v70 = a2 + v67;
  *(_DWORD *)v69 = *(_DWORD *)v70;
  *(_BYTE *)(v69 + 4) = *(_BYTE *)(v70 + 4);
  v71 = a1 + v68;
  v72 = a2 + v68;
  *(_DWORD *)v71 = *(_DWORD *)v72;
  *(_BYTE *)(v71 + 4) = *(_BYTE *)(v72 + 4);
  v73 = a3[23];
  v74 = a3[24];
  v75 = a1 + v73;
  v76 = a2 + v73;
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *(_BYTE *)(v75 + 8) = *(_BYTE *)(v76 + 8);
  v77 = a1 + v74;
  v78 = a2 + v74;
  *(_BYTE *)(v77 + 8) = *(_BYTE *)(v78 + 8);
  *(_QWORD *)v77 = *(_QWORD *)v78;
  v79 = a3[25];
  v80 = a3[26];
  v81 = a1 + v79;
  v82 = a2 + v79;
  *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
  *(_QWORD *)v81 = *(_QWORD *)v82;
  *(_BYTE *)(a1 + v80) = *(_BYTE *)(a2 + v80);
  v83 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v83) = *(_BYTE *)(a2 + v83);
  *(_BYTE *)(a1 + a3[29]) = *(_BYTE *)(a2 + a3[29]);
  return a1;
}

uint64_t assignWithTake for AWDLPeer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, int *);
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t (*v63)(void *, uint64_t, uint64_t);
  int v64;
  size_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  void *__dst;
  void *__dsta;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4) = *(_WORD *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  v13 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  *v15 = *v16;
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)v16 + 10);
  v17 = a3[9];
  v18 = a3[10];
  v19 = a1 + v17;
  v20 = a2 + v17;
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 32);
  *(_BYTE *)(v19 + 48) = *(_BYTE *)(v20 + 48);
  v22 = a1 + v18;
  v23 = a2 + v18;
  v24 = *(_QWORD *)(a1 + v18 + 24);
  if (v24 >> 60 == 15)
    goto LABEL_4;
  v25 = *(_QWORD *)(v23 + 24);
  if (v25 >> 60 == 15)
  {
    sub_100126360(v22);
LABEL_4:
    v26 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v26;
    goto LABEL_6;
  }
  *(_BYTE *)v22 = *(_BYTE *)v23;
  *(_DWORD *)(v22 + 2) = *(_DWORD *)(v23 + 2);
  *(_DWORD *)(v22 + 8) = *(_DWORD *)(v23 + 8);
  v27 = *(_QWORD *)(v22 + 16);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(v22 + 24) = v25;
  sub_10000E614(v27, v24);
LABEL_6:
  v28 = a3[11];
  v29 = a3[12];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_WORD *)v30 = *(_WORD *)v31;
  *(_BYTE *)(v30 + 2) = *(_BYTE *)(v31 + 2);
  v32 = a1 + v29;
  v33 = a2 + v29;
  *(_BYTE *)v32 = *(_BYTE *)v33;
  *(_DWORD *)(v32 + 2) = *(_DWORD *)(v33 + 2);
  *(_QWORD *)(v32 + 6) = *(_QWORD *)(v33 + 6);
  *(_DWORD *)(v32 + 14) = *(_DWORD *)(v33 + 14);
  *(_QWORD *)(v32 + 18) = *(_QWORD *)(v33 + 18);
  *(_DWORD *)(v32 + 26) = *(_DWORD *)(v33 + 26);
  *(_WORD *)(v32 + 30) = *(_WORD *)(v33 + 30);
  *(_WORD *)(v32 + 32) = *(_WORD *)(v33 + 32);
  v34 = *(_QWORD *)(v32 + 40);
  *(_QWORD *)(v32 + 40) = *(_QWORD *)(v33 + 40);
  swift_bridgeObjectRelease(v34);
  v35 = a3[13];
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_BYTE *)v36 = *(_BYTE *)v37;
  v39 = *(_QWORD *)(v37 + 8);
  v38 = *(_QWORD *)(v37 + 16);
  v40 = *(_QWORD *)(v36 + 16);
  *(_QWORD *)(v36 + 8) = v39;
  *(_QWORD *)(v36 + 16) = v38;
  swift_bridgeObjectRelease(v40);
  v41 = a3[14];
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
  v45 = *((_QWORD *)v44 - 1);
  v46 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (!v47)
  {
    if (v48)
    {
      sub_100063824(v42, type metadata accessor for AWDLActionFrame.DataPathState);
      goto LABEL_12;
    }
    *(_WORD *)v42 = *(_WORD *)v43;
    *(_BYTE *)(v42 + 2) = *(_BYTE *)(v43 + 2);
    *(_DWORD *)(v42 + 4) = *(_DWORD *)(v43 + 4);
    *(_WORD *)(v42 + 8) = *(_WORD *)(v43 + 8);
    *(_DWORD *)(v42 + 10) = *(_DWORD *)(v43 + 10);
    *(_DWORD *)(v42 + 13) = *(_DWORD *)(v43 + 13);
    *(_WORD *)(v42 + 24) = *(_WORD *)(v43 + 24);
    *(_DWORD *)(v42 + 20) = *(_DWORD *)(v43 + 20);
    v56 = *(_DWORD *)(v43 + 26);
    *(_DWORD *)(v42 + 29) = *(_DWORD *)(v43 + 29);
    *(_DWORD *)(v42 + 26) = v56;
    v57 = *(_QWORD *)(v43 + 48);
    v58 = *(_QWORD *)(v42 + 48);
    *(_QWORD *)(v42 + 40) = *(_QWORD *)(v43 + 40);
    *(_QWORD *)(v42 + 48) = v57;
    swift_bridgeObjectRelease(v58);
    *(_DWORD *)(v42 + 56) = *(_DWORD *)(v43 + 56);
    *(_DWORD *)(v42 + 59) = *(_DWORD *)(v43 + 59);
    *(_BYTE *)(v42 + 63) = *(_BYTE *)(v43 + 63);
    *(_BYTE *)(v42 + 64) = *(_BYTE *)(v43 + 64);
    *(_BYTE *)(v42 + 65) = *(_BYTE *)(v43 + 65);
    *(_WORD *)(v42 + 66) = *(_WORD *)(v43 + 66);
    *(_BYTE *)(v42 + 68) = *(_BYTE *)(v43 + 68);
    *(_BYTE *)(v42 + 76) = *(_BYTE *)(v43 + 76);
    *(_DWORD *)(v42 + 72) = *(_DWORD *)(v43 + 72);
    *(_BYTE *)(v42 + 77) = *(_BYTE *)(v43 + 77);
    *(_BYTE *)(v42 + 78) = *(_BYTE *)(v43 + 78);
    *(_BYTE *)(v42 + 79) = *(_BYTE *)(v43 + 79);
    *(_BYTE *)(v42 + 80) = *(_BYTE *)(v43 + 80);
    *(_BYTE *)(v42 + 81) = *(_BYTE *)(v43 + 81);
    *(_BYTE *)(v42 + 82) = *(_BYTE *)(v43 + 82);
    *(_BYTE *)(v42 + 83) = *(_BYTE *)(v43 + 83);
    *(_BYTE *)(v42 + 84) = *(_BYTE *)(v43 + 84);
    *(_BYTE *)(v42 + 85) = *(_BYTE *)(v43 + 85);
    *(_BYTE *)(v42 + 86) = *(_BYTE *)(v43 + 86);
    *(_BYTE *)(v42 + 87) = *(_BYTE *)(v43 + 87);
    *(_BYTE *)(v42 + 88) = *(_BYTE *)(v43 + 88);
    *(_BYTE *)(v42 + 89) = *(_BYTE *)(v43 + 89);
    *(_BYTE *)(v42 + 90) = *(_BYTE *)(v43 + 90);
    *(_BYTE *)(v42 + 91) = *(_BYTE *)(v43 + 91);
    *(_BYTE *)(v42 + 92) = *(_BYTE *)(v43 + 92);
    *(_BYTE *)(v42 + 93) = *(_BYTE *)(v43 + 93);
    *(_BYTE *)(v42 + 94) = *(_BYTE *)(v43 + 94);
    v59 = v44[34];
    v60 = (void *)(v42 + v59);
    v61 = (void *)(v43 + v59);
    v62 = type metadata accessor for DispatchTimeInterval(0);
    v119 = *(_QWORD *)(v62 - 8);
    v63 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v119 + 48);
    __dsta = v60;
    LODWORD(v60) = v63(v60, 1, v62);
    v64 = v63(v61, 1, v62);
    if ((_DWORD)v60)
    {
      if (!v64)
      {
        (*(void (**)(void *, void *, uint64_t))(v119 + 32))(__dsta, v61, v62);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v119 + 56))(__dsta, 0, 1, v62);
        goto LABEL_23;
      }
      v65 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100407210) - 8) + 64);
      v66 = __dsta;
    }
    else
    {
      if (!v64)
      {
        (*(void (**)(void *, void *, uint64_t))(v119 + 40))(__dsta, v61, v62);
        goto LABEL_23;
      }
      (*(void (**)(void *, uint64_t))(v119 + 8))(__dsta, v62);
      v65 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100407210) - 8) + 64);
      v66 = __dsta;
    }
    memcpy(v66, v61, v65);
LABEL_23:
    v73 = v44[35];
    v74 = v42 + v73;
    v75 = v43 + v73;
    *(_DWORD *)v74 = *(_DWORD *)v75;
    *(_BYTE *)(v74 + 4) = *(_BYTE *)(v75 + 4);
    v76 = v44[36];
    v77 = v42 + v76;
    v78 = v43 + v76;
    *(_BYTE *)(v77 + 4) = *(_BYTE *)(v78 + 4);
    *(_DWORD *)v77 = *(_DWORD *)v78;
    goto LABEL_24;
  }
  if (v48)
  {
LABEL_12:
    v55 = sub_100012C44((uint64_t *)&unk_100410250);
    memcpy((void *)v42, (const void *)v43, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_24;
  }
  *(_WORD *)v42 = *(_WORD *)v43;
  *(_BYTE *)(v42 + 2) = *(_BYTE *)(v43 + 2);
  *(_DWORD *)(v42 + 4) = *(_DWORD *)(v43 + 4);
  *(_WORD *)(v42 + 8) = *(_WORD *)(v43 + 8);
  *(_DWORD *)(v42 + 10) = *(_DWORD *)(v43 + 10);
  *(_DWORD *)(v42 + 13) = *(_DWORD *)(v43 + 13);
  *(_WORD *)(v42 + 24) = *(_WORD *)(v43 + 24);
  *(_DWORD *)(v42 + 20) = *(_DWORD *)(v43 + 20);
  v49 = *(_DWORD *)(v43 + 26);
  *(_DWORD *)(v42 + 29) = *(_DWORD *)(v43 + 29);
  *(_DWORD *)(v42 + 26) = v49;
  *(_OWORD *)(v42 + 40) = *(_OWORD *)(v43 + 40);
  *(_DWORD *)(v42 + 56) = *(_DWORD *)(v43 + 56);
  *(_DWORD *)(v42 + 59) = *(_DWORD *)(v43 + 59);
  *(_BYTE *)(v42 + 63) = *(_BYTE *)(v43 + 63);
  *(_DWORD *)(v42 + 64) = *(_DWORD *)(v43 + 64);
  *(_BYTE *)(v42 + 68) = *(_BYTE *)(v43 + 68);
  *(_DWORD *)(v42 + 72) = *(_DWORD *)(v43 + 72);
  *(_BYTE *)(v42 + 76) = *(_BYTE *)(v43 + 76);
  *(_OWORD *)(v42 + 77) = *(_OWORD *)(v43 + 77);
  *(_WORD *)(v42 + 93) = *(_WORD *)(v43 + 93);
  v50 = v44[34];
  __dst = (void *)(v42 + v50);
  v51 = (const void *)(v43 + v50);
  v52 = type metadata accessor for DispatchTimeInterval(0);
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
  {
    v54 = sub_100012C44(&qword_100407210);
    memcpy(__dst, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v53 + 32))(__dst, v51, v52);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v52);
  }
  v67 = v44[35];
  v68 = v42 + v67;
  v69 = v43 + v67;
  *(_DWORD *)v68 = *(_DWORD *)v69;
  *(_BYTE *)(v68 + 4) = *(_BYTE *)(v69 + 4);
  v70 = v44[36];
  v71 = v42 + v70;
  v72 = v43 + v70;
  *(_BYTE *)(v71 + 4) = *(_BYTE *)(v72 + 4);
  *(_DWORD *)v71 = *(_DWORD *)v72;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v45 + 56))(v42, 0, 1, v44);
LABEL_24:
  v79 = a3[15];
  v80 = a3[16];
  v81 = (_OWORD *)(a1 + v79);
  v82 = (_OWORD *)(a2 + v79);
  v83 = v82[1];
  *v81 = *v82;
  v81[1] = v83;
  *(_OWORD *)((char *)v81 + 25) = *(_OWORD *)((char *)v82 + 25);
  v84 = a1 + v80;
  v85 = a2 + v80;
  *(_WORD *)v84 = *(_WORD *)v85;
  *(_BYTE *)(v84 + 2) = *(_BYTE *)(v85 + 2);
  v86 = a3[17];
  v87 = a3[18];
  v88 = a1 + v86;
  v89 = a2 + v86;
  v90 = *(_OWORD *)(v89 + 16);
  *(_OWORD *)v88 = *(_OWORD *)v89;
  *(_OWORD *)(v88 + 16) = v90;
  *(_QWORD *)(v88 + 32) = *(_QWORD *)(v89 + 32);
  v91 = a1 + v87;
  v92 = a2 + v87;
  *(_DWORD *)v91 = *(_DWORD *)v92;
  *(_BYTE *)(v91 + 4) = *(_BYTE *)(v92 + 4);
  *(_BYTE *)(v91 + 5) = *(_BYTE *)(v92 + 5);
  v93 = *(_QWORD *)(v91 + 8);
  *(_QWORD *)(v91 + 8) = *(_QWORD *)(v92 + 8);
  swift_bridgeObjectRelease(v93);
  v94 = a3[19];
  v95 = a1 + v94;
  v96 = a2 + v94;
  v97 = *(_QWORD *)(a1 + v94);
  *(_QWORD *)(a1 + v94) = *(_QWORD *)(a2 + v94);
  swift_bridgeObjectRelease(v97);
  v98 = *(_QWORD *)(v95 + 8);
  *(_QWORD *)(v95 + 8) = *(_QWORD *)(v96 + 8);
  swift_bridgeObjectRelease(v98);
  v99 = a3[20];
  v100 = *(_QWORD *)(a1 + v99);
  *(_QWORD *)(a1 + v99) = *(_QWORD *)(a2 + v99);
  swift_bridgeObjectRelease(v100);
  v101 = a3[21];
  v102 = a3[22];
  v103 = a1 + v101;
  v104 = a2 + v101;
  *(_DWORD *)v103 = *(_DWORD *)v104;
  *(_BYTE *)(v103 + 4) = *(_BYTE *)(v104 + 4);
  v105 = a1 + v102;
  v106 = a2 + v102;
  *(_DWORD *)v105 = *(_DWORD *)v106;
  *(_BYTE *)(v105 + 4) = *(_BYTE *)(v106 + 4);
  v107 = a3[23];
  v108 = a3[24];
  v109 = a1 + v107;
  v110 = a2 + v107;
  *(_QWORD *)v109 = *(_QWORD *)v110;
  *(_BYTE *)(v109 + 8) = *(_BYTE *)(v110 + 8);
  v111 = a1 + v108;
  v112 = a2 + v108;
  *(_BYTE *)(v111 + 8) = *(_BYTE *)(v112 + 8);
  *(_QWORD *)v111 = *(_QWORD *)v112;
  v113 = a3[25];
  v114 = a3[26];
  v115 = a1 + v113;
  v116 = a2 + v113;
  *(_QWORD *)v115 = *(_QWORD *)v116;
  *(_BYTE *)(v115 + 8) = *(_BYTE *)(v116 + 8);
  *(_BYTE *)(a1 + v114) = *(_BYTE *)(a2 + v114);
  v117 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v117) = *(_BYTE *)(a2 + v117);
  *(_BYTE *)(a1 + a3[29]) = *(_BYTE *)(a2 + a3[29]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100126FB0);
}

uint64_t sub_100126FB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100012C44((uint64_t *)&unk_100410250);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[14];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[19]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012708C);
}

uint64_t sub_10012708C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_100012C44((uint64_t *)&unk_100410250);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[14];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[19]) = (a2 - 1);
  return result;
}

void sub_100127158(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[26];

  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_1003495F0;
    v4 = type metadata accessor for DispatchTime(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[4] = &unk_100349608;
      v8[5] = &unk_100349620;
      v8[6] = &unk_100349638;
      v8[7] = &unk_100349650;
      v8[8] = &unk_100349668;
      v8[9] = &unk_100349680;
      sub_1001272B8(319);
      if (v7 <= 0x3F)
      {
        v8[10] = *(_QWORD *)(v6 - 8) + 64;
        v8[11] = &unk_100349698;
        v8[12] = &unk_1003496B0;
        v8[13] = &unk_1003496C8;
        v8[14] = &unk_1003496E0;
        v8[15] = &unk_1003496F8;
        v8[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v8[17] = &unk_100349710;
        v8[18] = &unk_100349710;
        v8[19] = &unk_100349728;
        v8[20] = &unk_100349728;
        v8[21] = &unk_100349728;
        v8[22] = &unk_100349740;
        v8[23] = &unk_100349758;
        v8[24] = &unk_100349758;
        v8[25] = &unk_100349758;
        swift_initStructMetadata(a1, 256, 26, v8, a1 + 16);
      }
    }
  }
}

void sub_1001272B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100408338)
  {
    v2 = type metadata accessor for AWDLActionFrame.DataPathState(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100408338);
  }
}

uint64_t storeEnumTagSinglePayload for AWDLPeer.Reachability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100127358 + 4 * byte_100349495[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10012738C + 4 * byte_100349490[v4]))();
}

uint64_t sub_10012738C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127394(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012739CLL);
  return result;
}

uint64_t sub_1001273A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001273B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001273B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001273BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLPeer.Reachability()
{
  return &type metadata for AWDLPeer.Reachability;
}

_BYTE *initializeBufferWithCopyOfBuffer for AWDLPeer.AdvertisedService(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    v8 = a2[4];
    *((_QWORD *)v4 + 3) = a2[3];
    *((_QWORD *)v4 + 4) = v8;
    v4[40] = *((_BYTE *)a2 + 40);
    v4[41] = *((_BYTE *)a2 + 41);
    v9 = a2[7];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v9)
    {
      *((_QWORD *)v4 + 6) = a2[6];
      *((_QWORD *)v4 + 7) = v9;
      v10 = a2[9];
      *((_QWORD *)v4 + 8) = a2[8];
      *((_QWORD *)v4 + 9) = v10;
      v4[80] = *((_BYTE *)a2 + 80);
      v4[81] = *((_BYTE *)a2 + 81);
      v11 = a2[11];
      v12 = a2[12];
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      sub_100031FEC(v11, v12);
      *((_QWORD *)v4 + 11) = v11;
      *((_QWORD *)v4 + 12) = v12;
    }
    else
    {
      v14 = *((_OWORD *)a2 + 4);
      *((_OWORD *)v4 + 3) = *((_OWORD *)a2 + 3);
      *((_OWORD *)v4 + 4) = v14;
      *((_OWORD *)v4 + 5) = *((_OWORD *)a2 + 5);
      *((_QWORD *)v4 + 12) = a2[12];
    }
    v15 = *(int *)(a3 + 28);
    v16 = &v4[v15];
    v17 = (uint64_t)a2 + v15;
    v18 = *(uint64_t *)((char *)a2 + v15);
    v19 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)v16 = v18;
    *((_QWORD *)v16 + 1) = v19;
    v20 = *(_QWORD *)(v17 + 24);
    *((_QWORD *)v16 + 2) = *(_QWORD *)(v17 + 16);
    *((_QWORD *)v16 + 3) = v20;
    v16[32] = *(_BYTE *)(v17 + 32);
    v16[33] = *(_BYTE *)(v17 + 33);
    v21 = (int *)type metadata accessor for DNSRecords.SRV(0);
    v22 = v21[5];
    v23 = &v16[v22];
    v24 = v17 + v22;
    v25 = type metadata accessor for NWEndpoint.Port(0);
    v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    v26(v23, v24, v25);
    v27 = v21[6];
    v28 = &v16[v27];
    v29 = (_QWORD *)(v17 + v27);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    *(_WORD *)&v16[v21[7]] = *(_WORD *)(v17 + v21[7]);
    *(_WORD *)&v16[v21[8]] = *(_WORD *)(v17 + v21[8]);
    swift_bridgeObjectRetain(v30);
  }
  return v4;
}

double destroy for AWDLPeer.AdvertisedService(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  v4 = a1[7];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[9]);
    sub_10000E614(a1[11], a1[12]);
  }
  v5 = (char *)a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 3));
  v6 = type metadata accessor for DNSRecords.SRV(0);
  v7 = &v5[*(int *)(v6 + 20)];
  v8 = type metadata accessor for NWEndpoint.Port(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)&v5[*(int *)(v6 + 24) + 8]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v8 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v8;
    v9 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v9;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
    v10 = *(_QWORD *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    sub_100031FEC(v10, v11);
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v11;
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a2 + v13);
  v17 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)v14 = v16;
  *(_QWORD *)(v14 + 8) = v17;
  v18 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v14 + 24) = v18;
  *(_BYTE *)(v14 + 32) = *(_BYTE *)(v15 + 32);
  *(_BYTE *)(v14 + 33) = *(_BYTE *)(v15 + 33);
  v19 = (int *)type metadata accessor for DNSRecords.SRV(0);
  v20 = v19[5];
  v21 = v14 + v20;
  v22 = v15 + v20;
  v23 = type metadata accessor for NWEndpoint.Port(0);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  v24(v21, v22, v23);
  v25 = v19[6];
  v26 = (_QWORD *)(v14 + v25);
  v27 = (_QWORD *)(v15 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  *(_WORD *)(v14 + v19[7]) = *(_WORD *)(v15 + v19[7]);
  *(_WORD *)(v14 + v19[8]) = *(_WORD *)(v15 + v19[8]);
  swift_bridgeObjectRetain(v28);
  return a1;
}

uint64_t assignWithCopy for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v10 = (_OWORD *)(a1 + 48);
  v11 = (__int128 *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v14 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v15 = *(_QWORD *)(a2 + 72);
      v16 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v16);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
      v17 = *(_QWORD *)(a2 + 88);
      v18 = *(_QWORD *)(a2 + 96);
      sub_100031FEC(v17, v18);
      v19 = *(_QWORD *)(a1 + 88);
      v20 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 88) = v17;
      *(_QWORD *)(a1 + 96) = v18;
      sub_10000E614(v19, v20);
    }
    else
    {
      sub_100127A54((_QWORD *)(a1 + 48));
      v26 = *(_OWORD *)(a2 + 64);
      v25 = *(_OWORD *)(a2 + 80);
      v27 = *v11;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 64) = v26;
      *(_OWORD *)(a1 + 80) = v25;
      *v10 = v27;
    }
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v21 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v21;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v22 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v22;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
    v23 = *(_QWORD *)(a2 + 88);
    v24 = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    sub_100031FEC(v23, v24);
    *(_QWORD *)(a1 + 88) = v23;
    *(_QWORD *)(a1 + 96) = v24;
  }
  else
  {
    v28 = *v11;
    v29 = *(_OWORD *)(a2 + 64);
    v30 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 64) = v29;
    *(_OWORD *)(a1 + 80) = v30;
    *v10 = v28;
  }
  v31 = *(int *)(a3 + 28);
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_QWORD *)v32 = *(_QWORD *)(a2 + v31);
  v34 = *(_QWORD *)(a2 + v31 + 8);
  v35 = *(_QWORD *)(a1 + v31 + 8);
  *(_QWORD *)(v32 + 8) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
  v36 = *(_QWORD *)(v33 + 24);
  v37 = *(_QWORD *)(v32 + 24);
  *(_QWORD *)(v32 + 24) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(v32 + 32) = *(_BYTE *)(v33 + 32);
  *(_BYTE *)(v32 + 33) = *(_BYTE *)(v33 + 33);
  v38 = (int *)type metadata accessor for DNSRecords.SRV(0);
  v39 = v38[5];
  v40 = v32 + v39;
  v41 = v33 + v39;
  v42 = type metadata accessor for NWEndpoint.Port(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = v38[6];
  v44 = (_QWORD *)(v32 + v43);
  v45 = (_QWORD *)(v33 + v43);
  *v44 = *v45;
  v46 = v45[1];
  v47 = v44[1];
  v44[1] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  *(_WORD *)(v32 + v38[7]) = *(_WORD *)(v33 + v38[7]);
  *(_WORD *)(v32 + v38[8]) = *(_WORD *)(v33 + v38[8]);
  return a1;
}

_QWORD *sub_100127A54(_QWORD *a1)
{
  destroy for DNSRecords.TXT(a1);
  return a1;
}

uint64_t initializeWithTake for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_WORD *)(v6 + 32) = *(_WORD *)(a2 + v5 + 32);
  v8 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(v6 + 16) = v8;
  v9 = (int *)type metadata accessor for DNSRecords.SRV(0);
  v10 = v9[5];
  v11 = v6 + v10;
  v12 = v7 + v10;
  v13 = type metadata accessor for NWEndpoint.Port(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_OWORD *)(v6 + v9[6]) = *(_OWORD *)(v7 + v9[6]);
  *(_WORD *)(v6 + v9[7]) = *(_WORD *)(v7 + v9[7]);
  *(_WORD *)(v6 + v9[8]) = *(_WORD *)(v7 + v9[8]);
  return a1;
}

uint64_t assignWithTake for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v10 = *(_QWORD *)(a1 + 56);
  if (!v10)
    goto LABEL_5;
  v11 = *(_QWORD *)(a2 + 56);
  if (!v11)
  {
    sub_100127A54((_QWORD *)(a1 + 48));
LABEL_5:
    v16 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v16;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v11;
  swift_bridgeObjectRelease(v10);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_10000E614(v14, v15);
LABEL_6:
  v17 = *(int *)(a3 + 28);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a2 + v17 + 8);
  v21 = *(_QWORD *)(a1 + v17 + 8);
  *(_QWORD *)v18 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(v18 + 8) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(v19 + 24);
  v23 = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v18 + 24) = v22;
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(v18 + 32) = *(_BYTE *)(v19 + 32);
  *(_BYTE *)(v18 + 33) = *(_BYTE *)(v19 + 33);
  v24 = (int *)type metadata accessor for DNSRecords.SRV(0);
  v25 = v24[5];
  v26 = v18 + v25;
  v27 = v19 + v25;
  v28 = type metadata accessor for NWEndpoint.Port(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  v29 = v24[6];
  v30 = (_QWORD *)(v18 + v29);
  v31 = (uint64_t *)(v19 + v29);
  v33 = *v31;
  v32 = v31[1];
  v34 = v30[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease(v34);
  *(_WORD *)(v18 + v24[7]) = *(_WORD *)(v19 + v24[7]);
  *(_WORD *)(v18 + v24[8]) = *(_WORD *)(v19 + v24[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100127D04);
}

uint64_t sub_100127D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DNSRecords.SRV(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AWDLPeer.AdvertisedService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100127D8C);
}

uint64_t sub_100127D8C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DNSRecords.SRV(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100127E00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = "\"";
  v4[2] = &unk_1003497B0;
  result = type metadata accessor for DNSRecords.SRV(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100127E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for DNSRecords.SRV(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for NWEndpoint.Port(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

double sub_100127F30@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DNSRecords.SRV(0) - 8) + 80);
  return sub_100124628(a1, (uint64_t *)(v2 + ((v5 + 16) & ~v5)), a2);
}

uint64_t sub_100127F7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_100127F8C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100124598(*(void (**)(__int128 *__return_ptr, uint64_t))(v1 + 16), a1);
}

uint64_t sub_100127F94()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  sub_10000E614(v0[7], v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

double sub_100127FC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100124628(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_100127FD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100127FE0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 50, 7);
}

double sub_10012800C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001244D8(a1, (__int128 *)(v2 + 16), a2);
}

uint64_t sub_100128014()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100128024(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a4 >> 60 != 15)
    return sub_10000E614(a3, a4);
  return result;
}

void *NANIntervalDuration.min.unsafeMutableAddressor()
{
  return &static NANIntervalDuration.min;
}

uint64_t NANIntervalDuration.timeUnits.getter(unsigned __int8 a1)
{
  uint64_t result;

  if (a1 >= 0x3Cu)
    return 0;
  if (a1 != 59)
    return 1 << (a1 + 4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

unint64_t NANIntervalDuration.deprecatedAvailabilityMapSize.getter(unsigned __int8 a1)
{
  unint64_t result;

  if (a1 > 0x3Bu)
    __break(1u);
  if (a1 != 59)
    return 0x200uLL >> (a1 + 4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_100128150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100128338();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001281AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100128338();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void NANIntervalDuration.description.getter(unsigned __int8 a1)
{
  unint64_t v1;

  v1 = NANIntervalDuration.timeUnits.getter(a1);
  NANTimeUnit.description.getter(v1);
}

void sub_10012820C()
{
  unsigned __int8 *v0;
  unint64_t v1;

  v1 = NANIntervalDuration.timeUnits.getter(*v0);
  NANTimeUnit.description.getter(v1);
}

unint64_t sub_100128228()
{
  unint64_t result;

  result = qword_100408478;
  if (!qword_100408478)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANIntervalDuration, &type metadata for NANIntervalDuration);
    atomic_store(result, (unint64_t *)&qword_100408478);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NANIntervalDuration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001282B8 + 4 * byte_1003497D5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001282EC + 4 * byte_1003497D0[v4]))();
}

uint64_t sub_1001282EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001282F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001282FCLL);
  return result;
}

uint64_t sub_100128308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100128310);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100128314(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012831C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANIntervalDuration()
{
  return &type metadata for NANIntervalDuration;
}

unint64_t sub_100128338()
{
  unint64_t result;

  result = qword_100408480;
  if (!qword_100408480)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANIntervalDuration, &type metadata for NANIntervalDuration);
    atomic_store(result, (unint64_t *)&qword_100408480);
  }
  return result;
}

uint64_t NANSubscribe.Configuration.serviceInfo.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_100404208 != -1)
    swift_once(&qword_100404208, sub_1001F08D4);
  v1 = String.lowercased()();
  v2 = String.lowercased()();
  if (v1._countAndFlagsBits == v2._countAndFlagsBits && v1._object == v2._object)
  {
    swift_bridgeObjectRelease_n(v1._object, 2);
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v1._countAndFlagsBits, v1._object, v2._countAndFlagsBits, v2._object, 0);
    swift_bridgeObjectRelease(v1._object);
    swift_bridgeObjectRelease(v2._object);
    if ((v4 & 1) == 0)
    {
      v5 = *(_QWORD *)(v0 + 24);
      goto LABEL_11;
    }
  }
  v5 = *(_QWORD *)(v0 + 24);
  NANGenericServiceProtocol.blob.getter(v5);
  if (v6 >> 60 != 15)
    return 3;
LABEL_11:
  v7 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 68));
  v8 = 2;
  if (v7)
    v9 = 3;
  else
    v9 = 2;
  swift_bridgeObjectRetain(v5);
  NANGenericServiceProtocol.packetData(for:)(v9, v5);
  swift_bridgeObjectRelease(v5);
  return v8;
}

void *NANSubscribe.SubscribeType.defaultValue.unsafeMutableAddressor()
{
  return &static NANSubscribe.SubscribeType.defaultValue;
}

uint64_t NANSubscribe.SubscribeType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x657669746361;
  else
    return 0x65766973736170;
}

CoreP2P::NANSubscribe::SubscribeType_optional __swiftcall NANSubscribe.SubscribeType.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  CoreP2P::NANSubscribe::SubscribeType_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D5150, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4.value = CoreP2P_NANSubscribe_SubscribeType_active;
  else
    v4.value = CoreP2P_NANSubscribe_SubscribeType_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_100128564(char *a1, char *a2)
{
  return sub_10003C51C(*a1, *a2);
}

Swift::Int sub_100128570()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x657669746361;
  else
    v2 = 0x65766973736170;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001285EC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x657669746361;
  else
    v2 = 0x65766973736170;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100128644()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x657669746361;
  else
    v2 = 0x65766973736170;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001286BC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D5150, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100128718(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x65766973736170;
  if (*v1)
    v2 = 0x657669746361;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100128754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10012AC3C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001287B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10012AC3C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001287FC()
{
  _BYTE *v0;

  if (*v0)
    return 0x657669746361;
  else
    return 0x65766973736170;
}

uint64_t NANSubscribe.Configuration.serviceName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txFWDelay.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t NANSubscribe.Configuration.type.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result & 1;
  return result;
}

uint64_t NANSubscribe.Configuration.rangingMandatory.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*NANCoreAnalyticsMetrics.peerAddress.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.queryPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 36);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NANSubscribe.Configuration.queryPeriod.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 36);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NANSubscribe.Configuration.queryPeriod.modify())(_QWORD)
{
  type metadata accessor for NANSubscribe.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.awakeDWInterval.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 40));
}

uint64_t NANSubscribe.Configuration.awakeDWInterval.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANSubscribe.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.awakeDWInterval.modify())(_QWORD)
{
  type metadata accessor for NANSubscribe.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.matchingFilterRx.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;

  v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 44));
  v2 = *v1;
  swift_bridgeObjectRetain(*((_QWORD *)v1 + 1));
  return v2;
}

void NANSubscribe.Configuration.matchingFilterRx.setter(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 44);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
  *(_BYTE *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
}

uint64_t (*NANSubscribe.Configuration.matchingFilterRx.modify())(_QWORD)
{
  type metadata accessor for NANSubscribe.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.matchingFilterTx.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;

  v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 48));
  v2 = *v1;
  swift_bridgeObjectRetain(*((_QWORD *)v1 + 1));
  return v2;
}

void NANSubscribe.Configuration.matchingFilterTx.setter(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
  *(_BYTE *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
}

uint64_t (*NANSubscribe.Configuration.matchingFilterTx.modify())(_QWORD)
{
  type metadata accessor for NANSubscribe.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.matchingFilterCondition.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 52));
}

uint64_t NANSubscribe.Configuration.matchingFilterCondition.setter(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = a1 & 1;
  result = type metadata accessor for NANSubscribe.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = v2;
  return result;
}

uint64_t (*NANSubscribe.Configuration.matchingFilterCondition.modify())(_QWORD)
{
  type metadata accessor for NANSubscribe.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.bloomFilter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 56);
  v2 = *(_QWORD *)v1;
  sub_1001297B4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_WORD *)(v1 + 16));
  return v2;
}

uint64_t NANSubscribe.Configuration.bloomFilter.setter(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = v3 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 56);
  result = sub_1000B5F34(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_WORD *)(v7 + 16));
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = a2;
  *(_WORD *)(v7 + 16) = a3;
  return result;
}

uint64_t (*NANSubscribe.Configuration.bloomFilter.modify())(_QWORD)
{
  type metadata accessor for NANSubscribe.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.enableFastDiscovery.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 60));
}

uint64_t NANSubscribe.Configuration.enableFastDiscovery.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANSubscribe.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.enableFastDiscovery.modify())(_QWORD)
{
  type metadata accessor for NANSubscribe.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.oweKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 64);
  return sub_1001297C8(v3, a1);
}

uint64_t NANSubscribe.Configuration.oweKeys.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 64);
  return sub_10012980C(a1, v3);
}

uint64_t (*NANSubscribe.Configuration.oweKeys.modify())(_QWORD)
{
  type metadata accessor for NANSubscribe.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.authenticationType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 68));
}

BOOL NANSubscribe.Configuration.requiresAuthentication.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 68)) & 1) == 0;
}

unint64_t NANSubscribe.Configuration.multicastAddress.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 72));
  return *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48);
}

uint64_t NANSubscribe.Configuration.multicastAddress.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for NANSubscribe.Configuration(0);
  v4 = v1 + *(int *)(result + 72);
  *(_WORD *)(v4 + 4) = WORD2(a1);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 6) = BYTE6(a1) & 1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.multicastAddress.modify())(_QWORD)
{
  type metadata accessor for NANSubscribe.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANSubscribe.Configuration.multicastServiceType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANSubscribe.Configuration(0) + 76));
}

uint64_t NANSubscribe.Configuration.multicastServiceType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANSubscribe.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 76)) = a1 & 1;
  return result;
}

uint64_t (*NANSubscribe.Configuration.multicastServiceType.modify())(_QWORD)
{
  type metadata accessor for NANSubscribe.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

void NANSubscribe.Configuration.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int64_t v15;
  uint64_t v16;
  Swift::UInt64 v17;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  Swift::UInt64 v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (Swift::UInt64 *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher._combine(_:)(*(_BYTE *)v1);
  v8 = *(_QWORD *)(v1 + 16);
  v9 = String.lowercased()();
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v9._countAndFlagsBits, v9._object);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9._object);
  v10 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain(v10);
  sub_100077EC8(a1, v10);
  swift_bridgeObjectRelease(v10);
  if (*(_BYTE *)(v2 + 32))
    v11 = 0x657669746361;
  else
    v11 = 0x65766973736170;
  if (*(_BYTE *)(v2 + 32))
    v12 = 0xE600000000000000;
  else
    v12 = 0xE700000000000000;
  String.hash(into:)(a1, v11, v12);
  swift_bridgeObjectRelease(v12);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 33));
  v13 = type metadata accessor for NANSubscribe.Configuration(0);
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(int *)(v13 + 36), v4);
  v14 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v5 + 88))(v7, v4);
  if (v14 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    v15 = *v7;
    v16 = 1000000000;
  }
  else if (v14 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    v15 = *v7;
    v16 = 1000000;
  }
  else
  {
    if (v14 != enum case for DispatchTimeInterval.microseconds(_:))
    {
      if (v14 == enum case for DispatchTimeInterval.nanoseconds(_:))
      {
        (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
        v21 = *v7;
      }
      else
      {
        if (v14 != enum case for DispatchTimeInterval.never(_:))
          (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 8))(v7, v4);
        v21 = 0x7FFFFFFFFFFFFFFFLL;
      }
LABEL_18:
      Hasher._combine(_:)(v21);
      __asm { BR              X10 }
    }
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    v15 = *v7;
    v16 = 1000;
  }
  v17 = v15 * v16;
  v18 = (unsigned __int128)(v15 * (__int128)v16) >> 64 != (v15 * v16) >> 63;
  v19 = v15 <= 0;
  v20 = 0x7FFFFFFFFFFFFFFFLL;
  if (v19)
    v20 = 0x8000000000000000;
  if (v18)
    v21 = v20;
  else
    v21 = v17;
  goto LABEL_18;
}

Swift::Int NANSubscribe.Configuration.hashValue.getter()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1);
  NANSubscribe.Configuration.hash(into:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10012948C()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1);
  NANSubscribe.Configuration.hash(into:)(v1);
  return Hasher._finalize()();
}

uint64_t NANSubscribe.Configuration.init(instanceID:serviceName:serviceSpecificInfo:queryPeriod:enableFastDiscovery:authenticationType:multicastAddress:type:multicastServiceType:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, __int16 a11, char a12, char a13, char a14, unsigned __int8 a15)
{
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;

  v44 = a7;
  v45 = a8;
  v42 = a3;
  v43 = a6;
  v41 = a2;
  v40 = a1;
  v46 = a15;
  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v19 = &v39[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v21 = &v39[-v20];
  v22 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin();
  v26 = &v39[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  P256.KeyAgreement.PrivateKey.init()(v24);
  v47 = sub_100031A88((uint64_t)_swiftEmptyArrayStorage);
  if (a5 >> 60 == 15)
  {
    v27 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v21, 1, 1, v27);
  }
  else
  {
    *v21 = a4;
    v21[1] = a5;
    v28 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v21, v28, 6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v21, 0, 1, v28);
  }
  sub_10011C6A0((uint64_t)v21, (uint64_t)v19);
  sub_10002548C((uint64_t)v19, 6);
  sub_100129E00((uint64_t)v21);
  v29 = v47;
  v30 = (int *)type metadata accessor for NANSubscribe.Configuration(0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v23 + 32))(a9 + v30[16], v26, v22);
  *(_BYTE *)a9 = v40;
  v31 = v42;
  *(_QWORD *)(a9 + 8) = v41;
  *(_QWORD *)(a9 + 16) = v31;
  *(_QWORD *)(a9 + 24) = v29;
  *(_BYTE *)(a9 + 32) = a14 & 1;
  *(_BYTE *)(a9 + 33) = 0;
  v32 = a9 + v30[9];
  v33 = type metadata accessor for DispatchTimeInterval(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v32, v43, v33);
  *(_BYTE *)(a9 + v30[10]) = 1;
  v35 = a9 + v30[11];
  *(_BYTE *)v35 = 1;
  *(_QWORD *)(v35 + 8) = _swiftEmptyArrayStorage;
  v36 = a9 + v30[12];
  *(_BYTE *)v36 = 0;
  *(_QWORD *)(v36 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a9 + v30[13]) = 0;
  v37 = a9 + v30[14];
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(v37 + 8) = 0;
  *(_WORD *)(v37 + 16) = 512;
  *(_BYTE *)(a9 + v30[15]) = v44 & 1;
  *(_BYTE *)(a9 + v30[17]) = v45 & 1;
  v38 = a9 + v30[18];
  *(_WORD *)(v38 + 4) = a11;
  *(_DWORD *)v38 = a10;
  *(_BYTE *)(v38 + 6) = a12 & 1;
  *(_BYTE *)(a9 + v30[19]) = v46 & 1;
  return result;
}

uint64_t type metadata accessor for NANSubscribe.Configuration(uint64_t a1)
{
  uint64_t result;

  result = qword_100408540;
  if (!qword_100408540)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NANSubscribe.Configuration);
  return result;
}

uint64_t sub_1001297B4(uint64_t result, unint64_t a2, __int16 a3)
{
  if ((a3 & 0xFF00) != 0x200)
    return sub_100031FEC(result, a2);
  return result;
}

uint64_t sub_1001297C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OWEKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012980C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OWEKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s7CoreP2P12NANSubscribeO13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  Swift::String v4;
  Swift::String v5;
  char v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int16 v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  unsigned __int8 v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  __int16 v55;
  char v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 v59;
  unsigned __int8 *v60;
  unint64_t v61;
  unint64_t v62;
  int8x16_t v63;
  uint64x2_t v64;
  int16x8_t v65;
  uint64x2_t v66;
  int64x2_t v67;
  int16x8_t v68;
  uint64_t v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  _BYTE v73[6];
  _BYTE v74[6];

  if (*a1 != *a2)
    return 0;
  v4 = String.lowercased()();
  v5 = String.lowercased()();
  if (v4._countAndFlagsBits == v5._countAndFlagsBits && v4._object == v5._object)
  {
    swift_bridgeObjectRelease_n(v4._object, 2);
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4._countAndFlagsBits, v4._object, v5._countAndFlagsBits, v5._object, 0);
    swift_bridgeObjectRelease(v4._object);
    swift_bridgeObjectRelease(v5._object);
    result = 0;
    if ((v7 & 1) == 0)
      return result;
  }
  if ((sub_1000738DC(*((_QWORD *)a1 + 3), *((_QWORD *)a2 + 3)) & 1) == 0)
    return 0;
  v9 = a1[32] ? 0x657669746361 : 0x65766973736170;
  v10 = a1[32] ? 0xE600000000000000 : 0xE700000000000000;
  v11 = a2[32] ? 0x657669746361 : 0x65766973736170;
  v12 = a2[32] ? 0xE600000000000000 : 0xE700000000000000;
  if (v9 == v11 && v10 == v12)
  {
    swift_bridgeObjectRelease_n(v10, 2);
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v11, v12, 0);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v12);
    result = 0;
    if ((v13 & 1) == 0)
      return result;
  }
  if (a1[33] != a2[33])
    return 0;
  v14 = (int *)type metadata accessor for NANSubscribe.Configuration(0);
  if ((static DispatchTimeInterval.== infix(_:_:)(&a1[v14[9]], &a2[v14[9]]) & 1) == 0)
    return 0;
  if ((sub_10003BBE4(a1[v14[10]], a2[v14[10]]) & 1) == 0)
    return 0;
  v15 = v14[11];
  v16 = &a1[v15];
  v17 = *(_QWORD *)&a1[v15 + 8];
  v18 = &a2[v15];
  v19 = *((_QWORD *)v18 + 1);
  if ((sub_10003BC9C(*v16, *v18) & 1) == 0)
    return 0;
  if ((sub_1000860FC(v17, v19) & 1) == 0)
    return 0;
  v20 = v14[12];
  v21 = &a1[v20];
  v22 = *(_QWORD *)&a1[v20 + 8];
  v23 = &a2[v20];
  v24 = *((_QWORD *)v23 + 1);
  if ((sub_10003BC9C(*v21, *v23) & 1) == 0 || (sub_1000860FC(v22, v24) & 1) == 0)
    return 0;
  v25 = v14[13];
  v26 = a1[v25];
  v27 = a2[v25];
  if (v26)
    v28 = 0x757145746F4E7874;
  else
    v28 = 0x526C617571457874;
  if (v26)
    v29 = 0xEC00000078526C61;
  else
    v29 = 0xE900000000000078;
  if (v27)
    v30 = 0x757145746F4E7874;
  else
    v30 = 0x526C617571457874;
  if (v27)
    v31 = 0xEC00000078526C61;
  else
    v31 = 0xE900000000000078;
  if (v28 == v30 && v29 == v31)
  {
    swift_bridgeObjectRelease_n(v29, 2);
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v30, v31, 0);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v31);
    result = 0;
    if ((v32 & 1) == 0)
      return result;
  }
  v33 = v14[14];
  v35 = *(_QWORD *)&a1[v33];
  v34 = *(_QWORD *)&a1[v33 + 8];
  v36 = *(_WORD *)&a1[v33 + 16];
  v37 = &a2[v33];
  v39 = *(_QWORD *)v37;
  v38 = *((_QWORD *)v37 + 1);
  v40 = *((_WORD *)v37 + 8);
  v41 = v40 & 0xFF00;
  if ((v36 & 0xFF00) == 0x200)
  {
    if (v41 == 512)
      goto LABEL_51;
    goto LABEL_57;
  }
  if (v41 == 512)
  {
LABEL_57:
    sub_1001297B4(v35, v34, v36);
    sub_1001297B4(v39, v38, v40);
    sub_1000B5F34(v35, v34, v36);
    v53 = v39;
    v54 = v38;
    v55 = v40;
LABEL_58:
    sub_1000B5F34(v53, v54, v55);
    return 0;
  }
  sub_1001297B4(v35, v34, v36);
  sub_1001297B4(v39, v38, v40);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v35, v34);
  if ((v56 & 1) == 0)
  {
    sub_1000B5F34(v39, v38, v40);
    v53 = v35;
    v54 = v34;
    v55 = v36;
    goto LABEL_58;
  }
  sub_1000B5F34(v39, v38, v40);
  sub_1000B5F34(v35, v34, v36);
  result = 0;
  if (v36 == v40
    && ((((v36 & 0x100) == 0) ^ ((unsigned __int16)(v40 & 0x100) >> 8)) & 1) != 0)
  {
LABEL_51:
    if (a1[v14[15]] != a2[v14[15]])
      return 0;
    v42 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
    v44 = v43;
    v45 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
    v47 = v46;
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v42, v44);
    v49 = v48;
    sub_10000E614(v45, v47);
    sub_10000E614(v42, v44);
    if ((v49 & 1) == 0)
      return 0;
    v50 = v14[17];
    v51 = a1[v50];
    v52 = a2[v50];
    if ((v51 & 1) != 0)
    {
      if (!v52)
        return 0;
    }
    else if ((v52 & 1) != 0)
    {
      return 0;
    }
    v57 = v14[18];
    v58 = &a1[v57];
    v59 = a1[v57 + 6];
    v60 = &a2[v57];
    if ((v59 & 1) != 0)
    {
      if (v60[6])
        goto LABEL_76;
    }
    else if ((v60[6] & 1) == 0)
    {
      v61 = *(unsigned int *)v58 | ((unint64_t)*((unsigned __int16 *)v58 + 2) << 32);
      v62 = *(unsigned int *)v60 | ((unint64_t)*((unsigned __int16 *)v60 + 2) << 32);
      v63.i64[0] = 0xFFFFFFFFFFFFLL;
      v63.i64[1] = 0xFFFFFFFFFFFFLL;
      v64 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v61), v63);
      v65 = (int16x8_t)vshlq_u64(v64, (uint64x2_t)xmmword_10033B100);
      v66 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v62), v63);
      v67 = (int64x2_t)vshlq_u64(v66, (uint64x2_t)xmmword_10033B100);
      v68 = (int16x8_t)vshlq_u64(v66, (uint64x2_t)xmmword_10033B0F0);
      v74[0] = v61;
      *(int32x2_t *)v64.i8 = vmovn_s64((int64x2_t)vshlq_u64(v64, (uint64x2_t)xmmword_10033B0F0));
      *(int32x2_t *)v65.i8 = vmovn_s64((int64x2_t)v65);
      v65.i16[1] = v65.i16[2];
      v65.i16[2] = v64.i16[0];
      v65.i16[3] = v64.i16[2];
      *(_DWORD *)&v74[1] = vmovn_s16(v65).u32[0];
      v74[5] = BYTE5(v61);
      v73[0] = v62;
      *(int32x2_t *)v64.i8 = vmovn_s64((int64x2_t)v68);
      *(int32x2_t *)v68.i8 = vmovn_s64(v67);
      v68.i16[1] = v68.i16[2];
      v68.i16[2] = v64.i16[0];
      v68.i16[3] = v64.i16[2];
      *(_DWORD *)&v73[1] = vmovn_s16(v68).u32[0];
      v73[5] = BYTE5(v62);
      if (*(_DWORD *)v74 == *(_DWORD *)v73 && *(unsigned __int16 *)&v74[4] == *(unsigned __int16 *)&v73[4])
      {
LABEL_76:
        v70 = v14[19];
        v71 = a1[v70];
        v72 = a2[v70];
        if ((v71 & 1) != 0)
        {
          if ((v72 & 1) != 0)
            return 1;
        }
        else if ((v72 & 1) == 0)
        {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_100129E00(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012C44(&qword_100404EE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100129E44()
{
  unint64_t result;

  result = qword_100408488;
  if (!qword_100408488)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANSubscribe.SubscribeType, &type metadata for NANSubscribe.SubscribeType);
    atomic_store(result, (unint64_t *)&qword_100408488);
  }
  return result;
}

uint64_t sub_100129E88(uint64_t a1)
{
  uint64_t result;

  result = sub_100129F38(&qword_10040EDF0, protocol conformance descriptor for NANSubscribe.Configuration);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void *sub_100129EBC()
{
  return &protocol witness table for UInt8;
}

uint64_t sub_100129EC8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100129F38(&qword_1004084D0, protocol conformance descriptor for NANSubscribe.Configuration);
  result = sub_100129F38(&qword_1004084D8, protocol conformance descriptor for NANSubscribe.Configuration);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100129F14()
{
  return sub_100129F38(&qword_1004084E0, protocol conformance descriptor for NANSubscribe.Configuration);
}

uint64_t sub_100129F38(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NANSubscribe.Configuration(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANSubscribe()
{
  return &type metadata for NANSubscribe;
}

uint64_t storeEnumTagSinglePayload for NANSubscribe.SubscribeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100129FD4 + 4 * byte_100349922[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10012A008 + 4 * byte_10034991D[v4]))();
}

uint64_t sub_10012A008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012A010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012A018);
  return result;
}

uint64_t sub_10012A024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012A02CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10012A030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012A038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANSubscribe.SubscribeType()
{
  return &type metadata for NANSubscribe.SubscribeType;
}

_QWORD *initializeBufferWithCopyOfBuffer for NANSubscribe.Configuration(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    v9 = a3[9];
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    *(_QWORD *)(a1 + 24) = v8;
    v12 = type metadata accessor for DispatchTimeInterval(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    *v15 = *v16;
    v17 = *((_QWORD *)v16 + 1);
    *((_QWORD *)v15 + 1) = v17;
    v18 = a3[12];
    v19 = a3[13];
    v20 = (char *)v4 + v18;
    v21 = (char *)a2 + v18;
    *v20 = *v21;
    v22 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v20 + 1) = v22;
    *((_BYTE *)v4 + v19) = *((_BYTE *)a2 + v19);
    v23 = a3[14];
    v24 = (char *)v4 + v23;
    v25 = (uint64_t *)((char *)a2 + v23);
    LODWORD(v8) = *((unsigned __int8 *)a2 + v23 + 17) << 8;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v22);
    if ((_DWORD)v8 == 512)
    {
      *(_OWORD *)v24 = *(_OWORD *)v25;
    }
    else
    {
      v27 = *v25;
      v28 = v25[1];
      sub_100031FEC(*v25, v28);
      *(_QWORD *)v24 = v27;
      *((_QWORD *)v24 + 1) = v28;
    }
    *((_WORD *)v24 + 8) = *((_WORD *)v25 + 8);
    v29 = a3[16];
    *((_BYTE *)v4 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    v30 = (char *)v4 + v29;
    v31 = (uint64_t)a2 + v29;
    v32 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    v33 = a3[18];
    *((_BYTE *)v4 + a3[17]) = *((_BYTE *)a2 + a3[17]);
    v34 = (_DWORD *)((char *)v4 + v33);
    v35 = (_DWORD *)((char *)a2 + v33);
    *v34 = *v35;
    *(_DWORD *)((char *)v34 + 3) = *(_DWORD *)((char *)v35 + 3);
    *((_BYTE *)v4 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  }
  return v4;
}

uint64_t destroy for NANSubscribe.Configuration(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[9];
  v5 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  v6 = a1 + a2[14];
  if (*(unsigned __int8 *)(v6 + 17) << 8 != 512)
    sub_10000E614(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  v7 = a1 + a2[16];
  v8 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v8 = a3[9];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)(a1 + 24) = v7;
  v11 = type metadata accessor for DispatchTimeInterval(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v16 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 8) = v16;
  v17 = a3[12];
  v18 = a3[13];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_BYTE *)v19 = *(_BYTE *)v20;
  v21 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v19 + 8) = v21;
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v22 = a3[14];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  LODWORD(v7) = *(unsigned __int8 *)(a2 + v22 + 17) << 8;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v21);
  if ((_DWORD)v7 == 512)
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  else
  {
    v25 = *v24;
    v26 = v24[1];
    sub_100031FEC(*v24, v26);
    *(_QWORD *)v23 = v25;
    *(_QWORD *)(v23 + 8) = v26;
  }
  *(_WORD *)(v23 + 16) = *((_WORD *)v24 + 8);
  v27 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  v32 = (_DWORD *)(a1 + v31);
  v33 = (_DWORD *)(a2 + v31);
  *v32 = *v33;
  *(_DWORD *)((char *)v32 + 3) = *(_DWORD *)((char *)v33 + 3);
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithCopy for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  int v28;
  __int128 v29;
  __int16 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  int v44;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v10 = a3[9];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v14 = a3[11];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_BYTE *)v15 = *(_BYTE *)v16;
  v17 = *(_QWORD *)(v16 + 8);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[12];
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_BYTE *)v20 = *(_BYTE *)v21;
  v22 = *(_QWORD *)(v21 + 8);
  v23 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v24 = a3[14];
  v25 = a1 + v24;
  v26 = (uint64_t *)(a2 + v24);
  v27 = *(unsigned __int8 *)(a1 + v24 + 17) << 8;
  v28 = *(unsigned __int8 *)(a2 + v24 + 17) << 8;
  if (v27 != 512)
  {
    if (v28 == 512)
    {
      sub_10012A6D4(v25);
      v30 = *((_WORD *)v26 + 8);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *(_WORD *)(v25 + 16) = v30;
      goto LABEL_9;
    }
    v33 = *v26;
    v34 = v26[1];
    sub_100031FEC(*v26, v34);
    v35 = *(_QWORD *)v25;
    v36 = *(_QWORD *)(v25 + 8);
    *(_QWORD *)v25 = v33;
    *(_QWORD *)(v25 + 8) = v34;
    sub_10000E614(v35, v36);
LABEL_8:
    *(_BYTE *)(v25 + 16) = *((_BYTE *)v26 + 16);
    *(_BYTE *)(v25 + 17) = *((_BYTE *)v26 + 17);
    goto LABEL_9;
  }
  if (v28 != 512)
  {
    v31 = *v26;
    v32 = v26[1];
    sub_100031FEC(*v26, v32);
    *(_QWORD *)v25 = v31;
    *(_QWORD *)(v25 + 8) = v32;
    goto LABEL_8;
  }
  v29 = *(_OWORD *)v26;
  *(_WORD *)(v25 + 16) = *((_WORD *)v26 + 8);
  *(_OWORD *)v25 = v29;
LABEL_9:
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v37 = a3[16];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v38, v39, v40);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  v41 = a3[18];
  v42 = (_DWORD *)(a1 + v41);
  v43 = (_DWORD *)(a2 + v41);
  v44 = *(_DWORD *)((char *)v43 + 3);
  *v42 = *v43;
  *(_DWORD *)((char *)v42 + 3) = v44;
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t sub_10012A6D4(uint64_t a1)
{
  destroy for NANServiceName.Hash(a1);
  return a1;
}

uint64_t initializeWithTake for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  v11 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[14];
  v13 = a3[15];
  v14 = a1 + v12;
  v15 = (__int128 *)(a2 + v12);
  v16 = *v15;
  *(_WORD *)(v14 + 16) = *((_WORD *)v15 + 8);
  LOBYTE(v15) = *(_BYTE *)(a2 + v13);
  *(_OWORD *)v14 = v16;
  *(_BYTE *)(a1 + v13) = (_BYTE)v15;
  v17 = a3[16];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  v22 = (_DWORD *)(a1 + v21);
  v23 = (_DWORD *)(a2 + v21);
  *v22 = *v23;
  *(_DWORD *)((char *)v22 + 3) = *(_DWORD *)((char *)v23 + 3);
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithTake for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v9 = a3[9];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v16 = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  swift_bridgeObjectRelease(v16);
  v17 = a3[12];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_BYTE *)v18 = *(_BYTE *)v19;
  v20 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
  swift_bridgeObjectRelease(v20);
  v21 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v22 = a1 + v21;
  v23 = a2 + v21;
  if (*(unsigned __int8 *)(a1 + v21 + 17) << 8 != 512)
  {
    if (*(unsigned __int8 *)(v23 + 17) << 8 != 512)
    {
      v24 = *(_QWORD *)v22;
      v25 = *(_QWORD *)(v22 + 8);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      sub_10000E614(v24, v25);
      *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
      *(_BYTE *)(v22 + 17) = *(_BYTE *)(v23 + 17);
      goto LABEL_6;
    }
    sub_10012A6D4(a1 + v21);
  }
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_WORD *)(v22 + 16) = *(_WORD *)(v23 + 16);
LABEL_6:
  v26 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
  v30 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  v31 = (_DWORD *)(a1 + v30);
  v32 = (_DWORD *)(a2 + v30);
  *v31 = *v32;
  *(_DWORD *)((char *)v31 + 3) = *(_DWORD *)((char *)v32 + 3);
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012AA08);
}

uint64_t sub_10012AA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DispatchTimeInterval(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = type metadata accessor for OWEKeys(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 64);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NANSubscribe.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012AAB4);
}

uint64_t sub_10012AAB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for DispatchTimeInterval(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = type metadata accessor for OWEKeys(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 64);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_10012AB50(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[16];

  v5[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v5[1] = &unk_100349B38;
  v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[3] = &unk_100349B50;
  v5[4] = &unk_100349B50;
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v5[5] = *(_QWORD *)(result - 8) + 64;
    v5[6] = &unk_100349B68;
    v5[7] = &unk_100349B38;
    v5[8] = &unk_100349B38;
    v5[9] = &unk_100349B50;
    v5[10] = &unk_100349B80;
    v5[11] = &unk_100349B50;
    result = type metadata accessor for P256.KeyAgreement.PrivateKey(319);
    if (v4 <= 0x3F)
    {
      v5[12] = *(_QWORD *)(result - 8) + 64;
      v5[13] = (char *)&value witness table for Builtin.Int8 + 64;
      v5[14] = &unk_100349B98;
      v5[15] = (char *)&value witness table for Builtin.Int8 + 64;
      swift_initStructMetadata(a1, 256, 16, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_10012AC3C()
{
  unint64_t result;

  result = qword_1004085B0;
  if (!qword_1004085B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANSubscribe.SubscribeType, &type metadata for NANSubscribe.SubscribeType);
    atomic_store(result, (unint64_t *)&qword_1004085B0);
  }
  return result;
}

uint64_t static P2PTimer.async(after:on:execute:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(char *, _QWORD, uint64_t);
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v23;
  _BYTE v24[24];

  v23 = a2;
  v7 = type metadata accessor for DispatchTimeInterval(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin();
  v12 = &v24[-v11 - 8];
  __chkstk_darwin();
  v14 = &v24[-v13 - 8];
  v15 = swift_allocObject(&unk_1003E68F8, 24, 7);
  *(_QWORD *)(v15 + 16) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, a1, v7);
  v16 = (_QWORD *)swift_allocObject(&unk_1003E6920, 40, 7);
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = v15;
  v17 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v17(v12, enum case for DispatchTimeInterval.never(_:), v7);
  *(_QWORD *)v10 = 100;
  v17(v10, enum case for DispatchTimeInterval.milliseconds(_:), v7);
  v18 = type metadata accessor for P2PTimer(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = v23;
  swift_retain(a4);
  swift_retain(v15);
  v20 = sub_10012B6F8((uint64_t)v14, v19, (uint64_t)v12, (uint64_t)v10, (uint64_t)sub_100062BB8, (uint64_t)v16);

  swift_release(v16);
  swift_beginAccess(v15 + 16, v24, 1, 0);
  v21 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v15 + 16) = v20;
  swift_release(v15);
  return swift_release(v21);
}

uint64_t sub_10012AE64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012AE8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_100012C44((uint64_t *)&unk_100405070);
  v3 = sub_1000117B0((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_10012AF3C()
{
  uint64_t result;

  result = type metadata accessor for DispatchTime(0);
  qword_1004104A0 = result;
  *(_QWORD *)algn_1004104A8 = &off_1003E6938;
  return result;
}

uint64_t P2PTimer.deadlineAfter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10012AF9C(&OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter, a1);
}

id P2PTimer.targetQueue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_targetQueue);
}

uint64_t P2PTimer.repeatingInterval.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10012AF9C(&OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, a1);
}

uint64_t P2PTimer.leeway.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10012AF9C(&OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, a1);
}

uint64_t sub_10012AF9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  v5 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t P2PTimer.handler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler);
  swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler + 8));
  return v1;
}

uint64_t P2PTimer.__allocating_init(deadlineAfter:on:repeating:leeway:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;

  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v13 = sub_10012B6F8(a1, a2, a3, a4, a5, a6);

  swift_release(a6);
  return v13;
}

uint64_t P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = sub_10012B6F8(a1, a2, a3, a4, a5, a6);

  swift_release(a6);
  return v8;
}

uint64_t P2PTimer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  swift_getObjectType(v2);
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease(v2);
  v3 = v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);

  v5(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, v4);
  v5(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, v4);
  swift_release(*(_QWORD *)(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler + 8));
  return v1;
}

uint64_t P2PTimer.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  swift_getObjectType(v2);
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease(v2);
  v3 = v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);

  v5(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, v4);
  v5(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, v4);
  swift_release(*(_QWORD *)(v1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler + 8));
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_10012B25C(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];

  v4 = a3 + 16;
  a1();
  swift_beginAccess(v4, v8, 0, 0);
  swift_beginAccess(v4, &v7, 1, 0);
  v5 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  return swift_release(v5);
}

uint64_t sub_10012B2C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t type metadata accessor for P2PTimer(uint64_t a1)
{
  uint64_t result;

  result = qword_1004085F8;
  if (!qword_1004085F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for P2PTimer);
  return result;
}

uint64_t P2PTimer.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v22 = a1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTimeInterval(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v2;
  v13 = v2 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchTimeInterval.never(_:), v9);
  swift_retain();
  v14 = static DispatchTimeInterval.== infix(_:_:)(v13, v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v15 = sub_100012C44(qword_100405C70);
  v16 = swift_allocObject(v15, 80, 7);
  v17 = v16;
  *(_OWORD *)(v16 + 16) = xmmword_10033A110;
  if ((v14 & 1) != 0)
  {
    *(_QWORD *)(v16 + 32) = 0x656E696C64616564;
    *(_QWORD *)(v16 + 40) = 0xE800000000000000;
    v13 = v2 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  }
  else
  {
    *(_QWORD *)(v16 + 32) = 0x6E69746165706572;
    *(_QWORD *)(v16 + 40) = 0xE900000000000067;
  }
  *(_QWORD *)(v16 + 72) = v9;
  v18 = sub_100033C24((_QWORD *)(v16 + 48));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v10 + 16))(v18, v13, v9);
  v19 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  v20 = type metadata accessor for P2PTimer(0);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(&v23, v17, v8, v6, v20);
}

uint64_t sub_10012B564@<X0>(uint64_t a1@<X8>)
{
  return P2PTimer.customMirror.getter(a1);
}

uint64_t _s8Dispatch0A4TimeV7CoreP2PE8register5timeryAD0D6PTimerC_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD aBlock[5];
  uint64_t v17;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler);
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler + 8);
  aBlock[4] = v11;
  v17 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = &unk_1003E6950;
  v13 = _Block_copy(aBlock);
  v14 = swift_retain();
  static DispatchQoS.unspecified.getter(v14);
  sub_10012AE8C();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v9, v5, v13, ObjectType);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v17);
}

uint64_t sub_10012B6F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  id v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t ObjectType;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;

  v7 = v6;
  v43 = a5;
  v44 = a6;
  v45 = a4;
  v46 = a3;
  v47 = a2;
  v48 = a1;
  v8 = type metadata accessor for DispatchTime(0);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&ObjectType - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&ObjectType - v12;
  v14 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&ObjectType - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012BAA8();
  v49 = _swiftEmptyArrayStorage;
  v18 = sub_100011DE4(&qword_100408730, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v19 = sub_100012C44(&qword_100408738);
  v20 = sub_1000117B0((unint64_t *)&unk_100408740, &qword_100408738);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v19, v20, v14, v18);
  v21 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v17, v47);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *(_QWORD *)(v6 + 16) = v21;
  ObjectType = swift_getObjectType(v21);
  if (qword_100403F80 != -1)
    swift_once(&qword_100403F80, sub_10012AF3C);
  (*(void (**)(void))(*(_QWORD *)algn_1004104A8 + 8))();
  v22 = v48;
  + infix(_:_:)(v11, v48);
  v23 = v42;
  v24 = *(void (**)(char *, uint64_t))(v41 + 8);
  v24(v11, v42);
  v25 = v45;
  v26 = v46;
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v13, v46, v45, ObjectType);
  v24(v13, v23);
  v27 = v6 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_deadlineAfter;
  v28 = type metadata accessor for DispatchTimeInterval(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  v30(v27, v22, v28);
  v31 = v47;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_targetQueue) = v47;
  v30(v7 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, v26, v28);
  v30(v7 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_leeway, v25, v28);
  v32 = (_QWORD *)(v7 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_handler);
  v33 = v44;
  *v32 = v43;
  v32[1] = v33;
  v34 = qword_1004104A0;
  v35 = *(_QWORD *)algn_1004104A8;
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)algn_1004104A8 + 16);
  v37 = v31;
  swift_retain(v33);
  v36(v7, v34, v35);
  swift_getObjectType(*(_QWORD *)(v7 + 16));
  OS_dispatch_source.activate()();
  v38 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v38(v25, v28);
  v38(v26, v28);
  v38(v48, v28);
  return v7;
}

uint64_t sub_10012BA08()
{
  return type metadata accessor for P2PTimer(0);
}

uint64_t sub_10012BA10(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v4 = "\b";
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = (char *)&value witness table for Builtin.UnknownObject + 64;
    v7 = v5;
    v8 = v5;
    v9 = (char *)&value witness table for () + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_10012BAA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10040EEC0[0];
  if (!qword_10040EEC0[0])
  {
    v1 = objc_opt_self(OS_dispatch_source);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, qword_10040EEC0);
  }
  return result;
}

__int16 *CountryCode.unknown.unsafeMutableAddressor()
{
  if (qword_100403F88 != -1)
    swift_once(&qword_100403F88, sub_10012D674);
  return &static CountryCode.unknown;
}

uint64_t CountryCode.code.getter(unsigned int a1)
{
  char v1;
  unsigned int v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = a1;
  v2 = a1 >> 8;
  type metadata accessor for String.Encoding(0);
  __chkstk_darwin();
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012C44(&qword_100403E88);
  v6 = swift_allocObject(v5, 34, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10033C020;
  *(_BYTE *)(v6 + 32) = v1;
  *(_BYTE *)(v6 + 33) = v2;
  v14 = v6;
  static String.Encoding.utf8.getter(v6);
  v7 = sub_100012C44(&qword_100406738);
  v8 = sub_100011770((unint64_t *)&qword_100406740, &qword_100406738, (const char *)&protocol conformance descriptor for [A]);
  v9 = String.init<A>(bytes:encoding:)(&v14, v4, v7, v8);
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  if (v11)
    return v9;
  else
    return 0;
}

uint64_t sub_10012BC24(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = String.index(before:)(v5 | (v2 << 16), a1, a2);
  return String.subscript.getter(v6, a1, a2);
}

uint64_t CountryCode.data.getter(unsigned int a1)
{
  char v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  v2 = a1 >> 8;
  v3 = sub_100012C44(&qword_100403E88);
  v4 = swift_allocObject(v3, 34, 7);
  *(_OWORD *)(v4 + 16) = xmmword_10033C020;
  *(_BYTE *)(v4 + 32) = v1;
  *(_BYTE *)(v4 + 33) = v2;
  v5 = sub_1001068EC(v4);
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t CountryCode.description.getter(__int16 a1)
{
  int v1;
  int v2;
  uint64_t v3;
  char *v4;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = a1;
  v2 = HIBYTE(a1);
  type metadata accessor for String.Encoding(0);
  __chkstk_darwin();
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100403F98 != -1)
    swift_once(&qword_100403F98, sub_10012D8F0);
  if (static CountryCode.austria == v1 && HIBYTE(static CountryCode.austria) == v2)
  {
    v7 = 0x697274737541;
    return v7 & 0xFFFFFFFFFFFFLL | 0x61000000000000;
  }
  if (qword_100403FA0 != -1)
    swift_once(&qword_100403FA0, sub_10012D9AC);
  if (static CountryCode.belgium == v1 && HIBYTE(static CountryCode.belgium) == v2)
    return 0x6D7569676C6542;
  if (qword_100403FA8 != -1)
    swift_once(&qword_100403FA8, sub_10012DA68);
  if (static CountryCode.czechRepublic == v1 && HIBYTE(static CountryCode.czechRepublic) == v2)
    return 0x6552206863657A43;
  if (qword_100403FB0 != -1)
    swift_once(&qword_100403FB0, sub_10012DB24);
  if (static CountryCode.cyprus == v1 && HIBYTE(static CountryCode.cyprus) == v2)
    return 0x737572707943;
  if (qword_100403FB8 != -1)
    swift_once(&qword_100403FB8, sub_10012DBE0);
  if (static CountryCode.denmark == v1 && HIBYTE(static CountryCode.denmark) == v2)
    return 0x6B72616D6E6544;
  if (qword_100403FC0 != -1)
    swift_once(&qword_100403FC0, sub_10012DC9C);
  if (static CountryCode.estonia == v1 && HIBYTE(static CountryCode.estonia) == v2)
  {
    v8 = 1869902661;
LABEL_34:
    v7 = v8 & 0xFFFF0000FFFFFFFFLL | 0x696E00000000;
    return v7 & 0xFFFFFFFFFFFFLL | 0x61000000000000;
  }
  if (qword_100403FC8 != -1)
    swift_once(&qword_100403FC8, sub_10012DD58);
  if (static CountryCode.finland == v1 && HIBYTE(static CountryCode.finland) == v2)
  {
    v9 = 1819175238;
    return v9 | 0x646E6100000000;
  }
  if (qword_100403FD0 != -1)
    swift_once(&qword_100403FD0, sub_10012DE14);
  if (static CountryCode.france == v1 && HIBYTE(static CountryCode.france) == v2)
    return 0x65636E617246;
  if (qword_100403FD8 != -1)
    swift_once(&qword_100403FD8, sub_10012DED0);
  if (static CountryCode.germany == v1 && HIBYTE(static CountryCode.germany) == v2)
    return 0x796E616D726547;
  if (qword_100403FE0 != -1)
    swift_once(&qword_100403FE0, sub_10012DF8C);
  if (static CountryCode.greece == v1 && HIBYTE(static CountryCode.greece) == v2)
    return 0x656365657247;
  if (qword_100403FE8 != -1)
    swift_once(&qword_100403FE8, sub_10012E048);
  if (static CountryCode.hungary == v1 && HIBYTE(static CountryCode.hungary) == v2)
    return 0x797261676E7548;
  if (qword_100403FF0 != -1)
    swift_once(&qword_100403FF0, sub_10012E104);
  if (static CountryCode.italy == v1 && HIBYTE(static CountryCode.italy) == v2)
    return 0x796C617449;
  if (qword_100403FF8 != -1)
    swift_once(&qword_100403FF8, sub_10012E1C0);
  if (static CountryCode.ireland == v1 && HIBYTE(static CountryCode.ireland) == v2)
    return 0x646E616C657249;
  if (qword_100404000 != -1)
    swift_once(&qword_100404000, sub_10012E27C);
  if (static CountryCode.latvia == v1 && HIBYTE(static CountryCode.latvia) == v2)
    return 0x61697674614CLL;
  if (qword_100404008 != -1)
    swift_once(&qword_100404008, sub_10012E338);
  if (static CountryCode.lithuania == v1 && HIBYTE(static CountryCode.lithuania) == v2)
    return 0x696E61756874694CLL;
  if (qword_100404010 != -1)
    swift_once(&qword_100404010, sub_10012E3F4);
  if (static CountryCode.luxembourg == v1 && HIBYTE(static CountryCode.luxembourg) == v2)
    return 0x756F626D6578754CLL;
  if (qword_100404018 != -1)
    swift_once(&qword_100404018, sub_10012E4B0);
  if (static CountryCode.malta == v1 && HIBYTE(static CountryCode.malta) == v2)
    return 0x61746C614DLL;
  if (qword_100404020 != -1)
    swift_once(&qword_100404020, sub_10012E56C);
  if (static CountryCode.netherlands == v1 && HIBYTE(static CountryCode.netherlands) == v2)
    return 0x616C72656874654ELL;
  if (qword_100404028 != -1)
    swift_once(&qword_100404028, sub_10012E628);
  if (static CountryCode.poland == v1 && HIBYTE(static CountryCode.poland) == v2)
    return 0x646E616C6F50;
  if (qword_100404030 != -1)
    swift_once(&qword_100404030, sub_10012E6E4);
  if (static CountryCode.portugal == v1 && HIBYTE(static CountryCode.portugal) == v2)
    return 0x6C61677574726F50;
  if (qword_100404038 != -1)
    swift_once(&qword_100404038, sub_10012E7A0);
  if (static CountryCode.slovakRepublic == v1 && HIBYTE(static CountryCode.slovakRepublic) == v2)
    return 0x52206B61766F6C53;
  if (qword_100404040 != -1)
    swift_once(&qword_100404040, sub_10012E85C);
  if (static CountryCode.slovenia == v1 && HIBYTE(static CountryCode.slovenia) == v2)
    return 0x61696E65766F6C53;
  if (qword_100404048 != -1)
    swift_once(&qword_100404048, sub_10012E918);
  if (static CountryCode.spain == v1 && HIBYTE(static CountryCode.spain) == v2)
    return 0x6E69617053;
  if (qword_100404050 != -1)
    swift_once(&qword_100404050, sub_10012E9D4);
  if (static CountryCode.sweden == v1 && HIBYTE(static CountryCode.sweden) == v2)
    return 0x6E6564657753;
  if (qword_100404058 != -1)
    swift_once(&qword_100404058, sub_10012EA90);
  if (static CountryCode.uk == v1 && HIBYTE(static CountryCode.uk) == v2)
    return 19285;
  if (qword_100404060 != -1)
    swift_once(&qword_100404060, sub_10012EB4C);
  if (static CountryCode.iceland == v1 && HIBYTE(static CountryCode.iceland) == v2)
  {
    v9 = 1818583881;
    return v9 | 0x646E6100000000;
  }
  if (qword_100404068 != -1)
    swift_once(&qword_100404068, sub_10012EC08);
  if (static CountryCode.liechthenstein == v1 && HIBYTE(static CountryCode.liechthenstein) == v2)
    return 0x656874686365694CLL;
  if (qword_100404070 != -1)
    swift_once(&qword_100404070, sub_10012ECC4);
  if (static CountryCode.norway == v1 && HIBYTE(static CountryCode.norway) == v2)
    return 0x796177726F4ELL;
  if (qword_100404078 != -1)
    swift_once(&qword_100404078, sub_10012ED80);
  if (static CountryCode.switzerland == v1 && HIBYTE(static CountryCode.switzerland) == v2)
    return 0x6C72657A74697753;
  if (qword_100404080 != -1)
    swift_once(&qword_100404080, sub_10012EE3C);
  if (static CountryCode.bulgaria == v1 && HIBYTE(static CountryCode.bulgaria) == v2)
    return 0x61697261676C7542;
  if (qword_100404088 != -1)
    swift_once(&qword_100404088, sub_10012EEF8);
  if (static CountryCode.turkey == v1 && HIBYTE(static CountryCode.turkey) == v2)
    return 0x79656B727554;
  if (qword_100404090 != -1)
    swift_once(&qword_100404090, sub_10012EFB4);
  if (static CountryCode.romania == v1 && HIBYTE(static CountryCode.romania) == v2)
  {
    v8 = 1634561874;
    goto LABEL_34;
  }
  if (qword_100404098 != -1)
    swift_once(&qword_100404098, sub_10012F070);
  if (static CountryCode.russia == v1 && HIBYTE(static CountryCode.russia) == v2)
    return 0x616973737552;
  if (qword_1004040A0 != -1)
    swift_once(&qword_1004040A0, sub_10012F12C);
  if (static CountryCode.croatia == v1 && HIBYTE(static CountryCode.croatia) == v2)
  {
    v7 = 0x6974616F7243;
    return v7 & 0xFFFFFFFFFFFFLL | 0x61000000000000;
  }
  if (qword_1004040A8 != -1)
    swift_once(&qword_1004040A8, sub_10012F1E8);
  if (static CountryCode.serbia == v1 && HIBYTE(static CountryCode.serbia) == v2)
    return 0x616962726553;
  if (qword_1004040B0 != -1)
    swift_once(&qword_1004040B0, sub_10012F2A4);
  if (static CountryCode.southAfrica == v1 && HIBYTE(static CountryCode.southAfrica) == v2)
    return 0x6641206874756F53;
  if (qword_1004040B8 != -1)
    swift_once(&qword_1004040B8, sub_10012F360);
  if (static CountryCode.usa == v1 && byte_100410525 == v2)
    return 0xD000000000000018;
  v10 = sub_100012C44(&qword_100403E88);
  v11 = swift_allocObject(v10, 34, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10033C020;
  *(_BYTE *)(v11 + 32) = v1;
  *(_BYTE *)(v11 + 33) = v2;
  v17 = v11;
  static String.Encoding.utf8.getter(v11);
  v12 = sub_100012C44(&qword_100406738);
  v13 = sub_100011770((unint64_t *)&qword_100406740, &qword_100406738, (const char *)&protocol conformance descriptor for [A]);
  v16 = String.init<A>(bytes:encoding:)(&v17, v4, v12, v13);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  if (v15)
    return v16;
  else
    return 0;
}

__int16 *CountryCode.austria.unsafeMutableAddressor()
{
  if (qword_100403F98 != -1)
    swift_once(&qword_100403F98, sub_10012D8F0);
  return &static CountryCode.austria;
}

__int16 *CountryCode.belgium.unsafeMutableAddressor()
{
  if (qword_100403FA0 != -1)
    swift_once(&qword_100403FA0, sub_10012D9AC);
  return &static CountryCode.belgium;
}

__int16 *CountryCode.czechRepublic.unsafeMutableAddressor()
{
  if (qword_100403FA8 != -1)
    swift_once(&qword_100403FA8, sub_10012DA68);
  return &static CountryCode.czechRepublic;
}

__int16 *CountryCode.cyprus.unsafeMutableAddressor()
{
  if (qword_100403FB0 != -1)
    swift_once(&qword_100403FB0, sub_10012DB24);
  return &static CountryCode.cyprus;
}

__int16 *CountryCode.denmark.unsafeMutableAddressor()
{
  if (qword_100403FB8 != -1)
    swift_once(&qword_100403FB8, sub_10012DBE0);
  return &static CountryCode.denmark;
}

__int16 *CountryCode.estonia.unsafeMutableAddressor()
{
  if (qword_100403FC0 != -1)
    swift_once(&qword_100403FC0, sub_10012DC9C);
  return &static CountryCode.estonia;
}

__int16 *CountryCode.finland.unsafeMutableAddressor()
{
  if (qword_100403FC8 != -1)
    swift_once(&qword_100403FC8, sub_10012DD58);
  return &static CountryCode.finland;
}

__int16 *CountryCode.france.unsafeMutableAddressor()
{
  if (qword_100403FD0 != -1)
    swift_once(&qword_100403FD0, sub_10012DE14);
  return &static CountryCode.france;
}

__int16 *CountryCode.germany.unsafeMutableAddressor()
{
  if (qword_100403FD8 != -1)
    swift_once(&qword_100403FD8, sub_10012DED0);
  return &static CountryCode.germany;
}

__int16 *CountryCode.greece.unsafeMutableAddressor()
{
  if (qword_100403FE0 != -1)
    swift_once(&qword_100403FE0, sub_10012DF8C);
  return &static CountryCode.greece;
}

__int16 *CountryCode.hungary.unsafeMutableAddressor()
{
  if (qword_100403FE8 != -1)
    swift_once(&qword_100403FE8, sub_10012E048);
  return &static CountryCode.hungary;
}

__int16 *CountryCode.italy.unsafeMutableAddressor()
{
  if (qword_100403FF0 != -1)
    swift_once(&qword_100403FF0, sub_10012E104);
  return &static CountryCode.italy;
}

__int16 *CountryCode.ireland.unsafeMutableAddressor()
{
  if (qword_100403FF8 != -1)
    swift_once(&qword_100403FF8, sub_10012E1C0);
  return &static CountryCode.ireland;
}

__int16 *CountryCode.latvia.unsafeMutableAddressor()
{
  if (qword_100404000 != -1)
    swift_once(&qword_100404000, sub_10012E27C);
  return &static CountryCode.latvia;
}

__int16 *CountryCode.lithuania.unsafeMutableAddressor()
{
  if (qword_100404008 != -1)
    swift_once(&qword_100404008, sub_10012E338);
  return &static CountryCode.lithuania;
}

__int16 *CountryCode.luxembourg.unsafeMutableAddressor()
{
  if (qword_100404010 != -1)
    swift_once(&qword_100404010, sub_10012E3F4);
  return &static CountryCode.luxembourg;
}

__int16 *CountryCode.malta.unsafeMutableAddressor()
{
  if (qword_100404018 != -1)
    swift_once(&qword_100404018, sub_10012E4B0);
  return &static CountryCode.malta;
}

__int16 *CountryCode.netherlands.unsafeMutableAddressor()
{
  if (qword_100404020 != -1)
    swift_once(&qword_100404020, sub_10012E56C);
  return &static CountryCode.netherlands;
}

__int16 *CountryCode.poland.unsafeMutableAddressor()
{
  if (qword_100404028 != -1)
    swift_once(&qword_100404028, sub_10012E628);
  return &static CountryCode.poland;
}

__int16 *CountryCode.portugal.unsafeMutableAddressor()
{
  if (qword_100404030 != -1)
    swift_once(&qword_100404030, sub_10012E6E4);
  return &static CountryCode.portugal;
}

__int16 *CountryCode.slovakRepublic.unsafeMutableAddressor()
{
  if (qword_100404038 != -1)
    swift_once(&qword_100404038, sub_10012E7A0);
  return &static CountryCode.slovakRepublic;
}

__int16 *CountryCode.slovenia.unsafeMutableAddressor()
{
  if (qword_100404040 != -1)
    swift_once(&qword_100404040, sub_10012E85C);
  return &static CountryCode.slovenia;
}

__int16 *CountryCode.spain.unsafeMutableAddressor()
{
  if (qword_100404048 != -1)
    swift_once(&qword_100404048, sub_10012E918);
  return &static CountryCode.spain;
}

__int16 *CountryCode.sweden.unsafeMutableAddressor()
{
  if (qword_100404050 != -1)
    swift_once(&qword_100404050, sub_10012E9D4);
  return &static CountryCode.sweden;
}

__int16 *CountryCode.uk.unsafeMutableAddressor()
{
  if (qword_100404058 != -1)
    swift_once(&qword_100404058, sub_10012EA90);
  return &static CountryCode.uk;
}

__int16 *CountryCode.iceland.unsafeMutableAddressor()
{
  if (qword_100404060 != -1)
    swift_once(&qword_100404060, sub_10012EB4C);
  return &static CountryCode.iceland;
}

__int16 *CountryCode.liechthenstein.unsafeMutableAddressor()
{
  if (qword_100404068 != -1)
    swift_once(&qword_100404068, sub_10012EC08);
  return &static CountryCode.liechthenstein;
}

__int16 *CountryCode.norway.unsafeMutableAddressor()
{
  if (qword_100404070 != -1)
    swift_once(&qword_100404070, sub_10012ECC4);
  return &static CountryCode.norway;
}

__int16 *CountryCode.switzerland.unsafeMutableAddressor()
{
  if (qword_100404078 != -1)
    swift_once(&qword_100404078, sub_10012ED80);
  return &static CountryCode.switzerland;
}

__int16 *CountryCode.bulgaria.unsafeMutableAddressor()
{
  if (qword_100404080 != -1)
    swift_once(&qword_100404080, sub_10012EE3C);
  return &static CountryCode.bulgaria;
}

__int16 *CountryCode.turkey.unsafeMutableAddressor()
{
  if (qword_100404088 != -1)
    swift_once(&qword_100404088, sub_10012EEF8);
  return &static CountryCode.turkey;
}

__int16 *CountryCode.romania.unsafeMutableAddressor()
{
  if (qword_100404090 != -1)
    swift_once(&qword_100404090, sub_10012EFB4);
  return &static CountryCode.romania;
}

__int16 *CountryCode.russia.unsafeMutableAddressor()
{
  if (qword_100404098 != -1)
    swift_once(&qword_100404098, sub_10012F070);
  return &static CountryCode.russia;
}

__int16 *CountryCode.croatia.unsafeMutableAddressor()
{
  if (qword_1004040A0 != -1)
    swift_once(&qword_1004040A0, sub_10012F12C);
  return &static CountryCode.croatia;
}

__int16 *CountryCode.serbia.unsafeMutableAddressor()
{
  if (qword_1004040A8 != -1)
    swift_once(&qword_1004040A8, sub_10012F1E8);
  return &static CountryCode.serbia;
}

__int16 *CountryCode.southAfrica.unsafeMutableAddressor()
{
  if (qword_1004040B0 != -1)
    swift_once(&qword_1004040B0, sub_10012F2A4);
  return &static CountryCode.southAfrica;
}

char *CountryCode.usa.unsafeMutableAddressor()
{
  if (qword_1004040B8 != -1)
    swift_once(&qword_1004040B8, sub_10012F360);
  return &static CountryCode.usa;
}

uint64_t CountryCode.customMirror.getter(__int16 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  __int16 v13;

  v2 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1;
  v12 = _swiftEmptyArrayStorage;
  v8 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  v9 = sub_100012C44(&qword_100405B90);
  v10 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v13, &v12, v7, v5, &type metadata for CountryCode, v9, v10);
}

uint64_t sub_10012D674()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  result = String.count.getter(23128, 0xE200000000000000);
  if (result == 2)
  {
    v1 = String.subscript.getter(15, 23128, 0xE200000000000000);
    v3 = v2;
    v4 = Character.asciiValue.getter(v1);
    result = swift_bridgeObjectRelease(v3);
    if ((v4 & 0x100) == 0)
    {
      result = sub_10012BC24(23128, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(result);
        result = swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.unknown) = v4;
          HIBYTE(static CountryCode.unknown) = v7;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

CoreP2P::CountryCode __swiftcall CountryCode.init(stringLiteral:)(Swift::String stringLiteral)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  object = stringLiteral._object;
  countAndFlagsBits = stringLiteral._countAndFlagsBits;
  v3 = String.count.getter(stringLiteral._countAndFlagsBits, stringLiteral._object);
  if (v3 != 2)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return (CoreP2P::CountryCode)v3;
  }
  swift_bridgeObjectRetain(object);
  v4 = sub_1000FB724(countAndFlagsBits, (unint64_t)object);
  v6 = v5;
  swift_bridgeObjectRelease(object);
  if (!v6)
    goto LABEL_8;
  v7 = Character.asciiValue.getter(v4);
  swift_bridgeObjectRelease(v6);
  if ((v7 & 0x100) != 0)
    goto LABEL_8;
  v8 = sub_10012BC24(countAndFlagsBits, (unint64_t)object);
  v10 = v9;
  swift_bridgeObjectRelease(object);
  if (!v10)
    goto LABEL_8;
  v11 = Character.asciiValue.getter(v8);
  swift_bridgeObjectRelease(v10);
  if ((v11 & 0x100) != 0)
    goto LABEL_8;
  LOWORD(v3) = v7 | (unsigned __int16)(v11 << 8);
  return (CoreP2P::CountryCode)v3;
}

uint64_t static CountryCode.unknown.getter()
{
  return sub_10012F41C(&qword_100403F88, (unsigned __int8 *)&static CountryCode.unknown, (unsigned __int8 *)&static CountryCode.unknown + 1);
}

void sub_10012D7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(13144, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 13144, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(13144, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.unknownETSI) = v3;
          HIBYTE(static CountryCode.unknownETSI) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

__int16 *CountryCode.unknownETSI.unsafeMutableAddressor()
{
  if (qword_100403F90 != -1)
    swift_once(&qword_100403F90, sub_10012D7F4);
  return &static CountryCode.unknownETSI;
}

uint64_t static CountryCode.unknownETSI.getter()
{
  return sub_10012F41C(&qword_100403F90, (unsigned __int8 *)&static CountryCode.unknownETSI, (unsigned __int8 *)&static CountryCode.unknownETSI + 1);
}

void sub_10012D8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21569, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21569, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21569, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.austria) = v3;
          HIBYTE(static CountryCode.austria) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.austria.getter()
{
  return sub_10012F41C(&qword_100403F98, (unsigned __int8 *)&static CountryCode.austria, (unsigned __int8 *)&static CountryCode.austria + 1);
}

void sub_10012D9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(17730, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 17730, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(17730, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.belgium) = v3;
          HIBYTE(static CountryCode.belgium) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.belgium.getter()
{
  return sub_10012F41C(&qword_100403FA0, (unsigned __int8 *)&static CountryCode.belgium, (unsigned __int8 *)&static CountryCode.belgium + 1);
}

void sub_10012DA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(23107, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 23107, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(23107, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.czechRepublic) = v3;
          HIBYTE(static CountryCode.czechRepublic) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.czechRepublic.getter()
{
  return sub_10012F41C(&qword_100403FA8, (unsigned __int8 *)&static CountryCode.czechRepublic, (unsigned __int8 *)&static CountryCode.czechRepublic + 1);
}

void sub_10012DB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(22851, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 22851, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(22851, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.cyprus) = v3;
          HIBYTE(static CountryCode.cyprus) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.cyprus.getter()
{
  return sub_10012F41C(&qword_100403FB0, (unsigned __int8 *)&static CountryCode.cyprus, (unsigned __int8 *)&static CountryCode.cyprus + 1);
}

void sub_10012DBE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(19268, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 19268, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(19268, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.denmark) = v3;
          HIBYTE(static CountryCode.denmark) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.denmark.getter()
{
  return sub_10012F41C(&qword_100403FB8, (unsigned __int8 *)&static CountryCode.denmark, (unsigned __int8 *)&static CountryCode.denmark + 1);
}

void sub_10012DC9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(17733, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 17733, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(17733, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.estonia) = v3;
          HIBYTE(static CountryCode.estonia) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.estonia.getter()
{
  return sub_10012F41C(&qword_100403FC0, (unsigned __int8 *)&static CountryCode.estonia, (unsigned __int8 *)&static CountryCode.estonia + 1);
}

void sub_10012DD58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(18758, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 18758, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(18758, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.finland) = v3;
          HIBYTE(static CountryCode.finland) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.finland.getter()
{
  return sub_10012F41C(&qword_100403FC8, (unsigned __int8 *)&static CountryCode.finland, (unsigned __int8 *)&static CountryCode.finland + 1);
}

void sub_10012DE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21062, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21062, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21062, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.france) = v3;
          HIBYTE(static CountryCode.france) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.france.getter()
{
  return sub_10012F41C(&qword_100403FD0, (unsigned __int8 *)&static CountryCode.france, (unsigned __int8 *)&static CountryCode.france + 1);
}

void sub_10012DED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(17732, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 17732, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(17732, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.germany) = v3;
          HIBYTE(static CountryCode.germany) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.germany.getter()
{
  return sub_10012F41C(&qword_100403FD8, (unsigned __int8 *)&static CountryCode.germany, (unsigned __int8 *)&static CountryCode.germany + 1);
}

void sub_10012DF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21063, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21063, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21063, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.greece) = v3;
          HIBYTE(static CountryCode.greece) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.greece.getter()
{
  return sub_10012F41C(&qword_100403FE0, (unsigned __int8 *)&static CountryCode.greece, (unsigned __int8 *)&static CountryCode.greece + 1);
}

void sub_10012E048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21832, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21832, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21832, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.hungary) = v3;
          HIBYTE(static CountryCode.hungary) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.hungary.getter()
{
  return sub_10012F41C(&qword_100403FE8, (unsigned __int8 *)&static CountryCode.hungary, (unsigned __int8 *)&static CountryCode.hungary + 1);
}

void sub_10012E104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21577, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21577, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21577, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.italy) = v3;
          HIBYTE(static CountryCode.italy) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.italy.getter()
{
  return sub_10012F41C(&qword_100403FF0, (unsigned __int8 *)&static CountryCode.italy, (unsigned __int8 *)&static CountryCode.italy + 1);
}

void sub_10012E1C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(17737, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 17737, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(17737, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.ireland) = v3;
          HIBYTE(static CountryCode.ireland) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.ireland.getter()
{
  return sub_10012F41C(&qword_100403FF8, (unsigned __int8 *)&static CountryCode.ireland, (unsigned __int8 *)&static CountryCode.ireland + 1);
}

void sub_10012E27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(22092, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 22092, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(22092, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.latvia) = v3;
          HIBYTE(static CountryCode.latvia) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.latvia.getter()
{
  return sub_10012F41C(&qword_100404000, (unsigned __int8 *)&static CountryCode.latvia, (unsigned __int8 *)&static CountryCode.latvia + 1);
}

void sub_10012E338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21580, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21580, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21580, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.lithuania) = v3;
          HIBYTE(static CountryCode.lithuania) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.lithuania.getter()
{
  return sub_10012F41C(&qword_100404008, (unsigned __int8 *)&static CountryCode.lithuania, (unsigned __int8 *)&static CountryCode.lithuania + 1);
}

void sub_10012E3F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21836, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21836, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21836, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.luxembourg) = v3;
          HIBYTE(static CountryCode.luxembourg) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.luxembourg.getter()
{
  return sub_10012F41C(&qword_100404010, (unsigned __int8 *)&static CountryCode.luxembourg, (unsigned __int8 *)&static CountryCode.luxembourg + 1);
}

void sub_10012E4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21581, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21581, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21581, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.malta) = v3;
          HIBYTE(static CountryCode.malta) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.malta.getter()
{
  return sub_10012F41C(&qword_100404018, (unsigned __int8 *)&static CountryCode.malta, (unsigned __int8 *)&static CountryCode.malta + 1);
}

void sub_10012E56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(19534, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 19534, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(19534, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.netherlands) = v3;
          HIBYTE(static CountryCode.netherlands) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.netherlands.getter()
{
  return sub_10012F41C(&qword_100404020, (unsigned __int8 *)&static CountryCode.netherlands, (unsigned __int8 *)&static CountryCode.netherlands + 1);
}

void sub_10012E628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(19536, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 19536, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(19536, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.poland) = v3;
          HIBYTE(static CountryCode.poland) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.poland.getter()
{
  return sub_10012F41C(&qword_100404028, (unsigned __int8 *)&static CountryCode.poland, (unsigned __int8 *)&static CountryCode.poland + 1);
}

void sub_10012E6E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21584, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21584, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21584, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.portugal) = v3;
          HIBYTE(static CountryCode.portugal) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.portugal.getter()
{
  return sub_10012F41C(&qword_100404030, (unsigned __int8 *)&static CountryCode.portugal, (unsigned __int8 *)&static CountryCode.portugal + 1);
}

void sub_10012E7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(19283, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 19283, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(19283, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.slovakRepublic) = v3;
          HIBYTE(static CountryCode.slovakRepublic) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.slovakRepublic.getter()
{
  return sub_10012F41C(&qword_100404038, (unsigned __int8 *)&static CountryCode.slovakRepublic, (unsigned __int8 *)&static CountryCode.slovakRepublic + 1);
}

void sub_10012E85C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(18771, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 18771, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(18771, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.slovenia) = v3;
          HIBYTE(static CountryCode.slovenia) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.slovenia.getter()
{
  return sub_10012F41C(&qword_100404040, (unsigned __int8 *)&static CountryCode.slovenia, (unsigned __int8 *)&static CountryCode.slovenia + 1);
}

void sub_10012E918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21317, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21317, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21317, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.spain) = v3;
          HIBYTE(static CountryCode.spain) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.spain.getter()
{
  return sub_10012F41C(&qword_100404048, (unsigned __int8 *)&static CountryCode.spain, (unsigned __int8 *)&static CountryCode.spain + 1);
}

void sub_10012E9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(17747, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 17747, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(17747, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.sweden) = v3;
          HIBYTE(static CountryCode.sweden) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.sweden.getter()
{
  return sub_10012F41C(&qword_100404050, (unsigned __int8 *)&static CountryCode.sweden, (unsigned __int8 *)&static CountryCode.sweden + 1);
}

void sub_10012EA90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(16967, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 16967, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(16967, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.uk) = v3;
          HIBYTE(static CountryCode.uk) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.uk.getter()
{
  return sub_10012F41C(&qword_100404058, (unsigned __int8 *)&static CountryCode.uk, (unsigned __int8 *)&static CountryCode.uk + 1);
}

void sub_10012EB4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21321, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21321, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21321, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.iceland) = v3;
          HIBYTE(static CountryCode.iceland) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.iceland.getter()
{
  return sub_10012F41C(&qword_100404060, (unsigned __int8 *)&static CountryCode.iceland, (unsigned __int8 *)&static CountryCode.iceland + 1);
}

void sub_10012EC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(18764, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 18764, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(18764, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.liechthenstein) = v3;
          HIBYTE(static CountryCode.liechthenstein) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.liechthenstein.getter()
{
  return sub_10012F41C(&qword_100404068, (unsigned __int8 *)&static CountryCode.liechthenstein, (unsigned __int8 *)&static CountryCode.liechthenstein + 1);
}

void sub_10012ECC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(20302, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 20302, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(20302, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.norway) = v3;
          HIBYTE(static CountryCode.norway) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.norway.getter()
{
  return sub_10012F41C(&qword_100404070, (unsigned __int8 *)&static CountryCode.norway, (unsigned __int8 *)&static CountryCode.norway + 1);
}

void sub_10012ED80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(18499, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 18499, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(18499, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.switzerland) = v3;
          HIBYTE(static CountryCode.switzerland) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.switzerland.getter()
{
  return sub_10012F41C(&qword_100404078, (unsigned __int8 *)&static CountryCode.switzerland, (unsigned __int8 *)&static CountryCode.switzerland + 1);
}

void sub_10012EE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(18242, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 18242, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(18242, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.bulgaria) = v3;
          HIBYTE(static CountryCode.bulgaria) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.bulgaria.getter()
{
  return sub_10012F41C(&qword_100404080, (unsigned __int8 *)&static CountryCode.bulgaria, (unsigned __int8 *)&static CountryCode.bulgaria + 1);
}

void sub_10012EEF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21076, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21076, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21076, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.turkey) = v3;
          HIBYTE(static CountryCode.turkey) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.turkey.getter()
{
  return sub_10012F41C(&qword_100404088, (unsigned __int8 *)&static CountryCode.turkey, (unsigned __int8 *)&static CountryCode.turkey + 1);
}

void sub_10012EFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(20306, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 20306, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(20306, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.romania) = v3;
          HIBYTE(static CountryCode.romania) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.romania.getter()
{
  return sub_10012F41C(&qword_100404090, (unsigned __int8 *)&static CountryCode.romania, (unsigned __int8 *)&static CountryCode.romania + 1);
}

void sub_10012F070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21842, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21842, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21842, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.russia) = v3;
          HIBYTE(static CountryCode.russia) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.russia.getter()
{
  return sub_10012F41C(&qword_100404098, (unsigned __int8 *)&static CountryCode.russia, (unsigned __int8 *)&static CountryCode.russia + 1);
}

void sub_10012F12C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21064, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21064, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21064, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.croatia) = v3;
          HIBYTE(static CountryCode.croatia) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.croatia.getter()
{
  return sub_10012F41C(&qword_1004040A0, (unsigned __int8 *)&static CountryCode.croatia, (unsigned __int8 *)&static CountryCode.croatia + 1);
}

void sub_10012F1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21330, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21330, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21330, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.serbia) = v3;
          HIBYTE(static CountryCode.serbia) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.serbia.getter()
{
  return sub_10012F41C(&qword_1004040A8, (unsigned __int8 *)&static CountryCode.serbia, (unsigned __int8 *)&static CountryCode.serbia + 1);
}

void sub_10012F2A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(16730, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 16730, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(16730, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          LOBYTE(static CountryCode.southAfrica) = v3;
          HIBYTE(static CountryCode.southAfrica) = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.southAfrica.getter()
{
  return sub_10012F41C(&qword_1004040B0, (unsigned __int8 *)&static CountryCode.southAfrica, (unsigned __int8 *)&static CountryCode.southAfrica + 1);
}

void sub_10012F360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (String.count.getter(21333, 0xE200000000000000) == 2)
  {
    v0 = String.subscript.getter(15, 21333, 0xE200000000000000);
    v2 = v1;
    v3 = Character.asciiValue.getter(v0);
    swift_bridgeObjectRelease(v2);
    if ((v3 & 0x100) == 0)
    {
      v4 = sub_10012BC24(21333, 0xE200000000000000);
      if (v5)
      {
        v6 = v5;
        v7 = Character.asciiValue.getter(v4);
        swift_bridgeObjectRelease(v6);
        if ((v7 & 0x100) == 0)
        {
          static CountryCode.usa = v3;
          byte_100410525 = v7;
          return;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static CountryCode.usa.getter()
{
  return sub_10012F41C(&qword_1004040B8, (unsigned __int8 *)&static CountryCode.usa, (unsigned __int8 *)&byte_100410525);
}

uint64_t sub_10012F41C(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*a1 != -1)
    swift_once();
  return *a2 | (*a3 << 8);
}

uint64_t CountryCode.isETSI.getter(__int16 a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;

  if (qword_1004040C0 != -1)
    swift_once(&qword_1004040C0, sub_10012F4F4);
  v2 = *((_QWORD *)off_100408750 + 2);
  if (!v2)
    return 0;
  v3 = v2 - 1;
  v4 = (unsigned __int8 *)off_100408750 + 33;
  do
  {
    v5 = v3;
    v6 = *(v4 - 1) == a1 && *v4 == HIBYTE(a1);
    result = v6;
    if (v6)
      break;
    --v3;
    v4 += 2;
  }
  while (v5);
  return result;
}

uint64_t sub_10012F4F4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  v0 = sub_100012C44(&qword_1004087A0);
  result = swift_allocObject(v0, 106, 7);
  v2 = result;
  *(_OWORD *)(result + 16) = xmmword_100349C40;
  if (qword_100403F90 != -1)
    result = swift_once(&qword_100403F90, sub_10012D7F4);
  *(_WORD *)(v2 + 32) = static CountryCode.unknownETSI;
  if (qword_100403F98 != -1)
    result = swift_once(&qword_100403F98, sub_10012D8F0);
  *(_WORD *)(v2 + 34) = static CountryCode.austria;
  if (qword_100403FA0 != -1)
    result = swift_once(&qword_100403FA0, sub_10012D9AC);
  *(_WORD *)(v2 + 36) = static CountryCode.belgium;
  if (qword_100403FA8 != -1)
    result = swift_once(&qword_100403FA8, sub_10012DA68);
  *(_WORD *)(v2 + 38) = static CountryCode.czechRepublic;
  if (qword_100403FB0 != -1)
    result = swift_once(&qword_100403FB0, sub_10012DB24);
  *(_WORD *)(v2 + 40) = static CountryCode.cyprus;
  if (qword_100403FB8 != -1)
    result = swift_once(&qword_100403FB8, sub_10012DBE0);
  *(_WORD *)(v2 + 42) = static CountryCode.denmark;
  if (qword_100403FC0 != -1)
    result = swift_once(&qword_100403FC0, sub_10012DC9C);
  *(_WORD *)(v2 + 44) = static CountryCode.estonia;
  if (qword_100403FC8 != -1)
    result = swift_once(&qword_100403FC8, sub_10012DD58);
  *(_WORD *)(v2 + 46) = static CountryCode.finland;
  if (qword_100403FD0 != -1)
    result = swift_once(&qword_100403FD0, sub_10012DE14);
  *(_WORD *)(v2 + 48) = static CountryCode.france;
  if (qword_100403FD8 != -1)
    result = swift_once(&qword_100403FD8, sub_10012DED0);
  *(_WORD *)(v2 + 50) = static CountryCode.germany;
  if (qword_100403FE0 != -1)
    result = swift_once(&qword_100403FE0, sub_10012DF8C);
  *(_WORD *)(v2 + 52) = static CountryCode.greece;
  if (qword_100403FE8 != -1)
    result = swift_once(&qword_100403FE8, sub_10012E048);
  *(_WORD *)(v2 + 54) = static CountryCode.hungary;
  if (qword_100403FF0 != -1)
    result = swift_once(&qword_100403FF0, sub_10012E104);
  *(_WORD *)(v2 + 56) = static CountryCode.italy;
  if (qword_100403FF8 != -1)
    result = swift_once(&qword_100403FF8, sub_10012E1C0);
  *(_WORD *)(v2 + 58) = static CountryCode.ireland;
  if (qword_100404000 != -1)
    result = swift_once(&qword_100404000, sub_10012E27C);
  *(_WORD *)(v2 + 60) = static CountryCode.latvia;
  if (qword_100404008 != -1)
    result = swift_once(&qword_100404008, sub_10012E338);
  *(_WORD *)(v2 + 62) = static CountryCode.lithuania;
  if (qword_100404010 != -1)
    result = swift_once(&qword_100404010, sub_10012E3F4);
  *(_WORD *)(v2 + 64) = static CountryCode.luxembourg;
  if (qword_100404018 != -1)
    result = swift_once(&qword_100404018, sub_10012E4B0);
  *(_WORD *)(v2 + 66) = static CountryCode.malta;
  if (qword_100404020 != -1)
    result = swift_once(&qword_100404020, sub_10012E56C);
  *(_WORD *)(v2 + 68) = static CountryCode.netherlands;
  if (qword_100404028 != -1)
    result = swift_once(&qword_100404028, sub_10012E628);
  *(_WORD *)(v2 + 70) = static CountryCode.poland;
  if (qword_100404030 != -1)
    result = swift_once(&qword_100404030, sub_10012E6E4);
  *(_WORD *)(v2 + 72) = static CountryCode.portugal;
  if (qword_100404038 != -1)
    result = swift_once(&qword_100404038, sub_10012E7A0);
  *(_WORD *)(v2 + 74) = static CountryCode.slovakRepublic;
  if (qword_100404040 != -1)
    result = swift_once(&qword_100404040, sub_10012E85C);
  *(_WORD *)(v2 + 76) = static CountryCode.slovenia;
  if (qword_100404048 != -1)
    result = swift_once(&qword_100404048, sub_10012E918);
  *(_WORD *)(v2 + 78) = static CountryCode.spain;
  if (qword_100404050 != -1)
    result = swift_once(&qword_100404050, sub_10012E9D4);
  *(_WORD *)(v2 + 80) = static CountryCode.sweden;
  if (qword_100404058 != -1)
    result = swift_once(&qword_100404058, sub_10012EA90);
  *(_WORD *)(v2 + 82) = static CountryCode.uk;
  if (qword_100404060 != -1)
    result = swift_once(&qword_100404060, sub_10012EB4C);
  *(_WORD *)(v2 + 84) = static CountryCode.iceland;
  if (qword_100404068 != -1)
    result = swift_once(&qword_100404068, sub_10012EC08);
  *(_WORD *)(v2 + 86) = static CountryCode.liechthenstein;
  if (qword_100404070 != -1)
    result = swift_once(&qword_100404070, sub_10012ECC4);
  *(_WORD *)(v2 + 88) = static CountryCode.norway;
  if (qword_100404078 != -1)
    result = swift_once(&qword_100404078, sub_10012ED80);
  *(_WORD *)(v2 + 90) = static CountryCode.switzerland;
  if (qword_100404080 != -1)
    result = swift_once(&qword_100404080, sub_10012EE3C);
  *(_WORD *)(v2 + 92) = static CountryCode.bulgaria;
  if (qword_100404088 != -1)
    result = swift_once(&qword_100404088, sub_10012EEF8);
  *(_WORD *)(v2 + 94) = static CountryCode.turkey;
  if (qword_100404090 != -1)
    result = swift_once(&qword_100404090, sub_10012EFB4);
  *(_WORD *)(v2 + 96) = static CountryCode.romania;
  if (qword_100404098 != -1)
    result = swift_once(&qword_100404098, sub_10012F070);
  *(_WORD *)(v2 + 98) = static CountryCode.russia;
  if (qword_1004040A0 != -1)
    result = swift_once(&qword_1004040A0, sub_10012F12C);
  *(_WORD *)(v2 + 100) = static CountryCode.croatia;
  if (qword_1004040A8 != -1)
    result = swift_once(&qword_1004040A8, sub_10012F1E8);
  *(_WORD *)(v2 + 102) = static CountryCode.serbia;
  if (qword_1004040B0 != -1)
    result = swift_once(&qword_1004040B0, sub_10012F2A4);
  *(_WORD *)(v2 + 104) = static CountryCode.southAfrica;
  off_100408750 = (_UNKNOWN *)v2;
  return result;
}

uint64_t sub_10012FD54()
{
  _BYTE *v0;

  if (*v0)
    return 0x7942646E6F636573;
  else
    return 0x7479427473726966;
}

uint64_t sub_10012FD98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100130690(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10012FDBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001301A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10012FDE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001301A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CountryCode.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  char v15;

  v5 = sub_100012C44(&qword_100408758);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001301A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CountryCode.CodingKeys, &type metadata for CountryCode.CodingKeys, v11, v9, v10);
  v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v15, v5);
  if (!v2)
  {
    v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(BYTE1(a2), &v14, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t CountryCode.init(from:)(_QWORD *a1)
{
  return sub_1001301EC(a1);
}

uint64_t sub_10012FF34@<X0>(_QWORD *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1001301EC(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10012FF5C(_QWORD *a1)
{
  unsigned __int16 *v1;

  return CountryCode.encode(to:)(a1, *v1);
}

uint64_t sub_10012FF74()
{
  __int16 *v0;

  return CountryCode.description.getter(*v0);
}

uint64_t sub_10012FF7C(uint64_t a1)
{
  __int16 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  __int16 v14;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v13 = _swiftEmptyArrayStorage;
  v9 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  v10 = sub_100012C44(&qword_100405B90);
  v11 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v14, &v13, v8, v6, a1, v10, v11);
}

void sub_1001300D4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  v4 = *a1;
  v3 = a1[1];
  if (String.count.getter(*a1, v3) == 2)
  {
    swift_bridgeObjectRetain(v3);
    v5 = sub_1000FB724(v4, v3);
    v7 = v6;
    swift_bridgeObjectRelease(v3);
    if (v7)
    {
      v8 = Character.asciiValue.getter(v5);
      swift_bridgeObjectRelease(v7);
      if ((v8 & 0x100) == 0)
      {
        v9 = sub_10012BC24(v4, v3);
        v11 = v10;
        swift_bridgeObjectRelease(v3);
        if (v11)
        {
          v12 = Character.asciiValue.getter(v9);
          swift_bridgeObjectRelease(v11);
          if ((v12 & 0x100) == 0)
          {
            *a2 = v8;
            a2[1] = v12;
            return;
          }
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_1001301A8()
{
  unint64_t result;

  result = qword_100408760;
  if (!qword_100408760)
  {
    result = swift_getWitnessTable(byte_100349EF8, &type metadata for CountryCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408760);
  }
  return result;
}

uint64_t sub_1001301EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v13;
  char v14;
  char v15;

  v3 = sub_100012C44(&qword_100408798);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001301A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CountryCode.CodingKeys, &type metadata for CountryCode.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v15 = 0;
    v10 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    v14 = 1;
    v11 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100014430(a1);
    return v10 | (v11 << 8);
  }
  return v7;
}

unint64_t sub_100130340()
{
  unint64_t result;

  result = qword_100408768;
  if (!qword_100408768)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CountryCode, &type metadata for CountryCode);
    atomic_store(result, (unint64_t *)&qword_100408768);
  }
  return result;
}

unint64_t sub_100130388()
{
  unint64_t result;

  result = qword_100408770;
  if (!qword_100408770)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CountryCode, &type metadata for CountryCode);
    atomic_store(result, (unint64_t *)&qword_100408770);
  }
  return result;
}

void *sub_1001303CC()
{
  return &protocol witness table for String;
}

unint64_t sub_1001303DC()
{
  unint64_t result;

  result = qword_100408778;
  if (!qword_100408778)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CountryCode, &type metadata for CountryCode);
    atomic_store(result, (unint64_t *)&qword_100408778);
  }
  return result;
}

void *sub_100130420()
{
  return &protocol witness table for String;
}

void *sub_10013042C()
{
  return &protocol witness table for String;
}

uint64_t storeEnumTagSinglePayload for CountryCode(_WORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if ((a3 + 0xFFFF) < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_1001304B0 + 4 * byte_100349C55[v4]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_100130490 + 4 * byte_100349C50[v4]))();
}

uint64_t sub_100130490(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001304B0(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_1001304B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001304C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001304C8(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1001304D0(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

ValueMetadata *type metadata accessor for CountryCode()
{
  return &type metadata for CountryCode;
}

uint64_t storeEnumTagSinglePayload for CountryCode.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100130538 + 4 * byte_100349C5F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10013056C + 4 * byte_100349C5A[v4]))();
}

uint64_t sub_10013056C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100130574(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013057CLL);
  return result;
}

uint64_t sub_100130588(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100130590);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100130594(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013059C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CountryCode.CodingKeys()
{
  return &type metadata for CountryCode.CodingKeys;
}

unint64_t sub_1001305BC()
{
  unint64_t result;

  result = qword_100408780;
  if (!qword_100408780)
  {
    result = swift_getWitnessTable(a1_0, &type metadata for CountryCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408780);
  }
  return result;
}

unint64_t sub_100130604()
{
  unint64_t result;

  result = qword_100408788;
  if (!qword_100408788)
  {
    result = swift_getWitnessTable(aA_2, &type metadata for CountryCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408788);
  }
  return result;
}

unint64_t sub_10013064C()
{
  unint64_t result;

  result = qword_100408790;
  if (!qword_100408790)
  {
    result = swift_getWitnessTable(aY_10, &type metadata for CountryCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408790);
  }
  return result;
}

uint64_t sub_100130690(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7479427473726966 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7479427473726966, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7942646E6F636573 && a2 == 0xEA00000000006574)
  {
    swift_bridgeObjectRelease(0xEA00000000006574);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7942646E6F636573, 0xEA00000000006574, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100130798@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v23 = a3;
  v24 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v5 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin();
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v23 - v8;
  v10 = *(_QWORD *)(a1 + 64);
  v25 = a1 + 64;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v26 = (unint64_t)(v11 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v15 = 0;
  if (!v13)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    sub_1000637E0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v5 + 72) * i, (uint64_t)v9, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_100033AC0((uint64_t)v9, (uint64_t)v7, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    if ((a2(v7) & 1) != 0)
    {
      swift_release(a1);
      v21 = v23;
      sub_100033AC0((uint64_t)v7, v23, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      v22 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v21, v22, 1, v24);
    }
    result = sub_100063824((uint64_t)v7, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    if (v13)
      goto LABEL_4;
LABEL_5:
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v18 >= v26)
      goto LABEL_25;
    v19 = *(_QWORD *)(v25 + 8 * v18);
    ++v15;
    if (v19)
      goto LABEL_20;
    v15 = v18 + 1;
    if (v18 + 1 >= v26)
      goto LABEL_25;
    v19 = *(_QWORD *)(v25 + 8 * v15);
    if (v19)
      goto LABEL_20;
    v15 = v18 + 2;
    if (v18 + 2 >= v26)
      goto LABEL_25;
    v19 = *(_QWORD *)(v25 + 8 * v15);
    if (v19)
      goto LABEL_20;
    v15 = v18 + 3;
    if (v18 + 3 >= v26)
      goto LABEL_25;
    v19 = *(_QWORD *)(v25 + 8 * v15);
    if (v19)
      goto LABEL_20;
    v20 = v18 + 4;
    if (v20 >= v26)
    {
LABEL_25:
      swift_release(a1);
      v22 = 1;
      v21 = v23;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v21, v22, 1, v24);
    }
    v19 = *(_QWORD *)(v25 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v15 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_28;
        if (v15 >= v26)
          goto LABEL_25;
        v19 = *(_QWORD *)(v25 + 8 * v15);
        ++v20;
        if (v19)
          goto LABEL_20;
      }
    }
    v15 = v20;
LABEL_20:
    v13 = (v19 - 1) & v19;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t AppleKeychain.__allocating_init(accessGroup:view:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
  *(_DWORD *)(v9 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken) = -1;
  v10 = (_QWORD *)(v9 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
  *v10 = &_swiftEmptySetSingleton;
  v10[1] = 0;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors) = &_swiftEmptyDictionarySingleton;
  v11 = (_QWORD *)(v9 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  *v11 = a1;
  v11[1] = a2;
  v12 = (_QWORD *)(v9 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  *v12 = a3;
  v12[1] = a4;
  return v9;
}

uint64_t sub_100130B10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = 0;
  v2 = v0[1];
  v3 = v2 + 56;
  do
  {
    if (v2)
    {
      if (*(_QWORD *)(v2 + 16))
      {
        v5 = static Hasher._hash(seed:_:)(*(_QWORD *)(v2 + 40), v1);
        v6 = -1 << *(_BYTE *)(v2 + 32);
        v7 = v5 & ~v6;
        if (((*(_QWORD *)(v3 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v8 = *(_QWORD *)(v2 + 48);
          if (*(_QWORD *)(v8 + 8 * v7) == v1)
            continue;
          v9 = ~v6;
          while (1)
          {
            v7 = (v7 + 1) & v9;
            if (((*(_QWORD *)(v3 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
              break;
            if (*(_QWORD *)(v8 + 8 * v7) == v1)
              goto LABEL_2;
          }
        }
      }
    }
    v10 = *v0;
    if (!*(_QWORD *)(*v0 + 16))
      goto LABEL_18;
    v11 = static Hasher._hash(seed:_:)(*(_QWORD *)(v10 + 40), v1);
    v12 = -1 << *(_BYTE *)(v10 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_18;
    v14 = *(_QWORD *)(v10 + 48);
    if (*(_QWORD *)(v14 + 8 * v13) != v1)
    {
      v15 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v15;
        if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        if (*(_QWORD *)(v14 + 8 * v13) == v1)
          goto LABEL_2;
      }
LABEL_18:
      sub_1000DE93C(&v17, v1);
      return v1;
    }
LABEL_2:
    ;
  }
  while (!__CFADD__(v1++, 1));
  return 0;
}

uint64_t sub_100130C70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v17;

  v1 = 0;
  v2 = v0[1];
  v3 = v2 + 56;
  if (v2)
    goto LABEL_2;
LABEL_9:
  while (1)
  {
    v9 = *v0;
    if (!*(_QWORD *)(*v0 + 16))
      break;
    v10 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v9 + 40), v1, 1);
    v11 = -1 << *(_BYTE *)(v9 + 32);
    v12 = v10 & ~v11;
    if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      break;
    v13 = *(_QWORD *)(v9 + 48);
    if (v1 != *(unsigned __int8 *)(v13 + v12))
    {
      v14 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v14;
        if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          goto LABEL_18;
        if (v1 == *(unsigned __int8 *)(v13 + v12))
          goto LABEL_15;
      }
    }
    do
    {
LABEL_15:
      if (v1 == 255)
      {
        LOBYTE(v1) = 0;
        v15 = 1;
        return v1 | (v15 << 8);
      }
      ++v1;
      if (!v2)
        goto LABEL_9;
LABEL_2:
      if (!*(_QWORD *)(v2 + 16))
        goto LABEL_9;
      v4 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v2 + 40), v1, 1);
      v5 = -1 << *(_BYTE *)(v2 + 32);
      v6 = v4 & ~v5;
      if (((*(_QWORD *)(v3 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        goto LABEL_9;
      v7 = *(_QWORD *)(v2 + 48);
    }
    while (v1 == *(unsigned __int8 *)(v7 + v6));
    v8 = ~v5;
    while (1)
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        break;
      if (v1 == *(unsigned __int8 *)(v7 + v6))
        goto LABEL_15;
    }
  }
LABEL_18:
  sub_1000DEFA0(&v17, v1);
  v15 = 0;
  return v1 | (v15 << 8);
}

uint64_t sub_100130DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = v5;
  v37 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  __chkstk_darwin();
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LongTermPairingKeys(0);
  __chkstk_darwin();
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin();
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v6 + *(int *)(v17 + 20);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32);
  v38 = a2;
  v39 = a3;
  v22 = a2;
  v24 = v23;
  v40 = a5;
  LOBYTE(a5) = v21(v20, v22, a3, a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v19, a1, a4);
  sub_1000637E0(v6, (uint64_t)v16, type metadata accessor for LongTermPairingKeys);
  if ((a5 & 1) != 0)
  {
    v25 = &v16[*(int *)(v14 + 20)];
    v26 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v13, v25, v26);
    v27 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
    v28 = &v25[v27];
    v29 = &v13[v27];
    v30 = type metadata accessor for SymmetricKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v29, v28, v30);
    type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
    v31 = v37;
    P256.Signing.PrivateKey.publicKey.getter();
    v32 = &v13[*(int *)(v31 + 24)];
    *(_QWORD *)v32 = 0;
    *((_QWORD *)v32 + 1) = 0;
    v33 = &v13[*(int *)(v31 + 28)];
    v34 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
    v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 40))(v13, v38, v39, 1, a4);
    sub_100063824((uint64_t)v13, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  }
  else
  {
    v35 = 0;
  }
  sub_100063824((uint64_t)v16, type metadata accessor for LongTermPairingKeys);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v19, a4);
  return v35 & 1;
}

uint64_t sub_100131044@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(char *, _QWORD, uint64_t *);
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(unint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  uint64_t *v59;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  _QWORD *v104;
  _QWORD v105[6];

  v102 = a5;
  v103 = a3;
  v91 = a4;
  v101 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v96 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin();
  v95 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408868);
  __chkstk_darwin();
  v93 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = (char *)&v83 - v11;
  v13 = type metadata accessor for UUID(0);
  v99 = *(_QWORD **)(v13 - 8);
  __chkstk_darwin();
  v100 = (unint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin();
  v88 = (uint64_t)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_1004088A0);
  __chkstk_darwin();
  v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v21 = (char *)&v83 - v20;
  v89 = type metadata accessor for LongTermPairingKeys(0);
  v97 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin();
  v23 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
  v24 = *(uint64_t (**)(char *, _QWORD, uint64_t *))(v102 + 24);
  v98 = a2;
  v25 = a2;
  v90 = a1;
  v26 = v91;
  v27 = (uint64_t)v21;
  v28 = v24(v21, v25, v103);
  sub_100033B48(v27, (uint64_t)v19, &qword_1004088A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15) == 1)
  {
    swift_bridgeObjectRelease(v28);
    v29 = swift_bridgeObjectRelease(v103);
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 8))(v90, v26, v29);
    sub_100033A84(v27, &qword_1004088A0);
    sub_100033A84((uint64_t)v19, &qword_1004088A0);
    v30 = type metadata accessor for Logger(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v23, v30);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(a6, 1, 1, v89);
  }
  v87 = v27;
  v32 = v88;
  sub_100033AC0((uint64_t)v19, v88, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  v33 = v89;
  sub_1000637E0(v32, (uint64_t)&v23[*(int *)(v89 + 20)], type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  v105[3] = v26;
  v105[4] = v102;
  v34 = sub_100033C24(v105);
  v86 = *(_QWORD *)(v26 - 8);
  v35 = v90;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v86 + 16))(v34, v90, v26);
  v36 = type metadata accessor for LongTermPairingKeys.PairedDevices();
  swift_allocObject(v36, 112, 7);
  v37 = sub_100135E58((uint64_t)v98, (uint64_t)v103, (uint64_t)v105);
  v38 = v28;
  v39 = v37;
  *(_QWORD *)&v23[*(int *)(v33 + 24)] = v37;
  v40 = *(_QWORD *)(v38 + 16);
  v41 = v26;
  v42 = v35;
  v43 = v33;
  v44 = v97;
  v45 = v88;
  v46 = v38;
  if (!v40)
  {
LABEL_26:
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v42, v41);
    sub_100063824(v45, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    sub_100033A84(v87, &qword_1004088A0);
    swift_bridgeObjectRelease(v46);
    sub_1000637E0((uint64_t)v23, a6, type metadata accessor for LongTermPairingKeys);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(a6, 0, 1, v43);
    return sub_100063824((uint64_t)v23, type metadata accessor for LongTermPairingKeys);
  }
  v85 = v23;
  v47 = v38 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80));
  v102 = *(_QWORD *)(v96 + 72);
  v103 = (uint64_t *)(v39 + 16);
  v98 = (void (*)(uint64_t, uint64_t, uint64_t))v99[2];
  v84 = v38;
  swift_bridgeObjectRetain(v38);
  v48 = v100;
  v94 = a6;
  v92 = v12;
  while (1)
  {
    v98(v48, v47, v13);
    sub_1000637E0(v47, (uint64_t)v12, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    v51 = v96;
    v52 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56);
    v53 = v101;
    v52(v12, 0, 1, v101);
    v54 = swift_beginAccess(v103, v105, 33, 0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v51 + 48))(v12, 1, v53, v54) == 1)
    {
      swift_retain();
      sub_100033A84((uint64_t)v12, &qword_100408868);
      v55 = *(_QWORD *)(v39 + 16);
      swift_bridgeObjectRetain(v55);
      v56 = sub_10002DCA0(v48);
      v58 = v57;
      swift_bridgeObjectRelease(v55);
      if ((v58 & 1) != 0)
      {
        v59 = v103;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v103);
        v61 = (_QWORD *)*v59;
        v104 = (_QWORD *)*v59;
        *v59 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100147BD4();
          v61 = v104;
        }
        v50 = (void (*)(unint64_t, uint64_t))v99[1];
        v50(v61[6] + v99[9] * v56, v13);
        v62 = (uint64_t)v104;
        v63 = v13;
        v64 = (uint64_t)v93;
        sub_100033AC0(v104[7] + v56 * v102, (uint64_t)v93, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        sub_100145B7C(v56, v62);
        v65 = *v59;
        *v59 = v62;
        v49 = v64;
        v13 = v63;
        v66 = swift_bridgeObjectRelease(v65);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))v52)(v49, 0, 1, v101, v66);
        v12 = v92;
      }
      else
      {
        v49 = (uint64_t)v93;
        v52(v93, 1, 1, v101);
        v50 = (void (*)(unint64_t, uint64_t))v99[1];
      }
      v48 = v100;
      v50(v100, v13);
      sub_100033A84(v49, &qword_100408868);
      a6 = v94;
      v44 = v97;
      goto LABEL_7;
    }
    sub_100033AC0((uint64_t)v12, v95, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    swift_retain();
    v67 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v39 + 16));
    v104 = *(_QWORD **)(v39 + 16);
    v68 = v104;
    *(_QWORD *)(v39 + 16) = 0x8000000000000000;
    v70 = sub_10002DCA0(v48);
    v71 = v68[2];
    v72 = (v69 & 1) == 0;
    v73 = v71 + v72;
    if (__OFADD__(v71, v72))
      break;
    v74 = v69;
    if (v68[3] >= v73)
    {
      if ((v67 & 1) != 0)
      {
        v77 = v104;
        if ((v69 & 1) == 0)
          goto LABEL_22;
      }
      else
      {
        sub_100147BD4();
        v77 = v104;
        if ((v74 & 1) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      sub_100142FE0(v73, v67);
      v75 = sub_10002DCA0(v100);
      if ((v74 & 1) != (v76 & 1))
        goto LABEL_29;
      v70 = v75;
      v77 = v104;
      if ((v74 & 1) == 0)
      {
LABEL_22:
        v77[(v70 >> 6) + 8] |= 1 << v70;
        v48 = v100;
        v98(v77[6] + v99[9] * v70, v100, v13);
        sub_100033AC0(v95, v77[7] + v70 * v102, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        v78 = v77[2];
        v79 = __OFADD__(v78, 1);
        v80 = v78 + 1;
        if (v79)
          goto LABEL_28;
        v77[2] = v80;
        v77 = v104;
        goto LABEL_24;
      }
    }
    sub_10014E7D8(v95, v77[7] + v70 * v102);
    v48 = v100;
LABEL_24:
    v81 = *v103;
    *v103 = (uint64_t)v77;
    v82 = swift_bridgeObjectRelease(v81);
    ((void (*)(uint64_t, uint64_t, __n128))v99[1])(v48, v13, v82);
    a6 = v94;
    v44 = v97;
LABEL_7:
    swift_endAccess(v105);
    swift_release(v39);
    v47 += v102;
    if (!--v40)
    {
      v46 = v84;
      swift_bridgeObjectRelease(v84);
      v42 = v90;
      v41 = v91;
      v43 = v89;
      v23 = v85;
      v45 = v88;
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
  __break(1u);
  return result;
}

uint64_t LongTermPairingKeys.init(myIdentity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _OWORD v8[2];
  uint64_t v9;

  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
  v4 = type metadata accessor for LongTermPairingKeys(0);
  sub_1000637E0(a1, a2 + *(int *)(v4 + 20), type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  v5 = type metadata accessor for LongTermPairingKeys.PairedDevices();
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  swift_allocObject(v5, 112, 7);
  v6 = sub_100135E58(0, 0, (uint64_t)v8);
  result = sub_100063824(a1, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  *(_QWORD *)(a2 + *(int *)(v4 + 24)) = v6;
  return result;
}

uint64_t LongTermPairingKeys.PrivateIdentity.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for SymmetricKeySize(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin();
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v8);
  if (qword_1004040D0 != -1)
    swift_once(&qword_1004040D0, sub_100131CB8);
  v11 = sub_100014C44(v2, (uint64_t)qword_1004087B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v11, v2);
  type metadata accessor for LongTermPairingKeys.Identity(0);
  SymmetricKey.init(size:)(v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v10, v6);
  type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  return P256.Signing.PrivateKey.init(compactRepresentable:)(1);
}

uint64_t LongTermPairingKeys.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LongTermPairingKeys(0);
  __chkstk_darwin();
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v1, (uint64_t)v10, v11);
  v12 = sub_100012C44(qword_100405C70);
  v13 = swift_allocObject(v12, 80, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10033A110;
  strcpy((char *)(v13 + 32), "pairedDevices");
  *(_WORD *)(v13 + 46) = -4864;
  v14 = *(_QWORD *)(v1 + *(int *)(v8 + 24));
  *(_QWORD *)(v13 + 72) = type metadata accessor for LongTermPairingKeys.PairedDevices();
  *(_QWORD *)(v13 + 48) = v14;
  v15 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v10, v13, v7, v5, v8);
}

uint64_t sub_100131C80()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1000FAE78(0xD000000000000020, 0x8000000100365970);
  qword_1004087A8 = result;
  unk_1004087B0 = v1;
  return result;
}

uint64_t sub_100131CB8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for SymmetricKeySize(0);
  sub_10001C964(v0, qword_1004087B8);
  v1 = sub_100014C44(v0, (uint64_t)qword_1004087B8);
  return static SymmetricKeySize.bits256.getter(v1);
}

uint64_t sub_100131D00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v44 = a2;
  v3 = type metadata accessor for SymmetricKey(0);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  __chkstk_darwin();
  v41 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LongTermPairingKeys.Identity(0);
  __chkstk_darwin();
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = v50;
  dispatch thunk of Decoder.unkeyedContainer()(v47, v12, v13);
  if (v14)
    return sub_100014430(a1);
  v38 = v9;
  v39 = v8;
  v40 = v6;
  v50 = v5;
  v15 = v11;
  v17 = v42;
  v16 = v43;
  v18 = v44;
  v19 = v48;
  v20 = v49;
  sub_100034C68((uint64_t)v47, v48);
  v21 = UnkeyedDecodingContainer.decodeData(with:)(16, v19, v20);
  v23 = v22;
  sub_1002131F0(v21, v22);
  sub_10000E614(v21, v23);
  v25 = v39;
  UUID.init(uuid:)(v45, BYTE1(v45), BYTE2(v45), BYTE3(v45), BYTE4(v45), BYTE5(v45), BYTE6(v45), HIBYTE(v45), v46);
  v26 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  v37 = (uint64_t)v15;
  v26(v15, v25, v50);
  if (qword_1004040D0 != -1)
    swift_once(&qword_1004040D0, sub_100131CB8);
  v27 = type metadata accessor for SymmetricKeySize(0);
  v28 = sub_100014C44(v27, (uint64_t)qword_1004087B8);
  v29 = SymmetricKeySize.bitCount.getter(v28) / 8;
  v30 = v48;
  v31 = v49;
  sub_100034C68((uint64_t)v47, v48);
  v32 = a1;
  v45 = UnkeyedDecodingContainer.decodeData(with:)(v29, v30, v31);
  v46 = v33;
  v34 = v41;
  SymmetricKey.init<A>(data:)(&v45, &type metadata for Data, &protocol witness table for Data);
  v35 = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v37 + *(int *)(v38 + 20), v34, v16);
  sub_100014430(v47);
  sub_1000637E0(v35, v18, type metadata accessor for LongTermPairingKeys.Identity);
  sub_100014430(v32);
  return sub_100063824(v35, type metadata accessor for LongTermPairingKeys.Identity);
}

uint64_t sub_100132038(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  dispatch thunk of Encoder.singleValueContainer()(v31, v8, v9);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v29 = UUID.uuid.getter(v10);
  LOWORD(v30) = v11;
  BYTE2(v30) = v12;
  BYTE3(v30) = v13;
  BYTE4(v30) = v14;
  BYTE5(v30) = v15;
  BYTE6(v30) = v16;
  HIBYTE(v30) = v17;
  v18 = sub_1000FADC0((uint64_t)&v29, (uint64_t)v31);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  type metadata accessor for LongTermPairingKeys.Identity(0);
  SymmetricKey.withUnsafeBytes<A>(_:)(&v29, sub_10006C85C, 0, &type metadata for Data);
  v21 = v29;
  v22 = v30;
  v29 = v18;
  v30 = v20;
  sub_100031FEC(v18, v20);
  sub_100031FEC(v21, v22);
  sub_1000FBDAC(v21, v22);
  sub_10000E614(v21, v22);
  sub_10000E614(v21, v22);
  sub_10000E614(v18, v20);
  v23 = v29;
  v24 = v30;
  v25 = v32;
  v26 = v33;
  sub_100034C68((uint64_t)v31, v32);
  v27 = sub_100068570();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&v29, &type metadata for Data, v27, v25, v26);
  sub_10000E614(v23, v24);
  return sub_100014430(v31);
}

uint64_t sub_1001322A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100131D00(a1, a2);
}

uint64_t sub_1001322B8(_QWORD *a1)
{
  return sub_100132038(a1);
}

uint64_t LongTermPairingKeys.PrivateIdentity.publicIdentity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
  v4 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v5 = v1 + v4;
  v6 = a1 + v4;
  v7 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, v5, v7);
  type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  v8 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  P256.Signing.PrivateKey.publicKey.getter();
  v9 = (_QWORD *)(a1 + *(int *)(v8 + 24));
  *v9 = 0;
  v9[1] = 0;
  v10 = a1 + *(int *)(v8 + 28);
  v11 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t LongTermPairingKeys.PrivateIdentity.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v1 = a1[3];
  v2 = a1[4];
  sub_10003259C(a1, v1);
  dispatch thunk of Encoder.singleValueContainer()(v11, v1, v2);
  v3 = sub_100132B88((void (*)(_QWORD))type metadata accessor for LongTermPairingKeys.PrivateIdentity, (uint64_t (*)(void))&P256.Signing.PrivateKey.rawRepresentation.getter);
  v5 = v4;
  v10[0] = v3;
  v10[1] = v4;
  v6 = v12;
  v7 = v13;
  sub_100034C68((uint64_t)v11, v12);
  v8 = sub_100068570();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v10, &type metadata for Data, v8, v6, v7);
  sub_10000E614(v3, v5);
  return sub_100014430(v11);
}

void sub_100132470(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for P256.Signing.PrivateKey(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(int *)(v8 + 20), v4);
  if (qword_1004040C8 != -1)
    swift_once(&qword_1004040C8, sub_100131C80);
  __asm { BR              X11 }
}

uint64_t sub_100132790()
{
  _BYTE *v0;

  if (*v0)
    return 0x4B676E696E676973;
  else
    return 0x797469746E656469;
}

uint64_t sub_1001327D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10014B0DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001327F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100140BC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013281C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100140BC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LongTermPairingKeys.PrivateIdentity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  char v33;

  v26 = a2;
  v27 = type metadata accessor for P256.Signing.PrivateKey(0);
  v25 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin();
  v28 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for LongTermPairingKeys.Identity(0);
  __chkstk_darwin();
  v30 = (_QWORD **)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_100012C44(&qword_100408820);
  v6 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin();
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  __chkstk_darwin();
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_100140BC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys, &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys, v14, v12, v13);
  if (v2)
    return sub_100014430(a1);
  v24 = a1;
  v15 = v6;
  v16 = (uint64_t)v11;
  v17 = v28;
  v33 = 0;
  v18 = sub_100011DE4(&qword_100408830, type metadata accessor for LongTermPairingKeys.Identity, (uint64_t)&unk_10034A2F8);
  v19 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v29, &v33, v31, v29, v18);
  sub_100033AC0((uint64_t)v19, v16, type metadata accessor for LongTermPairingKeys.Identity);
  v32 = 1;
  v20 = sub_100011DE4(&qword_100408838, (uint64_t (*)(uint64_t))&type metadata accessor for P256.Signing.PrivateKey, (uint64_t)&protocol conformance descriptor for P256.Signing.PrivateKey);
  v21 = v27;
  v22 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v27, &v32, v31, v27, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v22);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v25 + 32))(v16 + *(int *)(v9 + 20), v17, v21);
  sub_1000637E0(v16, v26, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  sub_100014430(v24);
  return sub_100063824(v16, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
}

uint64_t sub_100132B20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LongTermPairingKeys.PrivateIdentity.init(from:)(a1, a2);
}

uint64_t LongTermPairingKeys.PublicIdentity.rawRepresentation.getter()
{
  return sub_100132B88((void (*)(_QWORD))type metadata accessor for LongTermPairingKeys.PublicIdentity, (uint64_t (*)(void))&P256.Signing.PublicKey.rawRepresentation.getter);
}

uint64_t sub_100132B88(void (*a1)(_QWORD), uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v5 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v5, v6);
  v30 = UUID.uuid.getter(v10);
  LOWORD(v31) = v11;
  BYTE2(v31) = v12;
  BYTE3(v31) = v13;
  BYTE4(v31) = v14;
  BYTE5(v31) = v15;
  BYTE6(v31) = v16;
  HIBYTE(v31) = v17;
  v18 = sub_1000FADC0((uint64_t)&v30, (uint64_t)&v32);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  type metadata accessor for LongTermPairingKeys.Identity(0);
  SymmetricKey.withUnsafeBytes<A>(_:)(&v30, sub_10006C85C, 0, &type metadata for Data);
  v21 = v30;
  v22 = v31;
  v30 = v18;
  v31 = v20;
  sub_100031FEC(v18, v20);
  sub_100031FEC(v21, v22);
  sub_1000FBDAC(v21, v22);
  sub_10000E614(v21, v22);
  sub_10000E614(v21, v22);
  sub_10000E614(v18, v20);
  v23 = v30;
  v24 = v31;
  a1(0);
  v25 = a2();
  v27 = v26;
  v30 = v23;
  v31 = v24;
  sub_100031FEC(v23, v24);
  sub_1000FBDAC(v25, v27);
  sub_10000E614(v25, v27);
  sub_10000E614(v23, v24);
  return v30;
}

uint64_t LongTermPairingKeys.PublicIdentity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v30 = a2;
  v31 = type metadata accessor for P256.Signing.PublicKey(0);
  v4 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin();
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for LongTermPairingKeys.Identity(0);
  __chkstk_darwin();
  v33 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v9 = __chkstk_darwin();
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v11[*(int *)(v9 + 24)];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v34 = v12;
  v13 = (uint64_t)&v11[*(int *)(v9 + 28)];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v38 = v13;
  v15(v13, 1, 1, v14);
  v16 = a1[3];
  v17 = a1[4];
  sub_10003259C(a1, v16);
  dispatch thunk of Decoder.unkeyedContainer()(v35, v16, v17);
  if (v2)
  {
    sub_100014430(a1);
    swift_bridgeObjectRelease(*((_QWORD *)v34 + 1));
    return sub_100033A84(v38, &qword_100408840);
  }
  else
  {
    v28 = v6;
    v29 = a1;
    v18 = v36;
    v19 = v37;
    sub_100034C68((uint64_t)v35, v36);
    v20 = sub_100011DE4(&qword_100408830, type metadata accessor for LongTermPairingKeys.Identity, (uint64_t)&unk_10034A2F8);
    v21 = (uint64_t)v33;
    UnkeyedDecodingContainer.inferredDecode<A>()(v18, v32, v19, v20);
    sub_100033AC0(v21, (uint64_t)v11, type metadata accessor for LongTermPairingKeys.Identity);
    v22 = v36;
    v23 = v37;
    sub_100034C68((uint64_t)v35, v36);
    v24 = sub_100011DE4(&qword_100408848, (uint64_t (*)(uint64_t))&type metadata accessor for P256.Signing.PublicKey, (uint64_t)&protocol conformance descriptor for P256.Signing.PublicKey);
    v25 = v28;
    v26 = v31;
    UnkeyedDecodingContainer.inferredDecode<A>()(v22, v31, v23, v24);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v11[*(int *)(v8 + 20)], v25, v26);
    sub_100014430(v35);
    sub_1000637E0((uint64_t)v11, v30, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_100014430(v29);
    return sub_100063824((uint64_t)v11, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  }
}

uint64_t LongTermPairingKeys.PublicIdentity.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v1 = a1[3];
  v2 = a1[4];
  sub_10003259C(a1, v1);
  dispatch thunk of Encoder.singleValueContainer()(v11, v1, v2);
  v3 = LongTermPairingKeys.PublicIdentity.rawRepresentation.getter();
  v5 = v4;
  v10[0] = v3;
  v10[1] = v4;
  v6 = v12;
  v7 = v13;
  sub_100034C68((uint64_t)v11, v12);
  v8 = sub_100068570();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v10, &type metadata for Data, v8, v6, v7);
  sub_10000E614(v3, v5);
  return sub_100014430(v11);
}

uint64_t LongTermPairingKeys.PublicIdentity.description.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  Swift::String v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t v11;
  unint64_t v12;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) + 24));
  v2 = v1[1];
  if (v2)
  {
    v11 = *v1;
    v12 = v1[1];
    swift_bridgeObjectRetain(v2);
    v3._countAndFlagsBits = 2108704;
    v3._object = (void *)0xE300000000000000;
    String.append(_:)(v3);
    v5 = v11;
    v4 = v12;
  }
  else
  {
    v5 = 0;
    v4 = 0xE000000000000000;
  }
  v6 = UUID.uuidString.getter();
  v8 = v7;
  swift_bridgeObjectRetain(v4);
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  return v5;
}

uint64_t LongTermPairingKeys.PublicIdentity.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  __chkstk_darwin();
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v1, (uint64_t)v10, v11);
  v17 = _swiftEmptyArrayStorage;
  v12 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  v13 = sub_100012C44(&qword_100405B90);
  v14 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v10, &v17, v7, v5, v8, v13, v14);
}

void sub_1001333BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = type metadata accessor for P256.Signing.PublicKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3 + *(int *)(v9 + 20), v5);
  if (qword_1004040C8 != -1)
    swift_once(&qword_1004040C8, sub_100131C80);
  __asm { BR              X11 }
}

uint64_t sub_100133674@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LongTermPairingKeys.PublicIdentity.init(from:)(a1, a2);
}

uint64_t sub_10013368C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v1, (uint64_t)v10, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  v16 = _swiftEmptyArrayStorage;
  v11 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  v12 = sub_100012C44(&qword_100405B90);
  v13 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v10, &v16, v8, v6, a1, v12, v13);
}

uint64_t sub_10013381C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  _QWORD v20[2];

  sub_100012C44(&qword_100409040);
  __chkstk_darwin();
  v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for AES.GCM.SealedBox(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  NANGenericServiceProtocol.packetData(for:)(1, a1);
  v11 = v9;
  v12 = v10;
  if (v10 >> 60 != 15)
  {
    v20[0] = v9;
    v20[1] = v10;
    v13 = v1 + *(int *)(type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0) + 24);
    v14 = type metadata accessor for AES.GCM.Nonce(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 1, 1, v14);
    v15 = sub_100068D00();
    static AES.GCM.seal<A>(_:using:nonce:)(v20, v13, v4, &type metadata for Data, v15);
    v16 = sub_100033A84((uint64_t)v4, &qword_100409040);
    v17 = AES.GCM.SealedBox.combined.getter(v16);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    sub_10000E658(v11, v12);
    return v17;
  }
  return v11;
}

void sub_1001339C8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100133A04()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (BYTE6(v0) > 0x1BuLL)
  {
    sub_100031FEC(v1, v0);
    sub_1000FB47C(v1, v0);
    ((void (*)(void))AES.GCM.SealedBox.init(combined:))();
  }
  else
  {
    v2 = ((uint64_t (*)(_QWORD))type metadata accessor for CryptoKitError)(0);
    v3 = sub_100011DE4(&qword_100409030, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoKitError, (uint64_t)&protocol conformance descriptor for CryptoKitError);
    swift_allocError(v2, v3, 0, 0);
    v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for CryptoKitError.incorrectParameterSize(_:), v2);
    swift_willThrow(v5);
  }
  return sub_10000E614(v1, v0);
}

uint64_t sub_100133B08(uint64_t a1, void (*a2)(uint64_t, _QWORD, uint64_t, uint64_t), unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  __int16 v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, _QWORD, uint64_t, uint64_t);
  __int128 v156;
  __int128 v157;
  char v158[8];
  char v159[8];
  uint64_t v160;
  unint64_t v161;
  char v162[8];
  uint64_t v163;
  uint64_t v164;

  v137 = a4;
  v153 = a3;
  v155 = a2;
  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v139 = (uint64_t)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v140 = (uint64_t)&v126 - v6;
  v143 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v138 = (uint64_t)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v136 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100409040);
  __chkstk_darwin();
  v145 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for AES.GCM.SealedBox(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin();
  v144 = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100012C44(&qword_100405EB8);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin();
  v146 = (unint64_t)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for P256.Signing.ECDSASignature(0);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin();
  v150 = (unint64_t)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100409038);
  __chkstk_darwin();
  v18 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v20 = (char *)&v126 - v19;
  v21 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin();
  v24 = (char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v154 = a1;
  v26 = v25(v24, a1, v21);
  v160 = UUID.uuid.getter(v26);
  LOWORD(v161) = v27;
  BYTE2(v161) = v28;
  BYTE3(v161) = v29;
  BYTE4(v161) = v30;
  BYTE5(v161) = v31;
  BYTE6(v161) = v32;
  HIBYTE(v161) = v33;
  v34 = sub_1000FADC0((uint64_t)&v160, (uint64_t)v162);
  v35 = *(void (**)(char *, uint64_t))(v22 + 8);
  v37 = v36;
  v35(v24, v21);
  sub_100031FEC(v34, v37);
  sub_10007DC10(v34, v37);
  v39 = v38;
  v41 = v40;
  v129 = v16;
  v130 = v18;
  v131 = v20;
  v132 = v14;
  v133 = v13;
  v134 = v34;
  v135 = v37;
  sub_100031FEC(v38, v40);
  v42 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v43 = type metadata accessor for BinaryEncoder();
  v44 = swift_allocObject(v43, 40, 7);
  v128 = xmmword_10033A100;
  *(_OWORD *)(v44 + 16) = xmmword_10033A100;
  *(_QWORD *)(v44 + 32) = v42;
  v163 = v43;
  v45 = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
  v164 = v45;
  v160 = v44;
  sub_100031FEC(v39, v41);
  swift_retain();
  sub_100140F54(&v160, v39, v41);
  sub_100014430(&v160);
  sub_10000E614(v39, v41);
  sub_10000E614(v39, v41);
  v126 = v45;
  v127 = v43;
  swift_beginAccess(v44 + 16, v159, 0, 0);
  v46 = *(_QWORD *)(v44 + 16);
  v47 = *(_QWORD *)(v44 + 24);
  sub_100031FEC(v46, v47);
  swift_release(v44);
  v48 = sub_10000E614(v39, v41);
  v49 = v129;
  v50 = P256.KeyAgreement.PrivateKey.publicKey.getter(v48);
  v51 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v50);
  v53 = v52;
  v54 = (*(uint64_t (**)(char *, uint64_t))(v132 + 8))(v49, v133);
  v55 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v54);
  v57 = v56;
  v160 = v51;
  v161 = v53;
  sub_100031FEC(v51, v53);
  sub_1000FBDAC(v55, v57);
  sub_10000E614(v55, v57);
  sub_10000E614(v51, v53);
  v58 = v160;
  v59 = v161;
  v60 = (uint64_t)v131;
  sub_100132470(v160, v161);
  sub_10000E614(v58, v59);
  v61 = (uint64_t)v130;
  sub_100033B48(v60, (uint64_t)v130, &qword_100409038);
  v62 = v151;
  v63 = v152;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v61, 1, v152) == 1)
  {
    sub_100033A84(v60, &qword_100409038);
    v64 = v46;
    v65 = v47;
  }
  else
  {
    v154 = v46;
    v67 = v150;
    v68 = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t))(v62 + 32))(v150, v61, v63);
    v69 = P256.Signing.ECDSASignature.rawRepresentation.getter(v68);
    sub_10007DC10(v69, v70);
    v72 = v71;
    v74 = v73;
    v153 = v47;
    (*(void (**)(unint64_t, unint64_t))(v62 + 8))(v67, v63);
    sub_100033A84(v60, &qword_100409038);
    sub_100031FEC(v72, v74);
    v75 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
    v76 = v127;
    v77 = swift_allocObject(v127, 40, 7);
    *(_OWORD *)(v77 + 16) = v128;
    *(_QWORD *)(v77 + 32) = v75;
    v163 = v76;
    v164 = v126;
    v160 = v77;
    sub_100031FEC(v72, v74);
    swift_retain();
    sub_100140F54(&v160, v72, v74);
    sub_100014430(&v160);
    sub_10000E614(v72, v74);
    sub_10000E614(v72, v74);
    v78 = v134;
    swift_beginAccess(v77 + 16, v158, 0, 0);
    v79 = *(_QWORD *)(v77 + 16);
    v80 = *(_QWORD *)(v77 + 24);
    sub_100031FEC(v79, v80);
    swift_release(v77);
    sub_10000E614(v72, v74);
    v160 = v78;
    v161 = v135;
    v81 = v149 + *(int *)(type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0) + 20);
    v82 = type metadata accessor for SHA256(0);
    v83 = sub_100011DE4(&qword_100405EC0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
    v84 = sub_100068D00();
    v85 = v146;
    v86 = v82;
    v87 = v84;
    static HMAC.authenticationCode<A>(for:using:)(&v160, v81, v86, &type metadata for Data, v83, v84);
    v88 = v148;
    HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v160, sub_10006C85C, 0, v148, &type metadata for Data);
    v89 = v160;
    v90 = v161;
    (*(void (**)(unint64_t, uint64_t))(v147 + 8))(v85, v88);
    sub_10007DC10(v89, v90);
    v92 = v91;
    v94 = v93;
    v151 = v79;
    v152 = v80;
    sub_100031FEC(v91, v93);
    v95 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
    v96 = v127;
    v97 = swift_allocObject(v127, 40, 7);
    *(_OWORD *)(v97 + 16) = v128;
    *(_QWORD *)(v97 + 32) = v95;
    v163 = v96;
    v164 = v126;
    v160 = v97;
    sub_100031FEC(v92, v94);
    swift_retain();
    sub_100140F54(&v160, v92, v94);
    sub_100014430(&v160);
    sub_10000E614(v92, v94);
    sub_10000E614(v92, v94);
    swift_beginAccess(v97 + 16, &v160, 0, 0);
    v98 = *(_QWORD *)(v97 + 16);
    v99 = *(_QWORD *)(v97 + 24);
    sub_100031FEC(v98, v99);
    swift_release(v97);
    sub_10000E614(v92, v94);
    *(_QWORD *)&v156 = v154;
    *((_QWORD *)&v156 + 1) = v153;
    sub_100031FEC(v154, v153);
    v100 = v151;
    v150 = v87;
    v101 = v152;
    sub_100031FEC(v151, v152);
    sub_1000FBDAC(v100, v101);
    sub_10000E614(v100, v101);
    v102 = v156;
    v157 = v156;
    sub_100031FEC(v98, v99);
    sub_100031FEC(v102, *((unint64_t *)&v102 + 1));
    sub_1000FBDAC(v98, v99);
    sub_10000E614(v98, v99);
    sub_10000E614(v102, *((unint64_t *)&v102 + 1));
    v156 = v157;
    v103 = type metadata accessor for AES.GCM.Nonce(0);
    v104 = (uint64_t)v145;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v145, 1, 1, v103);
    v105 = v144;
    static AES.GCM.seal<A>(_:using:nonce:)(&v156, v149, v104, &type metadata for Data, v150);
    v150 = v99;
    v148 = v98;
    sub_100033A84(v104, &qword_100409040);
    v106 = sub_10000E614(v156, *((unint64_t *)&v156 + 1));
    v147 = AES.GCM.SealedBox.combined.getter(v106);
    v108 = v107;
    (*(void (**)(char *, uint64_t))(v141 + 8))(v105, v142);
    v146 = v108;
    if (v108 >> 60 != 15)
    {
      v109 = sub_100031A88((uint64_t)_swiftEmptyArrayStorage);
      *(_QWORD *)&v157 = v109;
      v110 = (uint64_t)v136;
      P256.KeyAgreement.PrivateKey.publicKey.getter(v109);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v132 + 56))(v110, 0, 1, v133);
      v111 = v138;
      sub_100071FA8(v109, v138);
      v112 = v143;
      sub_100078AC4(v110, v111 + *(int *)(v143 + 24));
      v113 = v140;
      sub_1000637E0(v111, v140, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      v114 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v113, v114, 7);
      v115 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56);
      v115(v113, 0, 1, v114);
      v155 = v115;
      v116 = v139;
      sub_100033B48(v113, v139, &qword_100404EE8);
      sub_10002548C(v116, 7);
      sub_100063824(v111, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      sub_100033A84(v113, &qword_100404EE8);
      sub_100033A84(v110, (uint64_t *)&unk_10040D200);
      v117 = v157;
      v118 = v147;
      v119 = v146;
      sub_100031FEC(v147, v146);
      sub_100031FEC(v118, v119);
      sub_100071FA8(v117, v111);
      v120 = v111 + *(int *)(v112 + 32);
      sub_10000E658(*(_QWORD *)v120, *(_QWORD *)(v120 + 8));
      *(_QWORD *)v120 = v118;
      *(_QWORD *)(v120 + 8) = v119;
      sub_1000637E0(v111, v113, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      swift_storeEnumTagMultiPayload(v113, v114, 7);
      v115(v113, 0, 1, v114);
      sub_100033B48(v113, v116, &qword_100404EE8);
      sub_10002548C(v116, 7);
      sub_100063824(v111, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      sub_100033A84(v113, &qword_100404EE8);
      sub_10000E658(v118, v119);
      v121 = sub_10013381C(v137);
      v123 = v122;
      v124 = v157;
      sub_1000339F4(v121, v122);
      sub_100071FA8(v124, v111);
      v125 = v111 + *(int *)(v143 + 36);
      sub_10000E658(*(_QWORD *)v125, *(_QWORD *)(v125 + 8));
      *(_QWORD *)v125 = v121;
      *(_QWORD *)(v125 + 8) = v123;
      sub_1000637E0(v111, v113, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      swift_storeEnumTagMultiPayload(v113, v114, 7);
      v155(v113, 0, 1, v114);
      sub_100033B48(v113, v116, &qword_100404EE8);
      sub_10002548C(v116, 7);
      sub_100063824(v111, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      sub_100033A84(v113, &qword_100404EE8);
      sub_10000E658(v121, v123);
      sub_10000E614(v134, v135);
      sub_10000E658(v118, v119);
      sub_10000E614(v148, v150);
      sub_10000E614(v151, v152);
      sub_10000E614(v154, v153);
      return v157;
    }
    sub_10000E614(v148, v150);
    sub_10000E614(v151, v152);
    v65 = v153;
    v64 = v154;
  }
  sub_10000E614(v64, v65);
  sub_10000E614(v134, v135);
  return 0;
}

void sub_100134AF8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v24[11];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a3;
  sub_100012C44(&qword_10040E1F0);
  __chkstk_darwin();
  v24[10] = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for UUID(0);
  v24[9] = *(_QWORD *)(v25 - 8);
  __chkstk_darwin();
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100409038);
  __chkstk_darwin();
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for P256.Signing.ECDSASignature(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AES.GCM.SealedBox(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Logger(0);
  v27 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin();
  v28 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
  sub_100031FEC(a1, a2);
  sub_1001339C8(a1, a2);
  v24[7] = v9;
  v24[8] = v11;
  v24[4] = v7;
  v24[5] = v13;
  v24[6] = v10;
  v19 = static AES.GCM.open(_:using:)(v17, v26);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_100031FEC(v19, v21);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v22 = type metadata accessor for BinaryDecoder();
  v23 = (_QWORD *)swift_allocObject(v22, 48, 7);
  v23[5] = _swiftEmptyDictionarySingleton;
  v24[3] = v19;
  v23[2] = v19;
  v23[3] = v21;
  v24[2] = v21;
  __asm { BR              X10 }
}

uint64_t sub_100134E9C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[4] = (int)*(_QWORD *)(v3 - 280);
  swift_beginAccess(a1, v3 - 120, 1, 0);
  v4 = v1[5];
  v1[5] = v2;
  v5 = swift_bridgeObjectRelease(v4);
  v6 = v1[3];
  *(_QWORD *)(v3 - 208) = v1[2] >> 32;
  return ((uint64_t (*)(uint64_t))((char *)&loc_100134F08 + dword_100135594[v6 >> 62]))(v5);
}

void sub_100134F1C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  int v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;

  if (a1 >= *(_QWORD *)(v5 - 208))
  {
    swift_release(v1);
    if (!v3[2])
    {
      swift_bridgeObjectRelease(v3);
      goto LABEL_28;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      v3 = sub_1001A87F4(v3);
    v21 = *(_QWORD *)(v5 - 248);
    v20 = *(_QWORD *)(v5 - 240);
    v22 = v3[2];
    if (!v22)
    {
      __break(1u);
      JUMPOUT(0x100135584);
    }
    v23 = v3 + 4;
    v24 = &v3[2 * v22 + 2];
    v26 = *v24;
    v25 = v24[1];
    v3[2] = v22 - 1;
    if (v22 != 1)
    {
      *(_QWORD *)(v5 - 208) = v25;
      v27 = v22 - 2;
      v28 = &v23[2 * v27];
      v29 = *v28;
      v30 = v28[1];
      v3[2] = v27;
      sub_1001F0FC0(v29, v30);
      if (!v2)
      {
        v31 = v3;
        sub_10000E614(v29, v30);
        v44 = *(_QWORD *)(v5 - 256);
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v44);
        v25 = *(_QWORD *)(v5 - 208);
        if (v45 != 1)
        {
          v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
          v47 = *(_QWORD *)(v5 - 264);
          v46(v47, v21, v44);
          v48 = v31[2];
          if (v48)
          {
            v49 = v48 - 1;
            v50 = &v23[2 * v49];
            v51 = *v50;
            v52 = v50[1];
            v31[2] = v49;
            sub_1002131F0(v51, v52);
            sub_10000E614(v51, v52);
            v53 = *(_QWORD *)(v5 - 224);
            UUID.init(uuid:)(*(unsigned __int8 *)(v5 - 160), *(unsigned __int8 *)(v5 - 159), *(unsigned __int8 *)(v5 - 158), *(unsigned __int8 *)(v5 - 157), *(unsigned __int8 *)(v5 - 156), *(unsigned __int8 *)(v5 - 155), *(unsigned __int8 *)(v5 - 154), *(unsigned __int8 *)(v5 - 153), *(_QWORD *)(v5 - 152));
            v54 = *(_QWORD *)(v5 - 232);
            v55 = *(_QWORD *)(v5 - 216);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v53, 0, 1, v55);
            v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v53, 1, v55);
            v47 = *(_QWORD *)(v5 - 264);
            if (v56 != 1)
            {
              v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32);
              v58 = v54;
              v59 = *(_QWORD *)(v5 - 272);
              v57(v59, v53, v55);
              v60 = v31[2];
              v61 = swift_bridgeObjectRelease(v31);
              if (!v60)
              {
                (*(void (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)(v5 - 200) + 8))(*(_QWORD *)(v5 - 192), *(_QWORD *)(v5 - 184), v61);
                sub_10000E614(*(_QWORD *)(v5 - 280), *(_QWORD *)(v5 - 288));
                v62 = sub_100012C44(&qword_100408890);
                v63 = v59;
                v64 = *(_QWORD *)(v5 - 176);
                v65 = v64 + *(int *)(v62 + 48);
                v66 = v44;
                v67 = (uint64_t *)(v64 + *(int *)(v62 + 64));
                v57(v64, v63, v55);
                v46(v65, *(_QWORD *)(v5 - 264), v66);
                v68 = *(_QWORD *)(v5 - 208);
                *v67 = v26;
                v67[1] = v68;
                JUMPOUT(0x100134DE0);
              }
              sub_10000E614(v26, *(_QWORD *)(v5 - 208));
              (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v55);
              v32 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 240) + 8))(*(_QWORD *)(v5 - 264), v44);
              goto LABEL_28;
            }
          }
          else
          {
            v53 = *(_QWORD *)(v5 - 224);
            (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 232) + 56))(v53, 1, 1, *(_QWORD *)(v5 - 216));
          }
          sub_10000E614(v26, *(_QWORD *)(v5 - 208));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 240) + 8))(v47, v44);
          swift_bridgeObjectRelease(v31);
          v32 = sub_100033A84(v53, &qword_10040E1F0);
LABEL_28:
          v40 = *(_QWORD *)(v5 - 192);
          v41 = Logger.logObject.getter(v32);
          v42 = static os_log_type_t.error.getter(v41);
          if (os_log_type_enabled(v41, v42))
          {
            v43 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v43 = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to process authentication message because parsing failed", v43, 2u);
            swift_slowDealloc(v43, -1, -1);

            sub_10000E614(*(_QWORD *)(v5 - 280), *(_QWORD *)(v5 - 288));
          }
          else
          {
            sub_10000E614(*(_QWORD *)(v5 - 280), *(_QWORD *)(v5 - 288));

          }
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 200) + 8))(v40, *(_QWORD *)(v5 - 184));
          goto LABEL_32;
        }
LABEL_21:
        sub_10000E614(v26, v25);
        swift_bridgeObjectRelease(v31);
        v32 = sub_100033A84(v21, &qword_100409038);
        goto LABEL_28;
      }
      swift_errorRelease(v2);
      sub_10000E614(v29, v30);
      v25 = *(_QWORD *)(v5 - 208);
    }
    v31 = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v20 + 56))(v21, 1, 1, *(_QWORD *)(v5 - 256));
    goto LABEL_21;
  }
  *(_QWORD *)(v5 - 136) = v4;
  *(_QWORD *)(v5 - 128) = sub_100011DE4((unint64_t *)&qword_100405BB8, (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder, (uint64_t)protocol conformance descriptor for BinaryDecoder);
  *(_QWORD *)(v5 - 160) = v1;
  swift_retain();
  v6 = sub_100140C0C((_QWORD *)(v5 - 160));
  if (v2)
  {
    *(_QWORD *)(v5 - 168) = v2;
    swift_errorRetain(v2);
    v8 = sub_100012C44((uint64_t *)&unk_10040C360);
    if ((swift_dynamicCast(v5 - 160, v5 - 168, v8, &type metadata for WiFiError, 0) & 1) != 0)
    {
      v9 = *(_QWORD *)(v5 - 160);
      v10 = *(unsigned __int8 *)(v5 - 144);
      if (v10 == 2)
      {
        if ((v9 & 1) != 0)
        {
          swift_errorRelease(v2);
          swift_errorRelease(*(_QWORD *)(v5 - 168));
          goto LABEL_44;
        }
      }
      else
      {
        sub_100013024(v9, *(_QWORD *)(v5 - 152), v10);
      }
    }
    swift_bridgeObjectRelease(v3);
    swift_errorRelease(*(_QWORD *)(v5 - 168));
    swift_errorRelease(v2);
    v33 = swift_release(v1);
    v34 = *(_QWORD *)(v5 - 192);
    v35 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.error.getter(v35);
    v37 = os_log_type_enabled(v35, v36);
    v38 = *(_QWORD *)(v5 - 184);
    if (v37)
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to process authentication message because decoding failed", v39, 2u);
      swift_slowDealloc(v39, -1, -1);

      sub_10000E614(*(_QWORD *)(v5 - 280), *(_QWORD *)(v5 - 288));
    }
    else
    {
      sub_10000E614(*(_QWORD *)(v5 - 280), *(_QWORD *)(v5 - 288));

    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 200) + 8))(v34, v38);
LABEL_32:
    sub_100012C44(&qword_100408890);
    JUMPOUT(0x100134DD8);
  }
  v11 = v6;
  v12 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    v3 = sub_1000B2C78(0, v3[2] + 1, 1, v3);
  v14 = v3[2];
  v13 = v3[3];
  v15 = v14 + 1;
  if (v14 >= v13 >> 1)
  {
    *(_QWORD *)(v5 - 296) = v15;
    v17 = v3;
    v18 = v14;
    v19 = sub_1000B2C78((_QWORD *)(v13 > 1), v14 + 1, 1, v17);
    v15 = *(_QWORD *)(v5 - 296);
    v14 = v18;
    v3 = v19;
  }
  v3[2] = v15;
  v16 = &v3[2 * v14];
  v16[4] = v11;
  v16[5] = v12;
LABEL_44:
  JUMPOUT(0x100134F04);
}

uint64_t sub_1001355A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v44 = a1;
  v40[0] = a2;
  v40[1] = a5;
  v42 = a3;
  v43 = a4;
  v41 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin();
  v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin();
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v10);
  v15 = v14;
  v16 = P256.KeyAgreement.PrivateKey.publicKey.getter(v13);
  v17 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v16);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v48 = v13;
  v49 = v15;
  sub_100031FEC(v13, v15);
  sub_100031FEC(v17, v19);
  sub_1000FBDAC(v17, v19);
  sub_10000E614(v17, v19);
  sub_10000E614(v17, v19);
  sub_10000E614(v13, v15);
  v20 = v48;
  v21 = v49;
  sub_1001333BC(v40[0], v48, v49);
  LODWORD(v19) = v22;
  sub_10000E614(v20, v21);
  v23 = v41;
  v48 = v42;
  v49 = v43;
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v44, v41);
  v46 = UUID.uuid.getter(v24);
  LOWORD(v47) = v25;
  BYTE2(v47) = v26;
  BYTE3(v47) = v27;
  BYTE4(v47) = v28;
  BYTE5(v47) = v29;
  BYTE6(v47) = v30;
  HIBYTE(v47) = v31;
  v32 = sub_1000FADC0((uint64_t)&v46, (uint64_t)&v48);
  v34 = v33;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);
  v46 = v32;
  v47 = v34;
  v35 = v45 + *(int *)(type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0) + 20);
  v36 = type metadata accessor for SHA256(0);
  v37 = sub_100011DE4(&qword_100405EC0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  v38 = sub_100068D00();
  LODWORD(v35) = static HMAC.isValidAuthenticationCode<A, B>(_:authenticating:using:)(&v48, &v46, v35, v36, &type metadata for Data, &type metadata for Data, v37, &protocol witness table for Data, v38);
  sub_10000E614(v32, v34);
  return v19 & v35 & 1;
}

uint64_t sub_100135898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v0 = type metadata accessor for SymmetricKeySize(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static SymmetricKeySize.bits256.getter(v2);
  v6 = SymmetricKeySize.bitCount.getter(v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  qword_1004087D0 = v6 / 8;
  return result;
}

uint64_t sub_10013592C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1000FAE78(0xD000000000000016, 0x80000001003659A0);
  qword_1004087D8 = result;
  unk_1004087E0 = v1;
  return result;
}

void sub_100135964(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  unint64_t v24;
  _QWORD v25[4];
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;

  v25[3] = a6;
  v11 = type metadata accessor for SymmetricKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v16 = (char *)v25 - v15;
  v27 = a1;
  v28 = a2;
  sub_100031FEC(a1, a2);
  SymmetricKey.init<A>(data:)(&v27, &type metadata for Data, &protocol witness table for Data);
  v27 = a3;
  v28 = a4;
  if (qword_1004040E0 != -1)
    swift_once(&qword_1004040E0, sub_10013592C);
  v17 = qword_1004087D8;
  v18 = qword_1004087E0;
  v26[0] = qword_1004087D8;
  v26[1] = qword_1004087E0;
  sub_100031FEC(qword_1004087D8, qword_1004087E0);
  if (qword_1004040D8 != -1)
    swift_once(&qword_1004040D8, sub_100135898);
  v19 = 6 * qword_1004087D0;
  if ((unsigned __int128)(qword_1004087D0 * (__int128)6) >> 64 == (6 * qword_1004087D0) >> 63)
  {
    v25[2] = a5;
    v20 = type metadata accessor for SHA256(0);
    v21 = sub_100011DE4(&qword_100405EC0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
    v22 = sub_100068D00();
    static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(v14, &v27, v26, v19, v20, &type metadata for Data, &type metadata for Data, v21, v22, v22);
    sub_10000E614(v17, v18);
    v23 = *(void (**)(char *, uint64_t))(v12 + 8);
    v23(v14, v11);
    SymmetricKey.withUnsafeBytes<A>(_:)(&v27, sub_10006C85C, 0, &type metadata for Data);
    v24 = v28;
    v23(v16, v11);
    __asm { BR              X11 }
  }
  __break(1u);
  JUMPOUT(0x100135E28);
}

uint64_t sub_100135E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(double (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v4 = v3;
  *(_QWORD *)(v3 + 80) = 0;
  *(_BYTE *)(v3 + 88) = 1;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 16) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  v6 = (_QWORD *)(v3 + 40);
  sub_100033B48(a3, (uint64_t)v6, &qword_100408FC8);
  if (*(_QWORD *)(v4 + 32))
  {
    v7 = *(_QWORD *)(v4 + 64);
    if (v7)
    {
      v8 = *(_QWORD *)(v4 + 72);
      sub_10003259C(v6, *(_QWORD *)(v4 + 64));
      v9 = swift_allocObject(&unk_1003E6D88, 24, 7);
      swift_weakInit(v9 + 16, v4);
      v10 = *(uint64_t (**)(double (*)(), uint64_t, uint64_t, uint64_t))(v8 + 8);
      swift_retain();
      v11 = v10(sub_10014E860, v9, v7, v8);
      swift_release(v9);
      sub_100033A84(a3, &qword_100408FC8);
      swift_release(v9);
    }
    else
    {
      sub_100033A84(a3, &qword_100408FC8);
      v11 = 0;
    }
    *(_QWORD *)(v4 + 80) = v11;
    *(_BYTE *)(v4 + 88) = v7 == 0;
  }
  else
  {
    sub_100033A84(a3, &qword_100408FC8);
  }
  return v4;
}

double sub_100135F98(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    v5 = sub_1001360CC();
    swift_release(v4);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  }
  return result;
}

uint64_t sub_100135FF8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 88) & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + 80);
    sub_100033B48((uint64_t)(v1 + 5), (uint64_t)v6, &qword_100408FC8);
    v3 = v7;
    if (v7)
    {
      v4 = v8;
      sub_10003259C(v6, v7);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3, v4);
      sub_100014430(v6);
    }
    else
    {
      sub_100033A84((uint64_t)v6, &qword_100408FC8);
    }
  }
  swift_bridgeObjectRelease(v1[2]);
  swift_bridgeObjectRelease(v1[4]);
  sub_100033A84((uint64_t)(v1 + 5), &qword_100408FC8);
  sub_100012318(v1[12], v1[13]);
  return swift_deallocClassInstance(v1, 112, 7);
}

uint64_t sub_1001360CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;

  v1 = *(_QWORD *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  __chkstk_darwin();
  v3 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  v66 = v5;
  __chkstk_darwin();
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408FB8);
  __chkstk_darwin();
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012C44(&qword_100408FC0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  v14 = (char *)&v58 - v13;
  v15 = *(_QWORD *)(v0 + 32);
  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_7:
    sub_100033A84((uint64_t)v9, &qword_100408FB8);
    return 0;
  }
  v60 = v1;
  v61 = (_QWORD *)v12;
  v64 = v3;
  v16 = *(_QWORD *)(v0 + 24);
  sub_100033B48(v0 + 40, (uint64_t)v68, &qword_100408FC8);
  v17 = v69;
  v62 = v14;
  v63 = v0;
  if (v69)
  {
    v18 = v70;
    sub_10003259C(v68, v69);
    v59 = *(int *)(v10 + 48);
    v19 = v16;
    v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 24);
    swift_bridgeObjectRetain(v15);
    v21 = v18;
    v14 = v62;
    v22 = v20(v9, v19, v15, v17, v21);
    *(_QWORD *)&v9[v59] = v22;
    v0 = v63;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    sub_100014430(v68);
  }
  else
  {
    swift_bridgeObjectRetain(v15);
    sub_100033A84((uint64_t)v68, &qword_100408FC8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  }
  v23 = swift_bridgeObjectRelease(v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48))(v9, 1, v10, v23) == 1)
    goto LABEL_7;
  v24 = *(int *)(v10 + 48);
  sub_100063EB8((uint64_t)v9, (uint64_t)v14, &qword_1004088A0);
  v25 = *(_QWORD *)&v9[v24];
  *(_QWORD *)&v14[v24] = v25;
  v26 = *(int *)(v10 + 48);
  v27 = (uint64_t)v61;
  sub_100033B48((uint64_t)v14, (uint64_t)v61, &qword_1004088A0);
  *(_QWORD *)(v27 + v26) = v25;
  swift_retain();
  v28 = swift_bridgeObjectRetain(v25);
  v29 = sub_10014AD84(v28, v0);
  swift_bridgeObjectRelease(v25);
  swift_release(v0);
  sub_100033A84(v27, &qword_1004088A0);
  v30 = v29[2];
  if (!v30)
  {
LABEL_25:
    sub_100033A84((uint64_t)v14, &qword_100408FC0);
    swift_bridgeObjectRelease(v29);
    return 0;
  }
  v31 = v60;
  v32 = (uint64_t)v29 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
  v33 = (_QWORD *)(v0 + 16);
  swift_beginAccess(v0 + 16, v68, 33, 0);
  v34 = *(_QWORD *)(v31 + 72);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v61 = v29;
  swift_bridgeObjectRetain(v29);
  v36 = (uint64_t)v64;
  v37 = v65;
  do
  {
    v35(v7, v32, v37);
    sub_1000637E0(v32, v36, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v33);
    v67 = (_QWORD *)*v33;
    v41 = v67;
    *v33 = 0x8000000000000000;
    v43 = sub_10002DCA0((uint64_t)v7);
    v44 = v41[2];
    v45 = (v42 & 1) == 0;
    v46 = v44 + v45;
    if (__OFADD__(v44, v45))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v65);
      __break(1u);
      return result;
    }
    v47 = v42;
    if (v41[3] >= v46)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_100147BD4();
    }
    else
    {
      sub_100142FE0(v46, isUniquelyReferenced_nonNull_native);
      v48 = sub_10002DCA0((uint64_t)v7);
      if ((v47 & 1) != (v49 & 1))
        goto LABEL_30;
      v43 = v48;
    }
    v37 = v65;
    v50 = v67;
    if ((v47 & 1) != 0)
    {
      v36 = (uint64_t)v64;
      sub_10014E7D8((uint64_t)v64, v67[7] + v43 * v34);
    }
    else
    {
      v67[(v43 >> 6) + 8] |= 1 << v43;
      v35((char *)(v50[6] + *(_QWORD *)(v66 + 72) * v43), (uint64_t)v7, v37);
      v36 = (uint64_t)v64;
      sub_100033AC0((uint64_t)v64, v50[7] + v43 * v34, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      v51 = v50[2];
      v52 = __OFADD__(v51, 1);
      v53 = v51 + 1;
      if (v52)
        goto LABEL_29;
      v50[2] = v53;
      v50 = v67;
    }
    v38 = *v33;
    *v33 = v50;
    v39 = swift_bridgeObjectRelease(v38);
    (*(void (**)(char *, uint64_t, __n128))(v66 + 8))(v7, v37, v39);
    v32 += v34;
    --v30;
  }
  while (v30);
  swift_endAccess(v68);
  v29 = v61;
  swift_bridgeObjectRelease(v61);
  v14 = v62;
  if (!v29[2])
    goto LABEL_25;
  v54 = *(void (**)(uint64_t))(v63 + 96);
  if (v54)
  {
    v55 = *(_QWORD *)(v63 + 104);
    v56 = swift_retain();
    v54(v56);
    sub_100012318((uint64_t)v54, v55);
  }
  sub_100033A84((uint64_t)v14, &qword_100408FC0);
  return (uint64_t)v29;
}

uint64_t sub_100136600@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  unsigned int (*v15)(_QWORD, _QWORD, _QWORD, __n128);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unsigned int (*v27)(_QWORD, _QWORD, _QWORD, __n128);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32[24];

  v31 = a2;
  v4 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408868);
  __chkstk_darwin();
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v11 = (char *)&v26 - v10;
  swift_beginAccess(v2 + 16, v32, 0, 0);
  v12 = *(_QWORD *)(v2 + 16);
  v13 = swift_bridgeObjectRetain(v12);
  sub_100130798(v13, a1, (uint64_t)v9);
  v14 = swift_bridgeObjectRelease(v12);
  v15 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, __n128))(v5 + 48);
  if (v15(v9, 1, v4, v14) == 1)
  {
    v16 = sub_1001360CC();
    if (v16)
    {
      v29 = v16;
      v30 = v5;
      v27 = v15;
      v28 = v4;
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        v18 = v29 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
        v19 = *(_QWORD *)(v30 + 72);
        while (1)
        {
          sub_1000637E0(v18, (uint64_t)v7, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          if ((a1(v7) & 1) != 0)
            break;
          sub_100063824((uint64_t)v7, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          v18 += v19;
          if (!--v17)
            goto LABEL_7;
        }
        sub_100033AC0((uint64_t)v7, (uint64_t)v11, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
        v21 = v11;
        v22 = 0;
      }
      else
      {
LABEL_7:
        v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
        v21 = v11;
        v22 = 1;
      }
      v4 = v28;
      v20(v21, v22, 1, v28);
      swift_bridgeObjectRelease(v29);
      v23 = v31;
      v15 = v27;
    }
    else
    {
      v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v20(v11, 1, 1, v4);
      v23 = v31;
    }
    sub_100033A84((uint64_t)v9, &qword_100408868);
  }
  else
  {
    sub_100033AC0((uint64_t)v9, (uint64_t)v11, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v20(v11, 0, 1, v4);
    v23 = v31;
  }
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v15)(v11, 1, v4) == 1)
  {
    sub_100033A84((uint64_t)v11, &qword_100408868);
    v24 = 1;
  }
  else
  {
    sub_100033AC0((uint64_t)v11, v23, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    v24 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v20)(v23, v24, 1, v4);
}

uint64_t sub_1001368B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v1;
  swift_beginAccess(v1 + 16, v16, 0, 0);
  v15 = *(_QWORD *)(v1 + 16);
  v8 = v15;
  v9 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  v10 = type metadata accessor for LongTermPairingKeys.PairedDevices();
  swift_retain();
  swift_bridgeObjectRetain(v8);
  v11 = sub_100012C44(&qword_100408FA8);
  v12 = sub_100011770(&qword_100408FB0, &qword_100408FA8, (const char *)&protocol conformance descriptor for [A : B].Values);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(&v17, &v15, v7, v5, v10, v11, v12);
}

uint64_t sub_100136A34()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess(*v0 + 16, v4, 0, 0);
  v5 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v6 = v1;
  v2._countAndFlagsBits = 0x7365636976656420;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  return v5;
}

uint64_t sub_100136AB4()
{
  return sub_1001368B8();
}

uint64_t LongTermPairingKeys.updatedPairedDevicesHandler.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for LongTermPairingKeys(0) + 24));
  v2 = *(_QWORD *)(v1 + 96);
  sub_1000339E4(v2, *(_QWORD *)(v1 + 104));
  return v2;
}

uint64_t LongTermPairingKeys.updatedPairedDevicesHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for LongTermPairingKeys(0) + 24));
  v6 = *(_QWORD *)(v5 + 96);
  v7 = *(_QWORD *)(v5 + 104);
  *(_QWORD *)(v5 + 96) = a1;
  *(_QWORD *)(v5 + 104) = a2;
  return sub_100012318(v6, v7);
}

uint64_t (*LongTermPairingKeys.updatedPairedDevicesHandler.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for LongTermPairingKeys(0) + 24));
  a1[2] = v3;
  v4 = *(_QWORD *)(v3 + 96);
  v5 = *(_QWORD *)(v3 + 104);
  *a1 = v4;
  a1[1] = v5;
  sub_1000339E4(v4, v5);
  return sub_100136B9C;
}

uint64_t sub_100136B9C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  v2 = a1[2];
  v4 = *a1;
  v5 = *(_QWORD *)(v2 + 96);
  v6 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = *a1;
  *(_QWORD *)(v2 + 104) = v3;
  if ((a2 & 1) != 0)
  {
    sub_1000339E4(v4, v3);
    sub_100012318(v5, v6);
    v7 = v4;
    v8 = v3;
  }
  else
  {
    v7 = v5;
    v8 = v6;
  }
  return sub_100012318(v7, v8);
}

uint64_t sub_100136BFC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1000FAE78(0xD000000000000017, 0x80000001003659C0);
  qword_1004087E8 = result;
  unk_1004087F0 = v1;
  return result;
}

uint64_t LongTermPairingKeys.authenticationToken(using:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2 + *(int *)(type metadata accessor for LongTermPairingKeys(0) + 20);
  v9 = type metadata accessor for LongTermPairingKeys.Identity(0);
  v10 = v8 + *(int *)(v9 + 20);
  P256.KeyAgreement.PrivateKey.publicKey.getter(v9);
  v11 = sub_10014B538(v10, (uint64_t)v7, a2 & 0xFFFFFFFFFFFFLL);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v11;
}

uint64_t LongTermPairingKeys.authenticationRequest(forPeer:with:using:on:myServiceSpecificInfo:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, _QWORD, uint64_t, uint64_t)@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(char *, char *);
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  __int128 v157;
  char *v158;
  void (*v159)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;

  v149 = a5;
  v154 = a4;
  v159 = a3;
  v166 = a1;
  v170 = a6;
  v171 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin();
  v9 = (char *)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v158 = (char *)&v133 - v10;
  __chkstk_darwin();
  v148 = (char *)&v133 - v11;
  __chkstk_darwin();
  v145 = (char *)&v133 - v12;
  sub_100012C44(&qword_100408850);
  __chkstk_darwin();
  v155 = (uint64_t)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100012C44(&qword_100408858);
  __chkstk_darwin();
  v146 = (uint64_t)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
  __chkstk_darwin();
  v150 = (uint64_t)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v151 = (uint64_t)&v133 - v16;
  sub_100012C44(&qword_100408860);
  __chkstk_darwin();
  *(_QWORD *)&v157 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SharedSecret(0);
  v160 = *(_QWORD *)(v18 - 8);
  v161 = v18;
  __chkstk_darwin();
  v156 = (char *)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408868);
  __chkstk_darwin();
  v153 = (uint64_t)&v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v163 = (unint64_t)&v133 - v21;
  v22 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v164 = *(_QWORD *)(v22 - 8);
  v165 = v22;
  __chkstk_darwin();
  v162 = (uint64_t)&v133 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v25 = (char *)&v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin();
  v152 = (char *)&v133 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v167 = (char *)&v133 - v29;
  v30 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v32 = (char *)&v133 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a2;
  sub_100071FA8(a2, (uint64_t)v32);
  v34 = (uint64_t *)&v32[*(int *)(v30 + 28)];
  v35 = v34[1];
  v168 = *v34;
  sub_1000339F4(v168, v35);
  sub_100063824((uint64_t)v32, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v169 = v35;
  v36 = v35 >> 60;
  v38 = v171;
  v37 = v172;
  if (v36 > 0xE)
  {
LABEL_4:
    v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v37, v38);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Authentication request generation failed because no authentication token found", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v38);
    goto LABEL_7;
  }
  v144 = v7;
  sub_100071FA8(v33, (uint64_t)v32);
  sub_100033B48((uint64_t)&v32[*(int *)(v30 + 24)], (uint64_t)v25, (uint64_t *)&unk_10040D200);
  sub_100063824((uint64_t)v32, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_10000E658(v168, v169);
    sub_100033A84((uint64_t)v25, (uint64_t *)&unk_10040D200);
    v38 = v171;
    v37 = v172;
    v7 = v144;
    goto LABEL_4;
  }
  v45 = v26;
  v46 = v166;
  v47 = (char *)(v166 >> 40);
  v48 = HIDWORD(v166);
  v49 = v166 >> 24;
  v50 = v166 >> 16;
  v142 = v27;
  v51 = *(void (**)(char *, char *))(v27 + 32);
  v52 = v166 >> 8;
  v53 = v167;
  v143 = v45;
  v51(v167, v25);
  v137 = type metadata accessor for LongTermPairingKeys(0);
  v54 = v172;
  __chkstk_darwin();
  *(&v133 - 4) = (unint64_t)v53;
  *((_BYTE *)&v133 - 24) = v46;
  v138 = v52;
  *((_BYTE *)&v133 - 23) = BYTE1(v46);
  v139 = v50;
  *((_BYTE *)&v133 - 22) = BYTE2(v46);
  v140 = v49;
  *((_BYTE *)&v133 - 21) = BYTE3(v46);
  v141 = v48;
  *((_BYTE *)&v133 - 20) = BYTE4(v46);
  *((_BYTE *)&v133 - 19) = (_BYTE)v47;
  v56 = v168;
  v55 = v169;
  *(&v133 - 2) = v168;
  *(&v133 - 1) = v55;
  v57 = v163;
  sub_100136600((uint64_t (*)(char *))sub_10014B830, v163);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v57, 1, v165) == 1)
  {
    sub_100033A84(v57, &qword_100408868);
    v58 = v144;
    v59 = v158;
    v60 = v171;
    v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v144 + 16))(v158, v54, v171);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter(v62);
    v64 = os_log_type_enabled(v62, v63);
    v65 = v143;
    if (v64)
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Authentication request generation failed because no paired device matches the authentication token", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }
    sub_10000E658(v56, v55);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v167, v65);
  }
  else
  {
    v158 = v47;
    v67 = v162;
    sub_100033AC0(v57, v162, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    v68 = v157;
    P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(v53);
    v69 = (unint64_t)v53;
    v71 = v160;
    v70 = v161;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v160 + 56))(v68, 0, 1, v161);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v68, 1, v70) == 1)
    {
      sub_100063824(v67, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      sub_10000E658(v56, v169);
      (*(void (**)(unint64_t, uint64_t))(v142 + 8))(v69, v143);
      sub_100033A84(v68, &qword_100408860);
    }
    else
    {
      v72 = v154;
      v163 = v154 >> 40;
      v136 = HIDWORD(v154);
      v135 = v154 >> 24;
      v134 = v154 >> 16;
      v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 32);
      v133 = v154 >> 8;
      v74 = v73(v156, v68, v70);
      v75 = v152;
      v76 = P256.KeyAgreement.PrivateKey.publicKey.getter(v74);
      v77 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v76);
      v79 = v78;
      v152 = *(char **)(v142 + 8);
      v80 = ((uint64_t (*)(char *, uint64_t))v152)(v75, v143);
      v81 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v80);
      v83 = v82;
      v173 = v77;
      v174 = v79;
      sub_100031FEC(v77, v79);
      sub_1000FBDAC(v81, v83);
      sub_10000E614(v81, v83);
      sub_10000E614(v77, v79);
      v84 = v173;
      v85 = v174;
      v86 = v162;
      SharedSecret.withUnsafeBytes<A>(_:)(&v175, sub_10006C85C, 0, &type metadata for Data);
      v87 = v175;
      v88 = v176;
      v175 = v84;
      v176 = v85;
      sub_100031FEC(v84, v85);
      sub_100031FEC(v87, v88);
      sub_1000FBDAC(v87, v88);
      sub_10000E614(v87, v88);
      sub_10000E614(v87, v88);
      sub_10000E614(v84, v85);
      v89 = v175;
      v90 = v176;
      v91 = sub_100012C44(&qword_100403E88);
      v92 = swift_allocObject(v91, 38, 7);
      v157 = xmmword_10033B190;
      *(_OWORD *)(v92 + 16) = xmmword_10033B190;
      *(_BYTE *)(v92 + 32) = v72;
      *(_BYTE *)(v92 + 33) = v133;
      *(_BYTE *)(v92 + 34) = v134;
      *(_BYTE *)(v92 + 35) = v135;
      *(_BYTE *)(v92 + 36) = v136;
      *(_BYTE *)(v92 + 37) = v163;
      v93 = sub_1001068EC(v92);
      v95 = v94;
      swift_bridgeObjectRelease(v92);
      v96 = swift_allocObject(v91, 38, 7);
      *(_OWORD *)(v96 + 16) = v157;
      *(_BYTE *)(v96 + 32) = v166;
      *(_BYTE *)(v96 + 33) = v138;
      *(_BYTE *)(v96 + 34) = v139;
      *(_BYTE *)(v96 + 35) = v140;
      *(_BYTE *)(v96 + 36) = v141;
      *(_BYTE *)(v96 + 37) = (_BYTE)v158;
      v97 = sub_1001068EC(v96);
      v99 = v98;
      swift_bridgeObjectRelease(v96);
      v173 = v93;
      v174 = v95;
      sub_100031FEC(v93, v95);
      sub_1000FBDAC(v97, v99);
      sub_10000E614(v97, v99);
      sub_10000E614(v93, v95);
      v100 = v173;
      v101 = v174;
      v102 = v153;
      sub_1000637E0(v86, v153, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v164 + 56))(v102, 0, 1, v165);
      v103 = v155;
      sub_100135964(v89, v90, v100, v101, v102, v155);
      sub_10000E614(v100, v101);
      sub_10000E614(v89, v90);
      sub_100033A84(v102, &qword_100408868);
      v104 = sub_100012C44(&qword_100408878);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 48))(v103, 1, v104) == 1)
      {
        sub_100033A84(v103, &qword_100408850);
        v105 = v144;
        v106 = v148;
        v107 = v171;
        v108 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v144 + 16))(v148, v172, v171);
        v109 = Logger.logObject.getter(v108);
        v110 = static os_log_type_t.error.getter(v109);
        if (os_log_type_enabled(v109, v110))
        {
          v111 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v111 = 0;
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "Authentication request generation failed because authentication key derivation failed", v111, 2u);
          swift_slowDealloc(v111, -1, -1);
        }
        sub_10000E658(v168, v169);

        (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);
        (*(void (**)(char *, uint64_t))(v160 + 8))(v156, v161);
        sub_100063824(v86, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        v112 = v167;
      }
      else
      {
        v113 = v103 + *(int *)(v104 + 48);
        v114 = v147;
        v115 = v146;
        v116 = v146 + *(int *)(v147 + 48);
        sub_100033AC0(v103, v146, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        sub_100033AC0(v113, v116, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        v117 = v115 + *(int *)(v114 + 48);
        v118 = v151;
        sub_100033AC0(v115, v151, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        v119 = v150;
        sub_100033AC0(v117, v150, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        v120 = v172;
        v121 = sub_100133B08(v172 + *(int *)(v137 + 20), v159, v69, v149);
        if (v121)
        {
          v122 = v121;
          sub_10000E658(v168, v169);
          sub_100063824(v118, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
          (*(void (**)(char *, uint64_t))(v160 + 8))(v156, v161);
          sub_100063824(v86, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          ((void (*)(unint64_t, uint64_t))v152)(v69, v143);
          v123 = sub_100012C44(&qword_100408870);
          v124 = *(int *)(v123 + 48);
          v125 = v170;
          sub_100033AC0(v119, v170, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
          *(_QWORD *)(v125 + v124) = v122;
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 56))(v125, 0, 1, v123);
        }
        v126 = v144;
        v127 = v145;
        v128 = v171;
        v129 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v144 + 16))(v145, v120, v171);
        v130 = Logger.logObject.getter(v129);
        v131 = static os_log_type_t.error.getter(v130);
        if (os_log_type_enabled(v130, v131))
        {
          v132 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v132 = 0;
          _os_log_impl((void *)&_mh_execute_header, v130, v131, "Authentication request generation failed because encrypting the request failed", v132, 2u);
          swift_slowDealloc(v132, -1, -1);
        }
        sub_10000E658(v168, v169);

        (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v128);
        sub_100063824(v119, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        sub_100063824(v151, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        (*(void (**)(char *, uint64_t))(v160 + 8))(v156, v161);
        sub_100063824(v86, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        v112 = (char *)v69;
      }
      ((void (*)(char *, uint64_t))v152)(v112, v143);
    }
  }
LABEL_7:
  v43 = sub_100012C44(&qword_100408870);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v170, 1, 1, v43);
}

uint64_t sub_100137BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;

  v6 = type metadata accessor for LongTermPairingKeys.Identity(0);
  v7 = sub_10014B538(a1 + *(int *)(v6 + 20), a2, a3 & 0xFFFFFFFFFFFFLL);
  v9 = v8;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v8);
  v11 = v10;
  sub_10000E614(v7, v9);
  return v11 & 1;
}

uint64_t LongTermPairingKeys.authenticationResponse(forPeer:with:using:on:myServiceSpecificInfo:)(unint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, uint64_t, uint64_t), unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  char v73;
  uint64_t (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  _BOOL4 v128;
  char *v129;
  uint8_t *v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  void (*v140)(void);
  void (*v141)(char *, uint64_t, uint64_t);
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  NSObject *v158;
  os_log_type_t v159;
  _BOOL4 v160;
  uint64_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  void (*v176)(char *, uint64_t);
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  uint8_t *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  os_log_type_t v189;
  uint8_t *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  void (*v199)(char *, uint64_t);
  __int128 v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  unint64_t v245;
  char *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void (*v250)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;

  v219 = a5;
  v245 = a4;
  v250 = a3;
  v240 = a1;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v252 = v6;
  v253 = v7;
  __chkstk_darwin();
  v251 = (uint64_t)&v196 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v247 = (unint64_t)&v196 - v9;
  __chkstk_darwin();
  v246 = (char *)&v196 - v10;
  __chkstk_darwin();
  v236 = (char *)&v196 - v11;
  __chkstk_darwin();
  v226 = (char *)&v196 - v12;
  __chkstk_darwin();
  v221 = (char *)&v196 - v13;
  __chkstk_darwin();
  v220 = (char *)&v196 - v14;
  __chkstk_darwin();
  v218 = (char *)&v196 - v15;
  v216 = type metadata accessor for AES.GCM.SealedBox(0);
  v215 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin();
  v217 = (char *)&v196 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v242 = *(_QWORD *)(v17 - 8);
  v243 = v17;
  __chkstk_darwin();
  v222 = (uint64_t)&v196 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408880);
  __chkstk_darwin();
  v235 = (uint64_t)&v196 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = sub_100012C44(&qword_100408888);
  __chkstk_darwin();
  v223 = (char *)&v196 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = type metadata accessor for P256.Signing.ECDSASignature(0);
  v229 = *(_QWORD *)(v230 - 8);
  __chkstk_darwin();
  v228 = (char *)&v196 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = type metadata accessor for UUID(0);
  v231 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin();
  v227 = (char *)&v196 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408868);
  __chkstk_darwin();
  v225 = (uint64_t)&v196 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v238 = (char *)&v196 - v24;
  sub_100012C44(&qword_100408850);
  __chkstk_darwin();
  v239 = (uint64_t)&v196 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = sub_100012C44(&qword_100408858);
  __chkstk_darwin();
  v233 = (uint64_t)&v196 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
  __chkstk_darwin();
  v241 = (uint64_t)&v196 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v237 = (uint64_t)&v196 - v28;
  sub_100012C44(&qword_100408860);
  __chkstk_darwin();
  v30 = (char *)&v196 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for SharedSecret(0);
  v248 = *(_QWORD *)(v31 - 8);
  v249 = v31;
  __chkstk_darwin();
  v244 = (char *)&v196 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v35 = (char *)&v196 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v37 = (char *)&v196 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v39 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin();
  v41 = (char *)&v196 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v43 = (char *)&v196 - v42;
  sub_100071FA8(a2, (uint64_t)v35);
  sub_100033B48((uint64_t)&v35[*(int *)(v33 + 24)], (uint64_t)v37, (uint64_t *)&unk_10040D200);
  sub_100063824((uint64_t)v35, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38) == 1)
  {
    sub_100033A84((uint64_t)v37, (uint64_t *)&unk_10040D200);
    v44 = v253;
    v45 = v251;
    v46 = v252;
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v253 + 16))(v251, v254, v252);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Authentication response generation failed because no public key found", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v43, v37, v38);
  sub_100071FA8(a2, (uint64_t)v35);
  v213 = v33;
  v51 = (uint64_t *)&v35[*(int *)(v33 + 32)];
  v53 = *v51;
  v52 = v51[1];
  sub_1000339F4(*v51, v52);
  sub_100063824((uint64_t)v35, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if (v52 >> 60 == 15)
  {
    v54 = v43;
    v55 = v253;
    v56 = v247;
    v57 = v252;
    v58 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v253 + 16))(v247, v254, v252);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Authentication response generation failed because no encrypted signature found", v61, 2u);
      swift_slowDealloc(v61, -1, -1);
    }

    (*(void (**)(unint64_t, uint64_t))(v55 + 8))(v56, v57);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v54, v38);
    return 0;
  }
  v251 = v53;
  v247 = v52;
  P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(v43);
  v212 = a2;
  v63 = v248;
  v62 = v249;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v248 + 56))(v30, 0, 1, v249);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v30, 1, v62) == 1)
  {
    sub_100033A84((uint64_t)v30, &qword_100408860);
    v64 = v253;
    v65 = v246;
    v66 = v252;
    v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v246, v254, v252);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.error.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Authentication response generation failed because shared secret derivation failed", v70, 2u);
      swift_slowDealloc(v70, -1, -1);
    }
    sub_10000E658(v251, v247);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v38);
    return 0;
  }
  v198 = v35;
  v207 = v245 >> 40;
  v210 = HIDWORD(v245);
  v209 = v245 >> 24;
  v208 = v245 >> 16;
  v206 = v245 >> 8;
  v73 = v240;
  v205 = v240 >> 40;
  v204 = HIDWORD(v240);
  v203 = v240 >> 24;
  v202 = v240 >> 16;
  v74 = *(uint64_t (**)(char *, char *, uint64_t))(v63 + 32);
  v201 = v240 >> 8;
  v75 = v74(v244, v30, v62);
  v246 = v43;
  v76 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v75);
  v78 = v77;
  v79 = P256.KeyAgreement.PrivateKey.publicKey.getter(v76);
  v80 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v79);
  v81 = v38;
  v83 = v82;
  v84 = *(void (**)(char *, uint64_t))(v39 + 8);
  v211 = v81;
  v199 = v84;
  v84(v41, v81);
  v255 = v76;
  v256 = v78;
  sub_100031FEC(v76, v78);
  sub_100031FEC(v80, v83);
  sub_1000FBDAC(v80, v83);
  sub_10000E614(v80, v83);
  sub_10000E614(v80, v83);
  sub_10000E614(v76, v78);
  v85 = v255;
  v86 = v256;
  SharedSecret.withUnsafeBytes<A>(_:)(&v257, sub_10006C85C, 0, &type metadata for Data);
  v197 = 0;
  v87 = v257;
  v88 = v258;
  v257 = v85;
  v258 = v86;
  sub_100031FEC(v85, v86);
  sub_100031FEC(v87, v88);
  sub_1000FBDAC(v87, v88);
  sub_10000E614(v87, v88);
  sub_10000E614(v87, v88);
  sub_10000E614(v85, v86);
  v89 = v257;
  v90 = v258;
  v91 = sub_100012C44(&qword_100403E88);
  v92 = swift_allocObject(v91, 38, 7);
  v200 = xmmword_10033B190;
  *(_OWORD *)(v92 + 16) = xmmword_10033B190;
  *(_BYTE *)(v92 + 32) = v73;
  *(_BYTE *)(v92 + 33) = v201;
  *(_BYTE *)(v92 + 34) = v202;
  *(_BYTE *)(v92 + 35) = v203;
  *(_BYTE *)(v92 + 36) = v204;
  *(_BYTE *)(v92 + 37) = v205;
  v93 = sub_1001068EC(v92);
  v95 = v94;
  swift_bridgeObjectRelease(v92);
  v96 = swift_allocObject(v91, 38, 7);
  *(_OWORD *)(v96 + 16) = v200;
  *(_BYTE *)(v96 + 32) = v245;
  *(_BYTE *)(v96 + 33) = v206;
  *(_BYTE *)(v96 + 34) = v208;
  *(_BYTE *)(v96 + 35) = v209;
  *(_BYTE *)(v96 + 36) = v210;
  *(_BYTE *)(v96 + 37) = v207;
  v97 = sub_1001068EC(v96);
  v99 = v98;
  swift_bridgeObjectRelease(v96);
  v255 = v93;
  v256 = v95;
  sub_100031FEC(v93, v95);
  sub_1000FBDAC(v97, v99);
  sub_10000E614(v97, v99);
  sub_10000E614(v93, v95);
  v100 = v255;
  v101 = v256;
  v102 = (uint64_t)v238;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v242 + 56))(v238, 1, 1, v243);
  v103 = v239;
  sub_100135964(v89, v90, v100, v101, v102, v239);
  sub_10000E614(v100, v101);
  sub_10000E614(v89, v90);
  sub_100033A84(v102, &qword_100408868);
  v104 = sub_100012C44(&qword_100408878);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 48))(v103, 1, v104) == 1)
  {
    sub_100033A84(v103, &qword_100408850);
    v105 = v253;
    v106 = v236;
    v107 = v252;
    v108 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v236, v254, v252);
    v109 = Logger.logObject.getter(v108);
    v110 = static os_log_type_t.error.getter(v109);
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Authentication response generation failed because authentication key derivation failed", v111, 2u);
      swift_slowDealloc(v111, -1, -1);
    }
    sub_10000E658(v251, v247);

    (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v244, v249);
    v112 = v246;
LABEL_24:
    v199(v112, v211);
    return 0;
  }
  v113 = v103 + *(int *)(v104 + 48);
  v114 = v234;
  v115 = v233;
  v116 = v233 + *(int *)(v234 + 48);
  sub_100033AC0(v103, v233, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  sub_100033AC0(v113, v116, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  v117 = v115 + *(int *)(v114 + 48);
  v118 = v237;
  sub_100033AC0(v115, v237, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  sub_100033AC0(v117, v241, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  v119 = v235;
  v120 = v247;
  sub_100134AF8(v251, v247, v235);
  v121 = sub_100012C44(&qword_100408890);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 48))(v119, 1, v121) == 1)
  {
    sub_100033A84(v119, &qword_100408880);
    v122 = v253;
    v123 = v226;
    v124 = v252;
    v125 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v226, v254, v252);
    v126 = Logger.logObject.getter(v125);
    v127 = static os_log_type_t.error.getter(v126);
    v128 = os_log_type_enabled(v126, v127);
    v129 = v246;
    if (v128)
    {
      v130 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v130 = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "Authentication response generation failed because authentication request parsing failed", v130, 2u);
      v131 = v130;
      v120 = v247;
      swift_slowDealloc(v131, -1, -1);
    }
    sub_10000E658(v251, v120);

    (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v124);
    sub_100063824(v241, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    sub_100063824(v118, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v244, v249);
    v112 = v129;
    goto LABEL_24;
  }
  v132 = v119 + *(int *)(v121 + 48);
  v133 = (uint64_t *)(v119 + *(int *)(v121 + 64));
  v134 = *v133;
  v135 = v133[1];
  v136 = v224;
  v137 = v223;
  v138 = &v223[*(int *)(v224 + 48)];
  v139 = &v223[*(int *)(v224 + 64)];
  v140 = *(void (**)(void))(v231 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v140)(v223, v119, v232);
  v141 = *(void (**)(char *, uint64_t, uint64_t))(v229 + 32);
  v142 = v138;
  v143 = v230;
  v141(v142, v132, v230);
  *(_QWORD *)v139 = v134;
  *((_QWORD *)v139 + 1) = v135;
  v144 = &v137[*(int *)(v136 + 48)];
  v145 = (uint64_t *)&v137[*(int *)(v136 + 64)];
  v146 = *v145;
  v147 = v145[1];
  v148 = (uint64_t)v227;
  v140();
  v149 = v228;
  v141(v228, (uint64_t)v144, v143);
  v150 = type metadata accessor for LongTermPairingKeys(0);
  v151 = v254;
  __chkstk_darwin();
  *(&v196 - 2) = v148;
  v152 = v225;
  sub_100136600((uint64_t (*)(char *))sub_10014B848, v225);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v242 + 48))(v152, 1, v243) == 1)
  {
    v153 = v147;
    sub_100033A84(v152, &qword_100408868);
    v154 = v252;
    v155 = v253;
    v156 = v221;
    v157 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v221, v151, v252);
    v158 = Logger.logObject.getter(v157);
    v159 = static os_log_type_t.error.getter(v158);
    v160 = os_log_type_enabled(v158, v159);
    v161 = v237;
    if (v160)
    {
      v162 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v162 = 0;
      _os_log_impl((void *)&_mh_execute_header, v158, v159, "Authentication response generation failed because no paired device matches the authentication request", v162, 2u);
      swift_slowDealloc(v162, -1, -1);
    }
    sub_10000E614(v146, v153);
    sub_10000E658(v251, v247);

    (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v154);
    (*(void (**)(char *, uint64_t))(v229 + 8))(v228, v230);
    sub_100063824(v241, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    v163 = v161;
    goto LABEL_40;
  }
  v164 = v222;
  sub_100033AC0(v152, v222, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  v165 = (uint64_t)v149;
  v166 = v250;
  v167 = (unint64_t)v246;
  v168 = v237;
  if ((sub_1001355A4(v148, v165, v146, v147, v164) & 1) == 0)
  {
    v177 = v146;
    v178 = v253;
    v179 = v220;
    v180 = v252;
    v181 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v220, v254, v252);
    v182 = Logger.logObject.getter(v181);
    v183 = static os_log_type_t.error.getter(v182);
    if (os_log_type_enabled(v182, v183))
    {
      v184 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v184 = 0;
      _os_log_impl((void *)&_mh_execute_header, v182, v183, "Authentication response generation failed because authentication request verification failed", v184, 2u);
      swift_slowDealloc(v184, -1, -1);
    }
    v185 = v177;
    v186 = v147;
    goto LABEL_39;
  }
  v245 = v147;
  v169 = v254;
  v170 = sub_100133B08(v254 + *(int *)(v150 + 20), v166, v167, v219);
  if (!v170)
  {
    v187 = v146;
    v180 = v252;
    v178 = v253;
    v179 = v218;
    v188 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 16))(v218, v169, v252);
    v182 = Logger.logObject.getter(v188);
    v189 = static os_log_type_t.error.getter(v182);
    if (os_log_type_enabled(v182, v189))
    {
      v190 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v190 = 0;
      _os_log_impl((void *)&_mh_execute_header, v182, v189, "Authentication response generation failed because encrypting the response failed", v190, 2u);
      swift_slowDealloc(v190, -1, -1);
    }
    v185 = v187;
    v186 = v245;
LABEL_39:
    sub_10000E614(v185, v186);
    sub_10000E658(v251, v247);

    (*(void (**)(char *, uint64_t))(v178 + 8))(v179, v180);
    sub_100063824(v164, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    (*(void (**)(char *, uint64_t))(v229 + 8))(v228, v230);
    sub_100063824(v241, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    v163 = v168;
LABEL_40:
    sub_100063824(v163, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v244, v249);
    v199(v246, v211);
    (*(void (**)(char *, uint64_t))(v231 + 8))(v227, v232);
    return 0;
  }
  v71 = v170;
  v254 = v146;
  v171 = (uint64_t)v198;
  sub_100071FA8(v212, (uint64_t)v198);
  v172 = (uint64_t *)(v171 + *(int *)(v213 + 36));
  v173 = *v172;
  v174 = v172[1];
  sub_1000339F4(*v172, v174);
  sub_100063824(v171, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if (v174 >> 60 == 15)
  {
    v175 = v211;
    v176 = v199;
  }
  else
  {
    sub_100031FEC(v173, v174);
    v191 = v217;
    v192 = v197;
    sub_1001339C8(v173, v174);
    v175 = v211;
    if (v192)
    {
      swift_errorRelease(v192);
    }
    else
    {
      v193 = static AES.GCM.open(_:using:)(v191, v168 + *(int *)(v214 + 24));
      v195 = v194;
      (*(void (**)(char *, uint64_t))(v215 + 8))(v191, v216);
      _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v193, v195);
      v175 = v211;
    }
    v176 = v199;
    sub_10000E658(v173, v174);
  }
  sub_10000E614(v254, v245);
  sub_10000E658(v251, v247);
  sub_100063824(v164, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  (*(void (**)(char *, uint64_t))(v229 + 8))(v228, v230);
  sub_100063824(v241, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  sub_100063824(v168, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
  (*(void (**)(char *, uint64_t))(v248 + 8))(v244, v249);
  v176(v246, v175);
  (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v148, v232);
  return v71;
}

uint64_t LongTermPairingKeys.verifyAuthenticationResponse(forPeer:with:publisherKeys:using:extraServiceSpecificInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint8_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint8_t *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v138 = a4;
  v155 = a2;
  v7 = type metadata accessor for Logger(0);
  v156 = *(_QWORD *)(v7 - 8);
  v157 = v7;
  __chkstk_darwin();
  v154 = (char *)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v153 = (unint64_t)&v129 - v9;
  __chkstk_darwin();
  v142 = (char *)&v129 - v10;
  __chkstk_darwin();
  v139 = (char *)&v129 - v11;
  __chkstk_darwin();
  v137 = (char *)&v129 - v12;
  v135 = type metadata accessor for AES.GCM.SealedBox(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin();
  v136 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408880);
  __chkstk_darwin();
  v149 = (uint64_t)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100012C44(&qword_100408888);
  __chkstk_darwin();
  v140 = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for P256.Signing.ECDSASignature(0);
  v146 = *(_QWORD *)(v16 - 8);
  v147 = v16;
  __chkstk_darwin();
  v144 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for UUID(0);
  v145 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin();
  v143 = (char *)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v152 = (uint64_t)&v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v150 = *(_QWORD *)(v20 - 8);
  v151 = v20;
  __chkstk_darwin();
  v22 = (char *)&v129 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v25 = (char *)&v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408868);
  __chkstk_darwin();
  v27 = (char *)&v129 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin();
  v31 = (char *)&v129 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease(*a5);
  v32 = a5;
  *a5 = 0;
  v33 = type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
  sub_100033B48(a3 + *(int *)(v33 + 28), (uint64_t)v27, &qword_100408868);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    sub_100033A84((uint64_t)v27, &qword_100408868);
    v35 = v156;
    v34 = v157;
    v36 = v154;
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 16))(v154, v158, v157);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Authentication response verification failed because no paired device inforamtion was found", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
    return 0;
  }
  v41 = v152;
  v130 = v33;
  v42 = v153;
  v132 = a3;
  v131 = v32;
  v133 = v22;
  sub_100033AC0((uint64_t)v27, (uint64_t)v31, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  v43 = v155;
  sub_100071FA8(v155, (uint64_t)v25);
  v44 = (uint64_t *)&v25[*(int *)(v23 + 32)];
  v46 = *v44;
  v45 = v44[1];
  sub_1000339F4(*v44, v45);
  sub_100063824((uint64_t)v25, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v154 = v31;
  v47 = v158;
  if (v45 >> 60 == 15)
    goto LABEL_8;
  sub_100071FA8(v43, (uint64_t)v25);
  sub_100033B48((uint64_t)&v25[*(int *)(v23 + 24)], v41, (uint64_t *)&unk_10040D200);
  sub_100063824((uint64_t)v25, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v49 = v150;
  v48 = v151;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v41, 1, v151) == 1)
  {
    sub_10000E658(v46, v45);
    sub_100033A84(v41, (uint64_t *)&unk_10040D200);
LABEL_8:
    v51 = v156;
    v50 = v157;
    v52 = v42;
    v53 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v156 + 16))(v42, v47, v157);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Authentication response verification failed because no encrypted signature or public key found", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    (*(void (**)(unint64_t, uint64_t))(v51 + 8))(v52, v50);
LABEL_11:
    v57 = (uint64_t)v154;
LABEL_12:
    sub_100063824(v57, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    return 0;
  }
  v129 = v25;
  v59 = v133;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v133, v41, v48);
  v60 = v149;
  v152 = v46;
  v153 = v45;
  sub_100134AF8(v46, v45, v149);
  v61 = sub_100012C44(&qword_100408890);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48))(v60, 1, v61) == 1)
  {
    sub_100033A84(v60, &qword_100408880);
    v63 = v156;
    v62 = v157;
    v64 = v142;
    v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 16))(v142, v47, v157);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Authentication response verification failed because authentication response parsing failed", v68, 2u);
      swift_slowDealloc(v68, -1, -1);
    }
    sub_10000E658(v152, v153);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v62);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v59, v48);
    goto LABEL_11;
  }
  v142 = (char *)v23;
  v69 = v60 + *(int *)(v61 + 48);
  v70 = (uint64_t *)(v60 + *(int *)(v61 + 64));
  v71 = *v70;
  v72 = v70[1];
  v73 = v60;
  v75 = v140;
  v74 = v141;
  v76 = &v140[*(int *)(v141 + 48)];
  v77 = &v140[*(int *)(v141 + 64)];
  v78 = *(void (**)(char *, uint64_t, uint64_t))(v145 + 32);
  v79 = v148;
  v78(v140, v73, v148);
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v146 + 32);
  v81 = v69;
  v82 = v147;
  v80(v76, v81, v147);
  *(_QWORD *)v77 = v71;
  *((_QWORD *)v77 + 1) = v72;
  v83 = &v75[*(int *)(v74 + 48)];
  v84 = (uint64_t *)&v75[*(int *)(v74 + 64)];
  v86 = *v84;
  v85 = v84[1];
  v87 = (uint64_t)v143;
  v78(v143, (uint64_t)v75, v79);
  v88 = (uint64_t)v154;
  v89 = (uint64_t)v144;
  v80(v144, (uint64_t)v83, v82);
  v90 = v88;
  if ((static UUID.== infix(_:_:)(v88, v87) & 1) == 0)
  {
    v100 = v86;
    v102 = v156;
    v101 = v157;
    v103 = v139;
    v104 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 16))(v139, v158, v157);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.error.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      v107 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v107 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Authentication response verification failed because identifiers did not match", v107, 2u);
      v108 = v107;
      v87 = (uint64_t)v143;
      swift_slowDealloc(v108, -1, -1);
    }
    sub_10000E658(v152, v153);
    v109 = v100;
    v110 = v85;
    goto LABEL_29;
  }
  v91 = v132;
  v92 = v85;
  if ((sub_1001355A4(v87, v89, v86, v85, v88) & 1) == 0)
  {
    v111 = v86;
    v102 = v156;
    v101 = v157;
    v103 = v137;
    v112 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 16))(v137, v158, v157);
    v105 = Logger.logObject.getter(v112);
    v113 = static os_log_type_t.error.getter(v105);
    if (os_log_type_enabled(v105, v113))
    {
      v114 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v114 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v113, "Authentication response verification failed", v114, 2u);
      v115 = v114;
      v87 = (uint64_t)v143;
      swift_slowDealloc(v115, -1, -1);
    }
    sub_10000E658(v152, v153);
    v109 = v111;
    v110 = v92;
LABEL_29:
    sub_10000E614(v109, v110);

    (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v101);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v144, v147);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v87, v148);
    (*(void (**)(char *, uint64_t))(v150 + 8))(v133, v151);
    v57 = v90;
    goto LABEL_12;
  }
  v93 = v86;
  v94 = v90;
  v95 = v131;
  swift_bridgeObjectRelease(*v131);
  v96 = (uint64_t)v129;
  sub_100071FA8(v155, (uint64_t)v129);
  v97 = (uint64_t *)(v96 + *((int *)v142 + 9));
  v99 = *v97;
  v98 = v97[1];
  sub_1000339F4(*v97, v98);
  sub_100063824(v96, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if (v98 >> 60 == 15)
  {
    sub_10000E658(v152, v153);
    sub_10000E614(v93, v92);
    v119 = 0;
  }
  else
  {
    sub_100031FEC(v99, v98);
    v116 = v136;
    sub_1001339C8(v99, v98);
    v117 = static AES.GCM.open(_:using:)(v116, v91 + *(int *)(v130 + 24));
    v118 = v116;
    v126 = v125;
    v127 = v117;
    (*(void (**)(char *, uint64_t))(v134 + 8))(v118, v135);
    _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(v127, v126);
    v119 = v128;
    sub_10000E658(v152, v153);
    sub_10000E614(v93, v92);
    sub_10000E658(v99, v98);
  }
  v121 = v150;
  v120 = v151;
  v122 = v133;
  v123 = v148;
  v124 = v145;
  (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v89, v147);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v143, v123);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v120);
  sub_100063824(v94, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  *v95 = v119;
  return 1;
}

uint64_t sub_100139DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v8 = a2;
  sub_10014A704(a1, (uint64_t)sub_10014AA68, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v2)
    swift_bridgeObjectRelease(v6);
  return v6;
}

unint64_t sub_100139E78(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  unint64_t result;
  unint64_t v28;
  __CFString *v29;
  _QWORD *v30;
  const __CFString *v31;
  char isUniquelyReferenced_nonNull_native;
  __int128 v33;
  _OWORD v36[2];
  __int128 v37;
  _QWORD *v38;
  _BYTE v39[320];

  *(_QWORD *)&v33 = a5;
  *((_QWORD *)&v33 + 1) = a6;
  v15 = sub_100012C44(&qword_1004088A8);
  inited = swift_initStackObject(v15, v39);
  v17 = inited;
  *(_OWORD *)(inited + 16) = xmmword_100349F50;
  *(_QWORD *)(inited + 32) = kSecAttrAccessGroup;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 48) = a4;
  *(_QWORD *)(inited + 64) = &type metadata for String;
  *(_QWORD *)(inited + 72) = kSecAttrSynchronizable;
  *(_BYTE *)(inited + 80) = a11 & 1;
  *(_QWORD *)(inited + 104) = &type metadata for Bool;
  *(_QWORD *)(inited + 112) = kSecAttrIsInvisible;
  *(_BYTE *)(inited + 120) = 1;
  *(_QWORD *)(inited + 144) = &type metadata for Bool;
  *(_QWORD *)(inited + 152) = kSecAttrLabel;
  if (a11)
  {
    if (a11 == 1)
    {
      v18 = 0xE600000000000000;
      v19 = 0x63696C627570;
    }
    else
    {
      v18 = 0xEC0000006C61636FLL;
      v19 = 0x6C5F63696C627570;
    }
  }
  else
  {
    v18 = 0xE700000000000000;
    v19 = 0x65746176697270;
  }
  *(_QWORD *)(inited + 160) = v19;
  *(_QWORD *)(inited + 168) = v18;
  *(_QWORD *)(inited + 184) = &type metadata for String;
  *(_QWORD *)(inited + 192) = kSecAttrAccount;
  *(_QWORD *)(inited + 200) = a9;
  *(_QWORD *)(inited + 208) = a10;
  *(_QWORD *)(inited + 224) = &type metadata for String;
  *(_QWORD *)(inited + 232) = kSecAttrService;
  *(_QWORD *)(inited + 240) = a7;
  *(_QWORD *)(inited + 248) = a8;
  *(_QWORD *)(inited + 264) = &type metadata for String;
  *(_QWORD *)(inited + 272) = kSecValueData;
  *(_QWORD *)(inited + 304) = &type metadata for Data;
  *(_QWORD *)(inited + 280) = a1;
  *(_QWORD *)(inited + 288) = a2;
  v20 = (id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain(a4);
  v21 = (id)kSecAttrSynchronizable;
  v22 = (id)kSecAttrIsInvisible;
  v23 = (id)kSecAttrLabel;
  v24 = (id)kSecAttrAccount;
  swift_bridgeObjectRetain(a10);
  v25 = (id)kSecAttrService;
  swift_bridgeObjectRetain(a8);
  v26 = (id)kSecValueData;
  sub_100031FEC(a1, a2);
  result = sub_10001EC98(v17);
  v28 = result;
  if (!a11)
  {
    type metadata accessor for CFString(0);
    v38 = v30;
    *(_QWORD *)&v37 = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    sub_100033A2C(&v37, v36);
    v29 = (id)kSecAttrAccessible;
    v31 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    goto LABEL_10;
  }
  if (kSecAttrSyncViewHint)
  {
    v38 = &type metadata for String;
    v37 = v33;
    sub_100033A2C(&v37, v36);
    v29 = (id)kSecAttrSyncViewHint;
    swift_bridgeObjectRetain(*((_QWORD *)&v33 + 1));
LABEL_10:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
    sub_100030ADC(v36, v29, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease(0x8000000000000000);
    return v28;
  }
  __break(1u);
  return result;
}

uint64_t AppleKeychain.init(accessGroup:view:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
  *(_DWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken) = -1;
  v9 = (_QWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
  *v9 = &_swiftEmptySetSingleton;
  v9[1] = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors) = &_swiftEmptyDictionarySingleton;
  v10 = (_QWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  *v10 = a1;
  v10[1] = a2;
  v11 = (_QWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  *v11 = a3;
  v11[1] = a4;
  return v4;
}

void sub_10013A21C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  _BYTE v27[24];
  char v28[24];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors;
  swift_beginAccess(v2, v28, 0, 0);
  v3 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v4 = (int *)(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken);
  v5 = v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken;
  if (v3)
  {
    swift_beginAccess(v5, v27, 0, 0);
    if (!notify_is_valid_token(*v4))
    {
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease(0xE000000000000000);
      v26[0] = 0xD00000000000001FLL;
      v26[1] = 0x8000000100365940;
      v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
      v7 = *(void **)(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
      swift_bridgeObjectRetain(v7);
      v8._countAndFlagsBits = v6;
      v8._object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(v7);
      v9 = sub_1000478FC((_QWORD *(*)(unsigned int *__return_ptr, _QWORD *))sub_10014E81C, v1, 0xD00000000000001FLL, 0x8000000100365940);
      swift_bridgeObjectRelease(0x8000000100365940);
      if (v9)
      {
        v11 = Logger.logObject.getter(v10);
        v12 = static os_log_type_t.error.getter(v11);
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc(12, -1);
          v14 = swift_slowAlloc(32, -1);
          v26[0] = v14;
          *(_DWORD *)v13 = 136315138;
          v15 = sub_10021197C(v9);
          v17 = v16;
          v24 = sub_100013CC8(v15, v16, v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
          swift_bridgeObjectRelease(v17);
          v18 = "Failed to start monitoring keychain updates with error: %s";
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v11, v12, v18, v13, 0xCu);
          swift_arrayDestroy(v14, 1, &type metadata for Any[8]);
          swift_slowDealloc(v14, -1, -1);
          swift_slowDealloc(v13, -1, -1);
          goto LABEL_11;
        }
        goto LABEL_11;
      }
    }
  }
  else
  {
    swift_beginAccess(v5, v27, 1, 0);
    if (notify_is_valid_token(*v4))
    {
      v19 = notify_cancel(*v4);
      *v4 = -1;
      if ((_DWORD)v19)
      {
        v20 = v19;
        v11 = Logger.logObject.getter(v19);
        v12 = static os_log_type_t.error.getter(v11);
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc(12, -1);
          v14 = swift_slowAlloc(32, -1);
          v26[0] = v14;
          *(_DWORD *)v13 = 136315138;
          v21 = sub_10021197C(v20);
          v23 = v22;
          v24 = sub_100013CC8(v21, v22, v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
          swift_bridgeObjectRelease(v23);
          v18 = "Failed to cancel monitoring keychain updates with error: %s";
          goto LABEL_10;
        }
LABEL_11:

      }
    }
  }
}

void sub_10013A528(const char *a1@<X0>, uint64_t a2@<X1>, uint32_t *a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  void *v8;
  int *v9;
  uint32_t v10;
  _QWORD v11[5];
  uint64_t v12;

  if (qword_1004040F8 != -1)
    swift_once(&qword_1004040F8, sub_10017DEE0);
  v6 = static OS_dispatch_queue.nan;
  v7 = swift_allocObject(&unk_1003E6D38, 24, 7);
  swift_weakInit(v7 + 16, a2);
  v11[4] = sub_10014E858;
  v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10013A92C;
  v11[3] = &unk_1003E6D50;
  v8 = _Block_copy(v11);
  swift_release(v12);
  v9 = (int *)(a2 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken);
  swift_beginAccess(v9, v11, 33, 0);
  v10 = notify_register_dispatch(a1, v9, v6, v8);
  swift_endAccess(v11);
  _Block_release(v8);
  *a3 = v10;
}

uint64_t sub_10013A65C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = a2 + 16;
  swift_beginAccess(v7, v32, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v9 = Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Strong + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger, v3);
    v10 = swift_release(v9);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received keychain updated notification", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  swift_beginAccess(v7, v31, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (!result)
    return result;
  v15 = result;
  v16 = (uint64_t *)(result + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors);
  swift_beginAccess(result + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors, v30, 0, 0);
  v17 = *v16;
  swift_bridgeObjectRetain(v17);
  swift_release(v15);
  v18 = v17 + 64;
  v19 = 1 << *(_BYTE *)(v17 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(v17 + 64);
  v22 = (unint64_t)(v19 + 63) >> 6;
  result = swift_bridgeObjectRetain(v17);
  v23 = 0;
  while (1)
  {
    if (v21)
    {
      v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_10;
    }
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v22)
      goto LABEL_30;
    v27 = *(_QWORD *)(v18 + 8 * v26);
    ++v23;
    if (!v27)
    {
      v23 = v26 + 1;
      if (v26 + 1 >= v22)
        goto LABEL_30;
      v27 = *(_QWORD *)(v18 + 8 * v23);
      if (!v27)
      {
        v23 = v26 + 2;
        if (v26 + 2 >= v22)
          goto LABEL_30;
        v27 = *(_QWORD *)(v18 + 8 * v23);
        if (!v27)
        {
          v23 = v26 + 3;
          if (v26 + 3 >= v22)
            goto LABEL_30;
          v27 = *(_QWORD *)(v18 + 8 * v23);
          if (!v27)
          {
            v23 = v26 + 4;
            if (v26 + 4 >= v22)
              goto LABEL_30;
            v27 = *(_QWORD *)(v18 + 8 * v23);
            if (!v27)
              break;
          }
        }
      }
    }
LABEL_29:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_10:
    result = (*(uint64_t (**)(void))(*(_QWORD *)(v17 + 56) + 16 * v25))();
  }
  v28 = v26 + 5;
  if (v28 >= v22)
  {
LABEL_30:
    swift_release(v17);
    return swift_bridgeObjectRelease(v17);
  }
  v27 = *(_QWORD *)(v18 + 8 * v28);
  if (v27)
  {
    v23 = v28;
    goto LABEL_29;
  }
  while (1)
  {
    v23 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v23 >= v22)
      goto LABEL_30;
    v27 = *(_QWORD *)(v18 + 8 * v23);
    ++v28;
    if (v27)
      goto LABEL_29;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10013A92C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t AppleKeychain.monitor(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v3 = v2;
  swift_beginAccess(v2 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens, v15, 33, 0);
  v6 = sub_100130B10();
  v8 = v7;
  result = swift_endAccess(v15);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = swift_allocObject(&unk_1003E6BD8, 32, 7);
    *(_QWORD *)(v10 + 16) = a1;
    *(_QWORD *)(v10 + 24) = a2;
    v11 = (_QWORD *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors);
    swift_beginAccess(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors, v15, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
    v14 = *v11;
    *v11 = 0x8000000000000000;
    sub_100030D6C((uint64_t)sub_1000623F4, v10, v6, isUniquelyReferenced_nonNull_native);
    v13 = *v11;
    *v11 = v14;
    swift_bridgeObjectRelease(v13);
    swift_endAccess(v15);
    sub_10013A21C();
    return v6;
  }
  return result;
}

Swift::Void __swiftcall AppleKeychain.stopMonitoring(_:)(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  swift_beginAccess(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors, v6, 33, 0);
  v3 = sub_100030138(a1);
  v5 = v4;
  swift_endAccess(v6);
  sub_10013A21C();
  if (v3)
    sub_100012318(v3, v5);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens, v6, 33, 0);
  sub_100149B68(a1);
  swift_endAccess(v6);
}

_QWORD *AppleKeychain.findIdentities(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t inited;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  const __CFString *v47;
  const __CFString *v48;
  const __CFString *v49;
  const __CFString *v50;
  __CFString *v51;
  __CFString *v52;
  const __CFString *v53;
  unint64_t v54;
  uint64_t v55;
  NSDictionary v56;
  OSStatus v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t countAndFlagsBits;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  __CFString *v65;
  NSObject *v66;
  uint64_t (*v67)(uint64_t);
  __int128 v68;
  uint64_t v69;
  __CFString *v70;
  unint64_t v71;
  char v72;
  void *object;
  Swift::Int v74;
  __CFString *v75;
  unint64_t v76;
  char v77;
  __CFString *v78;
  unint64_t v79;
  char v80;
  BOOL v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __CFString *v94;
  NSObject *v95;
  __CFString *v96;
  NSObject *v97;
  unint64_t v98;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __CFString *v103;
  NSObject *v104;
  __CFString *v105;
  NSObject *v106;
  unint64_t v107;
  uint64_t v108;
  NSDictionary v109;
  OSStatus v110;
  CFStringRef v111;
  __CFString *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t);
  __CFString *v126;
  uint64_t v127;
  void *v128;
  __CFString *v129;
  NSObject *v130;
  const __CFString *v131;
  __CFString *v132;
  __CFString *v133;
  __CFString *v134;
  NSObject *v135;
  unint64_t v136;
  NSDictionary v137;
  OSStatus v138;
  CFStringRef v139;
  __CFString *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  CFStringRef v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __CFString *v160;
  uint64_t (*v161)(_QWORD, uint64_t, uint64_t);
  uint64_t v162;
  int v163;
  void *v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint8_t *v168;
  uint64_t v169;
  Swift::String v170;
  Swift::String v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  CFStringRef v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  NSObject *v193;
  void (*v194)(char *, uint64_t, uint64_t);
  char *v195;
  uint64_t v196;
  char *v197;
  void *v198;
  uint64_t v199;
  NSObject *v200;
  os_log_type_t v201;
  int v202;
  uint64_t v203;
  Swift::String v204;
  Swift::String v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  __n128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __n128 v231;
  __CFString *v232;
  char *v233;
  CFStringRef v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;
  unint64_t v240;
  __CFString *v241;
  unint64_t v242;
  NSObject *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t (*v257)(uint64_t);
  void (*v258)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __CFString *v264;
  NSObject *v265;
  __CFString *v266;
  __CFString *v267;
  __CFString *v268;
  void *v269;
  __CFString *v270;
  NSObject *v271;
  __CFString *v272;
  __CFString *v273;
  __CFString *v274;
  void (*v275)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v276;
  __CFString *v277;
  uint64_t v278;
  uint64_t v279;
  __CFString *v280;
  unint64_t v281;
  NSDictionary v282;
  OSStatus v283;
  CFStringRef v284;
  __CFString *v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  unint64_t v291;
  char v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  NSObject *v299;
  os_log_type_t v300;
  uint8_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  char v315;
  char v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  void (*v320)(char *, uint64_t, uint64_t, uint64_t);
  void *v321;
  uint64_t v322;
  NSObject *v323;
  os_log_type_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  unint64_t v330;
  Swift::String v331;
  Swift::String v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  Class v337;
  uint64_t v338;
  uint64_t v339;
  __n128 v340;
  __CFString *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  unint64_t v356;
  uint64_t v357;
  __CFString *v358;
  NSObject *v359;
  __CFString *v360;
  NSObject *v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  const __CFDictionary *v365;
  const __CFDictionary *v366;
  OSStatus v367;
  uint64_t v368;
  NSObject *v369;
  int v370;
  Swift::String v371;
  Swift::String v372;
  uint64_t v373;
  CFStringRef v374;
  __CFString *v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  NSObject *v380;
  _QWORD *v381;
  uint64_t v382;
  unint64_t v383;
  __int128 v384;
  char *v385;
  uint64_t v386;
  CFStringRef v387;
  int v388;
  uint64_t v389;
  Class isa;
  __CFString *v391;
  void (*v392)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v393;
  const __CFString *v394;
  const __CFString *v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  char *v411;
  char *v412;
  char *v413;
  char *v414;
  char *v415;
  char *v416;
  uint64_t v417;
  char *v418;
  unsigned int (*v419)(char *, uint64_t, uint64_t);
  uint64_t v420;
  char *v421;
  uint64_t v422;
  char *v423;
  char *v424;
  char *v425;
  __int128 v426;
  CFStringRef v427;
  NSObject *v428;
  CFStringRef v429;
  _QWORD *v430;
  char *v431;
  uint64_t v432;
  void *v433;
  uint64_t v434;
  char *v435;
  const __CFString *v436;
  uint64_t v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  NSObject *v441;
  uint64_t v442;
  char *v443;
  __CFString *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  __CFString *v454;
  uint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  uint64_t v458;
  char *v459;
  uint64_t v460;
  _QWORD v461[4];
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  Swift::String v469;
  char *v470;
  uint64_t v471;

  v440 = a1;
  sub_100012C44(&qword_10040E1F0);
  __chkstk_darwin();
  v435 = (char *)&v382 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408898);
  __chkstk_darwin();
  v450 = (char *)&v382 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v449 = (uint64_t)&v382 - v7;
  v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v408 = *(_QWORD *)(v8 - 8);
  v409 = v8;
  __chkstk_darwin();
  v407 = (char *)&v382 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v406 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0);
  v404 = *(_QWORD *)(v406 - 8);
  __chkstk_darwin();
  v402 = (char *)&v382 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v401 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0);
  v399 = *(_QWORD *)(v401 - 8);
  __chkstk_darwin();
  v398 = (char *)&v382 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v405 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v403 = *(_QWORD *)(v405 - 8);
  __chkstk_darwin();
  v400 = (char *)&v382 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v460 = type metadata accessor for UUID(0);
  v451 = *(_QWORD *)(v460 - 8);
  __chkstk_darwin();
  v443 = (char *)&v382 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v438 = (char *)&v382 - v14;
  __chkstk_darwin();
  v459 = (char *)&v382 - v15;
  __chkstk_darwin();
  v427 = (CFStringRef)((char *)&v382 - v16);
  __chkstk_darwin();
  v423 = (char *)&v382 - v17;
  sub_100012C44(&qword_100408840);
  __chkstk_darwin();
  v448 = (uint64_t)&v382 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v417 = (uint64_t)&v382 - v19;
  __chkstk_darwin();
  v414 = (char *)&v382 - v20;
  sub_100012C44(&qword_100408868);
  __chkstk_darwin();
  v434 = (uint64_t)&v382 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v424 = (char *)&v382 - v22;
  __chkstk_darwin();
  *(_QWORD *)&v426 = (char *)&v382 - v23;
  __chkstk_darwin();
  v431 = (char *)&v382 - v24;
  v456 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v452 = *(_QWORD *)(v456 - 8);
  __chkstk_darwin();
  v457 = (uint64_t *)((char *)&v382 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v420 = (uint64_t)&v382 - v26;
  __chkstk_darwin();
  v421 = (char *)&v382 - v27;
  __chkstk_darwin();
  v418 = (char *)&v382 - v28;
  v445 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  v455 = *(_QWORD *)(v445 - 8);
  __chkstk_darwin();
  v429 = (CFStringRef)((char *)&v382 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v415 = (char *)&v382 - v30;
  __chkstk_darwin();
  v419 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v382 - v31);
  sub_100012C44(&qword_1004088A0);
  __chkstk_darwin();
  v422 = (uint64_t)&v382 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v425 = (char *)&v382 - v33;
  __chkstk_darwin();
  v413 = (char *)&v382 - v34;
  __chkstk_darwin();
  v430 = (uint64_t *)((char *)&v382 - v35);
  __chkstk_darwin();
  v432 = (uint64_t)&v382 - v36;
  v453 = type metadata accessor for Date(0);
  v458 = *(_QWORD *)(v453 - 8);
  __chkstk_darwin();
  v447 = (uint64_t)&v382 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v411 = (char *)&v382 - v38;
  __chkstk_darwin();
  v410 = (char *)&v382 - v39;
  __chkstk_darwin();
  v416 = (char *)&v382 - v40;
  __chkstk_darwin();
  v412 = (char *)&v382 - v41;
  __chkstk_darwin();
  v446 = (uint64_t)&v382 - v42;
  v437 = sub_100012C44(&qword_1004088A8);
  inited = swift_initStackObject(v437, &v471);
  *(_OWORD *)(inited + 16) = xmmword_10033B190;
  *(_QWORD *)(inited + 32) = kSecClass;
  v441 = kSecClassGenericPassword;
  type metadata accessor for CFString(0);
  v45 = v44;
  *(_QWORD *)(inited + 40) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 64) = v44;
  *(_QWORD *)(inited + 72) = kSecAttrSynchronizable;
  *(_QWORD *)(inited + 80) = kSecAttrSynchronizableAny;
  *(_QWORD *)(inited + 104) = v44;
  *(_QWORD *)(inited + 112) = kSecAttrService;
  v442 = a2;
  *(_QWORD *)(inited + 120) = a2;
  *(_QWORD *)(inited + 128) = a3;
  *(_QWORD *)(inited + 144) = &type metadata for String;
  *(_QWORD *)(inited + 152) = kSecMatchLimit;
  v444 = (__CFString *)kSecMatchLimitAll;
  *(_QWORD *)(inited + 160) = kSecMatchLimitAll;
  v454 = (__CFString *)kSecReturnData;
  *(_QWORD *)(inited + 184) = v44;
  *(_QWORD *)(inited + 192) = kSecReturnData;
  *(_BYTE *)(inited + 200) = 1;
  *(_QWORD *)(inited + 224) = &type metadata for Bool;
  *(_QWORD *)(inited + 232) = kSecReturnAttributes;
  *(_QWORD *)(inited + 264) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = 1;
  v436 = (id)kSecClass;
  v46 = v441;
  v47 = (id)kSecAttrSynchronizable;
  v48 = (id)kSecAttrSynchronizableAny;
  v49 = (id)kSecAttrService;
  swift_bridgeObjectRetain(a3);
  v50 = (id)kSecMatchLimit;
  v51 = v444;
  v52 = v454;
  v53 = (id)kSecReturnAttributes;
  v54 = sub_10001EC98(inited);
  v55 = sub_100011DE4(&qword_1004047D0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338E88);
  v56.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v54);
  v470 = 0;
  v57 = SecItemCopyMatching(v56.super.isa, (CFTypeRef *)&v470);
  v58 = v470;
  if (v57)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v455 + 56))(v440, 1, 1, v445);
    swift_unknownObjectRelease(v58);

    return _swiftEmptyArrayStorage;
  }
  v433 = a3;
  v428 = v46;
  v59 = v455;
  if (!v470
    || (*(_QWORD *)&v462 = v470,
        swift_unknownObjectRetain(v470),
        v60 = sub_100012C44(&qword_1004088B0),
        (swift_dynamicCast(&v469, &v462, (char *)&type metadata for Swift.AnyObject + 8, v60, 6) & 1) == 0))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v440, 1, 1, v445);

    swift_unknownObjectRelease(v470);
    return _swiftEmptyArrayStorage;
  }
  v396 = v55;
  v397 = v45;
  v394 = v47;
  isa = v56.super.isa;
  countAndFlagsBits = v469._countAndFlagsBits;
  Date.init()();
  v392 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
  v392(v432, 1, 1, v445);
  v461[0] = &_swiftEmptyDictionarySingleton;
  v62 = *(_QWORD *)(countAndFlagsBits + 16);
  v395 = v49;
  if (!v62)
  {
    swift_bridgeObjectRelease(countAndFlagsBits);
    v64 = 0;
    v118 = v432;
    v69 = v458;
    v119 = v446;
    v120 = v451;
    v121 = v450;
    goto LABEL_64;
  }
  v388 = 0;
  LODWORD(v389) = 0;
  v63 = 0;
  v64 = 0;
  v386 = v439 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger;
  v385 = (char *)&v462 + 8;
  v65 = (__CFString *)kSecAttrLabel;
  v66 = (v62 - 1);
  v391 = (__CFString *)kSecValueData;
  v454 = (__CFString *)&type metadata for Any[8];
  v67 = (uint64_t (*)(uint64_t))&type metadata for String;
  v387 = kSecAttrModificationDate;
  *((_QWORD *)&v68 + 1) = 2;
  v393 = xmmword_10033A110;
  *(_QWORD *)&v68 = 136315138;
  v384 = v68;
  v69 = v458;
  v444 = (__CFString *)kSecAttrLabel;
  v441 = (v62 - 1);
  while (1)
  {
    while (1)
    {
      if ((unint64_t)v63 >= *(_QWORD *)(countAndFlagsBits + 16))
      {
        __break(1u);
        goto LABEL_167;
      }
      v58 = *(char **)(countAndFlagsBits + 8 * (_QWORD)v63 + 32);
      if (!*((_QWORD *)v58 + 2))
      {
        v462 = 0u;
        v463 = 0u;
        swift_bridgeObjectRetain(v58);
LABEL_20:
        sub_100033A84((uint64_t)&v462, &qword_100405050);
LABEL_21:
        swift_bridgeObjectRelease(v58);
        goto LABEL_22;
      }
      swift_bridgeObjectRetain(*(_QWORD *)(countAndFlagsBits + 8 * (_QWORD)v63 + 32));
      v70 = v65;
      v71 = sub_10002DB98((uint64_t)v70);
      if ((v72 & 1) != 0)
      {
        sub_100014450(*((_QWORD *)v58 + 7) + 32 * v71, (uint64_t)&v462);
      }
      else
      {
        v462 = 0u;
        v463 = 0u;
      }

      if (!*((_QWORD *)&v463 + 1))
        goto LABEL_20;
      if ((swift_dynamicCast(&v469, &v462, v454, &type metadata for String, 6) & 1) == 0)
        goto LABEL_21;
      object = v469._object;
      v74 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6B98, v469);
      swift_bridgeObjectRelease(object);
      if (!v74)
      {
        if (*((_QWORD *)v58 + 2))
        {
          v78 = v391;
          v79 = sub_10002DB98((uint64_t)v78);
          if ((v80 & 1) != 0)
          {
            sub_100014450(*((_QWORD *)v58 + 7) + 32 * v79, (uint64_t)&v462);
          }
          else
          {
            v462 = 0u;
            v463 = 0u;
          }
          v69 = v458;

          if (*((_QWORD *)&v463 + 1))
          {
            if ((swift_dynamicCast(&v469, &v462, &type metadata for Any[8], &type metadata for Data, 6) & 1) != 0)
            {
              v87 = v469._countAndFlagsBits;
              v88 = v469._object;
              sub_100031FEC(v469._countAndFlagsBits, (unint64_t)v469._object);
              v383 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
              v89 = type metadata accessor for BinaryDecoder();
              v90 = (_QWORD *)swift_allocObject(v89, 48, 7);
              v90[5] = &_swiftEmptyDictionarySingleton;
              v90[2] = v87;
              v90[3] = v88;
              __asm { BR              X9 }
            }
            goto LABEL_43;
          }
        }
        else
        {
          v462 = 0u;
          v463 = 0u;
          v69 = v458;
        }
        sub_100033A84((uint64_t)&v462, &qword_100405050);
LABEL_43:
        v91 = v64;
        v92 = (uint64_t)v430;
        v392((uint64_t)v430, 1, 1, v445);
        sub_100033A84(v92, &qword_1004088A0);
        v93 = swift_allocObject(v437, 72, 7);
        *(_OWORD *)(v93 + 16) = v393;
        *(_QWORD *)(v93 + 64) = v397;
        v94 = (__CFString *)v436;
        v95 = v428;
        *(_QWORD *)(v93 + 32) = v436;
        *(_QWORD *)(v93 + 40) = v95;
        swift_bridgeObjectRetain(v58);
        v96 = v94;
        v97 = v95;
        v98 = sub_10001EC98(v93);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
        *(_QWORD *)&v462 = v58;
        v100 = v98;
        goto LABEL_46;
      }
      if (v74 == 1)
        break;
      swift_bridgeObjectRelease(v58);
      v69 = v458;
      if (v74 != 2)
        goto LABEL_22;
      v388 = 1;
      v81 = v66 == v63;
      v63 = ((char *)v63 + 1);
      if (v81)
        goto LABEL_170;
    }
    v69 = v458;
    if (*((_QWORD *)v58 + 2))
    {
      v75 = v391;
      v76 = sub_10002DB98((uint64_t)v75);
      if ((v77 & 1) != 0)
      {
        sub_100014450(*((_QWORD *)v58 + 7) + 32 * v76, (uint64_t)&v462);
      }
      else
      {
        v462 = 0u;
        v463 = 0u;
      }

      if (*((_QWORD *)&v463 + 1))
      {
        if ((swift_dynamicCast(&v469, &v462, &type metadata for Any[8], &type metadata for Data, 6) & 1) != 0)
        {
          v82 = v469._countAndFlagsBits;
          v83 = v469._object;
          sub_100031FEC(v469._countAndFlagsBits, (unint64_t)v469._object);
          v383 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
          v84 = type metadata accessor for BinaryDecoder();
          v85 = (_QWORD *)swift_allocObject(v84, 48, 7);
          v85[5] = &_swiftEmptyDictionarySingleton;
          v85[2] = v82;
          v85[3] = v83;
          __asm { BR              X9 }
        }
        v86 = v64;
        goto LABEL_45;
      }
    }
    else
    {
      v462 = 0u;
      v463 = 0u;
    }
    v86 = v64;
    sub_100033A84((uint64_t)&v462, &qword_100405050);
LABEL_45:
    v101 = (uint64_t)v431;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v452 + 56))(v431, 1, 1, v456);
    sub_100033A84(v101, &qword_100408868);
    v102 = swift_initStackObject(v437, &v464);
    *(_OWORD *)(v102 + 16) = v393;
    *(_QWORD *)(v102 + 64) = v397;
    v103 = (__CFString *)v436;
    v104 = v428;
    *(_QWORD *)(v102 + 32) = v436;
    *(_QWORD *)(v102 + 40) = v104;
    swift_bridgeObjectRetain(v58);
    v105 = v103;
    v106 = v104;
    v107 = sub_10001EC98(v102);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
    *(_QWORD *)&v462 = v58;
    v100 = v107;
    v91 = v86;
LABEL_46:
    sub_10014A704(v100, (uint64_t)sub_10014AA68, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v462);
    v64 = v91;
    v108 = v462;
    swift_bridgeObjectRelease(0x8000000000000000);
    v109.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v108);
    v110 = SecItemDelete(v109.super.isa);
    v66 = v441;
    if (v110)
    {
      v111 = SecCopyErrorMessageString(v110, 0);
      if (v111)
      {
        v112 = (__CFString *)v111;
        v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
        v115 = v114;

      }
      else
      {
        v115 = 0xE700000000000000;
        v113 = 0x6E776F6E6B6E75;
      }
      v67 = (uint64_t (*)(uint64_t))&type metadata for String;
      sub_10013EE80(v113, v115, v439, v442, v433, "Failed to remove badly formed identity for %s with error: %s");
      swift_bridgeObjectRelease(v58);

      swift_bridgeObjectRelease(v115);
      v69 = v458;
      v65 = v444;
    }
    else
    {
      swift_bridgeObjectRelease(v58);

      v65 = v444;
      v67 = (uint64_t (*)(uint64_t))&type metadata for String;
    }
LABEL_22:
    if (v66 == v63)
      break;
    v63 = ((char *)v63 + 1);
  }
  swift_bridgeObjectRelease(countAndFlagsBits);
  v118 = v432;
  v119 = v446;
  v120 = v451;
  v121 = v450;
  if ((v388 & 1) != 0)
    goto LABEL_56;
LABEL_64:
  while (2)
  {
    v144 = v425;
    sub_100033B48(v118, (uint64_t)v425, &qword_1004088A0);
    v419 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v455 + 48);
    if (v419(v144, 1, v445) != 1)
    {
      v145 = (uint64_t)v144;
      v146 = v429;
      sub_100033AC0(v145, (uint64_t)v429, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
      v147 = (uint64_t)v427;
      v455 = *(_QWORD *)(v120 + 16);
      ((void (*)(CFStringRef, CFStringRef, uint64_t))v455)(v427, v146, v460);
      v148 = v461[0];
      if (*(_QWORD *)(v461[0] + 16))
      {
        v149 = sub_10002DCA0(v147);
        v150 = v424;
        if ((v151 & 1) != 0)
        {
          v152 = *(_QWORD *)(v148 + 56);
          v153 = v452;
          v154 = v426;
          sub_1000637E0(v152 + *(_QWORD *)(v452 + 72) * v149, v426, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          v155 = 0;
          goto LABEL_72;
        }
        v155 = 1;
        v153 = v452;
      }
      else
      {
        v155 = 1;
        v153 = v452;
        v150 = v424;
      }
      v154 = v426;
LABEL_72:
      v156 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v153 + 56);
      v157 = v154;
      v158 = v153;
      v159 = v456;
      v156(v157, v155, 1, v456);
      v160 = *(__CFString **)(v120 + 8);
      ((void (*)(CFStringRef, uint64_t))v160)(v427, v460);
      v161 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v158 + 48);
      v162 = v426;
      v163 = v161(v426, 1, v159);
      v454 = v160;
      if (v163 == 1)
      {
        sub_100033A84(v162, &qword_100408868);
        v164 = v433;
        v165 = swift_bridgeObjectRetain_n(v433, 2);
        v166 = Logger.logObject.getter(v165);
        v167 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v166, v167))
        {
          v168 = (uint8_t *)swift_slowAlloc(12, -1);
          v169 = swift_slowAlloc(32, -1);
          *(_DWORD *)v168 = 136315138;
          v469._countAndFlagsBits = v169;
          *(_QWORD *)&v462 = 39;
          *((_QWORD *)&v462 + 1) = 0xE100000000000000;
          swift_bridgeObjectRetain(v433);
          v170._countAndFlagsBits = v442;
          v170._object = v433;
          String.append(_:)(v170);
          v171._countAndFlagsBits = 39;
          v171._object = (void *)0xE100000000000000;
          String.append(_:)(v171);
          swift_bridgeObjectRelease(v433);
          v172 = *((_QWORD *)&v462 + 1);
          *(_QWORD *)&v462 = sub_100013CC8(v462, *((unint64_t *)&v462 + 1), &v469._countAndFlagsBits);
          v164 = v433;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v462, (char *)&v462 + 8);
          swift_bridgeObjectRelease_n(v164, 2);
          swift_bridgeObjectRelease(v172);
          _os_log_impl((void *)&_mh_execute_header, v166, v167, "Detected public identity is missing from the keychain for %s attempting to re-insert", v168, 0xCu);
          swift_arrayDestroy(v169, 1, &type metadata for Any[8]);
          v173 = v169;
          v120 = v451;
          swift_slowDealloc(v173, -1, -1);
          swift_slowDealloc(v168, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v164, 2);
        }

        v178 = v429;
        v179 = (uint64_t)v421;
        v180 = v460;
        ((void (*)(char *, CFStringRef, uint64_t))v455)(v421, v429, v460);
        v181 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
        v182 = (char *)v178 + v181;
        v183 = v179 + v181;
        v184 = type metadata accessor for SymmetricKey(0);
        v185 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v184 - 8) + 16))(v183, v182, v184);
        v186 = v445;
        v187 = v456;
        P256.Signing.PrivateKey.publicKey.getter(v185);
        v188 = (_QWORD *)(v179 + *(int *)(v187 + 24));
        *v188 = 0;
        v188[1] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v458 + 56))(v179 + *(int *)(v187 + 28), 1, 1, v453);
        LOBYTE(v187) = AppleKeychain.save(identity:for:publicly:)(v179, v442, (uint64_t)v164, 1);
        sub_100063824(v179, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        if ((v187 & 1) == 0)
        {
          AppleKeychain.remove(identity:for:)((uint64_t)v178, v442, v164);
          v189 = v432;
          sub_100033A84(v432, &qword_1004088A0);
          v392(v189, 1, 1, v186);
        }
        v69 = v458;
        v121 = v450;
LABEL_81:
        v190 = (uint64_t)v423;
        v191 = (uint64_t)v424;
LABEL_87:
        v234 = v429;
        ((void (*)(uint64_t, CFStringRef, uint64_t))v455)(v190, v429, v180);
        sub_10002FFFC(v190, v191);
        ((void (*)(uint64_t, uint64_t))v454)(v190, v180);
        sub_100033A84(v191, &qword_100408868);
        sub_100063824((uint64_t)v234, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
        goto LABEL_88;
      }
      v174 = v162;
      v175 = v420;
      sub_100033AC0(v174, v420, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      v176 = v175 + *(int *)(v159 + 28);
      v177 = v417;
      sub_100033B48(v176, v417, &qword_100408840);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v177, 1, v453) == 1)
      {
        sub_100063824(v175, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        sub_100033A84(v177, &qword_100408840);
      }
      else
      {
        v192 = v416;
        (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v416, v177, v453);
        if (Date.timeIntervalSince(_:)(v192) > 5356800.0)
        {
          v389 = v64;
          v193 = (v439 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger);
          v194 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
          v195 = v410;
          v196 = v453;
          v194(v410, v119, v453);
          v197 = v411;
          v194(v411, (uint64_t)v192, v196);
          v198 = v433;
          v199 = swift_bridgeObjectRetain_n(v433, 2);
          v441 = v193;
          v200 = Logger.logObject.getter(v199);
          v201 = static os_log_type_t.default.getter();
          v202 = v201;
          if (os_log_type_enabled(v200, v201))
          {
            v203 = swift_slowAlloc(22, -1);
            v431 = (char *)swift_slowAlloc(64, -1);
            v469._countAndFlagsBits = (uint64_t)v431;
            *(_DWORD *)v203 = 136315394;
            *(_QWORD *)&v462 = 39;
            *((_QWORD *)&v462 + 1) = 0xE100000000000000;
            swift_bridgeObjectRetain(v198);
            LODWORD(v430) = v202;
            v204._countAndFlagsBits = v442;
            v204._object = v198;
            String.append(_:)(v204);
            v205._countAndFlagsBits = 39;
            v205._object = (void *)0xE100000000000000;
            String.append(_:)(v205);
            swift_bridgeObjectRelease(v198);
            v206 = *((_QWORD *)&v462 + 1);
            *(_QWORD *)&v462 = sub_100013CC8(v462, *((unint64_t *)&v462 + 1), &v469._countAndFlagsBits);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v462, (char *)&v462 + 8);
            swift_bridgeObjectRelease_n(v198, 2);
            swift_bridgeObjectRelease(v206);
            *(_WORD *)(v203 + 12) = 2080;
            v444 = (__CFString *)(v203 + 14);
            Date.timeIntervalSince(_:)(v197);
            v427 = (CFStringRef)static Duration.seconds(_:)(v207);
            *(_QWORD *)&v426 = v208;
            v209 = sub_100012C44(&qword_1004088C0);
            v210 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
            v211 = *(_QWORD *)(v210 - 8);
            v212 = *(_QWORD *)(v211 + 72);
            v213 = *(unsigned __int8 *)(v211 + 80);
            v214 = (v213 + 32) & ~v213;
            v215 = swift_allocObject(v209, v214 + 2 * v212, v213 | 7);
            *(_OWORD *)(v215 + 16) = xmmword_10033C020;
            v216 = v453;
            v217 = static Duration.UnitsFormatStyle.Unit.days.getter();
            static Duration.UnitsFormatStyle.Unit.hours.getter(v217);
            v218 = sub_100016974(v215);
            swift_setDeallocating(v215);
            swift_arrayDestroy(v215 + v214, 2, v210);
            v219 = swift_deallocClassInstance(v215, 32, 7);
            v220 = v195;
            v221 = v398;
            v222 = static Duration.UnitsFormatStyle.UnitWidth.wide.getter(v219);
            v223 = v402;
            v224 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v222);
            v225 = v407;
            static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v224);
            v226 = v400;
            static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)(v218, v221, 1, 0, v223, 0, 1, v225);
            v227 = swift_bridgeObjectRelease(v218);
            (*(void (**)(char *, uint64_t, __n128))(v408 + 8))(v225, v409, v227);
            (*(void (**)(char *, uint64_t))(v404 + 8))(v223, v406);
            (*(void (**)(char *, uint64_t))(v399 + 8))(v221, v401);
            v228 = sub_100011DE4(&qword_1004088C8, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
            v229 = v405;
            Duration.formatted<A>(_:)(&v462, v226, v427, v426, v405, v228);
            (*(void (**)(char *, uint64_t))(v403 + 8))(v226, v229);
            v230 = *((_QWORD *)&v462 + 1);
            *(_QWORD *)&v462 = sub_100013CC8(v462, *((unint64_t *)&v462 + 1), &v469._countAndFlagsBits);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v462, (char *)&v462 + 8);
            v231 = swift_bridgeObjectRelease(v230);
            v232 = *(__CFString **)(v458 + 8);
            ((void (*)(char *, uint64_t, __n128))v232)(v220, v216, v231);
            v444 = v232;
            ((void (*)(char *, uint64_t))v232)(v411, v216);
            _os_log_impl((void *)&_mh_execute_header, v200, (os_log_type_t)v430, "Last modified public identity for %s  %s ago in the keychain updating last modified timestamp", (uint8_t *)v203, 0x16u);
            v233 = v431;
            swift_arrayDestroy(v431, 2, &type metadata for Any[8]);
            swift_slowDealloc(v233, -1, -1);
            swift_slowDealloc(v203, -1, -1);

          }
          else
          {
            swift_bridgeObjectRelease_n(v198, 2);

            v341 = *(__CFString **)(v69 + 8);
            v342 = v453;
            ((void (*)(char *, uint64_t))v341)(v195, v453);
            v444 = v341;
            ((void (*)(char *, uint64_t))v341)(v197, v342);
          }
          v343 = v420;
          v344 = LongTermPairingKeys.PublicIdentity.rawRepresentation.getter();
          v346 = v345;
          v347 = *(_QWORD *)(v439 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
          v348 = *(_QWORD *)(v439 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
          v349 = *(_QWORD *)(v439 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
          v350 = *(_QWORD *)(v439 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
          v351 = UUID.uuidString.getter(v344);
          v353 = v352;
          v354 = v350;
          v355 = v433;
          v356 = sub_100139E78(v344, v346, v347, v348, v349, v354, v442, (uint64_t)v433, v351, v352, 1);
          sub_10000E614(v344, v346);
          swift_bridgeObjectRelease(v353);
          v357 = swift_initStackObject(v437, &v465);
          *(_OWORD *)(v357 + 16) = xmmword_10033A110;
          *(_QWORD *)(v357 + 64) = v397;
          v358 = (__CFString *)v436;
          v359 = v428;
          *(_QWORD *)(v357 + 32) = v436;
          *(_QWORD *)(v357 + 40) = v359;
          swift_bridgeObjectRetain(v356);
          v360 = v358;
          v361 = v359;
          v362 = sub_10001EC98(v357);
          v363 = v389;
          v364 = sub_100139DFC(v362, v356);
          v389 = v363;
          v365 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v364);
          v366 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v356);
          v367 = SecItemUpdate(v365, v366);

          if (v367)
          {
            v368 = swift_bridgeObjectRetain_n(v355, 2);
            v369 = Logger.logObject.getter(v368);
            v370 = static os_log_type_t.error.getter(v369);
            if (os_log_type_enabled(v369, (os_log_type_t)v370))
            {
              LODWORD(v431) = v370;
              v441 = v369;
              v65 = (__CFString *)swift_slowAlloc(22, -1);
              v430 = (_QWORD *)swift_slowAlloc(64, -1);
              v469._countAndFlagsBits = (uint64_t)v430;
              LODWORD(v65->isa) = 136315394;
              *(_QWORD *)&v462 = 39;
              *((_QWORD *)&v462 + 1) = 0xE100000000000000;
              swift_bridgeObjectRetain(v355);
              v371._countAndFlagsBits = v442;
              v371._object = v355;
              String.append(_:)(v371);
              v372._countAndFlagsBits = 39;
              v372._object = (void *)0xE100000000000000;
              String.append(_:)(v372);
              swift_bridgeObjectRelease(v355);
              v373 = *((_QWORD *)&v462 + 1);
              *(_QWORD *)&v462 = sub_100013CC8(v462, *((unint64_t *)&v462 + 1), &v469._countAndFlagsBits);
              v58 = (char *)&v462 + 8;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v462, (char *)&v462 + 8);
              swift_bridgeObjectRelease_n(v355, 2);
              swift_bridgeObjectRelease(v373);
              WORD2(v65->info) = 2080;
              v374 = SecCopyErrorMessageString(v367, 0);
              v64 = v389;
              if (v374)
              {
                v375 = (__CFString *)v374;
                v376 = static String._unconditionallyBridgeFromObjectiveC(_:)(v374);
                v378 = v377;

                v120 = v451;
                v121 = v450;
                v191 = (uint64_t)v424;
              }
              else
              {
LABEL_167:
                v378 = 0xE700000000000000;
                v120 = v451;
                v121 = v450;
                v191 = (uint64_t)v424;
                v376 = 0x6E776F6E6B6E75;
              }
              *(_QWORD *)&v462 = sub_100013CC8(v376, v378, &v469._countAndFlagsBits);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v462, v58);
              swift_bridgeObjectRelease(v378);
              v380 = v441;
              _os_log_impl((void *)&_mh_execute_header, v441, (os_log_type_t)v431, "Failed to update the last modified timestamp of the public identity to the keychain for %s with error: %s", (uint8_t *)v65, 0x16u);
              v381 = v430;
              swift_arrayDestroy(v430, 2, &type metadata for Any[8]);
              swift_slowDealloc(v381, -1, -1);
              swift_slowDealloc(v65, -1, -1);

              ((void (*)(char *, uint64_t))v444)(v416, v453);
              sub_100063824(v420, type metadata accessor for LongTermPairingKeys.PublicIdentity);
              v69 = v458;
              v180 = v460;
              v190 = (uint64_t)v423;
              goto LABEL_87;
            }
            swift_bridgeObjectRelease_n(v355, 2);

            ((void (*)(char *, uint64_t))v444)(v416, v453);
            v379 = v420;
          }
          else
          {
            ((void (*)(char *, uint64_t))v444)(v416, v453);
            v379 = v343;
          }
          sub_100063824(v379, type metadata accessor for LongTermPairingKeys.PublicIdentity);
          v69 = v458;
          v180 = v460;
          v120 = v451;
          v121 = v450;
          v64 = v389;
          goto LABEL_81;
        }
        (*(void (**)(char *, uint64_t))(v69 + 8))(v192, v453);
        sub_100063824(v175, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      }
      v180 = v460;
      v190 = (uint64_t)v423;
      v191 = (uint64_t)v150;
      goto LABEL_87;
    }
    sub_100033A84((uint64_t)v144, &qword_1004088A0);
LABEL_88:
    if (*(_QWORD *)(v461[0] + 16) < 0x65uLL)
      goto LABEL_148;
    v389 = v64;
    *(_QWORD *)&v462 = _swiftEmptyArrayStorage;
    v235 = *(_QWORD *)(v461[0] + 64);
    v424 = (char *)(v461[0] + 64);
    v236 = 1 << *(_BYTE *)(v461[0] + 32);
    v237 = -1;
    if (v236 < 64)
      v237 = ~(-1 << v236);
    countAndFlagsBits = v237 & v235;
    v430 = (_QWORD *)(v439 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
    v238 = (unint64_t)(v236 + 63) >> 6;
    v429 = kSecAttrAccount;
    v427 = kSecAttrAccessGroup;
    v420 = v238 - 1;
    v239 = (char *)swift_bridgeObjectRetain(v461[0]);
    v64 = 0;
    v431 = (char *)v238;
    v423 = (char *)(v238 - 5);
    v441 = v239;
    v421 = v239 + 104;
    v67 = type metadata accessor for LongTermPairingKeys.PublicIdentity;
    v426 = xmmword_10033F050;
    v425 = &type metadata for Any[8];
    v65 = (__CFString *)&qword_100408840;
    if (countAndFlagsBits)
    {
LABEL_92:
      v240 = __clz(__rbit64(countAndFlagsBits));
      v241 = (__CFString *)((countAndFlagsBits - 1) & countAndFlagsBits);
      v242 = v240 | (v64 << 6);
LABEL_93:
      v243 = v441;
      (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v121, (char *)v441[6].isa + *(_QWORD *)(v120 + 72) * v242, v460);
      v244 = (uint64_t)v243[7].isa + *(_QWORD *)(v452 + 72) * v242;
      v245 = sub_100012C44(&qword_1004088B8);
      sub_1000637E0(v244, (uint64_t)&v121[*(int *)(v245 + 48)], v67);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v245 - 8) + 56))(v121, 0, 1, v245);
      v69 = v458;
      goto LABEL_103;
    }
LABEL_94:
    v246 = v64 + 1;
    if (__OFADD__(v64, 1))
    {
      __break(1u);
LABEL_170:
      swift_bridgeObjectRelease(countAndFlagsBits);
      v120 = v451;
      v121 = v450;
LABEL_56:
      v389 = v64;
      v122 = swift_allocObject(v437, 192, 7);
      *(_OWORD *)(v122 + 16) = xmmword_10033F040;
      v123 = *(_QWORD *)(v439 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
      v124 = *(_QWORD *)(v439 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
      *(_QWORD *)(v122 + 32) = kSecAttrAccessGroup;
      *(_QWORD *)(v122 + 40) = v123;
      *(_QWORD *)(v122 + 48) = v124;
      *(_QWORD *)(v122 + 64) = v67;
      *(_QWORD *)(v122 + 72) = v65;
      strcpy((char *)(v122 + 80), "public_local");
      *(_BYTE *)(v122 + 93) = 0;
      *(_WORD *)(v122 + 94) = -5120;
      *(_QWORD *)(v122 + 104) = v67;
      v125 = v67;
      v126 = (__CFString *)v395;
      v127 = v442;
      *(_QWORD *)(v122 + 112) = v395;
      *(_QWORD *)(v122 + 120) = v127;
      v128 = v433;
      *(_QWORD *)(v122 + 128) = v433;
      v129 = (__CFString *)v436;
      *(_QWORD *)(v122 + 144) = v125;
      *(_QWORD *)(v122 + 152) = v129;
      *(_QWORD *)(v122 + 184) = v397;
      v130 = v428;
      *(_QWORD *)(v122 + 160) = v428;
      swift_bridgeObjectRetain(v128);
      v131 = (id)kSecAttrAccessGroup;
      swift_bridgeObjectRetain(v124);
      v132 = v65;
      v133 = v126;
      v134 = v129;
      v135 = v130;
      v136 = sub_10001EC98(v122);
      v137.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v136);
      v138 = SecItemDelete(v137.super.isa);
      if (v138)
      {
        v139 = SecCopyErrorMessageString(v138, 0);
        if (v139)
        {
          v140 = (__CFString *)v139;
          v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
          v143 = v142;

        }
        else
        {
          v143 = 0xE700000000000000;
          v141 = 0x6E776F6E6B6E75;
        }
        v64 = v389;
        v119 = v446;
        sub_10013DC6C(v141, v143);

        swift_bridgeObjectRelease(v143);
        v69 = v458;
      }
      else
      {

        v69 = v458;
        v64 = v389;
        v119 = v446;
      }
      v118 = v432;
      continue;
    }
    break;
  }
  if (v246 < (uint64_t)v431)
  {
    v247 = *(_QWORD *)&v424[8 * v246];
    if (v247)
      goto LABEL_97;
    if (v64 + 2 >= (uint64_t)v431)
    {
      ++v64;
    }
    else
    {
      v247 = *(_QWORD *)&v424[8 * v64 + 16];
      if (v247)
      {
        v246 = v64 + 2;
LABEL_97:
        v241 = (__CFString *)((v247 - 1) & v247);
        v242 = __clz(__rbit64(v247)) + (v246 << 6);
        v64 = v246;
        goto LABEL_93;
      }
      if (v64 + 3 >= (uint64_t)v431)
      {
        v64 += 2;
      }
      else
      {
        v247 = *(_QWORD *)&v424[8 * v64 + 24];
        if (v247)
        {
          v246 = v64 + 3;
          goto LABEL_97;
        }
        v246 = v64 + 4;
        if (v64 + 4 >= (uint64_t)v431)
        {
          v64 += 3;
        }
        else
        {
          v247 = *(_QWORD *)&v424[8 * v246];
          if (v247)
            goto LABEL_97;
          while (v423 != (char *)v64)
          {
            v247 = *(_QWORD *)&v421[8 * v64++];
            if (v247)
            {
              v246 = v64 + 4;
              goto LABEL_97;
            }
          }
          v64 = v420;
        }
      }
    }
  }
  v248 = sub_100012C44(&qword_1004088B8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v248 - 8) + 56))(v121, 1, 1, v248);
  v241 = 0;
LABEL_103:
  v249 = (uint64_t)v121;
  v250 = v449;
  sub_100063EB8(v249, v449, &qword_100408898);
  v251 = sub_100012C44(&qword_1004088B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v251 - 8) + 48))(v250, 1, v251) != 1)
  {
    v454 = v241;
    v455 = v64;
    v252 = v250 + *(int *)(v251 + 48);
    v253 = v459;
    v254 = v250;
    v255 = v460;
    v444 = *(__CFString **)(v120 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v444)(v459, v254, v460);
    v256 = v69;
    v257 = v67;
    v258 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v457;
    sub_100033AC0(v252, (uint64_t)v457, v257);
    v259 = v448;
    sub_100033B48((uint64_t)v258 + *(int *)(v456 + 28), v448, (uint64_t *)v65);
    v260 = (uint64_t *)v65;
    v261 = v453;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v256 + 48))(v259, 1, v453) == 1)
    {
      sub_100063824((uint64_t)v258, v257);
      (*(void (**)(char *, uint64_t))(v120 + 8))(v253, v255);
      sub_100033A84(v259, v260);
      v121 = v450;
      v67 = v257;
      v69 = v256;
      goto LABEL_111;
    }
    v262 = v447;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 32))(v447, v259, v261);
    if (Date.timeIntervalSince(_:)(v262) <= 16070400.0)
    {
      v69 = v256;
      v67 = type metadata accessor for LongTermPairingKeys.PublicIdentity;
      sub_100063824((uint64_t)v457, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      v120 = v451;
      (*(void (**)(char *, uint64_t))(v451 + 8))(v459, v460);
      (*(void (**)(uint64_t, uint64_t))(v256 + 8))(v262, v261);
      v121 = v450;
LABEL_111:
      v65 = (__CFString *)v260;
      v64 = v455;
      countAndFlagsBits = (unint64_t)v454;
    }
    else
    {
      v263 = swift_allocObject(v437, 232, 7);
      *(_OWORD *)(v263 + 16) = v426;
      v264 = (__CFString *)v436;
      v265 = v428;
      v266 = (__CFString *)v429;
      *(_QWORD *)(v263 + 32) = v436;
      *(_QWORD *)(v263 + 40) = v265;
      v268 = (__CFString *)v394;
      v267 = (__CFString *)v395;
      *(_QWORD *)(v263 + 64) = v397;
      *(_QWORD *)(v263 + 72) = v268;
      *(_BYTE *)(v263 + 80) = 1;
      *(_QWORD *)(v263 + 104) = &type metadata for Bool;
      *(_QWORD *)(v263 + 112) = v267;
      *(_QWORD *)(v263 + 120) = v442;
      v269 = v433;
      *(_QWORD *)(v263 + 128) = v433;
      *(_QWORD *)(v263 + 144) = &type metadata for String;
      *(_QWORD *)(v263 + 152) = v266;
      swift_bridgeObjectRetain(v269);
      v270 = v264;
      v271 = v265;
      v272 = v268;
      v273 = v267;
      v274 = v266;
      v275 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v457;
      *(_QWORD *)(v263 + 160) = UUID.uuidString.getter(v274);
      *(_QWORD *)(v263 + 168) = v276;
      v277 = (__CFString *)v427;
      *(_QWORD *)(v263 + 184) = &type metadata for String;
      *(_QWORD *)(v263 + 192) = v277;
      v278 = *v430;
      v279 = v430[1];
      *(_QWORD *)(v263 + 224) = &type metadata for String;
      *(_QWORD *)(v263 + 200) = v278;
      *(_QWORD *)(v263 + 208) = v279;
      v280 = v277;
      swift_bridgeObjectRetain(v279);
      v281 = sub_10001EC98(v263);
      v282.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v281);
      v283 = SecItemDelete(v282.super.isa);
      if (v283)
      {
        v284 = SecCopyErrorMessageString(v283, 0);
        if (v284)
        {
          v285 = (__CFString *)v284;
          v286 = static String._unconditionallyBridgeFromObjectiveC(_:)(v284);
          v288 = v287;

        }
        else
        {
          v288 = 0xE700000000000000;
          v286 = 0x6E776F6E6B6E75;
        }
        countAndFlagsBits = (unint64_t)v454;
        sub_10013DDF0(v286, v288, v439, v446, v447, v442, v433);

        swift_bridgeObjectRelease(v288);
        v121 = v450;
        v289 = v438;
        v290 = v459;
        v65 = (__CFString *)v260;
      }
      else
      {

        v121 = v450;
        v289 = v438;
        v290 = v459;
        v65 = (__CFString *)v260;
        countAndFlagsBits = (unint64_t)v454;
      }
      (*(void (**)(char *, char *, uint64_t))(v451 + 16))(v289, v290, v460);
      v291 = v462;
      v292 = swift_isUniquelyReferenced_nonNull_native(v462);
      v64 = v455;
      if ((v292 & 1) == 0)
        v291 = sub_1000B22D4(0, *(_QWORD *)(v291 + 16) + 1, 1, v291);
      v294 = *(_QWORD *)(v291 + 16);
      v293 = *(_QWORD *)(v291 + 24);
      if (v294 >= v293 >> 1)
        v291 = sub_1000B22D4(v293 > 1, v294 + 1, 1, v291);
      *(_QWORD *)(v291 + 16) = v294 + 1;
      v120 = v451;
      v295 = v291
           + ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))
           + *(_QWORD *)(v451 + 72) * v294;
      v296 = v460;
      ((void (*)(unint64_t, char *, uint64_t))v444)(v295, v438, v460);
      *(_QWORD *)&v462 = v291;
      v67 = type metadata accessor for LongTermPairingKeys.PublicIdentity;
      sub_100063824((uint64_t)v275, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      (*(void (**)(char *, uint64_t))(v120 + 8))(v459, v296);
      v69 = v458;
      (*(void (**)(uint64_t, uint64_t))(v458 + 8))(v447, v453);
    }
    if (countAndFlagsBits)
      goto LABEL_92;
    goto LABEL_94;
  }
  swift_release(v441);
  v297 = v462;
  v298 = swift_bridgeObjectRetain(v462);
  v299 = Logger.logObject.getter(v298);
  v300 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v299, v300))
  {
    v301 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v301 = 134217984;
    v469._countAndFlagsBits = *(_QWORD *)(v297 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v469, &v469._object);
    swift_bridgeObjectRelease(v297);
    _os_log_impl((void *)&_mh_execute_header, v299, v300, "Removed %ld stale identities that were not modified recently", v301, 0xCu);
    swift_slowDealloc(v301, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v297);
  }
  v302 = v460;

  swift_beginAccess(&v462, &v466, 0, 0);
  v303 = *(_QWORD *)(v462 + 16);
  v455 = v462;
  if (v303)
  {
    v304 = v462 + ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80));
    v305 = *(_QWORD *)(v120 + 72);
    v459 = *(char **)(v120 + 16);
    swift_bridgeObjectRetain(v462);
    v306 = v435;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v459)(v306, v304, v302);
      v311 = *(_QWORD **)(v120 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v311)(v306, 0, 1, v302);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v120 + 48))(v306, 1, v302) == 1)
        break;
      v312 = (uint64_t)v443;
      (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v443, v306, v302);
      v313 = v461[0];
      swift_bridgeObjectRetain(v461[0]);
      v314 = sub_10002DCA0(v312);
      v316 = v315;
      swift_bridgeObjectRelease(v313);
      v457 = v311;
      if ((v316 & 1) != 0)
      {
        v317 = swift_isUniquelyReferenced_nonNull_native(v313);
        v469._countAndFlagsBits = v313;
        v461[0] = 0x8000000000000000;
        if (!v317)
        {
          sub_100147BD4();
          v313 = v469._countAndFlagsBits;
        }
        v120 = v451;
        v302 = v460;
        (*(void (**)(unint64_t, uint64_t))(v451 + 8))(*(_QWORD *)(v313 + 48) + v314 * v305, v460);
        v318 = v469._countAndFlagsBits;
        v310 = v452;
        v308 = v305;
        v309 = v434;
        sub_100033AC0(*(_QWORD *)(v469._countAndFlagsBits + 56) + *(_QWORD *)(v452 + 72) * v314, v434, type metadata accessor for LongTermPairingKeys.PublicIdentity);
        sub_100145B7C(v314, v318);
        v319 = v461[0];
        v461[0] = v318;
        swift_bridgeObjectRelease(v319);
        v307 = 0;
      }
      else
      {
        v307 = 1;
        v302 = v460;
        v120 = v451;
        v308 = v305;
        v309 = v434;
        v310 = v452;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v310 + 56))(v309, v307, 1, v456);
      sub_100033A84(v309, &qword_100408868);
      (*(void (**)(char *, uint64_t))(v120 + 8))(v443, v302);
      v304 += v308;
      --v303;
      v306 = v435;
      v305 = v308;
      if (!v303)
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v457)(v435, 1, 1, v302);
        break;
      }
    }
  }
  else
  {
    v320 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v120 + 56);
    swift_bridgeObjectRetain(v462);
    v320(v435, 1, 1, v302);
  }
  swift_bridgeObjectRelease(v455);
  swift_bridgeObjectRelease(v462);
LABEL_148:
  v321 = v433;
  v322 = swift_bridgeObjectRetain_n(v433, 2);
  v323 = Logger.logObject.getter(v322);
  v324 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v323, v324))
  {
    v325 = swift_slowAlloc(32, -1);
    v460 = swift_slowAlloc(64, -1);
    v469._countAndFlagsBits = v460;
    *(_DWORD *)v325 = 134218498;
    swift_beginAccess(v461, &v468, 0, 0);
    *(_QWORD *)&v462 = *(_QWORD *)(v461[0] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v462, (char *)&v462 + 8);
    *(_WORD *)(v325 + 12) = 2080;
    v326 = v432;
    swift_beginAccess(v432, &v467, 0, 0);
    v327 = v422;
    sub_100033B48(v326, v422, &qword_1004088A0);
    v328 = v419((char *)v327, 1, v445);
    sub_100033A84(v327, &qword_1004088A0);
    if (v328 == 1)
      v329 = 0x74756F68746977;
    else
      v329 = 1752459639;
    if (v328 == 1)
      v330 = 0xE700000000000000;
    else
      v330 = 0xE400000000000000;
    *(_QWORD *)&v462 = sub_100013CC8(v329, v330, &v469._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v462, (char *)&v462 + 8);
    swift_bridgeObjectRelease(v330);
    *(_WORD *)(v325 + 22) = 2080;
    *(_QWORD *)&v462 = 39;
    *((_QWORD *)&v462 + 1) = 0xE100000000000000;
    swift_bridgeObjectRetain(v321);
    v331._countAndFlagsBits = v442;
    v331._object = v321;
    String.append(_:)(v331);
    v332._countAndFlagsBits = 39;
    v332._object = (void *)0xE100000000000000;
    String.append(_:)(v332);
    swift_bridgeObjectRelease(v321);
    v333 = *((_QWORD *)&v462 + 1);
    *(_QWORD *)&v462 = sub_100013CC8(v462, *((unint64_t *)&v462 + 1), &v469._countAndFlagsBits);
    v334 = v453;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v462, (char *)&v462 + 8);
    swift_bridgeObjectRelease_n(v321, 2);
    swift_bridgeObjectRelease(v333);
    _os_log_impl((void *)&_mh_execute_header, v323, v324, "Found %ld paired identities %s private identity in the keychain for %s", (uint8_t *)v325, 0x20u);
    v335 = v460;
    swift_arrayDestroy(v460, 2, &type metadata for Any[8]);
    swift_slowDealloc(v335, -1, -1);
    swift_slowDealloc(v325, -1, -1);

    v336 = v440;
  }
  else
  {
    swift_bridgeObjectRelease_n(v321, 2);

    v336 = v440;
    v334 = v453;
    v326 = v432;
  }
  v337 = isa;
  swift_beginAccess(v326, &v462, 0, 0);
  sub_100033B48(v326, v336, &qword_1004088A0);
  swift_beginAccess(v461, &v469, 0, 0);
  v338 = v461[0];
  v339 = swift_bridgeObjectRetain(v461[0]);
  v116 = sub_10008C6AC(v339);

  v340 = swift_bridgeObjectRelease(v338);
  (*(void (**)(uint64_t, uint64_t, __n128))(v458 + 8))(v446, v334, v340);
  swift_bridgeObjectRelease(v461[0]);
  sub_100033A84(v326, &qword_1004088A0);
  swift_unknownObjectRelease(v470);
  return v116;
}

void sub_10013DC6C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *oslog;
  uint64_t v9;
  uint64_t v10;

  v4 = swift_bridgeObjectRetain_n(a2, 2);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v10 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain(a2);
    v9 = sub_100013CC8(a1, a2, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Failed to remove public identites of paired devices stored locally with error: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

  }
}

void sub_10013DDF0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __n128 v51;
  void (*v52)(char *, uint64_t, __n128);
  void *v53;
  Swift::String v54;
  Swift::String v55;
  unint64_t v56;
  unint64_t v57;
  os_log_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  os_log_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85[2];

  v80 = a6;
  v81 = a1;
  v11 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v78 = *(_QWORD *)(v11 - 8);
  v79 = v11;
  __chkstk_darwin();
  v77 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0);
  v74 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin();
  v72 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0);
  v69 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin();
  v68 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v73 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin();
  v70 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin();
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v21 = (char *)&v61 - v20;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v22((char *)&v61 - v20, a4, v16);
  v22(v19, a5, v16);
  v82 = a7;
  swift_bridgeObjectRetain_n(a7, 2);
  v23 = swift_bridgeObjectRetain_n(a2, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter(v24);
  v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    v27 = swift_slowAlloc(32, -1);
    v67 = swift_slowAlloc(96, -1);
    v85[0] = v67;
    *(_DWORD *)v27 = 136315650;
    v63 = v27 + 4;
    v66 = v26;
    v28 = Date.timeIntervalSince(_:)(v19);
    v62 = static Duration.seconds(_:)(v28);
    v61 = v29;
    v30 = sub_100012C44(&qword_1004088C0);
    v65 = v24;
    v31 = v30;
    v32 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
    v33 = *(_QWORD *)(v32 - 8);
    v64 = a2;
    v34 = *(_QWORD *)(v33 + 72);
    v35 = *(unsigned __int8 *)(v33 + 80);
    v36 = (v35 + 32) & ~v35;
    v37 = swift_allocObject(v31, v36 + 2 * v34, v35 | 7);
    *(_OWORD *)(v37 + 16) = xmmword_10033C020;
    v38 = static Duration.UnitsFormatStyle.Unit.days.getter();
    static Duration.UnitsFormatStyle.Unit.hours.getter(v38);
    v39 = sub_100016974(v37);
    swift_setDeallocating(v37);
    swift_arrayDestroy(v37 + v36, 2, v32);
    v40 = swift_deallocClassInstance(v37, 32, 7);
    v41 = v68;
    v42 = static Duration.UnitsFormatStyle.UnitWidth.wide.getter(v40);
    v43 = v72;
    v44 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v42);
    v45 = v77;
    static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v44);
    v46 = v70;
    static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)(v39, v41, 1, 0, v43, 0, 1, v45);
    v47 = swift_bridgeObjectRelease(v39);
    (*(void (**)(char *, uint64_t, __n128))(v78 + 8))(v45, v79, v47);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v43, v76);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v41, v71);
    v48 = sub_100011DE4(&qword_1004088C8, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
    v49 = v75;
    Duration.formatted<A>(_:)(&v83, v46, v62, v61, v75, v48);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
    v50 = v84;
    v83 = sub_100013CC8(v83, v84, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
    v51 = swift_bridgeObjectRelease(v50);
    v52 = *(void (**)(char *, uint64_t, __n128))(v17 + 8);
    v52(v21, v16, v51);
    ((void (*)(char *, uint64_t))v52)(v19, v16);
    *(_WORD *)(v27 + 12) = 2080;
    v83 = 39;
    v84 = 0xE100000000000000;
    v53 = v82;
    swift_bridgeObjectRetain(v82);
    v54._countAndFlagsBits = v80;
    v54._object = v53;
    String.append(_:)(v54);
    v55._countAndFlagsBits = 39;
    v55._object = (void *)0xE100000000000000;
    String.append(_:)(v55);
    swift_bridgeObjectRelease(v53);
    v56 = v84;
    v83 = sub_100013CC8(v83, v84, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
    swift_bridgeObjectRelease_n(v53, 2);
    swift_bridgeObjectRelease(v56);
    *(_WORD *)(v27 + 22) = 2080;
    v57 = v64;
    swift_bridgeObjectRetain(v64);
    v83 = sub_100013CC8(v81, v57, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
    swift_bridgeObjectRelease_n(v57, 3);
    v58 = v65;
    _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v66, "Failed to delete a stale device identity last modified %s ago from the keychain for %s with error: %s", (uint8_t *)v27, 0x20u);
    v59 = v67;
    swift_arrayDestroy(v67, 3, &type metadata for Any[8]);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    v60 = *(void (**)(char *, uint64_t))(v17 + 8);
    v60(v21, v16);
    v60(v19, v16);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease_n(v82, 2);
  }
}

BOOL AppleKeychain.save(identity:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  __CFString *v21;
  __CFString *v22;
  unint64_t v23;
  uint64_t v24;
  const __CFDictionary *isa;
  OSStatus v26;
  uint64_t v27;
  __CFString *v28;
  __CFString *v29;
  unint64_t v30;
  uint64_t v31;
  const __CFDictionary *v32;
  const __CFDictionary *v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  unint64_t v42;
  CFStringRef v43;
  __CFString *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  void *v50;
  _BYTE v51[72];
  uint64_t v52;
  unint64_t v53;
  uint64_t v54[2];
  _BYTE v55[80];

  v6 = sub_100132B88((void (*)(_QWORD))type metadata accessor for LongTermPairingKeys.PrivateIdentity, (uint64_t (*)(void))&P256.Signing.PrivateKey.rawRepresentation.getter);
  v8 = v7;
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
  v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
  v13 = UUID.uuidString.getter(v6);
  v15 = v14;
  v49 = a2;
  v50 = (void *)a3;
  v16 = sub_100139E78(v6, v8, v9, v10, v11, v12, a2, a3, v13, v14, 0);
  sub_10000E614(v6, v8);
  swift_bridgeObjectRelease(v15);
  v17 = sub_100012C44(&qword_1004088A8);
  inited = swift_initStackObject(v17, v55);
  *(_OWORD *)(inited + 16) = xmmword_10033A110;
  *(_QWORD *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  v20 = v19;
  *(_QWORD *)(inited + 64) = v19;
  *(_QWORD *)(inited + 40) = kSecClassGenericPassword;
  swift_bridgeObjectRetain(v16);
  v21 = (id)kSecClass;
  v22 = (id)kSecClassGenericPassword;
  v23 = sub_10001EC98(inited);
  v24 = sub_100139DFC(v23, v16);
  sub_100011DE4(&qword_1004047D0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338E88);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  v26 = SecItemAdd(isa, 0);

  if (v26 == -25299)
  {
    v27 = swift_initStackObject(v17, v51);
    *(_OWORD *)(v27 + 16) = xmmword_10033A110;
    *(_QWORD *)(v27 + 64) = v20;
    *(_QWORD *)(v27 + 32) = v21;
    *(_QWORD *)(v27 + 40) = v22;
    swift_bridgeObjectRetain(v16);
    v28 = v21;
    v29 = v22;
    v30 = sub_10001EC98(v27);
    v31 = sub_100139DFC(v30, v16);
    v32 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v31);
    v33 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v16);
    v26 = SecItemUpdate(v32, v33);

    v34 = v50;
    if (!v26)
      return v26 == 0;
  }
  else
  {
    swift_bridgeObjectRelease(v16);
    v34 = v50;
    if (!v26)
      return v26 == 0;
  }
  v35 = swift_bridgeObjectRetain_n(v34, 2);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.error.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = swift_slowAlloc(22, -1);
    v39 = swift_slowAlloc(64, -1);
    *(_DWORD *)v38 = 136315394;
    v52 = 39;
    v53 = 0xE100000000000000;
    v54[0] = v39;
    swift_bridgeObjectRetain(v34);
    v40._countAndFlagsBits = v49;
    v40._object = v34;
    String.append(_:)(v40);
    v41._countAndFlagsBits = 39;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v34);
    v42 = v53;
    v52 = sub_100013CC8(v52, v53, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    swift_bridgeObjectRelease_n(v34, 2);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v38 + 12) = 2080;
    v43 = SecCopyErrorMessageString(v26, 0);
    if (v43)
    {
      v44 = (__CFString *)v43;
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v47 = v46;

    }
    else
    {
      v47 = 0xE700000000000000;
      v45 = 0x6E776F6E6B6E75;
    }
    v52 = sub_100013CC8(v45, v47, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to add the generated private identity to the keychain for %s with error: %s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v39, 2, &type metadata for Any[8]);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v34, 2);
  }

  return v26 == 0;
}

BOOL AppleKeychain.save(identity:for:publicly:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  __CFString *v24;
  unint64_t v25;
  uint64_t v26;
  const __CFDictionary *isa;
  OSStatus v28;
  uint64_t v29;
  __CFString *v30;
  __CFString *v31;
  unint64_t v32;
  uint64_t v33;
  const __CFDictionary *v34;
  const __CFDictionary *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  unint64_t v44;
  CFStringRef v45;
  __CFString *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v51;
  uint64_t v52;
  char v53;
  void *v54;
  _BYTE v55[72];
  uint64_t v56;
  unint64_t v57;
  uint64_t v58[2];
  _BYTE v59[80];

  if ((a4 & 1) != 0)
    v7 = 1;
  else
    v7 = 2;
  v53 = v7;
  v8 = LongTermPairingKeys.PublicIdentity.rawRepresentation.getter();
  v10 = v9;
  v11 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
  v12 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8);
  v13 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
  v14 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8);
  v15 = UUID.uuidString.getter();
  v17 = v16;
  v51 = v53;
  v52 = a2;
  v54 = (void *)a3;
  v18 = sub_100139E78(v8, v10, v11, v12, v13, v14, a2, a3, v15, v16, v51);
  sub_10000E614(v8, v10);
  swift_bridgeObjectRelease(v17);
  v19 = sub_100012C44(&qword_1004088A8);
  inited = swift_initStackObject(v19, v59);
  *(_OWORD *)(inited + 16) = xmmword_10033A110;
  *(_QWORD *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  v22 = v21;
  *(_QWORD *)(inited + 64) = v21;
  *(_QWORD *)(inited + 40) = kSecClassGenericPassword;
  swift_bridgeObjectRetain(v18);
  v23 = (id)kSecClass;
  v24 = (id)kSecClassGenericPassword;
  v25 = sub_10001EC98(inited);
  v26 = sub_100139DFC(v25, v18);
  sub_100011DE4(&qword_1004047D0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338E88);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v26);
  v28 = SecItemAdd(isa, 0);

  if (v28 == -25299)
  {
    v29 = swift_initStackObject(v19, v55);
    *(_OWORD *)(v29 + 16) = xmmword_10033A110;
    *(_QWORD *)(v29 + 64) = v22;
    *(_QWORD *)(v29 + 32) = v23;
    *(_QWORD *)(v29 + 40) = v24;
    swift_bridgeObjectRetain(v18);
    v30 = v23;
    v31 = v24;
    v32 = sub_10001EC98(v29);
    v33 = sub_100139DFC(v32, v18);
    v34 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v33);
    v35 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    v28 = SecItemUpdate(v34, v35);

    v36 = v54;
    if (!v28)
      return v28 == 0;
  }
  else
  {
    swift_bridgeObjectRelease(v18);
    v36 = v54;
    if (!v28)
      return v28 == 0;
  }
  v37 = swift_bridgeObjectRetain_n(v36, 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.error.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(22, -1);
    v41 = swift_slowAlloc(64, -1);
    *(_DWORD *)v40 = 136315394;
    v56 = 39;
    v57 = 0xE100000000000000;
    v58[0] = v41;
    swift_bridgeObjectRetain(v36);
    v42._countAndFlagsBits = v52;
    v42._object = v36;
    String.append(_:)(v42);
    v43._countAndFlagsBits = 39;
    v43._object = (void *)0xE100000000000000;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v36);
    v44 = v57;
    v56 = sub_100013CC8(v56, v57, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
    swift_bridgeObjectRelease_n(v36, 2);
    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v40 + 12) = 2080;
    v45 = SecCopyErrorMessageString(v28, 0);
    if (v45)
    {
      v46 = (__CFString *)v45;
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v49 = v48;

    }
    else
    {
      v49 = 0xE700000000000000;
      v47 = 0x6E776F6E6B6E75;
    }
    v56 = sub_100013CC8(v47, v49, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
    swift_bridgeObjectRelease(v49);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to add the generated public identity to the keychain for %s with error: %s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v41, 2, &type metadata for Any[8]);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v36, 2);
  }

  return v28 == 0;
}

Swift::Void __swiftcall AppleKeychain.removeAllIdentities(for:)(CoreP2P::NANServiceName a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  unint64_t v11;
  NSDictionary v12;
  OSStatus v13;
  CFStringRef v14;
  __CFString *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE v20[160];

  object = a1.string._object;
  countAndFlagsBits = a1.string._countAndFlagsBits;
  v3 = sub_100012C44(&qword_1004088A8);
  inited = swift_initStackObject(v3, v20);
  *(_OWORD *)(inited + 16) = xmmword_10033A120;
  *(_QWORD *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 40) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 64) = v5;
  *(_QWORD *)(inited + 72) = kSecAttrSynchronizable;
  *(_QWORD *)(inited + 80) = kSecAttrSynchronizableAny;
  *(_QWORD *)(inited + 104) = v5;
  *(_QWORD *)(inited + 112) = kSecAttrService;
  *(_QWORD *)(inited + 144) = &type metadata for String;
  *(_QWORD *)(inited + 120) = countAndFlagsBits;
  *(_QWORD *)(inited + 128) = object;
  v6 = (id)kSecClass;
  v7 = (id)kSecClassGenericPassword;
  v8 = (id)kSecAttrSynchronizable;
  v9 = (id)kSecAttrSynchronizableAny;
  v10 = (id)kSecAttrService;
  swift_bridgeObjectRetain(object);
  v11 = sub_10001EC98(inited);
  sub_100011DE4(&qword_1004047D0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338E88);
  v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11);
  v13 = SecItemDelete(v12.super.isa);
  if (v13)
  {
    v14 = SecCopyErrorMessageString(v13, 0);
    if (v14)
    {
      v15 = (__CFString *)v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

    }
    else
    {
      v18 = 0xE700000000000000;
      v16 = 0x6E776F6E6B6E75;
    }
    sub_10013EE80(v16, v18, v19, countAndFlagsBits, object, "Failed to delete all device identities from the keychain for %s with error: %s");

    swift_bridgeObjectRelease(v18);
  }
  else
  {

  }
}

void sub_10013EE80(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, const char *a6)
{
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  NSObject *oslog;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRetain_n(a5, 2);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  oslog = Logger.logObject.getter(v11);
  v12 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    *(_DWORD *)v13 = 136315394;
    v19 = 0xE100000000000000;
    v20 = v14;
    swift_bridgeObjectRetain(a5);
    v15._countAndFlagsBits = a4;
    v15._object = a5;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 39;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(a5);
    v18 = sub_100013CC8(39, 0xE100000000000000, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease(0xE100000000000000);
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v18 = sub_100013CC8(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, oslog, v12, a6, (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, &type metadata for Any[8]);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease_n(a5, 2);

  }
}

double AppleKeychain.remove(identity:for:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  NSDictionary v16;
  OSStatus v17;
  CFStringRef v18;
  __CFString *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double result;
  uint64_t v24;
  _BYTE v26[200];

  v5 = sub_100012C44(&qword_1004088A8);
  inited = swift_initStackObject(v5, v26);
  *(_OWORD *)(inited + 16) = xmmword_10033F040;
  *(_QWORD *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 40) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 64) = v7;
  *(_QWORD *)(inited + 72) = kSecAttrSynchronizable;
  *(_QWORD *)(inited + 80) = kSecAttrSynchronizableAny;
  *(_QWORD *)(inited + 104) = v7;
  *(_QWORD *)(inited + 112) = kSecAttrService;
  *(_QWORD *)(inited + 120) = a2;
  *(_QWORD *)(inited + 128) = a3;
  *(_QWORD *)(inited + 144) = &type metadata for String;
  *(_QWORD *)(inited + 152) = kSecAttrAccount;
  v8 = (id)kSecClass;
  v9 = (id)kSecClassGenericPassword;
  v10 = (id)kSecAttrSynchronizable;
  v11 = (id)kSecAttrSynchronizableAny;
  v12 = (id)kSecAttrService;
  swift_bridgeObjectRetain(a3);
  v13 = UUID.uuidString.getter((id)kSecAttrAccount);
  *(_QWORD *)(inited + 184) = &type metadata for String;
  *(_QWORD *)(inited + 160) = v13;
  *(_QWORD *)(inited + 168) = v14;
  v15 = sub_10001EC98(inited);
  sub_100011DE4(&qword_1004047D0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338E88);
  v16.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  v17 = SecItemDelete(v16.super.isa);
  if (v17)
  {
    v18 = SecCopyErrorMessageString(v17, 0);
    if (v18)
    {
      v19 = (__CFString *)v18;
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v22 = v21;

    }
    else
    {
      v22 = 0xE700000000000000;
      v20 = 0x6E776F6E6B6E75;
    }
    sub_10013F298(v20, v22, v24, a1, a2, a3);

    *(_QWORD *)&result = swift_bridgeObjectRelease(v22).n128_u64[0];
  }
  else
  {

  }
  return result;
}

void sub_10013F298(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  __chkstk_darwin();
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(a4, (uint64_t)v12, v13);
  swift_bridgeObjectRetain_n(a6, 2);
  v14 = swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(32, -1);
    v18 = swift_slowAlloc(96, -1);
    v29 = a5;
    v19 = v18;
    v33 = v18;
    *(_DWORD *)v17 = 136315650;
    v30 = a1;
    v20 = type metadata accessor for UUID(0);
    v21 = sub_100011DE4((unint64_t *)&qword_10040D340, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
    v24 = v23;
    v31 = sub_100013CC8(v22, v23, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(v24);
    sub_100063824((uint64_t)v12, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    *(_WORD *)(v17 + 12) = 2080;
    v31 = 39;
    v32 = 0xE100000000000000;
    swift_bridgeObjectRetain(a6);
    v25._countAndFlagsBits = v29;
    v25._object = a6;
    String.append(_:)(v25);
    v26._countAndFlagsBits = 39;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(a6);
    v27 = v32;
    v31 = sub_100013CC8(v31, v32, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease_n(a6, 2);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v17 + 22) = 2080;
    swift_bridgeObjectRetain(a2);
    v31 = sub_100013CC8(v30, a2, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to delete the device identity %s from the keychain for %s with error: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v19, 3, &type metadata for Any[8]);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    sub_100063824((uint64_t)v12, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease_n(a6, 2);
  }
}

uint64_t AppleKeychain.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8));
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors));
  return v0;
}

uint64_t AppleKeychain.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView + 8));
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10013F6C8(uint64_t a1, uint64_t a2)
{
  return AppleKeychain.monitor(using:)(a1, a2);
}

uint64_t sub_10013F6E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v3 = *v1;
  swift_beginAccess(*v1 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors, v8, 33, 0);
  v4 = sub_100030138(a1);
  v6 = v5;
  swift_endAccess(v8);
  sub_10013A21C();
  if (v4)
    sub_100012318(v4, v6);
  swift_beginAccess(v3 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens, v8, 33, 0);
  sub_100149B68(a1);
  return swift_endAccess(v8);
}

_QWORD *sub_10013F7A0(uint64_t a1, uint64_t a2, void *a3)
{
  return AppleKeychain.findIdentities(for:)(a1, a2, a3);
}

BOOL sub_10013F7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AppleKeychain.save(identity:for:)(a1, a2, a3);
}

BOOL sub_10013F7E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return AppleKeychain.save(identity:for:publicly:)(a1, a2, a3, a4);
}

void sub_10013F808(uint64_t a1, uint64_t a2)
{
  AppleKeychain.removeAllIdentities(for:)(*(CoreP2P::NANServiceName *)&a1);
}

double sub_10013F828(uint64_t a1, uint64_t a2, void *a3)
{
  return AppleKeychain.remove(identity:for:)(a1, a2, a3);
}

uint64_t sub_10013F848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  _BYTE v14[24];

  swift_beginAccess(v0 + 40, v14, 0, 0);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 40), 2);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v6)
      goto LABEL_25;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_25;
      v12 = *(_QWORD *)(v2 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_25;
        v12 = *(_QWORD *)(v2 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_25;
          v12 = *(_QWORD *)(v2 + 8 * v8);
          if (!v12)
          {
            v8 = v11 + 4;
            if (v11 + 4 >= v6)
              goto LABEL_25;
            v12 = *(_QWORD *)(v2 + 8 * v8);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_24:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_5:
    result = (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 56) + 16 * v10))();
  }
  v13 = v11 + 5;
  if (v13 >= v6)
  {
LABEL_25:
    swift_release(v1);
    return swift_bridgeObjectRelease(v1);
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_25;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t (*sub_10013F9D0(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + 16, a1, 33, 0);
  return sub_10013FA10;
}

uint64_t sub_10013FA10(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return sub_10013F848();
  return result;
}

_QWORD *InMemoryKeychain.__allocating_init()()
{
  uint64_t v0;
  _QWORD *result;

  result = (_QWORD *)swift_allocObject(v0, 48, 7);
  result[2] = &_swiftEmptyDictionarySingleton;
  result[3] = &_swiftEmptySetSingleton;
  result[4] = 0;
  result[5] = &_swiftEmptyDictionarySingleton;
  return result;
}

_QWORD *InMemoryKeychain.init()()
{
  _QWORD *v0;
  _QWORD *result;

  result = v0;
  v0[2] = &_swiftEmptyDictionarySingleton;
  v0[3] = &_swiftEmptySetSingleton;
  v0[4] = 0;
  v0[5] = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t InMemoryKeychain.monitor(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v3 = v2;
  swift_beginAccess(v2 + 24, v14, 33, 0);
  v6 = sub_100130B10();
  v8 = v7;
  result = swift_endAccess(v14);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = swift_allocObject(&unk_1003E6C00, 32, 7);
    *(_QWORD *)(v10 + 16) = a1;
    *(_QWORD *)(v10 + 24) = a2;
    swift_beginAccess(v3 + 40, v14, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + 40));
    v13 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0x8000000000000000;
    sub_100030D6C((uint64_t)sub_10014E874, v10, v6, isUniquelyReferenced_nonNull_native);
    v12 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v13;
    swift_bridgeObjectRelease(v12);
    swift_endAccess(v14);
    return v6;
  }
  return result;
}

Swift::Void __swiftcall InMemoryKeychain.stopMonitoring(_:)(Swift::UInt64 a1)
{
  uint64_t v1;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v3 = (uint64_t *)(v1 + 40);
  swift_beginAccess(v1 + 40, v12, 33, 0);
  v4 = sub_10002DD0C(a1);
  if ((v5 & 1) != 0)
  {
    v6 = v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v8 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100147E9C();
      v8 = v11;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v6 + 8);
    sub_100145E50(v6, v8);
    v10 = *v3;
    *v3 = v8;
    swift_bridgeObjectRelease(v10);
    swift_endAccess(v12);
    swift_release(v9);
  }
  else
  {
    swift_endAccess(v12);
  }
}

uint64_t InMemoryKeychain.findIdentities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v26[24];

  sub_100012C44(&qword_1004088D0);
  __chkstk_darwin();
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_100012C44((uint64_t *)&unk_100404EA0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin();
  v13 = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = *(int *)(v11 + 48);
  v15 = swift_beginAccess(v3 + 16, v26, 0, 0);
  v16 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v16 + 16))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v16);
    v17 = sub_10002DC20(a2, a3);
    if ((v18 & 1) != 0)
    {
      sub_100033B48(*(_QWORD *)(v16 + 56) + *(_QWORD *)(v10 + 72) * v17, (uint64_t)v8, (uint64_t *)&unk_100404EA0);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v19, 1, v9);
    swift_bridgeObjectRelease(a3);
    v20 = swift_bridgeObjectRelease(v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v10 + 48))(v8, 1, v9, v20) != 1)
    {
      v23 = *(int *)(v9 + 48);
      sub_100063EB8((uint64_t)v8, (uint64_t)v13, &qword_1004088A0);
      v22 = *(_QWORD *)&v8[v23];
      *(_QWORD *)&v13[v14] = v22;
      goto LABEL_9;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v8, 1, 1, v9, v15);
  }
  v21 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v13, 1, 1, v21);
  *(_QWORD *)&v13[v14] = _swiftEmptyArrayStorage;
  sub_100033A84((uint64_t)v8, &qword_1004088D0);
  v22 = *(_QWORD *)&v13[v14];
LABEL_9:
  sub_100063EB8((uint64_t)v13, a1, &qword_1004088A0);
  return v22;
}

uint64_t InMemoryKeychain.save(identity:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  __n128 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];

  v4 = v3;
  v30 = sub_100012C44((uint64_t *)&unk_100404EA0);
  v32 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin();
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_1004088A0);
  __chkstk_darwin();
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(a1, (uint64_t)v11, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
  v12 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 56);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v29)(v11, 0, 1, v12);
  v13 = (_QWORD *)(v4 + 16);
  swift_beginAccess(v4 + 16, v34, 33, 0);
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + 16));
  v33 = *(_QWORD *)(v4 + 16);
  v15 = v33;
  *(_QWORD *)(v4 + 16) = 0x8000000000000000;
  v31 = a2;
  v17 = sub_10002DC20(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_10;
  }
  LOBYTE(a2) = v16;
  if (*(_QWORD *)(v15 + 24) >= v20)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
LABEL_10:
    sub_100147988();
    v15 = v33;
    goto LABEL_6;
  }
  sub_100142C40(v20, isUniquelyReferenced_nonNull_native);
  v15 = v33;
  v21 = sub_10002DC20(v31, a3);
  if ((a2 & 1) != (v22 & 1))
  {
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANServiceName);
    __break(1u);
    return result;
  }
  v17 = v21;
LABEL_6:
  v23 = (_QWORD *)*v13;
  *v13 = v15;
  v24 = swift_bridgeObjectRelease(v23);
  v25 = (_QWORD *)*v13;
  if ((a2 & 1) == 0)
  {
    v26 = *(int *)(v30 + 48);
    v29(v9, 1, 1, v12, v24);
    *(_QWORD *)&v9[v26] = _swiftEmptyArrayStorage;
    sub_100148914(v17, v31, a3, (uint64_t)v9, v25);
    swift_bridgeObjectRetain(a3);
  }
  v27 = v25[7] + *(_QWORD *)(v32 + 72) * v17;
  swift_bridgeObjectRetain(v25);
  sub_10014B874((uint64_t)v11, v27);
  swift_endAccess(v34);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v25);
  sub_10013F848();
  return 1;
}

Swift::Void __swiftcall InMemoryKeychain.removeAllIdentities(for:)(CoreP2P::NANServiceName a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[24];

  v2 = v1;
  object = a1.string._object;
  countAndFlagsBits = a1.string._countAndFlagsBits;
  sub_100012C44(&qword_1004088D0);
  __chkstk_darwin();
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v2 + 16, v8, 33, 0);
  sub_1000301E0(countAndFlagsBits, (uint64_t)object, (uint64_t)v6);
  sub_100033A84((uint64_t)v6, &qword_1004088D0);
  swift_endAccess(v8);
  sub_10013F848();
}

uint64_t InMemoryKeychain.remove(identity:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t (*v51)(uint64_t, char);
  void (*v52)(_QWORD *);
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[4];
  _BYTE v70[32];
  char v71[32];

  v64 = (char *)a1;
  v65 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100012C44((uint64_t *)&unk_10040E340);
  __chkstk_darwin();
  v68 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  v62 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_1004088D0);
  __chkstk_darwin();
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_10040E1F0);
  __chkstk_darwin();
  v61 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v67 = (uint64_t)&v57 - v16;
  __chkstk_darwin();
  v18 = (char *)&v57 - v17;
  swift_beginAccess(v3 + 16, v71, 0, 0);
  v60 = v3;
  v19 = *(_QWORD *)(v3 + 16);
  v20 = *(_QWORD *)(v19 + 16);
  v66 = v10;
  v58 = v8;
  if (v20)
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v19);
    v21 = sub_10002DC20(v65, a3);
    if ((v22 & 1) != 0)
    {
      v23 = v21;
      v59 = v12;
      v24 = *(_QWORD *)(v19 + 56);
      v25 = sub_100012C44((uint64_t *)&unk_100404EA0);
      v26 = v18;
      v27 = v6;
      v28 = a3;
      v29 = *(_QWORD *)(v25 - 8);
      v30 = v24 + *(_QWORD *)(v29 + 72) * v23;
      v12 = v59;
      sub_100033B48(v30, (uint64_t)v14, (uint64_t *)&unk_100404EA0);
      v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
      a3 = v28;
      v6 = v27;
      v18 = v26;
      v10 = v66;
      v31(v14, 0, 1, v25);
    }
    else
    {
      v33 = sub_100012C44((uint64_t *)&unk_100404EA0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 1, 1, v33);
    }
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v32 = sub_100012C44((uint64_t *)&unk_100404EA0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v14, 1, 1, v32);
  }
  v34 = v67;
  v35 = sub_100012C44((uint64_t *)&unk_100404EA0);
  v59 = *(char **)(*(_QWORD *)(v35 - 8) + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v59)(v14, 1, v35)
    || (*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v14, 1, v10))
  {
    sub_100033A84((uint64_t)v14, &qword_1004088D0);
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v36(v18, 1, 1, v5);
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  }
  else
  {
    sub_1000637E0((uint64_t)v14, (uint64_t)v12, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    sub_100033A84((uint64_t)v14, &qword_1004088D0);
    v56 = (uint64_t)v12;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v37(v18, v56, v5);
    sub_100063824(v56, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v36(v18, 0, 1, v5);
  }
  v37((char *)v34, (uint64_t)v64, v5);
  v36((char *)v34, 0, 1, v5);
  v38 = v68;
  v39 = v68 + *(int *)(v63 + 48);
  sub_100033B48((uint64_t)v18, v68, &qword_10040E1F0);
  sub_100033B48(v34, v39, &qword_10040E1F0);
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v40(v38, 1, v5) != 1)
  {
    v43 = v61;
    sub_100033B48(v38, v61, &qword_10040E1F0);
    if (v40(v39, 1, v5) != 1)
    {
      v64 = v18;
      v45 = v43;
      v46 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v58, v39, v5);
      v47 = sub_100011DE4(&qword_100404EB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v48 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v46, v5, v47);
      v49 = a3;
      v50 = *(void (**)(char *, uint64_t))(v6 + 8);
      v50(v46, v5);
      sub_100033A84(v67, &qword_10040E1F0);
      sub_100033A84((uint64_t)v64, &qword_10040E1F0);
      v50((char *)v45, v5);
      a3 = v49;
      result = sub_100033A84(v38, &qword_10040E1F0);
      v42 = v66;
      if ((v48 & 1) == 0)
        return result;
      goto LABEL_17;
    }
    sub_100033A84(v67, &qword_10040E1F0);
    sub_100033A84((uint64_t)v18, &qword_10040E1F0);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v43, v5);
    return sub_100033A84(v68, (uint64_t *)&unk_10040E340);
  }
  sub_100033A84(v34, &qword_10040E1F0);
  sub_100033A84((uint64_t)v18, &qword_10040E1F0);
  v41 = v40(v39, 1, v5);
  v42 = v66;
  if (v41 != 1)
    return sub_100033A84(v68, (uint64_t *)&unk_10040E340);
  sub_100033A84(v68, &qword_10040E1F0);
LABEL_17:
  swift_bridgeObjectRetain(a3);
  v51 = sub_10013F9D0((uint64_t)v70);
  v52 = sub_1001408B0(v69, v65, a3);
  v54 = v53;
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v59)(v53, 1, v35))
  {
    sub_100033A84(v54, &qword_1004088A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v54, 1, 1, v42);
  }
  ((void (*)(_QWORD *, _QWORD))v52)(v69, 0);
  v55 = swift_bridgeObjectRelease(a3);
  return ((uint64_t (*)(_BYTE *, _QWORD, __n128))v51)(v70, 0, v55);
}

void (*sub_1001407E8(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _OWORD *v4;
  __int128 v5;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)((char *)v4 + 56) = *(_OWORD *)a2;
  v4[2] = v5;
  *((_WORD *)v4 + 24) = *(_WORD *)(a2 + 32);
  sub_100031ECC((uint64_t)v4 + 56);
  sub_100031ECC((uint64_t)(v4 + 2));
  *((_QWORD *)v4 + 9) = sub_100148C58(v4, a2);
  return sub_100140860;
}

void sub_100140860(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *a1 + 32;
  v3 = *a1 + 56;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 72))(*a1, 0);
  sub_100031EF4(v3);
  sub_100031EF4(v2);
  free(v1);
}

void (*sub_1001408B0(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_100148D64(v6, a2, a3);
  return sub_10014091C;
}

void sub_10014091C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

_QWORD *InMemoryKeychain.deinit()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[2]);
  v1 = v0[4];
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[5]);
  return v0;
}

uint64_t InMemoryKeychain.__deallocating_deinit()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[2]);
  v1 = v0[4];
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_1001409D4(uint64_t a1, uint64_t a2)
{
  return InMemoryKeychain.monitor(using:)(a1, a2);
}

void sub_1001409F4(Swift::UInt64 a1)
{
  InMemoryKeychain.stopMonitoring(_:)(a1);
}

uint64_t sub_100140A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return InMemoryKeychain.findIdentities(for:)(a1, a2, a3);
}

uint64_t sub_100140A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  InMemoryKeychain.save(identity:for:)(a1, a2, a3);
  return 1;
}

uint64_t sub_100140A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s7CoreP2P16InMemoryKeychainC4save8identity3for8publiclySbAA19LongTermPairingKeysV14PublicIdentityV_AA14NANServiceNameVSbtF_0(a1, a2, a3) & 1;
}

uint64_t sub_100140A7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v9[24];

  sub_100012C44(&qword_1004088D0);
  __chkstk_darwin();
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(*v2 + 16, v9, 33, 0);
  sub_1000301E0(a1, a2, (uint64_t)v6);
  sub_100033A84((uint64_t)v6, &qword_1004088D0);
  swift_endAccess(v9);
  return sub_10013F848();
}

uint64_t sub_100140B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return InMemoryKeychain.remove(identity:for:)(a1, a2, a3);
}

uint64_t type metadata accessor for LongTermPairingKeys(uint64_t a1)
{
  return sub_10000D69C(a1, qword_100408930, (uint64_t)&nominal type descriptor for LongTermPairingKeys);
}

uint64_t type metadata accessor for LongTermPairingKeys.PrivateIdentity(uint64_t a1)
{
  return sub_10000D69C(a1, qword_1004089C8, (uint64_t)&nominal type descriptor for LongTermPairingKeys.PrivateIdentity);
}

uint64_t type metadata accessor for LongTermPairingKeys.PairedDevices()
{
  return objc_opt_self(_TtCV7CoreP2P19LongTermPairingKeysP33_EC6A7E7630A300FE23BBD99CAD03996C13PairedDevices);
}

uint64_t type metadata accessor for LongTermPairingKeys.Identity(uint64_t a1)
{
  return sub_10000D69C(a1, qword_100408F58, (uint64_t)&nominal type descriptor for LongTermPairingKeys.Identity);
}

uint64_t type metadata accessor for LongTermPairingKeys.PublicIdentity(uint64_t a1)
{
  return sub_10000D69C(a1, (uint64_t *)&unk_100408A58, (uint64_t)&nominal type descriptor for LongTermPairingKeys.PublicIdentity);
}

unint64_t sub_100140BC8()
{
  unint64_t result;

  result = qword_100408828;
  if (!qword_100408828)
  {
    result = swift_getWitnessTable(byte_10034A320, &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408828);
  }
  return result;
}

uint64_t sub_100140C0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  char v30;

  v3 = type metadata accessor for CodingUserInfoKey(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  dispatch thunk of Decoder.unkeyedContainer()(v27, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v9 = v28;
    v10 = v29;
    sub_100034C68((uint64_t)v27, v28);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for UInt16, &type metadata for UInt16, &protocol witness table for UInt16, v9, v10);
    v11 = (unsigned __int16)v25;
    v12 = a1[3];
    v13 = a1[4];
    sub_10003259C(a1, v12);
    v14 = dispatch thunk of Decoder.userInfo.getter(v12, v13);
    if (qword_100403F38 != -1)
      swift_once(&qword_100403F38, sub_1000C8ACC);
    v15 = sub_100014C44(v3, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v15, v3);
    if (*(_QWORD *)(v14 + 16) && (v16 = sub_10002DA48((uint64_t)v6), (v17 & 1) != 0))
    {
      sub_100014450(*(_QWORD *)(v14 + 56) + 32 * v16, (uint64_t)&v25);
    }
    else
    {
      v25 = 0u;
      v26 = 0u;
    }
    v18 = swift_bridgeObjectRelease(v14);
    (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v18);
    if (*((_QWORD *)&v26 + 1))
    {
      if ((swift_dynamicCast(&v30, &v25, &type metadata for Any[8], &type metadata for Bool, 6) & 1) != 0
        && (v30 & 1) != 0)
      {
        v19 = v28;
        v20 = v29;
        sub_100034C68((uint64_t)v27, v28);
        UnkeyedDecodingContainer.decodeData(with:)(((_DWORD)v11 + 3) & 0x1FFFC, v19, v20);
        __asm { BR              X11 }
      }
    }
    else
    {
      sub_100033A84((uint64_t)&v25, &qword_100405050);
    }
    v22 = v28;
    v23 = v29;
    sub_100034C68((uint64_t)v27, v28);
    v7 = UnkeyedDecodingContainer.decodeData(with:)(v11, v22, v23);
    sub_100014430(v27);
    sub_100014430(a1);
  }
  return v7;
}

void sub_100140F54(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v6, v4, v5);
  __asm { BR              X11 }
}

uint64_t sub_100140FB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  LOWORD(v9[0]) = BYTE6(v0);
  v3 = v11;
  v4 = v12;
  sub_100034C68((uint64_t)v10, v11);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v9, &type metadata for UInt16, &protocol witness table for UInt16, v3, v4);
  if (!v2)
  {
    v9[0] = v1;
    v9[1] = v0;
    v5 = v11;
    v6 = v12;
    sub_100034C68((uint64_t)v10, v11);
    v7 = sub_100068570();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v9, &type metadata for Data, v7, v5, v6);
  }
  return sub_100014430(v10);
}

uint64_t sub_1001410B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44((uint64_t *)&unk_100410330);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100033A2C(v25, v38);
      }
      else
      {
        sub_100014450((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_100033A2C(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_1001413B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t *v26;
  int64_t v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  _QWORD v31[4];
  char v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100409060);
  v29 = a2;
  v30 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v28 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v26 = v3;
    v27 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v10 = 0;
    while (1)
    {
      if (v9)
      {
        v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v12 = v11 | (v10 << 6);
      }
      else
      {
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v13 >= v27)
          goto LABEL_25;
        v14 = v28[v13];
        ++v10;
        if (!v14)
        {
          v10 = v13 + 1;
          if (v13 + 1 >= v27)
            goto LABEL_25;
          v14 = v28[v10];
          if (!v14)
          {
            v15 = v13 + 2;
            if (v15 >= v27)
            {
LABEL_25:
              swift_release(v5);
              v3 = v26;
              if ((v29 & 1) != 0)
              {
                v25 = 1 << *(_BYTE *)(v5 + 32);
                if (v25 > 63)
                  bzero(v28, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v28 = -1 << v25;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v14 = v28[v15];
            if (!v14)
            {
              while (1)
              {
                v10 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_32;
                if (v10 >= v27)
                  goto LABEL_25;
                v14 = v28[v10];
                ++v15;
                if (v14)
                  goto LABEL_22;
              }
            }
            v10 = v15;
          }
        }
LABEL_22:
        v9 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      v16 = *(_QWORD *)(v5 + 48) + 40 * v12;
      v18 = *(_QWORD *)v16;
      v17 = *(_QWORD *)(v16 + 8);
      v19 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      v21 = *(_BYTE *)(v16 + 32);
      v22 = *(_BYTE *)(v16 + 33);
      v23 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v12);
      if ((v29 & 1) == 0)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v16 + 8));
        swift_bridgeObjectRetain(v20);
        v24 = v23;
      }
      v31[0] = v18;
      v31[1] = v17;
      v31[2] = v19;
      v31[3] = v20;
      v32 = v21;
      v33 = v22;
      sub_1001465D4((uint64_t)v31, (uint64_t)v23, v30);
    }
  }
  swift_release(v5);
  *v3 = v30;
}

void sub_1001415E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t i;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  void *v27;
  char v28;
  id v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD *v33;
  char v34;
  uint64_t v35;
  int64_t v36;
  _QWORD v37[4];
  char v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100408FD8);
  v34 = a2;
  v35 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v33 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v31 = v3;
    v32 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    for (i = 0; ; i = v36)
    {
      if (v9)
      {
        v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v36 = i;
        v12 = v11 | (i << 6);
      }
      else
      {
        v13 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v13 >= v32)
          goto LABEL_25;
        v14 = v33[v13];
        v15 = i + 1;
        if (!v14)
        {
          v15 = i + 2;
          if (i + 2 >= v32)
            goto LABEL_25;
          v14 = v33[v15];
          if (!v14)
          {
            v16 = i + 3;
            if (i + 3 >= v32)
            {
LABEL_25:
              swift_release(v5);
              v3 = v31;
              if ((v34 & 1) != 0)
              {
                v30 = 1 << *(_BYTE *)(v5 + 32);
                if (v30 > 63)
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v30;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v14 = v33[v16];
            if (!v14)
            {
              while (1)
              {
                v15 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_32;
                if (v15 >= v32)
                  goto LABEL_25;
                v14 = v33[v15];
                ++v16;
                if (v14)
                  goto LABEL_22;
              }
            }
            v15 = i + 3;
          }
        }
LABEL_22:
        v9 = (v14 - 1) & v14;
        v36 = v15;
        v12 = __clz(__rbit64(v14)) + (v15 << 6);
      }
      v17 = *(_QWORD *)(v5 + 56);
      v18 = v5;
      v19 = *(_QWORD *)(v5 + 48) + 40 * v12;
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v23 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v19 + 24);
      v24 = *(_BYTE *)(v19 + 32);
      v25 = *(_BYTE *)(v19 + 33);
      v26 = v17 + 16 * v12;
      v27 = *(void **)v26;
      v28 = *(_BYTE *)(v26 + 8);
      if ((v34 & 1) == 0)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v19 + 8));
        swift_bridgeObjectRetain(v22);
        v29 = v27;
      }
      v37[0] = v20;
      v37[1] = v21;
      v37[2] = v23;
      v37[3] = v22;
      v38 = v24;
      v39 = v25;
      sub_10014673C((uint64_t)v37, (uint64_t)v27, v28, v35);
      v5 = v18;
    }
  }
  swift_release(v5);
  *v3 = v35;
}

Swift::Int sub_100141840(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  Swift::Int *v3;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  Swift::Int result;
  Swift::Int v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39[9];

  v3 = v2;
  v37 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100012C44(&qword_100404EF8);
  v38 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v36 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v34 = v3;
    v35 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = (Swift::Int)v36;
        if (v20 >= v35)
          goto LABEL_36;
        v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v35)
            goto LABEL_36;
          v21 = v36[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_36:
              if ((v38 & 1) == 0)
              {
                result = swift_release(v8);
                v3 = v34;
                goto LABEL_43;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v11 >= v35)
                  goto LABEL_36;
                v21 = v36[v11];
                ++v22;
                if (v21)
                  goto LABEL_23;
              }
            }
            v11 = v22;
          }
        }
LABEL_23:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(_BYTE *)(*(_QWORD *)(v8 + 48) + v19);
      v24 = *(_QWORD *)(v37 + 72);
      v25 = *(_QWORD *)(v8 + 56) + v24 * v19;
      if ((v38 & 1) != 0)
        sub_100033AC0(v25, (uint64_t)v7, type metadata accessor for NANGenericServiceProtocol.Attribute);
      else
        sub_1000637E0(v25, (uint64_t)v7, type metadata accessor for NANGenericServiceProtocol.Attribute);
      Hasher.init(_seed:)(v39);
      Hasher._combine(_:)(0xDD06050403020100 >> (8 * v23));
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v10 + 48) + v17) = v23;
      result = sub_100033AC0((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17, type metadata accessor for NANGenericServiceProtocol.Attribute);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release(v8);
LABEL_43:
  *v3 = v10;
  return result;
}

uint64_t sub_100141B94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  int v40;
  _OWORD v41[2];

  v3 = v2;
  v6 = type metadata accessor for CodingUserInfoKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100012C44((uint64_t *)&unk_100404E80);
  v40 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v39 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v37 = v3;
  v38 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = v39;
    v25 = v39[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = v39[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v10);
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v39[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v38)
              goto LABEL_36;
            v25 = v39[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      sub_100033A2C((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v22), v41);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      sub_100014450(*(_QWORD *)(v10 + 56) + 32 * v22, (uint64_t)v41);
    }
    result = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v12 + 40), v6, &protocol witness table for CodingUserInfoKey);
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v17 + 8 * v31);
      }
      while (v35 == -1);
      v20 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    result = (uint64_t)sub_100033A2C(v41, (_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v20));
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v37;
  v24 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v10 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_100141F18(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  char v23;
  uint64_t v24[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100409058);
  v23 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v22 = (unint64_t)(v8 + 63) >> 6;
  swift_retain();
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v22 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((v23 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v22 <= 2)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    v17 = *(_QWORD *)(v5 + 56) + 24 * v11;
    v18 = *(void **)v17;
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v17 + 16));
      v19 = v18;
    }
    Hasher.init(_seed:)(v24);
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v22 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x1001422D4);
      }
      if (v14 >= v22)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((v23 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v20 = 1 << *(_BYTE *)(v5 + 32);
  if (v20 >= 64)
    bzero(v12, ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v20;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

uint64_t sub_1001422E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100409050);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain();
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1001425FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  _OWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[9];
  _OWORD v39[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100404EC0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v12)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v15;
    if (!v21)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v15);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v15 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v15);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v15 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    v23 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
    if ((a2 & 1) != 0)
    {
      sub_100033A2C(v24, v39);
    }
    else
    {
      sub_100014450((uint64_t)v24, (uint64_t)v39);
      v25 = v23;
    }
    Hasher.init(_seed:)(v38);
    type metadata accessor for CFString(0);
    v27 = v26;
    v28 = sub_100011DE4(&qword_100404EB8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338B9C);
    _CFObject.hash(into:)(v38, v27, v28);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v23;
    result = (uint64_t)sub_100033A2C(v39, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v20 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v20, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10014291C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100404F00);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100142C40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v43 = *(_QWORD *)(sub_100012C44((uint64_t *)&unk_100404EA0) - 8);
  __chkstk_darwin();
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100012C44(&qword_100409020);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_43;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v42 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v40 = v3;
  v41 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v41)
      break;
    v23 = v42;
    v24 = v42[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_36;
      v24 = v42[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_36:
          swift_release(v8);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v42[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v17 >= v41)
              goto LABEL_36;
            v24 = v42[v17];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v17 = v25;
      }
    }
LABEL_23:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_24:
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v43 + 72);
    v30 = *(_QWORD *)(v8 + 56) + v29 * v21;
    if ((v44 & 1) != 0)
    {
      sub_100063EB8(v30, (uint64_t)v7, (uint64_t *)&unk_100404EA0);
    }
    else
    {
      sub_100033B48(v30, (uint64_t)v7, (uint64_t *)&unk_100404EA0);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v45);
    v31 = String.lowercased()();
    String.hash(into:)(v45, v31._countAndFlagsBits, v31._object);
    swift_bridgeObjectRelease(v31._object);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = sub_100063EB8((uint64_t)v7, *(_QWORD *)(v10 + 56) + v29 * v18, (uint64_t *)&unk_100404EA0);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release(v8);
  v3 = v40;
  v23 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v8 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_43:
  result = swift_release(v8);
  *v3 = v10;
  return result;
}

uint64_t sub_100142FE0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t i;
  int v51;
  uint64_t v52;

  v3 = v2;
  v49 = *(_QWORD *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  __chkstk_darwin();
  v52 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100408FD0);
  v51 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 64);
    v48 = (_QWORD *)(v11 + 64);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v46 = v2;
    v47 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 64;
    result = swift_retain();
    v20 = 0;
    v21 = v11;
    for (i = v11; ; v21 = i)
    {
      if (v17)
      {
        v23 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v24 = v23 | (v20 << 6);
      }
      else
      {
        v25 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        if (v25 >= v47)
        {
          swift_release(v21);
          v3 = v46;
          v26 = v48;
          if ((v51 & 1) == 0)
            goto LABEL_41;
LABEL_38:
          v44 = 1 << *(_BYTE *)(i + 32);
          if (v44 >= 64)
            bzero(v26, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v26 = -1 << v44;
          v43 = i;
          *(_QWORD *)(i + 16) = 0;
          goto LABEL_44;
        }
        v26 = v48;
        v27 = v48[v25];
        ++v20;
        if (!v27)
        {
          v20 = v25 + 1;
          if (v25 + 1 >= v47)
            goto LABEL_37;
          v27 = v48[v20];
          if (!v27)
          {
            v28 = v25 + 2;
            if (v28 >= v47)
            {
LABEL_37:
              swift_release(v21);
              v3 = v46;
              if ((v51 & 1) == 0)
              {
LABEL_41:
                v43 = i;
                goto LABEL_44;
              }
              goto LABEL_38;
            }
            v27 = v48[v28];
            if (!v27)
            {
              while (1)
              {
                v20 = v28 + 1;
                if (__OFADD__(v28, 1))
                  break;
                if (v20 >= v47)
                  goto LABEL_37;
                v27 = v48[v20];
                ++v28;
                if (v27)
                  goto LABEL_23;
              }
LABEL_46:
              __break(1u);
              return result;
            }
            v20 = v28;
          }
        }
LABEL_23:
        v17 = (v27 - 1) & v27;
        v24 = __clz(__rbit64(v27)) + (v20 << 6);
      }
      v29 = *(_QWORD *)(v8 + 72);
      v30 = *(_QWORD *)(v21 + 48) + v29 * v24;
      if ((v51 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v30, v7);
        v31 = *(_QWORD *)(v21 + 56);
        v32 = *(_QWORD *)(v49 + 72);
        sub_100033AC0(v31 + v32 * v24, v52, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v30, v7);
        v33 = *(_QWORD *)(v21 + 56);
        v32 = *(_QWORD *)(v49 + 72);
        sub_1000637E0(v33 + v32 * v24, v52, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      }
      v34 = *(_QWORD *)(v13 + 40);
      v35 = sub_100011DE4(&qword_10040F670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      result = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v7, v35);
      v36 = -1 << *(_BYTE *)(v13 + 32);
      v37 = result & ~v36;
      v38 = v37 >> 6;
      if (((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v39 = 0;
        v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v41 = v38 == v40;
          if (v38 == v40)
            v38 = 0;
          v39 |= v41;
          v42 = *(_QWORD *)(v18 + 8 * v38);
        }
        while (v42 == -1);
        v22 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v29 * v22, v10, v7);
      result = sub_100033AC0(v52, *(_QWORD *)(v13 + 56) + v32 * v22, type metadata accessor for LongTermPairingKeys.PublicIdentity);
      ++*(_QWORD *)(v13 + 16);
    }
  }
  v43 = v11;
LABEL_44:
  result = swift_release(v43);
  *v3 = v13;
  return result;
}

uint64_t sub_1001433FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100409028);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v31 = 1 << *(_BYTE *)(v5 + 32);
    v32 = v3;
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v22 >= v14)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v14)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v32;
                goto LABEL_43;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v14)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
        swift_retain();
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v29);
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

void sub_1001436AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD v36[4];
  char v37;
  char v38;

  v3 = v2;
  v33 = *(_QWORD *)(sub_100012C44(&qword_100408468) - 8);
  __chkstk_darwin();
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100012C44(&qword_100409048);
  v34 = a2;
  v35 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = 1 << *(_BYTE *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 64);
    v32 = (_QWORD *)(v8 + 64);
    v11 = -1;
    if (v9 < 64)
      v11 = ~(-1 << v9);
    v12 = v11 & v10;
    v30 = v3;
    v31 = (unint64_t)(v9 + 63) >> 6;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v12)
      {
        v14 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return;
        }
        v17 = v32;
        if (v16 >= v31)
          goto LABEL_25;
        v18 = v32[v16];
        ++v13;
        if (!v18)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v31)
            goto LABEL_25;
          v18 = v32[v13];
          if (!v18)
          {
            v19 = v16 + 2;
            if (v19 >= v31)
            {
LABEL_25:
              swift_release(v8);
              if ((v34 & 1) == 0)
              {
                swift_release(v8);
                v3 = v30;
                goto LABEL_32;
              }
              v28 = 1 << *(_BYTE *)(v8 + 32);
              if (v28 >= 64)
                bzero(v17, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v17 = -1 << v28;
              v3 = v30;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v18 = v32[v19];
            if (!v18)
            {
              while (1)
              {
                v13 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_34;
                if (v13 >= v31)
                  goto LABEL_25;
                v18 = v32[v13];
                ++v19;
                if (v18)
                  goto LABEL_22;
              }
            }
            v13 = v19;
          }
        }
LABEL_22:
        v12 = (v18 - 1) & v18;
        v15 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(_QWORD *)(v8 + 48) + 40 * v15;
      v21 = *(_QWORD *)v20;
      v22 = *(_QWORD *)(v20 + 8);
      v24 = *(_QWORD *)(v20 + 16);
      v23 = *(_QWORD *)(v20 + 24);
      v25 = *(_BYTE *)(v20 + 32);
      v26 = *(_BYTE *)(v20 + 33);
      v27 = *(_QWORD *)(v8 + 56) + *(_QWORD *)(v33 + 72) * v15;
      if ((v34 & 1) != 0)
      {
        sub_100063EB8(v27, (uint64_t)v7, &qword_100408468);
      }
      else
      {
        sub_100033B48(v27, (uint64_t)v7, &qword_100408468);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
      }
      v36[0] = v21;
      v36[1] = v22;
      v36[2] = v24;
      v36[3] = v23;
      v37 = v25;
      v38 = v26;
      sub_1001468B8((uint64_t)v36, (uint64_t)v7, v35);
    }
  }
  swift_release(v8);
LABEL_32:
  *v3 = v35;
}

uint64_t sub_100143958(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100408FE8);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100143C64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100409018);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_50;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      return result;
    }
    if (v19 >= v12)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v36 + 8 * v19);
    ++v15;
    if (!v21)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_43;
      v21 = *(_QWORD *)(v36 + 8 * v15);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_43:
          swift_release(v5);
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_50;
          goto LABEL_46;
        }
        v21 = *(_QWORD *)(v36 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v15 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_52;
            if (v15 >= v12)
              goto LABEL_43;
            v21 = *(_QWORD *)(v36 + 8 * v15);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v15 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v18);
    v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
    if ((a2 & 1) != 0)
      sub_100033A2C(v24, v38);
    else
      sub_100014450((uint64_t)v24, (uint64_t)v38);
    Hasher.init(_seed:)(v37);
    if (v23)
      v25 = 0x64657463656A6572;
    else
      v25 = 0x6553657669746361;
    if (v23)
      v26 = 0xEF65636976726553;
    else
      v26 = 0xED00006563697672;
    String.hash(into:)(v37, v25, v26);
    swift_bridgeObjectRelease(v26);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v13 + 8 * v29);
      }
      while (v33 == -1);
      v16 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v16) = v23;
    result = (uint64_t)sub_100033A2C(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_50;
LABEL_46:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_50:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100143FA4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22[9];
  _OWORD v23[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100409010);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_30;
  v20 = v3;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v21 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_retain();
  if (v10)
  {
    v12 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v11 > 1)
  {
    v13 = *(_QWORD *)(v5 + 72);
    v14 = 1;
    if (v13)
      goto LABEL_20;
    v14 = 2;
    if (v11 > 2)
    {
      v13 = *(_QWORD *)(v5 + 80);
      if (!v13)
      {
        v15 = 3;
        if (v11 > 3)
        {
          v13 = *(_QWORD *)(v5 + 88);
          if (v13)
          {
            v14 = 3;
            goto LABEL_20;
          }
          while (1)
          {
            v14 = v15 + 1;
            if (__OFADD__(v15, 1))
            {
              __break(1u);
              JUMPOUT(0x100144348);
            }
            if (v14 >= v11)
              break;
            v13 = v21[v14];
            ++v15;
            if (v13)
              goto LABEL_20;
          }
        }
        goto LABEL_25;
      }
LABEL_20:
      v12 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
      v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v12);
      v17 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v12);
      if ((a2 & 1) != 0)
        sub_100033A2C(v17, v23);
      else
        sub_100014450((uint64_t)v17, (uint64_t)v23);
      Hasher.init(_seed:)(v22);
      __asm { BR              X8 }
    }
  }
LABEL_25:
  swift_release(v5);
  v3 = v20;
  if ((a2 & 1) != 0)
  {
    v18 = 1 << *(_BYTE *)(v5 + 32);
    if (v18 >= 64)
      bzero(v21, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v21 = -1 << v18;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_30:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

uint64_t sub_100144364(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100409008);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_49;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }
    if (v19 >= v12)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v36 + 8 * v19);
    ++v15;
    if (!v21)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_42;
      v21 = *(_QWORD *)(v36 + 8 * v15);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_42:
          swift_release(v5);
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_49;
          goto LABEL_45;
        }
        v21 = *(_QWORD *)(v36 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v15 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_51;
            if (v15 >= v12)
              goto LABEL_42;
            v21 = *(_QWORD *)(v36 + 8 * v15);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v15 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v18);
    v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
    if ((a2 & 1) != 0)
      sub_100033A2C(v24, v38);
    else
      sub_100014450((uint64_t)v24, (uint64_t)v38);
    Hasher.init(_seed:)(v37);
    if (v23)
    {
      if (v23 == 1)
      {
        v25 = 0xEB00000000726F74;
        v26 = 0x616974696E497369;
      }
      else
      {
        v25 = 0xE800000000000000;
        v26 = 0x6E6F697461727564;
      }
    }
    else
    {
      v25 = 0xE700000000000000;
      v26 = 0x65636976726573;
    }
    String.hash(into:)(v37, v26, v25);
    swift_bridgeObjectRelease(v25);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v13 + 8 * v29);
      }
      while (v33 == -1);
      v16 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v16) = v23;
    result = (uint64_t)sub_100033A2C(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_49;
LABEL_45:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_49:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1001446B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44(&qword_100409000);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_50;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      return result;
    }
    if (v19 >= v12)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v36 + 8 * v19);
    ++v15;
    if (!v21)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_43;
      v21 = *(_QWORD *)(v36 + 8 * v15);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_43:
          swift_release(v5);
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_50;
          goto LABEL_46;
        }
        v21 = *(_QWORD *)(v36 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v15 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_52;
            if (v15 >= v12)
              goto LABEL_43;
            v21 = *(_QWORD *)(v36 + 8 * v15);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v15 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v18);
    v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
    if ((a2 & 1) != 0)
      sub_100033A2C(v24, v38);
    else
      sub_100014450((uint64_t)v24, (uint64_t)v38);
    Hasher.init(_seed:)(v37);
    if (v23)
      v25 = 0x6E6F73616572;
    else
      v25 = 0x65636976726573;
    if (v23)
      v26 = 0xE600000000000000;
    else
      v26 = 0xE700000000000000;
    String.hash(into:)(v37, v25, v26);
    swift_bridgeObjectRelease(v26);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v13 + 8 * v29);
      }
      while (v33 == -1);
      v16 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v16) = v23;
    result = (uint64_t)sub_100033A2C(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_50;
LABEL_46:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_50:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1001449D4(uint64_t a1, uint64_t a2)
{
  return sub_100144A10(a1, a2, &qword_100408FF8, (uint64_t (*)(uint64_t))sub_100157B4C);
}

uint64_t sub_1001449E8(uint64_t a1, uint64_t a2)
{
  return sub_100144A10(a1, a2, &qword_100408FF0, (uint64_t (*)(uint64_t))sub_100158B88);
}

uint64_t sub_1001449FC(uint64_t a1, uint64_t a2)
{
  return sub_100144A10(a1, a2, &qword_100408FE0, (uint64_t (*)(uint64_t))sub_100194468);
}

uint64_t sub_100144A10(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  _QWORD v40[9];
  _OWORD v41[2];

  v6 = v4;
  v8 = *v4;
  if (*(_QWORD *)(*v4 + 24) <= a1)
    v9 = a1;
  else
    v9 = *(_QWORD *)(*v4 + 24);
  sub_100012C44(a3);
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v8, v9, a2);
  v11 = v10;
  if (*(_QWORD *)(v8 + 16))
  {
    v37 = v6;
    v12 = 1 << *(_BYTE *)(v8 + 32);
    v39 = (_QWORD *)(v8 + 64);
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v8 + 64);
    v38 = (unint64_t)(v12 + 63) >> 6;
    v15 = v10 + 64;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v20 = v19 | (v17 << 6);
      }
      else
      {
        v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v21 >= v38)
          goto LABEL_37;
        v22 = v39[v21];
        ++v17;
        if (!v22)
        {
          v17 = v21 + 1;
          if (v21 + 1 >= v38)
            goto LABEL_37;
          v22 = v39[v17];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_37:
              swift_release(v8);
              v6 = v37;
              if ((a2 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v8 + 32);
                if (v36 >= 64)
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v36;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                v17 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_44;
                if (v17 >= v38)
                  goto LABEL_37;
                v22 = v39[v17];
                ++v23;
                if (v22)
                  goto LABEL_24;
              }
            }
            v17 = v23;
          }
        }
LABEL_24:
        v14 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      v24 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 48) + v20);
      v25 = (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v20);
      if ((a2 & 1) != 0)
        sub_100033A2C(v25, v41);
      else
        sub_100014450((uint64_t)v25, (uint64_t)v41);
      Hasher.init(_seed:)(v40);
      v26 = a4(v24);
      v28 = v27;
      String.hash(into:)(v40, v26, v27);
      swift_bridgeObjectRelease(v28);
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v11 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_BYTE *)(*(_QWORD *)(v11 + 48) + v18) = v24;
      result = (uint64_t)sub_100033A2C(v41, (_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v18));
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release(v8);
  *v6 = v11;
  return result;
}

unint64_t sub_100144D14(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100144EE8(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  Swift::UInt8 v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  _QWORD v39[9];

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v35 = v4;
      v36 = v2;
      v37 = (result + 1) & v7;
      do
      {
        v38 = v3;
        v8 = 40 * v6;
        v9 = *(_QWORD *)(v2 + 48) + 40 * v6;
        v10 = *(_QWORD *)(v9 + 8);
        v11 = v7;
        v12 = *(_QWORD *)(v9 + 24);
        v13 = *(unsigned __int8 *)(v9 + 32);
        v14 = *(_BYTE *)(v9 + 33);
        Hasher.init(_seed:)(v39);
        v15 = String.lowercased()();
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v39, v15._countAndFlagsBits, v15._object);
        swift_bridgeObjectRelease(v15._object);
        v16 = String.lowercased()();
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v39, v16._countAndFlagsBits, v16._object);
        swift_bridgeObjectRelease(v16._object);
        if (v13)
          v17 = 7365749;
        else
          v17 = 7365492;
        String.hash(into:)(v39, v17, 0xE300000000000000);
        swift_bridgeObjectRelease(0xE300000000000000);
        Hasher._combine(_:)(v14);
        swift_bridgeObjectRelease(v12);
        v18 = Hasher._finalize()();
        v19 = v12;
        v7 = v11;
        v3 = v38;
        swift_bridgeObjectRelease(v19);
        result = swift_bridgeObjectRelease(v10);
        v20 = v18 & v7;
        if (v38 >= (uint64_t)v37)
        {
          if (v20 < v37)
          {
            v4 = v35;
            v2 = v36;
          }
          else
          {
            v4 = v35;
            v2 = v36;
            if (v38 >= v20)
              goto LABEL_15;
          }
        }
        else
        {
          v4 = v35;
          v2 = v36;
          if (v20 >= v37 || v38 >= v20)
          {
LABEL_15:
            v21 = *(_QWORD *)(v2 + 48);
            v22 = v21 + 40 * v38;
            v23 = (__int128 *)(v21 + v8);
            if (40 * v38 < v8 || v22 >= (unint64_t)v23 + 40 || v38 != v6)
            {
              v24 = *v23;
              v25 = v23[1];
              *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
              *(_OWORD *)v22 = v24;
              *(_OWORD *)(v22 + 16) = v25;
            }
            v26 = *(_QWORD *)(v2 + 56);
            v27 = (_QWORD *)(v26 + 8 * v38);
            v28 = (_QWORD *)(v26 + 8 * v6);
            if (v38 != v6 || (v3 = v6, v27 >= v28 + 1))
            {
              *v27 = *v28;
              v3 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v29 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v30 = *v29;
    v31 = (-1 << v3) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v4 + 8 * (result >> 6));
    v31 = *v29;
    v30 = (-1 << result) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(v2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v34;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

unint64_t sub_1001451C0(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  Swift::UInt8 v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  _QWORD v39[9];

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v35 = v4;
      v36 = v2;
      v37 = (result + 1) & v7;
      do
      {
        v38 = v3;
        v8 = 40 * v6;
        v9 = *(_QWORD *)(v2 + 48) + 40 * v6;
        v10 = *(_QWORD *)(v9 + 8);
        v11 = v7;
        v12 = *(_QWORD *)(v9 + 24);
        v13 = *(unsigned __int8 *)(v9 + 32);
        v14 = *(_BYTE *)(v9 + 33);
        Hasher.init(_seed:)(v39);
        v15 = String.lowercased()();
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v39, v15._countAndFlagsBits, v15._object);
        swift_bridgeObjectRelease(v15._object);
        v16 = String.lowercased()();
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v39, v16._countAndFlagsBits, v16._object);
        swift_bridgeObjectRelease(v16._object);
        if (v13)
          v17 = 7365749;
        else
          v17 = 7365492;
        String.hash(into:)(v39, v17, 0xE300000000000000);
        swift_bridgeObjectRelease(0xE300000000000000);
        Hasher._combine(_:)(v14);
        swift_bridgeObjectRelease(v12);
        v18 = Hasher._finalize()();
        v19 = v12;
        v7 = v11;
        v3 = v38;
        swift_bridgeObjectRelease(v19);
        result = swift_bridgeObjectRelease(v10);
        v20 = v18 & v7;
        if (v38 >= (uint64_t)v37)
        {
          if (v20 < v37)
          {
            v4 = v35;
            v2 = v36;
          }
          else
          {
            v4 = v35;
            v2 = v36;
            if (v38 >= v20)
              goto LABEL_15;
          }
        }
        else
        {
          v4 = v35;
          v2 = v36;
          if (v20 >= v37 || v38 >= v20)
          {
LABEL_15:
            v21 = *(_QWORD *)(v2 + 48);
            v22 = v21 + 40 * v38;
            v23 = (__int128 *)(v21 + v8);
            if (40 * v38 < v8 || v22 >= (unint64_t)v23 + 40 || v38 != v6)
            {
              v24 = *v23;
              v25 = v23[1];
              *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
              *(_OWORD *)v22 = v24;
              *(_OWORD *)(v22 + 16) = v25;
            }
            v26 = *(_QWORD *)(v2 + 56);
            v27 = (_OWORD *)(v26 + 16 * v38);
            v28 = (_OWORD *)(v26 + 16 * v6);
            if (16 * v38 != 16 * v6 || (v3 = v6, v27 >= v28 + 1))
            {
              *v27 = *v28;
              v3 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v29 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v30 = *v29;
    v31 = (-1 << v3) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v4 + 8 * (result >> 6));
    v31 = *v29;
    v30 = (-1 << result) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(v2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v34;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

unint64_t sub_1001454A0(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for CodingUserInfoKey(0);
  v37 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v36 = (result + 1) & v11;
      v12 = *(_QWORD *)(v37 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v35(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40), v4, &protocol witness table for CodingUserInfoKey);
        result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v23 = v22 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v23 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v23, 1, v4);
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v24 = *(_QWORD *)(a2 + 56);
            v25 = (_OWORD *)(v24 + 32 * a1);
            v26 = (_OWORD *)(v24 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v25 >= v26 + 2))
            {
              v27 = v26[1];
              *v25 = *v26;
              v25[1] = v27;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v28;
    v30 = (-1 << a1) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v28;
    v29 = (-1 << a1) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100145724(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD v14[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
      Hasher.init(_seed:)(v14);
      __asm { BR              X8 }
    }
    v8 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v9 = *v8;
    v10 = (-1 << v3) - 1;
  }
  else
  {
    v8 = (uint64_t *)(v4 + 8 * (result >> 6));
    v10 = *v8;
    v9 = (-1 << result) - 1;
  }
  *v8 = v10 & v9;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v12)
  {
    __break(1u);
    JUMPOUT(0x100145994);
  }
  *(_QWORD *)(a2 + 16) = v13;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1001459A8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100145B7C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  unint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin();
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v43 = (result + 1) & v11;
      v12 = *(_QWORD *)(v44 + 72);
      v42 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v42(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100011DE4(&qword_10040F670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v43)
        {
          if (v21 >= v43 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            v25 = v24 + v15 * a1;
            v26 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || v25 >= v26 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v4);
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
            v29 = *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72);
            v30 = v29 * a1;
            result = v27 + v29 * a1;
            v31 = v29 * v10;
            v32 = v27 + v29 * v10;
            v33 = v32 + v29;
            if (v30 < v31 || result >= v33)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v32, 1, v28);
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v30 != v31)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v43 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v36 = *v35;
    v37 = (-1 << a1) - 1;
  }
  else
  {
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v37 = *v35;
    v36 = (-1 << a1) - 1;
  }
  *v35 = v37 & v36;
  v38 = *(_QWORD *)(a2 + 16);
  v39 = __OFSUB__(v38, 1);
  v40 = v38 - 1;
  if (v39)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v40;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100145E50(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_OWORD *)(v15 + 16 * v3);
            v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100145FE4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v28);
        Hasher._combine(_:)(0xDD06050403020100 >> (8 * v9));
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_BYTE *)(v11 + v3);
        v13 = (_BYTE *)(v11 + v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
        v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72);
        v17 = v16 * v3;
        result = v14 + v16 * v3;
        v18 = v16 * v6;
        v19 = v14 + v16 * v6;
        v20 = v19 + v16;
        if (v17 < v18 || result >= v20)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v19, 1, v15);
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1001461D8(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD v32[9];

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      while (1)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v6 + 8);
        Hasher.init(_seed:)(v32);
        v11 = String.lowercased()();
        swift_bridgeObjectRetain(v10);
        String.hash(into:)(v32, v11._countAndFlagsBits, v11._object);
        swift_bridgeObjectRelease(v11._object);
        v12 = Hasher._finalize()();
        swift_bridgeObjectRelease(v10);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
          break;
        if (v13 < v9)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_OWORD *)(v14 + 16 * v3);
        v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = sub_100012C44((uint64_t *)&unk_100404EA0);
        v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72);
        v20 = v19 * v3;
        v21 = v17 + v19 * v3;
        v22 = v19 * v6;
        v23 = v17 + v19 * v6;
        v24 = v23 + v19;
        if (v20 < v22 || v21 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack(v21, v23, 1, v18);
        }
        else
        {
          v3 = v6;
          if (v20 == v22)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v21);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v9)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v26 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v27 = *v26;
    v28 = (-1 << v3) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_100146400(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v27);
        v11 = sub_100194468(v10);
        v13 = v12;
        String.hash(into:)(v27, v11, v12);
        swift_bridgeObjectRelease(v13);
        result = Hasher._finalize()();
        v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_BYTE *)(v15 + v3);
          v17 = (_BYTE *)(v15 + v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

__n128 sub_1001465D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  _QWORD v15[9];
  __int128 v16;
  Swift::UInt8 v17[16];

  Hasher.init(_seed:)(v15);
  v6 = String.lowercased()();
  String.hash(into:)(v15, v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease(v6._object);
  v16 = *(_OWORD *)(a1 + 16);
  *(_WORD *)v17 = *(_WORD *)(a1 + 32);
  v7 = *((_QWORD *)&v16 + 1);
  v8 = String.lowercased()();
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v15, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v8._object);
  if (v17[0])
    v9 = 7365749;
  else
    v9 = 7365492;
  String.hash(into:)(v15, v9, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  Hasher._combine(_:)(v17[1]);
  sub_100031EF4((uint64_t)&v16);
  v10 = Hasher._finalize()();
  v11 = _HashTable.nextHole(atOrAfter:)(v10 & ~(-1 << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1 << *(_BYTE *)(a3 + 32)));
  *(_QWORD *)(a3 + 64 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
  v12 = *(_QWORD *)(a3 + 48) + 40 * v11;
  result = *(__n128 *)a1;
  v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v12 = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 16) = v14;
  *(_WORD *)(v12 + 32) = *(_WORD *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v11) = a2;
  ++*(_QWORD *)(a3 + 16);
  return result;
}

__n128 sub_10014673C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  __n128 result;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[9];
  __int128 v19;
  Swift::UInt8 v20[16];

  Hasher.init(_seed:)(v18);
  v8 = String.lowercased()();
  String.hash(into:)(v18, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v8._object);
  v19 = *(_OWORD *)(a1 + 16);
  *(_WORD *)v20 = *(_WORD *)(a1 + 32);
  v9 = *((_QWORD *)&v19 + 1);
  v10 = String.lowercased()();
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(v18, v10._countAndFlagsBits, v10._object);
  swift_bridgeObjectRelease(v10._object);
  if (v20[0])
    v11 = 7365749;
  else
    v11 = 7365492;
  String.hash(into:)(v18, v11, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  Hasher._combine(_:)(v20[1]);
  sub_100031EF4((uint64_t)&v19);
  v12 = Hasher._finalize()();
  v13 = _HashTable.nextHole(atOrAfter:)(v12 & ~(-1 << *(_BYTE *)(a4 + 32)), a4 + 64, ~(-1 << *(_BYTE *)(a4 + 32)));
  *(_QWORD *)(a4 + 64 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  v14 = *(_QWORD *)(a4 + 48) + 40 * v13;
  result = *(__n128 *)a1;
  v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v14 = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 16) = v16;
  *(_WORD *)(v14 + 32) = *(_WORD *)(a1 + 32);
  v17 = *(_QWORD *)(a4 + 56) + 16 * v13;
  *(_QWORD *)v17 = a2;
  *(_BYTE *)(v17 + 8) = a3;
  ++*(_QWORD *)(a4 + 16);
  return result;
}

uint64_t sub_1001468B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[9];
  __int128 v18;
  Swift::UInt8 v19[16];

  Hasher.init(_seed:)(v17);
  v6 = String.lowercased()();
  String.hash(into:)(v17, v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease(v6._object);
  v18 = *(_OWORD *)(a1 + 16);
  *(_WORD *)v19 = *(_WORD *)(a1 + 32);
  v7 = *((_QWORD *)&v18 + 1);
  v8 = String.lowercased()();
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v17, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v8._object);
  if (v19[0])
    v9 = 7365749;
  else
    v9 = 7365492;
  String.hash(into:)(v17, v9, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  Hasher._combine(_:)(v19[1]);
  sub_100031EF4((uint64_t)&v18);
  v10 = Hasher._finalize()();
  v11 = _HashTable.nextHole(atOrAfter:)(v10 & ~(-1 << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1 << *(_BYTE *)(a3 + 32)));
  *(_QWORD *)(a3 + 64 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
  v12 = *(_QWORD *)(a3 + 48) + 40 * v11;
  v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v12 = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 16) = v13;
  *(_WORD *)(v12 + 32) = *(_WORD *)(a1 + 32);
  v14 = *(_QWORD *)(a3 + 56);
  v15 = sub_100012C44(&qword_100408468);
  result = sub_100063EB8(a2, v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v11, &qword_100408468);
  ++*(_QWORD *)(a3 + 16);
  return result;
}

void *sub_100146A48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100012C44((uint64_t *)&unk_100410330);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_100014450(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100033A2C(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100146C2C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_100012C44(&qword_100409060);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 40 * v15;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = *(_BYTE *)(v17 + 32);
    v23 = 8 * v15;
    v24 = *(void **)(*(_QWORD *)(v2 + 56) + v23);
    LOBYTE(v17) = *(_BYTE *)(v17 + 33);
    v25 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v25 = v19;
    *(_QWORD *)(v25 + 8) = v18;
    *(_QWORD *)(v25 + 16) = v20;
    *(_QWORD *)(v25 + 24) = v21;
    *(_BYTE *)(v25 + 32) = v22;
    *(_BYTE *)(v25 + 33) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v23) = v24;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    result = v24;
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100146E08()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  sub_100012C44(&qword_100408FD8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 40 * v15;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = *(_BYTE *)(v17 + 32);
    LOBYTE(v17) = *(_BYTE *)(v17 + 33);
    v23 = 16 * v15;
    v24 = *(_QWORD *)(v2 + 56) + v23;
    v25 = *(void **)v24;
    LOBYTE(v24) = *(_BYTE *)(v24 + 8);
    v26 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v26 = v19;
    *(_QWORD *)(v26 + 8) = v18;
    *(_QWORD *)(v26 + 16) = v20;
    *(_QWORD *)(v26 + 24) = v21;
    *(_BYTE *)(v26 + 32) = v22;
    *(_BYTE *)(v26 + 33) = v17;
    v27 = *(_QWORD *)(v4 + 56) + v23;
    *(_QWORD *)v27 = v25;
    *(_BYTE *)(v27 + 8) = v24;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    result = v25;
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100146FF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v25 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100404EF8);
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = (void *)swift_release(v4);
LABEL_28:
    *v1 = v6;
    return result;
  }
  v23 = v1;
  result = (void *)(v5 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  v24 = v4 + 64;
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 16);
  v11 = 1 << *(_BYTE *)(v4 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v4 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v16);
    v18 = *(_QWORD *)(v25 + 72) * v16;
    sub_1000637E0(*(_QWORD *)(v4 + 56) + v18, (uint64_t)v3, type metadata accessor for NANGenericServiceProtocol.Attribute);
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v16) = v17;
    result = (void *)sub_100033AC0((uint64_t)v3, *(_QWORD *)(v6 + 56) + v18, type metadata accessor for NANGenericServiceProtocol.Attribute);
  }
  v21 = v19 + 2;
  if (v21 >= v14)
  {
LABEL_26:
    result = (void *)swift_release(v4);
    v1 = v23;
    goto LABEL_28;
  }
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10014721C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD v26[2];

  v1 = v0;
  v2 = type metadata accessor for CodingUserInfoKey(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_100404E80);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    sub_100014450(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = sub_100033A2C(v26, (_OWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100147458()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_100012C44(&qword_100409058);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 24 * v15;
    v18 = *(void **)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 24 * v15);
    *v20 = v18;
    v20[1] = v17;
    v20[2] = v19;
    swift_bridgeObjectRetain(v19);
    result = v18;
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100147610()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100012C44(&qword_100409050);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001477C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_100012C44(&qword_100404EC0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_100014450(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_100033A2C(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100147988()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;

  v1 = v0;
  v27 = *(_QWORD *)(sub_100012C44((uint64_t *)&unk_100404EA0) - 8);
  __chkstk_darwin();
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100409020);
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = (void *)swift_release(v4);
LABEL_25:
    *v1 = v6;
    return result;
  }
  v24 = v1;
  result = (void *)(v5 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  v25 = v4 + 64;
  v9 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 16);
  v10 = 1 << *(_BYTE *)(v4 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v4 + 64);
  v26 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v14 = v13 | (v9 << 6);
      goto LABEL_9;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v26)
        goto LABEL_23;
      v22 = *(_QWORD *)(v25 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_22:
    v12 = (v22 - 1) & v22;
    v14 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_9:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(_QWORD *)(v27 + 72) * v14;
    sub_100033B48(*(_QWORD *)(v4 + 56) + v19, (uint64_t)v3, (uint64_t *)&unk_100404EA0);
    v20 = (_QWORD *)(*(_QWORD *)(v6 + 48) + v15);
    *v20 = v18;
    v20[1] = v17;
    sub_100063EB8((uint64_t)v3, *(_QWORD *)(v6 + 56) + v19, (uint64_t *)&unk_100404EA0);
    result = (void *)swift_bridgeObjectRetain(v17);
  }
  v23 = v21 + 2;
  if (v23 >= v26)
  {
LABEL_23:
    result = (void *)swift_release(v4);
    v1 = v24;
    goto LABEL_25;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v26)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100147BD4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = *(_QWORD *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  __chkstk_darwin();
  v34 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin();
  v32 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408FD0);
  v29 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v37 = v5;
  if (!v6)
  {
    result = (void *)swift_release(v4);
    v27 = v37;
    v26 = v29;
LABEL_25:
    *v26 = v27;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v37;
  }
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v11 = 1 << *(_BYTE *)(v4 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v36 = v4;
  v13 = v12 & *(_QWORD *)(v4 + 64);
  v30 = v4 + 64;
  v31 = (unint64_t)(v11 + 63) >> 6;
  v15 = v32;
  v14 = v33;
  v16 = (uint64_t)v34;
  for (i = v37;
        ;
        result = (void *)sub_100033AC0(v16, *(_QWORD *)(i + 56) + v22, type metadata accessor for LongTermPairingKeys.PublicIdentity))
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v10 << 6);
      v20 = v36;
      goto LABEL_9;
    }
    v23 = v10 + 1;
    v20 = v36;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v31)
      goto LABEL_23;
    v24 = *(_QWORD *)(v30 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v31)
        goto LABEL_23;
      v24 = *(_QWORD *)(v30 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_22:
    v13 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    v21 = *(_QWORD *)(v2 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v15, *(_QWORD *)(v20 + 48) + v21, v14);
    v22 = *(_QWORD *)(v35 + 72) * v19;
    sub_1000637E0(*(_QWORD *)(v20 + 56) + v22, v16, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(i + 48) + v21, v15, v14);
  }
  v25 = v23 + 2;
  if (v25 >= v31)
  {
LABEL_23:
    result = (void *)swift_release(v36);
    v26 = v29;
    v27 = v37;
    goto LABEL_25;
  }
  v24 = *(_QWORD *)(v30 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v31)
      goto LABEL_23;
    v24 = *(_QWORD *)(v30 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100147E9C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100012C44(&qword_100409028);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100148044()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;

  v37 = *(_QWORD *)(sub_100012C44(&qword_100408468) - 8);
  __chkstk_darwin();
  v36 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100409048);
  v33 = v0;
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = *(_QWORD *)(v2 + 16);
  v39 = v3;
  if (!v4)
  {
    swift_release(v2);
    v31 = v39;
    v30 = v33;
LABEL_25:
    *v30 = v31;
    return;
  }
  v5 = v3;
  v6 = (void *)(v3 + 64);
  v7 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v2 || (unint64_t)v6 >= v2 + 64 + 8 * v7)
  {
    memmove(v6, (const void *)(v2 + 64), 8 * v7);
    v5 = v39;
  }
  v8 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v38 = v2;
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v34 = v2 + 64;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = (uint64_t)v36;
  while (1)
  {
    if (v11)
    {
      v40 = (v11 - 1) & v11;
      v41 = v8;
      v13 = __clz(__rbit64(v11)) | (v8 << 6);
      v14 = v38;
      goto LABEL_9;
    }
    v26 = v8 + 1;
    v14 = v38;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v35)
      goto LABEL_23;
    v27 = *(_QWORD *)(v34 + 8 * v26);
    v28 = v8 + 1;
    if (!v27)
    {
      v28 = v8 + 2;
      if (v8 + 2 >= v35)
        goto LABEL_23;
      v27 = *(_QWORD *)(v34 + 8 * v28);
      if (!v27)
        break;
    }
LABEL_22:
    v40 = (v27 - 1) & v27;
    v41 = v28;
    v13 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_9:
    v15 = 40 * v13;
    v16 = *(_QWORD *)(v14 + 48) + 40 * v13;
    v18 = *(_QWORD *)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    v21 = *(_BYTE *)(v16 + 32);
    v22 = *(_BYTE *)(v16 + 33);
    v23 = *(_QWORD *)(v37 + 72) * v13;
    sub_100033B48(*(_QWORD *)(v14 + 56) + v23, v12, &qword_100408468);
    v24 = v39;
    v25 = *(_QWORD *)(v39 + 48) + v15;
    *(_QWORD *)v25 = v18;
    *(_QWORD *)(v25 + 8) = v17;
    *(_QWORD *)(v25 + 16) = v19;
    *(_QWORD *)(v25 + 24) = v20;
    *(_BYTE *)(v25 + 32) = v21;
    *(_BYTE *)(v25 + 33) = v22;
    sub_100063EB8(v12, *(_QWORD *)(v24 + 56) + v23, &qword_100408468);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    v11 = v40;
    v8 = v41;
  }
  v29 = v8 + 3;
  if (v8 + 3 >= v35)
  {
LABEL_23:
    swift_release(v38);
    v30 = v33;
    v31 = v39;
    goto LABEL_25;
  }
  v27 = *(_QWORD *)(v34 + 8 * v29);
  if (v27)
  {
    v28 = v8 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    v28 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v28 >= v35)
      goto LABEL_23;
    v27 = *(_QWORD *)(v34 + 8 * v28);
    ++v29;
    if (v27)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

id sub_1001482E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100012C44(&qword_100408FE8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100148494()
{
  return sub_1001484C4(&qword_100409018);
}

void *sub_1001484A0()
{
  return sub_1001484C4(&qword_100409010);
}

void *sub_1001484AC()
{
  return sub_1001484C4(&qword_100409008);
}

void *sub_1001484B8()
{
  return sub_1001484C4(&qword_100409000);
}

void *sub_1001484C4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  _OWORD v21[2];

  v2 = v1;
  sub_100012C44(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    v17 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    sub_100014450(*(_QWORD *)(v3 + 56) + 32 * v16, (uint64_t)v21);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = v17;
    result = sub_100033A2C(v21, (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16));
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100148678()
{
  return sub_1001484C4(&qword_100408FF8);
}

void *sub_100148684()
{
  return sub_1001484C4(&qword_100408FF0);
}

void *sub_100148690()
{
  return sub_1001484C4(&qword_100408FE0);
}

_OWORD *sub_10014869C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100033A2C(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_100148704(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 40 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_WORD *)(v4 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_10014875C(unint64_t result, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 40 * result;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_WORD *)(v5 + 32) = *(_WORD *)(a2 + 32);
  v7 = a5[7] + 16 * result;
  *(_QWORD *)v7 = a3;
  *(_BYTE *)(v7 + 8) = a4;
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_1001487BC(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CodingUserInfoKey(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_100033A2C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_10014885C(unint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a6[6] + result) = a2;
  v6 = (_QWORD *)(a6[7] + 24 * result);
  *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

_OWORD *sub_1001488B0(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_100033A2C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_100148914(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = sub_100012C44((uint64_t *)&unk_100404EA0);
  result = sub_100063EB8(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, (uint64_t *)&unk_100404EA0);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t sub_1001489B0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  result = sub_100033AC0(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

unint64_t sub_100148A68(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_100148AB0(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  result = sub_100033AC0(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, type metadata accessor for NANGenericServiceProtocol.Attribute);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

_OWORD *sub_100148B44(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2 & 1;
  result = sub_100033A2C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_OWORD *sub_100148BAC(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = sub_100033A2C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_100148C10(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

void (*sub_100148C58(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  __int128 v7;

  v5 = malloc(0x78uLL);
  *a1 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)((char *)v5 + 88) = *(_OWORD *)a2;
  v5[4] = v7;
  *((_WORD *)v5 + 40) = *(_WORD *)(a2 + 32);
  sub_100031ECC((uint64_t)v5 + 88);
  sub_100031ECC((uint64_t)(v5 + 4));
  *((_QWORD *)v5 + 13) = sub_1001491A0(v5);
  *((_QWORD *)v5 + 14) = sub_100148E44((_QWORD *)v5 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_100148D08;
}

void sub_100148D08(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 112))(*(_QWORD *)a1 + 32, 0);
  sub_100031EF4((uint64_t)v1 + 88);
  sub_100031EF4((uint64_t)v1 + 64);
  v2(v1, 0);
  free(v1);
}

void (*sub_100148D64(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_1001491CC(v7);
  v7[10] = sub_100148FAC(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100148DF4;
}

void sub_100148DF4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_100148E44(_QWORD *a1, uint64_t a2, char a3))(uint64_t *a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t *);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[2] = a2;
  v8[3] = v4;
  v9 = *v4;
  v11 = sub_10002D93C(a2);
  *((_BYTE *)v8 + 9) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[4] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*v4 + 56) + 16 * v11;
        v18 = *(_QWORD *)v17;
        v19 = *(_BYTE *)(v17 + 8);
LABEL_12:
        *v8 = v18;
        *((_BYTE *)v8 + 8) = v19;
        return sub_100148F70;
      }
LABEL_11:
      v18 = 0;
      v19 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100146E08();
      goto LABEL_7;
    }
    sub_1001415E8(v14, a3 & 1);
    v20 = sub_10002D93C(a2);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      v8[4] = v20;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DNSRecords.PTR);
  __break(1u);
  return result;
}

void sub_100148F70(uint64_t *a1)
{
  id *v1;

  v1 = (id *)*a1;
  sub_1001491EC(*a1, *(_BYTE *)(*a1 + 9), *(uint64_t **)(*a1 + 24), *(_QWORD *)(*a1 + 32), *(_QWORD *)(*a1 + 16));

  free(v1);
}

void (*sub_100148FAC(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[1] = a3;
  v10[2] = v4;
  *v10 = a2;
  v11 = sub_100012C44(&qword_1004088D0);
  v12 = malloc(*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  v10[3] = v12;
  v13 = *v4;
  v15 = sub_10002DC20(a2, a3);
  *((_BYTE *)v10 + 40) = v14 & 1;
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v15;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v21 = *(_QWORD *)(*v5 + 56);
        v22 = sub_100012C44((uint64_t *)&unk_100404EA0);
        v23 = *(_QWORD *)(v22 - 8);
        sub_100063EB8(v21 + *(_QWORD *)(v23 + 72) * v15, (uint64_t)v12, (uint64_t *)&unk_100404EA0);
        v24 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v12, v24, 1, v22);
        return sub_100149150;
      }
LABEL_11:
      v22 = sub_100012C44((uint64_t *)&unk_100404EA0);
      v23 = *(_QWORD *)(v22 - 8);
      v24 = 1;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a4 & 1) == 0)
    {
      sub_100147988();
      goto LABEL_7;
    }
    sub_100142C40(v18, a4 & 1);
    v25 = sub_10002DC20(a2, a3);
    if ((v19 & 1) == (v26 & 1))
    {
      v15 = v25;
      v10[4] = v25;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANServiceName);
  __break(1u);
  return result;
}

void sub_100149150(uint64_t **a1)
{
  uint64_t *v1;
  void *v2;

  v1 = *a1;
  v2 = (void *)(*a1)[3];
  sub_1001492B8((uint64_t)v2, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[2], (*a1)[4], **a1, (*a1)[1]);
  sub_100033A84((uint64_t)v2, &qword_1004088D0);
  free(v2);
  free(v1);
}

uint64_t (*sub_1001491A0(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1001491C0;
}

uint64_t sub_1001491C0(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t (*sub_1001491CC(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_10014E868;
}

id sub_1001491EC(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  void *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  void *v13;
  __int128 v14;
  __int16 v15;
  __int128 v16;

  v7 = *(void **)a1;
  if (!*(_QWORD *)a1)
  {
    if ((a2 & 1) == 0)
      return v7;
    v13 = 0;
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 40 * a4, 1, &type metadata for DNSRecords.PTR);
    sub_1001451C0(a4, *a3);
LABEL_7:
    v7 = v13;
    return v7;
  }
  v8 = *(_BYTE *)(a1 + 8) & 1;
  if ((a2 & 1) == 0)
  {
    v10 = (_QWORD *)*a3;
    v11 = *(_OWORD *)(a5 + 16);
    v16 = *(_OWORD *)a5;
    v14 = v11;
    v15 = *(_WORD *)(a5 + 32);
    v13 = v7;
    sub_10014875C(a4, a5, (uint64_t)v7, v8, v10);
    sub_100031ECC((uint64_t)&v16);
    sub_100031ECC((uint64_t)&v14);
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(*a3 + 56) + 16 * a4;
  *(_QWORD *)v9 = v7;
  *(_BYTE *)(v9 + 8) = v8;
  return v7;
}

void sub_1001492B8(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a5;
  v22 = a6;
  sub_100012C44(&qword_1004088D0);
  __chkstk_darwin();
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012C44((uint64_t *)&unk_100404EA0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v17 = (char *)&v21 - v16;
  sub_100033B48(a1, (uint64_t)v11, &qword_1004088D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100033A84((uint64_t)v11, &qword_1004088D0);
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for NANServiceName);
      sub_1001461D8(a4, *a3);
    }
  }
  else
  {
    sub_100063EB8((uint64_t)v11, (uint64_t)v17, (uint64_t *)&unk_100404EA0);
    v18 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      sub_100063EB8((uint64_t)v17, v18[7] + *(_QWORD *)(v13 + 72) * a4, (uint64_t *)&unk_100404EA0);
    }
    else
    {
      sub_100063EB8((uint64_t)v17, (uint64_t)v15, (uint64_t *)&unk_100404EA0);
      v19 = a4;
      v20 = v22;
      sub_100148914(v19, v21, v22, (uint64_t)v15, v18);
      swift_bridgeObjectRetain(v20);
    }
  }
}

void *sub_10014947C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100012C44(&qword_100407A70);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100149610()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100012C44(&qword_100407AD8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001497B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v1 = v0;
  v2 = *(_QWORD *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  __chkstk_darwin();
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040EA80);
  v5 = *v0;
  v6 = static _SetStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_30:
    *v1 = v7;
    return result;
  }
  v24 = v1;
  result = (void *)(v6 + 56);
  v9 = v5 + 56;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 56 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 56), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v20 >= v16)
      goto LABEL_28;
    v21 = *(_QWORD *)(v9 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v16)
        goto LABEL_28;
      v21 = *(_QWORD *)(v9 + 8 * v12);
      if (!v21)
      {
        v12 = v20 + 2;
        if (v20 + 2 >= v16)
          goto LABEL_28;
        v21 = *(_QWORD *)(v9 + 8 * v12);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v2 + 72) * v18;
    sub_1000637E0(*(_QWORD *)(v5 + 48) + v19, (uint64_t)v4, type metadata accessor for AWDLPeer.AdvertisedService);
    result = (void *)sub_100033AC0((uint64_t)v4, *(_QWORD *)(v7 + 48) + v19, type metadata accessor for AWDLPeer.AdvertisedService);
  }
  v22 = v20 + 3;
  if (v22 >= v16)
  {
LABEL_28:
    result = (void *)swift_release(v5);
    v1 = v24;
    goto LABEL_30;
  }
  v21 = *(_QWORD *)(v9 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v16)
      goto LABEL_28;
    v21 = *(_QWORD *)(v9 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1001499D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100012C44((uint64_t *)&unk_100404890);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100149B68(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v2 + 40), a1);
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v11 = *v2;
  v15 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10014947C();
    v11 = v15;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_10014A0B4(v7);
  v13 = *v2;
  *v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

uint64_t sub_100149C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v39 = a2;
  v4 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  Hasher.init(_seed:)(&v51);
  swift_bridgeObjectRetain(v8);
  AWDLPeer.AdvertisedService.hash(into:)((uint64_t)&v51);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  v44 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
    v32 = swift_bridgeObjectRelease(v8);
    v33 = 1;
    v30 = v39;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v30, v33, 1, v4, v32);
  }
  v36 = v2;
  v37 = v5;
  v38 = v4;
  v41 = ~v10;
  v42 = *(_QWORD *)(v5 + 72);
  v12 = type metadata accessor for AWDLPeer.AdvertisedService;
  v43 = v8;
  while (1)
  {
    v13 = *(_QWORD *)(v8 + 48);
    v40 = v42 * v11;
    v14 = v12;
    sub_1000637E0(v13 + v42 * v11, (uint64_t)v7, v12);
    v15 = *((_QWORD *)v7 + 1);
    v16 = *((_QWORD *)v7 + 2);
    v17 = *((_QWORD *)v7 + 3);
    v18 = *((_QWORD *)v7 + 4);
    v48 = v7[40];
    v46 = v7[41];
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a1 + 16);
    v22 = *(_QWORD *)(a1 + 24);
    v21 = *(_QWORD *)(a1 + 32);
    v47 = *(unsigned __int8 *)(a1 + 40);
    v45 = *(unsigned __int8 *)(a1 + 41);
    v51 = v15;
    v52 = v16;
    v49 = v19;
    v50 = v20;
    v23 = sub_10001C920();
    if (StringProtocol.caseInsensitiveCompare<A>(_:)(&v49, &type metadata for String, &type metadata for String, v23, v23))
    {
      goto LABEL_3;
    }
    v51 = v17;
    v52 = v18;
    v49 = v22;
    v50 = v21;
    if (StringProtocol.caseInsensitiveCompare<A>(_:)(&v49, &type metadata for String, &type metadata for String, v23, v23))
    {
      goto LABEL_3;
    }
    v24 = v48 ? 7365749 : 7365492;
    v25 = v47 ? 7365749 : 7365492;
    if (v24 == v25)
      break;
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, 0xE300000000000000, v25, 0xE300000000000000, 0);
    swift_bridgeObjectRelease_n(0xE300000000000000, 2);
    if ((v26 & 1) != 0)
      goto LABEL_16;
LABEL_3:
    v12 = v14;
    sub_100063824((uint64_t)v7, v14);
LABEL_4:
    v11 = (v11 + 1) & v41;
    v8 = v43;
    if (((*(_QWORD *)(v44 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    {
      v32 = swift_bridgeObjectRelease(v43);
      v33 = 1;
      v4 = v38;
      v30 = v39;
      v5 = v37;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v30, v33, 1, v4, v32);
    }
  }
  swift_bridgeObjectRelease_n(0xE300000000000000, 2);
LABEL_16:
  v12 = v14;
  sub_100063824((uint64_t)v7, v14);
  if (v46 != v45)
    goto LABEL_4;
  swift_bridgeObjectRelease(v43);
  v27 = v36;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v36);
  v29 = *v27;
  v51 = *v27;
  *v27 = 0x8000000000000000;
  v5 = v37;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1001497B8();
    v29 = v51;
  }
  v30 = v39;
  sub_100033AC0(*(_QWORD *)(v29 + 48) + v40, v39, type metadata accessor for AWDLPeer.AdvertisedService);
  sub_10014A238(v11);
  v31 = *v27;
  *v27 = v51;
  v32 = swift_bridgeObjectRelease(v31);
  v33 = 0;
  v4 = v38;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v30, v33, 1, v4, v32);
}

uint64_t sub_100149F90(unsigned __int8 a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = *v2;
  v5 = 1;
  v6 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(*v2 + 40), a1, 1);
  v7 = -1 << *(_BYTE *)(v4 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = *(_QWORD *)(v4 + 48);
    if (*(unsigned __int8 *)(v9 + v8) == a1)
    {
LABEL_6:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v12 = *v2;
      v16 = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1001499D8();
        v12 = v16;
      }
      v13 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 48) + v8);
      sub_10014A57C(v8);
      v14 = *v2;
      *v2 = v16;
      swift_bridgeObjectRelease(v14);
      v5 = 0;
    }
    else
    {
      v10 = ~v7;
      while (1)
      {
        v8 = (v8 + 1) & v10;
        if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v9 + v8) == a1)
          goto LABEL_6;
      }
      v13 = 0;
      v5 = 1;
    }
  }
  else
  {
    v13 = 0;
  }
  return v13 | (v5 << 8);
}

unint64_t sub_10014A0B4(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(v3);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10014A238(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  Swift::String v19;
  int64_t v20;
  Swift::String v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  Swift::Int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  int v42;
  _QWORD v43[9];

  v36 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  v3 = *(_QWORD *)(v36 - 8);
  result = __chkstk_darwin();
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v35 = v1;
    v11 = ~v9;
    swift_retain(v7);
    v12 = _HashTable.previousHole(before:)(a1, v8, v11);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (v12 + 1) & v11;
      v14 = *(_QWORD *)(v3 + 72);
      v38 = v7;
      v39 = v8;
      v40 = v11;
      v37 = v14;
      do
      {
        v15 = *(_QWORD *)(v7 + 48);
        v41 = v14 * v10;
        sub_1000637E0(v15 + v14 * v10, (uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
        Hasher.init(_seed:)(v43);
        v16 = *((_QWORD *)v6 + 2);
        v17 = *((_QWORD *)v6 + 4);
        v18 = v6[40];
        v42 = v6[41];
        v19 = String.lowercased()();
        v20 = a1;
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        String.hash(into:)(v43, v19._countAndFlagsBits, v19._object);
        swift_bridgeObjectRelease(v19._object);
        v21 = String.lowercased()();
        swift_bridgeObjectRetain(v17);
        String.hash(into:)(v43, v21._countAndFlagsBits, v21._object);
        swift_bridgeObjectRelease(v21._object);
        if (v18)
          v22 = 7365749;
        else
          v22 = 7365492;
        String.hash(into:)(v43, v22, 0xE300000000000000);
        swift_bridgeObjectRelease(0xE300000000000000);
        Hasher._combine(_:)(v42);
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease_n(v17, 2);
        v23 = Hasher._finalize()();
        v24 = v40;
        v25 = v23;
        sub_100063824((uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
        v26 = v25 & v24;
        if (a1 >= (uint64_t)v13)
        {
          if (v26 < v13)
          {
            v7 = v38;
            v8 = v39;
            v14 = v37;
            goto LABEL_6;
          }
          v7 = v38;
          v8 = v39;
          v14 = v37;
          if (a1 < (uint64_t)v26)
            goto LABEL_6;
        }
        else
        {
          v7 = v38;
          v8 = v39;
          v14 = v37;
          if (v26 < v13 && a1 < (uint64_t)v26)
            goto LABEL_6;
        }
        v27 = *(_QWORD *)(v7 + 48);
        v28 = v27 + v14 * a1;
        v29 = v27 + v41;
        if (v14 * a1 < v41 || v28 >= v29 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v28, v29, 1, v36);
        }
        else
        {
          a1 = v10;
          if (v14 * v20 == v41)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v24;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v7);
    v1 = v35;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v30 = *v1;
  v31 = *(_QWORD *)(*v1 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v30 + 16) = v33;
    ++*(_DWORD *)(v30 + 36);
  }
  return result;
}

unint64_t sub_10014A57C(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(v3);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_BYTE *)(v10 + v6);
        v12 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v3 + 40), *(unsigned __int8 *)(v10 + v6), 1) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_BYTE *)(v10 + v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10014A704(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *i;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  _QWORD v45[4];
  _OWORD v46[2];
  _OWORD v47[2];
  void *v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v9 = -1 << *(_BYTE *)(a1 + 32);
  v10 = ~v9;
  v11 = *(_QWORD *)(a1 + 64);
  v12 = -v9;
  v50 = a1;
  v51 = a1 + 64;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v52 = v10;
  v53 = 0;
  v54 = v13 & v11;
  v55 = a2;
  v56 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100196D70((uint64_t)&v48);
  v14 = v48;
  if (!v48)
    goto LABEL_26;
  sub_100033A2C(v49, v47);
  v15 = *(_QWORD **)a5;
  v17 = sub_10002DB98((uint64_t)v14);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_1001477C4();
      if ((v21 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v25 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v17 >> 6) + 64) |= 1 << v17;
    *(_QWORD *)(v25[6] + 8 * v17) = v14;
    sub_100033A2C(v47, (_OWORD *)(v25[7] + 32 * v17));
    v26 = v25[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v25[2] = v28;
LABEL_16:
    sub_100196D70((uint64_t)&v48);
    for (i = v48; v48; i = v48)
    {
      sub_100033A2C(v49, v47);
      v32 = *(_QWORD **)a5;
      v33 = sub_10002DB98((uint64_t)i);
      v35 = v32[2];
      v36 = (v34 & 1) == 0;
      v27 = __OFADD__(v35, v36);
      v37 = v35 + v36;
      if (v27)
        goto LABEL_27;
      v38 = v34;
      if (v32[3] < v37)
      {
        sub_1001425FC(v37, 1);
        v33 = sub_10002DB98((uint64_t)i);
        if ((v38 & 1) != (v39 & 1))
          goto LABEL_29;
      }
      if ((v38 & 1) != 0)
      {
        v30 = 32 * v33;
        sub_100014450(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v33, (uint64_t)v45);
        sub_100014450((uint64_t)v45, (uint64_t)v46);
        sub_100014430(v45);
        sub_100014430(v47);

        v31 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + v30);
        sub_100014430(v31);
        sub_100033A2C(v46, v31);
      }
      else
      {
        v40 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v33 >> 6) + 64) |= 1 << v33;
        *(_QWORD *)(v40[6] + 8 * v33) = i;
        sub_100033A2C(v47, (_OWORD *)(v40[7] + 32 * v33));
        v41 = v40[2];
        v27 = __OFADD__(v41, 1);
        v42 = v41 + 1;
        if (v27)
          goto LABEL_28;
        v40[2] = v42;
      }
      sub_100196D70((uint64_t)&v48);
    }
LABEL_26:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_100062B6C(v50);
    return swift_release(v56);
  }
  sub_1001425FC(v20, a4 & 1);
  v22 = sub_10002DB98((uint64_t)v14);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    if ((v21 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_100014450(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v17, (uint64_t)v45);
    sub_100014450((uint64_t)v45, (uint64_t)v46);
    sub_100014430(v45);
    sub_100014430(v47);

    v24 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v17);
    sub_100014430(v24);
    sub_100033A2C(v46, v24);
    goto LABEL_16;
  }
LABEL_29:
  type metadata accessor for CFString(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v44);
  __break(1u);
  return result;
}

id sub_10014AA68@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;

  v4 = *a1;
  sub_100014450((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;
  return v4;
}

uint64_t _s7CoreP2P16InMemoryKeychainC4save8identity3for8publiclySbAA19LongTermPairingKeysV14PublicIdentityV_AA14NANServiceNameVSbtF_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  unint64_t *v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE v38[24];

  v4 = v3;
  v8 = sub_100012C44((uint64_t *)&unk_100404EA0);
  v35 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v10 = (uint64_t)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *(_QWORD *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  __chkstk_darwin();
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(a1, (uint64_t)v12, v13);
  v14 = (unint64_t *)(v4 + 16);
  swift_beginAccess(v4 + 16, v38, 33, 0);
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + 16));
  v37 = *(_QWORD *)(v4 + 16);
  v16 = v37;
  *(_QWORD *)(v4 + 16) = 0x8000000000000000;
  v34 = a2;
  v18 = sub_10002DC20(a2, a3);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_14:
    v16 = sub_1000B22C0(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + v10) = v16;
    goto LABEL_10;
  }
  v22 = v17;
  if (*(_QWORD *)(v16 + 24) >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100147988();
      v16 = v37;
    }
  }
  else
  {
    sub_100142C40(v21, isUniquelyReferenced_nonNull_native);
    v16 = v37;
    v23 = sub_10002DC20(v34, a3);
    if ((v22 & 1) != (v24 & 1))
    {
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANServiceName);
      __break(1u);
      return result;
    }
    v18 = v23;
  }
  v25 = (_QWORD *)*v14;
  *v14 = v16;
  swift_bridgeObjectRelease(v25);
  v26 = (_QWORD *)*v14;
  if ((v22 & 1) == 0)
  {
    v27 = *(int *)(v8 + 48);
    v28 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 1, 1, v28);
    *(_QWORD *)(v10 + v27) = _swiftEmptyArrayStorage;
    sub_100148914(v18, v34, a3, v10, v26);
    swift_bridgeObjectRetain(a3);
  }
  isUniquelyReferenced_nonNull_native = v26[7] + *(_QWORD *)(v35 + 72) * v18;
  v10 = *(int *)(v8 + 48);
  v16 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + v10);
  v29 = swift_isUniquelyReferenced_nonNull_native(v16);
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + v10) = v16;
  if ((v29 & 1) == 0)
    goto LABEL_14;
LABEL_10:
  v31 = *(_QWORD *)(v16 + 16);
  v30 = *(_QWORD *)(v16 + 24);
  if (v31 >= v30 >> 1)
  {
    v16 = sub_1000B22C0(v30 > 1, v31 + 1, 1, v16);
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + v10) = v16;
  }
  *(_QWORD *)(v16 + 16) = v31 + 1;
  sub_100033AC0((uint64_t)v12, v16+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v31, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  swift_endAccess(v38);
  swift_bridgeObjectRelease(a3);
  sub_10013F848();
  return 1;
}

_QWORD *sub_10014AD84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char v52[24];
  _QWORD *v53;

  sub_100012C44(&qword_100408868);
  __chkstk_darwin();
  v46 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v9 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin();
  v49 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v51 = (uint64_t)&v41 - v11;
  v12 = _swiftEmptyArrayStorage;
  v53 = _swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(a1 + 16);
  v48 = (_QWORD *)(a2 + 16);
  swift_beginAccess(a2 + 16, v52, 0, 0);
  if (v13)
  {
    v50 = v8;
    v14 = *(unsigned __int8 *)(v9 + 80);
    v15 = *(_QWORD *)(v9 + 72);
    v41 = v2;
    v42 = (v14 + 32) & ~v14;
    v16 = a1 + v42;
    v17 = type metadata accessor for LongTermPairingKeys.PublicIdentity;
    v43 = v6;
    v18 = v44;
    v45 = v9;
    v19 = v6;
    do
    {
      v20 = v51;
      v21 = v17;
      sub_1000637E0(v16, v51, v17);
      v22 = (uint64_t)v50;
      v23 = v20;
      v24 = v19;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v50, v23, v19);
      v25 = *v48;
      if (*(_QWORD *)(*v48 + 16))
      {
        swift_bridgeObjectRetain(*v48);
        v26 = sub_10002DCA0(v22);
        if ((v27 & 1) != 0)
        {
          v28 = v46;
          sub_1000637E0(*(_QWORD *)(v25 + 56) + v26 * v15, v46, v21);
          v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
          v30 = v28;
          v31 = 0;
        }
        else
        {
          v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
          v28 = v46;
          v30 = v46;
          v31 = 1;
        }
        v34 = v47;
        v29(v30, v31, 1, v47);
        v35 = v25;
        v32 = v34;
        v9 = v45;
        v33 = swift_bridgeObjectRelease(v35);
      }
      else
      {
        v28 = v46;
        v32 = v47;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v46, 1, 1, v47);
      }
      (*(void (**)(char *, uint64_t, __n128))(v18 + 8))(v50, v24, v33);
      v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v28, 1, v32);
      sub_100033A84(v28, &qword_100408868);
      if (v36 == 1)
      {
        v17 = v21;
        sub_100033AC0(v51, v49, v21);
        v37 = v53;
        if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
        {
          sub_100075130(0, v37[2] + 1, 1);
          v37 = v53;
        }
        v39 = v37[2];
        v38 = v37[3];
        if (v39 >= v38 >> 1)
        {
          sub_100075130(v38 > 1, v39 + 1, 1);
          v37 = v53;
        }
        v37[2] = v39 + 1;
        sub_100033AC0(v49, (uint64_t)v37 + v42 + v39 * v15, v17);
        v19 = v43;
        v18 = v44;
      }
      else
      {
        v17 = v21;
        sub_100063824(v51, v21);
        v19 = v24;
      }
      v16 += v15;
      --v13;
    }
    while (v13);
    return v53;
  }
  return v12;
}

uint64_t sub_10014B0DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x797469746E656469 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E656469, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4B676E696E676973 && a2 == 0xEA00000000007965)
  {
    swift_bridgeObjectRelease(0xEA00000000007965);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4B676E696E676973, 0xEA00000000007965, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *sub_10014B1D8(char *a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  _BOOL4 v14;
  BOOL v15;
  _QWORD *v16;
  BOOL v17;
  int64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v33 = a4;
  v34 = a5;
  v32 = type metadata accessor for SymmetricKey(0);
  v8 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin();
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = 0;
  v13 = (int64_t)a1;
  while (1)
  {
    v14 = v13 <= a2;
    if (a3 > 0)
      v14 = v13 >= a2;
    if (v14)
      break;
    v15 = __OFADD__(v13, a3);
    v13 += a3;
    if (v15)
      v13 = (v13 >> 63) ^ 0x8000000000000000;
    v15 = __OFADD__(v12++, 1);
    if (v15)
    {
      __break(1u);
      break;
    }
  }
  v31 = (char *)&v30 - v11;
  v37 = _swiftEmptyArrayStorage;
  sub_100075104(0, v12, 0);
  v16 = v37;
  if (!v12)
  {
    v18 = (int64_t)a1;
    goto LABEL_26;
  }
  if (qword_1004040D8 != -1)
    goto LABEL_50;
  do
  {
    while (1)
    {
      if (!v12)
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v17 = (uint64_t)a1 <= a2;
      if (a3 > 0)
        v17 = (uint64_t)a1 >= a2;
      if (v17)
        goto LABEL_45;
      if (__OFADD__(a1, a3))
        v18 = ((uint64_t)&a1[a3] >> 63) ^ 0x8000000000000000;
      else
        v18 = (int64_t)&a1[a3];
      v19 = &a1[qword_1004087D0];
      if (__OFADD__(a1, qword_1004087D0))
        goto LABEL_46;
      if ((uint64_t)v19 >= (uint64_t)a1)
        break;
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      swift_once(&qword_1004040D8, sub_100135898);
    }
    v35 = Data._Representation.subscript.getter(a1, v19, v33, v34);
    v36 = v20;
    SymmetricKey.init<A>(data:)(&v35, &type metadata for Data, &protocol witness table for Data);
    v37 = v16;
    v22 = v16[2];
    v21 = v16[3];
    if (v22 >= v21 >> 1)
    {
      sub_100075104(v21 > 1, v22 + 1, 1);
      v16 = v37;
    }
    v16[2] = v22 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v22, v10, v32);
    a1 = (char *)v18;
    --v12;
  }
  while (v12);
LABEL_26:
  v23 = v18 <= a2;
  if (a3 > 0)
    v23 = v18 >= a2;
  if (!v23)
  {
    a1 = (char *)&protocol witness table for Data;
    v12 = (int64_t)v31;
    while (1)
    {
      if (__OFADD__(v18, a3))
        v10 = (char *)(((v18 + a3) >> 63) ^ 0x8000000000000000);
      else
        v10 = (char *)(v18 + a3);
      if (qword_1004040D8 != -1)
        swift_once(&qword_1004040D8, sub_100135898);
      v25 = v18 + qword_1004087D0;
      if (__OFADD__(v18, qword_1004087D0))
        goto LABEL_48;
      if (v25 < v18)
        goto LABEL_49;
      v35 = Data._Representation.subscript.getter(v18, v25, v33, v34);
      v36 = v26;
      SymmetricKey.init<A>(data:)(&v35, &type metadata for Data, &protocol witness table for Data);
      v37 = v16;
      v28 = v16[2];
      v27 = v16[3];
      if (v28 >= v27 >> 1)
      {
        sub_100075104(v27 > 1, v28 + 1, 1);
        v16 = v37;
      }
      v16[2] = v28 + 1;
      (*(void (**)(unint64_t, int64_t, uint64_t))(v8 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v28, v12, v32);
      v29 = (uint64_t)v10 <= a2;
      if (a3 > 0)
        v29 = (uint64_t)v10 >= a2;
      v18 = (int64_t)v10;
      if (v29)
        return v16;
    }
  }
  return v16;
}

uint64_t sub_10014B538(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _OWORD v41[2];
  __int128 v42;

  v3 = a3;
  v4 = a3 >> 8;
  v32 = a3 >> 16;
  v33 = a3 >> 24;
  v34 = HIDWORD(a3);
  v35 = a3 >> 40;
  v40 = type metadata accessor for SymmetricKey(0);
  v38 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin();
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v39 = (char *)&v31 - v7;
  v8 = SymmetricKey.withUnsafeBytes<A>(_:)(&v42, sub_10006C85C, 0, &type metadata for Data);
  v36 = 0;
  v9 = v42;
  v10 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v8);
  v12 = v11;
  v42 = v9;
  sub_100031FEC(v9, *((unint64_t *)&v9 + 1));
  sub_1000FBDAC(v10, v12);
  sub_10000E614(v10, v12);
  sub_10000E614(v9, *((unint64_t *)&v9 + 1));
  v41[0] = v42;
  v37 = v6;
  SymmetricKey.init<A>(data:)(v41, &type metadata for Data, &protocol witness table for Data);
  v13 = sub_100012C44(&qword_100403E88);
  v14 = swift_allocObject(v13, 38, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10033B190;
  *(_BYTE *)(v14 + 32) = v3;
  *(_BYTE *)(v14 + 33) = v4;
  *(_BYTE *)(v14 + 34) = v32;
  *(_BYTE *)(v14 + 35) = v33;
  *(_BYTE *)(v14 + 36) = v34;
  *(_BYTE *)(v14 + 37) = v35;
  v15 = sub_1001068EC(v14);
  v17 = v16;
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)&v42 = v15;
  *((_QWORD *)&v42 + 1) = v17;
  if (qword_1004040E8 != -1)
    swift_once(&qword_1004040E8, sub_100136BFC);
  v18 = xmmword_1004087E8;
  v41[0] = xmmword_1004087E8;
  v19 = sub_100031FEC(xmmword_1004087E8, *((unint64_t *)&xmmword_1004087E8 + 1));
  v20 = static SHA256Digest.byteCount.getter(v19);
  v21 = type metadata accessor for SHA256(0);
  v22 = sub_100011DE4(&qword_100405EC0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  v23 = sub_100068D00();
  v24 = v39;
  v25 = v37;
  static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)(v37, &v42, v41, v20, v21, &type metadata for Data, &type metadata for Data, v22, v23, v23);
  sub_10000E614(v18, *((unint64_t *)&v18 + 1));
  sub_10000E614(v15, v17);
  v26 = *(void (**)(char *, uint64_t))(v38 + 8);
  v27 = v25;
  v28 = v40;
  v26(v27, v40);
  SymmetricKey.withUnsafeBytes<A>(_:)(&v42, sub_10006C85C, 0, &type metadata for Data);
  v29 = v42;
  v26(v24, v28);
  return v29;
}

uint64_t type metadata accessor for LongTermPairingKeys.AuthenticationKeys(uint64_t a1)
{
  return sub_10000D69C(a1, (uint64_t *)&unk_100408AF8, (uint64_t)&nominal type descriptor for LongTermPairingKeys.AuthenticationKeys);
}

uint64_t sub_10014B830(uint64_t a1)
{
  uint64_t v1;

  return sub_100137BB4(a1, *(_QWORD *)(v1 + 16), *(unsigned __int16 *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v1 + 26) << 16));
}

uint64_t sub_10014B848(uint64_t a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10014B850()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014B874(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44(&qword_1004088A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
    v13 = &v9[v12];
    v14 = &v10[v12];
    v15 = type metadata accessor for SymmetricKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
    v17 = &v9[v16];
    v18 = &v10[v16];
    v19 = type metadata accessor for P256.Signing.PrivateKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for LongTermPairingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v5 + *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v8 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v5 + *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
  v10 = type metadata accessor for P256.Signing.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t initializeWithCopy for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
  v16 = v8 + v15;
  v17 = v9 + v15;
  v18 = type metadata accessor for P256.Signing.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
  v16 = v8 + v15;
  v17 = v9 + v15;
  v18 = type metadata accessor for P256.Signing.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = *(int *)(a3 + 24);
  v20 = *(_QWORD *)(a2 + v19);
  v21 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  swift_retain();
  swift_release(v21);
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
  v16 = v8 + v15;
  v17 = v9 + v15;
  v18 = type metadata accessor for P256.Signing.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = *(int *)(type metadata accessor for LongTermPairingKeys.PrivateIdentity(0) + 20);
  v16 = v8 + v15;
  v17 = v9 + v15;
  v18 = type metadata accessor for P256.Signing.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = *(int *)(a3 + 24);
  v20 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_release(v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014BED8);
}

uint64_t sub_10014BED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014BF8C);
}

uint64_t sub_10014BF8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_10014C030(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for LongTermPairingKeys.PrivateIdentity(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys.PrivateIdentity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SymmetricKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for P256.Signing.PrivateKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v6 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 20);
  v8 = type metadata accessor for P256.Signing.PrivateKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for P256.Signing.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for P256.Signing.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for P256.Signing.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for P256.Signing.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014C520);
}

uint64_t sub_10014C520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014E544(a1, a2, a3, type metadata accessor for LongTermPairingKeys.Identity, (uint64_t (*)(_QWORD))&type metadata accessor for P256.Signing.PrivateKey);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.PrivateIdentity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014C540);
}

uint64_t sub_10014C540(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10014E5DC(a1, a2, a3, a4, type metadata accessor for LongTermPairingKeys.Identity, (uint64_t (*)(_QWORD))&type metadata accessor for P256.Signing.PrivateKey);
}

uint64_t sub_10014C554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014E678(a1, a2, a3, type metadata accessor for LongTermPairingKeys.Identity, (uint64_t (*)(uint64_t))&type metadata accessor for P256.Signing.PrivateKey);
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys.PublicIdentity(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SymmetricKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for P256.Signing.PublicKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[6];
    v17 = a3[7];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (char *)a1 + v17;
    v22 = (char *)a2 + v17;
    v23 = type metadata accessor for Date(0);
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain(v20);
    if (v25(v22, 1, v23))
    {
      v26 = sub_100012C44(&qword_100408840);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
  }
  return a1;
}

uint64_t destroy for LongTermPairingKeys.PublicIdentity(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v6 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[5];
  v8 = type metadata accessor for P256.Signing.PublicKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  v9 = a1 + a2[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  return result;
}

uint64_t initializeWithCopy for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t);
  uint64_t v25;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[5];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for P256.Signing.PublicKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[6];
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (void *)(a1 + v16);
  v21 = (const void *)(a2 + v16);
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  swift_bridgeObjectRetain(v19);
  if (v24(v21, 1, v22))
  {
    v25 = sub_100012C44(&qword_100408840);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[5];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for P256.Signing.PublicKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a3[7];
  v21 = (void *)(a1 + v20);
  v22 = (void *)(a2 + v20);
  v23 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v13) = v25(v21, 1, v23);
  v26 = v25(v22, 1, v23);
  if (!(_DWORD)v13)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = sub_100012C44(&qword_100408840);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[5];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for P256.Signing.PublicKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100012C44(&qword_100408840);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for LongTermPairingKeys.Identity(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[5];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for P256.Signing.PublicKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = a3[7];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v13) = v26(v22, 1, v24);
  v27 = v26(v23, 1, v24);
  if (!(_DWORD)v13)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    v28 = sub_100012C44(&qword_100408840);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014CDE4);
}

uint64_t sub_10014CDE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = type metadata accessor for LongTermPairingKeys.Identity(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = type metadata accessor for P256.Signing.PublicKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v11 = sub_100012C44(&qword_100408840);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.PublicIdentity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014CED0);
}

uint64_t sub_10014CED0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for LongTermPairingKeys.Identity(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for P256.Signing.PublicKey(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[6] + 8) = a2;
        return result;
      }
      v10 = sub_100012C44(&qword_100408840);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10014CFA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  v2 = type metadata accessor for LongTermPairingKeys.Identity(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for P256.Signing.PublicKey(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_10034A0F8;
      sub_100061B98(319, (unint64_t *)&unk_100408A68, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for LongTermPairingKeys.AuthenticationKeys(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SymmetricKey(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_100012C44(&qword_100408868);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v10, v11, v16);
      v17 = type metadata accessor for LongTermPairingKeys.Identity(0);
      v8((uint64_t *)&v10[*(int *)(v17 + 20)], (uint64_t *)&v11[*(int *)(v17 + 20)], v7);
      v18 = v12[5];
      v19 = &v10[v18];
      v20 = &v11[v18];
      v21 = type metadata accessor for P256.Signing.PublicKey(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
      v22 = v12[6];
      v23 = &v10[v22];
      v24 = &v11[v22];
      v25 = *((_QWORD *)v24 + 1);
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_QWORD *)v23 + 1) = v25;
      v26 = v12[7];
      v27 = &v10[v26];
      v28 = &v11[v26];
      v29 = type metadata accessor for Date(0);
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
      swift_bridgeObjectRetain(v25);
      if (v31(v28, 1, v29))
      {
        v32 = sub_100012C44(&qword_100408840);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for SymmetricKey(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  v6 = a1 + a2[7];
  v7 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
    v10 = type metadata accessor for LongTermPairingKeys.Identity(0);
    v5(v6 + *(int *)(v10 + 20), v4);
    v11 = v6 + v7[5];
    v12 = type metadata accessor for P256.Signing.PublicKey(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[6] + 8));
    v13 = v6 + v7[7];
    v14 = type metadata accessor for Date(0);
    v15 = *(_QWORD *)(v14 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  return result;
}

uint64_t initializeWithCopy for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;

  v6 = type metadata accessor for SymmetricKey(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[7];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100012C44(&qword_100408868);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v9, v10, v14);
    v15 = type metadata accessor for LongTermPairingKeys.Identity(0);
    v7((uint64_t)&v9[*(int *)(v15 + 20)], (uint64_t)&v10[*(int *)(v15 + 20)], v6);
    v16 = v11[5];
    v17 = &v9[v16];
    v18 = &v10[v16];
    v19 = type metadata accessor for P256.Signing.PublicKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = v11[6];
    v21 = &v9[v20];
    v22 = &v10[v20];
    v23 = *((_QWORD *)v22 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_QWORD *)v21 + 1) = v23;
    v24 = v11[7];
    v25 = &v9[v24];
    v26 = &v10[v24];
    v27 = type metadata accessor for Date(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain(v23);
    if (v29(v26, 1, v27))
    {
      v30 = sub_100012C44(&qword_100408840);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  size_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void *, uint64_t, uint64_t);
  int v54;

  v6 = type metadata accessor for SymmetricKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v8(a1 + a3[6], a2 + a3[6], v6);
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v37 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v10, v11, v37);
      v38 = type metadata accessor for LongTermPairingKeys.Identity(0);
      v8(v10 + *(int *)(v38 + 20), (uint64_t)&v11[*(int *)(v38 + 20)], v6);
      v39 = v12[5];
      v40 = v10 + v39;
      v41 = &v11[v39];
      v42 = type metadata accessor for P256.Signing.PublicKey(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
      v43 = v12[6];
      v44 = (_QWORD *)(v10 + v43);
      v45 = &v11[v43];
      *v44 = *(_QWORD *)v45;
      v46 = *((_QWORD *)v45 + 1);
      v47 = v44[1];
      v44[1] = v46;
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRelease(v47);
      v48 = v12[7];
      v49 = (void *)(v10 + v48);
      v50 = &v11[v48];
      v51 = type metadata accessor for Date(0);
      v52 = *(_QWORD *)(v51 - 8);
      v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v52 + 48);
      LODWORD(v47) = v53(v49, 1, v51);
      v54 = v53(v50, 1, v51);
      if ((_DWORD)v47)
      {
        if (!v54)
        {
          (*(void (**)(void *, char *, uint64_t))(v52 + 16))(v49, v50, v51);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
          return a1;
        }
      }
      else
      {
        if (!v54)
        {
          (*(void (**)(void *, char *, uint64_t))(v52 + 24))(v49, v50, v51);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v52 + 8))(v49, v51);
      }
      v34 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100408840) - 8) + 64);
      v35 = v49;
      v36 = v50;
      goto LABEL_8;
    }
    sub_100063824(v10, type metadata accessor for LongTermPairingKeys.PublicIdentity);
LABEL_7:
    v34 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100408868) - 8) + 64);
    v35 = (void *)v10;
    v36 = v11;
LABEL_8:
    memcpy(v35, v36, v34);
    return a1;
  }
  if (v16)
    goto LABEL_7;
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v10, v11, v17);
  v18 = type metadata accessor for LongTermPairingKeys.Identity(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v10 + *(int *)(v18 + 20), &v11[*(int *)(v18 + 20)], v6);
  v19 = v12[5];
  v20 = v10 + v19;
  v21 = &v11[v19];
  v22 = type metadata accessor for P256.Signing.PublicKey(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = v12[6];
  v24 = (_QWORD *)(v10 + v23);
  v25 = &v11[v23];
  *v24 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  v24[1] = v26;
  v27 = v12[7];
  v28 = (void *)(v10 + v27);
  v29 = &v11[v27];
  v30 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  swift_bridgeObjectRetain(v26);
  if (v32(v29, 1, v30))
  {
    v33 = sub_100012C44(&qword_100408840);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for SymmetricKey(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[7];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100012C44(&qword_100408868);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v9, v10, v14);
    v15 = type metadata accessor for LongTermPairingKeys.Identity(0);
    v7((uint64_t)&v9[*(int *)(v15 + 20)], (uint64_t)&v10[*(int *)(v15 + 20)], v6);
    v16 = v11[5];
    v17 = &v9[v16];
    v18 = &v10[v16];
    v19 = type metadata accessor for P256.Signing.PublicKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
    *(_OWORD *)&v9[v11[6]] = *(_OWORD *)&v10[v11[6]];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    v23 = type metadata accessor for Date(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_100012C44(&qword_100408840);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void *, uint64_t, uint64_t);
  int v50;

  v6 = type metadata accessor for SymmetricKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v8(a1 + a3[6], a2 + a3[6], v6);
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v32 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v10, v11, v32);
      v33 = type metadata accessor for LongTermPairingKeys.Identity(0);
      v8(v10 + *(int *)(v33 + 20), (uint64_t)&v11[*(int *)(v33 + 20)], v6);
      v34 = v12[5];
      v35 = v10 + v34;
      v36 = &v11[v34];
      v37 = type metadata accessor for P256.Signing.PublicKey(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
      v38 = v12[6];
      v39 = (_QWORD *)(v10 + v38);
      v40 = &v11[v38];
      v42 = *(_QWORD *)v40;
      v41 = *((_QWORD *)v40 + 1);
      v43 = v39[1];
      *v39 = v42;
      v39[1] = v41;
      swift_bridgeObjectRelease(v43);
      v44 = v12[7];
      v45 = (void *)(v10 + v44);
      v46 = &v11[v44];
      v47 = type metadata accessor for Date(0);
      v48 = *(_QWORD *)(v47 - 8);
      v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
      LODWORD(v35) = v49(v45, 1, v47);
      v50 = v49(v46, 1, v47);
      if ((_DWORD)v35)
      {
        if (!v50)
        {
          (*(void (**)(void *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
          return a1;
        }
      }
      else
      {
        if (!v50)
        {
          (*(void (**)(void *, char *, uint64_t))(v48 + 40))(v45, v46, v47);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100408840) - 8) + 64);
      v30 = v45;
      v31 = v46;
      goto LABEL_8;
    }
    sub_100063824(v10, type metadata accessor for LongTermPairingKeys.PublicIdentity);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100408868) - 8) + 64);
    v30 = (void *)v10;
    v31 = v11;
LABEL_8:
    memcpy(v30, v31, v29);
    return a1;
  }
  if (v16)
    goto LABEL_7;
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v10, v11, v17);
  v18 = type metadata accessor for LongTermPairingKeys.Identity(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v10 + *(int *)(v18 + 20), &v11[*(int *)(v18 + 20)], v6);
  v19 = v12[5];
  v20 = v10 + v19;
  v21 = &v11[v19];
  v22 = type metadata accessor for P256.Signing.PublicKey(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  *(_OWORD *)(v10 + v12[6]) = *(_OWORD *)&v11[v12[6]];
  v23 = v12[7];
  v24 = (void *)(v10 + v23);
  v25 = &v11[v23];
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_100012C44(&qword_100408840);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014DEF8);
}

uint64_t sub_10014DEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for SymmetricKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100012C44(&qword_100408868);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.AuthenticationKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014DF7C);
}

uint64_t sub_10014DF7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for SymmetricKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100012C44(&qword_100408868);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10014DFFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for SymmetricKey(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = v6[0];
    sub_100061B98(319, (unint64_t *)&unk_100408B08, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_10014E094()
{
  return type metadata accessor for AppleKeychain(0);
}

uint64_t type metadata accessor for AppleKeychain(uint64_t a1)
{
  return sub_10000D69C(a1, qword_100408C98, (uint64_t)&nominal type descriptor for AppleKeychain);
}

uint64_t sub_10014E0B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10034A170;
    v4[2] = &unk_10034A170;
    v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[4] = &unk_10034A170;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for InMemoryKeychain()
{
  return objc_opt_self(_TtC7CoreP2P16InMemoryKeychain);
}

uint64_t storeEnumTagSinglePayload for LongTermPairingKeys.PrivateIdentity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10014E1B0 + 4 * byte_100349F75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014E1E4 + 4 * byte_100349F70[v4]))();
}

uint64_t sub_10014E1E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014E1EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014E1F4);
  return result;
}

uint64_t sub_10014E200(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014E208);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10014E20C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014E214(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LongTermPairingKeys.PrivateIdentity.CodingKeys()
{
  return &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys;
}

uint64_t *sub_10014E230(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SymmetricKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_10014E2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for SymmetricKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_10014E334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_10014E3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10014E42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_10014E4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10014E524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014E530);
}

uint64_t sub_10014E530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014E544(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(_QWORD))&type metadata accessor for SymmetricKey);
}

uint64_t sub_10014E544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v9 = a4(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    v13 = a1;
  }
  else
  {
    v11 = a5(0);
    v13 = a1 + *(int *)(a3 + 20);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
  }
  return v12(v13, a2, v11);
}

uint64_t sub_10014E5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014E5C8);
}

uint64_t sub_10014E5C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10014E5DC(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(_QWORD))&type metadata accessor for SymmetricKey);
}

uint64_t sub_10014E5DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v11 = a5(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a3)
  {
    v13 = v11;
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v15 = a1;
  }
  else
  {
    v13 = a6(0);
    v15 = a1 + *(int *)(a4 + 20);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  }
  return v14(v15, a2, a2, v13);
}

uint64_t sub_10014E664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014E678(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey);
}

uint64_t sub_10014E678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  result = a4(319);
  if (v8 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(result - 8) + 64;
    result = a5(319);
    if (v9 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v10, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_10014E704()
{
  unint64_t result;

  result = qword_100408F90;
  if (!qword_100408F90)
  {
    result = swift_getWitnessTable(byte_10034A280, &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408F90);
  }
  return result;
}

unint64_t sub_10014E74C()
{
  unint64_t result;

  result = qword_100408F98;
  if (!qword_100408F98)
  {
    result = swift_getWitnessTable(byte_10034A1F0, &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408F98);
  }
  return result;
}

unint64_t sub_10014E794()
{
  unint64_t result;

  result = qword_100408FA0;
  if (!qword_100408FA0)
  {
    result = swift_getWitnessTable(byte_10034A218, &type metadata for LongTermPairingKeys.PrivateIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100408FA0);
  }
  return result;
}

uint64_t sub_10014E7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10014E81C(const char *a1@<X0>, uint32_t *a2@<X8>)
{
  uint64_t v2;

  sub_10013A528(a1, v2, a2);
}

uint64_t sub_10014E834()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014E858(uint64_t a1)
{
  uint64_t v1;

  return sub_10013A65C(a1, v1);
}

double sub_10014E860()
{
  uint64_t v0;

  return sub_100135F98(v0);
}

uint64_t sub_10014E878()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10001C964(v0, qword_100409068);
  sub_100014C44(v0, (uint64_t)qword_100409068);
  return Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 1953066601, 0xE400000000000000);
}

char *static Sandbox.check()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10033425C();
  if (v4)
    return (char *)v4;
  if (qword_1004040F0 != -1)
    swift_once(&qword_1004040F0, sub_10014E878);
  v5 = sub_100014C44(v0, (uint64_t)qword_100409068);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (!os_log_type_enabled(v7, v8))
  {
LABEL_7:

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return (char *)v4;
  }
  v9 = (uint8_t *)swift_slowAlloc(12, -1);
  v10 = swift_slowAlloc(32, -1);
  v18 = v10;
  *(_DWORD *)v9 = 136315138;
  v12 = errno.getter(v10, v11);
  result = strerror(v12);
  if (result)
  {
    v14 = String.init(cString:)(result);
    v16 = v15;
    v17 = sub_100013CC8(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Sandbox check failed with error: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Sandbox()
{
  return &type metadata for Sandbox;
}

uint64_t sub_10014EAD0(unsigned __int8 a1, char a2)
{
  int v4;
  uint64_t v5;
  uint64_t result;

  v4 = a1;
  v5 = sub_100012C44(&qword_100406E48);
  if (v4 == 2)
    return 0;
  if (a2 == 2)
    return 1;
  if (a1 == 3)
    return 0;
  if (a2 == 3)
    return 1;
  if ((a1 - 2) >= 5u && (a1 & 1) == 0)
    return 0;
  if ((a2 - 2) >= 5u && (a2 & 1) == 0)
    return 1;
  if ((a1 - 2) >= 5u && (a1 & 1) != 0)
    return 0;
  if ((a2 - 2) >= 5u && (a2 & 1) != 0)
    return 1;
  if (a1 == 4)
    return 0;
  if (a2 == 4)
    return 1;
  if (a1 == 5)
    return 0;
  if (a2 == 5)
    return 1;
  if (a1 == 6)
    return 0;
  if (a2 == 6)
    return 1;
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v5, v5);
  __break(1u);
  return result;
}

BOOL sub_10014EBDC(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = *(_DWORD *)&asc_10034A4D8[4 * (int)a2];
  if ((a1 & 0x100000000) != 0)
    LODWORD(a1) = *(_DWORD *)&asc_10034A4D8[4 * (int)a1];
  return a2 < a1;
}

uint64_t AWDLElectionMetric.rawValue.getter(uint64_t result)
{
  if ((result & 0x100000000) != 0)
    return *(unsigned int *)&asc_10034A4D8[4 * (int)result];
  return result;
}

uint64_t static AWDLElectionMetric.__derived_enum_equals(_:_:)(unint64_t a1, unint64_t a2)
{
  return sub_10014EE34(a1, a2, sub_10014F120);
}

void *AWDLElectionMetric.appleTVSoloAndPrivateElectionCapableInIdleMode.unsafeMutableAddressor()
{
  return &static AWDLElectionMetric.appleTVSoloAndPrivateElectionCapableInIdleMode;
}

uint64_t static AWDLElectionMetric.appleTVSoloAndPrivateElectionCapableInIdleMode.getter()
{
  return 0x100000004;
}

uint64_t AWDLElectionMetric.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v10, v3, v4);
  if (v1)
    return sub_100014430(a1);
  v5 = v11;
  v6 = v12;
  sub_10003259C(v10, v11);
  v7 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5, v6);
  v8 = sub_10014F20C(v7);
  sub_100014430(v10);
  sub_100014430(a1);
  return v8 | ((HIDWORD(v8) & 1) << 32);
}

uint64_t AWDLElectionMetric.init(rawValue:)(int a1)
{
  unint64_t v1;

  v1 = sub_10014F20C(a1);
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t AWDLElectionMetric.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v8, v3, v4);
  if ((a2 & 0x100000000) != 0)
    a2 = *(unsigned int *)&asc_10034A4D8[4 * (int)a2];
  v5 = v9;
  v6 = v10;
  sub_100034C68((uint64_t)v8, v9);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(a2, v5, v6);
  return sub_100014430(v8);
}

void AWDLElectionMetric.hash(into:)(int a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = *(_DWORD *)&asc_10034A4D8[4 * (int)a2];
  Hasher._combine(_:)(a2);
}

uint64_t static AWDLElectionMetric.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return sub_10014EE34(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_10014F1E0);
}

uint64_t sub_10014EE34(unint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  return a3(a1 | ((HIDWORD(a1) & 1) << 32), a2 | ((HIDWORD(a2) & 1) << 32));
}

Swift::Int AWDLElectionMetric.hashValue.getter(uint64_t a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  if ((a1 & 0x100000000) != 0)
    LODWORD(a1) = *(_DWORD *)&asc_10034A4D8[4 * (int)a1];
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_10014EEB0(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F0EC(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_10014F1E0);
}

uint64_t sub_10014EEBC(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F0EC(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_10017C550);
}

uint64_t sub_10014EEC8(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F0EC(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_1000C5F4C);
}

uint64_t sub_10014EED4(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F0EC(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_10014EBDC);
}

uint64_t sub_10014EEE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v12, v5, v6);
  if (v2)
    return sub_100014430(a1);
  v7 = v13;
  v8 = v14;
  sub_10003259C(v12, v13);
  v9 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v7, v8);
  v10 = sub_10014F20C(v9);
  sub_100014430(v12);
  result = sub_100014430(a1);
  *(_DWORD *)a2 = v10;
  *(_BYTE *)(a2 + 4) = BYTE4(v10) & 1;
  return result;
}

uint64_t sub_10014EFB0(_QWORD *a1)
{
  unsigned int *v1;

  return AWDLElectionMetric.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

Swift::Int sub_10014EFE0()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  _QWORD v4[9];

  v1 = *(_DWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)(v4);
  if (v2 == 1)
    v1 = *(_DWORD *)&asc_10034A4D8[4 * v1];
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10014F040()
{
  uint64_t v0;
  Swift::UInt32 v1;

  v1 = *(_DWORD *)v0;
  if (*(_BYTE *)(v0 + 4) == 1)
    v1 = *(_DWORD *)&asc_10034A4D8[4 * v1];
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10014F084()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  _QWORD v4[9];

  v1 = *(_DWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher.init(_seed:)(v4);
  if (v2 == 1)
    v1 = *(_DWORD *)&asc_10034A4D8[4 * v1];
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10014F0E0(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_10014F0EC(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t))sub_10014F120);
}

uint64_t sub_10014F0EC(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32));
}

uint64_t sub_10014F120(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0)
    return ((uint64_t (*)(void))((char *)&loc_10014F14C + 4 * byte_10034A380[a1]))();
  if ((a2 & 0x100000000) != 0)
    return 0;
  return (_DWORD)a1 == (_DWORD)a2;
}

BOOL sub_10014F1E0(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0)
    LODWORD(a1) = *(_DWORD *)&asc_10034A4D8[4 * (int)a1];
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = *(_DWORD *)&asc_10034A4D8[4 * (int)a2];
  return a1 < a2;
}

unint64_t sub_10014F20C(int a1)
{
  BOOL v1;
  int v2;
  int v3;
  BOOL v4;

  v1 = 0;
  if (a1 > 504)
  {
    if (a1 == 655)
      v2 = 6;
    else
      v2 = a1;
    v1 = a1 == 655;
    if (a1 == 650)
      v3 = 5;
    else
      v3 = v2;
    if (a1 == 650)
      v1 = 1;
    v4 = a1 == 505;
    if (a1 == 505)
      a1 = 4;
    else
      a1 = v3;
    if (v4)
      v1 = 1;
  }
  else
  {
    switch(a1)
    {
      case '=':
        a1 = 0;
        v1 = 1;
        break;
      case '@':
        a1 = 1;
        v1 = 1;
        break;
      case 'P':
        v1 = 1;
        a1 = 2;
        break;
        v1 = 1;
        a1 = 3;
        break;
      default:
        return a1 | ((unint64_t)v1 << 32);
    }
  }
  return a1 | ((unint64_t)v1 << 32);
}

unint64_t sub_10014F2C8()
{
  unint64_t result;

  result = qword_100409080;
  if (!qword_100409080)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLElectionMetric, &type metadata for AWDLElectionMetric);
    atomic_store(result, (unint64_t *)&qword_100409080);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AWDLElectionMetric(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.RangingInformation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.RangingInformation(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_10014F36C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10014F388(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLElectionMetric()
{
  return &type metadata for AWDLElectionMetric;
}

uint64_t sub_10014F3B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t result;
  int64_t v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  _BYTE v28[8];
  _BYTE v29[32];
  _OWORD v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v1 = a1;
  v26 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v2 + 63) >> 6;
  v5 = (char *)v32 + 8;
  result = swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  v9 = &type metadata for Any[8];
  if (v4)
    goto LABEL_6;
LABEL_7:
  v12 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v12 < v27)
    {
      v13 = *(_QWORD *)(v26 + 8 * v12);
      ++v7;
      if (v13)
        goto LABEL_22;
      v7 = v12 + 1;
      if (v12 + 1 >= v27)
        goto LABEL_36;
      v13 = *(_QWORD *)(v26 + 8 * v7);
      if (v13)
        goto LABEL_22;
      v7 = v12 + 2;
      if (v12 + 2 >= v27)
        goto LABEL_36;
      v13 = *(_QWORD *)(v26 + 8 * v7);
      if (v13)
        goto LABEL_22;
      v7 = v12 + 3;
      if (v12 + 3 >= v27)
        goto LABEL_36;
      v13 = *(_QWORD *)(v26 + 8 * v7);
      if (v13)
      {
LABEL_22:
        v4 = (v13 - 1) & v13;
        for (i = __clz(__rbit64(v13)) + (v7 << 6); ; i = v10 | (v7 << 6))
        {
          v15 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + i);
          sub_100014450(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v5);
          LOBYTE(v32[0]) = v15;
          v30[0] = v32[0];
          v30[1] = v32[1];
          v31 = v33;
          v28[0] = v15;
          sub_100014450((uint64_t)v30 + 8, (uint64_t)v29);
          v16 = sub_100032C0C();
          if (swift_dynamicCast(&v34, v29, v9, v16, 6))
          {
            v17 = v5;
            v18 = v1;
            v19 = v34;
            if (LOBYTE(v30[0]))
              v20 = 0x64657463656A6572;
            else
              v20 = 0x6553657669746361;
            if (LOBYTE(v30[0]))
              v21 = 0xEF65636976726553;
            else
              v21 = 0xED00006563697672;
            sub_100033A84((uint64_t)v30, &qword_100409368);
            result = swift_isUniquelyReferenced_nonNull_native(v8);
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_1000B2D84(0, v8[2] + 1, 1, v8);
              v8 = (_QWORD *)result;
            }
            v23 = v8[2];
            v22 = v8[3];
            v24 = v8;
            if (v23 >= v22 >> 1)
            {
              result = (uint64_t)sub_1000B2D84((_QWORD *)(v22 > 1), v23 + 1, 1, v8);
              v24 = (_QWORD *)result;
            }
            v24[2] = v23 + 1;
            v8 = v24;
            v25 = &v24[3 * v23];
            v25[4] = v20;
            v25[5] = v21;
            v25[6] = v19;
            v1 = v18;
            v5 = v17;
            v9 = &type metadata for Any[8];
            if (!v4)
              goto LABEL_7;
          }
          else
          {
            v28[0] = v30[0];
            sub_100014450((uint64_t)v30 + 8, (uint64_t)v29);
            sub_100033A84((uint64_t)v28, &qword_100409368);
            result = sub_100033A84((uint64_t)v30, &qword_100409368);
            if (!v4)
              goto LABEL_7;
          }
LABEL_6:
          v10 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      v14 = v12 + 4;
      if (v14 < v27)
      {
        v13 = *(_QWORD *)(v26 + 8 * v14);
        if (v13)
        {
          v7 = v14;
          goto LABEL_22;
        }
        while (1)
        {
          v7 = v14 + 1;
          if (__OFADD__(v14, 1))
            goto LABEL_38;
          if (v7 >= v27)
            break;
          v13 = *(_QWORD *)(v26 + 8 * v7);
          ++v14;
          if (v13)
            goto LABEL_22;
        }
      }
    }
LABEL_36:
    swift_release(v1);
    return (uint64_t)v8;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_10014F710(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v14;
  int64_t v15;
  _BYTE v16[8];
  _BYTE v17[32];
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v14 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v15 = (unint64_t)(v2 + 63) >> 6;
  v5 = 0;
  swift_bridgeObjectRetain(a1);
  if (v4)
    goto LABEL_6;
  while (1)
  {
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v8 >= v15)
      goto LABEL_25;
    v9 = *(_QWORD *)(v14 + 8 * v8);
    ++v5;
    if (!v9)
    {
      v5 = v8 + 1;
      if (v8 + 1 >= v15)
        goto LABEL_25;
      v9 = *(_QWORD *)(v14 + 8 * v5);
      if (!v9)
      {
        v5 = v8 + 2;
        if (v8 + 2 >= v15)
          goto LABEL_25;
        v9 = *(_QWORD *)(v14 + 8 * v5);
        if (!v9)
        {
          v5 = v8 + 3;
          if (v8 + 3 >= v15)
            goto LABEL_25;
          v9 = *(_QWORD *)(v14 + 8 * v5);
          if (!v9)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v9 - 1) & v9;
    for (i = __clz(__rbit64(v9)) + (v5 << 6); ; i = v6 | (v5 << 6))
    {
      v11 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + i);
      sub_100014450(*(_QWORD *)(a1 + 56) + 32 * i, (uint64_t)v20 + 8);
      LOBYTE(v20[0]) = v11;
      v18[0] = v20[0];
      v18[1] = v20[1];
      v19 = v21;
      v16[0] = v11;
      sub_100014450((uint64_t)v18 + 8, (uint64_t)v17);
      v12 = sub_100032C0C();
      if (swift_dynamicCast(&v22, v17, &type metadata for Any[8], v12, 6))
        __asm { BR              X9 }
      v16[0] = v18[0];
      sub_100014450((uint64_t)v18 + 8, (uint64_t)v17);
      sub_100033A84((uint64_t)v16, &qword_100409360);
      sub_100033A84((uint64_t)v18, &qword_100409360);
      if (!v4)
        break;
LABEL_6:
      v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
    }
  }
  v10 = v8 + 4;
  if (v10 < v15)
  {
    v9 = *(_QWORD *)(v14 + 8 * v10);
    if (!v9)
    {
      while (1)
      {
        v5 = v10 + 1;
        if (__OFADD__(v10, 1))
          break;
        if (v5 >= v15)
          goto LABEL_25;
        v9 = *(_QWORD *)(v14 + 8 * v5);
        ++v10;
        if (v9)
          goto LABEL_22;
      }
LABEL_27:
      __break(1u);
      JUMPOUT(0x10014FAC4);
    }
    v5 = v10;
    goto LABEL_22;
  }
LABEL_25:
  swift_release(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10014FAE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  char v25[8];
  _BYTE v26[32];
  _OWORD v27[2];
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  uint64_t v31;

  v1 = a1;
  v23 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v24 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v6 = 0;
  v7 = _swiftEmptyArrayStorage;
  v8 = &type metadata for Any[8];
  v22 = result;
  if (v4)
    goto LABEL_6;
LABEL_7:
  v11 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v11 < v24)
    {
      v12 = *(_QWORD *)(v23 + 8 * v11);
      ++v6;
      if (v12)
        goto LABEL_22;
      v6 = v11 + 1;
      if (v11 + 1 >= v24)
        goto LABEL_35;
      v12 = *(_QWORD *)(v23 + 8 * v6);
      if (v12)
        goto LABEL_22;
      v6 = v11 + 2;
      if (v11 + 2 >= v24)
        goto LABEL_35;
      v12 = *(_QWORD *)(v23 + 8 * v6);
      if (v12)
        goto LABEL_22;
      v6 = v11 + 3;
      if (v11 + 3 >= v24)
        goto LABEL_35;
      v12 = *(_QWORD *)(v23 + 8 * v6);
      if (v12)
      {
LABEL_22:
        v4 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v6 << 6); ; i = v9 | (v6 << 6))
        {
          v14 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + i);
          sub_100014450(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v29 + 8);
          LOBYTE(v29[0]) = v14;
          v27[0] = v29[0];
          v27[1] = v29[1];
          v28 = v30;
          v25[0] = v14;
          sub_100014450((uint64_t)v27 + 8, (uint64_t)v26);
          v15 = sub_100032C0C();
          if (swift_dynamicCast(&v31, v26, v8, v15, 6))
          {
            if (LOBYTE(v27[0]))
            {
              if (LOBYTE(v27[0]) == 1)
              {
                v16 = 0xEB00000000726F74;
                v17 = 0x616974696E497369;
              }
              else
              {
                v16 = 0xE800000000000000;
                v17 = 0x6E6F697461727564;
              }
            }
            else
            {
              v16 = 0xE700000000000000;
              v17 = 0x65636976726573;
            }
            v18 = v31;
            sub_100033A84((uint64_t)v27, &qword_100409358);
            result = swift_isUniquelyReferenced_nonNull_native(v7);
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_1000B2D84(0, v7[2] + 1, 1, v7);
              v7 = (_QWORD *)result;
            }
            v20 = v7[2];
            v19 = v7[3];
            if (v20 >= v19 >> 1)
            {
              result = (uint64_t)sub_1000B2D84((_QWORD *)(v19 > 1), v20 + 1, 1, v7);
              v7 = (_QWORD *)result;
            }
            v7[2] = v20 + 1;
            v21 = &v7[3 * v20];
            v21[4] = v17;
            v21[5] = v16;
            v21[6] = v18;
            v1 = v22;
            v8 = &type metadata for Any[8];
            if (!v4)
              goto LABEL_7;
          }
          else
          {
            v25[0] = v27[0];
            sub_100014450((uint64_t)v27 + 8, (uint64_t)v26);
            sub_100033A84((uint64_t)v25, &qword_100409358);
            result = sub_100033A84((uint64_t)v27, &qword_100409358);
            if (!v4)
              goto LABEL_7;
          }
LABEL_6:
          v9 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      v13 = v11 + 4;
      if (v13 < v24)
      {
        v12 = *(_QWORD *)(v23 + 8 * v13);
        if (v12)
        {
          v6 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          v6 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_37;
          if (v6 >= v24)
            break;
          v12 = *(_QWORD *)(v23 + 8 * v6);
          ++v13;
          if (v12)
            goto LABEL_22;
        }
      }
    }
LABEL_35:
    swift_release(v1);
    return (uint64_t)v7;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10014FE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t result;
  int64_t v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  _BYTE v28[8];
  _BYTE v29[32];
  _OWORD v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v1 = a1;
  v26 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v2 + 63) >> 6;
  v5 = (char *)v32 + 8;
  result = swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  v9 = &type metadata for Any[8];
  if (v4)
    goto LABEL_6;
LABEL_7:
  v12 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v12 < v27)
    {
      v13 = *(_QWORD *)(v26 + 8 * v12);
      ++v7;
      if (v13)
        goto LABEL_22;
      v7 = v12 + 1;
      if (v12 + 1 >= v27)
        goto LABEL_36;
      v13 = *(_QWORD *)(v26 + 8 * v7);
      if (v13)
        goto LABEL_22;
      v7 = v12 + 2;
      if (v12 + 2 >= v27)
        goto LABEL_36;
      v13 = *(_QWORD *)(v26 + 8 * v7);
      if (v13)
        goto LABEL_22;
      v7 = v12 + 3;
      if (v12 + 3 >= v27)
        goto LABEL_36;
      v13 = *(_QWORD *)(v26 + 8 * v7);
      if (v13)
      {
LABEL_22:
        v4 = (v13 - 1) & v13;
        for (i = __clz(__rbit64(v13)) + (v7 << 6); ; i = v10 | (v7 << 6))
        {
          v15 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + i);
          sub_100014450(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v5);
          LOBYTE(v32[0]) = v15;
          v30[0] = v32[0];
          v30[1] = v32[1];
          v31 = v33;
          v28[0] = v15;
          sub_100014450((uint64_t)v30 + 8, (uint64_t)v29);
          v16 = sub_100032C0C();
          if (swift_dynamicCast(&v34, v29, v9, v16, 6))
          {
            v17 = v5;
            v18 = v1;
            v19 = v34;
            if (LOBYTE(v30[0]))
              v20 = 0x6E6F73616572;
            else
              v20 = 0x65636976726573;
            if (LOBYTE(v30[0]))
              v21 = 0xE600000000000000;
            else
              v21 = 0xE700000000000000;
            sub_100033A84((uint64_t)v30, &qword_100409350);
            result = swift_isUniquelyReferenced_nonNull_native(v8);
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_1000B2D84(0, v8[2] + 1, 1, v8);
              v8 = (_QWORD *)result;
            }
            v23 = v8[2];
            v22 = v8[3];
            v24 = v8;
            if (v23 >= v22 >> 1)
            {
              result = (uint64_t)sub_1000B2D84((_QWORD *)(v22 > 1), v23 + 1, 1, v8);
              v24 = (_QWORD *)result;
            }
            v24[2] = v23 + 1;
            v8 = v24;
            v25 = &v24[3 * v23];
            v25[4] = v20;
            v25[5] = v21;
            v25[6] = v19;
            v1 = v18;
            v5 = v17;
            v9 = &type metadata for Any[8];
            if (!v4)
              goto LABEL_7;
          }
          else
          {
            v28[0] = v30[0];
            sub_100014450((uint64_t)v30 + 8, (uint64_t)v29);
            sub_100033A84((uint64_t)v28, &qword_100409350);
            result = sub_100033A84((uint64_t)v30, &qword_100409350);
            if (!v4)
              goto LABEL_7;
          }
LABEL_6:
          v10 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      v14 = v12 + 4;
      if (v14 < v27)
      {
        v13 = *(_QWORD *)(v26 + 8 * v14);
        if (v13)
        {
          v7 = v14;
          goto LABEL_22;
        }
        while (1)
        {
          v7 = v14 + 1;
          if (__OFADD__(v14, 1))
            goto LABEL_38;
          if (v7 >= v27)
            break;
          v13 = *(_QWORD *)(v26 + 8 * v7);
          ++v14;
          if (v13)
            goto LABEL_22;
        }
      }
    }
LABEL_36:
    swift_release(v1);
    return (uint64_t)v8;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10015016C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;
  __int128 v27;
  _QWORD v28[4];
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  _OWORD v32[2];
  uint64_t v33;

  v1 = a1;
  v24 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v6 = 0;
  v26 = _swiftEmptyArrayStorage;
  v7 = &type metadata for Any[8];
  v23 = result;
  if (v4)
    goto LABEL_6;
LABEL_7:
  v11 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v11 < v25)
    {
      v12 = *(_QWORD *)(v24 + 8 * v11);
      ++v6;
      if (v12)
        goto LABEL_22;
      v6 = v11 + 1;
      if (v11 + 1 >= v25)
        goto LABEL_30;
      v12 = *(_QWORD *)(v24 + 8 * v6);
      if (v12)
        goto LABEL_22;
      v6 = v11 + 2;
      if (v11 + 2 >= v25)
        goto LABEL_30;
      v12 = *(_QWORD *)(v24 + 8 * v6);
      if (v12)
        goto LABEL_22;
      v6 = v11 + 3;
      if (v11 + 3 >= v25)
        goto LABEL_30;
      v12 = *(_QWORD *)(v24 + 8 * v6);
      if (v12)
      {
LABEL_22:
        v4 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v6 << 6); ; i = v9 | (v6 << 6))
        {
          v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
          v16 = *v14;
          v15 = v14[1];
          sub_100014450(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v32);
          *(_QWORD *)&v31 = v16;
          *((_QWORD *)&v31 + 1) = v15;
          v29 = v31;
          v30[0] = v32[0];
          v30[1] = v32[1];
          v27 = v31;
          sub_100014450((uint64_t)v30, (uint64_t)v28);
          v17 = sub_100032C0C();
          swift_bridgeObjectRetain(v15);
          if (swift_dynamicCast(&v33, v28, v7, v17, 6))
          {
            v18 = v33;
            v19 = v29;
            v27 = v29;
            sub_100014450((uint64_t)v30, (uint64_t)v28);
            swift_bridgeObjectRetain(*((_QWORD *)&v19 + 1));
            sub_100014430(v28);
            sub_100033A84((uint64_t)&v29, &qword_100409340);
            result = swift_isUniquelyReferenced_nonNull_native(v26);
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_1000B2D84(0, v26[2] + 1, 1, v26);
              v26 = (_QWORD *)result;
            }
            v21 = v26[2];
            v20 = v26[3];
            if (v21 >= v20 >> 1)
            {
              result = (uint64_t)sub_1000B2D84((_QWORD *)(v20 > 1), v21 + 1, 1, v26);
              v26 = (_QWORD *)result;
            }
            v26[2] = v21 + 1;
            v22 = &v26[3 * v21];
            *((_OWORD *)v22 + 2) = v19;
            v22[6] = v18;
            v1 = v23;
            v7 = &type metadata for Any[8];
            if (!v4)
              goto LABEL_7;
          }
          else
          {
            v8 = *((_QWORD *)&v29 + 1);
            v27 = v29;
            sub_100014450((uint64_t)v30, (uint64_t)v28);
            swift_bridgeObjectRetain(v8);
            sub_100033A84((uint64_t)&v27, &qword_100409340);
            result = sub_100033A84((uint64_t)&v29, &qword_100409340);
            if (!v4)
              goto LABEL_7;
          }
LABEL_6:
          v9 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      v13 = v11 + 4;
      if (v13 < v25)
      {
        v12 = *(_QWORD *)(v24 + 8 * v13);
        if (v12)
        {
          v6 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          v6 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_32;
          if (v6 >= v25)
            break;
          v12 = *(_QWORD *)(v24 + 8 * v6);
          ++v13;
          if (v12)
            goto LABEL_22;
        }
      }
    }
LABEL_30:
    swift_release(v1);
    return (uint64_t)v26;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1001504AC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t result;
  int64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  _BYTE v33[8];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  uint64_t v39;

  v4 = a1;
  v30 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = &v34;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  v32 = _swiftEmptyArrayStorage;
  v11 = &type metadata for Any[8];
  v29 = a3;
  if (v7)
    goto LABEL_6;
LABEL_7:
  v14 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v14 < v31)
    {
      v15 = *(_QWORD *)(v30 + 8 * v14);
      ++v10;
      if (v15)
        goto LABEL_22;
      v10 = v14 + 1;
      if (v14 + 1 >= v31)
        goto LABEL_30;
      v15 = *(_QWORD *)(v30 + 8 * v10);
      if (v15)
        goto LABEL_22;
      v10 = v14 + 2;
      if (v14 + 2 >= v31)
        goto LABEL_30;
      v15 = *(_QWORD *)(v30 + 8 * v10);
      if (v15)
        goto LABEL_22;
      v10 = v14 + 3;
      if (v14 + 3 >= v31)
        goto LABEL_30;
      v15 = *(_QWORD *)(v30 + 8 * v10);
      if (v15)
      {
LABEL_22:
        v7 = (v15 - 1) & v15;
        for (i = __clz(__rbit64(v15)) + (v10 << 6); ; i = v12 | (v10 << 6))
        {
          v17 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + i);
          sub_100014450(*(_QWORD *)(v4 + 56) + 32 * i, (uint64_t)v37 + 8);
          LOBYTE(v37[0]) = v17;
          v35[0] = v37[0];
          v35[1] = v37[1];
          v36 = v38;
          v33[0] = v17;
          sub_100014450((uint64_t)v35 + 8, (uint64_t)v8);
          v18 = sub_100032C0C();
          if (swift_dynamicCast(&v39, v8, v11, v18, 6))
          {
            v19 = v8;
            v20 = v4;
            v21 = v39;
            v22 = a2(LOBYTE(v35[0]));
            v24 = v23;
            sub_100033A84((uint64_t)v35, a3);
            result = swift_isUniquelyReferenced_nonNull_native(v32);
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_1000B2D84(0, v32[2] + 1, 1, v32);
              v32 = (_QWORD *)result;
            }
            v26 = v32[2];
            v25 = v32[3];
            if (v26 >= v25 >> 1)
            {
              result = (uint64_t)sub_1000B2D84((_QWORD *)(v25 > 1), v26 + 1, 1, v32);
              v32 = (_QWORD *)result;
            }
            v32[2] = v26 + 1;
            v27 = &v32[3 * v26];
            v27[4] = v22;
            v27[5] = v24;
            v27[6] = v21;
            a3 = v29;
            v4 = v20;
            v8 = v19;
            v11 = &type metadata for Any[8];
            if (!v7)
              goto LABEL_7;
          }
          else
          {
            v33[0] = v35[0];
            sub_100014450((uint64_t)v35 + 8, (uint64_t)v8);
            sub_100033A84((uint64_t)v33, a3);
            result = sub_100033A84((uint64_t)v35, a3);
            if (!v7)
              goto LABEL_7;
          }
LABEL_6:
          v12 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      v16 = v14 + 4;
      if (v16 < v31)
      {
        v15 = *(_QWORD *)(v30 + 8 * v16);
        if (v15)
        {
          v10 = v16;
          goto LABEL_22;
        }
        while (1)
        {
          v10 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_32;
          if (v10 >= v31)
            break;
          v15 = *(_QWORD *)(v30 + 8 * v10);
          ++v16;
          if (v15)
            goto LABEL_22;
        }
      }
    }
LABEL_30:
    swift_release(v4);
    return (uint64_t)v32;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1001507D4@<X0>(char a1@<W0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, __int16 a11, __int128 a12, __int128 a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,char a27,char a28,char a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  _QWORD *v44;

  *(_BYTE *)a9 = a1;
  *(_WORD *)(a9 + 1) = a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_QWORD *)(a9 + 24) = a5;
  *(_DWORD *)(a9 + 32) = a6;
  *(_WORD *)(a9 + 36) = WORD2(a6);
  *(_DWORD *)(a9 + 40) = a7;
  *(_WORD *)(a9 + 44) = WORD2(a7);
  *(_DWORD *)(a9 + 48) = a8;
  *(_WORD *)(a9 + 52) = WORD2(a8);
  *(_DWORD *)(a9 + 56) = a10;
  *(_WORD *)(a9 + 60) = a11;
  *(_QWORD *)(a9 + 96) = a14;
  *(_QWORD *)(a9 + 104) = a15;
  *(_BYTE *)(a9 + 112) = a16;
  *(_OWORD *)(a9 + 64) = a12;
  *(_OWORD *)(a9 + 80) = a13;
  v40 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  v41 = a9 + v40[20];
  v42 = type metadata accessor for DispatchTimeInterval(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v41, a17, v42);
  *(_QWORD *)(a9 + v40[21]) = a18;
  *(_QWORD *)(a9 + v40[22]) = a19;
  *(_QWORD *)(a9 + v40[23]) = a20;
  *(_QWORD *)(a9 + v40[24]) = a21;
  *(_QWORD *)(a9 + v40[25]) = a22;
  *(_QWORD *)(a9 + v40[26]) = a23;
  *(_QWORD *)(a9 + v40[27]) = a24;
  *(_QWORD *)(a9 + v40[28]) = a25;
  *(_WORD *)(a9 + v40[29]) = a26;
  *(_BYTE *)(a9 + v40[30]) = a27;
  *(_BYTE *)(a9 + v40[31]) = a28;
  *(_BYTE *)(a9 + v40[32]) = a29;
  *(_BYTE *)(a9 + v40[33]) = a30;
  *(_BYTE *)(a9 + v40[34]) = a31;
  *(_BYTE *)(a9 + v40[35]) = a32;
  v44 = (_QWORD *)(a9 + v40[36]);
  *v44 = a33;
  v44[1] = a34;
  *(_BYTE *)(a9 + v40[37]) = a35;
  *(_QWORD *)(a9 + v40[38]) = a36;
  *(_QWORD *)(a9 + v40[39]) = a37;
  *(_QWORD *)(a9 + v40[40]) = a38;
  *(_QWORD *)(a9 + v40[41]) = a39;
  return result;
}

BOOL static AWDLStatistics.LowLatencyStatistics.__derived_struct_equals(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned __int8 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v31[9];
  _OWORD v32[9];
  _OWORD v33[13];
  uint64_t v34;
  _OWORD v35[13];
  uint64_t v36;

  if (!_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(a1, a2))
    return 0;
  v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  v5 = &a1[*(int *)(v4 + 20)];
  v6 = *((_OWORD *)v5 + 11);
  v33[10] = *((_OWORD *)v5 + 10);
  v33[11] = v6;
  v33[12] = *((_OWORD *)v5 + 12);
  v34 = *((_QWORD *)v5 + 26);
  v7 = *((_OWORD *)v5 + 7);
  v33[6] = *((_OWORD *)v5 + 6);
  v33[7] = v7;
  v8 = *((_OWORD *)v5 + 9);
  v33[8] = *((_OWORD *)v5 + 8);
  v33[9] = v8;
  v9 = *((_OWORD *)v5 + 3);
  v33[2] = *((_OWORD *)v5 + 2);
  v33[3] = v9;
  v10 = *((_OWORD *)v5 + 5);
  v33[4] = *((_OWORD *)v5 + 4);
  v33[5] = v10;
  v11 = *((_OWORD *)v5 + 1);
  v33[0] = *(_OWORD *)v5;
  v33[1] = v11;
  v13 = *(_OWORD *)(v5 + 264);
  v12 = *(_OWORD *)(v5 + 280);
  v31[2] = *(_OWORD *)(v5 + 248);
  v31[3] = v13;
  v14 = *(_OWORD *)(v5 + 232);
  v15 = *(_OWORD *)(v5 + 344);
  v31[7] = *(_OWORD *)(v5 + 328);
  v31[8] = v15;
  v16 = *(_OWORD *)(v5 + 312);
  v31[5] = *(_OWORD *)(v5 + 296);
  v31[6] = v16;
  v31[4] = v12;
  v31[0] = *(_OWORD *)(v5 + 216);
  v31[1] = v14;
  v17 = &a2[*(int *)(v4 + 20)];
  v18 = *((_OWORD *)v17 + 11);
  v35[10] = *((_OWORD *)v17 + 10);
  v35[11] = v18;
  v35[12] = *((_OWORD *)v17 + 12);
  v36 = *((_QWORD *)v17 + 26);
  v19 = *((_OWORD *)v17 + 7);
  v35[6] = *((_OWORD *)v17 + 6);
  v35[7] = v19;
  v20 = *((_OWORD *)v17 + 9);
  v35[8] = *((_OWORD *)v17 + 8);
  v35[9] = v20;
  v21 = *((_OWORD *)v17 + 3);
  v35[2] = *((_OWORD *)v17 + 2);
  v35[3] = v21;
  v22 = *((_OWORD *)v17 + 5);
  v35[4] = *((_OWORD *)v17 + 4);
  v35[5] = v22;
  v23 = *((_OWORD *)v17 + 1);
  v35[0] = *(_OWORD *)v17;
  v35[1] = v23;
  v24 = *(_OWORD *)(v17 + 296);
  v25 = *(_OWORD *)(v17 + 328);
  v26 = *(_OWORD *)(v17 + 344);
  v32[6] = *(_OWORD *)(v17 + 312);
  v32[7] = v25;
  v32[8] = v26;
  v27 = *(_OWORD *)(v17 + 264);
  v28 = *(_OWORD *)(v17 + 280);
  v32[2] = *(_OWORD *)(v17 + 248);
  v32[3] = v27;
  v29 = *(_OWORD *)(v17 + 232);
  v32[4] = v28;
  v32[5] = v24;
  v32[0] = *(_OWORD *)(v17 + 216);
  v32[1] = v29;
  if (!_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(v33, v35))return 0;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v31, (uint64_t *)v32);
}

uint64_t sub_100150B98(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v12 = a2;
  a4(a1, a3, 0, isUniquelyReferenced_nonNull_native, &v12);
  v10 = v12;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v4)
    swift_bridgeObjectRelease(v10);
  return v10;
}

void AWDLStatistics.Failure.service.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

void AWDLStatistics.ServiceRejection.rejectedService.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t AWDLStatistics.ServiceRejection.eventPayload.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD v13[2];
  __int128 v14;
  _QWORD *v15;

  v15 = &type metadata for String;
  *(_QWORD *)&v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *((_QWORD *)&v14 + 1) = v3;
  sub_100033A2C(&v14, v13);
  v4 = _swiftEmptyDictionarySingleton;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100030FB0(v13, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v15 = &type metadata for String;
  *(_QWORD *)&v14 = v6;
  *((_QWORD *)&v14 + 1) = v7;
  sub_100033A2C(&v14, v13);
  v8 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100030FB0(v13, 1, v8);
  swift_bridgeObjectRelease(0x8000000000000000);
  v9 = sub_10014F3B8((uint64_t)_swiftEmptyDictionarySingleton);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    sub_100012C44(&qword_100408FE8);
    v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v10);
  }
  *(_QWORD *)&v14 = v4;
  v11 = (_QWORD *)swift_bridgeObjectRetain(v9);
  sub_10015DA04(v11, 1, &v14);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v9);
  return v14;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.mySDB.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIWORD(a3) & 1;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.mySDB.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 22) = result;
  return result;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.peerSDB.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIBYTE(a3) & 1;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.peerSDB.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 23) = result;
  return result;
}

uint64_t (*AWDLStatistics.TrafficRegistrationStart.peerSDB.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.sameSSID.getter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  return HIBYTE(a4);
}

uint64_t AWDLStatistics.TrafficRegistrationStart.sameSSID.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = result;
  return result;
}

uint64_t (*AWDLStatistics.TrafficRegistrationStart.sameSSID.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.TrafficRegistrationStart.eventPayload.getter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  int v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  int v10;
  char v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD v23[2];
  __int128 v24;
  _QWORD *v25;

  v7 = a4;
  v25 = &type metadata for String;
  *(_QWORD *)&v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *((_QWORD *)&v24 + 1) = v8;
  sub_100033A2C(&v24, v23);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_1000310C8(v23, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v25 = &type metadata for UInt32;
  if ((a2 & 0xFF00000000) == 0x300000000)
    v10 = 0;
  else
    v10 = a2;
  LODWORD(v24) = v10;
  sub_100033A2C(&v24, v23);
  v11 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_1000310C8(v23, 1, v11);
  swift_bridgeObjectRelease(0x8000000000000000);
  v25 = &type metadata for UInt32;
  if ((a3 & 0xFF00000000) == 0x300000000)
    v12 = 0;
  else
    v12 = a3;
  LODWORD(v24) = v12;
  sub_100033A2C(&v24, v23);
  v13 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_1000310C8(v23, 2, v13);
  swift_bridgeObjectRelease(0x8000000000000000);
  v25 = &type metadata for Bool;
  LOBYTE(v24) = BYTE6(a3) & 1;
  sub_100033A2C(&v24, v23);
  v14 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_1000310C8(v23, 3, v14);
  swift_bridgeObjectRelease(0x8000000000000000);
  v25 = &type metadata for Bool;
  LOBYTE(v24) = HIBYTE(a3) & 1;
  sub_100033A2C(&v24, v23);
  v15 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_1000310C8(v23, 4, v15);
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v7 != 2)
  {
    v25 = &type metadata for Bool;
    LOBYTE(v24) = v7 & 1;
    sub_100033A2C(&v24, v23);
    v16 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_1000310C8(v23, 5, v16);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((a4 & 0xFF00) != 0x200)
  {
    v25 = &type metadata for Bool;
    LOBYTE(v24) = HIBYTE(a4) & 1;
    sub_100033A2C(&v24, v23);
    v17 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_1000310C8(v23, 6, v17);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v18 = sub_10014F710((uint64_t)_swiftEmptyDictionarySingleton);
  v19 = v18[2];
  if (v19)
  {
    sub_100012C44(&qword_100408FE8);
    v20 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v19);
  }
  else
  {
    v20 = _swiftEmptyDictionarySingleton;
  }
  *(_QWORD *)&v24 = v20;
  v21 = (_QWORD *)swift_bridgeObjectRetain(v18);
  sub_10015DA04(v21, 1, &v24);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v18);
  return v24;
}

id AWDLStatistics.TrafficRegistrationStop.service.getter()
{
  id *v0;

  return *v0;
}

uint64_t AWDLStatistics.TrafficRegistrationStop.isInitiator.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AWDLStatistics.Failure.reason.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t AWDLStatistics.TrafficRegistrationStop.duration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0) + 24);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AWDLStatistics.TrafficRegistrationStop.duration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0) + 24);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AWDLStatistics.TrafficRegistrationStop.duration.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.TrafficRegistrationStop.init(service:isInitiator:duration:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a4 = a1;
  *(_BYTE *)(a4 + 8) = a2;
  v5 = a4 + *(int *)(type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0) + 24);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t AWDLStatistics.TrafficRegistrationStop.eventPayload.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD v13[2];
  __int128 v14;
  _QWORD *v15;

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)v0);
  v15 = &type metadata for String;
  *(_QWORD *)&v14 = v1;
  *((_QWORD *)&v14 + 1) = v2;
  sub_100033A2C(&v14, v13);
  v3 = _swiftEmptyDictionarySingleton;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_1000311E0(v13, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v5 = *(_BYTE *)(v0 + 8);
  v15 = &type metadata for Bool;
  LOBYTE(v14) = v5;
  sub_100033A2C(&v14, v13);
  v6 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_1000311E0(v13, 1, v6);
  swift_bridgeObjectRelease(0x8000000000000000);
  type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0);
  v7 = DispatchTimeInterval.rawSeconds.getter();
  v15 = &type metadata for Int;
  *(_QWORD *)&v14 = v7;
  sub_100033A2C(&v14, v13);
  v8 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_1000311E0(v13, 2, v8);
  swift_bridgeObjectRelease(0x8000000000000000);
  v9 = sub_10014FAE0((uint64_t)_swiftEmptyDictionarySingleton);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    sub_100012C44(&qword_100408FE8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v10);
  }
  *(_QWORD *)&v14 = v3;
  v11 = (_QWORD *)swift_bridgeObjectRetain(v9);
  sub_10015DA04(v11, 1, &v14);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v9);
  return v14;
}

CoreP2P::AWDLStatistics::Failure::Reason_optional __swiftcall AWDLStatistics.Failure.Reason.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1003D5D68;
  return (CoreP2P::AWDLStatistics::Failure::Reason_optional)sub_10015F090(rawValue, v1);
}

uint64_t AWDLStatistics.Failure.Reason.rawValue.getter(char a1)
{
  if (!a1)
    return 0x526E496B63757473;
  if (a1 == 1)
    return 0x536E496B63757473;
  return 0xD000000000000014;
}

uint64_t sub_1001514B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003BE58(*a1, *a2);
}

unint64_t sub_1001514C0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1003D5D68;
  result = sub_10015F090(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1001514F4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC0000006F727465;
  v4 = 0xEB000000006E6163;
  v5 = 0x536E496B63757473;
  if (v2 != 1)
  {
    v5 = 0xD000000000000014;
    v4 = 0x8000000100361CF0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x526E496B63757473;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

Swift::Int sub_100151568()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xEB000000006E6163;
  v3 = 0x536E496B63757473;
  if (v1 != 1)
  {
    v3 = 0xD000000000000014;
    v2 = 0x8000000100361CF0;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x526E496B63757473;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEC0000006F727465;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10015161C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEB000000006E6163;
  v3 = 0x536E496B63757473;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000014;
    v2 = 0x8000000100361CF0;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x526E496B63757473;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEC0000006F727465;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001516AC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xEB000000006E6163;
  v3 = 0x536E496B63757473;
  if (v1 != 1)
  {
    v3 = 0xD000000000000014;
    v2 = 0x8000000100361CF0;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x526E496B63757473;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEC0000006F727465;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t AWDLStatistics.Failure.eventPayload.getter(uint64_t a1, char a2)
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _OWORD v13[2];
  __int128 v14;
  _QWORD *v15;

  v15 = &type metadata for String;
  *(_QWORD *)&v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *((_QWORD *)&v14 + 1) = v3;
  sub_100033A2C(&v14, v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_1000312F8(v13, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  if (a2)
  {
    if (a2 == 1)
    {
      v5 = 0xEB000000006E6163;
      v6 = 0x536E496B63757473;
    }
    else
    {
      v5 = 0x8000000100361CF0;
      v6 = 0xD000000000000014;
    }
  }
  else
  {
    v5 = 0xEC0000006F727465;
    v6 = 0x526E496B63757473;
  }
  v15 = &type metadata for String;
  *(_QWORD *)&v14 = v6;
  *((_QWORD *)&v14 + 1) = v5;
  sub_100033A2C(&v14, v13);
  v7 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_1000312F8(v13, 1, v7);
  swift_bridgeObjectRelease(0x8000000000000000);
  v8 = sub_10014FE30((uint64_t)_swiftEmptyDictionarySingleton);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    sub_100012C44(&qword_100408FE8);
    v10 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v9);
  }
  else
  {
    v10 = _swiftEmptyDictionarySingleton;
  }
  *(_QWORD *)&v14 = v10;
  v11 = (_QWORD *)swift_bridgeObjectRetain(v8);
  sub_10015DA04(v11, 1, &v14);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v8);
  return v14;
}

uint64_t AWDLStatistics.Failure.hash(into:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v8 = v7;
  v9 = a2;
  String.hash(into:)(a1, v6, v8);

  swift_bridgeObjectRelease(v8);
  if (a3)
  {
    if (a3 == 1)
      v10 = 0x536E496B63757473;
    else
      v10 = 0xD000000000000014;
    if (a3 == 1)
      v11 = 0xEB000000006E6163;
    else
      v11 = 0x8000000100361CF0;
  }
  else
  {
    v11 = 0xEC0000006F727465;
    v10 = 0x526E496B63757473;
  }
  String.hash(into:)(a1, v10, v11);
  return swift_bridgeObjectRelease(v11);
}

Swift::Int AWDLStatistics.Failure.hashValue.getter(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  v7 = a1;
  String.hash(into:)(v11, v4, v6);

  swift_bridgeObjectRelease(v6);
  if (a2)
  {
    if (a2 == 1)
      v8 = 0x536E496B63757473;
    else
      v8 = 0xD000000000000014;
    if (a2 == 1)
      v9 = 0xEB000000006E6163;
    else
      v9 = 0x8000000100361CF0;
  }
  else
  {
    v9 = 0xEC0000006F727465;
    v8 = 0x526E496B63757473;
  }
  String.hash(into:)(v11, v8, v9);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

Swift::Int sub_100151AE8()
{
  uint64_t v0;

  return AWDLStatistics.Failure.hashValue.getter(*(void **)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_100151AF4(uint64_t a1)
{
  uint64_t v1;

  return AWDLStatistics.Failure.hash(into:)(a1, *(void **)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int sub_100151B00()
{
  uint64_t v0;
  void *v1;
  char v2;
  _QWORD v4[9];

  v1 = *(void **)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4);
  AWDLStatistics.Failure.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100151B48(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P14AWDLStatisticsO7FailureV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.countryCode.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.countryCode.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 1) = result;
  return result;
}

uint64_t InfraStatistics.beOutputBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPreSessionStartInfra.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int16 *)(v0 + 36) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPreSessionStartInfra.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = result;
  *(_WORD *)(v1 + 36) = WORD2(result);
  return result;
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPostSessionStartInfra.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int16 *)(v0 + 44) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.selfPostSessionStartInfra.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  *(_WORD *)(v1 + 44) = WORD2(result);
  return result;
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPreSessionStartInfra.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 48) | ((unint64_t)*(unsigned __int16 *)(v0 + 52) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPreSessionStartInfra.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 48) = result;
  *(_WORD *)(v1 + 52) = WORD2(result);
  return result;
}

unint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPostSessionStartInfra.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int16 *)(v0 + 60) << 32);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.peerPostSessionStartInfra.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 56) = result;
  *(_WORD *)(v1 + 60) = WORD2(result);
  return result;
}

uint64_t InfraStatistics.ctlOutputPackets.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t InfraStatistics.ctlOutputPackets.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t InfraStatistics.inputPackets.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t InfraStatistics.inputPackets.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = result;
  return result;
}

uint64_t InfraStatistics.inputBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t InfraStatistics.inputBytes.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = result;
  return result;
}

uint64_t InfraStatistics.linkRate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t InfraStatistics.linkRate.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = result;
  return result;
}

uint64_t InfraStatistics.effectiveLinkRate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t InfraStatistics.effectiveLinkRate.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = result;
  return result;
}

uint64_t (*InfraStatistics.effectiveLinkRate.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t InfraStatistics.effectiveDataRate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t InfraStatistics.effectiveDataRate.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = result;
  return result;
}

uint64_t (*InfraStatistics.effectiveDataRate.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.didLimitTxToMinRate.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.didLimitTxToMinRate.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 112) = result;
  return result;
}

uint64_t (*IEEE80211Frame.Management.Authentication.PASNResponse.vendorSpecific.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sessionDuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 80);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sessionDuration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 80);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.sessionDuration.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.idleSlotsForScanCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 84));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.idleSlotsForScanCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 84)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.idleSlotsForScanCount.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.syncErrorsCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 88));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.syncErrorsCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 88)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.syncErrorsCount.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.channelSequenceMismatchCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 92));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.channelSequenceMismatchCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 92)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.channelSequenceMismatchCount.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred5GChannelCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 96));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred5GChannelCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 96)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.preferred5GChannelCount.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred2GChannelCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 100));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.preferred2GChannelCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 100)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.preferred2GChannelCount.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.parentNodeChangeCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 104));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.parentNodeChangeCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 104)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.parentNodeChangeCount.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rootNodeChangeCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 108));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rootNodeChangeCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 108)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.rootNodeChangeCount.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.watchDogOrChipTrapCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 112));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.watchDogOrChipTrapCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 112)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.watchDogOrChipTrapCount.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.activeServicesBitMap.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0
                             + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                      + 116));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.activeServicesBitMap.setter(__int16 a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_WORD *)(v1 + *(int *)(result + 116)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.activeServicesBitMap.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteCameraActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 120));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteCameraActive.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 120)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteCameraActive.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteScreenActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 124));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteScreenActive.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 124)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isRemoteScreenActive.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isDFSProxyActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 128));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isDFSProxyActive.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 128)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isDFSProxyActive.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isHomeTheaterActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 132));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.isHomeTheaterActive.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 132)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.isHomeTheaterActive.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.has2GInChannelSequence.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 136));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.has2GInChannelSequence.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 136)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.has2GInChannelSequence.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sidecarServiceTypesBitMap.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 140));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sidecarServiceTypesBitMap.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 140)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.sidecarServiceTypesBitMap.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.rtgID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 144));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void AWDLStatistics.LowLatencyStatistics.Configuration.rtgID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 144));
  swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.rtgID.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sameSSID.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0)
                                     + 148));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.sameSSID.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 148)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.sameSSID.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRSSI.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 152));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRSSI.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 152)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRSSI.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRefs.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 156));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRefs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 156)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountRefs.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountDiffSSID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 160));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountDiffSSID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 160)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountDiffSSID.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountChan.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 164));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountChan.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  *(_QWORD *)(v1 + *(int *)(result + 164)) = a1;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Configuration.skipSteeringCountChan.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 *v7;
  Swift::UInt8 v8;
  unint64_t v9;
  Swift::UInt8 v10;
  unint64_t v11;
  Swift::UInt8 v12;
  unint64_t v13;
  Swift::UInt8 v14;
  unint64_t v15;
  Swift::UInt8 v16;
  int *v17;
  int v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt64 v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  Swift::UInt64 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (Swift::UInt64 *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher._combine(_:)(*(_BYTE *)v2);
  v8 = *(_BYTE *)(v2 + 2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_QWORD *)(v2 + 8));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 16));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 24));
  v9 = *(unsigned int *)(v2 + 32) | ((unint64_t)*(unsigned __int16 *)(v2 + 36) << 32);
  if ((v9 & 0xFF00000000) == 0x300000000)
  {
    v10 = 0;
LABEL_3:
    Hasher._combine(_:)(v10);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)(0x801004u >> ((v9 >> 29) & 0xF8));
    switch(v9 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        v10 = BYTE5(v9) & 1;
        goto LABEL_3;
    }
  }
  v11 = *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned __int16 *)(v2 + 44) << 32);
  if ((v11 & 0xFF00000000) == 0x300000000)
  {
    v12 = 0;
LABEL_6:
    Hasher._combine(_:)(v12);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
    Hasher._combine(_:)(0x801004u >> ((v11 >> 29) & 0xF8));
    switch(v11 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        v12 = BYTE5(v11) & 1;
        goto LABEL_6;
    }
  }
  v13 = *(unsigned int *)(v2 + 48) | ((unint64_t)*(unsigned __int16 *)(v2 + 52) << 32);
  if ((v13 & 0xFF00000000) == 0x300000000)
  {
    v14 = 0;
LABEL_9:
    Hasher._combine(_:)(v14);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(0x801004u >> ((v13 >> 29) & 0xF8));
    switch(v13 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        v14 = BYTE5(v13) & 1;
        goto LABEL_9;
    }
  }
  v15 = *(unsigned int *)(v2 + 56) | ((unint64_t)*(unsigned __int16 *)(v2 + 60) << 32);
  if ((v15 & 0xFF00000000) == 0x300000000)
  {
    v16 = 0;
LABEL_12:
    Hasher._combine(_:)(v16);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(0x801004u >> ((v15 >> 29) & 0xF8));
    switch(v15 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        v16 = BYTE5(v15) & 1;
        goto LABEL_12;
    }
  }
  Hasher._combine(_:)(*(_QWORD *)(v2 + 64));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 72));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 80));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 88));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 96));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 104));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 112));
  v17 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + v17[20], v4);
  v18 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v5 + 88))(v7, v4);
  if (v18 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    v19 = *v7;
    v20 = 1000000000;
LABEL_27:
    v21 = v19 * v20;
    v22 = (unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63;
    v23 = v19 <= 0;
    v24 = 0x7FFFFFFFFFFFFFFFLL;
    if (v23)
      v24 = 0x8000000000000000;
    if (v22)
      v25 = v24;
    else
      v25 = v21;
    goto LABEL_32;
  }
  if (v18 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    v19 = *v7;
    v20 = 1000000;
    goto LABEL_27;
  }
  if (v18 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    v19 = *v7;
    v20 = 1000;
    goto LABEL_27;
  }
  if (v18 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 96))(v7, v4);
    v25 = *v7;
  }
  else
  {
    if (v18 != enum case for DispatchTimeInterval.never(_:))
      (*(void (**)(Swift::UInt64 *, uint64_t))(v5 + 8))(v7, v4);
    v25 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_32:
  Hasher._combine(_:)(v25);
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[21]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[22]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[23]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[24]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[25]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[26]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[27]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[28]));
  Hasher._combine(_:)(*(_WORD *)(v2 + v17[29]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[30]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[31]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[32]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[33]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[34]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[35]));
  v26 = (uint64_t *)(v2 + v17[36]);
  v27 = *v26;
  v28 = v26[1];
  swift_bridgeObjectRetain(v28);
  String.hash(into:)(a1, v27, v28);
  swift_bridgeObjectRelease(v28);
  Hasher._combine(_:)(*(_BYTE *)(v2 + v17[37]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[38]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[39]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[40]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v17[41]));
}

Swift::Int AWDLStatistics.LowLatencyStatistics.Configuration.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100152D78()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t InfraStatistics.beOutputPackets.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t InfraStatistics.voOutputBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t InfraStatistics.voOutputBytes.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t InfraStatistics.viOutputPackets.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t InfraStatistics.viOutputPackets.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t InfraStatistics.viOutputBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t InfraStatistics.viOutputBytes.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txForceLifetimeExpiredCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txForceLifetimeExpiredCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = result;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txErrorCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txErrorCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txErrorCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn5GCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn5GCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn5GCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn2GCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn2GCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOn2GCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOverRideOn5GCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOverRideOn5GCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txOverRideOn5GCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txNACount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 152);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txNACount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txNACount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxPktCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxPktCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxPktCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn5GCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 168);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn5GCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn5GCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn2GCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn2GCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 176) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.rxOn2GCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 184);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueFailCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueFailCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 192) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txRequeueFailCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchNAVCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 200);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchNAVCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 200) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchNAVCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchHOFCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 208);
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchHOFCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 208) = result;
  return result;
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.Counts.txSwitchHOFCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  Hasher._combine(_:)(v0[2]);
  Hasher._combine(_:)(v0[3]);
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v0[5]);
  Hasher._combine(_:)(v0[6]);
  Hasher._combine(_:)(v0[7]);
  Hasher._combine(_:)(v0[8]);
  Hasher._combine(_:)(v0[9]);
  Hasher._combine(_:)(v0[10]);
  Hasher._combine(_:)(v0[11]);
  Hasher._combine(_:)(v0[12]);
  Hasher._combine(_:)(v0[13]);
  Hasher._combine(_:)(v0[14]);
  Hasher._combine(_:)(v0[15]);
  Hasher._combine(_:)(v0[16]);
  Hasher._combine(_:)(v0[17]);
  Hasher._combine(_:)(v0[18]);
  Hasher._combine(_:)(v0[19]);
  Hasher._combine(_:)(v0[20]);
  Hasher._combine(_:)(v0[21]);
  Hasher._combine(_:)(v0[22]);
  Hasher._combine(_:)(v0[23]);
  Hasher._combine(_:)(v0[24]);
  Hasher._combine(_:)(v0[25]);
  Hasher._combine(_:)(v0[26]);
}

Swift::Int AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_1001530B4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  return Hasher._finalize()();
}

BOOL sub_1001530EC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[13];
  uint64_t v16;
  _OWORD v17[13];
  uint64_t v18;

  v2 = *(_OWORD *)(a1 + 176);
  v15[10] = *(_OWORD *)(a1 + 160);
  v15[11] = v2;
  v15[12] = *(_OWORD *)(a1 + 192);
  v16 = *(_QWORD *)(a1 + 208);
  v3 = *(_OWORD *)(a1 + 112);
  v15[6] = *(_OWORD *)(a1 + 96);
  v15[7] = v3;
  v4 = *(_OWORD *)(a1 + 144);
  v15[8] = *(_OWORD *)(a1 + 128);
  v15[9] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v15[4] = *(_OWORD *)(a1 + 64);
  v15[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v7;
  v8 = *(_OWORD *)(a2 + 176);
  v17[10] = *(_OWORD *)(a2 + 160);
  v17[11] = v8;
  v17[12] = *(_OWORD *)(a2 + 192);
  v18 = *(_QWORD *)(a2 + 208);
  v9 = *(_OWORD *)(a2 + 112);
  v17[6] = *(_OWORD *)(a2 + 96);
  v17[7] = v9;
  v10 = *(_OWORD *)(a2 + 144);
  v17[8] = *(_OWORD *)(a2 + 128);
  v17[9] = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v17[2] = *(_OWORD *)(a2 + 32);
  v17[3] = v11;
  v12 = *(_OWORD *)(a2 + 80);
  v17[4] = *(_OWORD *)(a2 + 64);
  v17[5] = v12;
  v13 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v13;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(v15, v17);
}

uint64_t IEEE80211InformationElement.RSNCapability.authenticationKeyManagementSuites.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t IEEE80211InformationElement.RSNCapability.pmkIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t IEEE80211InformationElement.RSNCapability.pmkIDs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txDataRate.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txDataRate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txRetries.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txRetries.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.extendedRSNCapability.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.extendedRSNCapability.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 56));
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketBurstInterval.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketBurstInterval.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 64));
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketExpiry.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txPacketExpiry.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 72));
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txConsecutiveErrors.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txConsecutiveErrors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 80));
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txCCA.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.txCCA.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
  *(_QWORD *)(v1 + 88) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.requeueCount.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.requeueCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 96));
  *(_QWORD *)(v1 + 96) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxTotalDelay.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 104));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxTotalDelay.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 104));
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxIPCDelay.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 112));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxIPCDelay.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 112));
  *(_QWORD *)(v1 + 112) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxFWDelay.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 120));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxFWDelay.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 120));
  *(_QWORD *)(v1 + 120) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxDataRate.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxDataRate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 128));
  *(_QWORD *)(v1 + 128) = a1;
  return result;
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxRSSI.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 136));
}

uint64_t AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.rxRSSI.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 136));
  *(_QWORD *)(v1 + 136) = a1;
  return result;
}

void AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.hash(into:)(uint64_t a1)
{
  uint64_t *v1;

  sub_10008E368(a1, *v1);
  sub_10008E368(a1, v1[1]);
  sub_10008E368(a1, v1[2]);
  sub_10008E368(a1, v1[3]);
  sub_10008E368(a1, v1[4]);
  sub_10008E368(a1, v1[5]);
  sub_10008E368(a1, v1[6]);
  sub_10008E368(a1, v1[7]);
  sub_10008E368(a1, v1[8]);
  sub_10008E368(a1, v1[9]);
  sub_10008E368(a1, v1[10]);
  sub_10008E368(a1, v1[11]);
  sub_10008E368(a1, v1[12]);
  sub_10008E368(a1, v1[13]);
  sub_10008E368(a1, v1[14]);
  sub_10008E368(a1, v1[15]);
  sub_10008E368(a1, v1[16]);
  sub_10008E368(a1, v1[17]);
}

Swift::Int AWDLStatistics.LowLatencyStatistics.Traffic.Histograms.hashValue.getter()
{
  uint64_t *v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  sub_10008E368((uint64_t)v2, *v0);
  sub_10008E368((uint64_t)v2, v0[1]);
  sub_10008E368((uint64_t)v2, v0[2]);
  sub_10008E368((uint64_t)v2, v0[3]);
  sub_10008E368((uint64_t)v2, v0[4]);
  sub_10008E368((uint64_t)v2, v0[5]);
  sub_10008E368((uint64_t)v2, v0[6]);
  sub_10008E368((uint64_t)v2, v0[7]);
  sub_10008E368((uint64_t)v2, v0[8]);
  sub_10008E368((uint64_t)v2, v0[9]);
  sub_10008E368((uint64_t)v2, v0[10]);
  sub_10008E368((uint64_t)v2, v0[11]);
  sub_10008E368((uint64_t)v2, v0[12]);
  sub_10008E368((uint64_t)v2, v0[13]);
  sub_10008E368((uint64_t)v2, v0[14]);
  sub_10008E368((uint64_t)v2, v0[15]);
  sub_10008E368((uint64_t)v2, v0[16]);
  sub_10008E368((uint64_t)v2, v0[17]);
  return Hasher._finalize()();
}

Swift::Int sub_100153640()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  v8 = v0[7];
  v9 = v0[8];
  v14 = v0[9];
  v15 = v0[10];
  v16 = v0[11];
  v17 = v0[12];
  v18 = v0[13];
  v19 = v0[14];
  v10 = v0[15];
  v11 = v0[16];
  v12 = v0[17];
  v20 = v10;
  v21 = v11;
  Hasher.init(_seed:)(v22);
  sub_10008E368((uint64_t)v22, v1);
  sub_10008E368((uint64_t)v22, v2);
  sub_10008E368((uint64_t)v22, v3);
  sub_10008E368((uint64_t)v22, v4);
  sub_10008E368((uint64_t)v22, v5);
  sub_10008E368((uint64_t)v22, v6);
  sub_10008E368((uint64_t)v22, v7);
  sub_10008E368((uint64_t)v22, v8);
  sub_10008E368((uint64_t)v22, v9);
  sub_10008E368((uint64_t)v22, v14);
  sub_10008E368((uint64_t)v22, v15);
  sub_10008E368((uint64_t)v22, v16);
  sub_10008E368((uint64_t)v22, v17);
  sub_10008E368((uint64_t)v22, v18);
  sub_10008E368((uint64_t)v22, v19);
  sub_10008E368((uint64_t)v22, v20);
  sub_10008E368((uint64_t)v22, v21);
  sub_10008E368((uint64_t)v22, v12);
  return Hasher._finalize()();
}

void sub_1001537AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = v1[7];
  v11 = v1[8];
  v15 = v1[9];
  v16 = v1[10];
  v17 = v1[11];
  v18 = v1[12];
  v19 = v1[13];
  v20 = v1[14];
  v12 = v1[15];
  v13 = v1[16];
  v14 = v1[17];
  v21 = v12;
  v22 = v13;
  sub_10008E368(a1, v3);
  sub_10008E368(a1, v4);
  sub_10008E368(a1, v5);
  sub_10008E368(a1, v6);
  sub_10008E368(a1, v7);
  sub_10008E368(a1, v8);
  sub_10008E368(a1, v9);
  sub_10008E368(a1, v10);
  sub_10008E368(a1, v11);
  sub_10008E368(a1, v15);
  sub_10008E368(a1, v16);
  sub_10008E368(a1, v17);
  sub_10008E368(a1, v18);
  sub_10008E368(a1, v19);
  sub_10008E368(a1, v20);
  sub_10008E368(a1, v21);
  sub_10008E368(a1, v22);
  sub_10008E368(a1, v14);
}

Swift::Int sub_1001538FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  v8 = v0[7];
  v9 = v0[8];
  v14 = v0[9];
  v15 = v0[10];
  v16 = v0[11];
  v17 = v0[12];
  v18 = v0[13];
  v19 = v0[14];
  v10 = v0[15];
  v11 = v0[16];
  v12 = v0[17];
  v20 = v10;
  v21 = v11;
  Hasher.init(_seed:)(v22);
  sub_10008E368((uint64_t)v22, v1);
  sub_10008E368((uint64_t)v22, v2);
  sub_10008E368((uint64_t)v22, v3);
  sub_10008E368((uint64_t)v22, v4);
  sub_10008E368((uint64_t)v22, v5);
  sub_10008E368((uint64_t)v22, v6);
  sub_10008E368((uint64_t)v22, v7);
  sub_10008E368((uint64_t)v22, v8);
  sub_10008E368((uint64_t)v22, v9);
  sub_10008E368((uint64_t)v22, v14);
  sub_10008E368((uint64_t)v22, v15);
  sub_10008E368((uint64_t)v22, v16);
  sub_10008E368((uint64_t)v22, v17);
  sub_10008E368((uint64_t)v22, v18);
  sub_10008E368((uint64_t)v22, v19);
  sub_10008E368((uint64_t)v22, v20);
  sub_10008E368((uint64_t)v22, v21);
  sub_10008E368((uint64_t)v22, v12);
  return Hasher._finalize()();
}

BOOL sub_100153A64(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  _OWORD v12[9];

  v2 = a1[7];
  v11[6] = a1[6];
  v11[7] = v2;
  v11[8] = a1[8];
  v3 = a1[3];
  v11[2] = a1[2];
  v11[3] = v3;
  v4 = a1[5];
  v11[4] = a1[4];
  v11[5] = v4;
  v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  v6 = a2[7];
  v12[6] = a2[6];
  v12[7] = v6;
  v12[8] = a2[8];
  v7 = a2[3];
  v12[2] = a2[2];
  v12[3] = v7;
  v8 = a2[5];
  v12[4] = a2[4];
  v12[5] = v8;
  v9 = a2[1];
  v12[0] = *a2;
  v12[1] = v9;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v11, (uint64_t *)v12);
}

__n128 AWDLStatistics.LowLatencyStatistics.Traffic.counts.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v2 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(a1 + 176) = v2;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(v1 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(v1 + 208);
  v3 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112) = v3;
  v4 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 144) = v4;
  v5 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  result = *(__n128 *)v1;
  v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v8;
  return result;
}

__n128 AWDLStatistics.LowLatencyStatistics.Traffic.counts.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v2 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v1 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v1 + 176) = v2;
  *(_OWORD *)(v1 + 192) = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(v1 + 208) = *(_QWORD *)(a1 + 208);
  v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 112) = v3;
  v4 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v1 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v1 + 144) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v5;
  v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 80) = v6;
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v8;
  return result;
}

uint64_t *AWDLStatistics.LowLatencyStatistics.Traffic.histograms.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10015F0E8((uint64_t *)(v1 + 216), a1);
}

_QWORD *AWDLStatistics.LowLatencyStatistics.Traffic.histograms.setter(_OWORD *a1)
{
  uint64_t v1;

  return sub_10015F11C(a1, (_QWORD *)(v1 + 216));
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.Traffic.histograms.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLStatistics.LowLatencyStatistics.Traffic.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  v3 = v1[27];
  v4 = v1[28];
  v5 = v1[29];
  v6 = v1[30];
  v7 = v1[31];
  v8 = v1[32];
  v9 = v1[33];
  v10 = v1[34];
  v11 = v1[35];
  v15 = v1[36];
  v16 = v1[37];
  v17 = v1[38];
  v18 = v1[39];
  v19 = v1[40];
  v20 = v1[41];
  v12 = v1[42];
  v13 = v1[43];
  v14 = v1[44];
  v21 = v12;
  v22 = v13;
  sub_10008E368(a1, v3);
  sub_10008E368(a1, v4);
  sub_10008E368(a1, v5);
  sub_10008E368(a1, v6);
  sub_10008E368(a1, v7);
  sub_10008E368(a1, v8);
  sub_10008E368(a1, v9);
  sub_10008E368(a1, v10);
  sub_10008E368(a1, v11);
  sub_10008E368(a1, v15);
  sub_10008E368(a1, v16);
  sub_10008E368(a1, v17);
  sub_10008E368(a1, v18);
  sub_10008E368(a1, v19);
  sub_10008E368(a1, v20);
  sub_10008E368(a1, v21);
  sub_10008E368(a1, v22);
  sub_10008E368(a1, v14);
}

BOOL static AWDLStatistics.LowLatencyStatistics.Traffic.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v31[9];
  _OWORD v32[9];
  _OWORD v33[13];
  uint64_t v34;
  _OWORD v35[13];
  uint64_t v36;

  v4 = *(_OWORD *)(a1 + 176);
  v35[10] = *(_OWORD *)(a1 + 160);
  v35[11] = v4;
  v35[12] = *(_OWORD *)(a1 + 192);
  v36 = *(_QWORD *)(a1 + 208);
  v5 = *(_OWORD *)(a1 + 112);
  v35[6] = *(_OWORD *)(a1 + 96);
  v35[7] = v5;
  v6 = *(_OWORD *)(a1 + 144);
  v35[8] = *(_OWORD *)(a1 + 128);
  v35[9] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v35[2] = *(_OWORD *)(a1 + 32);
  v35[3] = v7;
  v8 = *(_OWORD *)(a1 + 80);
  v35[4] = *(_OWORD *)(a1 + 64);
  v35[5] = v8;
  v9 = *(_OWORD *)(a1 + 16);
  v35[0] = *(_OWORD *)a1;
  v35[1] = v9;
  v10 = *(_OWORD *)(a2 + 176);
  v33[10] = *(_OWORD *)(a2 + 160);
  v33[11] = v10;
  v33[12] = *(_OWORD *)(a2 + 192);
  v34 = *(_QWORD *)(a2 + 208);
  v11 = *(_OWORD *)(a2 + 112);
  v33[6] = *(_OWORD *)(a2 + 96);
  v33[7] = v11;
  v12 = *(_OWORD *)(a2 + 144);
  v33[8] = *(_OWORD *)(a2 + 128);
  v33[9] = v12;
  v13 = *(_OWORD *)(a2 + 48);
  v33[2] = *(_OWORD *)(a2 + 32);
  v33[3] = v13;
  v14 = *(_OWORD *)(a2 + 80);
  v33[4] = *(_OWORD *)(a2 + 64);
  v33[5] = v14;
  v15 = *(_OWORD *)(a2 + 16);
  v33[0] = *(_OWORD *)a2;
  v33[1] = v15;
  if (_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(v35, v33))
  {
    v16 = *(_OWORD *)(a1 + 232);
    v17 = *(_OWORD *)(a1 + 248);
    v32[0] = *(_OWORD *)(a1 + 216);
    v32[1] = v16;
    v18 = *(_OWORD *)(a1 + 296);
    v19 = *(_OWORD *)(a1 + 328);
    v20 = *(_OWORD *)(a1 + 344);
    v32[6] = *(_OWORD *)(a1 + 312);
    v32[7] = v19;
    v32[8] = v20;
    v21 = *(_OWORD *)(a1 + 264);
    v22 = *(_OWORD *)(a1 + 280);
    v32[2] = v17;
    v32[3] = v21;
    v32[4] = v22;
    v32[5] = v18;
    v23 = *(_OWORD *)(a2 + 296);
    v24 = *(_OWORD *)(a2 + 328);
    v25 = *(_OWORD *)(a2 + 344);
    v31[6] = *(_OWORD *)(a2 + 312);
    v31[7] = v24;
    v31[8] = v25;
    v26 = *(_OWORD *)(a2 + 264);
    v27 = *(_OWORD *)(a2 + 280);
    v31[2] = *(_OWORD *)(a2 + 248);
    v31[3] = v26;
    v28 = *(_OWORD *)(a2 + 232);
    v31[4] = v27;
    v31[5] = v23;
    v31[0] = *(_OWORD *)(a2 + 216);
    v31[1] = v28;
    return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v32, (uint64_t *)v31);
  }
  else
  {
    return 0;
  }
}

Swift::Int AWDLStatistics.LowLatencyStatistics.Traffic.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[9];

  Hasher.init(_seed:)(v21);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  v1 = v0[27];
  v2 = v0[28];
  v3 = v0[29];
  v4 = v0[30];
  v5 = v0[31];
  v6 = v0[32];
  v7 = v0[33];
  v8 = v0[34];
  v9 = v0[35];
  v10 = v0[36];
  v14 = v0[37];
  v15 = v0[38];
  v16 = v0[39];
  v17 = v0[40];
  v18 = v0[41];
  v19 = v0[42];
  v11 = v0[43];
  v12 = v0[44];
  v20 = v11;
  sub_10008E368((uint64_t)v21, v1);
  sub_10008E368((uint64_t)v21, v2);
  sub_10008E368((uint64_t)v21, v3);
  sub_10008E368((uint64_t)v21, v4);
  sub_10008E368((uint64_t)v21, v5);
  sub_10008E368((uint64_t)v21, v6);
  sub_10008E368((uint64_t)v21, v7);
  sub_10008E368((uint64_t)v21, v8);
  sub_10008E368((uint64_t)v21, v9);
  sub_10008E368((uint64_t)v21, v10);
  sub_10008E368((uint64_t)v21, v14);
  sub_10008E368((uint64_t)v21, v15);
  sub_10008E368((uint64_t)v21, v16);
  sub_10008E368((uint64_t)v21, v17);
  sub_10008E368((uint64_t)v21, v18);
  sub_10008E368((uint64_t)v21, v19);
  sub_10008E368((uint64_t)v21, v20);
  sub_10008E368((uint64_t)v21, v12);
  return Hasher._finalize()();
}

Swift::Int sub_100153F90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[9];

  v1 = v0[27];
  v2 = v0[28];
  v3 = v0[29];
  v4 = v0[30];
  v5 = v0[31];
  v6 = v0[32];
  v8 = v0[33];
  v7 = v0[34];
  v9 = v0[35];
  v11 = v0[36];
  v12 = v0[37];
  v13 = v0[38];
  v14 = v0[39];
  v15 = v0[40];
  v16 = v0[41];
  v17 = v0[42];
  v18 = v0[43];
  v19 = v0[44];
  Hasher.init(_seed:)(v20);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10008E368((uint64_t)v20, v1);
  sub_10008E368((uint64_t)v20, v2);
  sub_10008E368((uint64_t)v20, v3);
  sub_10008E368((uint64_t)v20, v4);
  sub_10008E368((uint64_t)v20, v5);
  sub_10008E368((uint64_t)v20, v6);
  sub_10008E368((uint64_t)v20, v8);
  sub_10008E368((uint64_t)v20, v7);
  sub_10008E368((uint64_t)v20, v9);
  sub_10008E368((uint64_t)v20, v11);
  sub_10008E368((uint64_t)v20, v12);
  sub_10008E368((uint64_t)v20, v13);
  sub_10008E368((uint64_t)v20, v14);
  sub_10008E368((uint64_t)v20, v15);
  sub_10008E368((uint64_t)v20, v16);
  sub_10008E368((uint64_t)v20, v17);
  sub_10008E368((uint64_t)v20, v18);
  sub_10008E368((uint64_t)v20, v19);
  return Hasher._finalize()();
}

void sub_10015410C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v1[27];
  v4 = v1[28];
  v5 = v1[29];
  v6 = v1[30];
  v7 = v1[31];
  v8 = v1[32];
  v10 = v1[33];
  v9 = v1[34];
  v11 = v1[35];
  v12 = v1[36];
  v13 = v1[37];
  v14 = v1[38];
  v15 = v1[39];
  v16 = v1[40];
  v17 = v1[41];
  v18 = v1[42];
  v19 = v1[43];
  v20 = v1[44];
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10008E368(a1, v3);
  sub_10008E368(a1, v4);
  sub_10008E368(a1, v5);
  sub_10008E368(a1, v6);
  sub_10008E368(a1, v7);
  sub_10008E368(a1, v8);
  sub_10008E368(a1, v10);
  sub_10008E368(a1, v9);
  sub_10008E368(a1, v11);
  sub_10008E368(a1, v12);
  sub_10008E368(a1, v13);
  sub_10008E368(a1, v14);
  sub_10008E368(a1, v15);
  sub_10008E368(a1, v16);
  sub_10008E368(a1, v17);
  sub_10008E368(a1, v18);
  sub_10008E368(a1, v19);
  sub_10008E368(a1, v20);
}

Swift::Int sub_100154274()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[9];

  v1 = v0[27];
  v2 = v0[28];
  v3 = v0[29];
  v4 = v0[30];
  v5 = v0[31];
  v6 = v0[32];
  v8 = v0[33];
  v7 = v0[34];
  v9 = v0[35];
  v11 = v0[36];
  v12 = v0[37];
  v13 = v0[38];
  v14 = v0[39];
  v15 = v0[40];
  v16 = v0[41];
  v17 = v0[42];
  v18 = v0[43];
  v19 = v0[44];
  Hasher.init(_seed:)(v20);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10008E368((uint64_t)v20, v1);
  sub_10008E368((uint64_t)v20, v2);
  sub_10008E368((uint64_t)v20, v3);
  sub_10008E368((uint64_t)v20, v4);
  sub_10008E368((uint64_t)v20, v5);
  sub_10008E368((uint64_t)v20, v6);
  sub_10008E368((uint64_t)v20, v8);
  sub_10008E368((uint64_t)v20, v7);
  sub_10008E368((uint64_t)v20, v9);
  sub_10008E368((uint64_t)v20, v11);
  sub_10008E368((uint64_t)v20, v12);
  sub_10008E368((uint64_t)v20, v13);
  sub_10008E368((uint64_t)v20, v14);
  sub_10008E368((uint64_t)v20, v15);
  sub_10008E368((uint64_t)v20, v16);
  sub_10008E368((uint64_t)v20, v17);
  sub_10008E368((uint64_t)v20, v18);
  sub_10008E368((uint64_t)v20, v19);
  return Hasher._finalize()();
}

BOOL sub_1001543EC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v28[9];
  _OWORD v29[9];
  _OWORD v30[13];
  uint64_t v31;
  _OWORD v32[13];
  uint64_t v33;

  v2 = *(_OWORD *)(a1 + 176);
  v30[10] = *(_OWORD *)(a1 + 160);
  v30[11] = v2;
  v30[12] = *(_OWORD *)(a1 + 192);
  v31 = *(_QWORD *)(a1 + 208);
  v3 = *(_OWORD *)(a1 + 112);
  v30[6] = *(_OWORD *)(a1 + 96);
  v30[7] = v3;
  v4 = *(_OWORD *)(a1 + 144);
  v30[8] = *(_OWORD *)(a1 + 128);
  v30[9] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v30[2] = *(_OWORD *)(a1 + 32);
  v30[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v30[4] = *(_OWORD *)(a1 + 64);
  v30[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v30[0] = *(_OWORD *)a1;
  v30[1] = v7;
  v8 = *(_OWORD *)(a1 + 296);
  v9 = *(_OWORD *)(a1 + 328);
  v10 = *(_OWORD *)(a1 + 344);
  v28[6] = *(_OWORD *)(a1 + 312);
  v28[7] = v9;
  v28[8] = v10;
  v11 = *(_OWORD *)(a1 + 232);
  v12 = *(_OWORD *)(a1 + 264);
  v13 = *(_OWORD *)(a1 + 280);
  v28[2] = *(_OWORD *)(a1 + 248);
  v28[3] = v12;
  v28[4] = v13;
  v28[5] = v8;
  v28[0] = *(_OWORD *)(a1 + 216);
  v28[1] = v11;
  v14 = *(_OWORD *)(a2 + 176);
  v32[10] = *(_OWORD *)(a2 + 160);
  v32[11] = v14;
  v32[12] = *(_OWORD *)(a2 + 192);
  v33 = *(_QWORD *)(a2 + 208);
  v15 = *(_OWORD *)(a2 + 112);
  v32[6] = *(_OWORD *)(a2 + 96);
  v32[7] = v15;
  v16 = *(_OWORD *)(a2 + 144);
  v32[8] = *(_OWORD *)(a2 + 128);
  v32[9] = v16;
  v17 = *(_OWORD *)(a2 + 48);
  v32[2] = *(_OWORD *)(a2 + 32);
  v32[3] = v17;
  v18 = *(_OWORD *)(a2 + 80);
  v32[4] = *(_OWORD *)(a2 + 64);
  v32[5] = v18;
  v19 = *(_OWORD *)(a2 + 16);
  v32[0] = *(_OWORD *)a2;
  v32[1] = v19;
  v20 = *(_OWORD *)(a2 + 296);
  v21 = *(_OWORD *)(a2 + 328);
  v22 = *(_OWORD *)(a2 + 344);
  v29[6] = *(_OWORD *)(a2 + 312);
  v29[7] = v21;
  v29[8] = v22;
  v23 = *(_OWORD *)(a2 + 264);
  v24 = *(_OWORD *)(a2 + 280);
  v29[2] = *(_OWORD *)(a2 + 248);
  v29[3] = v23;
  v25 = *(_OWORD *)(a2 + 232);
  v29[4] = v24;
  v29[5] = v20;
  v29[0] = *(_OWORD *)(a2 + 216);
  v29[1] = v25;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(v30, v32)&& _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v28, (uint64_t *)v29);
}

uint64_t AWDLStatistics.LowLatencyStatistics.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10015F150(v1, a1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.configuration.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10015F194(a1, v1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.traffic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
  return sub_10015F1D8(v3, a1);
}

uint64_t AWDLStatistics.LowLatencyStatistics.traffic.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
  return sub_10015F20C(a1, v3);
}

uint64_t (*AWDLStatistics.LowLatencyStatistics.traffic.modify())(_QWORD)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  return NANBitmap.Channel.operatingClass.getter;
}

void sub_1001545B0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  void *object;
  __int128 v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _OWORD v35[2];
  __int128 v36;
  _QWORD *v37;

  v33 = *(_QWORD *)(a1 + 16);
  if (!v33)
    return;
  v4 = a2;
  if (a2 > 0x10u)
    v6 = 5;
  else
    v6 = qword_10034AF40[(char)a2];
  v32 = v6;
  v7 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    v9 = v4;
    *(_QWORD *)&v36 = sub_1001589A0(v4);
    *((_QWORD *)&v36 + 1) = v10;
    v11._countAndFlagsBits = 1852400223;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    *(_QWORD *)&v35[0] = v8;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(object);
    v14 = v36;
    v37 = &type metadata for Double;
    *(_QWORD *)&v36 = v7;
    sub_100033A2C(&v36, v35);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
    v16 = *a3;
    v34 = (_QWORD *)*a3;
    *a3 = 0x8000000000000000;
    v18 = sub_10000FA00(v14, *((uint64_t *)&v14 + 1));
    v19 = *(_QWORD *)(v16 + 16);
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (*(_QWORD *)(v16 + 24) >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v25 = v34;
        if ((v17 & 1) != 0)
          goto LABEL_13;
      }
      else
      {
        sub_100146A48();
        v25 = v34;
        if ((v22 & 1) != 0)
          goto LABEL_13;
      }
    }
    else
    {
      sub_1001410B4(v21, isUniquelyReferenced_nonNull_native);
      v23 = sub_10000FA00(v14, *((uint64_t *)&v14 + 1));
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_23;
      v18 = v23;
      v25 = v34;
      if ((v22 & 1) != 0)
      {
LABEL_13:
        v26 = (_QWORD *)(v25[7] + 32 * v18);
        sub_100014430(v26);
        sub_100033A2C(v35, v26);
        goto LABEL_17;
      }
    }
    v25[(v18 >> 6) + 8] |= 1 << v18;
    *(_OWORD *)(v25[6] + 16 * v18) = v14;
    sub_100033A2C(v35, (_OWORD *)(v25[7] + 32 * v18));
    v27 = v25[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_22;
    v25[2] = v29;
    swift_bridgeObjectRetain(*((_QWORD *)&v14 + 1));
LABEL_17:
    v30 = *a3;
    *a3 = v25;
    swift_bridgeObjectRelease(*((_QWORD *)&v14 + 1));
    swift_bridgeObjectRelease(v30);
    if (v8 + 1 != v33)
    {
      v4 = v9;
      v7 = *(_QWORD *)(a1 + 8 * v8 + 40);
      v31 = v8 + 2;
      ++v8;
      if (v31 != v32)
        continue;
    }
    swift_bridgeObjectRelease(a1);
    return;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t AWDLStatistics.LowLatencyStatistics.eventPayload.getter()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  unint64_t v34;
  char v35;
  _QWORD *v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  _QWORD *v57;
  char v58;
  char v59;
  _QWORD *v60;
  int *v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  uint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  char v87;
  _QWORD *v88;
  __int16 v89;
  char v90;
  _QWORD *v91;
  char v92;
  char v93;
  _QWORD *v94;
  char v95;
  char v96;
  _QWORD *v97;
  char v98;
  char v99;
  _QWORD *v100;
  char v101;
  char v102;
  _QWORD *v103;
  char v104;
  char v105;
  _QWORD *v106;
  char v107;
  char v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  _QWORD *v114;
  char v115;
  char v116;
  _QWORD *v117;
  uint64_t v118;
  char v119;
  _QWORD *v120;
  uint64_t v121;
  char v122;
  _QWORD *v123;
  uint64_t v124;
  char v125;
  _QWORD *v126;
  uint64_t v127;
  char v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  char v132;
  _QWORD *v133;
  uint64_t v134;
  char v135;
  _QWORD *v136;
  uint64_t v137;
  char v138;
  _QWORD *v139;
  uint64_t v140;
  char v141;
  _QWORD *v142;
  uint64_t v143;
  char v144;
  _QWORD *v145;
  uint64_t v146;
  char v147;
  _QWORD *v148;
  uint64_t v149;
  char v150;
  _QWORD *v151;
  uint64_t v152;
  char v153;
  _QWORD *v154;
  uint64_t v155;
  char v156;
  _QWORD *v157;
  uint64_t v158;
  char v159;
  _QWORD *v160;
  uint64_t v161;
  char v162;
  _QWORD *v163;
  uint64_t v164;
  char v165;
  _QWORD *v166;
  uint64_t v167;
  char v168;
  _QWORD *v169;
  uint64_t v170;
  char v171;
  _QWORD *v172;
  uint64_t v173;
  char v174;
  _QWORD *v175;
  uint64_t v176;
  char v177;
  _QWORD *v178;
  uint64_t v179;
  char v180;
  _QWORD *v181;
  uint64_t v182;
  char v183;
  _QWORD *v184;
  uint64_t v185;
  char v186;
  _QWORD *v187;
  uint64_t v188;
  char v189;
  _QWORD *v190;
  uint64_t v191;
  char v192;
  _QWORD *v193;
  uint64_t v194;
  char v195;
  _QWORD *v196;
  uint64_t v197;
  char v198;
  _QWORD *v199;
  uint64_t v200;
  char v201;
  _QWORD *v202;
  uint64_t v203;
  char v204;
  _QWORD *v205;
  uint64_t v206;
  char v207;
  _QWORD *v208;
  uint64_t v209;
  char v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v261;
  _QWORD *v262;
  _OWORD v263[2];
  __int128 v264;
  _QWORD *v265;
  _QWORD *v266;

  v1 = v0;
  type metadata accessor for String.Encoding(0);
  __chkstk_darwin();
  v3 = (char *)&v261 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = _swiftEmptyDictionarySingleton;
  v266 = _swiftEmptyDictionarySingleton;
  LOBYTE(v2) = *v0;
  v265 = &type metadata for Bool;
  LOBYTE(v264) = v2;
  sub_100033A2C(&v264, v263);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v262 = _swiftEmptyDictionarySingleton;
  sub_100031410(v263, 0, isUniquelyReferenced_nonNull_native);
  v6 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v7 = *(_WORD *)(v1 + 1);
  v8 = sub_100012C44(&qword_100403E88);
  v9 = swift_allocObject(v8, 34, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10033C020;
  *(_WORD *)(v9 + 32) = v7;
  *(_QWORD *)&v264 = v9;
  static String.Encoding.utf8.getter(v9);
  v10 = sub_100012C44(&qword_100406738);
  v11 = sub_10015F240();
  v12 = String.init<A>(bytes:encoding:)(&v264, v3, v10, v11);
  v14 = v13;
  swift_bridgeObjectRelease(v9);
  if (v14)
    v15 = v12;
  else
    v15 = 0;
  v16 = 0xE000000000000000;
  v265 = &type metadata for String;
  if (v14)
    v16 = v14;
  *(_QWORD *)&v264 = v15;
  *((_QWORD *)&v264 + 1) = v16;
  sub_100033A2C(&v264, v263);
  v17 = swift_isUniquelyReferenced_nonNull_native(v6);
  v262 = v6;
  sub_100031410(v263, 1, v17);
  v18 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v19 = *((_QWORD *)v1 + 1);
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v19;
  sub_100033A2C(&v264, v263);
  v20 = swift_isUniquelyReferenced_nonNull_native(v18);
  v262 = v18;
  sub_100031410(v263, 2, v20);
  v21 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v22 = *((_QWORD *)v1 + 2);
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v22;
  sub_100033A2C(&v264, v263);
  v23 = swift_isUniquelyReferenced_nonNull_native(v21);
  v262 = v21;
  sub_100031410(v263, 3, v23);
  v24 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v25 = *((_QWORD *)v1 + 3);
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v25;
  sub_100033A2C(&v264, v263);
  v26 = swift_isUniquelyReferenced_nonNull_native(v24);
  v262 = v24;
  sub_100031410(v263, 4, v26);
  v27 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v28 = *((unsigned int *)v1 + 8) | ((unint64_t)*((unsigned __int16 *)v1 + 18) << 32);
  v265 = &type metadata for UInt32;
  if ((v28 & 0xFF00000000) == 0x300000000)
    LODWORD(v28) = 0;
  LODWORD(v264) = v28;
  sub_100033A2C(&v264, v263);
  v29 = swift_isUniquelyReferenced_nonNull_native(v27);
  v262 = v27;
  sub_100031410(v263, 5, v29);
  v30 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v31 = *((unsigned int *)v1 + 10) | ((unint64_t)*((unsigned __int16 *)v1 + 22) << 32);
  v265 = &type metadata for UInt32;
  if ((v31 & 0xFF00000000) == 0x300000000)
    LODWORD(v31) = 0;
  LODWORD(v264) = v31;
  sub_100033A2C(&v264, v263);
  v32 = swift_isUniquelyReferenced_nonNull_native(v30);
  v262 = v30;
  sub_100031410(v263, 6, v32);
  v33 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v34 = *((unsigned int *)v1 + 12) | ((unint64_t)*((unsigned __int16 *)v1 + 26) << 32);
  v265 = &type metadata for UInt32;
  if ((v34 & 0xFF00000000) == 0x300000000)
    LODWORD(v34) = 0;
  LODWORD(v264) = v34;
  sub_100033A2C(&v264, v263);
  v35 = swift_isUniquelyReferenced_nonNull_native(v33);
  v262 = v33;
  sub_100031410(v263, 7, v35);
  v36 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v37 = *((unsigned int *)v1 + 14) | ((unint64_t)*((unsigned __int16 *)v1 + 30) << 32);
  v265 = &type metadata for UInt32;
  if ((v37 & 0xFF00000000) == 0x300000000)
    LODWORD(v37) = 0;
  LODWORD(v264) = v37;
  sub_100033A2C(&v264, v263);
  v38 = swift_isUniquelyReferenced_nonNull_native(v36);
  v262 = v36;
  sub_100031410(v263, 8, v38);
  v39 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v40 = *((_QWORD *)v1 + 8);
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v40;
  sub_100033A2C(&v264, v263);
  v41 = swift_isUniquelyReferenced_nonNull_native(v39);
  v262 = v39;
  sub_100031410(v263, 9, v41);
  v42 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v43 = *((_QWORD *)v1 + 9);
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v43;
  sub_100033A2C(&v264, v263);
  v44 = swift_isUniquelyReferenced_nonNull_native(v42);
  v262 = v42;
  sub_100031410(v263, 10, v44);
  v45 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v46 = *((_QWORD *)v1 + 10);
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v46;
  sub_100033A2C(&v264, v263);
  v47 = swift_isUniquelyReferenced_nonNull_native(v45);
  v262 = v45;
  sub_100031410(v263, 11, v47);
  v48 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v49 = *((_QWORD *)v1 + 11);
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v49;
  sub_100033A2C(&v264, v263);
  v50 = swift_isUniquelyReferenced_nonNull_native(v48);
  v262 = v48;
  sub_100031410(v263, 12, v50);
  v51 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v52 = *((_QWORD *)v1 + 12);
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v52;
  sub_100033A2C(&v264, v263);
  v53 = swift_isUniquelyReferenced_nonNull_native(v51);
  v262 = v51;
  sub_100031410(v263, 13, v53);
  v54 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v55 = *((_QWORD *)v1 + 13);
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v55;
  sub_100033A2C(&v264, v263);
  v56 = swift_isUniquelyReferenced_nonNull_native(v54);
  v262 = v54;
  sub_100031410(v263, 14, v56);
  v57 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v58 = v1[112];
  v265 = &type metadata for Bool;
  LOBYTE(v264) = v58;
  sub_100033A2C(&v264, v263);
  v59 = swift_isUniquelyReferenced_nonNull_native(v57);
  v262 = v57;
  sub_100031410(v263, 15, v59);
  v60 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v61 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  v62 = DispatchTimeInterval.rawSeconds.getter();
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v62;
  sub_100033A2C(&v264, v263);
  v63 = swift_isUniquelyReferenced_nonNull_native(v60);
  v262 = v60;
  sub_100031410(v263, 16, v63);
  v64 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v65 = *(_QWORD *)&v1[v61[21]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v65;
  sub_100033A2C(&v264, v263);
  v66 = swift_isUniquelyReferenced_nonNull_native(v64);
  v262 = v64;
  sub_100031410(v263, 17, v66);
  v67 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v68 = *(_QWORD *)&v1[v61[22]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v68;
  sub_100033A2C(&v264, v263);
  v69 = swift_isUniquelyReferenced_nonNull_native(v67);
  v262 = v67;
  sub_100031410(v263, 18, v69);
  v70 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v71 = *(_QWORD *)&v1[v61[23]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v71;
  sub_100033A2C(&v264, v263);
  v72 = swift_isUniquelyReferenced_nonNull_native(v70);
  v262 = v70;
  sub_100031410(v263, 19, v72);
  v73 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v74 = *(_QWORD *)&v1[v61[24]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v74;
  sub_100033A2C(&v264, v263);
  v75 = swift_isUniquelyReferenced_nonNull_native(v73);
  v262 = v73;
  sub_100031410(v263, 20, v75);
  v76 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v77 = *(_QWORD *)&v1[v61[25]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v77;
  sub_100033A2C(&v264, v263);
  v78 = swift_isUniquelyReferenced_nonNull_native(v76);
  v262 = v76;
  sub_100031410(v263, 21, v78);
  v79 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v80 = *(_QWORD *)&v1[v61[26]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v80;
  sub_100033A2C(&v264, v263);
  v81 = swift_isUniquelyReferenced_nonNull_native(v79);
  v262 = v79;
  sub_100031410(v263, 22, v81);
  v82 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v83 = *(_QWORD *)&v1[v61[27]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v83;
  sub_100033A2C(&v264, v263);
  v84 = swift_isUniquelyReferenced_nonNull_native(v82);
  v262 = v82;
  sub_100031410(v263, 23, v84);
  v85 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v86 = *(_QWORD *)&v1[v61[28]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v86;
  sub_100033A2C(&v264, v263);
  v87 = swift_isUniquelyReferenced_nonNull_native(v85);
  v262 = v85;
  sub_100031410(v263, 24, v87);
  v88 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v89 = *(_WORD *)&v1[v61[29]];
  v265 = &type metadata for UInt16;
  LOWORD(v264) = v89;
  sub_100033A2C(&v264, v263);
  v90 = swift_isUniquelyReferenced_nonNull_native(v88);
  v262 = v88;
  sub_100031410(v263, 25, v90);
  v91 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v92 = v1[v61[30]];
  v265 = &type metadata for Bool;
  LOBYTE(v264) = v92;
  sub_100033A2C(&v264, v263);
  v93 = swift_isUniquelyReferenced_nonNull_native(v91);
  v262 = v91;
  sub_100031410(v263, 26, v93);
  v94 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v95 = v1[v61[31]];
  v265 = &type metadata for Bool;
  LOBYTE(v264) = v95;
  sub_100033A2C(&v264, v263);
  v96 = swift_isUniquelyReferenced_nonNull_native(v94);
  v262 = v94;
  sub_100031410(v263, 27, v96);
  v97 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v98 = v1[v61[32]];
  v265 = &type metadata for Bool;
  LOBYTE(v264) = v98;
  sub_100033A2C(&v264, v263);
  v99 = swift_isUniquelyReferenced_nonNull_native(v97);
  v262 = v97;
  sub_100031410(v263, 28, v99);
  v100 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v101 = v1[v61[33]];
  v265 = &type metadata for Bool;
  LOBYTE(v264) = v101;
  sub_100033A2C(&v264, v263);
  v102 = swift_isUniquelyReferenced_nonNull_native(v100);
  v262 = v100;
  sub_100031410(v263, 29, v102);
  v103 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v104 = v1[v61[34]];
  v265 = &type metadata for Bool;
  LOBYTE(v264) = v104;
  sub_100033A2C(&v264, v263);
  v105 = swift_isUniquelyReferenced_nonNull_native(v103);
  v262 = v103;
  sub_100031410(v263, 30, v105);
  v106 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v107 = v1[v61[35]];
  v265 = &type metadata for UInt8;
  LOBYTE(v264) = v107;
  sub_100033A2C(&v264, v263);
  v108 = swift_isUniquelyReferenced_nonNull_native(v106);
  v262 = v106;
  sub_100031410(v263, 31, v108);
  v109 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v110 = (uint64_t *)&v1[v61[36]];
  v111 = *v110;
  v112 = v110[1];
  v265 = &type metadata for String;
  *(_QWORD *)&v264 = v111;
  *((_QWORD *)&v264 + 1) = v112;
  sub_100033A2C(&v264, v263);
  swift_bridgeObjectRetain(v112);
  v113 = swift_isUniquelyReferenced_nonNull_native(v109);
  v262 = v109;
  sub_100031410(v263, 32, v113);
  v114 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v115 = v1[v61[37]];
  v265 = &type metadata for Bool;
  LOBYTE(v264) = v115;
  sub_100033A2C(&v264, v263);
  v116 = swift_isUniquelyReferenced_nonNull_native(v114);
  v262 = v114;
  sub_100031410(v263, 33, v116);
  v117 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v118 = *(_QWORD *)&v1[v61[38]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v118;
  sub_100033A2C(&v264, v263);
  v119 = swift_isUniquelyReferenced_nonNull_native(v117);
  v262 = v117;
  sub_100031410(v263, 34, v119);
  v120 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v121 = *(_QWORD *)&v1[v61[39]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v121;
  sub_100033A2C(&v264, v263);
  v122 = swift_isUniquelyReferenced_nonNull_native(v120);
  v262 = v120;
  sub_100031410(v263, 35, v122);
  v123 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v124 = *(_QWORD *)&v1[v61[40]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v124;
  sub_100033A2C(&v264, v263);
  v125 = swift_isUniquelyReferenced_nonNull_native(v123);
  v262 = v123;
  sub_100031410(v263, 36, v125);
  v126 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v127 = *(_QWORD *)&v1[v61[41]];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v127;
  sub_100033A2C(&v264, v263);
  v128 = swift_isUniquelyReferenced_nonNull_native(v126);
  v262 = v126;
  sub_100031410(v263, 37, v128);
  v129 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v130 = (uint64_t *)&v1[*(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20)];
  v131 = *v130;
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v131;
  sub_100033A2C(&v264, v263);
  v132 = swift_isUniquelyReferenced_nonNull_native(v129);
  v262 = v129;
  sub_100031410(v263, 38, v132);
  v133 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v134 = v130[1];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v134;
  sub_100033A2C(&v264, v263);
  v135 = swift_isUniquelyReferenced_nonNull_native(v133);
  v262 = v133;
  sub_100031410(v263, 39, v135);
  v136 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v137 = v130[2];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v137;
  sub_100033A2C(&v264, v263);
  v138 = swift_isUniquelyReferenced_nonNull_native(v136);
  v262 = v136;
  sub_100031410(v263, 40, v138);
  v139 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v140 = v130[3];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v140;
  sub_100033A2C(&v264, v263);
  v141 = swift_isUniquelyReferenced_nonNull_native(v139);
  v262 = v139;
  sub_100031410(v263, 41, v141);
  v142 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v143 = v130[4];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v143;
  sub_100033A2C(&v264, v263);
  v144 = swift_isUniquelyReferenced_nonNull_native(v142);
  v262 = v142;
  sub_100031410(v263, 42, v144);
  v145 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v146 = v130[5];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v146;
  sub_100033A2C(&v264, v263);
  v147 = swift_isUniquelyReferenced_nonNull_native(v145);
  v262 = v145;
  sub_100031410(v263, 43, v147);
  v148 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v149 = v130[6];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v149;
  sub_100033A2C(&v264, v263);
  v150 = swift_isUniquelyReferenced_nonNull_native(v148);
  v262 = v148;
  sub_100031410(v263, 44, v150);
  v151 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v152 = v130[7];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v152;
  sub_100033A2C(&v264, v263);
  v153 = swift_isUniquelyReferenced_nonNull_native(v151);
  v262 = v151;
  sub_100031410(v263, 45, v153);
  v154 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v155 = v130[8];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v155;
  sub_100033A2C(&v264, v263);
  v156 = swift_isUniquelyReferenced_nonNull_native(v154);
  v262 = v154;
  sub_100031410(v263, 46, v156);
  v157 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v158 = v130[9];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v158;
  sub_100033A2C(&v264, v263);
  v159 = swift_isUniquelyReferenced_nonNull_native(v157);
  v262 = v157;
  sub_100031410(v263, 47, v159);
  v160 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v161 = v130[10];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v161;
  sub_100033A2C(&v264, v263);
  v162 = swift_isUniquelyReferenced_nonNull_native(v160);
  v262 = v160;
  sub_100031410(v263, 48, v162);
  v163 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v164 = v130[11];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v164;
  sub_100033A2C(&v264, v263);
  v165 = swift_isUniquelyReferenced_nonNull_native(v163);
  v262 = v163;
  sub_100031410(v263, 49, v165);
  v166 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v167 = v130[12];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v167;
  sub_100033A2C(&v264, v263);
  v168 = swift_isUniquelyReferenced_nonNull_native(v166);
  v262 = v166;
  sub_100031410(v263, 50, v168);
  v169 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v170 = v130[13];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v170;
  sub_100033A2C(&v264, v263);
  v171 = swift_isUniquelyReferenced_nonNull_native(v169);
  v262 = v169;
  sub_100031410(v263, 51, v171);
  v172 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v173 = v130[14];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v173;
  sub_100033A2C(&v264, v263);
  v174 = swift_isUniquelyReferenced_nonNull_native(v172);
  v262 = v172;
  sub_100031410(v263, 52, v174);
  v175 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v176 = v130[15];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v176;
  sub_100033A2C(&v264, v263);
  v177 = swift_isUniquelyReferenced_nonNull_native(v175);
  v262 = v175;
  sub_100031410(v263, 53, v177);
  v178 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v179 = v130[16];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v179;
  sub_100033A2C(&v264, v263);
  v180 = swift_isUniquelyReferenced_nonNull_native(v178);
  v262 = v178;
  sub_100031410(v263, 54, v180);
  v181 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v182 = v130[17];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v182;
  sub_100033A2C(&v264, v263);
  v183 = swift_isUniquelyReferenced_nonNull_native(v181);
  v262 = v181;
  sub_100031410(v263, 55, v183);
  v184 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v185 = v130[18];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v185;
  sub_100033A2C(&v264, v263);
  v186 = swift_isUniquelyReferenced_nonNull_native(v184);
  v262 = v184;
  sub_100031410(v263, 56, v186);
  v187 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v188 = v130[19];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v188;
  sub_100033A2C(&v264, v263);
  v189 = swift_isUniquelyReferenced_nonNull_native(v187);
  v262 = v187;
  sub_100031410(v263, 57, v189);
  v190 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v191 = v130[20];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v191;
  sub_100033A2C(&v264, v263);
  v192 = swift_isUniquelyReferenced_nonNull_native(v190);
  v262 = v190;
  sub_100031410(v263, 58, v192);
  v193 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v194 = v130[21];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v194;
  sub_100033A2C(&v264, v263);
  v195 = swift_isUniquelyReferenced_nonNull_native(v193);
  v262 = v193;
  sub_100031410(v263, 59, v195);
  v196 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v197 = v130[22];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v197;
  sub_100033A2C(&v264, v263);
  v198 = swift_isUniquelyReferenced_nonNull_native(v196);
  v262 = v196;
  sub_100031410(v263, 60, v198);
  v199 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v200 = v130[23];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v200;
  sub_100033A2C(&v264, v263);
  v201 = swift_isUniquelyReferenced_nonNull_native(v199);
  v262 = v199;
  sub_100031410(v263, 61, v201);
  v202 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v203 = v130[24];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v203;
  sub_100033A2C(&v264, v263);
  v204 = swift_isUniquelyReferenced_nonNull_native(v202);
  v262 = v202;
  sub_100031410(v263, 62, v204);
  v205 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v206 = v130[25];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v206;
  sub_100033A2C(&v264, v263);
  v207 = swift_isUniquelyReferenced_nonNull_native(v205);
  v262 = v205;
  sub_100031410(v263, 63, v207);
  v208 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v209 = v130[26];
  v265 = &type metadata for Int;
  *(_QWORD *)&v264 = v209;
  sub_100033A2C(&v264, v263);
  v210 = swift_isUniquelyReferenced_nonNull_native(v208);
  v262 = v208;
  sub_100031410(v263, 64, v210);
  v211 = v262;
  swift_bridgeObjectRelease(0x8000000000000000);
  v212 = v130[27];
  v213 = swift_bridgeObjectRetain(v212);
  sub_1001545B0(v213, 0, &v266);
  swift_bridgeObjectRelease(v212);
  v214 = v130[28];
  v215 = swift_bridgeObjectRetain(v214);
  sub_1001545B0(v215, 1, &v266);
  swift_bridgeObjectRelease(v214);
  v216 = v130[29];
  v217 = swift_bridgeObjectRetain(v216);
  sub_1001545B0(v217, 2, &v266);
  swift_bridgeObjectRelease(v216);
  v218 = v130[30];
  v219 = swift_bridgeObjectRetain(v218);
  sub_1001545B0(v219, 3, &v266);
  swift_bridgeObjectRelease(v218);
  v220 = v130[31];
  v221 = swift_bridgeObjectRetain(v220);
  sub_1001545B0(v221, 4, &v266);
  swift_bridgeObjectRelease(v220);
  v222 = v130[32];
  v223 = swift_bridgeObjectRetain(v222);
  sub_1001545B0(v223, 5, &v266);
  swift_bridgeObjectRelease(v222);
  v224 = v130[33];
  v225 = swift_bridgeObjectRetain(v224);
  sub_1001545B0(v225, 6, &v266);
  swift_bridgeObjectRelease(v224);
  v226 = v130[34];
  v227 = swift_bridgeObjectRetain(v226);
  sub_1001545B0(v227, 7, &v266);
  swift_bridgeObjectRelease(v226);
  v228 = v130[35];
  v229 = swift_bridgeObjectRetain(v228);
  sub_1001545B0(v229, 8, &v266);
  swift_bridgeObjectRelease(v228);
  v230 = v130[36];
  v231 = swift_bridgeObjectRetain(v230);
  sub_1001545B0(v231, 9, &v266);
  swift_bridgeObjectRelease(v230);
  v232 = v130[37];
  v233 = swift_bridgeObjectRetain(v232);
  sub_1001545B0(v233, 10, &v266);
  swift_bridgeObjectRelease(v232);
  v234 = v130[38];
  v235 = swift_bridgeObjectRetain(v234);
  sub_1001545B0(v235, 11, &v266);
  swift_bridgeObjectRelease(v234);
  v236 = v130[39];
  v237 = swift_bridgeObjectRetain(v236);
  sub_1001545B0(v237, 12, &v266);
  swift_bridgeObjectRelease(v236);
  v238 = v130[40];
  v239 = swift_bridgeObjectRetain(v238);
  sub_1001545B0(v239, 13, &v266);
  swift_bridgeObjectRelease(v238);
  v240 = v130[41];
  v241 = swift_bridgeObjectRetain(v240);
  sub_1001545B0(v241, 14, &v266);
  swift_bridgeObjectRelease(v240);
  v242 = v130[42];
  v243 = swift_bridgeObjectRetain(v242);
  sub_1001545B0(v243, 15, &v266);
  swift_bridgeObjectRelease(v242);
  v244 = v130[43];
  v245 = swift_bridgeObjectRetain(v244);
  sub_1001545B0(v245, 16, &v266);
  swift_bridgeObjectRelease(v244);
  v246 = v130[44];
  v247 = swift_bridgeObjectRetain(v246);
  sub_1001545B0(v247, 17, &v266);
  swift_bridgeObjectRelease(v246);
  v248 = swift_bridgeObjectRetain(v211);
  v249 = sub_1001504AC(v248, (uint64_t (*)(_QWORD))sub_100157B4C, &qword_100409348);
  v250 = *(_QWORD *)(v249 + 16);
  if (v250)
  {
    sub_100012C44(&qword_100408FE8);
    v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v250);
  }
  *(_QWORD *)&v264 = v4;
  v251 = (_QWORD *)swift_bridgeObjectRetain(v249);
  sub_10015DA04(v251, 1, &v264);
  swift_bridgeObjectRelease(v211);
  swift_bridgeObjectRelease(v249);
  v252 = v264;
  v253 = v266;
  v254 = swift_bridgeObjectRetain(v266);
  v255 = sub_10015016C(v254);
  v256 = *(_QWORD *)(v255 + 16);
  if (v256)
  {
    sub_100012C44(&qword_100408FE8);
    v257 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v256);
  }
  else
  {
    v257 = _swiftEmptyDictionarySingleton;
  }
  *(_QWORD *)&v264 = v257;
  v258 = (_QWORD *)swift_bridgeObjectRetain(v255);
  sub_10015DA04(v258, 1, &v264);
  swift_bridgeObjectRelease(v253);
  swift_bridgeObjectRelease(v255);
  v259 = sub_100150B98(v264, v252, (uint64_t)sub_1001972B8, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_10015DD90);
  swift_bridgeObjectRelease(v211);
  swift_bridgeObjectRelease(v253);
  return v259;
}

void AWDLStatistics.LowLatencyStatistics.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)(a1);
  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20));
  v4 = v3[27];
  v5 = v3[28];
  v6 = v3[29];
  v7 = v3[30];
  v8 = v3[31];
  v9 = v3[32];
  v10 = v3[33];
  v11 = v3[34];
  v12 = v3[35];
  v13 = v3[36];
  v14 = v3[37];
  v15 = v3[38];
  v16 = v3[39];
  v17 = v3[40];
  v18 = v3[41];
  v19 = v3[42];
  v20 = v3[43];
  v21 = v3[44];
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10008E368(a1, v4);
  sub_10008E368(a1, v5);
  sub_10008E368(a1, v6);
  sub_10008E368(a1, v7);
  sub_10008E368(a1, v8);
  sub_10008E368(a1, v9);
  sub_10008E368(a1, v10);
  sub_10008E368(a1, v11);
  sub_10008E368(a1, v12);
  sub_10008E368(a1, v13);
  sub_10008E368(a1, v14);
  sub_10008E368(a1, v15);
  sub_10008E368(a1, v16);
  sub_10008E368(a1, v17);
  sub_10008E368(a1, v18);
  sub_10008E368(a1, v19);
  sub_10008E368(a1, v20);
  sub_10008E368(a1, v21);
}

Swift::Int AWDLStatistics.LowLatencyStatistics.hashValue.getter()
{
  uint64_t v0;
  __int128 *v1;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[9];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  Hasher.init(_seed:)(v27);
  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)((uint64_t)v27);
  v1 = (__int128 *)(v0 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20));
  v2 = v1[11];
  v38 = v1[10];
  v39 = v2;
  v40 = v1[12];
  v3 = *((_QWORD *)v1 + 27);
  v41 = *((_QWORD *)v1 + 26);
  v4 = v1[7];
  v34 = v1[6];
  v35 = v4;
  v5 = v1[9];
  v36 = v1[8];
  v37 = v5;
  v6 = v1[3];
  v30 = v1[2];
  v31 = v6;
  v7 = v1[5];
  v32 = v1[4];
  v33 = v7;
  v8 = v1[1];
  v28 = *v1;
  v29 = v8;
  v9 = *((_QWORD *)v1 + 28);
  v10 = *((_QWORD *)v1 + 29);
  v11 = *((_QWORD *)v1 + 30);
  v12 = *((_QWORD *)v1 + 31);
  v13 = *((_QWORD *)v1 + 32);
  v14 = *((_QWORD *)v1 + 33);
  v15 = *((_QWORD *)v1 + 34);
  v16 = *((_QWORD *)v1 + 35);
  v18 = *((_QWORD *)v1 + 36);
  v19 = *((_QWORD *)v1 + 37);
  v20 = *((_QWORD *)v1 + 38);
  v21 = *((_QWORD *)v1 + 39);
  v22 = *((_QWORD *)v1 + 40);
  v23 = *((_QWORD *)v1 + 41);
  v24 = *((_QWORD *)v1 + 42);
  v25 = *((_QWORD *)v1 + 43);
  v26 = *((_QWORD *)v1 + 44);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10008E368((uint64_t)v27, v3);
  sub_10008E368((uint64_t)v27, v9);
  sub_10008E368((uint64_t)v27, v10);
  sub_10008E368((uint64_t)v27, v11);
  sub_10008E368((uint64_t)v27, v12);
  sub_10008E368((uint64_t)v27, v13);
  sub_10008E368((uint64_t)v27, v14);
  sub_10008E368((uint64_t)v27, v15);
  sub_10008E368((uint64_t)v27, v16);
  sub_10008E368((uint64_t)v27, v18);
  sub_10008E368((uint64_t)v27, v19);
  sub_10008E368((uint64_t)v27, v20);
  sub_10008E368((uint64_t)v27, v21);
  sub_10008E368((uint64_t)v27, v22);
  sub_10008E368((uint64_t)v27, v23);
  sub_10008E368((uint64_t)v27, v24);
  sub_10008E368((uint64_t)v27, v25);
  sub_10008E368((uint64_t)v27, v26);
  return Hasher._finalize()();
}

Swift::Int sub_10015629C(uint64_t a1)
{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[9];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  Hasher.init(_seed:)(v29);
  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)((uint64_t)v29);
  v3 = (__int128 *)(v1 + *(int *)(a1 + 20));
  v4 = v3[11];
  v40 = v3[10];
  v41 = v4;
  v42 = v3[12];
  v5 = *((_QWORD *)v3 + 27);
  v43 = *((_QWORD *)v3 + 26);
  v6 = v3[7];
  v36 = v3[6];
  v37 = v6;
  v7 = v3[9];
  v38 = v3[8];
  v39 = v7;
  v8 = v3[3];
  v32 = v3[2];
  v33 = v8;
  v9 = v3[5];
  v34 = v3[4];
  v35 = v9;
  v10 = v3[1];
  v30 = *v3;
  v31 = v10;
  v11 = *((_QWORD *)v3 + 28);
  v12 = *((_QWORD *)v3 + 29);
  v13 = *((_QWORD *)v3 + 30);
  v14 = *((_QWORD *)v3 + 31);
  v15 = *((_QWORD *)v3 + 32);
  v16 = *((_QWORD *)v3 + 33);
  v17 = *((_QWORD *)v3 + 34);
  v18 = *((_QWORD *)v3 + 35);
  v20 = *((_QWORD *)v3 + 36);
  v21 = *((_QWORD *)v3 + 37);
  v22 = *((_QWORD *)v3 + 38);
  v23 = *((_QWORD *)v3 + 39);
  v24 = *((_QWORD *)v3 + 40);
  v25 = *((_QWORD *)v3 + 41);
  v26 = *((_QWORD *)v3 + 42);
  v27 = *((_QWORD *)v3 + 43);
  v28 = *((_QWORD *)v3 + 44);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10008E368((uint64_t)v29, v5);
  sub_10008E368((uint64_t)v29, v11);
  sub_10008E368((uint64_t)v29, v12);
  sub_10008E368((uint64_t)v29, v13);
  sub_10008E368((uint64_t)v29, v14);
  sub_10008E368((uint64_t)v29, v15);
  sub_10008E368((uint64_t)v29, v16);
  sub_10008E368((uint64_t)v29, v17);
  sub_10008E368((uint64_t)v29, v18);
  sub_10008E368((uint64_t)v29, v20);
  sub_10008E368((uint64_t)v29, v21);
  sub_10008E368((uint64_t)v29, v22);
  sub_10008E368((uint64_t)v29, v23);
  sub_10008E368((uint64_t)v29, v24);
  sub_10008E368((uint64_t)v29, v25);
  sub_10008E368((uint64_t)v29, v26);
  sub_10008E368((uint64_t)v29, v27);
  sub_10008E368((uint64_t)v29, v28);
  return Hasher._finalize()();
}

void sub_100156470(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)(a1);
  v5 = (_QWORD *)(v2 + *(int *)(a2 + 20));
  v6 = v5[27];
  v7 = v5[28];
  v8 = v5[29];
  v9 = v5[30];
  v10 = v5[31];
  v11 = v5[32];
  v12 = v5[33];
  v13 = v5[34];
  v14 = v5[35];
  v15 = v5[36];
  v16 = v5[37];
  v17 = v5[38];
  v18 = v5[39];
  v19 = v5[40];
  v20 = v5[41];
  v21 = v5[42];
  v22 = v5[43];
  v23 = v5[44];
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10008E368(a1, v6);
  sub_10008E368(a1, v7);
  sub_10008E368(a1, v8);
  sub_10008E368(a1, v9);
  sub_10008E368(a1, v10);
  sub_10008E368(a1, v11);
  sub_10008E368(a1, v12);
  sub_10008E368(a1, v13);
  sub_10008E368(a1, v14);
  sub_10008E368(a1, v15);
  sub_10008E368(a1, v16);
  sub_10008E368(a1, v17);
  sub_10008E368(a1, v18);
  sub_10008E368(a1, v19);
  sub_10008E368(a1, v20);
  sub_10008E368(a1, v21);
  sub_10008E368(a1, v22);
  sub_10008E368(a1, v23);
}

Swift::Int sub_100156628(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[9];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  Hasher.init(_seed:)(v30);
  AWDLStatistics.LowLatencyStatistics.Configuration.hash(into:)((uint64_t)v30);
  v4 = (__int128 *)(v2 + *(int *)(a2 + 20));
  v5 = v4[11];
  v41 = v4[10];
  v42 = v5;
  v43 = v4[12];
  v6 = *((_QWORD *)v4 + 27);
  v44 = *((_QWORD *)v4 + 26);
  v7 = v4[7];
  v37 = v4[6];
  v38 = v7;
  v8 = v4[9];
  v39 = v4[8];
  v40 = v8;
  v9 = v4[3];
  v33 = v4[2];
  v34 = v9;
  v10 = v4[5];
  v35 = v4[4];
  v36 = v10;
  v11 = v4[1];
  v31 = *v4;
  v32 = v11;
  v12 = *((_QWORD *)v4 + 28);
  v13 = *((_QWORD *)v4 + 29);
  v14 = *((_QWORD *)v4 + 30);
  v15 = *((_QWORD *)v4 + 31);
  v16 = *((_QWORD *)v4 + 32);
  v17 = *((_QWORD *)v4 + 33);
  v18 = *((_QWORD *)v4 + 34);
  v19 = *((_QWORD *)v4 + 35);
  v21 = *((_QWORD *)v4 + 36);
  v22 = *((_QWORD *)v4 + 37);
  v23 = *((_QWORD *)v4 + 38);
  v24 = *((_QWORD *)v4 + 39);
  v25 = *((_QWORD *)v4 + 40);
  v26 = *((_QWORD *)v4 + 41);
  v27 = *((_QWORD *)v4 + 42);
  v28 = *((_QWORD *)v4 + 43);
  v29 = *((_QWORD *)v4 + 44);
  AWDLStatistics.LowLatencyStatistics.Traffic.Counts.hash(into:)();
  sub_10008E368((uint64_t)v30, v6);
  sub_10008E368((uint64_t)v30, v12);
  sub_10008E368((uint64_t)v30, v13);
  sub_10008E368((uint64_t)v30, v14);
  sub_10008E368((uint64_t)v30, v15);
  sub_10008E368((uint64_t)v30, v16);
  sub_10008E368((uint64_t)v30, v17);
  sub_10008E368((uint64_t)v30, v18);
  sub_10008E368((uint64_t)v30, v19);
  sub_10008E368((uint64_t)v30, v21);
  sub_10008E368((uint64_t)v30, v22);
  sub_10008E368((uint64_t)v30, v23);
  sub_10008E368((uint64_t)v30, v24);
  sub_10008E368((uint64_t)v30, v25);
  sub_10008E368((uint64_t)v30, v26);
  sub_10008E368((uint64_t)v30, v27);
  sub_10008E368((uint64_t)v30, v28);
  sub_10008E368((uint64_t)v30, v29);
  return Hasher._finalize()();
}

BOOL sub_1001567F8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned __int8 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v33[9];
  _OWORD v34[9];
  _OWORD v35[13];
  uint64_t v36;
  _OWORD v37[13];
  uint64_t v38;

  if (!_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(a1, a2))
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(_OWORD *)&a1[v6 + 176];
  v35[10] = *(_OWORD *)&a1[v6 + 160];
  v35[11] = v7;
  v35[12] = *(_OWORD *)&a1[v6 + 192];
  v36 = *(_QWORD *)&a1[v6 + 208];
  v8 = *(_OWORD *)&a1[v6 + 112];
  v35[6] = *(_OWORD *)&a1[v6 + 96];
  v35[7] = v8;
  v9 = *(_OWORD *)&a1[v6 + 144];
  v35[8] = *(_OWORD *)&a1[v6 + 128];
  v35[9] = v9;
  v10 = *(_OWORD *)&a1[v6 + 48];
  v35[2] = *(_OWORD *)&a1[v6 + 32];
  v35[3] = v10;
  v11 = *(_OWORD *)&a1[v6 + 80];
  v35[4] = *(_OWORD *)&a1[v6 + 64];
  v35[5] = v11;
  v12 = *(_OWORD *)&a1[v6 + 16];
  v35[0] = *(_OWORD *)&a1[v6];
  v35[1] = v12;
  v13 = *(_OWORD *)&a1[v6 + 296];
  v14 = *(_OWORD *)&a1[v6 + 328];
  v15 = *(_OWORD *)&a1[v6 + 344];
  v33[6] = *(_OWORD *)&a1[v6 + 312];
  v33[7] = v14;
  v33[8] = v15;
  v16 = *(_OWORD *)&a1[v6 + 232];
  v17 = *(_OWORD *)&a1[v6 + 264];
  v18 = *(_OWORD *)&a1[v6 + 280];
  v33[2] = *(_OWORD *)&a1[v6 + 248];
  v33[3] = v17;
  v33[4] = v18;
  v33[5] = v13;
  v33[0] = *(_OWORD *)&a1[v6 + 216];
  v33[1] = v16;
  v19 = &a2[v6];
  v20 = *((_OWORD *)v19 + 11);
  v37[10] = *((_OWORD *)v19 + 10);
  v37[11] = v20;
  v37[12] = *((_OWORD *)v19 + 12);
  v38 = *((_QWORD *)v19 + 26);
  v21 = *((_OWORD *)v19 + 7);
  v37[6] = *((_OWORD *)v19 + 6);
  v37[7] = v21;
  v22 = *((_OWORD *)v19 + 9);
  v37[8] = *((_OWORD *)v19 + 8);
  v37[9] = v22;
  v23 = *((_OWORD *)v19 + 3);
  v37[2] = *((_OWORD *)v19 + 2);
  v37[3] = v23;
  v24 = *((_OWORD *)v19 + 5);
  v37[4] = *((_OWORD *)v19 + 4);
  v37[5] = v24;
  v25 = *((_OWORD *)v19 + 1);
  v37[0] = *(_OWORD *)v19;
  v37[1] = v25;
  v26 = *(_OWORD *)(v19 + 296);
  v27 = *(_OWORD *)(v19 + 328);
  v28 = *(_OWORD *)(v19 + 344);
  v34[6] = *(_OWORD *)(v19 + 312);
  v34[7] = v27;
  v34[8] = v28;
  v29 = *(_OWORD *)(v19 + 264);
  v30 = *(_OWORD *)(v19 + 280);
  v34[2] = *(_OWORD *)(v19 + 248);
  v34[3] = v29;
  v31 = *(_OWORD *)(v19 + 232);
  v34[4] = v30;
  v34[5] = v26;
  v34[0] = *(_OWORD *)(v19 + 216);
  v34[1] = v31;
  if (!_s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(v35, v37))return 0;
  return _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0((uint64_t *)v33, (uint64_t *)v34);
}

void AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt v9;
  Swift::UInt32 *v10;
  Swift::UInt32 v11;
  Swift::UInt v12;
  Swift::UInt32 *v13;
  Swift::UInt32 v14;
  Swift::UInt v15;
  Swift::UInt32 *v16;
  Swift::UInt32 v17;
  Swift::UInt v18;
  Swift::UInt32 *v19;
  Swift::UInt32 v20;

  v9 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    v10 = (Swift::UInt32 *)(a2 + 32);
    do
    {
      v11 = *v10++;
      Hasher._combine(_:)(v11);
      --v9;
    }
    while (v9);
  }
  v12 = *(_QWORD *)(a3 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    v13 = (Swift::UInt32 *)(a3 + 32);
    do
    {
      v14 = *v13++;
      Hasher._combine(_:)(v14);
      --v12;
    }
    while (v12);
  }
  v15 = *(_QWORD *)(a4 + 16);
  Hasher._combine(_:)(v15);
  if (v15)
  {
    v16 = (Swift::UInt32 *)(a4 + 32);
    do
    {
      v17 = *v16++;
      Hasher._combine(_:)(v17);
      --v15;
    }
    while (v15);
  }
  v18 = *(_QWORD *)(a5 + 16);
  Hasher._combine(_:)(v18);
  if (v18)
  {
    v19 = (Swift::UInt32 *)(a5 + 32);
    do
    {
      v20 = *v19++;
      Hasher._combine(_:)(v20);
      --v18;
    }
    while (v18);
  }
}

BOOL static AWDLStatistics.AirPlayStatistics.Histograms.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000851D4(a1, a5) && sub_1000851D4(a2, a6) && sub_1000851D4(a3, a7) && sub_1000851D4(a4, a8);
}

Swift::Int AWDLStatistics.AirPlayStatistics.Histograms.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)((uint64_t)v9, a1, a2, a3, a4);
  return Hasher._finalize()();
}

Swift::Int sub_100156B08()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)(v6);
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

void sub_100156B64(uint64_t a1)
{
  uint64_t *v1;

  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int sub_100156B70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)(v6);
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return Hasher._finalize()();
}

BOOL sub_100156BC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  return sub_1000851D4(*a1, *a2) && sub_1000851D4(v2, v5) && sub_1000851D4(v4, v7) && sub_1000851D4(v3, v6);
}

uint64_t AWDLStatistics.AirPlayStatistics.clientModeDuration.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t AWDLStatistics.AirPlayStatistics.splitModeDuration.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 28);
}

uint64_t AWDLStatistics.AirPlayStatistics.splitModeDuration.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 28) = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.routablePeerCount.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 34);
}

uint64_t AWDLStatistics.AirPlayStatistics.routablePeerCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 34) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.routablePeerCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.sequenceNumberNotUpdatedCount.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 36);
}

uint64_t AWDLStatistics.AirPlayStatistics.sequenceNumberNotUpdatedCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 36) = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.missingAWStartEventCount.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 38);
}

uint64_t AWDLStatistics.AirPlayStatistics.missingAWStartEventCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 38) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.missingAWStartEventCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.psfEnabledCount.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 40);
}

uint64_t AWDLStatistics.AirPlayStatistics.psfEnabledCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 40) = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.awdlVersion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t AWDLStatistics.AirPlayStatistics.awdlVersion.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 42) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.awdlVersion.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.infraDisconnectedCount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 43);
}

uint64_t AWDLStatistics.AirPlayStatistics.infraDisconnectedCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 43) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.infraDisconnectedCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannel.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 44);
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannel.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 44) = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannelFlags.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 48);
}

uint64_t AWDLStatistics.AirPlayStatistics.selfInfraChannelFlags.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 48) = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannel.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 52);
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannel.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 52) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.peerInfraChannel.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannelFlags.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 56);
}

uint64_t AWDLStatistics.AirPlayStatistics.peerInfraChannelFlags.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 56) = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.senderPlatform.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 60);
}

uint64_t AWDLStatistics.AirPlayStatistics.senderPlatform.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 60) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.senderPlatform.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.startingRSSI.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 61);
}

uint64_t AWDLStatistics.AirPlayStatistics.startingRSSI.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 61) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.startingRSSI.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.inRetroMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 62);
}

uint64_t AWDLStatistics.AirPlayStatistics.inRetroMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 62) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.inRetroMode.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.selfIsSDB.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 66);
}

uint64_t AWDLStatistics.AirPlayStatistics.selfIsSDB.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 66) = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.peerIsSDB.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 67);
}

uint64_t AWDLStatistics.AirPlayStatistics.peerIsSDB.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 67) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.peerIsSDB.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GCount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 68);
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 68) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.roamOutOf6GCount.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GSuccess.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 69);
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GSuccess.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 69) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.roamOutOf6GSuccess.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GFailure.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 70);
}

uint64_t AWDLStatistics.AirPlayStatistics.roamOutOf6GFailure.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 70) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.roamOutOf6GFailure.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasChannelsCnt.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 71);
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasChannelsCnt.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 71) = result;
  return result;
}

uint64_t (*AWDLStatistics.AirPlayStatistics.forceRoamHasChannelsCnt.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasNoChannelCnt.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t AWDLStatistics.AirPlayStatistics.forceRoamHasNoChannelCnt.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.histograms.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[10];
  v2 = v0[11];
  v4 = v0[12];
  v3 = v0[13];
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  return v1;
}

uint64_t AWDLStatistics.AirPlayStatistics.histograms.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t result;

  swift_bridgeObjectRelease(v4[10]);
  swift_bridgeObjectRelease(v4[11]);
  swift_bridgeObjectRelease(v4[12]);
  result = swift_bridgeObjectRelease(v4[13]);
  v4[10] = a1;
  v4[11] = a2;
  v4[12] = a3;
  v4[13] = a4;
  return result;
}

uint64_t AWDLStatistics.AirPlayStatistics.eventPayload.getter()
{
  uint64_t *v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  char v6;
  int v7;
  char v8;
  int v9;
  char v10;
  int v11;
  char v12;
  int v13;
  char v14;
  __int16 v15;
  char v16;
  __int16 v17;
  char v18;
  __int16 v19;
  char v20;
  __int16 v21;
  char v22;
  __int16 v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  int v31;
  char v32;
  char v33;
  char v34;
  int v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  _OWORD v80[2];
  __int128 v81;
  _QWORD *v82;
  _QWORD *v83;

  v1 = v0;
  v2 = _swiftEmptyDictionarySingleton;
  v83 = _swiftEmptyDictionarySingleton;
  v3 = *v0;
  v82 = &type metadata for UInt64;
  *(_QWORD *)&v81 = v3;
  sub_100033A2C(&v81, v80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v5 = v0[1];
  v82 = &type metadata for UInt64;
  *(_QWORD *)&v81 = v5;
  sub_100033A2C(&v81, v80);
  v6 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 1, v6);
  swift_bridgeObjectRelease(0x8000000000000000);
  v7 = *((_DWORD *)v0 + 4);
  v82 = &type metadata for UInt32;
  LODWORD(v81) = v7;
  sub_100033A2C(&v81, v80);
  v8 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 2, v8);
  swift_bridgeObjectRelease(0x8000000000000000);
  v9 = *((_DWORD *)v0 + 5);
  v82 = &type metadata for UInt32;
  LODWORD(v81) = v9;
  sub_100033A2C(&v81, v80);
  v10 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 3, v10);
  swift_bridgeObjectRelease(0x8000000000000000);
  v11 = *((_DWORD *)v0 + 6);
  v82 = &type metadata for UInt32;
  LODWORD(v81) = v11;
  sub_100033A2C(&v81, v80);
  v12 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 4, v12);
  swift_bridgeObjectRelease(0x8000000000000000);
  v13 = *((_DWORD *)v0 + 7);
  v82 = &type metadata for UInt32;
  LODWORD(v81) = v13;
  sub_100033A2C(&v81, v80);
  v14 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 5, v14);
  swift_bridgeObjectRelease(0x8000000000000000);
  v15 = *((_WORD *)v0 + 16);
  v82 = &type metadata for UInt16;
  LOWORD(v81) = v15;
  sub_100033A2C(&v81, v80);
  v16 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 6, v16);
  swift_bridgeObjectRelease(0x8000000000000000);
  v17 = *((_WORD *)v0 + 17);
  v82 = &type metadata for UInt16;
  LOWORD(v81) = v17;
  sub_100033A2C(&v81, v80);
  v18 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 7, v18);
  swift_bridgeObjectRelease(0x8000000000000000);
  v19 = *((_WORD *)v0 + 18);
  v82 = &type metadata for UInt16;
  LOWORD(v81) = v19;
  sub_100033A2C(&v81, v80);
  v20 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 8, v20);
  swift_bridgeObjectRelease(0x8000000000000000);
  v21 = *((_WORD *)v0 + 19);
  v82 = &type metadata for UInt16;
  LOWORD(v81) = v21;
  sub_100033A2C(&v81, v80);
  v22 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 9, v22);
  swift_bridgeObjectRelease(0x8000000000000000);
  v23 = *((_WORD *)v0 + 20);
  v82 = &type metadata for UInt16;
  LOWORD(v81) = v23;
  sub_100033A2C(&v81, v80);
  v24 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 10, v24);
  swift_bridgeObjectRelease(0x8000000000000000);
  v25 = *((_BYTE *)v0 + 42);
  v82 = &type metadata for UInt8;
  LOBYTE(v81) = v25;
  sub_100033A2C(&v81, v80);
  v26 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 11, v26);
  swift_bridgeObjectRelease(0x8000000000000000);
  v27 = *((_BYTE *)v0 + 43);
  v82 = &type metadata for UInt8;
  LOBYTE(v81) = v27;
  sub_100033A2C(&v81, v80);
  v28 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 12, v28);
  swift_bridgeObjectRelease(0x8000000000000000);
  v29 = *((_BYTE *)v0 + 44);
  v82 = &type metadata for UInt8;
  LOBYTE(v81) = v29;
  sub_100033A2C(&v81, v80);
  v30 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 13, v30);
  swift_bridgeObjectRelease(0x8000000000000000);
  v31 = *((_DWORD *)v0 + 12);
  v82 = &type metadata for UInt32;
  LODWORD(v81) = v31;
  sub_100033A2C(&v81, v80);
  v32 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 14, v32);
  swift_bridgeObjectRelease(0x8000000000000000);
  v33 = *((_BYTE *)v0 + 52);
  v82 = &type metadata for UInt8;
  LOBYTE(v81) = v33;
  sub_100033A2C(&v81, v80);
  v34 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 15, v34);
  swift_bridgeObjectRelease(0x8000000000000000);
  v35 = *((_DWORD *)v0 + 14);
  v82 = &type metadata for UInt32;
  LODWORD(v81) = v35;
  sub_100033A2C(&v81, v80);
  v36 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 16, v36);
  swift_bridgeObjectRelease(0x8000000000000000);
  v37 = *((_BYTE *)v0 + 60);
  v82 = &type metadata for UInt8;
  LOBYTE(v81) = v37;
  sub_100033A2C(&v81, v80);
  v38 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 17, v38);
  swift_bridgeObjectRelease(0x8000000000000000);
  v39 = *((_BYTE *)v0 + 61);
  v82 = &type metadata for Int8;
  LOBYTE(v81) = v39;
  sub_100033A2C(&v81, v80);
  v40 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 18, v40);
  swift_bridgeObjectRelease(0x8000000000000000);
  v41 = *((_BYTE *)v0 + 62);
  v82 = &type metadata for Bool;
  LOBYTE(v81) = v41;
  sub_100033A2C(&v81, v80);
  v42 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 19, v42);
  swift_bridgeObjectRelease(0x8000000000000000);
  v43 = *((_BYTE *)v0 + 63);
  v82 = &type metadata for Bool;
  LOBYTE(v81) = v43;
  sub_100033A2C(&v81, v80);
  v44 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 20, v44);
  swift_bridgeObjectRelease(0x8000000000000000);
  v45 = *((_BYTE *)v0 + 64);
  v82 = &type metadata for Bool;
  LOBYTE(v81) = v45;
  sub_100033A2C(&v81, v80);
  v46 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 21, v46);
  swift_bridgeObjectRelease(0x8000000000000000);
  v47 = *((_BYTE *)v0 + 65);
  v82 = &type metadata for Bool;
  LOBYTE(v81) = v47;
  sub_100033A2C(&v81, v80);
  v48 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 22, v48);
  swift_bridgeObjectRelease(0x8000000000000000);
  v49 = *((_BYTE *)v0 + 66);
  v82 = &type metadata for Bool;
  LOBYTE(v81) = v49;
  sub_100033A2C(&v81, v80);
  v50 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 23, v50);
  swift_bridgeObjectRelease(0x8000000000000000);
  v51 = *((_BYTE *)v0 + 67);
  v82 = &type metadata for Bool;
  LOBYTE(v81) = v51;
  sub_100033A2C(&v81, v80);
  v52 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 24, v52);
  swift_bridgeObjectRelease(0x8000000000000000);
  v53 = *((_BYTE *)v0 + 68);
  v82 = &type metadata for UInt8;
  LOBYTE(v81) = v53;
  sub_100033A2C(&v81, v80);
  v54 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 25, v54);
  swift_bridgeObjectRelease(0x8000000000000000);
  v55 = *((_BYTE *)v0 + 69);
  v82 = &type metadata for UInt8;
  LOBYTE(v81) = v55;
  sub_100033A2C(&v81, v80);
  v56 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 26, v56);
  swift_bridgeObjectRelease(0x8000000000000000);
  v57 = *((_BYTE *)v0 + 70);
  v82 = &type metadata for UInt8;
  LOBYTE(v81) = v57;
  sub_100033A2C(&v81, v80);
  v58 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 27, v58);
  swift_bridgeObjectRelease(0x8000000000000000);
  v59 = *((_BYTE *)v0 + 71);
  v82 = &type metadata for UInt8;
  LOBYTE(v81) = v59;
  sub_100033A2C(&v81, v80);
  v60 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 28, v60);
  swift_bridgeObjectRelease(0x8000000000000000);
  v61 = *((_BYTE *)v0 + 72);
  v82 = &type metadata for UInt8;
  LOBYTE(v81) = v61;
  sub_100033A2C(&v81, v80);
  v62 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031538(v80, 29, v62);
  swift_bridgeObjectRelease(0x8000000000000000);
  v63 = v0[10];
  v64 = v0[11];
  v66 = v1[12];
  v65 = v1[13];
  sub_10015F28C(v63, 0);
  sub_10015F28C(v65, 3);
  sub_10015F28C(v66, 2);
  sub_10015F28C(v64, 1);
  v67 = swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
  v68 = sub_1001504AC(v67, (uint64_t (*)(_QWORD))sub_100158B88, &qword_100409338);
  v69 = *(_QWORD *)(v68 + 16);
  if (v69)
  {
    sub_100012C44(&qword_100408FE8);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v69);
  }
  *(_QWORD *)&v81 = v2;
  v70 = (_QWORD *)swift_bridgeObjectRetain(v68);
  sub_10015DA04(v70, 1, &v81);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v68);
  v71 = v81;
  v72 = v83;
  v73 = swift_bridgeObjectRetain(v83);
  v74 = sub_10015016C(v73);
  v75 = *(_QWORD *)(v74 + 16);
  if (v75)
  {
    sub_100012C44(&qword_100408FE8);
    v76 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v75);
  }
  else
  {
    v76 = _swiftEmptyDictionarySingleton;
  }
  *(_QWORD *)&v81 = v76;
  v77 = (_QWORD *)swift_bridgeObjectRetain(v74);
  sub_10015DA04(v77, 1, &v81);
  swift_bridgeObjectRelease(v72);
  swift_bridgeObjectRelease(v74);
  v78 = sub_100150B98(v81, v71, (uint64_t)sub_1001972B8, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_10015DD90);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v72);
  return v78;
}

void AWDLStatistics.AirPlayStatistics.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  Hasher._combine(_:)(*(_QWORD *)v2);
  Hasher._combine(_:)(*(_QWORD *)(v2 + 8));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 16));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 20));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 24));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 28));
  Hasher._combine(_:)(*(_WORD *)(v2 + 32));
  Hasher._combine(_:)(*(_WORD *)(v2 + 34));
  Hasher._combine(_:)(*(_WORD *)(v2 + 36));
  Hasher._combine(_:)(*(_WORD *)(v2 + 38));
  Hasher._combine(_:)(*(_WORD *)(v2 + 40));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 42));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 43));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 44));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 48));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 52));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 56));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 60));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 61));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 62) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 63) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 64) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 65) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 66) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 67) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 68));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 69));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 70));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 71));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 72));
  AWDLStatistics.AirPlayStatistics.Histograms.hash(into:)(a1, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

Swift::Int AWDLStatistics.AirPlayStatistics.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  AWDLStatistics.AirPlayStatistics.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100157A8C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100157AC0 + 4 * byte_10034A514[a1]))(0x65636976726573, 0xE700000000000000);
}

uint64_t sub_100157AC0()
{
  return 0x6172666E49796DLL;
}

uint64_t sub_100157AD4()
{
  return 0x72666E4972656570;
}

uint64_t sub_100157AF0()
{
  return 0x424453796DLL;
}

uint64_t sub_100157B04()
{
  return 0x42445372656570;
}

unint64_t sub_100157B18()
{
  return 0xD000000000000011;
}

uint64_t sub_100157B34()
{
  return 0x44495353656D6173;
}

uint64_t sub_100157B4C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100157B7C + 4 * word_10034A51C[a1]))(0x4244537369, 0xE500000000000000);
}

uint64_t sub_100157B7C()
{
  return 0x437972746E756F63;
}

uint64_t sub_100157B9C()
{
  return 0x6973735272656570;
}

uint64_t sub_100157BC8()
{
  return 0x6163437874;
}

unint64_t sub_100157BD8()
{
  return 0xD000000000000018;
}

Swift::Int sub_100158184()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  AWDLStatistics.AirPlayStatistics.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL sub_1001581BC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[7];
  _OWORD v14[7];

  v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  v3 = a1[6];
  v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  v6 = *a2;
  v7 = a2[1];
  v13[6] = v3;
  v14[0] = v6;
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  v11 = a2[4];
  v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  v14[2] = v8;
  return _s7CoreP2P14AWDLStatisticsO17AirPlayStatisticsV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v13, (uint64_t)v14);
}

uint64_t sub_100158220(char *a1, char *a2)
{
  return sub_10003C348(*a1, *a2);
}

Swift::Int sub_10015822C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x64657463656A6572;
  else
    v2 = 0x6553657669746361;
  if (v1)
    v3 = 0xEF65636976726553;
  else
    v3 = 0xED00006563697672;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001582C4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x64657463656A6572;
  else
    v2 = 0x6553657669746361;
  if (*v1)
    v3 = 0xEF65636976726553;
  else
    v3 = 0xED00006563697672;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100158338()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x64657463656A6572;
  else
    v2 = 0x6553657669746361;
  if (v1)
    v3 = 0xEF65636976726553;
  else
    v3 = 0xED00006563697672;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001583CC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1003D5270;
  return sub_100158888(v2, a1, a2);
}

void sub_1001583D8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6553657669746361;
  if (*v1)
    v2 = 0x64657463656A6572;
  v3 = 0xED00006563697672;
  if (*v1)
    v3 = 0xEF65636976726553;
  *a1 = v2;
  a1[1] = v3;
}

void sub_100158430(char *a1)
{
  sub_10003C028(*a1);
}

void sub_10015843C()
{
  char *v0;

  sub_1001A9E1C(0, *v0);
}

void sub_100158448(uint64_t a1)
{
  char *v1;

  sub_10011CAD8(a1, *v1);
}

void sub_100158450(uint64_t a1)
{
  char *v1;

  sub_1001A9E1C(a1, *v1);
}

unint64_t sub_100158458@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015F048(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100158484@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100157A8C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001584AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003C220(*a1, *a2);
}

Swift::Int sub_1001584B8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xEB00000000726F74;
  v3 = 0x616974696E497369;
  if (v1 != 1)
  {
    v3 = 0x6E6F697461727564;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x65636976726573;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100158560(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEB00000000726F74;
  v3 = 0x616974696E497369;
  if (*v1 != 1)
  {
    v3 = 0x6E6F697461727564;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x65636976726573;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001585E4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xEB00000000726F74;
  v3 = 0x616974696E497369;
  if (v1 != 1)
  {
    v3 = 0x6E6F697461727564;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x65636976726573;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100158688@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1003D5BE8;
  result = sub_10015F090(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1001586BC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEB00000000726F74;
  v5 = 0x616974696E497369;
  if (v2 != 1)
  {
    v5 = 0x6E6F697461727564;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x65636976726573;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100158724(char *a1, char *a2)
{
  return sub_10003BF88(*a1, *a2);
}

Swift::Int sub_100158730()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6E6F73616572;
  else
    v2 = 0x65636976726573;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001587AC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6E6F73616572;
  else
    v2 = 0x65636976726573;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100158804()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6E6F73616572;
  else
    v2 = 0x65636976726573;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10015887C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1003D5D18;
  return sub_100158888(v2, a1, a2);
}

uint64_t sub_100158888@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_1001588E0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x65636976726573;
  if (*v1)
    v2 = 0x6E6F73616572;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10015891C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100158EB0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100157B4C);
}

Swift::Int sub_100158928(uint64_t a1, uint64_t a2)
{
  return sub_100158F48(a1, a2, (uint64_t (*)(uint64_t))sub_100157B4C);
}

uint64_t sub_100158934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100158FB8(a1, a2, a3, (uint64_t (*)(_QWORD))sub_100157B4C);
}

Swift::Int sub_100158940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100159004(a1, a2, a3, (uint64_t (*)(uint64_t))sub_100157B4C);
}

uint64_t sub_10015894C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10015EFF8(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100158978@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100157B4C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001589A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001589E0 + 4 * byte_10034A59E[a1]))(0x446C61746F547874, 0xEC00000079616C65);
}

unint64_t sub_1001589E0()
{
  return 0xD000000000000011;
}

unint64_t sub_100158A7C()
{
  return 0xD000000000000015;
}

uint64_t sub_100158AD8()
{
  return 0x6163437874;
}

uint64_t sub_100158AEC()
{
  return 0x4365756575716572;
}

uint64_t sub_100158B0C()
{
  return 0x446C61746F547872;
}

uint64_t sub_100158B74()
{
  return 0x495353527872;
}

uint64_t sub_100158B88(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100158BC0 + 4 * byte_10034A5B0[a1]))(0x73657479427874, 0xE700000000000000);
}

uint64_t sub_100158BC0()
{
  return 0x73657479427872;
}

uint64_t sub_100158BD4()
{
  return 0x7275446C61746F74;
}

unint64_t sub_100158BF8()
{
  return 0xD000000000000012;
}

uint64_t sub_100158EA4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100158EB0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100158B88);
}

uint64_t sub_100158EB0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    v14 = 1;
    v13 = v9;
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_100158F3C(uint64_t a1, uint64_t a2)
{
  return sub_100158F48(a1, a2, (uint64_t (*)(uint64_t))sub_100158B88);
}

Swift::Int sub_100158F48(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v5 = *v3;
  Hasher.init(_seed:)(v10);
  v6 = a3(v5);
  v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_100158FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100158FB8(a1, a2, a3, (uint64_t (*)(_QWORD))sub_100158B88);
}

uint64_t sub_100158FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a4(*v4);
  v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_100158FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100159004(a1, a2, a3, (uint64_t (*)(uint64_t))sub_100158B88);
}

Swift::Int sub_100159004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v6 = *v4;
  Hasher.init(_seed:)(v11);
  v7 = a4(v6);
  v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

uint64_t sub_100159064@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10015EFA8(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100159090@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100158B88(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

_QWORD *eventPayload(for:)(uint64_t a1)
{
  int v2;
  char *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  __int16 v71;
  char v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  int v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  uint64_t v94;
  int v95;
  char v96;
  uint64_t v97;
  int v98;
  char v99;
  uint64_t v100;
  __int16 v101;
  char v102;
  uint64_t v103;
  __int16 v104;
  char v105;
  uint64_t v106;
  __int16 v107;
  char v108;
  uint64_t v109;
  __int16 v110;
  char v111;
  uint64_t v112;
  __int16 v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t *v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char v164;
  char v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  int v171;
  char v172;
  int v173;
  char v174;
  int v175;
  char v176;
  int v177;
  char v178;
  int v179;
  char v180;
  int v181;
  char v182;
  int v183;
  char v184;
  int v185;
  char v186;
  int v187;
  char v188;
  int v189;
  char v190;
  int v191;
  char v192;
  int v193;
  char v194;
  int v195;
  char v196;
  int v197;
  char v198;
  int v199;
  char v200;
  __int16 v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int16 v213;
  __int16 v214;
  _OWORD __dst[54];
  __int128 v216;
  uint64_t v217;
  __int128 v218;
  _OWORD v219[2];

  v2 = *(_DWORD *)(a1 + 4);
  v3 = (char *)&type metadata for UInt32;
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v2;
  sub_100033A2C(__dst, &v218);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  *(_QWORD *)&v216 = _swiftEmptyDictionarySingleton;
  sub_100030310(&v218, 0xD000000000000010, 0x8000000100365A00, isUniquelyReferenced_nonNull_native);
  v5 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v6 = *(_DWORD *)(a1 + 8);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v6;
  sub_100033A2C(__dst, &v218);
  v7 = swift_isUniquelyReferenced_nonNull_native(v5);
  *(_QWORD *)&v216 = v5;
  sub_100030310(&v218, 0xD000000000000012, 0x8000000100365A20, v7);
  v8 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v9 = *(_DWORD *)(a1 + 12);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v9;
  sub_100033A2C(__dst, &v218);
  v10 = swift_isUniquelyReferenced_nonNull_native(v8);
  *(_QWORD *)&v216 = v8;
  sub_100030310(&v218, 0xD000000000000012, 0x8000000100365A40, v10);
  v11 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v12 = *(_DWORD *)(a1 + 16);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v12;
  sub_100033A2C(__dst, &v218);
  v13 = swift_isUniquelyReferenced_nonNull_native(v11);
  *(_QWORD *)&v216 = v11;
  sub_100030310(&v218, 0xD00000000000001ALL, 0x8000000100365A60, v13);
  v14 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v15 = *(_DWORD *)(a1 + 20);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v15;
  sub_100033A2C(__dst, &v218);
  v16 = swift_isUniquelyReferenced_nonNull_native(v14);
  *(_QWORD *)&v216 = v14;
  sub_100030310(&v218, 0xD00000000000001DLL, 0x8000000100365A80, v16);
  v17 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v18 = *(_BYTE *)(a1 + 24);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v18;
  sub_100033A2C(__dst, &v218);
  v19 = swift_isUniquelyReferenced_nonNull_native(v17);
  *(_QWORD *)&v216 = v17;
  sub_100030310(&v218, 0xD00000000000001DLL, 0x8000000100365AA0, v19);
  v20 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v21 = *(_BYTE *)(a1 + 25);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v21;
  sub_100033A2C(__dst, &v218);
  v22 = swift_isUniquelyReferenced_nonNull_native(v20);
  *(_QWORD *)&v216 = v20;
  sub_100030310(&v218, 0xD000000000000014, 0x8000000100365AC0, v22);
  v23 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v24 = *(_BYTE *)(a1 + 26);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v24;
  sub_100033A2C(__dst, &v218);
  v25 = swift_isUniquelyReferenced_nonNull_native(v23);
  *(_QWORD *)&v216 = v23;
  sub_100030310(&v218, 0xD00000000000001BLL, 0x8000000100365AE0, v25);
  v26 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v27 = *(_BYTE *)(a1 + 27);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v27;
  sub_100033A2C(__dst, &v218);
  v28 = swift_isUniquelyReferenced_nonNull_native(v26);
  *(_QWORD *)&v216 = v26;
  sub_100030310(&v218, 0xD000000000000020, 0x8000000100365B00, v28);
  v29 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v30 = *(_BYTE *)(a1 + 28);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v30;
  sub_100033A2C(__dst, &v218);
  v31 = swift_isUniquelyReferenced_nonNull_native(v29);
  *(_QWORD *)&v216 = v29;
  sub_100030310(&v218, 0xD000000000000020, 0x8000000100365B30, v31);
  v32 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v33 = *(_BYTE *)(a1 + 29);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v33;
  sub_100033A2C(__dst, &v218);
  v34 = swift_isUniquelyReferenced_nonNull_native(v32);
  *(_QWORD *)&v216 = v32;
  sub_100030310(&v218, 0xD00000000000001FLL, 0x8000000100365B60, v34);
  v35 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v36 = *(_BYTE *)(a1 + 30);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v36;
  sub_100033A2C(__dst, &v218);
  v37 = swift_isUniquelyReferenced_nonNull_native(v35);
  *(_QWORD *)&v216 = v35;
  sub_100030310(&v218, 0xD000000000000023, 0x8000000100365B80, v37);
  v38 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v39 = *(_BYTE *)(a1 + 31);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v39;
  sub_100033A2C(__dst, &v218);
  v40 = swift_isUniquelyReferenced_nonNull_native(v38);
  *(_QWORD *)&v216 = v38;
  sub_100030310(&v218, 0xD000000000000026, 0x8000000100365BB0, v40);
  v41 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v42 = *(_BYTE *)(a1 + 32);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v42;
  sub_100033A2C(__dst, &v218);
  v43 = swift_isUniquelyReferenced_nonNull_native(v41);
  *(_QWORD *)&v216 = v41;
  sub_100030310(&v218, 0xD000000000000026, 0x8000000100365BE0, v43);
  v44 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v45 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt64;
  *(_QWORD *)&__dst[0] = v45;
  sub_100033A2C(__dst, &v218);
  v46 = swift_isUniquelyReferenced_nonNull_native(v44);
  *(_QWORD *)&v216 = v44;
  sub_100030310(&v218, 0xD00000000000001FLL, 0x8000000100365C10, v46);
  v47 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v48 = *(_QWORD *)(a1 + 88);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt64;
  *(_QWORD *)&__dst[0] = v48;
  sub_100033A2C(__dst, &v218);
  v49 = swift_isUniquelyReferenced_nonNull_native(v47);
  *(_QWORD *)&v216 = v47;
  sub_100030310(&v218, 0xD00000000000001BLL, 0x8000000100365C30, v49);
  v50 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  *((_QWORD *)&v219[0] + 1) = sub_100012C44(&qword_100409088);
  v51 = *((_QWORD *)&v219[0] + 1);
  v211 = *((_QWORD *)&v219[0] + 1);
  v52 = *(_OWORD *)(a1 + 208);
  __dst[6] = *(_OWORD *)(a1 + 192);
  __dst[7] = v52;
  __dst[8] = *(_OWORD *)(a1 + 224);
  v53 = *(_OWORD *)(a1 + 144);
  __dst[2] = *(_OWORD *)(a1 + 128);
  __dst[3] = v53;
  v54 = *(_OWORD *)(a1 + 176);
  __dst[4] = *(_OWORD *)(a1 + 160);
  __dst[5] = v54;
  v55 = *(_OWORD *)(a1 + 112);
  __dst[0] = *(_OWORD *)(a1 + 96);
  __dst[1] = v55;
  *(_QWORD *)&v218 = sub_10015F594((uint64_t)__dst, (uint64_t)&__dst[9]);
  sub_100033A2C(&v218, __dst);
  v56 = swift_isUniquelyReferenced_nonNull_native(v50);
  *(_QWORD *)&v216 = v50;
  sub_100030310(__dst, 0xD000000000000013, 0x8000000100365C50, v56);
  v57 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v58 = *(_OWORD *)(a1 + 288);
  __dst[2] = *(_OWORD *)(a1 + 272);
  __dst[3] = v58;
  *(_QWORD *)&__dst[4] = *(_QWORD *)(a1 + 304);
  v59 = *(_OWORD *)(a1 + 256);
  __dst[0] = *(_OWORD *)(a1 + 240);
  __dst[1] = v59;
  *((_QWORD *)&v219[0] + 1) = v51;
  *(_QWORD *)&v218 = sub_10015F594((uint64_t)__dst, (uint64_t)&__dst[4] + 8);
  sub_100033A2C(&v218, __dst);
  v60 = swift_isUniquelyReferenced_nonNull_native(v57);
  *(_QWORD *)&v216 = v57;
  sub_100030310(__dst, 0xD000000000000015, 0x8000000100365C70, v60);
  v61 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v62 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt64;
  *(_QWORD *)&__dst[0] = v62;
  sub_100033A2C(__dst, &v218);
  v63 = swift_isUniquelyReferenced_nonNull_native(v61);
  *(_QWORD *)&v216 = v61;
  sub_100030310(&v218, 0xD00000000000001BLL, 0x8000000100365C90, v63);
  v64 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v65 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt64;
  *(_QWORD *)&__dst[0] = v65;
  sub_100033A2C(__dst, &v218);
  v66 = swift_isUniquelyReferenced_nonNull_native(v64);
  *(_QWORD *)&v216 = v64;
  sub_100030310(&v218, 0xD00000000000001BLL, 0x8000000100365CB0, v66);
  v67 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v68 = *(_DWORD *)(a1 + 64);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v68;
  sub_100033A2C(__dst, &v218);
  v69 = swift_isUniquelyReferenced_nonNull_native(v67);
  *(_QWORD *)&v216 = v67;
  sub_100030310(&v218, 0xD000000000000018, 0x8000000100365CD0, v69);
  v70 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v71 = *(_WORD *)(a1 + 68);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt16;
  LOWORD(__dst[0]) = v71;
  sub_100033A2C(__dst, &v218);
  v72 = swift_isUniquelyReferenced_nonNull_native(v70);
  *(_QWORD *)&v216 = v70;
  sub_100030310(&v218, 0xD00000000000001ELL, 0x8000000100365CF0, v72);
  v73 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v74 = *(_DWORD *)(a1 + 72);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v74;
  sub_100033A2C(__dst, &v218);
  v75 = swift_isUniquelyReferenced_nonNull_native(v73);
  *(_QWORD *)&v216 = v73;
  sub_100030310(&v218, 0xD000000000000018, 0x8000000100365D10, v75);
  v76 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v77 = *(_DWORD *)(a1 + 76);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v77;
  sub_100033A2C(__dst, &v218);
  v78 = swift_isUniquelyReferenced_nonNull_native(v76);
  *(_QWORD *)&v216 = v76;
  sub_100030310(&v218, 0xD000000000000018, 0x8000000100365D30, v78);
  v79 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v80 = *(_DWORD *)(a1 + 80);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v80;
  sub_100033A2C(__dst, &v218);
  v81 = swift_isUniquelyReferenced_nonNull_native(v79);
  *(_QWORD *)&v216 = v79;
  sub_100030310(&v218, 0xD000000000000015, 0x8000000100365D50, v81);
  v82 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v83 = *(_DWORD *)(a1 + 336);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v83;
  sub_100033A2C(__dst, &v218);
  v84 = swift_isUniquelyReferenced_nonNull_native(v82);
  *(_QWORD *)&v216 = v82;
  sub_100030310(&v218, 0xD000000000000020, 0x8000000100365D70, v84);
  v85 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v86 = *(_DWORD *)(a1 + 340);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v86;
  sub_100033A2C(__dst, &v218);
  v87 = swift_isUniquelyReferenced_nonNull_native(v85);
  *(_QWORD *)&v216 = v85;
  sub_100030310(&v218, 0xD00000000000001DLL, 0x8000000100365DA0, v87);
  v88 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v89 = *(_DWORD *)(a1 + 344);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v89;
  sub_100033A2C(__dst, &v218);
  v90 = swift_isUniquelyReferenced_nonNull_native(v88);
  *(_QWORD *)&v216 = v88;
  sub_100030310(&v218, 0xD000000000000018, 0x8000000100365DC0, v90);
  v91 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v92 = *(_DWORD *)(a1 + 348);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v92;
  sub_100033A2C(__dst, &v218);
  v93 = swift_isUniquelyReferenced_nonNull_native(v91);
  *(_QWORD *)&v216 = v91;
  v214 = 22;
  sub_100030310(&v218, 0xD000000000000016, 0x8000000100365DE0, v93);
  v94 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v95 = *(_DWORD *)(a1 + 352);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v95;
  sub_100033A2C(__dst, &v218);
  v96 = swift_isUniquelyReferenced_nonNull_native(v94);
  *(_QWORD *)&v216 = v94;
  sub_100030310(&v218, 0xD00000000000001BLL, 0x8000000100365E00, v96);
  v97 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v98 = *(_DWORD *)(a1 + 356);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v98;
  sub_100033A2C(__dst, &v218);
  v99 = swift_isUniquelyReferenced_nonNull_native(v97);
  *(_QWORD *)&v216 = v97;
  sub_100030310(&v218, 0xD00000000000001ALL, 0x8000000100365E20, v99);
  v100 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v101 = *(_WORD *)(a1 + 3562);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt16;
  LOWORD(__dst[0]) = v101;
  sub_100033A2C(__dst, &v218);
  v102 = swift_isUniquelyReferenced_nonNull_native(v100);
  *(_QWORD *)&v216 = v100;
  sub_100030310(&v218, 0xD000000000000019, 0x8000000100365E40, v102);
  v103 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v104 = *(_WORD *)(a1 + 3564);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt16;
  LOWORD(__dst[0]) = v104;
  sub_100033A2C(__dst, &v218);
  v105 = swift_isUniquelyReferenced_nonNull_native(v103);
  *(_QWORD *)&v216 = v103;
  sub_100030310(&v218, 0xD000000000000019, 0x8000000100365E60, v105);
  v106 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v107 = *(_WORD *)(a1 + 3566);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt16;
  LOWORD(__dst[0]) = v107;
  sub_100033A2C(__dst, &v218);
  v108 = swift_isUniquelyReferenced_nonNull_native(v106);
  *(_QWORD *)&v216 = v106;
  sub_100030310(&v218, 0xD00000000000001ALL, 0x8000000100365E80, v108);
  v109 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v110 = *(_WORD *)(a1 + 3568);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt16;
  LOWORD(__dst[0]) = v110;
  sub_100033A2C(__dst, &v218);
  v111 = swift_isUniquelyReferenced_nonNull_native(v109);
  *(_QWORD *)&v216 = v109;
  sub_100030310(&v218, 0xD00000000000001BLL, 0x8000000100365EA0, v111);
  v112 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v113 = *(_WORD *)(a1 + 3570);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt16;
  LOWORD(__dst[0]) = v113;
  sub_100033A2C(__dst, &v218);
  v114 = swift_isUniquelyReferenced_nonNull_native(v112);
  *(_QWORD *)&v216 = v112;
  sub_100030310(&v218, 0xD000000000000019, 0x8000000100365E60, v114);
  v210 = v216;
  swift_bridgeObjectRelease(0x8000000000000000);
  v212 = a1;
  memcpy(__dst, (const void *)(a1 + 360), sizeof(__dst));
  v217 = v211;
  sub_10007515C(0, 54, 0);
  v213 = sub_100012C44((uint64_t *)&unk_100410330);
  v115 = 0;
  v116 = (unint64_t)v219;
  v117 = 0x8000000100365EE0;
  do
  {
    v118 = *(_DWORD *)((char *)__dst + v115);
    v119 = *(_QWORD *)((char *)__dst + v115 + 8);
    v120 = sub_100012C44(qword_100405C70);
    v121 = swift_allocObject(v120, 128, 7);
    *(_OWORD *)(v121 + 16) = xmmword_10033C020;
    *(_QWORD *)(v121 + 32) = 0xD000000000000016;
    *(_QWORD *)(v121 + 40) = 0x8000000100365EC0;
    *(_QWORD *)(v121 + 72) = &type metadata for UInt32;
    *(_DWORD *)(v121 + 48) = v118;
    *(_QWORD *)(v121 + 80) = 0xD000000000000019;
    v122 = v121 + 80;
    *(_QWORD *)(v121 + 120) = &type metadata for UInt64;
    *(_QWORD *)(v121 + 88) = 0x8000000100365EE0;
    *(_QWORD *)(v121 + 96) = v119;
    v123 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(2);
    sub_10015F988(v121 + 32, (uint64_t)&v218);
    v124 = *((_QWORD *)&v218 + 1);
    v125 = v218;
    swift_retain();
    v126 = sub_10000FA00(v125, v124);
    if ((v128 & 1) != 0)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      sub_100075178(v127 > 1, v116, 1);
      v150 = v216;
      goto LABEL_20;
    }
    v3 = (char *)(v123 + 8);
    *(_QWORD *)((char *)v123 + ((v126 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v126;
    v129 = (uint64_t *)(v123[6] + 16 * v126);
    *v129 = v125;
    v129[1] = v124;
    sub_100033A2C(v219, (_OWORD *)(v123[7] + 32 * v126));
    v130 = v123[2];
    v131 = __OFADD__(v130, 1);
    v132 = v130 + 1;
    if (v131)
      goto LABEL_36;
    v123[2] = v132;
    sub_10015F988(v122, (uint64_t)&v218);
    v125 = *((_QWORD *)&v218 + 1);
    v124 = v218;
    v133 = sub_10000FA00(v218, *((uint64_t *)&v218 + 1));
    if ((v134 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v3[(v133 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v133;
    v135 = (uint64_t *)(v123[6] + 16 * v133);
    *v135 = v124;
    v135[1] = v125;
    sub_100033A2C(v219, (_OWORD *)(v123[7] + 32 * v133));
    v136 = v123[2];
    v131 = __OFADD__(v136, 1);
    v137 = v136 + 1;
    if (v131)
      goto LABEL_38;
    v123[2] = v137;
    swift_release(v123);
    swift_bridgeObjectRelease(v121);
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      sub_10007515C(0, _swiftEmptyArrayStorage[2] + 1, 1);
    v139 = _swiftEmptyArrayStorage[2];
    v138 = _swiftEmptyArrayStorage[3];
    if (v139 >= v138 >> 1)
      sub_10007515C(v138 > 1, v139 + 1, 1);
    v115 += 16;
    _swiftEmptyArrayStorage[2] = v139 + 1;
    _swiftEmptyArrayStorage[v139 + 4] = v123;
  }
  while (v115 != 864);
  *(_QWORD *)&v216 = _swiftEmptyArrayStorage;
  sub_100033A2C(&v216, __dst);
  v140 = swift_isUniquelyReferenced_nonNull_native(v210);
  *(_QWORD *)&v218 = v210;
  sub_100030310(__dst, 0xD000000000000011, 0x8000000100365F00, v140);
  v141 = (_QWORD *)v218;
  swift_bridgeObjectRelease(0x8000000000000000);
  memcpy(__dst, (const void *)(v212 + 2792), 0x300uLL);
  v142 = 0;
  v217 = v211;
  v143 = _swiftEmptyArrayStorage;
  do
  {
    v144 = __dst[v142 + 1];
    v218 = __dst[v142];
    v219[0] = v144;
    v219[1] = __dst[v142 + 2];
    v145 = sub_10015AAB4();
    if (v145)
    {
      v146 = v145;
      if ((swift_isUniquelyReferenced_nonNull_native(v143) & 1) == 0)
        v143 = sub_1000B2EA8(0, v143[2] + 1, 1, v143);
      v148 = v143[2];
      v147 = v143[3];
      if (v148 >= v147 >> 1)
        v143 = sub_1000B2EA8((_QWORD *)(v147 > 1), v148 + 1, 1, v143);
      v143[2] = v148 + 1;
      v143[v148 + 4] = v146;
    }
    v142 += 3;
  }
  while (v142 != 48);
  *(_QWORD *)&v216 = v143;
  sub_100033A2C(&v216, __dst);
  v149 = swift_isUniquelyReferenced_nonNull_native(v141);
  sub_100030310(__dst, 0xD000000000000013, 0x8000000100365F20, v149);
  v123 = v141;
  swift_bridgeObjectRelease(0x8000000000000000);
  LOWORD(v122) = *(_WORD *)(v212 + 3628);
  LOWORD(v124) = *(_WORD *)(v212 + 3630);
  LOWORD(v125) = *(_WORD *)(v212 + 3632);
  LOWORD(v3) = *(_WORD *)(v212 + 3634);
  LOWORD(v117) = *(_WORD *)(v212 + 3636);
  LOWORD(v115) = *(_WORD *)(v212 + 3638);
  v213 = *(_WORD *)(v212 + 3640);
  v214 = *(_WORD *)(v212 + 3642);
  *((_QWORD *)&__dst[1] + 1) = sub_100012C44(&qword_100409090);
  *(_QWORD *)&v216 = _swiftEmptyArrayStorage;
  sub_100075178(0, 8, 0);
  v150 = v216;
  v121 = *(_QWORD *)(v216 + 16);
  v127 = *(_QWORD *)(v216 + 24);
  v116 = v121 + 1;
  if (v121 >= v127 >> 1)
    goto LABEL_39;
LABEL_20:
  *(_QWORD *)(v150 + 16) = v116;
  *(_WORD *)(v150 + 2 * v121 + 32) = v122;
  *(_QWORD *)&v216 = v150;
  v151 = *(_QWORD *)(v150 + 24);
  v152 = v121 + 2;
  if (v116 >= v151 >> 1)
  {
    sub_100075178(v151 > 1, v121 + 2, 1);
    v150 = v216;
  }
  *(_QWORD *)(v150 + 16) = v152;
  *(_WORD *)(v150 + 2 * v116 + 32) = v124;
  *(_QWORD *)&v216 = v150;
  v153 = *(_QWORD *)(v150 + 24);
  v154 = v121 + 3;
  if (v152 >= v153 >> 1)
  {
    sub_100075178(v153 > 1, v121 + 3, 1);
    v150 = v216;
  }
  *(_QWORD *)(v150 + 16) = v154;
  *(_WORD *)(v150 + 2 * v152 + 32) = v125;
  *(_QWORD *)&v216 = v150;
  v155 = *(_QWORD *)(v150 + 24);
  v156 = v121 + 4;
  if (v154 >= v155 >> 1)
  {
    sub_100075178(v155 > 1, v121 + 4, 1);
    v150 = v216;
  }
  *(_QWORD *)(v150 + 16) = v156;
  *(_WORD *)(v150 + 2 * v154 + 32) = (_WORD)v3;
  *(_QWORD *)&v216 = v150;
  v157 = *(_QWORD *)(v150 + 24);
  v158 = v121 + 5;
  if (v156 >= v157 >> 1)
  {
    sub_100075178(v157 > 1, v121 + 5, 1);
    v150 = v216;
  }
  *(_QWORD *)(v150 + 16) = v158;
  *(_WORD *)(v150 + 2 * v156 + 32) = v117;
  *(_QWORD *)&v216 = v150;
  v159 = *(_QWORD *)(v150 + 24);
  v160 = v121 + 6;
  if (v158 >= v159 >> 1)
  {
    sub_100075178(v159 > 1, v121 + 6, 1);
    v150 = v216;
  }
  *(_QWORD *)(v150 + 16) = v160;
  *(_WORD *)(v150 + 2 * v158 + 32) = v115;
  *(_QWORD *)&v216 = v150;
  v161 = *(_QWORD *)(v150 + 24);
  v162 = v121 + 7;
  if (v160 >= v161 >> 1)
  {
    sub_100075178(v161 > 1, v121 + 7, 1);
    v150 = v216;
  }
  *(_QWORD *)(v150 + 16) = v162;
  *(_WORD *)(v150 + 2 * v160 + 32) = v213;
  *(_QWORD *)&v216 = v150;
  v163 = *(_QWORD *)(v150 + 24);
  if (v162 >= v163 >> 1)
  {
    sub_100075178(v163 > 1, v121 + 8, 1);
    v150 = v216;
  }
  *(_QWORD *)(v150 + 16) = v121 + 8;
  *(_WORD *)(v150 + 2 * v162 + 32) = v214;
  *(_QWORD *)&__dst[0] = v150;
  sub_100033A2C(__dst, &v216);
  v164 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000030, 0x8000000100365F40, v164);
  swift_bridgeObjectRelease(0x8000000000000000);
  v165 = *(_BYTE *)(v212 + 3624);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v165;
  sub_100033A2C(__dst, &v216);
  v166 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000020, 0x8000000100365F80, v166);
  swift_bridgeObjectRelease(0x8000000000000000);
  v167 = *(_BYTE *)(v212 + 3625);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v167;
  sub_100033A2C(__dst, &v216);
  v168 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000028, 0x8000000100365FB0, v168);
  swift_bridgeObjectRelease(0x8000000000000000);
  v169 = *(_BYTE *)(v212 + 3626);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt8;
  LOBYTE(__dst[0]) = v169;
  sub_100033A2C(__dst, &v216);
  v170 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD00000000000002ALL, 0x8000000100365FE0, v170);
  swift_bridgeObjectRelease(0x8000000000000000);
  v171 = *(_DWORD *)(v212 + 3572);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v171;
  sub_100033A2C(__dst, &v216);
  v172 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD00000000000002FLL, 0x8000000100366010, v172);
  swift_bridgeObjectRelease(0x8000000000000000);
  v173 = *(_DWORD *)(v212 + 3648);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v173;
  sub_100033A2C(__dst, &v216);
  v174 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD00000000000002FLL, 0x8000000100366040, v174);
  swift_bridgeObjectRelease(0x8000000000000000);
  v175 = *(_DWORD *)(v212 + 3652);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v175;
  sub_100033A2C(__dst, &v216);
  v176 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000026, 0x8000000100366070, v176);
  swift_bridgeObjectRelease(0x8000000000000000);
  v177 = *(_DWORD *)(v212 + 3656);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v177;
  sub_100033A2C(__dst, &v216);
  v178 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000026, 0x80000001003660A0, v178);
  swift_bridgeObjectRelease(0x8000000000000000);
  v179 = *(_DWORD *)(v212 + 3660);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v179;
  sub_100033A2C(__dst, &v216);
  v180 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000024, 0x80000001003660D0, v180);
  swift_bridgeObjectRelease(0x8000000000000000);
  v181 = *(_DWORD *)(v212 + 3664);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v181;
  sub_100033A2C(__dst, &v216);
  v182 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000023, 0x8000000100366100, v182);
  swift_bridgeObjectRelease(0x8000000000000000);
  v183 = *(_DWORD *)(v212 + 3668);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v183;
  sub_100033A2C(__dst, &v216);
  v184 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000024, 0x8000000100366130, v184);
  swift_bridgeObjectRelease(0x8000000000000000);
  v185 = *(_DWORD *)(v212 + 3676);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v185;
  sub_100033A2C(__dst, &v216);
  v186 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000019, 0x8000000100366160, v186);
  swift_bridgeObjectRelease(0x8000000000000000);
  v187 = *(_DWORD *)(v212 + 3680);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v187;
  sub_100033A2C(__dst, &v216);
  v188 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000024, 0x8000000100366180, v188);
  swift_bridgeObjectRelease(0x8000000000000000);
  v189 = *(_DWORD *)(v212 + 3684);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v189;
  sub_100033A2C(__dst, &v216);
  v190 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000022, 0x80000001003661B0, v190);
  swift_bridgeObjectRelease(0x8000000000000000);
  v191 = *(_DWORD *)(v212 + 3688);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v191;
  sub_100033A2C(__dst, &v216);
  v192 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000020, 0x80000001003661E0, v192);
  swift_bridgeObjectRelease(0x8000000000000000);
  v193 = *(_DWORD *)(v212 + 3692);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v193;
  sub_100033A2C(__dst, &v216);
  v194 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD00000000000001ALL, 0x8000000100366210, v194);
  swift_bridgeObjectRelease(0x8000000000000000);
  v195 = *(_DWORD *)(v212 + 3696);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v195;
  sub_100033A2C(__dst, &v216);
  v196 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000020, 0x8000000100366230, v196);
  swift_bridgeObjectRelease(0x8000000000000000);
  v197 = *(_DWORD *)(v212 + 3700);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v197;
  sub_100033A2C(__dst, &v216);
  v198 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000020, 0x8000000100366260, v198);
  swift_bridgeObjectRelease(0x8000000000000000);
  v199 = *(_DWORD *)(v212 + 3704);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for UInt32;
  LODWORD(__dst[0]) = v199;
  sub_100033A2C(__dst, &v216);
  v200 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0xD000000000000023, 0x8000000100366290, v200);
  swift_bridgeObjectRelease(0x8000000000000000);
  v201 = *(_WORD *)(v212 + 3708);
  v202 = *(_BYTE *)(v212 + 3710);
  v203 = sub_100012C44(&qword_100403E88);
  v204 = swift_allocObject(v203, 35, 7);
  *(_OWORD *)(v204 + 16) = xmmword_10033A120;
  *(_WORD *)(v204 + 32) = v201;
  *(_BYTE *)(v204 + 34) = v202;
  v205 = sub_1001068EC(v204);
  v207 = v206;
  swift_bridgeObjectRelease(v204);
  *((_QWORD *)&__dst[1] + 1) = &type metadata for Data;
  *(_QWORD *)&__dst[0] = v205;
  *((_QWORD *)&__dst[0] + 1) = v207;
  sub_100033A2C(__dst, &v216);
  v208 = swift_isUniquelyReferenced_nonNull_native(v123);
  sub_100030310(&v216, 0x4154535F4C445741, 0xEE0049554F5F5354, v208);
  swift_bridgeObjectRelease(0x8000000000000000);
  return v123;
}

uint64_t sub_10015AAB4()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  _OWORD v7[2];
  uint64_t v8;

  v1 = *(_OWORD *)(v0 + 32);
  v7[0] = *(_OWORD *)(v0 + 16);
  v7[1] = v1;
  v2 = sub_1000FADC0((uint64_t)v7, (uint64_t)&v8);
  v4 = v3;
  sub_10011DE7C(0, v2, v3);
  if ((v5 & 1) == 0)
    __asm { BR              X11 }
  sub_10000E614(v2, v4);
  return 0;
}

uint64_t apple80211_p2p_airplay_ext_stats.eventPayload()()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[40];
  _BYTE __dst[3816];

  v1 = sub_100012C44(qword_100405C70);
  v2 = swift_allocObject(v1, 1328, 7);
  *(_OWORD *)(v2 + 16) = xmmword_10034AFD0;
  *(_QWORD *)(v2 + 32) = 0xD00000000000001DLL;
  *(_QWORD *)(v2 + 40) = 0x8000000100365A80;
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_QWORD *)v0 + 2);
  v6 = v0[6];
  v5 = v0[7];
  v8 = v0[8];
  v7 = v0[9];
  v9 = *((_WORD *)v0 + 20);
  v10 = *((_WORD *)v0 + 21);
  v11 = *((_WORD *)v0 + 22);
  v12 = *((_WORD *)v0 + 23);
  v13 = *((_WORD *)v0 + 24);
  v14 = *((_BYTE *)v0 + 50);
  v15 = *((_BYTE *)v0 + 51);
  v16 = *((_BYTE *)v0 + 60);
  v17 = *((_BYTE *)v0 + 68);
  v18 = *((_BYTE *)v0 + 69);
  v19 = *((_BYTE *)v0 + 71);
  v20 = *((_BYTE *)v0 + 72);
  v21 = *((_BYTE *)v0 + 73);
  v22 = *((_BYTE *)v0 + 74);
  v23 = *((_BYTE *)v0 + 75);
  *(_OWORD *)v35 = *(_OWORD *)(v0 + 19);
  *(_OWORD *)&v35[16] = *(_OWORD *)(v0 + 23);
  *(_QWORD *)&v35[32] = *(_QWORD *)(v0 + 27);
  v33 = *(_OWORD *)(v0 + 29);
  v34 = *(_OWORD *)(v0 + 33);
  v31 = *(_OWORD *)(v0 + 37);
  v32 = *(_OWORD *)(v0 + 41);
  v29 = *(_OWORD *)(v0 + 45);
  v30 = *(_OWORD *)(v0 + 49);
  *(_BYTE *)(v2 + 48) = *((_BYTE *)v0 + 52);
  *(_QWORD *)(v2 + 72) = &type metadata for UInt8;
  *(_QWORD *)(v2 + 80) = 0xD00000000000001DLL;
  *(_QWORD *)(v2 + 88) = 0x8000000100365AA0;
  *(_BYTE *)(v2 + 96) = v16;
  *(_QWORD *)(v2 + 120) = &type metadata for UInt8;
  *(_QWORD *)(v2 + 128) = 0xD000000000000012;
  *(_QWORD *)(v2 + 136) = 0x8000000100365A20;
  *(_QWORD *)(v2 + 144) = v4;
  *(_QWORD *)(v2 + 168) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 176) = 0xD000000000000012;
  *(_QWORD *)(v2 + 184) = 0x8000000100365A40;
  *(_QWORD *)(v2 + 192) = v3;
  *(_QWORD *)(v2 + 216) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 224) = 0xD000000000000029;
  *(_QWORD *)(v2 + 232) = 0x80000001003662C0;
  *(_DWORD *)(v2 + 240) = v6;
  *(_QWORD *)(v2 + 264) = &type metadata for UInt32;
  *(_QWORD *)(v2 + 272) = 0xD000000000000033;
  *(_QWORD *)(v2 + 280) = 0x80000001003662F0;
  *(_BYTE *)(v2 + 288) = v17;
  *(_QWORD *)(v2 + 312) = &type metadata for UInt8;
  *(_QWORD *)(v2 + 320) = 0xD000000000000014;
  *(_QWORD *)(v2 + 328) = 0x8000000100366330;
  *(_BYTE *)(v2 + 336) = v14;
  *(_QWORD *)(v2 + 360) = &type metadata for UInt8;
  *(_QWORD *)(v2 + 368) = 0xD00000000000002FLL;
  *(_QWORD *)(v2 + 376) = 0x8000000100366350;
  *(_DWORD *)(v2 + 384) = v5;
  *(_QWORD *)(v2 + 408) = &type metadata for UInt32;
  *(_QWORD *)(v2 + 416) = 0xD00000000000002FLL;
  *(_QWORD *)(v2 + 424) = 0x8000000100366380;
  *(_DWORD *)(v2 + 432) = v8;
  *(_QWORD *)(v2 + 456) = &type metadata for UInt32;
  *(_QWORD *)(v2 + 464) = 0xD00000000000002ELL;
  *(_QWORD *)(v2 + 472) = 0x80000001003663B0;
  *(_DWORD *)(v2 + 480) = v7;
  *(_QWORD *)(v2 + 504) = &type metadata for UInt32;
  *(_QWORD *)(v2 + 512) = 0xD00000000000002DLL;
  *(_QWORD *)(v2 + 520) = 0x80000001003663E0;
  *(_QWORD *)(v2 + 552) = &type metadata for Int8;
  *(_BYTE *)(v2 + 528) = v18;
  *(_QWORD *)(v2 + 560) = 0xD00000000000002BLL;
  *(_QWORD *)(v2 + 568) = 0x8000000100366410;
  *(_QWORD *)(v2 + 600) = &type metadata for UInt16;
  *(_WORD *)(v2 + 576) = v9;
  *(_QWORD *)(v2 + 608) = 0xD000000000000033;
  *(_QWORD *)(v2 + 616) = 0x8000000100366440;
  *(_QWORD *)(v2 + 648) = &type metadata for UInt8;
  *(_BYTE *)(v2 + 624) = v15;
  *(_QWORD *)(v2 + 656) = 0xD000000000000034;
  *(_QWORD *)(v2 + 664) = 0x8000000100366480;
  *(_QWORD *)(v2 + 696) = &type metadata for UInt16;
  *(_WORD *)(v2 + 672) = v11;
  *(_QWORD *)(v2 + 704) = 0xD000000000000037;
  *(_QWORD *)(v2 + 712) = 0x80000001003664C0;
  *(_QWORD *)(v2 + 744) = &type metadata for UInt16;
  *(_WORD *)(v2 + 720) = v12;
  *(_QWORD *)(v2 + 752) = 0xD00000000000002CLL;
  *(_QWORD *)(v2 + 760) = 0x8000000100366500;
  *(_QWORD *)(v2 + 792) = &type metadata for UInt16;
  *(_WORD *)(v2 + 768) = v13;
  *(_QWORD *)(v2 + 800) = 0xD00000000000002ELL;
  *(_QWORD *)(v2 + 808) = 0x8000000100366530;
  *(_QWORD *)(v2 + 840) = &type metadata for UInt16;
  *(_WORD *)(v2 + 816) = v10;
  *(_QWORD *)(v2 + 848) = 0xD000000000000025;
  *(_QWORD *)(v2 + 856) = 0x8000000100366560;
  *(_QWORD *)(v2 + 888) = &type metadata for Bool;
  *(_BYTE *)(v2 + 864) = v19;
  *(_QWORD *)(v2 + 896) = 0xD00000000000002FLL;
  *(_QWORD *)(v2 + 904) = 0x8000000100366590;
  *(_QWORD *)(v2 + 936) = &type metadata for Bool;
  *(_BYTE *)(v2 + 912) = v20;
  *(_QWORD *)(v2 + 944) = 0xD000000000000029;
  *(_QWORD *)(v2 + 952) = 0x80000001003665C0;
  *(_QWORD *)(v2 + 984) = &type metadata for Bool;
  *(_BYTE *)(v2 + 960) = v21;
  *(_QWORD *)(v2 + 992) = 0xD000000000000029;
  *(_QWORD *)(v2 + 1000) = 0x80000001003665F0;
  *(_QWORD *)(v2 + 1032) = &type metadata for Bool;
  *(_BYTE *)(v2 + 1008) = v22;
  *(_QWORD *)(v2 + 1040) = 0xD000000000000029;
  *(_QWORD *)(v2 + 1048) = 0x8000000100366620;
  *(_QWORD *)(v2 + 1080) = &type metadata for Bool;
  *(_BYTE *)(v2 + 1056) = v23;
  *(_QWORD *)(v2 + 1088) = 0xD000000000000022;
  *(_QWORD *)(v2 + 1096) = 0x8000000100366650;
  v24 = *v0;
  *(_QWORD *)(v2 + 1128) = &type metadata for UInt32;
  *(_DWORD *)(v2 + 1104) = v24;
  *(_QWORD *)(v2 + 1136) = 0xD000000000000024;
  *(_QWORD *)(v2 + 1144) = 0x8000000100366680;
  *(_OWORD *)__dst = *(_OWORD *)&v35[8];
  *(_OWORD *)&__dst[16] = *(_OWORD *)&v35[24];
  v25 = sub_100012C44(&qword_100409088);
  *(_QWORD *)(v2 + 1176) = v25;
  *(_QWORD *)(v2 + 1152) = sub_10015F9D0(__dst, (uint64_t)&__dst[32]);
  *(_QWORD *)(v2 + 1184) = 0xD00000000000002DLL;
  *(_QWORD *)(v2 + 1192) = 0x80000001003666B0;
  *(_OWORD *)__dst = v33;
  *(_OWORD *)&__dst[16] = v34;
  *(_QWORD *)(v2 + 1224) = v25;
  *(_QWORD *)(v2 + 1200) = sub_10015F9D0(__dst, (uint64_t)&__dst[32]);
  *(_QWORD *)(v2 + 1232) = 0xD000000000000031;
  *(_QWORD *)(v2 + 1240) = 0x80000001003666E0;
  *(_OWORD *)__dst = v31;
  *(_OWORD *)&__dst[16] = v32;
  *(_QWORD *)(v2 + 1272) = v25;
  *(_QWORD *)(v2 + 1248) = sub_10015F9D0(__dst, (uint64_t)&__dst[32]);
  *(_QWORD *)(v2 + 1280) = 0xD000000000000031;
  *(_QWORD *)(v2 + 1288) = 0x8000000100366720;
  *(_OWORD *)__dst = v29;
  *(_OWORD *)&__dst[16] = v30;
  *(_QWORD *)(v2 + 1320) = v25;
  *(_QWORD *)(v2 + 1296) = sub_10015F9D0(__dst, (uint64_t)&__dst[32]);
  v26 = sub_10001EDC4(v2);
  memcpy(__dst, v0 + 54, sizeof(__dst));
  v27 = sub_10015B47C();
  return sub_100150B98(v27, v26, (uint64_t)sub_10015E2F8, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_10015E098);
}

unint64_t sub_10015B47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t i;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t j;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t k;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t m;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t n;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t ii;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t jj;
  uint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t kk;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  int64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  int64_t v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t mm;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int64_t v159;
  unint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t nn;
  uint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  uint64_t i1;
  uint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  unint64_t v173;
  uint64_t i2;
  uint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t i3;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  uint64_t v344;
  _OWORD __dst[91];

  v1 = sub_100012C44(qword_100405C70);
  v2 = swift_allocObject(v1, 2192, 7);
  *(_OWORD *)(v2 + 16) = xmmword_10034AFE0;
  *(_QWORD *)(v2 + 32) = 0xD000000000000017;
  *(_QWORD *)(v2 + 40) = 0x8000000100366CA0;
  v3 = *(_QWORD *)(v0 + 8);
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 128);
  v18 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 160);
  v22 = *(_QWORD *)(v0 + 168);
  v25 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 184);
  v208 = *(_QWORD *)(v0 + 192);
  v210 = *(_QWORD *)(v0 + 200);
  v212 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v2 + 48) = *(_QWORD *)v0;
  *(_QWORD *)(v2 + 72) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 80) = 0xD000000000000017;
  *(_QWORD *)(v2 + 88) = 0x8000000100366CC0;
  *(_QWORD *)(v2 + 96) = v3;
  *(_QWORD *)(v2 + 120) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 128) = 0xD000000000000016;
  *(_QWORD *)(v2 + 136) = 0x8000000100366CE0;
  *(_QWORD *)(v2 + 144) = v5;
  *(_QWORD *)(v2 + 168) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 176) = 0xD000000000000015;
  *(_QWORD *)(v2 + 184) = 0x8000000100366D00;
  *(_QWORD *)(v2 + 192) = v4;
  *(_QWORD *)(v2 + 216) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 224) = 0xD000000000000014;
  *(_QWORD *)(v2 + 232) = 0x8000000100366D20;
  *(_QWORD *)(v2 + 240) = v6;
  *(_QWORD *)(v2 + 264) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 272) = 0xD00000000000001BLL;
  *(_QWORD *)(v2 + 280) = 0x8000000100366D40;
  *(_QWORD *)(v2 + 288) = v7;
  *(_QWORD *)(v2 + 312) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 320) = 0xD000000000000017;
  *(_QWORD *)(v2 + 328) = 0x8000000100366D60;
  *(_QWORD *)(v2 + 336) = v9;
  *(_QWORD *)(v2 + 360) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 368) = 0xD000000000000016;
  *(_QWORD *)(v2 + 376) = 0x8000000100366D80;
  *(_QWORD *)(v2 + 384) = v8;
  *(_QWORD *)(v2 + 408) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 416) = 0xD00000000000001BLL;
  *(_QWORD *)(v2 + 424) = 0x8000000100366DA0;
  *(_QWORD *)(v2 + 432) = v10;
  *(_QWORD *)(v2 + 456) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 464) = 0xD00000000000001CLL;
  *(_QWORD *)(v2 + 472) = 0x8000000100366DC0;
  *(_QWORD *)(v2 + 480) = v11;
  *(_QWORD *)(v2 + 504) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 512) = 0xD000000000000017;
  *(_QWORD *)(v2 + 520) = 0x8000000100366DE0;
  *(_QWORD *)(v2 + 552) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 528) = v13;
  *(_QWORD *)(v2 + 560) = 0xD000000000000013;
  *(_QWORD *)(v2 + 568) = 0x8000000100366E00;
  *(_QWORD *)(v2 + 600) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 576) = v12;
  *(_QWORD *)(v2 + 608) = 0xD000000000000019;
  *(_QWORD *)(v2 + 616) = 0x8000000100366E20;
  *(_QWORD *)(v2 + 648) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 624) = v15;
  *(_QWORD *)(v2 + 656) = 0xD00000000000001ALL;
  *(_QWORD *)(v2 + 664) = 0x8000000100366E40;
  *(_QWORD *)(v2 + 696) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 672) = v14;
  *(_QWORD *)(v2 + 704) = 0xD000000000000024;
  *(_QWORD *)(v2 + 712) = 0x8000000100366E60;
  *(_QWORD *)(v2 + 744) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 720) = v17;
  *(_QWORD *)(v2 + 752) = 0xD000000000000015;
  *(_QWORD *)(v2 + 760) = 0x8000000100366E90;
  *(_QWORD *)(v2 + 792) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 768) = v16;
  *(_QWORD *)(v2 + 800) = 0xD000000000000017;
  *(_QWORD *)(v2 + 808) = 0x8000000100366EB0;
  *(_QWORD *)(v2 + 840) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 816) = v19;
  *(_QWORD *)(v2 + 848) = 0xD000000000000017;
  *(_QWORD *)(v2 + 856) = 0x8000000100366ED0;
  *(_QWORD *)(v2 + 888) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 864) = v18;
  *(_QWORD *)(v2 + 896) = 0xD000000000000020;
  *(_QWORD *)(v2 + 904) = 0x8000000100366EF0;
  *(_QWORD *)(v2 + 936) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 912) = v21;
  *(_QWORD *)(v2 + 944) = 0xD000000000000014;
  *(_QWORD *)(v2 + 952) = 0x8000000100366F20;
  *(_QWORD *)(v2 + 984) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 960) = v20;
  *(_QWORD *)(v2 + 992) = 0xD000000000000018;
  *(_QWORD *)(v2 + 1000) = 0x8000000100366F40;
  *(_QWORD *)(v2 + 1032) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 1008) = v23;
  *(_QWORD *)(v2 + 1040) = 0xD000000000000017;
  *(_QWORD *)(v2 + 1048) = 0x8000000100366F60;
  *(_QWORD *)(v2 + 1080) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 1056) = v22;
  *(_QWORD *)(v2 + 1088) = 0xD000000000000017;
  *(_QWORD *)(v2 + 1096) = 0x8000000100366F80;
  *(_QWORD *)(v2 + 1128) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 1104) = v25;
  *(_QWORD *)(v2 + 1136) = 0xD000000000000019;
  *(_QWORD *)(v2 + 1144) = 0x8000000100366FA0;
  *(_QWORD *)(v2 + 1176) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 1152) = v24;
  *(_QWORD *)(v2 + 1184) = 0xD00000000000001ELL;
  *(_QWORD *)(v2 + 1192) = 0x8000000100366FC0;
  *(_QWORD *)(v2 + 1224) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 1200) = v208;
  *(_QWORD *)(v2 + 1232) = 0xD00000000000001CLL;
  *(_QWORD *)(v2 + 1240) = 0x8000000100366FE0;
  *(_QWORD *)(v2 + 1272) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 1248) = v210;
  *(_QWORD *)(v2 + 1280) = 0xD00000000000001CLL;
  *(_QWORD *)(v2 + 1288) = 0x8000000100367000;
  *(_QWORD *)(v2 + 1320) = &type metadata for UInt64;
  *(_QWORD *)(v2 + 1296) = v212;
  *(_QWORD *)(v2 + 1328) = 0xD000000000000017;
  *(_QWORD *)(v2 + 1336) = 0x8000000100367020;
  memcpy(__dst, (const void *)(v0 + 216), sizeof(__dst));
  v26 = *(_QWORD *)(v0 + 1672);
  v27 = *(_QWORD *)(v0 + 1696);
  v199 = *(_QWORD *)(v0 + 1720);
  v200 = *(_QWORD *)(v0 + 1744);
  v196 = *(_QWORD *)(v0 + 1768);
  v28 = *(_QWORD *)(v0 + 1792);
  v341 = *(_OWORD *)(v0 + 1960);
  v342 = *(_OWORD *)(v0 + 1976);
  v343 = *(_OWORD *)(v0 + 1992);
  v344 = *(_QWORD *)(v0 + 2008);
  v337 = *(_OWORD *)(v0 + 1896);
  v338 = *(_OWORD *)(v0 + 1912);
  v339 = *(_OWORD *)(v0 + 1928);
  v340 = *(_OWORD *)(v0 + 1944);
  v333 = *(_OWORD *)(v0 + 1832);
  v334 = *(_OWORD *)(v0 + 1848);
  v335 = *(_OWORD *)(v0 + 1864);
  v336 = *(_OWORD *)(v0 + 1880);
  v331 = *(_OWORD *)(v0 + 1800);
  v332 = *(_OWORD *)(v0 + 1816);
  v327 = *(_OWORD *)(v0 + 2176);
  v328 = *(_OWORD *)(v0 + 2192);
  v329 = *(_OWORD *)(v0 + 2208);
  v330 = *(_QWORD *)(v0 + 2224);
  v323 = *(_OWORD *)(v0 + 2112);
  v324 = *(_OWORD *)(v0 + 2128);
  v325 = *(_OWORD *)(v0 + 2144);
  v326 = *(_OWORD *)(v0 + 2160);
  v319 = *(_OWORD *)(v0 + 2048);
  v320 = *(_OWORD *)(v0 + 2064);
  v321 = *(_OWORD *)(v0 + 2080);
  v322 = *(_OWORD *)(v0 + 2096);
  v317 = *(_OWORD *)(v0 + 2016);
  v318 = *(_OWORD *)(v0 + 2032);
  v201 = *(_QWORD *)(v0 + 2248);
  v202 = *(_QWORD *)(v0 + 2272);
  v203 = *(_QWORD *)(v0 + 2296);
  v204 = *(_QWORD *)(v0 + 2320);
  v205 = *(_QWORD *)(v0 + 2344);
  v206 = *(_QWORD *)(v0 + 2368);
  v207 = *(_QWORD *)(v0 + 2392);
  v209 = *(_QWORD *)(v0 + 2416);
  v197 = *(_QWORD *)(v0 + 2440);
  v313 = *(_OWORD *)(v0 + 2624);
  v314 = *(_OWORD *)(v0 + 2640);
  v315 = *(_OWORD *)(v0 + 2656);
  v316 = *(_OWORD *)(v0 + 2672);
  v309 = *(_OWORD *)(v0 + 2560);
  v310 = *(_OWORD *)(v0 + 2576);
  v311 = *(_OWORD *)(v0 + 2592);
  v312 = *(_OWORD *)(v0 + 2608);
  v305 = *(_OWORD *)(v0 + 2496);
  v306 = *(_OWORD *)(v0 + 2512);
  v307 = *(_OWORD *)(v0 + 2528);
  v308 = *(_OWORD *)(v0 + 2544);
  v302 = *(_OWORD *)(v0 + 2448);
  v303 = *(_OWORD *)(v0 + 2464);
  v304 = *(_OWORD *)(v0 + 2480);
  v211 = *(_QWORD *)(v0 + 2704);
  v213 = *(_QWORD *)(v0 + 2728);
  v198 = *(_QWORD *)(v0 + 2752);
  v298 = *(_OWORD *)(v0 + 2936);
  v299 = *(_OWORD *)(v0 + 2952);
  v300 = *(_OWORD *)(v0 + 2968);
  v301 = *(_OWORD *)(v0 + 2984);
  v294 = *(_OWORD *)(v0 + 2872);
  v295 = *(_OWORD *)(v0 + 2888);
  v296 = *(_OWORD *)(v0 + 2904);
  v297 = *(_OWORD *)(v0 + 2920);
  v29 = *(_OWORD *)(v0 + 2824);
  v290 = *(_OWORD *)(v0 + 2808);
  v291 = v29;
  v292 = *(_OWORD *)(v0 + 2840);
  v293 = *(_OWORD *)(v0 + 2856);
  v30 = *(_OWORD *)(v0 + 2776);
  v287 = *(_OWORD *)(v0 + 2760);
  v288 = v30;
  v289 = *(_OWORD *)(v0 + 2792);
  v31 = *(_OWORD *)(v0 + 3192);
  v283 = *(_OWORD *)(v0 + 3176);
  v284 = v31;
  v32 = *(_OWORD *)(v0 + 3224);
  v285 = *(_OWORD *)(v0 + 3208);
  v286 = v32;
  v33 = *(_OWORD *)(v0 + 3128);
  v279 = *(_OWORD *)(v0 + 3112);
  v280 = v33;
  v34 = *(_OWORD *)(v0 + 3160);
  v281 = *(_OWORD *)(v0 + 3144);
  v282 = v34;
  v35 = *(_OWORD *)(v0 + 3064);
  v275 = *(_OWORD *)(v0 + 3048);
  v276 = v35;
  v36 = *(_OWORD *)(v0 + 3096);
  v277 = *(_OWORD *)(v0 + 3080);
  v278 = v36;
  v37 = *(_OWORD *)(v0 + 3000);
  v38 = *(_OWORD *)(v0 + 3032);
  v273 = *(_OWORD *)(v0 + 3016);
  v274 = v38;
  v39 = *(_OWORD *)(v0 + 3416);
  v40 = *(_OWORD *)(v0 + 3448);
  v269 = *(_OWORD *)(v0 + 3432);
  v270 = v40;
  v271 = *(_OWORD *)(v0 + 3464);
  v272 = v37;
  v41 = *(_OWORD *)(v0 + 3352);
  v42 = *(_OWORD *)(v0 + 3384);
  v265 = *(_OWORD *)(v0 + 3368);
  v266 = v42;
  v267 = *(_OWORD *)(v0 + 3400);
  v268 = v39;
  v43 = *(_OWORD *)(v0 + 3288);
  v44 = *(_OWORD *)(v0 + 3320);
  v261 = *(_OWORD *)(v0 + 3304);
  v262 = v44;
  v263 = *(_OWORD *)(v0 + 3336);
  v264 = v41;
  v45 = *(_OWORD *)(v0 + 3256);
  v257 = *(_OWORD *)(v0 + 3240);
  v258 = v45;
  v259 = *(_OWORD *)(v0 + 3272);
  v260 = v43;
  v46 = *(_OWORD *)(v0 + 3672);
  v253 = *(_OWORD *)(v0 + 3656);
  v254 = v46;
  v47 = *(_OWORD *)(v0 + 3704);
  v255 = *(_OWORD *)(v0 + 3688);
  v256 = v47;
  v48 = *(_OWORD *)(v0 + 3608);
  v249 = *(_OWORD *)(v0 + 3592);
  v250 = v48;
  v49 = *(_OWORD *)(v0 + 3640);
  v251 = *(_OWORD *)(v0 + 3624);
  v252 = v49;
  v50 = *(_OWORD *)(v0 + 3544);
  v245 = *(_OWORD *)(v0 + 3528);
  v246 = v50;
  v51 = *(_OWORD *)(v0 + 3576);
  v247 = *(_OWORD *)(v0 + 3560);
  v248 = v51;
  v52 = *(_OWORD *)(v0 + 3480);
  v53 = *(_OWORD *)(v0 + 3512);
  v243 = *(_OWORD *)(v0 + 3496);
  v244 = v53;
  v54 = *(_QWORD *)(v0 + 3736);
  v55 = *(_QWORD *)(v0 + 3760);
  v56 = *(_QWORD *)(v0 + 3784);
  v57 = *(_OWORD *)(v0 + 392);
  v58 = *(_OWORD *)(v0 + 424);
  v59 = *(_OWORD *)(v0 + 440);
  v239 = *(_OWORD *)(v0 + 408);
  v240 = v58;
  v241 = v59;
  v242 = v52;
  v60 = *(_OWORD *)(v0 + 328);
  v61 = *(_OWORD *)(v0 + 360);
  v62 = *(_OWORD *)(v0 + 376);
  v235 = *(_OWORD *)(v0 + 344);
  v236 = v61;
  v237 = v62;
  v238 = v57;
  v63 = *(_OWORD *)(v0 + 264);
  v64 = *(_OWORD *)(v0 + 296);
  v65 = *(_OWORD *)(v0 + 312);
  v231 = *(_OWORD *)(v0 + 280);
  v232 = v64;
  v66 = *(_QWORD *)(v0 + 3808);
  v233 = v65;
  v234 = v60;
  v67 = *(_OWORD *)(v0 + 232);
  v227 = *(_OWORD *)(v0 + 216);
  v228 = v67;
  v229 = *(_OWORD *)(v0 + 248);
  v230 = v63;
  v68 = sub_100012C44(&qword_100409328);
  *(_QWORD *)(v2 + 1368) = v68;
  sub_100075040(0, 10, 0);
  v69 = _swiftEmptyArrayStorage;
  v70 = _swiftEmptyArrayStorage[2];
  for (i = 16; i != 256; i += 24)
  {
    v72 = *(_QWORD *)((char *)&v227 + i);
    v214 = v69;
    v73 = v69[3];
    if (v70 >= v73 >> 1)
    {
      sub_100075040(v73 > 1, v70 + 1, 1);
      v69 = v214;
    }
    v69[2] = v70 + 1;
    v69[v70++ + 4] = v72;
  }
  *(_QWORD *)(v2 + 1344) = v69;
  *(_QWORD *)(v2 + 1376) = 0xD00000000000001CLL;
  *(_QWORD *)(v2 + 1384) = 0x8000000100367040;
  v239 = __dst[27];
  v240 = __dst[28];
  v241 = __dst[29];
  v235 = __dst[23];
  v236 = __dst[24];
  v237 = __dst[25];
  v238 = __dst[26];
  v231 = __dst[19];
  v232 = __dst[20];
  v233 = __dst[21];
  v234 = __dst[22];
  v227 = __dst[15];
  v228 = __dst[16];
  v229 = __dst[17];
  v230 = __dst[18];
  *(_QWORD *)(v2 + 1416) = v68;
  sub_100075040(0, 10, 0);
  v74 = _swiftEmptyArrayStorage;
  v75 = _swiftEmptyArrayStorage[2];
  for (j = 16; j != 256; j += 24)
  {
    v77 = *(_QWORD *)((char *)&v227 + j);
    v215 = v74;
    v78 = v74[3];
    if (v75 >= v78 >> 1)
    {
      sub_100075040(v78 > 1, v75 + 1, 1);
      v74 = v215;
    }
    v74[2] = v75 + 1;
    v74[v75++ + 4] = v77;
  }
  *(_QWORD *)(v2 + 1392) = v74;
  *(_QWORD *)(v2 + 1424) = 0xD000000000000016;
  *(_QWORD *)(v2 + 1432) = 0x8000000100367060;
  v239 = __dst[42];
  v240 = __dst[43];
  v241 = __dst[44];
  v235 = __dst[38];
  v236 = __dst[39];
  v237 = __dst[40];
  v238 = __dst[41];
  v231 = __dst[34];
  v232 = __dst[35];
  v233 = __dst[36];
  v234 = __dst[37];
  v227 = __dst[30];
  v228 = __dst[31];
  v229 = __dst[32];
  v230 = __dst[33];
  *(_QWORD *)(v2 + 1464) = v68;
  sub_100075040(0, 10, 0);
  v79 = _swiftEmptyArrayStorage;
  v80 = _swiftEmptyArrayStorage[2];
  for (k = 16; k != 256; k += 24)
  {
    v82 = *(_QWORD *)((char *)&v227 + k);
    v216 = v79;
    v83 = v79[3];
    if (v80 >= v83 >> 1)
    {
      sub_100075040(v83 > 1, v80 + 1, 1);
      v79 = v216;
    }
    v79[2] = v80 + 1;
    v79[v80++ + 4] = v82;
  }
  *(_QWORD *)(v2 + 1440) = v79;
  *(_QWORD *)(v2 + 1472) = 0xD000000000000014;
  *(_QWORD *)(v2 + 1480) = 0x8000000100367080;
  v239 = __dst[57];
  v240 = __dst[58];
  v241 = __dst[59];
  v235 = __dst[53];
  v236 = __dst[54];
  v237 = __dst[55];
  v238 = __dst[56];
  v231 = __dst[49];
  v232 = __dst[50];
  v233 = __dst[51];
  v234 = __dst[52];
  v227 = __dst[45];
  v228 = __dst[46];
  v229 = __dst[47];
  v230 = __dst[48];
  *(_QWORD *)(v2 + 1512) = v68;
  sub_100075040(0, 10, 0);
  v84 = _swiftEmptyArrayStorage;
  v85 = _swiftEmptyArrayStorage[2];
  for (m = 16; m != 256; m += 24)
  {
    v87 = *(_QWORD *)((char *)&v227 + m);
    v217 = v84;
    v88 = v84[3];
    if (v85 >= v88 >> 1)
    {
      sub_100075040(v88 > 1, v85 + 1, 1);
      v84 = v217;
    }
    v84[2] = v85 + 1;
    v84[v85++ + 4] = v87;
  }
  *(_QWORD *)(v2 + 1488) = v84;
  *(_QWORD *)(v2 + 1520) = 0xD000000000000014;
  *(_QWORD *)(v2 + 1528) = 0x80000001003670A0;
  v239 = __dst[72];
  v240 = __dst[73];
  v241 = __dst[74];
  v235 = __dst[68];
  v236 = __dst[69];
  v237 = __dst[70];
  v238 = __dst[71];
  v231 = __dst[64];
  v232 = __dst[65];
  v233 = __dst[66];
  v234 = __dst[67];
  v227 = __dst[60];
  v228 = __dst[61];
  v229 = __dst[62];
  v230 = __dst[63];
  *(_QWORD *)(v2 + 1560) = v68;
  sub_100075040(0, 10, 0);
  v89 = _swiftEmptyArrayStorage;
  v90 = _swiftEmptyArrayStorage[2];
  for (n = 16; n != 256; n += 24)
  {
    v92 = *(_QWORD *)((char *)&v227 + n);
    v218 = v89;
    v93 = v89[3];
    if (v90 >= v93 >> 1)
    {
      sub_100075040(v93 > 1, v90 + 1, 1);
      v89 = v218;
    }
    v89[2] = v90 + 1;
    v89[v90++ + 4] = v92;
  }
  *(_QWORD *)(v2 + 1536) = v89;
  *(_QWORD *)(v2 + 1568) = 0xD000000000000015;
  *(_QWORD *)(v2 + 1576) = 0x80000001003670C0;
  v239 = __dst[87];
  v240 = __dst[88];
  v241 = __dst[89];
  v235 = __dst[83];
  v236 = __dst[84];
  v237 = __dst[85];
  v238 = __dst[86];
  v231 = __dst[79];
  v232 = __dst[80];
  v233 = __dst[81];
  v234 = __dst[82];
  v227 = __dst[75];
  v228 = __dst[76];
  v229 = __dst[77];
  v230 = __dst[78];
  *(_QWORD *)(v2 + 1608) = v68;
  sub_100075040(0, 10, 0);
  v94 = _swiftEmptyArrayStorage;
  v95 = _swiftEmptyArrayStorage[2];
  for (ii = 16; ii != 256; ii += 24)
  {
    v97 = *(_QWORD *)((char *)&v227 + ii);
    v219 = v94;
    v98 = v94[3];
    if (v95 >= v98 >> 1)
    {
      sub_100075040(v98 > 1, v95 + 1, 1);
      v94 = v219;
    }
    v94[2] = v95 + 1;
    v94[v95++ + 4] = v97;
  }
  *(_QWORD *)(v2 + 1584) = v94;
  *(_QWORD *)(v2 + 1616) = 0xD000000000000013;
  *(_QWORD *)(v2 + 1624) = 0x80000001003670E0;
  *(_QWORD *)(v2 + 1656) = v68;
  *(_QWORD *)&v227 = _swiftEmptyArrayStorage;
  sub_100075040(0, 6, 0);
  v99 = v227;
  v101 = *(_QWORD *)(v227 + 16);
  v100 = *(_QWORD *)(v227 + 24);
  v102 = v100 >> 1;
  v103 = v101 + 1;
  if (v100 >> 1 <= v101)
  {
    sub_100075040(v100 > 1, v101 + 1, 1);
    v99 = v227;
    v100 = *(_QWORD *)(v227 + 24);
    v102 = v100 >> 1;
  }
  *(_QWORD *)(v99 + 16) = v103;
  *(_QWORD *)(v99 + 8 * v101 + 32) = v26;
  *(_QWORD *)&v227 = v99;
  v104 = v101 + 2;
  if (v102 <= v103)
  {
    sub_100075040(v100 > 1, v104, 1);
    v99 = v227;
  }
  *(_QWORD *)(v99 + 16) = v104;
  *(_QWORD *)(v99 + 8 * v103 + 32) = v27;
  *(_QWORD *)&v227 = v99;
  v106 = *(_QWORD *)(v99 + 16);
  v105 = *(_QWORD *)(v99 + 24);
  v107 = v105 >> 1;
  v108 = v106 + 1;
  if (v105 >> 1 <= v106)
  {
    sub_100075040(v105 > 1, v106 + 1, 1);
    v99 = v227;
    v105 = *(_QWORD *)(v227 + 24);
    v107 = v105 >> 1;
  }
  *(_QWORD *)(v99 + 16) = v108;
  *(_QWORD *)(v99 + 8 * v106 + 32) = v199;
  *(_QWORD *)&v227 = v99;
  v109 = v106 + 2;
  if (v107 <= v108)
  {
    sub_100075040(v105 > 1, v109, 1);
    v99 = v227;
  }
  *(_QWORD *)(v99 + 16) = v109;
  *(_QWORD *)(v99 + 8 * v108 + 32) = v200;
  *(_QWORD *)&v227 = v99;
  v111 = *(_QWORD *)(v99 + 16);
  v110 = *(_QWORD *)(v99 + 24);
  v112 = v110 >> 1;
  v113 = v111 + 1;
  if (v110 >> 1 <= v111)
  {
    sub_100075040(v110 > 1, v111 + 1, 1);
    v99 = v227;
    v110 = *(_QWORD *)(v227 + 24);
    v112 = v110 >> 1;
  }
  *(_QWORD *)(v99 + 16) = v113;
  *(_QWORD *)(v99 + 8 * v111 + 32) = v196;
  *(_QWORD *)&v227 = v99;
  v114 = v111 + 2;
  if (v112 <= v113)
  {
    sub_100075040(v110 > 1, v114, 1);
    v99 = v227;
  }
  *(_QWORD *)(v99 + 16) = v114;
  *(_QWORD *)(v99 + 8 * v113 + 32) = v28;
  *(_QWORD *)(v2 + 1632) = v99;
  *(_QWORD *)(v2 + 1664) = 0xD00000000000001DLL;
  *(_QWORD *)(v2 + 1672) = 0x8000000100367100;
  v237 = v341;
  v238 = v342;
  v239 = v343;
  *(_QWORD *)&v240 = v344;
  v233 = v337;
  v234 = v338;
  v235 = v339;
  v236 = v340;
  v229 = v333;
  v230 = v334;
  v231 = v335;
  v232 = v336;
  v227 = v331;
  v228 = v332;
  *(_QWORD *)(v2 + 1704) = v68;
  sub_100075040(0, 9, 0);
  v115 = _swiftEmptyArrayStorage;
  v116 = _swiftEmptyArrayStorage[2];
  for (jj = 16; jj != 232; jj += 24)
  {
    v118 = *(_QWORD *)((char *)&v227 + jj);
    v220 = v115;
    v119 = v115[3];
    if (v116 >= v119 >> 1)
    {
      sub_100075040(v119 > 1, v116 + 1, 1);
      v115 = v220;
    }
    v115[2] = v116 + 1;
    v115[v116++ + 4] = v118;
  }
  *(_QWORD *)(v2 + 1680) = v115;
  *(_QWORD *)(v2 + 1712) = 0xD000000000000021;
  *(_QWORD *)(v2 + 1720) = 0x8000000100367120;
  v237 = v327;
  v238 = v328;
  v239 = v329;
  *(_QWORD *)&v240 = v330;
  v233 = v323;
  v234 = v324;
  v235 = v325;
  v236 = v326;
  v229 = v319;
  v230 = v320;
  v231 = v321;
  v232 = v322;
  v227 = v317;
  v228 = v318;
  *(_QWORD *)(v2 + 1752) = v68;
  sub_100075040(0, 9, 0);
  v120 = _swiftEmptyArrayStorage;
  v121 = _swiftEmptyArrayStorage[2];
  for (kk = 16; kk != 232; kk += 24)
  {
    v123 = *(_QWORD *)((char *)&v227 + kk);
    v221 = v120;
    v124 = v120[3];
    if (v121 >= v124 >> 1)
    {
      sub_100075040(v124 > 1, v121 + 1, 1);
      v120 = v221;
    }
    v120[2] = v121 + 1;
    v120[v121++ + 4] = v123;
  }
  *(_QWORD *)(v2 + 1728) = v120;
  *(_QWORD *)(v2 + 1760) = 0xD000000000000019;
  *(_QWORD *)(v2 + 1768) = 0x8000000100367150;
  *(_QWORD *)(v2 + 1800) = v68;
  *(_QWORD *)&v227 = _swiftEmptyArrayStorage;
  sub_100075040(0, 4, 0);
  v125 = v227;
  v127 = *(_QWORD *)(v227 + 16);
  v126 = *(_QWORD *)(v227 + 24);
  v128 = v126 >> 1;
  v129 = v127 + 1;
  if (v126 >> 1 <= v127)
  {
    sub_100075040(v126 > 1, v127 + 1, 1);
    v125 = v227;
    v126 = *(_QWORD *)(v227 + 24);
    v128 = v126 >> 1;
  }
  *(_QWORD *)(v125 + 16) = v129;
  *(_QWORD *)(v125 + 8 * v127 + 32) = v201;
  *(_QWORD *)&v227 = v125;
  v130 = v127 + 2;
  if (v128 <= v129)
  {
    sub_100075040(v126 > 1, v130, 1);
    v125 = v227;
  }
  *(_QWORD *)(v125 + 16) = v130;
  *(_QWORD *)(v125 + 8 * v129 + 32) = v202;
  *(_QWORD *)&v227 = v125;
  v132 = *(_QWORD *)(v125 + 16);
  v131 = *(_QWORD *)(v125 + 24);
  v133 = v131 >> 1;
  v134 = v132 + 1;
  if (v131 >> 1 <= v132)
  {
    sub_100075040(v131 > 1, v132 + 1, 1);
    v125 = v227;
    v131 = *(_QWORD *)(v227 + 24);
    v133 = v131 >> 1;
  }
  *(_QWORD *)(v125 + 16) = v134;
  *(_QWORD *)(v125 + 8 * v132 + 32) = v203;
  *(_QWORD *)&v227 = v125;
  v135 = v132 + 2;
  if (v133 <= v134)
  {
    sub_100075040(v131 > 1, v135, 1);
    v125 = v227;
  }
  *(_QWORD *)(v125 + 16) = v135;
  *(_QWORD *)(v125 + 8 * v134 + 32) = v204;
  *(_QWORD *)(v2 + 1776) = v125;
  *(_QWORD *)(v2 + 1808) = 0xD00000000000001ELL;
  *(_QWORD *)(v2 + 1816) = 0x8000000100367170;
  *(_QWORD *)(v2 + 1848) = v68;
  *(_QWORD *)&v227 = _swiftEmptyArrayStorage;
  sub_100075040(0, 5, 0);
  v136 = v227;
  v138 = *(_QWORD *)(v227 + 16);
  v137 = *(_QWORD *)(v227 + 24);
  v139 = v137 >> 1;
  v140 = v138 + 1;
  if (v137 >> 1 <= v138)
  {
    sub_100075040(v137 > 1, v138 + 1, 1);
    v136 = v227;
    v137 = *(_QWORD *)(v227 + 24);
    v139 = v137 >> 1;
  }
  *(_QWORD *)(v136 + 16) = v140;
  *(_QWORD *)(v136 + 8 * v138 + 32) = v205;
  *(_QWORD *)&v227 = v136;
  v141 = v138 + 2;
  if (v139 <= v140)
  {
    sub_100075040(v137 > 1, v141, 1);
    v136 = v227;
  }
  *(_QWORD *)(v136 + 16) = v141;
  *(_QWORD *)(v136 + 8 * v140 + 32) = v206;
  *(_QWORD *)&v227 = v136;
  v143 = *(_QWORD *)(v136 + 16);
  v142 = *(_QWORD *)(v136 + 24);
  v144 = v142 >> 1;
  v145 = v143 + 1;
  if (v142 >> 1 <= v143)
  {
    sub_100075040(v142 > 1, v143 + 1, 1);
    v136 = v227;
    v142 = *(_QWORD *)(v227 + 24);
    v144 = v142 >> 1;
  }
  *(_QWORD *)(v136 + 16) = v145;
  *(_QWORD *)(v136 + 8 * v143 + 32) = v207;
  *(_QWORD *)&v227 = v136;
  v146 = v143 + 2;
  if (v144 <= v145)
  {
    sub_100075040(v142 > 1, v146, 1);
    v136 = v227;
  }
  *(_QWORD *)(v136 + 16) = v146;
  *(_QWORD *)(v136 + 8 * v145 + 32) = v209;
  *(_QWORD *)&v227 = v136;
  v148 = *(_QWORD *)(v136 + 16);
  v147 = *(_QWORD *)(v136 + 24);
  if (v148 >= v147 >> 1)
  {
    sub_100075040(v147 > 1, v148 + 1, 1);
    v136 = v227;
  }
  *(_QWORD *)(v136 + 16) = v148 + 1;
  *(_QWORD *)(v136 + 8 * v148 + 32) = v197;
  *(_QWORD *)(v2 + 1824) = v136;
  *(_QWORD *)(v2 + 1856) = 0x53544154535F4C4CLL;
  *(_QWORD *)(v2 + 1864) = 0xEF4143435F58545FLL;
  v239 = v314;
  v240 = v315;
  v241 = v316;
  v235 = v310;
  v236 = v311;
  v237 = v312;
  v238 = v313;
  v231 = v306;
  v232 = v307;
  v233 = v308;
  v234 = v309;
  v227 = v302;
  v228 = v303;
  v229 = v304;
  v230 = v305;
  *(_QWORD *)(v2 + 1896) = v68;
  sub_100075040(0, 10, 0);
  v149 = _swiftEmptyArrayStorage;
  v150 = _swiftEmptyArrayStorage[2];
  for (mm = 16; mm != 256; mm += 24)
  {
    v152 = *(_QWORD *)((char *)&v227 + mm);
    v222 = v149;
    v153 = v149[3];
    if (v150 >= v153 >> 1)
    {
      sub_100075040(v153 > 1, v150 + 1, 1);
      v149 = v222;
    }
    v149[2] = v150 + 1;
    v149[v150++ + 4] = v152;
  }
  *(_QWORD *)(v2 + 1872) = v149;
  *(_QWORD *)(v2 + 1904) = 0xD000000000000016;
  *(_QWORD *)(v2 + 1912) = 0x8000000100367190;
  *(_QWORD *)(v2 + 1944) = v68;
  *(_QWORD *)&v227 = _swiftEmptyArrayStorage;
  sub_100075040(0, 3, 0);
  v154 = v227;
  v156 = *(_QWORD *)(v227 + 16);
  v155 = *(_QWORD *)(v227 + 24);
  v157 = v155 >> 1;
  v158 = v156 + 1;
  if (v155 >> 1 <= v156)
  {
    sub_100075040(v155 > 1, v156 + 1, 1);
    v154 = v227;
    v155 = *(_QWORD *)(v227 + 24);
    v157 = v155 >> 1;
  }
  *(_QWORD *)(v154 + 16) = v158;
  *(_QWORD *)(v154 + 8 * v156 + 32) = v211;
  *(_QWORD *)&v227 = v154;
  v159 = v156 + 2;
  if (v157 <= v158)
  {
    sub_100075040(v155 > 1, v159, 1);
    v154 = v227;
  }
  *(_QWORD *)(v154 + 16) = v159;
  *(_QWORD *)(v154 + 8 * v158 + 32) = v213;
  *(_QWORD *)&v227 = v154;
  v161 = *(_QWORD *)(v154 + 16);
  v160 = *(_QWORD *)(v154 + 24);
  if (v161 >= v160 >> 1)
  {
    sub_100075040(v160 > 1, v161 + 1, 1);
    v154 = v227;
  }
  *(_QWORD *)(v154 + 16) = v161 + 1;
  *(_QWORD *)(v154 + 8 * v161 + 32) = v198;
  *(_QWORD *)(v2 + 1920) = v154;
  *(_QWORD *)(v2 + 1952) = 0xD000000000000017;
  *(_QWORD *)(v2 + 1960) = 0x80000001003671B0;
  v239 = v299;
  v240 = v300;
  v241 = v301;
  v235 = v295;
  v236 = v296;
  v237 = v297;
  v238 = v298;
  v231 = v291;
  v232 = v292;
  v233 = v293;
  v234 = v294;
  v227 = v287;
  v228 = v288;
  v229 = v289;
  v230 = v290;
  *(_QWORD *)(v2 + 1992) = v68;
  sub_100075040(0, 10, 0);
  v162 = _swiftEmptyArrayStorage;
  v163 = _swiftEmptyArrayStorage[2];
  for (nn = 16; nn != 256; nn += 24)
  {
    v165 = *(_QWORD *)((char *)&v227 + nn);
    v223 = v162;
    v166 = v162[3];
    if (v163 >= v166 >> 1)
    {
      sub_100075040(v166 > 1, v163 + 1, 1);
      v162 = v223;
    }
    v162[2] = v163 + 1;
    v162[v163++ + 4] = v165;
  }
  *(_QWORD *)(v2 + 1968) = v162;
  *(_QWORD *)(v2 + 2000) = 0xD000000000000015;
  *(_QWORD *)(v2 + 2008) = 0x80000001003671D0;
  v239 = v284;
  v240 = v285;
  v241 = v286;
  v235 = v280;
  v236 = v281;
  v237 = v282;
  v238 = v283;
  v231 = v276;
  v232 = v277;
  v233 = v278;
  v234 = v279;
  v227 = v272;
  v228 = v273;
  v229 = v274;
  v230 = v275;
  *(_QWORD *)(v2 + 2040) = v68;
  sub_100075040(0, 10, 0);
  v167 = _swiftEmptyArrayStorage;
  v168 = _swiftEmptyArrayStorage[2];
  for (i1 = 16; i1 != 256; i1 += 24)
  {
    v170 = *(_QWORD *)((char *)&v227 + i1);
    v224 = v167;
    v171 = v167[3];
    if (v168 >= v171 >> 1)
    {
      sub_100075040(v171 > 1, v168 + 1, 1);
      v167 = v224;
    }
    v167[2] = v168 + 1;
    v167[v168++ + 4] = v170;
  }
  *(_QWORD *)(v2 + 2016) = v167;
  *(_QWORD *)(v2 + 2048) = 0xD000000000000014;
  *(_QWORD *)(v2 + 2056) = 0x80000001003671F0;
  v239 = v269;
  v240 = v270;
  v241 = v271;
  v235 = v265;
  v236 = v266;
  v237 = v267;
  v238 = v268;
  v231 = v261;
  v232 = v262;
  v233 = v263;
  v234 = v264;
  v227 = v257;
  v228 = v258;
  v229 = v259;
  v230 = v260;
  *(_QWORD *)(v2 + 2088) = v68;
  sub_100075040(0, 10, 0);
  v172 = _swiftEmptyArrayStorage;
  v173 = _swiftEmptyArrayStorage[2];
  for (i2 = 16; i2 != 256; i2 += 24)
  {
    v175 = *(_QWORD *)((char *)&v227 + i2);
    v225 = v172;
    v176 = v172[3];
    if (v173 >= v176 >> 1)
    {
      sub_100075040(v176 > 1, v173 + 1, 1);
      v172 = v225;
    }
    v172[2] = v173 + 1;
    v172[v173++ + 4] = v175;
  }
  *(_QWORD *)(v2 + 2064) = v172;
  *(_QWORD *)(v2 + 2096) = 0xD000000000000015;
  *(_QWORD *)(v2 + 2104) = 0x8000000100367210;
  v239 = v254;
  v240 = v255;
  v241 = v256;
  v235 = v250;
  v236 = v251;
  v237 = v252;
  v238 = v253;
  v231 = v246;
  v232 = v247;
  v233 = v248;
  v234 = v249;
  v227 = v242;
  v228 = v243;
  v229 = v244;
  v230 = v245;
  *(_QWORD *)(v2 + 2136) = v68;
  sub_100075040(0, 10, 0);
  v177 = _swiftEmptyArrayStorage;
  v178 = _swiftEmptyArrayStorage[2];
  for (i3 = 16; i3 != 256; i3 += 24)
  {
    v180 = *(_QWORD *)((char *)&v227 + i3);
    v226 = v177;
    v181 = v177[3];
    if (v178 >= v181 >> 1)
    {
      sub_100075040(v181 > 1, v178 + 1, 1);
      v177 = v226;
    }
    v177[2] = v178 + 1;
    v177[v178++ + 4] = v180;
  }
  *(_QWORD *)(v2 + 2112) = v177;
  *(_QWORD *)(v2 + 2144) = 0xD000000000000010;
  *(_QWORD *)(v2 + 2152) = 0x8000000100367230;
  *(_QWORD *)(v2 + 2184) = v68;
  *(_QWORD *)&v227 = _swiftEmptyArrayStorage;
  sub_100075040(0, 4, 0);
  sub_10015D9BC();
  sub_10015D9BC();
  sub_10015D9BC();
  sub_10015D9BC();
  sub_10015D9BC();
  sub_10015D9BC();
  sub_10015D9BC();
  sub_10015D9BC();
  sub_10015D9BC();
  v182 = v227;
  v184 = *(_QWORD *)(v227 + 16);
  v183 = *(_QWORD *)(v227 + 24);
  if (v184 >= v183 >> 1)
  {
    sub_100075040(v183 > 1, v184 + 1, 1);
    v182 = v227;
  }
  *(_QWORD *)(v182 + 16) = v184 + 1;
  *(_QWORD *)(v182 + 8 * v184 + 32) = v54;
  sub_10015D9BC();
  v185 = v227;
  v187 = *(_QWORD *)(v227 + 16);
  v186 = *(_QWORD *)(v227 + 24);
  if (v187 >= v186 >> 1)
  {
    sub_100075040(v186 > 1, v187 + 1, 1);
    v185 = v227;
  }
  *(_QWORD *)(v185 + 16) = v187 + 1;
  *(_QWORD *)(v185 + 8 * v187 + 32) = v55;
  sub_10015D9BC();
  v188 = v227;
  v190 = *(_QWORD *)(v227 + 16);
  v189 = *(_QWORD *)(v227 + 24);
  if (v190 >= v189 >> 1)
  {
    sub_100075040(v189 > 1, v190 + 1, 1);
    v188 = v227;
  }
  *(_QWORD *)(v188 + 16) = v190 + 1;
  *(_QWORD *)(v188 + 8 * v190 + 32) = v56;
  sub_10015D9BC();
  v191 = v227;
  v193 = *(_QWORD *)(v227 + 16);
  v192 = *(_QWORD *)(v227 + 24);
  if (v193 >= v192 >> 1)
  {
    sub_100075040(v192 > 1, v193 + 1, 1);
    v191 = v227;
  }
  *(_QWORD *)(v191 + 16) = v193 + 1;
  *(_QWORD *)(v191 + 8 * v193 + 32) = v66;
  *(_QWORD *)(v2 + 2160) = v191;
  v194 = NANBitmap.Channel.operatingClass.getter(v2);
  return sub_10001EDC4(v194);
}

uint64_t apple80211_awdl_low_latency_statistics.eventPayload()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int16 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _QWORD v71[478];

  type metadata accessor for String.Encoding(0);
  __chkstk_darwin();
  v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012C44(qword_100405C70);
  v4 = swift_allocObject(v3, 1808, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100349C40;
  strcpy((char *)(v4 + 32), "LL_STATS_ISSDB");
  *(_BYTE *)(v4 + 47) = -18;
  v5 = *(_DWORD *)(v0 + 8);
  v6 = *(_WORD *)(v0 + 16);
  v7 = *(_DWORD *)(v0 + 20);
  v8 = *(_DWORD *)(v0 + 24);
  v9 = *(_DWORD *)(v0 + 28);
  v10 = *(_DWORD *)(v0 + 48);
  v11 = *(_DWORD *)(v0 + 60);
  v38 = *(_DWORD *)(v0 + 36);
  v39 = v11;
  v12 = *(_DWORD *)(v0 + 72);
  v40 = v10;
  v41 = v12;
  v13 = *(_DWORD *)(v0 + 84);
  v42 = *(_DWORD *)(v0 + 80);
  v43 = v13;
  v14 = *(_DWORD *)(v0 + 92);
  v44 = *(_DWORD *)(v0 + 88);
  v45 = v14;
  v15 = *(_DWORD *)(v0 + 100);
  v46 = *(_DWORD *)(v0 + 96);
  v47 = v15;
  v48 = *(unsigned __int8 *)(v0 + 104);
  v49 = *(_QWORD *)(v0 + 112);
  v16 = *(_DWORD *)(v0 + 124);
  v50 = *(_DWORD *)(v0 + 120);
  v51 = v16;
  v17 = *(_DWORD *)(v0 + 132);
  v52 = *(_DWORD *)(v0 + 128);
  v53 = v17;
  v18 = *(_DWORD *)(v0 + 140);
  v54 = *(_DWORD *)(v0 + 136);
  v55 = v18;
  v56 = *(_DWORD *)(v0 + 144);
  v58 = *(_DWORD *)(v0 + 148);
  v60 = *(unsigned __int16 *)(v0 + 152);
  v62 = *(unsigned __int8 *)(v0 + 154);
  *(_BYTE *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 72) = &type metadata for Bool;
  *(_QWORD *)(v4 + 80) = 0xD000000000000015;
  *(_QWORD *)(v4 + 88) = 0x8000000100366760;
  v57 = *(unsigned __int8 *)(v0 + 155);
  v59 = *(unsigned __int8 *)(v0 + 157);
  v61 = *(unsigned __int8 *)(v0 + 158);
  v64 = *(unsigned __int8 *)(v0 + 159);
  v65 = *(unsigned int *)(v0 + 162);
  v19 = *(_DWORD *)(v0 + 168);
  v66 = *(unsigned __int8 *)(v0 + 166);
  v67 = v19;
  v20 = *(_DWORD *)(v0 + 176);
  v68 = *(_DWORD *)(v0 + 172);
  v69 = v20;
  v70 = *(_DWORD *)(v0 + 180);
  v63 = *(unsigned __int16 *)(v0 + 160);
  v21 = sub_100012C44(&qword_100403E88);
  v22 = swift_allocObject(v21, 34, 7);
  *(_OWORD *)(v22 + 16) = xmmword_10033C020;
  *(_WORD *)(v22 + 32) = v6;
  v71[0] = v22;
  static String.Encoding.utf8.getter(v22);
  v23 = sub_100012C44(&qword_100406738);
  v24 = sub_10015F240();
  v25 = String.init<A>(bytes:encoding:)(v71, v2, v23, v24);
  v27 = v26;
  swift_bridgeObjectRelease(v22);
  *(_DWORD *)(v4 + 144) = v7;
  *(_DWORD *)(v4 + 192) = v8;
  *(_DWORD *)(v4 + 240) = v9;
  v28 = 0xE000000000000000;
  if (v27)
  {
    v28 = v27;
    v29 = v25;
  }
  else
  {
    v29 = 0;
  }
  *(_QWORD *)(v4 + 96) = v29;
  *(_QWORD *)(v4 + 104) = v28;
  *(_QWORD *)(v4 + 128) = 0xD000000000000014;
  *(_QWORD *)(v4 + 136) = 0x8000000100366780;
  *(_QWORD *)(v4 + 184) = 0x80000001003667A0;
  *(_QWORD *)(v4 + 216) = &type metadata for Int32;
  *(_QWORD *)(v4 + 168) = &type metadata for Int32;
  *(_QWORD *)(v4 + 176) = 0xD000000000000013;
  *(_QWORD *)(v4 + 224) = 0xD000000000000013;
  *(_QWORD *)(v4 + 232) = 0x80000001003667C0;
  *(_QWORD *)(v4 + 280) = 0x80000001003667E0;
  *(_QWORD *)(v4 + 120) = &type metadata for String;
  v30 = v39;
  *(_DWORD *)(v4 + 288) = v38;
  *(_QWORD *)(v4 + 264) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 272) = 0xD00000000000001DLL;
  *(_QWORD *)(v4 + 312) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 320) = 0xD00000000000001DLL;
  *(_QWORD *)(v4 + 328) = 0x8000000100366800;
  *(_DWORD *)(v4 + 336) = v30;
  *(_QWORD *)(v4 + 360) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 368) = 0xD00000000000001ELL;
  *(_QWORD *)(v4 + 376) = 0x8000000100366820;
  *(_DWORD *)(v4 + 384) = v40;
  *(_QWORD *)(v4 + 408) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 416) = 0xD00000000000001ELL;
  *(_QWORD *)(v4 + 424) = 0x8000000100366840;
  *(_DWORD *)(v4 + 432) = v41;
  *(_QWORD *)(v4 + 456) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 464) = 0xD000000000000022;
  *(_QWORD *)(v4 + 472) = 0x8000000100366860;
  *(_DWORD *)(v4 + 480) = v42;
  *(_QWORD *)(v4 + 504) = &type metadata for UInt32;
  *(_QWORD *)(v4 + 512) = 0xD000000000000022;
  *(_QWORD *)(v4 + 520) = 0x8000000100366890;
  *(_QWORD *)(v4 + 552) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 528) = v43;
  *(_QWORD *)(v4 + 560) = 0xD000000000000022;
  *(_QWORD *)(v4 + 568) = 0x80000001003668C0;
  *(_QWORD *)(v4 + 600) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 576) = v44;
  *(_QWORD *)(v4 + 608) = 0xD000000000000022;
  *(_QWORD *)(v4 + 616) = 0x80000001003668F0;
  *(_QWORD *)(v4 + 648) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 624) = v45;
  *(_QWORD *)(v4 + 656) = 0xD000000000000028;
  *(_QWORD *)(v4 + 664) = 0x8000000100366920;
  *(_QWORD *)(v4 + 696) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 672) = v46;
  *(_QWORD *)(v4 + 704) = 0xD000000000000029;
  *(_QWORD *)(v4 + 712) = 0x8000000100366950;
  *(_QWORD *)(v4 + 744) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 720) = v47;
  *(_QWORD *)(v4 + 752) = 0xD00000000000001CLL;
  *(_QWORD *)(v4 + 760) = 0x8000000100366980;
  *(_QWORD *)(v4 + 792) = &type metadata for Bool;
  *(_BYTE *)(v4 + 768) = v48;
  *(_QWORD *)(v4 + 800) = 0xD000000000000019;
  *(_QWORD *)(v4 + 808) = 0x80000001003669A0;
  *(_QWORD *)(v4 + 840) = &type metadata for UInt64;
  *(_QWORD *)(v4 + 816) = v49;
  *(_QWORD *)(v4 + 848) = 0xD000000000000019;
  *(_QWORD *)(v4 + 856) = 0x80000001003669C0;
  *(_QWORD *)(v4 + 888) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 864) = v50;
  *(_QWORD *)(v4 + 896) = 0xD00000000000001ALL;
  *(_QWORD *)(v4 + 904) = 0x80000001003669E0;
  *(_QWORD *)(v4 + 936) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 912) = v51;
  *(_QWORD *)(v4 + 944) = 0xD000000000000023;
  *(_QWORD *)(v4 + 952) = 0x8000000100366A00;
  *(_QWORD *)(v4 + 984) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 960) = v52;
  *(_QWORD *)(v4 + 992) = 0xD00000000000001BLL;
  *(_QWORD *)(v4 + 1000) = 0x8000000100366A30;
  *(_QWORD *)(v4 + 1032) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1008) = v53;
  *(_QWORD *)(v4 + 1040) = 0xD00000000000001BLL;
  *(_QWORD *)(v4 + 1048) = 0x8000000100366A50;
  *(_QWORD *)(v4 + 1080) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1056) = v54;
  *(_QWORD *)(v4 + 1088) = 0xD000000000000021;
  *(_QWORD *)(v4 + 1096) = 0x8000000100366A70;
  *(_QWORD *)(v4 + 1128) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1104) = v55;
  *(_QWORD *)(v4 + 1136) = 0xD00000000000001FLL;
  *(_QWORD *)(v4 + 1144) = 0x8000000100366AA0;
  *(_QWORD *)(v4 + 1176) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1152) = v56;
  *(_QWORD *)(v4 + 1184) = 0xD000000000000023;
  *(_QWORD *)(v4 + 1192) = 0x8000000100366AC0;
  *(_QWORD *)(v4 + 1224) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1200) = v58;
  *(_QWORD *)(v4 + 1232) = 0xD00000000000001FLL;
  *(_QWORD *)(v4 + 1240) = 0x8000000100366AF0;
  *(_QWORD *)(v4 + 1272) = &type metadata for UInt16;
  *(_WORD *)(v4 + 1248) = v60;
  *(_QWORD *)(v4 + 1280) = 0xD00000000000001DLL;
  *(_QWORD *)(v4 + 1288) = 0x8000000100366B10;
  *(_QWORD *)(v4 + 1320) = &type metadata for Bool;
  *(_BYTE *)(v4 + 1296) = v62;
  *(_QWORD *)(v4 + 1328) = 0xD00000000000001DLL;
  *(_QWORD *)(v4 + 1336) = 0x8000000100366B30;
  *(_QWORD *)(v4 + 1368) = &type metadata for Bool;
  *(_BYTE *)(v4 + 1344) = v57;
  *(_QWORD *)(v4 + 1376) = 0xD000000000000018;
  *(_QWORD *)(v4 + 1384) = 0x8000000100366B50;
  *(_QWORD *)(v4 + 1416) = &type metadata for Bool;
  *(_BYTE *)(v4 + 1392) = v59;
  *(_QWORD *)(v4 + 1424) = 0xD000000000000017;
  *(_QWORD *)(v4 + 1432) = 0x8000000100366B70;
  *(_QWORD *)(v4 + 1464) = &type metadata for Bool;
  *(_BYTE *)(v4 + 1440) = v61;
  *(_QWORD *)(v4 + 1472) = 0xD000000000000021;
  *(_QWORD *)(v4 + 1480) = 0x8000000100366B90;
  *(_QWORD *)(v4 + 1512) = &type metadata for UInt8;
  *(_BYTE *)(v4 + 1488) = v64;
  *(_QWORD *)(v4 + 1520) = 0x53544154535F4C4CLL;
  v31 = v63 | (v65 << 16);
  *(_QWORD *)(v4 + 1528) = 0xEF44495F4754525FLL;
  v32 = WiFiAddress.description.getter(v31);
  *(_QWORD *)(v4 + 1560) = &type metadata for String;
  *(_QWORD *)(v4 + 1536) = v32;
  *(_QWORD *)(v4 + 1544) = v33;
  *(_QWORD *)(v4 + 1568) = 0xD000000000000012;
  *(_QWORD *)(v4 + 1576) = 0x8000000100366BC0;
  *(_QWORD *)(v4 + 1608) = &type metadata for Bool;
  *(_BYTE *)(v4 + 1584) = v66;
  *(_QWORD *)(v4 + 1616) = 0xD000000000000021;
  *(_QWORD *)(v4 + 1624) = 0x8000000100366BE0;
  *(_QWORD *)(v4 + 1656) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1632) = v67;
  *(_QWORD *)(v4 + 1664) = 0xD000000000000021;
  *(_QWORD *)(v4 + 1672) = 0x8000000100366C10;
  *(_QWORD *)(v4 + 1704) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1680) = v68;
  *(_QWORD *)(v4 + 1712) = 0xD000000000000025;
  *(_QWORD *)(v4 + 1720) = 0x8000000100366C40;
  *(_QWORD *)(v4 + 1752) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1728) = v69;
  *(_QWORD *)(v4 + 1760) = 0xD000000000000021;
  *(_QWORD *)(v4 + 1768) = 0x8000000100366C70;
  *(_QWORD *)(v4 + 1800) = &type metadata for UInt32;
  *(_DWORD *)(v4 + 1776) = v70;
  v34 = sub_10001EDC4(v4);
  memcpy(v71, (const void *)(v0 + 184), 0xEE8uLL);
  v35 = sub_10015B47C();
  return sub_100150B98(v35, v34, (uint64_t)sub_10015E2F8, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_10015E098);
}

uint64_t sub_10015D9BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if ((result & 1) == 0)
    return sub_100075040(0, *(_QWORD *)(v1 + 16) + 1, 1);
  return result;
}

void sub_10015DA04(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (!a1[2])
  {
    swift_bridgeObjectRelease(a1);
    return;
  }
  v44 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = (void *)a1[6];
  swift_bridgeObjectRetain(a1);
  v47 = v7;
  v48 = v6;
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain(v6);
  v10 = v8;
  v12 = sub_10000FA00(v7, v6);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1001482E4();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = v7;
    v22[1] = v6;
    *(_QWORD *)(v21[7] + 8 * v12) = v10;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v44 - 1;
    if (v44 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v27 = (void **)(a1 + 9);
    while (1)
    {
      v6 = (uint64_t)*(v27 - 1);
      v29 = *v27;
      v47 = (uint64_t)*(v27 - 2);
      v28 = v47;
      v48 = v6;
      v30 = (_QWORD *)*a3;
      swift_bridgeObjectRetain(v6);
      v10 = v29;
      v31 = sub_10000FA00(v47, v6);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v24 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v24)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_100143958(v35, 1);
        v31 = sub_10000FA00(v47, v6);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v6;
      *(_QWORD *)(v38[7] + 8 * v31) = v10;
      v40 = v38[2];
      v24 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v24)
        goto LABEL_24;
      v38[2] = v41;
      v27 += 3;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100143958(v15, a2 & 1);
  v17 = sub_10000FA00(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v19);
    v49 = v19;
    swift_errorRetain(v19);
    v20 = sub_100012C44((uint64_t *)&unk_10040C360);
    if ((swift_dynamicCast(v20, &v49, v20, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v6);

      swift_bridgeObjectRelease_n(a1, 2);
      swift_errorRelease(v49);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v45 = 0;
  v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x8000000100367430;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)(&v47, &v45, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v45, v46, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

uint64_t sub_10015DD90(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  char v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  void *v56;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100196F48();
  if (!v10)
    goto LABEL_23;
  v12 = v9;
  v13 = v10;
  v56 = v11;
  v14 = (_QWORD *)*a5;
  v16 = sub_10000FA00(v9, v10);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      v23 = (_QWORD *)*a5;
      if ((v15 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1001482E4();
      v23 = (_QWORD *)*a5;
      if ((v20 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v23[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v23[6] + 16 * v16);
    *v27 = v12;
    v27[1] = v13;
    *(_QWORD *)(v23[7] + 8 * v16) = v56;
    v28 = v23[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v23[2] = v30;
LABEL_13:
    sub_100196F48();
    if (v32)
    {
      v34 = v31;
      v35 = v32;
      v36 = v33;
      do
      {
        v43 = (_QWORD *)*a5;
        v44 = sub_10000FA00(v34, v35);
        v46 = v43[2];
        v47 = (v45 & 1) == 0;
        v29 = __OFADD__(v46, v47);
        v48 = v46 + v47;
        if (v29)
          goto LABEL_24;
        v49 = v45;
        if (v43[3] < v48)
        {
          sub_100143958(v48, 1);
          v44 = sub_10000FA00(v34, v35);
          if ((v49 & 1) != (v50 & 1))
            goto LABEL_26;
        }
        v51 = (_QWORD *)*a5;
        if ((v49 & 1) != 0)
        {
          v37 = 8 * v44;
          v38 = *(id *)(v51[7] + 8 * v44);
          swift_bridgeObjectRelease(v35);

          v39 = v51[7];
          *(_QWORD *)(v39 + v37) = v38;
        }
        else
        {
          v51[(v44 >> 6) + 8] |= 1 << v44;
          v52 = (uint64_t *)(v51[6] + 16 * v44);
          *v52 = v34;
          v52[1] = v35;
          *(_QWORD *)(v51[7] + 8 * v44) = v36;
          v53 = v51[2];
          v29 = __OFADD__(v53, 1);
          v54 = v53 + 1;
          if (v29)
            goto LABEL_25;
          v51[2] = v54;
        }
        sub_100196F48();
        v34 = v40;
        v35 = v41;
        v36 = v42;
      }
      while (v41);
    }
LABEL_23:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_100062B6C(a1);
    return swift_release(a3);
  }
  sub_100143958(v19, a4 & 1);
  v21 = sub_10000FA00(v12, v13);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    v23 = (_QWORD *)*a5;
    if ((v20 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v24 = 8 * v16;
    v25 = *(id *)(v23[7] + 8 * v16);
    swift_bridgeObjectRelease(v13);

    v26 = v23[7];
    *(_QWORD *)(v26 + v24) = v25;
    goto LABEL_13;
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10015E098(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  _QWORD v33[4];
  _OWORD v34[2];
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v8 = -1 << *(_BYTE *)(a1 + 32);
  v9 = ~v8;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = -v8;
  v38 = a1;
  v39 = a1 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v40 = v9;
  v41 = 0;
  v42 = v12 & v10;
  v43 = a2;
  v44 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_1001970D4(&v36);
  v13 = *((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
  {
LABEL_19:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_100062B6C(v38);
    return swift_release(v44);
  }
  while (1)
  {
    v16 = v36;
    sub_100033A2C(&v37, v35);
    v17 = *a5;
    v19 = sub_10000FA00(v16, v13);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (*(_QWORD *)(v17 + 24) >= v22)
    {
      if ((a4 & 1) != 0)
      {
        if ((v18 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_100146A48();
        if ((v23 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      sub_1001410B4(v22, a4 & 1);
      v24 = sub_10000FA00(v16, v13);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_22;
      v19 = v24;
      if ((v23 & 1) != 0)
      {
LABEL_6:
        v14 = 32 * v19;
        sub_100014450(*(_QWORD *)(*a5 + 56) + v14, (uint64_t)v33);
        sub_100014450((uint64_t)v33, (uint64_t)v34);
        sub_100014430(v33);
        sub_100014430(v35);
        swift_bridgeObjectRelease(v13);
        v15 = (_QWORD *)(*(_QWORD *)(*a5 + 56) + v14);
        sub_100014430(v15);
        sub_100033A2C(v34, v15);
        goto LABEL_7;
      }
    }
    v26 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v19 >> 6) + 64) |= 1 << v19;
    v27 = (uint64_t *)(v26[6] + 16 * v19);
    *v27 = v16;
    v27[1] = v13;
    sub_100033A2C(v35, (_OWORD *)(v26[7] + 32 * v19));
    v28 = v26[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_21;
    v26[2] = v30;
LABEL_7:
    sub_1001970D4(&v36);
    v13 = *((_QWORD *)&v36 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10015E2F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_100014450((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

BOOL _s7CoreP2P14AWDLStatisticsO17AirPlayStatisticsV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;

  result = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
    && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(unsigned __int16 *)(a1 + 32) == *(unsigned __int16 *)(a2 + 32)
    && *(unsigned __int16 *)(a1 + 34) == *(unsigned __int16 *)(a2 + 34)
    && *(unsigned __int16 *)(a1 + 36) == *(unsigned __int16 *)(a2 + 36)
    && *(unsigned __int16 *)(a1 + 38) == *(unsigned __int16 *)(a2 + 38)
    && *(unsigned __int16 *)(a1 + 40) == *(unsigned __int16 *)(a2 + 40)
    && *(unsigned __int8 *)(a1 + 42) == *(unsigned __int8 *)(a2 + 42)
    && *(unsigned __int8 *)(a1 + 43) == *(unsigned __int8 *)(a2 + 43)
    && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44)
    && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
    && *(unsigned __int8 *)(a1 + 52) == *(unsigned __int8 *)(a2 + 52)
    && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56)
    && *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60)
    && *(unsigned __int8 *)(a1 + 61) == *(unsigned __int8 *)(a2 + 61)
    && ((*(unsigned __int8 *)(a1 + 62) ^ *(unsigned __int8 *)(a2 + 62)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 63) ^ *(unsigned __int8 *)(a2 + 63)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 64) ^ *(unsigned __int8 *)(a2 + 64)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 65) ^ *(unsigned __int8 *)(a2 + 65)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 66) ^ *(unsigned __int8 *)(a2 + 66)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 67) ^ *(unsigned __int8 *)(a2 + 67)) & 1) == 0
    && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68)
    && *(unsigned __int8 *)(a1 + 69) == *(unsigned __int8 *)(a2 + 69)
    && *(unsigned __int8 *)(a1 + 70) == *(unsigned __int8 *)(a2 + 70)
    && *(unsigned __int8 *)(a1 + 71) == *(unsigned __int8 *)(a2 + 71)
    && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    v2 = *(_QWORD *)(a1 + 88);
    v4 = *(_QWORD *)(a1 + 96);
    v3 = *(_QWORD *)(a1 + 104);
    v5 = *(_QWORD *)(a2 + 88);
    v7 = *(_QWORD *)(a2 + 96);
    v6 = *(_QWORD *)(a2 + 104);
    if (sub_1000851D4(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80))
      && sub_1000851D4(v2, v5)
      && sub_1000851D4(v4, v7)
      && sub_1000851D4(v3, v6))
    {
      return 1;
    }
  }
  return result;
}

BOOL _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  char v23;
  _BOOL8 result;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1] == a2[1] && a1[2] == a2[2];
  if (!v2
    || *((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1)
    || *((_QWORD *)a1 + 2) != *((_QWORD *)a2 + 2)
    || *((_QWORD *)a1 + 3) != *((_QWORD *)a2 + 3))
  {
    return 0;
  }
  v3 = *((unsigned int *)a1 + 8) | ((unint64_t)*((unsigned __int16 *)a1 + 18) << 32);
  v4 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
  v5 = v4 & 0xFF00000000;
  if ((v3 & 0xFF00000000) != 0x300000000)
  {
    if (v5 != 0x300000000
      && *((_DWORD *)a1 + 8) == *((_DWORD *)a2 + 8)
      && ((0x801004u >> ((v3 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v4 >> 29) & 0xF8)) & 0xFFC))
    {
      v25 = v4 >> 40;
      switch(v3 >> 40)
      {
        case 2uLL:
          if ((_DWORD)v25 != 2)
            return 0;
          goto LABEL_12;
        case 3uLL:
          if ((_DWORD)v25 != 3)
            return 0;
          goto LABEL_12;
        case 4uLL:
          if ((_DWORD)v25 != 4)
            return 0;
          goto LABEL_12;
        case 5uLL:
          if ((_DWORD)v25 != 5)
            return 0;
          goto LABEL_12;
        case 6uLL:
          if ((_DWORD)v25 != 6)
            return 0;
          goto LABEL_12;
        default:
          if ((v25 - 2) < 5 || ((v3 & 0x10000000000) == 0) == ((v4 >> 40) & 1))
            return 0;
          goto LABEL_12;
      }
    }
    return 0;
  }
  if (v5 != 0x300000000)
    return 0;
LABEL_12:
  v6 = *((unsigned int *)a1 + 10) | ((unint64_t)*((unsigned __int16 *)a1 + 22) << 32);
  v7 = *((unsigned int *)a2 + 10) | ((unint64_t)*((unsigned __int16 *)a2 + 22) << 32);
  v8 = v7 & 0xFF00000000;
  if ((v6 & 0xFF00000000) != 0x300000000)
  {
    if (v8 != 0x300000000
      && *((_DWORD *)a1 + 10) == *((_DWORD *)a2 + 10)
      && ((0x801004u >> ((v6 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v7 >> 29) & 0xF8)) & 0xFFC))
    {
      v26 = v7 >> 40;
      switch(v6 >> 40)
      {
        case 2uLL:
          if ((_DWORD)v26 != 2)
            return 0;
          goto LABEL_14;
        case 3uLL:
          if ((_DWORD)v26 != 3)
            return 0;
          goto LABEL_14;
        case 4uLL:
          if ((_DWORD)v26 != 4)
            return 0;
          goto LABEL_14;
        case 5uLL:
          if ((_DWORD)v26 != 5)
            return 0;
          goto LABEL_14;
        case 6uLL:
          if ((_DWORD)v26 != 6)
            return 0;
          goto LABEL_14;
        default:
          if ((v26 - 2) < 5 || ((v6 & 0x10000000000) == 0) == ((v7 >> 40) & 1))
            return 0;
          goto LABEL_14;
      }
    }
    return 0;
  }
  if (v8 != 0x300000000)
    return 0;
LABEL_14:
  v9 = *((unsigned int *)a1 + 12) | ((unint64_t)*((unsigned __int16 *)a1 + 26) << 32);
  v10 = *((unsigned int *)a2 + 12) | ((unint64_t)*((unsigned __int16 *)a2 + 26) << 32);
  v11 = v10 & 0xFF00000000;
  if ((v9 & 0xFF00000000) != 0x300000000)
  {
    if (v11 != 0x300000000
      && *((_DWORD *)a1 + 12) == *((_DWORD *)a2 + 12)
      && ((0x801004u >> ((v9 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v10 >> 29) & 0xF8)) & 0xFFC))
    {
      v27 = v10 >> 40;
      switch(v9 >> 40)
      {
        case 2uLL:
          if ((_DWORD)v27 != 2)
            return 0;
          goto LABEL_16;
        case 3uLL:
          if ((_DWORD)v27 != 3)
            return 0;
          goto LABEL_16;
        case 4uLL:
          if ((_DWORD)v27 != 4)
            return 0;
          goto LABEL_16;
        case 5uLL:
          if ((_DWORD)v27 != 5)
            return 0;
          goto LABEL_16;
        case 6uLL:
          if ((_DWORD)v27 != 6)
            return 0;
          goto LABEL_16;
        default:
          if ((v27 - 2) < 5 || ((v9 & 0x10000000000) == 0) == ((v10 >> 40) & 1))
            return 0;
          goto LABEL_16;
      }
    }
    return 0;
  }
  if (v11 != 0x300000000)
    return 0;
LABEL_16:
  v12 = *((unsigned int *)a1 + 14) | ((unint64_t)*((unsigned __int16 *)a1 + 30) << 32);
  v13 = *((unsigned int *)a2 + 14) | ((unint64_t)*((unsigned __int16 *)a2 + 30) << 32);
  v14 = v13 & 0xFF00000000;
  if ((v12 & 0xFF00000000) != 0x300000000)
  {
    if (v14 != 0x300000000
      && *((_DWORD *)a1 + 14) == *((_DWORD *)a2 + 14)
      && ((0x801004u >> ((v12 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v13 >> 29) & 0xF8)) & 0xFFC))
    {
      v28 = v13 >> 40;
      switch(v12 >> 40)
      {
        case 2uLL:
          if ((_DWORD)v28 != 2)
            return 0;
          goto LABEL_18;
        case 3uLL:
          if ((_DWORD)v28 != 3)
            return 0;
          goto LABEL_18;
        case 4uLL:
          if ((_DWORD)v28 != 4)
            return 0;
          goto LABEL_18;
        case 5uLL:
          if ((_DWORD)v28 != 5)
            return 0;
          goto LABEL_18;
        case 6uLL:
          if ((_DWORD)v28 != 6)
            return 0;
          goto LABEL_18;
        default:
          if ((v28 - 2) < 5 || ((v12 & 0x10000000000) == 0) == ((v13 >> 40) & 1))
            return 0;
          goto LABEL_18;
      }
    }
    return 0;
  }
  if (v14 != 0x300000000)
    return 0;
LABEL_18:
  if (*((_QWORD *)a1 + 8) != *((_QWORD *)a2 + 8))
    return 0;
  if (*((_QWORD *)a1 + 9) != *((_QWORD *)a2 + 9))
    return 0;
  if (*((_QWORD *)a1 + 10) != *((_QWORD *)a2 + 10))
    return 0;
  if (*((_QWORD *)a1 + 11) != *((_QWORD *)a2 + 11))
    return 0;
  if (*((_QWORD *)a1 + 12) != *((_QWORD *)a2 + 12))
    return 0;
  if (*((_QWORD *)a1 + 13) != *((_QWORD *)a2 + 13))
    return 0;
  if (a1[112] != a2[112])
    return 0;
  v17 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  if ((static DispatchTimeInterval.== infix(_:_:)(&a1[v17[20]], &a2[v17[20]]) & 1) == 0
    || *(_QWORD *)&a1[v17[21]] != *(_QWORD *)&a2[v17[21]]
    || *(_QWORD *)&a1[v17[22]] != *(_QWORD *)&a2[v17[22]]
    || *(_QWORD *)&a1[v17[23]] != *(_QWORD *)&a2[v17[23]]
    || *(_QWORD *)&a1[v17[24]] != *(_QWORD *)&a2[v17[24]]
    || *(_QWORD *)&a1[v17[25]] != *(_QWORD *)&a2[v17[25]]
    || *(_QWORD *)&a1[v17[26]] != *(_QWORD *)&a2[v17[26]]
    || *(_QWORD *)&a1[v17[27]] != *(_QWORD *)&a2[v17[27]]
    || *(_QWORD *)&a1[v17[28]] != *(_QWORD *)&a2[v17[28]]
    || *(unsigned __int16 *)&a1[v17[29]] != *(unsigned __int16 *)&a2[v17[29]]
    || a1[v17[30]] != a2[v17[30]]
    || a1[v17[31]] != a2[v17[31]]
    || a1[v17[32]] != a2[v17[32]]
    || a1[v17[33]] != a2[v17[33]]
    || a1[v17[34]] != a2[v17[34]]
    || a1[v17[35]] != a2[v17[35]])
  {
    return 0;
  }
  v18 = v17[36];
  v19 = *(_QWORD *)&a1[v18];
  v20 = *(_QWORD *)&a1[v18 + 8];
  v21 = &a2[v18];
  v22 = *((_QWORD *)v21 + 1);
  if (v19 == *(_QWORD *)v21 && v20 == v22
    || (v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *(_QWORD *)v21, v22, 0),
        result = 0,
        (v23 & 1) != 0))
  {
    if (a1[v17[37]] == a2[v17[37]]
      && *(_QWORD *)&a1[v17[38]] == *(_QWORD *)&a2[v17[38]]
      && *(_QWORD *)&a1[v17[39]] == *(_QWORD *)&a2[v17[39]]
      && *(_QWORD *)&a1[v17[40]] == *(_QWORD *)&a2[v17[40]])
    {
      return *(_QWORD *)&a1[v17[41]] == *(_QWORD *)&a2[v17[41]];
    }
    return 0;
  }
  return result;
}

BOOL _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV6CountsV23__derived_struct_equalsySbAI_AItFZ_0(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0xD8uLL) == 0;
}

BOOL _s7CoreP2P14AWDLStatisticsO20LowLatencyStatisticsV7TrafficV10HistogramsV23__derived_struct_equalsySbAI_AItFZ_0(uint64_t *a1, uint64_t *a2)
{
  return sub_100089220(*a1, *a2)
      && sub_100089220(a1[1], a2[1])
      && sub_100089220(a1[2], a2[2])
      && sub_100089220(a1[3], a2[3])
      && sub_100089220(a1[4], a2[4])
      && sub_100089220(a1[5], a2[5])
      && sub_100089220(a1[6], a2[6])
      && sub_100089220(a1[7], a2[7])
      && sub_100089220(a1[8], a2[8])
      && sub_100089220(a1[9], a2[9])
      && sub_100089220(a1[10], a2[10])
      && sub_100089220(a1[11], a2[11])
      && sub_100089220(a1[12], a2[12])
      && sub_100089220(a1[13], a2[13])
      && sub_100089220(a1[14], a2[14])
      && sub_100089220(a1[15], a2[15])
      && sub_100089220(a1[16], a2[16])
      && sub_100089220(a1[17], a2[17]);
}

uint64_t _s7CoreP2P14AWDLStatisticsO7FailureV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v9 = v8;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v12 = v10;
  if (v7 == v11 && v9 == v10)
  {
    swift_bridgeObjectRelease_n(v9, 2);
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v11, v10, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v12);
    v14 = 0;
    if ((v13 & 1) == 0)
      return v14 & 1;
  }
  v15 = 0xEC0000006F727465;
  v16 = 0x526E496B63757473;
  if (!a2)
  {
    v17 = 0x526E496B63757473;
    v18 = 0xEC0000006F727465;
    v19 = a4;
    if (!a4)
      goto LABEL_19;
    goto LABEL_13;
  }
  if (a2 == 1)
    v17 = 0x536E496B63757473;
  else
    v17 = 0xD000000000000014;
  if (a2 == 1)
    v18 = 0xEB000000006E6163;
  else
    v18 = 0x8000000100361CF0;
  v19 = a4;
  if (a4)
  {
LABEL_13:
    if (v19 == 1)
      v16 = 0x536E496B63757473;
    else
      v16 = 0xD000000000000014;
    if (v19 == 1)
      v15 = 0xEB000000006E6163;
    else
      v15 = 0x8000000100361CF0;
  }
LABEL_19:
  if (v17 == v16 && v18 == v15)
  {
    v14 = 1;
    v15 = v18;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v16, v15, 0);
  }
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v15);
  return v14 & 1;
}

uint64_t type metadata accessor for AWDLStatistics.TrafficRegistrationStop(uint64_t a1)
{
  return sub_10000D69C(a1, qword_100409138, (uint64_t)&nominal type descriptor for AWDLStatistics.TrafficRegistrationStop);
}

uint64_t sub_10015EFA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1003D52C0, a1, a2, &unk_100404258);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1E)
    return 30;
  else
    return v3;
}

uint64_t sub_10015EFF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1003D55B0, a1, a2, &unk_100404268);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x41)
    return 65;
  else
    return v3;
}

unint64_t sub_10015F048(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D5C50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

unint64_t sub_10015F090(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

uint64_t type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1)
{
  return sub_10000D69C(a1, qword_100409260, (uint64_t)&nominal type descriptor for AWDLStatistics.LowLatencyStatistics.Configuration);
}

uint64_t *sub_10015F0E8(uint64_t *a1, uint64_t *a2)
{
  initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(a2, a1);
  return a2;
}

_QWORD *sub_10015F11C(_OWORD *a1, _QWORD *a2)
{
  assignWithTake for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(a2, a1);
  return a2;
}

uint64_t sub_10015F150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015F194(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015F1D8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic(a2, a1);
  return a2;
}

uint64_t sub_10015F20C(uint64_t a1, uint64_t a2)
{
  assignWithTake for AWDLStatistics.LowLatencyStatistics.Traffic(a2, a1);
  return a2;
}

unint64_t sub_10015F240()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100406740;
  if (!qword_100406740)
  {
    v1 = sub_100013C64(&qword_100406738);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100406740);
  }
  return result;
}

uint64_t sub_10015F28C(uint64_t result, char a2)
{
  if (*(_QWORD *)(result + 16))
  {
    swift_bridgeObjectRetain(result);
    __asm { BR              X8 }
  }
  return result;
}

unint64_t sub_10015F594(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t result;
  double *i;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  _BYTE v49[176];
  _QWORD *v50;

  if (!a1)
    return (unint64_t)_swiftEmptyArrayStorage;
  v3 = a2 - a1;
  v4 = _swiftEmptyArrayStorage;
  if ((unint64_t)(a2 - a1 + 23) < 0x2F)
    return (unint64_t)v4;
  v5 = v3 / 24;
  v50 = _swiftEmptyArrayStorage;
  result = sub_10007515C(0, (v3 / 24) & ~((v3 / 24) >> 63), 0);
  if (v3 >= -23)
  {
    sub_100012C44((uint64_t *)&unk_100410330);
    for (i = (double *)(a1 + 16); ; i += 3)
    {
      v8 = *(i - 2);
      v9 = *(i - 1);
      v10 = *i;
      v11 = sub_100012C44(qword_100405C70);
      inited = swift_initStackObject(v11, v49);
      v13 = inited;
      *(_OWORD *)(inited + 16) = xmmword_10033A120;
      *(_QWORD *)(inited + 32) = 0xD00000000000001ELL;
      v14 = inited + 32;
      *(_QWORD *)(inited + 40) = 0x8000000100367250;
      if (v8 <= -0.1)
        v15 = v8;
      else
        v15 = -0.1;
      if (v8 > 0.1)
        v16 = v8;
      else
        v16 = 0.1;
      if (v8 >= 0.0)
        v15 = v16;
      *(_QWORD *)(inited + 72) = &type metadata for Double;
      *(double *)(inited + 48) = v15;
      *(_QWORD *)(inited + 80) = 0xD00000000000001CLL;
      v17 = inited + 80;
      *(_QWORD *)(inited + 88) = 0x8000000100367270;
      if (v9 <= -0.1)
        v18 = v9;
      else
        v18 = -0.1;
      if (v9 > 0.1)
        v19 = v9;
      else
        v19 = 0.1;
      if (v9 >= 0.0)
        v18 = v19;
      *(_QWORD *)(inited + 120) = &type metadata for Double;
      *(double *)(inited + 96) = v18;
      *(_QWORD *)(inited + 128) = 0xD00000000000001ELL;
      v20 = inited + 128;
      *(_QWORD *)(inited + 136) = 0x8000000100367290;
      if (v10 <= -0.1)
        v21 = v10;
      else
        v21 = -0.1;
      if (v10 > 0.1)
        v22 = v10;
      else
        v22 = 0.1;
      if (v10 >= 0.0)
        v21 = v22;
      *(_QWORD *)(inited + 168) = &type metadata for Double;
      *(double *)(inited + 144) = v21;
      v23 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(3);
      swift_retain();
      sub_10015F988(v14, (uint64_t)&v46);
      v24 = v46;
      v25 = v47;
      result = sub_10000FA00(v46, v47);
      if ((v26 & 1) != 0)
        break;
      v27 = v23 + 8;
      *(_QWORD *)((char *)v23 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v28 = (uint64_t *)(v23[6] + 16 * result);
      *v28 = v24;
      v28[1] = v25;
      result = (unint64_t)sub_100033A2C(v48, (_OWORD *)(v23[7] + 32 * result));
      v29 = v23[2];
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (v30)
        goto LABEL_44;
      v23[2] = v31;
      sub_10015F988(v17, (uint64_t)&v46);
      v32 = v46;
      v33 = v47;
      result = sub_10000FA00(v46, v47);
      if ((v34 & 1) != 0)
        break;
      *(_QWORD *)((char *)v27 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v35 = (uint64_t *)(v23[6] + 16 * result);
      *v35 = v32;
      v35[1] = v33;
      result = (unint64_t)sub_100033A2C(v48, (_OWORD *)(v23[7] + 32 * result));
      v36 = v23[2];
      v30 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v30)
        goto LABEL_44;
      v23[2] = v37;
      sub_10015F988(v20, (uint64_t)&v46);
      v38 = v46;
      v39 = v47;
      result = sub_10000FA00(v46, v47);
      if ((v40 & 1) != 0)
        break;
      *(_QWORD *)((char *)v27 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v41 = (uint64_t *)(v23[6] + 16 * result);
      *v41 = v38;
      v41[1] = v39;
      result = (unint64_t)sub_100033A2C(v48, (_OWORD *)(v23[7] + 32 * result));
      v42 = v23[2];
      v30 = __OFADD__(v42, 1);
      v43 = v42 + 1;
      if (v30)
        goto LABEL_44;
      v23[2] = v43;
      swift_release(v23);
      swift_bridgeObjectRelease(v13);
      v4 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
      {
        sub_10007515C(0, v4[2] + 1, 1);
        v4 = v50;
      }
      v45 = v4[2];
      v44 = v4[3];
      if (v45 >= v44 >> 1)
      {
        sub_10007515C(v44 > 1, v45 + 1, 1);
        v4 = v50;
      }
      v4[2] = v45 + 1;
      v4[v45 + 4] = v23;
      if (!--v5)
        return (unint64_t)v4;
    }
    __break(1u);
LABEL_44:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10015F988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44(&qword_100404EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10015F9D0(char *a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t inited;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[176];
  _QWORD *v43;

  if (!a1)
    return (unint64_t)_swiftEmptyArrayStorage;
  v2 = a1;
  v3 = a2 - (_QWORD)a1;
  if (a2 - (uint64_t)a1 >= 0)
    v4 = a2 - (_QWORD)a1;
  else
    v4 = a2 - (_QWORD)a1 + 7;
  v5 = _swiftEmptyArrayStorage;
  if ((unint64_t)(a2 - (_QWORD)a1 + 7) < 0xF)
    return (unint64_t)v5;
  v6 = v4 >> 3;
  v43 = _swiftEmptyArrayStorage;
  result = sub_10007515C(0, (v4 >> 3) & ~(v4 >> 63), 0);
  if (v3 >= -7)
  {
    sub_100012C44((uint64_t *)&unk_100410330);
    v8 = &v41;
    while (1)
    {
      v38 = v6;
      v9 = v8;
      v10 = *v2;
      v11 = v2[1];
      v12 = *((_DWORD *)v2 + 1);
      v13 = sub_100012C44(qword_100405C70);
      inited = swift_initStackObject(v13, v42);
      *(_OWORD *)(inited + 16) = xmmword_10033A120;
      *(_QWORD *)(inited + 32) = 0xD00000000000001ELL;
      *(_QWORD *)(inited + 40) = 0x8000000100367250;
      *(_QWORD *)(inited + 72) = &type metadata for Int8;
      *(_BYTE *)(inited + 48) = v10;
      *(_QWORD *)(inited + 80) = 0xD00000000000001CLL;
      *(_QWORD *)(inited + 88) = 0x8000000100367270;
      *(_QWORD *)(inited + 120) = &type metadata for Int8;
      *(_BYTE *)(inited + 96) = v11;
      *(_QWORD *)(inited + 128) = 0xD00000000000001ELL;
      *(_QWORD *)(inited + 136) = 0x8000000100367290;
      *(_QWORD *)(inited + 168) = &type metadata for UInt32;
      *(_DWORD *)(inited + 144) = v12;
      v15 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(3);
      sub_10015F988(inited + 32, (uint64_t)&v39);
      v17 = v39;
      v16 = v40;
      swift_retain();
      result = sub_10000FA00(v17, v16);
      if ((v18 & 1) != 0)
        break;
      v19 = v15 + 8;
      *(_QWORD *)((char *)v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v20 = (uint64_t *)(v15[6] + 16 * result);
      *v20 = v17;
      v20[1] = v16;
      v8 = v9;
      result = (unint64_t)sub_100033A2C(v9, (_OWORD *)(v15[7] + 32 * result));
      v21 = v15[2];
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        goto LABEL_23;
      v15[2] = v23;
      sub_10015F988(inited + 80, (uint64_t)&v39);
      v24 = v39;
      v25 = v40;
      result = sub_10000FA00(v39, v40);
      if ((v26 & 1) != 0)
        goto LABEL_24;
      *(_QWORD *)((char *)v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v27 = (uint64_t *)(v15[6] + 16 * result);
      *v27 = v24;
      v27[1] = v25;
      result = (unint64_t)sub_100033A2C(v9, (_OWORD *)(v15[7] + 32 * result));
      v28 = v15[2];
      v22 = __OFADD__(v28, 1);
      v29 = v28 + 1;
      if (v22)
        goto LABEL_25;
      v15[2] = v29;
      sub_10015F988(inited + 128, (uint64_t)&v39);
      v30 = v39;
      v31 = v40;
      result = sub_10000FA00(v39, v40);
      if ((v32 & 1) != 0)
        goto LABEL_26;
      *(_QWORD *)((char *)v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v33 = (uint64_t *)(v15[6] + 16 * result);
      *v33 = v30;
      v33[1] = v31;
      result = (unint64_t)sub_100033A2C(v9, (_OWORD *)(v15[7] + 32 * result));
      v34 = v15[2];
      v22 = __OFADD__(v34, 1);
      v35 = v34 + 1;
      if (v22)
        goto LABEL_27;
      v15[2] = v35;
      swift_release(v15);
      swift_bridgeObjectRelease(inited);
      v5 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_10007515C(0, v5[2] + 1, 1);
        v5 = v43;
      }
      v37 = v5[2];
      v36 = v5[3];
      if (v37 >= v36 >> 1)
      {
        sub_10007515C(v36 > 1, v37 + 1, 1);
        v5 = v43;
      }
      v2 += 8;
      v5[2] = v37 + 1;
      v5[v37 + 4] = v15;
      v6 = v38 - 1;
      if (v38 == 1)
        return (unint64_t)v5;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_10015FD74()
{
  unint64_t result;

  result = qword_100409098;
  if (!qword_100409098)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLStatistics.Failure.Reason, &type metadata for AWDLStatistics.Failure.Reason);
    atomic_store(result, (unint64_t *)&qword_100409098);
  }
  return result;
}

unint64_t sub_10015FDBC()
{
  unint64_t result;

  result = qword_1004090A0;
  if (!qword_1004090A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLStatistics.Failure, &type metadata for AWDLStatistics.Failure);
    atomic_store(result, (unint64_t *)&qword_1004090A0);
  }
  return result;
}

uint64_t sub_10015FE00()
{
  return sub_100011DE4(&qword_1004090A8, type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration, (uint64_t)&protocol conformance descriptor for AWDLStatistics.LowLatencyStatistics.Configuration);
}

unint64_t sub_10015FE30()
{
  unint64_t result;

  result = qword_1004090B0;
  if (!qword_1004090B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLStatistics.LowLatencyStatistics.Traffic.Counts, &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic.Counts);
    atomic_store(result, (unint64_t *)&qword_1004090B0);
  }
  return result;
}

unint64_t sub_10015FE78()
{
  unint64_t result;

  result = qword_1004090B8;
  if (!qword_1004090B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms, &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms);
    atomic_store(result, (unint64_t *)&qword_1004090B8);
  }
  return result;
}

unint64_t sub_10015FEC0()
{
  unint64_t result;

  result = qword_1004090C0;
  if (!qword_1004090C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLStatistics.LowLatencyStatistics.Traffic, &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic);
    atomic_store(result, (unint64_t *)&qword_1004090C0);
  }
  return result;
}

uint64_t sub_10015FF04()
{
  return sub_100011DE4(&qword_1004090C8, type metadata accessor for AWDLStatistics.LowLatencyStatistics, (uint64_t)&protocol conformance descriptor for AWDLStatistics.LowLatencyStatistics);
}

unint64_t sub_10015FF34()
{
  unint64_t result;

  result = qword_1004090D0;
  if (!qword_1004090D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLStatistics.AirPlayStatistics.Histograms, &type metadata for AWDLStatistics.AirPlayStatistics.Histograms);
    atomic_store(result, (unint64_t *)&qword_1004090D0);
  }
  return result;
}

unint64_t sub_10015FF7C()
{
  unint64_t result;

  result = qword_1004090D8;
  if (!qword_1004090D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLStatistics.AirPlayStatistics, &type metadata for AWDLStatistics.AirPlayStatistics);
    atomic_store(result, (unint64_t *)&qword_1004090D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics()
{
  return &type metadata for AWDLStatistics;
}

_QWORD *initializeBufferWithCopyOfBuffer for AWDLStatistics.ServiceRejection(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for AWDLStatistics.ServiceRejection(id *a1)
{

}

uint64_t assignWithCopy for AWDLStatistics.ServiceRejection(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for AWDLStatistics.ServiceRejection(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for AWDLStatistics.ServiceRejection()
{
  return &type metadata for AWDLStatistics.ServiceRejection;
}

uint64_t initializeWithCopy for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 22) = *(_DWORD *)(a2 + 22);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  int v7;
  int v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  v8 = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AWDLStatistics.TrafficRegistrationStart(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStart(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStart(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.TrafficRegistrationStart()
{
  return &type metadata for AWDLStatistics.TrafficRegistrationStart;
}

char *initializeBufferWithCopyOfBuffer for AWDLStatistics.TrafficRegistrationStop(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char *v11;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    a1[8] = *((_BYTE *)a2 + 8);
    v6 = *(int *)(a3 + 24);
    v7 = &a1[v6];
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for DispatchTimeInterval(0);
    v10 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v11 = v4;
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for AWDLStatistics.TrafficRegistrationStop(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for DispatchTimeInterval(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016056C);
}

uint64_t sub_10016056C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DispatchTimeInterval(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001605F4);
}

char *sub_1001605F4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DispatchTimeInterval(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100160668(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = &unk_10034AA80;
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.Failure()
{
  return &type metadata for AWDLStatistics.Failure;
}

ValueMetadata *type metadata accessor for AWDLStatistics.Failure.Reason()
{
  return &type metadata for AWDLStatistics.Failure.Reason;
}

_QWORD *initializeBufferWithCopyOfBuffer for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  int v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_WORD *)(a1 + 36) = *((_WORD *)a2 + 18);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
    *(_WORD *)(a1 + 44) = *((_WORD *)a2 + 22);
    v7 = *((_DWORD *)a2 + 12);
    *(_WORD *)(a1 + 52) = *((_WORD *)a2 + 26);
    *(_DWORD *)(a1 + 48) = v7;
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
    v8 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    v9 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
    v10 = v9[20];
    v11 = (char *)v4 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for DispatchTimeInterval(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    *(_QWORD *)((char *)v4 + v9[21]) = *(uint64_t *)((char *)a2 + v9[21]);
    *(_QWORD *)((char *)v4 + v9[22]) = *(uint64_t *)((char *)a2 + v9[22]);
    *(_QWORD *)((char *)v4 + v9[23]) = *(uint64_t *)((char *)a2 + v9[23]);
    *(_QWORD *)((char *)v4 + v9[24]) = *(uint64_t *)((char *)a2 + v9[24]);
    *(_QWORD *)((char *)v4 + v9[25]) = *(uint64_t *)((char *)a2 + v9[25]);
    *(_QWORD *)((char *)v4 + v9[26]) = *(uint64_t *)((char *)a2 + v9[26]);
    *(_QWORD *)((char *)v4 + v9[27]) = *(uint64_t *)((char *)a2 + v9[27]);
    *(_QWORD *)((char *)v4 + v9[28]) = *(uint64_t *)((char *)a2 + v9[28]);
    *(_WORD *)((char *)v4 + v9[29]) = *(_WORD *)((char *)a2 + v9[29]);
    *((_BYTE *)v4 + v9[30]) = *((_BYTE *)a2 + v9[30]);
    *((_BYTE *)v4 + v9[31]) = *((_BYTE *)a2 + v9[31]);
    *((_BYTE *)v4 + v9[32]) = *((_BYTE *)a2 + v9[32]);
    *((_BYTE *)v4 + v9[33]) = *((_BYTE *)a2 + v9[33]);
    *((_BYTE *)v4 + v9[34]) = *((_BYTE *)a2 + v9[34]);
    *((_BYTE *)v4 + v9[35]) = *((_BYTE *)a2 + v9[35]);
    v14 = v9[36];
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *((_BYTE *)v4 + v9[37]) = *((_BYTE *)a2 + v9[37]);
    *(_QWORD *)((char *)v4 + v9[38]) = *(uint64_t *)((char *)a2 + v9[38]);
    *(_QWORD *)((char *)v4 + v9[39]) = *(uint64_t *)((char *)a2 + v9[39]);
    *(_QWORD *)((char *)v4 + v9[40]) = *(uint64_t *)((char *)a2 + v9[40]);
    *(_QWORD *)((char *)v4 + v9[41]) = *(uint64_t *)((char *)a2 + v9[41]);
    v18 = *(int *)(a3 + 20);
    v19 = (char *)v4 + v18;
    v20 = (uint64_t)a2 + v18;
    v21 = *(_OWORD *)(v20 + 176);
    *((_OWORD *)v19 + 10) = *(_OWORD *)(v20 + 160);
    *((_OWORD *)v19 + 11) = v21;
    *((_OWORD *)v19 + 12) = *(_OWORD *)(v20 + 192);
    v22 = *(_OWORD *)(v20 + 112);
    *((_OWORD *)v19 + 6) = *(_OWORD *)(v20 + 96);
    *((_OWORD *)v19 + 7) = v22;
    v23 = *(_OWORD *)(v20 + 144);
    *((_OWORD *)v19 + 8) = *(_OWORD *)(v20 + 128);
    *((_OWORD *)v19 + 9) = v23;
    v24 = *(_OWORD *)(v20 + 48);
    *((_OWORD *)v19 + 2) = *(_OWORD *)(v20 + 32);
    *((_OWORD *)v19 + 3) = v24;
    v25 = *(_OWORD *)(v20 + 80);
    *((_OWORD *)v19 + 4) = *(_OWORD *)(v20 + 64);
    *((_OWORD *)v19 + 5) = v25;
    v26 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *((_OWORD *)v19 + 1) = v26;
    v27 = *(_QWORD *)(v20 + 216);
    *((_QWORD *)v19 + 26) = *(_QWORD *)(v20 + 208);
    *((_QWORD *)v19 + 27) = v27;
    v28 = *(_QWORD *)(v20 + 224);
    v29 = *(_QWORD *)(v20 + 232);
    *((_QWORD *)v19 + 28) = v28;
    *((_QWORD *)v19 + 29) = v29;
    v30 = *(_QWORD *)(v20 + 240);
    v31 = *(_QWORD *)(v20 + 248);
    *((_QWORD *)v19 + 30) = v30;
    *((_QWORD *)v19 + 31) = v31;
    v32 = *(_QWORD *)(v20 + 256);
    v33 = *(_QWORD *)(v20 + 264);
    *((_QWORD *)v19 + 32) = v32;
    *((_QWORD *)v19 + 33) = v33;
    v34 = *(_QWORD *)(v20 + 272);
    v35 = *(_QWORD *)(v20 + 280);
    *((_QWORD *)v19 + 34) = v34;
    *((_QWORD *)v19 + 35) = v35;
    v38 = *(_QWORD *)(v20 + 288);
    v39 = *(_QWORD *)(v20 + 296);
    *((_QWORD *)v19 + 36) = v38;
    *((_QWORD *)v19 + 37) = v39;
    v40 = *(_QWORD *)(v20 + 304);
    v41 = *(_QWORD *)(v20 + 312);
    *((_QWORD *)v19 + 38) = v40;
    *((_QWORD *)v19 + 39) = v41;
    v42 = *(_QWORD *)(v20 + 320);
    v43 = *(_QWORD *)(v20 + 328);
    *((_QWORD *)v19 + 40) = v42;
    *((_QWORD *)v19 + 41) = v43;
    v44 = *(_QWORD *)(v20 + 336);
    v45 = *(_QWORD *)(v20 + 344);
    *((_QWORD *)v19 + 42) = v44;
    *((_QWORD *)v19 + 43) = v45;
    v46 = *(_QWORD *)(v20 + 352);
    *((_QWORD *)v19 + 44) = v46;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
  }
  return v4;
}

double destroy for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double result;

  v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  v5 = a1 + *(int *)(v4 + 80);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v4 + 144) + 8));
  v7 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v7[27]);
  swift_bridgeObjectRelease(v7[28]);
  swift_bridgeObjectRelease(v7[29]);
  swift_bridgeObjectRelease(v7[30]);
  swift_bridgeObjectRelease(v7[31]);
  swift_bridgeObjectRelease(v7[32]);
  swift_bridgeObjectRelease(v7[33]);
  swift_bridgeObjectRelease(v7[34]);
  swift_bridgeObjectRelease(v7[35]);
  swift_bridgeObjectRelease(v7[36]);
  swift_bridgeObjectRelease(v7[37]);
  swift_bridgeObjectRelease(v7[38]);
  swift_bridgeObjectRelease(v7[39]);
  swift_bridgeObjectRelease(v7[40]);
  swift_bridgeObjectRelease(v7[41]);
  swift_bridgeObjectRelease(v7[42]);
  swift_bridgeObjectRelease(v7[43]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7[44]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v8 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  v9 = v8[20];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  *(_QWORD *)(a1 + v8[21]) = *(_QWORD *)(a2 + v8[21]);
  *(_QWORD *)(a1 + v8[22]) = *(_QWORD *)(a2 + v8[22]);
  *(_QWORD *)(a1 + v8[23]) = *(_QWORD *)(a2 + v8[23]);
  *(_QWORD *)(a1 + v8[24]) = *(_QWORD *)(a2 + v8[24]);
  *(_QWORD *)(a1 + v8[25]) = *(_QWORD *)(a2 + v8[25]);
  *(_QWORD *)(a1 + v8[26]) = *(_QWORD *)(a2 + v8[26]);
  *(_QWORD *)(a1 + v8[27]) = *(_QWORD *)(a2 + v8[27]);
  *(_QWORD *)(a1 + v8[28]) = *(_QWORD *)(a2 + v8[28]);
  *(_WORD *)(a1 + v8[29]) = *(_WORD *)(a2 + v8[29]);
  *(_BYTE *)(a1 + v8[30]) = *(_BYTE *)(a2 + v8[30]);
  *(_BYTE *)(a1 + v8[31]) = *(_BYTE *)(a2 + v8[31]);
  *(_BYTE *)(a1 + v8[32]) = *(_BYTE *)(a2 + v8[32]);
  *(_BYTE *)(a1 + v8[33]) = *(_BYTE *)(a2 + v8[33]);
  *(_BYTE *)(a1 + v8[34]) = *(_BYTE *)(a2 + v8[34]);
  *(_BYTE *)(a1 + v8[35]) = *(_BYTE *)(a2 + v8[35]);
  v13 = v8[36];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_BYTE *)(a1 + v8[37]) = *(_BYTE *)(a2 + v8[37]);
  *(_QWORD *)(a1 + v8[38]) = *(_QWORD *)(a2 + v8[38]);
  *(_QWORD *)(a1 + v8[39]) = *(_QWORD *)(a2 + v8[39]);
  *(_QWORD *)(a1 + v8[40]) = *(_QWORD *)(a2 + v8[40]);
  *(_QWORD *)(a1 + v8[41]) = *(_QWORD *)(a2 + v8[41]);
  v17 = *(int *)(a3 + 20);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_OWORD *)(v19 + 176);
  *(_OWORD *)(v18 + 160) = *(_OWORD *)(v19 + 160);
  *(_OWORD *)(v18 + 176) = v20;
  *(_OWORD *)(v18 + 192) = *(_OWORD *)(v19 + 192);
  v21 = *(_OWORD *)(v19 + 112);
  *(_OWORD *)(v18 + 96) = *(_OWORD *)(v19 + 96);
  *(_OWORD *)(v18 + 112) = v21;
  v22 = *(_OWORD *)(v19 + 144);
  *(_OWORD *)(v18 + 128) = *(_OWORD *)(v19 + 128);
  *(_OWORD *)(v18 + 144) = v22;
  v23 = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v18 + 48) = v23;
  v24 = *(_OWORD *)(v19 + 80);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(v19 + 64);
  *(_OWORD *)(v18 + 80) = v24;
  v25 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v25;
  v26 = *(_QWORD *)(v19 + 216);
  *(_QWORD *)(v18 + 208) = *(_QWORD *)(v19 + 208);
  *(_QWORD *)(v18 + 216) = v26;
  v27 = *(_QWORD *)(v19 + 224);
  v28 = *(_QWORD *)(v19 + 232);
  *(_QWORD *)(v18 + 224) = v27;
  *(_QWORD *)(v18 + 232) = v28;
  v29 = *(_QWORD *)(v19 + 240);
  v30 = *(_QWORD *)(v19 + 248);
  *(_QWORD *)(v18 + 240) = v29;
  *(_QWORD *)(v18 + 248) = v30;
  v31 = *(_QWORD *)(v19 + 256);
  v32 = *(_QWORD *)(v19 + 264);
  *(_QWORD *)(v18 + 256) = v31;
  *(_QWORD *)(v18 + 264) = v32;
  v33 = *(_QWORD *)(v19 + 272);
  v34 = *(_QWORD *)(v19 + 280);
  *(_QWORD *)(v18 + 272) = v33;
  *(_QWORD *)(v18 + 280) = v34;
  v36 = *(_QWORD *)(v19 + 288);
  v37 = *(_QWORD *)(v19 + 296);
  *(_QWORD *)(v18 + 288) = v36;
  *(_QWORD *)(v18 + 296) = v37;
  v38 = *(_QWORD *)(v19 + 304);
  v39 = *(_QWORD *)(v19 + 312);
  *(_QWORD *)(v18 + 304) = v38;
  *(_QWORD *)(v18 + 312) = v39;
  v40 = *(_QWORD *)(v19 + 320);
  v41 = *(_QWORD *)(v19 + 328);
  *(_QWORD *)(v18 + 320) = v40;
  *(_QWORD *)(v18 + 328) = v41;
  v42 = *(_QWORD *)(v19 + 336);
  v43 = *(_QWORD *)(v19 + 344);
  *(_QWORD *)(v18 + 336) = v42;
  *(_QWORD *)(v18 + 344) = v43;
  v44 = *(_QWORD *)(v19 + 352);
  *(_QWORD *)(v18 + 352) = v44;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v44);
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v6;
  v7 = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v8;
  v9 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v10 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  v11 = v10[20];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_QWORD *)(a1 + v10[21]) = *(_QWORD *)(a2 + v10[21]);
  *(_QWORD *)(a1 + v10[22]) = *(_QWORD *)(a2 + v10[22]);
  *(_QWORD *)(a1 + v10[23]) = *(_QWORD *)(a2 + v10[23]);
  *(_QWORD *)(a1 + v10[24]) = *(_QWORD *)(a2 + v10[24]);
  *(_QWORD *)(a1 + v10[25]) = *(_QWORD *)(a2 + v10[25]);
  *(_QWORD *)(a1 + v10[26]) = *(_QWORD *)(a2 + v10[26]);
  *(_QWORD *)(a1 + v10[27]) = *(_QWORD *)(a2 + v10[27]);
  *(_QWORD *)(a1 + v10[28]) = *(_QWORD *)(a2 + v10[28]);
  *(_WORD *)(a1 + v10[29]) = *(_WORD *)(a2 + v10[29]);
  *(_BYTE *)(a1 + v10[30]) = *(_BYTE *)(a2 + v10[30]);
  *(_BYTE *)(a1 + v10[31]) = *(_BYTE *)(a2 + v10[31]);
  *(_BYTE *)(a1 + v10[32]) = *(_BYTE *)(a2 + v10[32]);
  *(_BYTE *)(a1 + v10[33]) = *(_BYTE *)(a2 + v10[33]);
  *(_BYTE *)(a1 + v10[34]) = *(_BYTE *)(a2 + v10[34]);
  *(_BYTE *)(a1 + v10[35]) = *(_BYTE *)(a2 + v10[35]);
  v15 = v10[36];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + v10[37]) = *(_BYTE *)(a2 + v10[37]);
  *(_QWORD *)(a1 + v10[38]) = *(_QWORD *)(a2 + v10[38]);
  *(_QWORD *)(a1 + v10[39]) = *(_QWORD *)(a2 + v10[39]);
  *(_QWORD *)(a1 + v10[40]) = *(_QWORD *)(a2 + v10[40]);
  *(_QWORD *)(a1 + v10[41]) = *(_QWORD *)(a2 + v10[41]);
  v20 = *(int *)(a3 + 20);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *(_QWORD *)(a2 + v20);
  v21[1] = *(_QWORD *)(a2 + v20 + 8);
  v21[2] = *(_QWORD *)(a2 + v20 + 16);
  v21[3] = *(_QWORD *)(a2 + v20 + 24);
  v21[4] = *(_QWORD *)(a2 + v20 + 32);
  v21[5] = *(_QWORD *)(a2 + v20 + 40);
  v21[6] = *(_QWORD *)(a2 + v20 + 48);
  v21[7] = *(_QWORD *)(a2 + v20 + 56);
  v21[8] = *(_QWORD *)(a2 + v20 + 64);
  v21[9] = *(_QWORD *)(a2 + v20 + 72);
  v21[10] = *(_QWORD *)(a2 + v20 + 80);
  v21[11] = *(_QWORD *)(a2 + v20 + 88);
  v21[12] = *(_QWORD *)(a2 + v20 + 96);
  v21[13] = *(_QWORD *)(a2 + v20 + 104);
  v21[14] = *(_QWORD *)(a2 + v20 + 112);
  v21[15] = *(_QWORD *)(a2 + v20 + 120);
  v21[16] = *(_QWORD *)(a2 + v20 + 128);
  v21[17] = *(_QWORD *)(a2 + v20 + 136);
  v21[18] = *(_QWORD *)(a2 + v20 + 144);
  v21[19] = *(_QWORD *)(a2 + v20 + 152);
  v21[20] = *(_QWORD *)(a2 + v20 + 160);
  v21[21] = *(_QWORD *)(a2 + v20 + 168);
  v21[22] = *(_QWORD *)(a2 + v20 + 176);
  v21[23] = *(_QWORD *)(a2 + v20 + 184);
  v21[24] = *(_QWORD *)(a2 + v20 + 192);
  v21[25] = *(_QWORD *)(a2 + v20 + 200);
  v21[26] = *(_QWORD *)(a2 + v20 + 208);
  v23 = *(_QWORD *)(a2 + v20 + 216);
  v24 = *(_QWORD *)(a1 + v20 + 216);
  v21[27] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = v22[28];
  v26 = v21[28];
  v21[28] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = v22[29];
  v28 = v21[29];
  v21[29] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = v22[30];
  v30 = v21[30];
  v21[30] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = v22[31];
  v32 = v21[31];
  v21[31] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v22[32];
  v34 = v21[32];
  v21[32] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = v22[33];
  v36 = v21[33];
  v21[33] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = v22[34];
  v38 = v21[34];
  v21[34] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = v22[35];
  v40 = v21[35];
  v21[35] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v22[36];
  v42 = v21[36];
  v21[36] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  v43 = v22[37];
  v44 = v21[37];
  v21[37] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v45 = v22[38];
  v46 = v21[38];
  v21[38] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v22[39];
  v48 = v21[39];
  v21[39] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  v49 = v22[40];
  v50 = v21[40];
  v21[40] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v51 = v22[41];
  v52 = v21[41];
  v21[41] = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  v53 = v22[42];
  v54 = v21[42];
  v21[42] = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  v55 = v22[43];
  v56 = v21[43];
  v21[43] = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  v57 = v22[44];
  v58 = v21[44];
  v21[44] = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  return a1;
}

uint64_t initializeWithTake for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v8 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  v9 = v8[20];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_QWORD *)(a1 + v8[21]) = *(_QWORD *)(a2 + v8[21]);
  *(_QWORD *)(a1 + v8[22]) = *(_QWORD *)(a2 + v8[22]);
  *(_QWORD *)(a1 + v8[23]) = *(_QWORD *)(a2 + v8[23]);
  *(_QWORD *)(a1 + v8[24]) = *(_QWORD *)(a2 + v8[24]);
  *(_QWORD *)(a1 + v8[25]) = *(_QWORD *)(a2 + v8[25]);
  *(_QWORD *)(a1 + v8[26]) = *(_QWORD *)(a2 + v8[26]);
  *(_QWORD *)(a1 + v8[27]) = *(_QWORD *)(a2 + v8[27]);
  *(_QWORD *)(a1 + v8[28]) = *(_QWORD *)(a2 + v8[28]);
  *(_WORD *)(a1 + v8[29]) = *(_WORD *)(a2 + v8[29]);
  *(_BYTE *)(a1 + v8[30]) = *(_BYTE *)(a2 + v8[30]);
  *(_BYTE *)(a1 + v8[31]) = *(_BYTE *)(a2 + v8[31]);
  *(_BYTE *)(a1 + v8[32]) = *(_BYTE *)(a2 + v8[32]);
  *(_BYTE *)(a1 + v8[33]) = *(_BYTE *)(a2 + v8[33]);
  *(_BYTE *)(a1 + v8[34]) = *(_BYTE *)(a2 + v8[34]);
  *(_BYTE *)(a1 + v8[35]) = *(_BYTE *)(a2 + v8[35]);
  *(_OWORD *)(a1 + v8[36]) = *(_OWORD *)(a2 + v8[36]);
  *(_BYTE *)(a1 + v8[37]) = *(_BYTE *)(a2 + v8[37]);
  *(_QWORD *)(a1 + v8[38]) = *(_QWORD *)(a2 + v8[38]);
  *(_QWORD *)(a1 + v8[39]) = *(_QWORD *)(a2 + v8[39]);
  *(_QWORD *)(a1 + v8[40]) = *(_QWORD *)(a2 + v8[40]);
  *(_QWORD *)(a1 + v8[41]) = *(_QWORD *)(a2 + v8[41]);
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x168uLL);
  return a1;
}

uint64_t assignWithTake for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v8 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  v9 = v8[20];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  *(_QWORD *)(a1 + v8[21]) = *(_QWORD *)(a2 + v8[21]);
  *(_QWORD *)(a1 + v8[22]) = *(_QWORD *)(a2 + v8[22]);
  *(_QWORD *)(a1 + v8[23]) = *(_QWORD *)(a2 + v8[23]);
  *(_QWORD *)(a1 + v8[24]) = *(_QWORD *)(a2 + v8[24]);
  *(_QWORD *)(a1 + v8[25]) = *(_QWORD *)(a2 + v8[25]);
  *(_QWORD *)(a1 + v8[26]) = *(_QWORD *)(a2 + v8[26]);
  *(_QWORD *)(a1 + v8[27]) = *(_QWORD *)(a2 + v8[27]);
  *(_QWORD *)(a1 + v8[28]) = *(_QWORD *)(a2 + v8[28]);
  *(_WORD *)(a1 + v8[29]) = *(_WORD *)(a2 + v8[29]);
  *(_BYTE *)(a1 + v8[30]) = *(_BYTE *)(a2 + v8[30]);
  *(_BYTE *)(a1 + v8[31]) = *(_BYTE *)(a2 + v8[31]);
  *(_BYTE *)(a1 + v8[32]) = *(_BYTE *)(a2 + v8[32]);
  *(_BYTE *)(a1 + v8[33]) = *(_BYTE *)(a2 + v8[33]);
  *(_BYTE *)(a1 + v8[34]) = *(_BYTE *)(a2 + v8[34]);
  *(_BYTE *)(a1 + v8[35]) = *(_BYTE *)(a2 + v8[35]);
  v13 = v8[36];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + v8[37]) = *(_BYTE *)(a2 + v8[37]);
  *(_QWORD *)(a1 + v8[38]) = *(_QWORD *)(a2 + v8[38]);
  *(_QWORD *)(a1 + v8[39]) = *(_QWORD *)(a2 + v8[39]);
  *(_QWORD *)(a1 + v8[40]) = *(_QWORD *)(a2 + v8[40]);
  *(_QWORD *)(a1 + v8[41]) = *(_QWORD *)(a2 + v8[41]);
  v19 = *(int *)(a3 + 20);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v22;
  v23 = *(_OWORD *)(v21 + 48);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(v20 + 48) = v23;
  v24 = *(_OWORD *)(v21 + 80);
  *(_OWORD *)(v20 + 64) = *(_OWORD *)(v21 + 64);
  *(_OWORD *)(v20 + 80) = v24;
  v25 = *(_OWORD *)(v21 + 112);
  *(_OWORD *)(v20 + 96) = *(_OWORD *)(v21 + 96);
  *(_OWORD *)(v20 + 112) = v25;
  v26 = *(_OWORD *)(v21 + 144);
  *(_OWORD *)(v20 + 128) = *(_OWORD *)(v21 + 128);
  *(_OWORD *)(v20 + 144) = v26;
  v27 = *(_OWORD *)(v21 + 176);
  *(_OWORD *)(v20 + 160) = *(_OWORD *)(v21 + 160);
  *(_OWORD *)(v20 + 176) = v27;
  *(_OWORD *)(v20 + 192) = *(_OWORD *)(v21 + 192);
  v28 = *(_QWORD *)(v21 + 216);
  v29 = *(_QWORD *)(a1 + v19 + 216);
  *(_QWORD *)(v20 + 208) = *(_QWORD *)(v21 + 208);
  *(_QWORD *)(v20 + 216) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(v20 + 224);
  *(_QWORD *)(v20 + 224) = *(_QWORD *)(v21 + 224);
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(v20 + 232);
  *(_QWORD *)(v20 + 232) = *(_QWORD *)(v21 + 232);
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(v20 + 240);
  *(_QWORD *)(v20 + 240) = *(_QWORD *)(v21 + 240);
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(v20 + 248);
  *(_QWORD *)(v20 + 248) = *(_QWORD *)(v21 + 248);
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(v20 + 256);
  *(_QWORD *)(v20 + 256) = *(_QWORD *)(v21 + 256);
  swift_bridgeObjectRelease(v34);
  v35 = *(_QWORD *)(v20 + 264);
  *(_QWORD *)(v20 + 264) = *(_QWORD *)(v21 + 264);
  swift_bridgeObjectRelease(v35);
  v36 = *(_QWORD *)(v20 + 272);
  *(_QWORD *)(v20 + 272) = *(_QWORD *)(v21 + 272);
  swift_bridgeObjectRelease(v36);
  v37 = *(_QWORD *)(v20 + 280);
  *(_QWORD *)(v20 + 280) = *(_QWORD *)(v21 + 280);
  swift_bridgeObjectRelease(v37);
  v38 = *(_QWORD *)(v20 + 288);
  *(_QWORD *)(v20 + 288) = *(_QWORD *)(v21 + 288);
  swift_bridgeObjectRelease(v38);
  v39 = *(_QWORD *)(v20 + 296);
  *(_QWORD *)(v20 + 296) = *(_QWORD *)(v21 + 296);
  swift_bridgeObjectRelease(v39);
  v40 = *(_QWORD *)(v20 + 304);
  *(_QWORD *)(v20 + 304) = *(_QWORD *)(v21 + 304);
  swift_bridgeObjectRelease(v40);
  v41 = *(_QWORD *)(v20 + 312);
  *(_QWORD *)(v20 + 312) = *(_QWORD *)(v21 + 312);
  swift_bridgeObjectRelease(v41);
  v42 = *(_QWORD *)(v20 + 320);
  *(_QWORD *)(v20 + 320) = *(_QWORD *)(v21 + 320);
  swift_bridgeObjectRelease(v42);
  v43 = *(_QWORD *)(v20 + 328);
  *(_QWORD *)(v20 + 328) = *(_QWORD *)(v21 + 328);
  swift_bridgeObjectRelease(v43);
  v44 = *(_QWORD *)(v20 + 336);
  *(_QWORD *)(v20 + 336) = *(_QWORD *)(v21 + 336);
  swift_bridgeObjectRelease(v44);
  v45 = *(_QWORD *)(v20 + 344);
  *(_QWORD *)(v20 + 344) = *(_QWORD *)(v21 + 344);
  swift_bridgeObjectRelease(v45);
  v46 = *(_QWORD *)(v20 + 352);
  *(_QWORD *)(v20 + 352) = *(_QWORD *)(v21 + 352);
  swift_bridgeObjectRelease(v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001618D4);
}

uint64_t sub_1001618D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 216);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100161960);
}

uint64_t sub_100161960(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 216) = (a2 - 1);
  return result;
}

uint64_t sub_1001619DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10034AAC8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v27);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_WORD *)(a1 + 36) = *((_WORD *)a2 + 18);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
    *(_WORD *)(a1 + 44) = *((_WORD *)a2 + 22);
    v7 = *((_DWORD *)a2 + 12);
    *(_WORD *)(a1 + 52) = *((_WORD *)a2 + 26);
    *(_DWORD *)(a1 + 48) = v7;
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
    v8 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v8;
    v9 = *((_OWORD *)a2 + 6);
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    v10 = a3[20];
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    *(_OWORD *)(a1 + 96) = v9;
    v13 = type metadata accessor for DispatchTimeInterval(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = a3[22];
    *(_QWORD *)((char *)v4 + a3[21]) = *(uint64_t *)((char *)a2 + a3[21]);
    *(_QWORD *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[24];
    *(_QWORD *)((char *)v4 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
    *(_QWORD *)((char *)v4 + v15) = *(uint64_t *)((char *)a2 + v15);
    v16 = a3[26];
    *(_QWORD *)((char *)v4 + a3[25]) = *(uint64_t *)((char *)a2 + a3[25]);
    *(_QWORD *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    v17 = a3[28];
    *(_QWORD *)((char *)v4 + a3[27]) = *(uint64_t *)((char *)a2 + a3[27]);
    *(_QWORD *)((char *)v4 + v17) = *(uint64_t *)((char *)a2 + v17);
    v18 = a3[30];
    *(_WORD *)((char *)v4 + a3[29]) = *(_WORD *)((char *)a2 + a3[29]);
    *((_BYTE *)v4 + v18) = *((_BYTE *)a2 + v18);
    v19 = a3[32];
    *((_BYTE *)v4 + a3[31]) = *((_BYTE *)a2 + a3[31]);
    *((_BYTE *)v4 + v19) = *((_BYTE *)a2 + v19);
    v20 = a3[34];
    *((_BYTE *)v4 + a3[33]) = *((_BYTE *)a2 + a3[33]);
    *((_BYTE *)v4 + v20) = *((_BYTE *)a2 + v20);
    v21 = a3[36];
    *((_BYTE *)v4 + a3[35]) = *((_BYTE *)a2 + a3[35]);
    v22 = (_QWORD *)((char *)v4 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = a3[38];
    *((_BYTE *)v4 + a3[37]) = *((_BYTE *)a2 + a3[37]);
    *(_QWORD *)((char *)v4 + v25) = *(uint64_t *)((char *)a2 + v25);
    v26 = a3[40];
    *(_QWORD *)((char *)v4 + a3[39]) = *(uint64_t *)((char *)a2 + a3[39]);
    *(_QWORD *)((char *)v4 + v26) = *(uint64_t *)((char *)a2 + v26);
    *(_QWORD *)((char *)v4 + a3[41]) = *(uint64_t *)((char *)a2 + a3[41]);
    swift_bridgeObjectRetain(v24);
  }
  return v4;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 80);
  v5 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 144) + 8));
}

uint64_t initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v9 = a3[20];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 96) = v8;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = a3[22];
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[24];
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[28];
  *(_QWORD *)(a1 + a3[27]) = *(_QWORD *)(a2 + a3[27]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v17 = a3[30];
  *(_WORD *)(a1 + a3[29]) = *(_WORD *)(a2 + a3[29]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[32];
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[34];
  *(_BYTE *)(a1 + a3[33]) = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[36];
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = a3[38];
  *(_BYTE *)(a1 + a3[37]) = *(_BYTE *)(a2 + a3[37]);
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(a2 + v24);
  v25 = a3[40];
  *(_QWORD *)(a1 + a3[39]) = *(_QWORD *)(a2 + a3[39]);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(a1 + a3[41]) = *(_QWORD *)(a2 + a3[41]);
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v6;
  v7 = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v8;
  v9 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v10 = a3[20];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  *(_QWORD *)(a1 + a3[24]) = *(_QWORD *)(a2 + a3[24]);
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  *(_QWORD *)(a1 + a3[27]) = *(_QWORD *)(a2 + a3[27]);
  *(_QWORD *)(a1 + a3[28]) = *(_QWORD *)(a2 + a3[28]);
  *(_WORD *)(a1 + a3[29]) = *(_WORD *)(a2 + a3[29]);
  *(_BYTE *)(a1 + a3[30]) = *(_BYTE *)(a2 + a3[30]);
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + a3[32]) = *(_BYTE *)(a2 + a3[32]);
  *(_BYTE *)(a1 + a3[33]) = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + a3[34]) = *(_BYTE *)(a2 + a3[34]);
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  v14 = a3[36];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + a3[37]) = *(_BYTE *)(a2 + a3[37]);
  *(_QWORD *)(a1 + a3[38]) = *(_QWORD *)(a2 + a3[38]);
  *(_QWORD *)(a1 + a3[39]) = *(_QWORD *)(a2 + a3[39]);
  *(_QWORD *)(a1 + a3[40]) = *(_QWORD *)(a2 + a3[40]);
  *(_QWORD *)(a1 + a3[41]) = *(_QWORD *)(a2 + a3[41]);
  return a1;
}

uint64_t initializeWithTake for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v9 = a3[20];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 96) = v8;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[22];
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[24];
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[28];
  *(_QWORD *)(a1 + a3[27]) = *(_QWORD *)(a2 + a3[27]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v17 = a3[30];
  *(_WORD *)(a1 + a3[29]) = *(_WORD *)(a2 + a3[29]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[32];
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[34];
  *(_BYTE *)(a1 + a3[33]) = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[36];
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  v21 = a3[38];
  *(_BYTE *)(a1 + a3[37]) = *(_BYTE *)(a2 + a3[37]);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  v22 = a3[40];
  *(_QWORD *)(a1 + a3[39]) = *(_QWORD *)(a2 + a3[39]);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + a3[41]) = *(_QWORD *)(a2 + a3[41]);
  return a1;
}

uint64_t assignWithTake for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  v6 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v9 = a3[20];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 96) = v8;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[22];
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[24];
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[28];
  *(_QWORD *)(a1 + a3[27]) = *(_QWORD *)(a2 + a3[27]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v17 = a3[30];
  *(_WORD *)(a1 + a3[29]) = *(_WORD *)(a2 + a3[29]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[32];
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[34];
  *(_BYTE *)(a1 + a3[33]) = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[36];
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  v26 = a3[38];
  *(_BYTE *)(a1 + a3[37]) = *(_BYTE *)(a2 + a3[37]);
  *(_QWORD *)(a1 + v26) = *(_QWORD *)(a2 + v26);
  v27 = a3[40];
  *(_QWORD *)(a1 + a3[39]) = *(_QWORD *)(a2 + a3[39]);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  *(_QWORD *)(a1 + a3[41]) = *(_QWORD *)(a2 + a3[41]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001623EC);
}

uint64_t sub_1001623EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 80), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 144) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016247C);
}

uint64_t sub_10016247C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for DispatchTimeInterval(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 80), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 144) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1001624FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[38];

  v4[0] = &unk_10034AA80;
  v4[1] = &unk_10034AAF0;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = &unk_10034AB08;
  v4[6] = &unk_10034AB08;
  v4[7] = &unk_10034AB08;
  v4[8] = &unk_10034AB08;
  v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[13] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[14] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[15] = &unk_10034AA80;
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v4[16] = *(_QWORD *)(result - 8) + 64;
    v4[17] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[18] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[19] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[20] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[21] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[22] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[23] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[24] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[25] = (char *)&value witness table for Builtin.Int16 + 64;
    v4[26] = &unk_10034AA80;
    v4[27] = &unk_10034AA80;
    v4[28] = &unk_10034AA80;
    v4[29] = &unk_10034AA80;
    v4[30] = &unk_10034AA80;
    v4[31] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[32] = &unk_10034AB20;
    v4[33] = &unk_10034AA80;
    v4[34] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[35] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[36] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[37] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 38, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics.Traffic(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[29]);
  swift_bridgeObjectRelease(a1[30]);
  swift_bridgeObjectRelease(a1[31]);
  swift_bridgeObjectRelease(a1[32]);
  swift_bridgeObjectRelease(a1[33]);
  swift_bridgeObjectRelease(a1[34]);
  swift_bridgeObjectRelease(a1[35]);
  swift_bridgeObjectRelease(a1[36]);
  swift_bridgeObjectRelease(a1[37]);
  swift_bridgeObjectRelease(a1[38]);
  swift_bridgeObjectRelease(a1[39]);
  swift_bridgeObjectRelease(a1[40]);
  swift_bridgeObjectRelease(a1[41]);
  swift_bridgeObjectRelease(a1[42]);
  swift_bridgeObjectRelease(a1[43]);
  return swift_bridgeObjectRelease(a1[44]);
}

uint64_t initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v9;
  v10 = *(_QWORD *)(a2 + 224);
  v11 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v10;
  *(_QWORD *)(a1 + 232) = v11;
  v12 = *(_QWORD *)(a2 + 240);
  v13 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v12;
  *(_QWORD *)(a1 + 248) = v13;
  v14 = *(_QWORD *)(a2 + 256);
  v15 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v14;
  *(_QWORD *)(a1 + 264) = v15;
  v16 = *(_QWORD *)(a2 + 272);
  v17 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v16;
  *(_QWORD *)(a1 + 280) = v17;
  v19 = *(_QWORD *)(a2 + 288);
  v18 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v19;
  *(_QWORD *)(a1 + 296) = v18;
  v23 = v18;
  v24 = *(_QWORD *)(a2 + 304);
  v20 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v24;
  *(_QWORD *)(a1 + 312) = v20;
  v25 = v20;
  v26 = *(_QWORD *)(a2 + 320);
  v21 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v26;
  *(_QWORD *)(a1 + 328) = v21;
  v27 = v21;
  v28 = *(_QWORD *)(a2 + 336);
  v29 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v28;
  *(_QWORD *)(a1 + 344) = v29;
  v30 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 352) = v30;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  return a1;
}

_QWORD *assignWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  a1[20] = a2[20];
  a1[21] = a2[21];
  a1[22] = a2[22];
  a1[23] = a2[23];
  a1[24] = a2[24];
  a1[25] = a2[25];
  a1[26] = a2[26];
  v4 = a2[27];
  v5 = a1[27];
  a1[27] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[28];
  v7 = a1[28];
  a1[28] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[29];
  v9 = a1[29];
  a1[29] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[30];
  v11 = a1[30];
  a1[30] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[31];
  v13 = a1[31];
  a1[31] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a2[32];
  v15 = a1[32];
  a1[32] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a2[33];
  v17 = a1[33];
  a1[33] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a2[34];
  v19 = a1[34];
  a1[34] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a2[35];
  v21 = a1[35];
  a1[35] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a2[36];
  v23 = a1[36];
  a1[36] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a2[37];
  v25 = a1[37];
  a1[37] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a2[38];
  v27 = a1[38];
  a1[38] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = a2[39];
  v29 = a1[39];
  a1[39] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = a2[40];
  v31 = a1[40];
  a1[40] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a2[41];
  v33 = a1[41];
  a1[41] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = a2[42];
  v35 = a1[42];
  a1[42] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v36 = a2[43];
  v37 = a1[43];
  a1[43] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = a2[44];
  v39 = a1[44];
  a1[44] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

void *initializeWithTake for AWDLStatistics.LowLatencyStatistics.Traffic(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x168uLL);
}

uint64_t assignWithTake for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  v10 = *(_QWORD *)(a2 + 216);
  v11 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 360))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 216);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 360) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 216) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 360) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Traffic()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Traffic.Counts()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic.Counts;
}

uint64_t destroy for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[16]);
  return swift_bridgeObjectRelease(a1[17]);
}

uint64_t *initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  v9 = a2[6];
  v10 = a2[7];
  a1[6] = v9;
  a1[7] = v10;
  v11 = a2[8];
  v12 = a2[9];
  a1[8] = v11;
  a1[9] = v12;
  v14 = a2[10];
  v15 = a2[11];
  a1[10] = v14;
  a1[11] = v15;
  v16 = a2[12];
  v17 = a2[13];
  a1[12] = v16;
  a1[13] = v17;
  v18 = a2[14];
  v19 = a2[15];
  a1[14] = v18;
  a1[15] = v19;
  v20 = a2[16];
  v21 = a2[17];
  a1[16] = v20;
  a1[17] = v21;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t *assignWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a2[5];
  v15 = a1[5];
  a1[5] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a2[6];
  v17 = a1[6];
  a1[6] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a2[7];
  v19 = a1[7];
  a1[7] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a2[8];
  v21 = a1[8];
  a1[8] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a2[9];
  v23 = a1[9];
  a1[9] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a2[10];
  v25 = a1[10];
  a1[10] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a2[11];
  v27 = a1[11];
  a1[11] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = a2[12];
  v29 = a1[12];
  a1[12] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = a2[13];
  v31 = a1[13];
  a1[13] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a2[14];
  v33 = a1[14];
  a1[14] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = a2[15];
  v35 = a1[15];
  a1[15] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v36 = a2[16];
  v37 = a1[16];
  a1[16] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = a2[17];
  v39 = a1[17];
  a1[17] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

__n128 initializeWithTake for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

_QWORD *assignWithTake for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(a1[6]);
  v7 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(a1[8]);
  v8 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(a1[10]);
  v9 = a1[11];
  *((_OWORD *)a1 + 5) = a2[5];
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(a1[12]);
  v10 = a1[13];
  *((_OWORD *)a1 + 6) = a2[6];
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(a1[14]);
  v11 = a1[15];
  *((_OWORD *)a1 + 7) = a2[7];
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a1[16]);
  v12 = a1[17];
  *((_OWORD *)a1 + 8) = a2[8];
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Traffic.Histograms;
}

uint64_t destroy for AWDLStatistics.AirPlayStatistics(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[12]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for AWDLStatistics.AirPlayStatistics(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_WORD *)(a1 + 43) = *(_WORD *)(a2 + 43);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = v7;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for AWDLStatistics.AirPlayStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 34);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 38);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
  *(_BYTE *)(a1 + 63) = *(_BYTE *)(a2 + 63);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_BYTE *)(a1 + 70) = *(_BYTE *)(a2 + 70);
  *(_BYTE *)(a1 + 71) = *(_BYTE *)(a2 + 71);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 104);
  v11 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for AWDLStatistics.AirPlayStatistics(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for AWDLStatistics.AirPlayStatistics(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_WORD *)(a1 + 43) = *(_WORD *)(a2 + 43);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
  *(_BYTE *)(a1 + 63) = *(_BYTE *)(a2 + 63);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  v6 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.AirPlayStatistics()
{
  return &type metadata for AWDLStatistics.AirPlayStatistics;
}

ValueMetadata *type metadata accessor for AWDLStatistics.AirPlayStatistics.Histograms()
{
  return &type metadata for AWDLStatistics.AirPlayStatistics.Histograms;
}

ValueMetadata *type metadata accessor for AWDLStatistics.ServiceRejection.Key()
{
  return &type metadata for AWDLStatistics.ServiceRejection.Key;
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.TrafficRegistrationStart.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100163770 + 4 * byte_10034A5E7[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1001637A4 + 4 * byte_10034A5E2[v4]))();
}

uint64_t sub_1001637A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001637AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001637B4);
  return result;
}

uint64_t sub_1001637C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001637C8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1001637CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001637D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.TrafficRegistrationStart.Key()
{
  return &type metadata for AWDLStatistics.TrafficRegistrationStart.Key;
}

uint64_t _s7CoreP2P14AWDLStatisticsO7FailureV6ReasonOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10016383C + 4 * byte_10034A5F1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100163870 + 4 * byte_10034A5EC[v4]))();
}

uint64_t sub_100163870(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100163878(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100163880);
  return result;
}

uint64_t sub_10016388C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100163894);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100163898(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001638A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.TrafficRegistrationStop.Key()
{
  return &type metadata for AWDLStatistics.TrafficRegistrationStop.Key;
}

uint64_t _s7CoreP2P14AWDLStatisticsO16ServiceRejectionV3KeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100163908 + 4 * byte_10034A5FB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10016393C + 4 * byte_10034A5F6[v4]))();
}

uint64_t sub_10016393C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100163944(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016394CLL);
  return result;
}

uint64_t sub_100163958(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100163960);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100163964(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016396C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.Failure.Key()
{
  return &type metadata for AWDLStatistics.Failure.Key;
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 64 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 64) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xC0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xBF)
    return ((uint64_t (*)(void))((char *)&loc_1001639D4 + 4 * byte_10034A605[v4]))();
  *a1 = a2 + 64;
  return ((uint64_t (*)(void))((char *)sub_100163A08 + 4 * byte_10034A600[v4]))();
}

uint64_t sub_100163A08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100163A10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100163A18);
  return result;
}

uint64_t sub_100163A24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100163A2CLL);
  *(_BYTE *)result = a2 + 64;
  return result;
}

uint64_t sub_100163A30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100163A38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.LowLatencyStatistics.Key()
{
  return &type metadata for AWDLStatistics.LowLatencyStatistics.Key;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Key(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE3)
    goto LABEL_17;
  if (a2 + 29 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 29) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 29;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 29;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 29;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1E;
  v8 = v6 - 30;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 29 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 29) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE2)
    return ((uint64_t (*)(void))((char *)&loc_100163B30 + 4 * byte_10034A60F[v4]))();
  *a1 = a2 + 29;
  return ((uint64_t (*)(void))((char *)sub_100163B64 + 4 * byte_10034A60A[v4]))();
}

uint64_t sub_100163B64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100163B6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100163B74);
  return result;
}

uint64_t sub_100163B80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100163B88);
  *(_BYTE *)result = a2 + 29;
  return result;
}

uint64_t sub_100163B8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100163B94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AWDLStatistics.AirPlayStatistics.Key()
{
  return &type metadata for AWDLStatistics.AirPlayStatistics.Key;
}

unint64_t sub_100163BB4()
{
  unint64_t result;

  result = qword_100409370;
  if (!qword_100409370)
  {
    result = swift_getWitnessTable(byte_10034ABF0, &type metadata for AWDLStatistics.AirPlayStatistics.Key);
    atomic_store(result, (unint64_t *)&qword_100409370);
  }
  return result;
}

unint64_t sub_100163BFC()
{
  unint64_t result;

  result = qword_100409378;
  if (!qword_100409378)
  {
    result = swift_getWitnessTable(aA_3, &type metadata for AWDLStatistics.LowLatencyStatistics.Key);
    atomic_store(result, (unint64_t *)&qword_100409378);
  }
  return result;
}

unint64_t sub_100163C44()
{
  unint64_t result;

  result = qword_100409380;
  if (!qword_100409380)
  {
    result = swift_getWitnessTable(byte_10034AD30, &type metadata for AWDLStatistics.Failure.Key);
    atomic_store(result, (unint64_t *)&qword_100409380);
  }
  return result;
}

unint64_t sub_100163C8C()
{
  unint64_t result;

  result = qword_100409388;
  if (!qword_100409388)
  {
    result = swift_getWitnessTable(asc_10034ADD0, &type metadata for AWDLStatistics.TrafficRegistrationStop.Key);
    atomic_store(result, (unint64_t *)&qword_100409388);
  }
  return result;
}

unint64_t sub_100163CD4()
{
  unint64_t result;

  result = qword_100409390;
  if (!qword_100409390)
  {
    result = swift_getWitnessTable(byte_10034AE70, &type metadata for AWDLStatistics.TrafficRegistrationStart.Key);
    atomic_store(result, (unint64_t *)&qword_100409390);
  }
  return result;
}

unint64_t sub_100163D1C()
{
  unint64_t result;

  result = qword_100409398;
  if (!qword_100409398)
  {
    result = swift_getWitnessTable(byte_10034AF10, &type metadata for AWDLStatistics.ServiceRejection.Key);
    atomic_store(result, (unint64_t *)&qword_100409398);
  }
  return result;
}

uint64_t NANTimeUnit.init<A>(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t result;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t AssociatedTypeWitness;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v3 = a3;
  v49 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v49, a2, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v48 = (char *)&v45 - v6;
  __chkstk_darwin();
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v50 = (char *)&v45 - v9;
  __chkstk_darwin();
  v11 = (char *)&v45 - v10;
  __chkstk_darwin();
  v13 = (char *)&v45 - v12;
  v51 = v14;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v15((char *)&v45 - v12, (uint64_t)a1, a2);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a2, v3) & 1) != 0)
  {
    v16 = v15;
    v17 = v49;
    v18 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v49, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v20 = a1;
    v21 = v11;
    v22 = v48;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v18, AssociatedConformanceWitness);
    v23 = v22;
    v11 = v21;
    a1 = v20;
    v24 = v17;
    v15 = v16;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v23, a2, v24);
    LOBYTE(v18) = dispatch thunk of static Comparable.>= infix(_:_:)(v13, v11, a2, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8));
    (*(void (**)(char *, uint64_t))(v51 + 8))(v11, a2);
    if ((v18 & 1) == 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      goto LABEL_17;
    }
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(a2, v3) < 64)
    goto LABEL_15;
  v45 = v8;
  v46 = a1;
  v15(v50, (uint64_t)v13, a2);
  v52 = -1;
  v25 = dispatch thunk of static BinaryInteger.isSigned.getter(a2, v3);
  v26 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, v3);
  if ((v25 & 1) == 0)
  {
    if (v26 >= 65)
      goto LABEL_10;
    v42 = v50;
    dispatch thunk of BinaryInteger._lowWord.getter(a2, v3);
    a1 = v46;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v42, a2);
LABEL_15:
    v43 = dispatch thunk of BinaryInteger._lowWord.getter(a2, v3);
    v44 = *(void (**)(char *, uint64_t))(v51 + 8);
    v44(v13, a2);
    v44(a1, a2);
    return v43;
  }
  if (v26 <= 64)
  {
    v27 = v3;
    v28 = (void (*)(char *, char *, uint64_t))v15;
    v29 = v49;
    v30 = AssociatedTypeWitness;
    v31 = swift_getAssociatedConformanceWitness(v49, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v32 = v11;
    v33 = v48;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v30, v31);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v33, a2, v29);
    v34 = v50;
    LOBYTE(v30) = dispatch thunk of static Comparable.> infix(_:_:)(v50, v32, a2, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8));
    v35 = *(void (**)(char *, uint64_t))(v51 + 8);
    v35(v32, a2);
    v36 = v52;
    v37 = v45;
    v28(v45, v34, a2);
    a1 = v46;
    if ((v30 & 1) != 0)
    {
      v38 = dispatch thunk of BinaryInteger._lowWord.getter(a2, v27);
      v35(v37, a2);
      v3 = v27;
      if (v36 < v38)
        goto LABEL_11;
    }
    else
    {
      v35(v37, a2);
      v3 = v27;
    }
    goto LABEL_14;
  }
LABEL_10:
  v39 = sub_100164234();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v52, &type metadata for UInt64, v39, a2, v3);
  v34 = v50;
  v40 = dispatch thunk of static Comparable.< infix(_:_:)(v11, v50, a2, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8));
  v35 = *(void (**)(char *, uint64_t))(v51 + 8);
  v35(v11, a2);
  a1 = v46;
  if ((v40 & 1) == 0)
  {
LABEL_14:
    v35(v34, a2);
    goto LABEL_15;
  }
LABEL_11:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_17:
  __break(1u);
  return result;
}

unint64_t sub_100164234()
{
  unint64_t result;

  result = qword_1004093A0;
  if (!qword_1004093A0)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1004093A0);
  }
  return result;
}

unint64_t static NANTimeUnit.* infix(_:_:)(unint64_t result, unint64_t a2)
{
  if (is_mul_ok(result, a2))
    result *= a2;
  else
    __break(1u);
  return result;
}

unint64_t static NANTimeUnit./ infix(_:_:)(unint64_t result, unint64_t a2)
{
  if (a2)
    result /= a2;
  else
    __break(1u);
  return result;
}

uint64_t static NANTimeUnit.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __CFADD__(a1, a2);
  result = a1 + a2;
  if (v2)
    __break(1u);
  return result;
}

void *NANTimeUnit.zero.unsafeMutableAddressor()
{
  return &static NANTimeUnit.zero;
}

unint64_t static NANTimeUnit.- infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v2;
  unint64_t result;

  v2 = a1 >= a2;
  result = a1 - a2;
  if (!v2)
    __break(1u);
  return result;
}

uint64_t sub_1001642CC(unsigned __int8 a1)
{
  uint64_t result;

  if (!a1)
    return 0;
  if ((((a1 + 6) >> 8) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a1 + 6) >= 0x40u)
      return 0;
    if ((a1 + 6) != 63)
      return 1 << (a1 + 6);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

BOOL static NANTimeUnit.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

CoreP2P::NANTimeSynchronizationFunction __swiftcall NANTimeSynchronizationFunction.init(lowTSF:highTSF:)(Swift::UInt32 lowTSF, Swift::UInt32 highTSF)
{
  return (CoreP2P::NANTimeSynchronizationFunction)(lowTSF | (*(_QWORD *)&highTSF << 32));
}

BOOL static RSSI.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

unint64_t NANTimeUnit.microseconds.getter(unint64_t result)
{
  if (result >> 54)
    __break(1u);
  else
    result <<= 10;
  return result;
}

unint64_t NANTimeUnit.duration.getter@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (result >> 54)
  {
    __break(1u);
  }
  else if (((result << 10) & 0x8000000000000000) == 0)
  {
    *a2 = result << 10;
    v3 = enum case for DispatchTimeInterval.microseconds(_:);
    v4 = type metadata accessor for DispatchTimeInterval(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(a2, v3, v4);
  }
  __break(1u);
  return result;
}

void NANTimeUnit.description.getter(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  __n128 v10;
  Swift::String v11;
  _QWORD v12[4];

  v2 = type metadata accessor for DispatchTimeInterval(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (_QWORD *)((char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12[1] = a1;
  v12[2] = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v12[3] = v6;
  v7._countAndFlagsBits = 0x282073555420;
  v7._object = (void *)0xE600000000000000;
  String.append(_:)(v7);
  if (a1 >> 54)
  {
    __break(1u);
  }
  else if (((a1 << 10) & 0x8000000000000000) == 0)
  {
    *v5 = a1 << 10;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchTimeInterval.microseconds(_:), v2);
    v8._countAndFlagsBits = DispatchTimeInterval.description.getter();
    object = v8._object;
    String.append(_:)(v8);
    v10 = swift_bridgeObjectRelease(object);
    (*(void (**)(_QWORD *, uint64_t, __n128))(v3 + 8))(v5, v2, v10);
    v11._countAndFlagsBits = 41;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    return;
  }
  __break(1u);
}

uint64_t NANTimeUnit.customMirror.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v2 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1;
  v12 = _swiftEmptyArrayStorage;
  v8 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  v9 = sub_100012C44(&qword_100405B90);
  v10 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v13, &v12, v7, v5, &type metadata for NANTimeUnit, v9, v10);
}

void *NANTimeUnit.discoveryWindowInterval.unsafeMutableAddressor()
{
  return &static NANTimeUnit.discoveryWindowInterval;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.peerKeyEnabled.getter()
{
  return 512;
}

void *NANTimeUnit.defaultDiscoveryBeaconPeriod.unsafeMutableAddressor()
{
  return &static NANTimeUnit.defaultDiscoveryBeaconPeriod;
}

uint64_t static NANTimeUnit.defaultDiscoveryBeaconPeriod.getter()
{
  return 100;
}

void *NANTimeUnit.initialDiscoveryBeaconPeriod.unsafeMutableAddressor()
{
  return &static NANTimeUnit.initialDiscoveryBeaconPeriod;
}

uint64_t static NANTimeUnit.initialDiscoveryBeaconPeriod.getter()
{
  return 60;
}

void NANTimeUnit.hash(into:)(int a1, Swift::UInt64 a2)
{
  Hasher._combine(_:)(a2);
}

void sub_1001646B4()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

void sub_1001646E0()
{
  unint64_t *v0;

  NANTimeUnit.description.getter(*v0);
}

uint64_t sub_1001646E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v13;
  uint64_t v14;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v13 = _swiftEmptyArrayStorage;
  v9 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  v10 = sub_100012C44(&qword_100405B90);
  v11 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v14, &v13, v8, v6, a1, v10, v11);
}

BOOL sub_100164824(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_100164838(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10016484C(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100164860(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

void *NANTimeUnit.SchedulePeriod.maximumAvailabilityPeriod.unsafeMutableAddressor()
{
  return &static NANTimeUnit.SchedulePeriod.maximumAvailabilityPeriod;
}

uint64_t static NANTimeUnit.SchedulePeriod.maximumAvailabilityPeriod.getter()
{
  return 7;
}

CoreP2P::NANTimeUnit::SchedulePeriod_optional __swiftcall NANTimeUnit.SchedulePeriod.init(duration:)(CoreP2P::NANTimeUnit duration)
{
  if ((uint64_t)duration.rawValue > 1023)
  {
    if ((uint64_t)duration.rawValue > 4095)
    {
      if (duration.rawValue == 4096)
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)6;
      if (duration.rawValue == 0x2000)
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)7;
    }
    else
    {
      if (duration.rawValue == 1024)
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)4;
      if (duration.rawValue == 2048)
        return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)5;
    }
    return 0;
  }
  if (duration.rawValue == 128)
    return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)1;
  if (duration.rawValue != 256)
  {
    if (duration.rawValue == 512)
      return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)3;
    return 0;
  }
  return (CoreP2P::NANTimeUnit::SchedulePeriod_optional)2;
}

uint64_t sub_100164914@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

unint64_t NANTimeSynchronizationFunction.discoveryWindow.getter(unint64_t a1)
{
  BOOL v1;
  unint64_t result;

  v1 = a1 >= (a1 & 0x7FFFF);
  result = a1 - (a1 & 0x7FFFF);
  if (!v1)
    __break(1u);
  return result;
}

unint64_t NANTimeSynchronizationFunction.discoveryWindow0.getter(unint64_t a1)
{
  BOOL v1;
  unint64_t result;

  v1 = a1 >= (a1 & 0x7FFFFF);
  result = a1 - (a1 & 0x7FFFFF);
  if (!v1)
    __break(1u);
  return result;
}

uint64_t NANTimeSynchronizationFunction.discoveryWindowCount.getter(unint64_t a1)
{
  return (a1 >> 19) & 0xF;
}

uint64_t NANTimeSynchronizationFunction.description.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100012C44((uint64_t *)&unk_100404F10);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10033A110;
  *(_QWORD *)(v3 + 56) = &type metadata for UInt64;
  *(_QWORD *)(v3 + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(v3 + 32) = a1;
  return String.init(format:_:)(2020371493, 0xE400000000000000, v3);
}

uint64_t sub_1001649D4()
{
  return 0x65756C6176;
}

uint64_t sub_1001649E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease(0xE500000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100164A74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100164FE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100164A9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100164FE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANTimeSynchronizationFunction.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v4 = sub_100012C44(&qword_1004093A8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  v10 = sub_100164FE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANTimeSynchronizationFunction.CodingKeys, &type metadata for NANTimeSynchronizationFunction.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int _s7CoreP2P30NANTimeSynchronizationFunctionV9hashValueSivg_0(Swift::UInt64 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

_QWORD *NANTimeSynchronizationFunction.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100012C44(&qword_1004093B8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10003259C(a1, v7);
  v10 = sub_100164FE4();
  v11 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANTimeSynchronizationFunction.CodingKeys, &type metadata for NANTimeSynchronizationFunction.CodingKeys, v10, v7, v8);
  if (!v1)
  {
    v9 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100014430(a1);
  return v9;
}

Swift::Int sub_100164CEC()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100164D30()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100164D70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = sub_100012C44((uint64_t *)&unk_100404F10);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10033A110;
  *(_QWORD *)(v3 + 56) = &type metadata for UInt64;
  *(_QWORD *)(v3 + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(v3 + 32) = v1;
  return String.init(format:_:)(2020371493, 0xE400000000000000, v3);
}

uint64_t sub_100164DD8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_100012C44(&qword_1004093B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_100164FE4();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANTimeSynchronizationFunction.CodingKeys, &type metadata for NANTimeSynchronizationFunction.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100014430(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_100014430(a1);
  *a2 = v13;
  return result;
}

uint64_t sub_100164EE8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v3 = sub_100012C44(&qword_1004093A8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  v10 = sub_100164FE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANTimeSynchronizationFunction.CodingKeys, &type metadata for NANTimeSynchronizationFunction.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(uint64_t result)
{
  if ((result & 0xF8) != 0)
    return 8;
  else
    return result;
}

unint64_t sub_100164FE4()
{
  unint64_t result;

  result = qword_1004093B0;
  if (!qword_1004093B0)
  {
    result = swift_getWitnessTable(asc_10034B454, &type metadata for NANTimeSynchronizationFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004093B0);
  }
  return result;
}

unint64_t sub_10016502C()
{
  unint64_t result;

  result = qword_1004093C0;
  if (!qword_1004093C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANTimeUnit, &type metadata for NANTimeUnit);
    atomic_store(result, (unint64_t *)&qword_1004093C0);
  }
  return result;
}

void *sub_100165070()
{
  return &protocol witness table for UInt64;
}

unint64_t sub_100165080()
{
  unint64_t result;

  result = qword_1004093C8;
  if (!qword_1004093C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANTimeUnit.SchedulePeriod, &type metadata for NANTimeUnit.SchedulePeriod);
    atomic_store(result, (unint64_t *)&qword_1004093C8);
  }
  return result;
}

unint64_t sub_1001650C8()
{
  unint64_t result;

  result = qword_1004093D0;
  if (!qword_1004093D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANTimeSynchronizationFunction, &type metadata for NANTimeSynchronizationFunction);
    atomic_store(result, (unint64_t *)&qword_1004093D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANTimeUnit()
{
  return &type metadata for NANTimeUnit;
}

uint64_t storeEnumTagSinglePayload for NANTimeUnit.SchedulePeriod(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100165168 + 4 * byte_10034B005[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10016519C + 4 * byte_10034B000[v4]))();
}

uint64_t sub_10016519C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001651A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001651ACLL);
  return result;
}

uint64_t sub_1001651B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001651C0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1001651C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001651CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANTimeUnit.SchedulePeriod()
{
  return &type metadata for NANTimeUnit.SchedulePeriod;
}

ValueMetadata *type metadata accessor for NANTimeSynchronizationFunction()
{
  return &type metadata for NANTimeSynchronizationFunction;
}

uint64_t storeEnumTagSinglePayload for NANTimeSynchronizationFunction.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100165238 + 4 * byte_10034B00A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100165258 + 4 * byte_10034B00F[v4]))();
}

_BYTE *sub_100165238(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100165258(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100165260(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100165268(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100165270(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100165278(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NANTimeSynchronizationFunction.CodingKeys()
{
  return &type metadata for NANTimeSynchronizationFunction.CodingKeys;
}

unint64_t sub_100165298()
{
  unint64_t result;

  result = qword_1004093D8;
  if (!qword_1004093D8)
  {
    result = swift_getWitnessTable(asc_10034B42C, &type metadata for NANTimeSynchronizationFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004093D8);
  }
  return result;
}

unint64_t sub_1001652E0()
{
  unint64_t result;

  result = qword_1004093E0;
  if (!qword_1004093E0)
  {
    result = swift_getWitnessTable(byte_10034B39C, &type metadata for NANTimeSynchronizationFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004093E0);
  }
  return result;
}

unint64_t sub_100165328()
{
  unint64_t result;

  result = qword_1004093E8;
  if (!qword_1004093E8)
  {
    result = swift_getWitnessTable(asc_10034B3C4, &type metadata for NANTimeSynchronizationFunction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004093E8);
  }
  return result;
}

uint64_t static IEEE80211Frame.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v6;
  __int128 v7[10];
  _BYTE v8[168];

  if (_s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16)))
  {
    sub_10016EFBC((__int128 *)(a1 + 24), (uint64_t)v7);
    sub_10016EFBC((__int128 *)(a2 + 24), (uint64_t)&v6);
    sub_10016EFBC(v7, (uint64_t)v8);
    v4 = (char *)&loc_1001653FC + 4 * byte_10034B4B0[sub_100119838((uint64_t)v8)];
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t IEEE80211Frame.FrameType.ManagementType.rawValue.getter(char a1)
{
  return byte_10034CEFA[a1];
}

BOOL sub_100165530(char *a1, char *a2)
{
  return byte_10034CEFA[*a1] == byte_10034CEFA[*a2];
}

uint64_t sub_100165554@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P14IEEE80211FrameV0D4TypeO010ManagementE0O8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10016557C(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = byte_10034CEFA[*v1];
}

Swift::Int sub_100165594()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(byte_10034CEFA[v1]);
  return Hasher._finalize()();
}

void sub_1001655E0()
{
  char *v0;

  Hasher._combine(_:)(byte_10034CEFA[*v0]);
}

Swift::Int sub_100165614()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(byte_10034CEFA[v1]);
  return Hasher._finalize()();
}

uint64_t IEEE80211Frame.Header.FrameControl.version.getter@<X0>(__int16 a1@<W0>, unint64_t a2@<X8>)
{
  return sub_10007CE78(0, 2, a1, a2);
}

unint64_t IEEE80211Frame.Header.FrameControl.frameType.getter(__int16 a1)
{
  unint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = sub_10007CCF8(2uLL, 2, a1);
  if (result > 3u)
  {
    v2 = sub_100012C84();
    v3 = swift_allocError(&type metadata for WiFiError, v2, 0, 0);
    *(_OWORD *)v4 = xmmword_100337850;
    *(_BYTE *)(v4 + 16) = 2;
    v5 = v3;
    swift_willThrow(v3);
    result = swift_unexpectedError(v5, "CoreP2P/IEEE80211Frame.swift", 28, 1);
    __break(1u);
  }
  return result;
}

uint64_t IEEE80211Frame.Header.FrameControl.managementSubtype.getter(__int16 a1)
{
  int v2;
  uint64_t result;
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_10007CCF8(2uLL, 2, a1);
  if ((v2 - 1) < 3)
    return 14;
  if (v2)
  {
    v5 = sub_100012C84();
    v6 = swift_allocError(&type metadata for WiFiError, v5, 0, 0);
    *(_OWORD *)v7 = xmmword_100337850;
    *(_BYTE *)(v7 + 16) = 2;
    v8 = v6;
    swift_willThrow(v6);
    result = swift_unexpectedError(v8, "CoreP2P/IEEE80211Frame.swift", 28, 1, 52);
    __break(1u);
  }
  else
  {
    v4 = sub_10007CCF8(4uLL, 4, a1);
    result = _s7CoreP2P14IEEE80211FrameV0D4TypeO010ManagementE0O8rawValueAGSgs5UInt8V_tcfC_0(v4);
    if (result == 14)
      return 14;
  }
  return result;
}

void *IEEE80211Frame.Header.FrameControl.toDS.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.toDS;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.jointMultiBandRSNAuthentication.getter()
{
  return 256;
}

void *IEEE80211Frame.Header.FrameControl.fromDS.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.fromDS;
}

void *IEEE80211Frame.Header.FrameControl.moreFragments.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.moreFragments;
}

void *IEEE80211Frame.Header.FrameControl.retry.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.retry;
}

uint64_t static IEEE80211Frame.Header.FrameControl.retry.getter()
{
  return 2048;
}

void *IEEE80211Frame.Header.FrameControl.powerManagement.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.powerManagement;
}

uint64_t static IEEE80211Frame.Header.FrameControl.powerManagement.getter()
{
  return 4096;
}

void *IEEE80211Frame.Header.FrameControl.moreData.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.moreData;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.extendedKeyIDForIndviduallyAddressedFrames.getter()
{
  return 0x2000;
}

void *IEEE80211Frame.Header.FrameControl.protectedFrame.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.protectedFrame;
}

uint64_t static IEEE80211InformationElement.RSNCapability.Capabilities.ocvc.getter()
{
  return 0x4000;
}

void *IEEE80211Frame.Header.FrameControl.htc.unsafeMutableAddressor()
{
  return &static IEEE80211Frame.Header.FrameControl.htc;
}

uint64_t static IEEE80211Frame.Header.FrameControl.htc.getter()
{
  return 0x8000;
}

uint64_t sub_1001658E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10017004C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10016593C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10017004C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t IEEE80211Frame.Header.receiverAddress.getter(unint64_t a1, unsigned __int16 a2)
{
  return HIDWORD(a1) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)a2 << 32);
}

uint64_t IEEE80211Frame.Header.receiverAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 6) = BYTE2(result);
  *(_BYTE *)(v1 + 7) = BYTE3(result);
  *(_BYTE *)(v1 + 8) = BYTE4(result);
  *(_BYTE *)(v1 + 9) = BYTE5(result);
  return result;
}

uint64_t IEEE80211Frame.Header.transmitterAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 10) = result;
  *(_BYTE *)(v1 + 12) = BYTE2(result);
  *(_BYTE *)(v1 + 13) = BYTE3(result);
  *(_BYTE *)(v1 + 14) = BYTE4(result);
  *(_BYTE *)(v1 + 15) = BYTE5(result);
  return result;
}

uint64_t IEEE80211Frame.Header.destinationAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 16) = result;
  *(_BYTE *)(v1 + 18) = BYTE2(result);
  *(_BYTE *)(v1 + 19) = BYTE3(result);
  *(_BYTE *)(v1 + 20) = BYTE4(result);
  *(_BYTE *)(v1 + 21) = BYTE5(result);
  return result;
}

unint64_t IEEE80211Frame.Header.sequenceControl.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIWORD(a3);
}

uint64_t IEEE80211Frame.Header.sequenceControl.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 22) = result;
  return result;
}

void IEEE80211Frame.Header.hash(into:)(int a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::UInt8 v13[8];
  Swift::UInt8 v14[8];
  Swift::UInt8 v15[8];
  Swift::UInt8 v16[8];
  Swift::UInt8 v17[8];
  Swift::UInt8 v18[8];
  Swift::UInt8 v19[8];
  Swift::UInt8 v20[8];
  Swift::UInt8 v21[8];
  Swift::UInt8 v22[8];
  Swift::UInt16 v23[4];

  v4 = a4;
  v5 = a3;
  v6 = a2 >> 16;
  v7 = HIDWORD(a2);
  v8 = a2 >> 40;
  v9 = HIWORD(a2);
  v10 = HIBYTE(a2);
  v11 = a3 >> 8;
  v12 = a3 >> 16;
  *(_QWORD *)v13 = a3 >> 24;
  *(_QWORD *)v14 = HIDWORD(a3);
  *(_QWORD *)v15 = a3 >> 40;
  *(_QWORD *)v16 = HIWORD(a3);
  *(_QWORD *)v17 = HIBYTE(a3);
  *(_QWORD *)v18 = a4 >> 8;
  *(_QWORD *)v19 = a4 >> 16;
  *(_QWORD *)v20 = a4 >> 24;
  *(_QWORD *)v21 = HIDWORD(a4);
  *(_QWORD *)v22 = a4 >> 40;
  *(_QWORD *)v23 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
}

uint64_t sub_100165B8C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100165BC8 + 4 * byte_10034B4B4[a1]))(0x6E6F43656D617266, 0xEC0000006C6F7274);
}

uint64_t sub_100165BC8()
{
  return 0x6E6F697461727564;
}

uint64_t sub_100165BE0()
{
  return 0x7265766965636572;
}

unint64_t sub_100165C04()
{
  return 0xD000000000000012;
}

uint64_t sub_100165C2C()
{
  return 0x65636E6575716573;
}

uint64_t sub_100165C50()
{
  unsigned __int8 *v0;

  return sub_100165B8C(*v0);
}

uint64_t sub_100165C58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100174158(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100165C7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016D708();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100165CA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016D708();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Header.encode(to:)(_QWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v22;
  char v23;
  char v24;
  __int16 v25;
  char v26;

  v21 = a4;
  v8 = sub_100012C44(&qword_1004093F0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_10016D708();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211Frame.Header.CodingKeys, &type metadata for IEEE80211Frame.Header.CodingKeys, v14, v12, v13);
  v22 = a2;
  v26 = 0;
  v15 = sub_10016D74C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v26, v8, &type metadata for IEEE80211Frame.Header.FrameControl, v15);
  if (v4)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v17 = v9;
  v18 = v21;
  LOBYTE(v22) = 1;
  KeyedEncodingContainer.encode(_:forKey:)(a2 >> 16, &v22, v8);
  LOBYTE(v22) = BYTE4(a2);
  HIBYTE(v22) = BYTE5(a2);
  v23 = BYTE6(a2);
  v24 = HIBYTE(a2);
  v25 = a3;
  v26 = 2;
  v19 = sub_100039C34();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v26, v8, &type metadata for WiFiAddress, v19);
  LOBYTE(v22) = BYTE2(a3);
  HIBYTE(v22) = BYTE3(a3);
  v23 = BYTE4(a3);
  v24 = BYTE5(a3);
  LOBYTE(v25) = BYTE6(a3);
  HIBYTE(v25) = HIBYTE(a3);
  v26 = 3;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v26, v8, &type metadata for WiFiAddress, v19);
  v22 = v18;
  v23 = BYTE2(v18);
  v24 = BYTE3(v18);
  LOBYTE(v25) = BYTE4(v18);
  HIBYTE(v25) = BYTE5(v18);
  v26 = 4;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v26, v8, &type metadata for WiFiAddress, v19);
  LOBYTE(v22) = 5;
  KeyedEncodingContainer.encode(_:forKey:)(HIWORD(v18), &v22, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v11, v8);
}

Swift::Int IEEE80211Frame.Header.hashValue.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt16 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt8 v13[8];
  Swift::UInt8 v14[8];
  Swift::UInt8 v15[8];
  Swift::UInt8 v16[8];
  Swift::UInt8 v17[8];
  Swift::UInt8 v18[8];
  Swift::UInt8 v19[8];
  Swift::UInt8 v20[8];
  Swift::UInt8 v21[8];
  Swift::UInt8 v22[8];
  Swift::UInt8 v23[8];
  Swift::UInt16 v24[4];
  _QWORD v25[10];

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = a1 >> 16;
  v7 = HIDWORD(a1);
  v8 = a1 >> 40;
  v9 = HIWORD(a1);
  v10 = HIBYTE(a1);
  v11 = a2 >> 8;
  *(_QWORD *)v13 = a2 >> 16;
  *(_QWORD *)v14 = a2 >> 24;
  *(_QWORD *)v15 = HIDWORD(a2);
  *(_QWORD *)v16 = a2 >> 40;
  *(_QWORD *)v17 = HIWORD(a2);
  *(_QWORD *)v18 = HIBYTE(a2);
  *(_QWORD *)v19 = a3 >> 8;
  *(_QWORD *)v20 = a3 >> 16;
  *(_QWORD *)v21 = a3 >> 24;
  *(_QWORD *)v22 = HIDWORD(a3);
  *(_QWORD *)v23 = a3 >> 40;
  *(_QWORD *)v24 = HIWORD(a3);
  Hasher.init(_seed:)(v25);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v20[0]);
  Hasher._combine(_:)(v21[0]);
  Hasher._combine(_:)(v22[0]);
  Hasher._combine(_:)(v23[0]);
  Hasher._combine(_:)(v24[0]);
  return Hasher._finalize()();
}

unint64_t IEEE80211Frame.Header.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v3;

  result = sub_10016E590(a1);
  if (v1)
    return v3;
  return result;
}

unint64_t sub_100166148@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;

  result = sub_10016E590(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100166208(_QWORD *a1)
{
  uint64_t v1;

  return IEEE80211Frame.Header.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

Swift::Int sub_100166224()
{
  unint64_t *v0;

  return IEEE80211Frame.Header.hashValue.getter(*v0, v0[1], v0[2]);
}

void sub_100166230(int a1)
{
  unint64_t *v1;

  IEEE80211Frame.Header.hash(into:)(a1, *v1, v1[1], v1[2]);
}

Swift::Int sub_10016623C()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  IEEE80211Frame.Header.hash(into:)((int)v5, v2, v1, v3);
  return Hasher._finalize()();
}

BOOL sub_100166290(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
}

void IEEE80211Frame.Contents.hash(into:)()
{
  __int128 *v0;
  char *v1;
  __int128 v2[10];
  _BYTE v3[336];
  _BYTE v4[168];

  sub_10016EFBC(v0, (uint64_t)v2);
  sub_10016EFBC(v2, (uint64_t)v4);
  sub_10016EFBC(v0, (uint64_t)v3);
  v1 = (char *)sub_100166310 + 4 * byte_10034B4BA[sub_100119838((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_100166310()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[336];
  __int128 v4;
  uint64_t v5;

  sub_10016EFBC(&v4, (uint64_t)&v5);
  Hasher._combine(_:)(0);
  sub_10016EFBC((__int128 *)(v1 - 200), (uint64_t)v3);
  sub_10016F008((uint64_t)v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100063A48);
  IEEE80211Frame.Management.hash(into:)();
  return sub_10016E8B4(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
}

void static IEEE80211Frame.Contents.__derived_enum_equals(_:_:)(__int128 *a1)
{
  char *v1;
  _BYTE v2[336];

  sub_10016EFBC(a1, (uint64_t)v2);
  v1 = (char *)sub_1001663E0 + 4 * byte_10034B4BE[sub_100119838((uint64_t)v2)];
  __asm { BR              X10 }
}

uint64_t sub_1001663E0()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  __int128 v6[10];
  uint64_t v7;
  __int128 v8;

  sub_10016EFBC(&v8, v2 - 216);
  sub_10016EFBC(v0, (uint64_t)v6);
  if (sub_100119838((uint64_t)v6))
  {
    v4 = 0;
  }
  else
  {
    sub_10016EFBC(v6, (uint64_t)&v7);
    sub_10016E8B4(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063A48);
    sub_10016E8B4((uint64_t)v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063A48);
    _s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0((__int128 *)(v2 - 216));
    v4 = v3;
    sub_10016E8B4((uint64_t)v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
    sub_10016E8B4(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
  }
  return v4 & 1;
}

void IEEE80211Frame.Contents.hashValue.getter()
{
  __int128 *v0;
  char *v1;
  _QWORD v2[9];
  __int128 v3[10];
  _BYTE v4[336];
  _BYTE v5[168];

  sub_10016EFBC(v0, (uint64_t)v3);
  sub_10016EFBC(v3, (uint64_t)v5);
  Hasher.init(_seed:)(v2);
  sub_10016EFBC(v0, (uint64_t)v4);
  v1 = (char *)sub_100166554 + 4 * byte_10034B4C2[sub_100119838((uint64_t)v4)];
  __asm { BR              X10 }
}

Swift::Int sub_100166554()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[408];
  __int128 v4;
  uint64_t v5;

  sub_10016EFBC(&v4, (uint64_t)&v5);
  Hasher._combine(_:)(0);
  sub_10016EFBC((__int128 *)(v1 - 200), (uint64_t)v3);
  sub_10016F008((uint64_t)v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100063A48);
  IEEE80211Frame.Management.hash(into:)();
  sub_10016E8B4(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
  return Hasher._finalize()();
}

void sub_1001665E8()
{
  __int128 *v0;
  char *v1;
  _QWORD v2[30];
  __int128 v3[10];
  _BYTE v4[168];

  sub_10016EFBC(v0, (uint64_t)v3);
  Hasher.init(_seed:)(v2);
  sub_10016EFBC(v3, (uint64_t)v4);
  v1 = (char *)sub_100166640 + 4 * byte_10034B4C6[sub_100119838((uint64_t)v4)];
  __asm { BR              X10 }
}

Swift::Int sub_100166640()
{
  uint64_t v0;
  _BYTE v2[240];
  uint64_t v3;
  __int128 v4[23];

  sub_10016EFBC((__int128 *)(v0 - 184), (uint64_t)&v3);
  Hasher._combine(_:)(0);
  sub_10016EFBC(v4, (uint64_t)v2);
  sub_10016F008((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100063A48);
  IEEE80211Frame.Management.hash(into:)();
  sub_10016E8B4((uint64_t)v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
  return Hasher._finalize()();
}

void sub_1001666D0()
{
  __int128 *v0;
  char *v1;
  __int128 v2[10];
  _BYTE v3[168];

  sub_10016EFBC(v0, (uint64_t)v2);
  sub_10016EFBC(v2, (uint64_t)v3);
  v1 = (char *)sub_100166724 + 4 * byte_10034B4CA[sub_100119838((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_100166724()
{
  uint64_t v0;
  _BYTE v2[168];
  uint64_t v3;
  __int128 v4[24];

  sub_10016EFBC((__int128 *)(v0 - 200), (uint64_t)&v3);
  Hasher._combine(_:)(0);
  sub_10016EFBC(v4, (uint64_t)v2);
  sub_10016F008((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100063A48);
  IEEE80211Frame.Management.hash(into:)();
  return sub_10016E8B4((uint64_t)v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
}

void sub_1001667A8()
{
  __int128 *v0;
  char *v1;
  _QWORD v2[30];
  __int128 v3[10];
  _BYTE v4[168];

  sub_10016EFBC(v0, (uint64_t)v3);
  Hasher.init(_seed:)(v2);
  sub_10016EFBC(v3, (uint64_t)v4);
  v1 = (char *)sub_100166808 + 4 * byte_10034B4CE[sub_100119838((uint64_t)v4)];
  __asm { BR              X10 }
}

Swift::Int sub_100166808()
{
  uint64_t v0;
  _BYTE v2[240];
  uint64_t v3;
  __int128 v4[24];

  sub_10016EFBC((__int128 *)(v0 - 200), (uint64_t)&v3);
  Hasher._combine(_:)(0);
  sub_10016EFBC(v4, (uint64_t)v2);
  sub_10016F008((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100063A48);
  IEEE80211Frame.Management.hash(into:)();
  sub_10016E8B4((uint64_t)v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
  return Hasher._finalize()();
}

void sub_10016689C(__int128 *a1, __int128 *a2)
{
  char *v3;
  __int128 v4[10];
  _BYTE v5[168];
  _BYTE v6[168];

  sub_10016EFBC(a1, (uint64_t)v4);
  sub_10016EFBC(a2, (uint64_t)v5);
  sub_10016EFBC(v4, (uint64_t)v6);
  v3 = (char *)sub_1001668F8 + 4 * byte_10034B4D2[sub_100119838((uint64_t)v6)];
  __asm { BR              X10 }
}

uint64_t sub_1001668F8()
{
  uint64_t v0;
  char v1;
  char v2;
  __int128 v4[10];
  __int128 v5[10];
  uint64_t v6;
  _BYTE v7[168];
  __int128 v8[24];

  sub_10016EFBC((__int128 *)(v0 - 200), (uint64_t)v5);
  sub_10016EFBC(v8, (uint64_t)v4);
  if (sub_100119838((uint64_t)v4))
  {
    v1 = 0;
  }
  else
  {
    sub_10016EFBC(v4, (uint64_t)&v6);
    sub_10016E8B4((uint64_t)v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063A48);
    sub_10016E8B4((uint64_t)v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063A48);
    static IEEE80211Frame.Management.__derived_enum_equals(_:_:)(v5);
    v1 = v2;
    sub_10016E8B4((uint64_t)v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
    sub_10016E8B4((uint64_t)v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
  }
  return v1 & 1;
}

uint64_t IEEE80211Frame.header.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t IEEE80211Frame.header.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *v3 = result;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t IEEE80211Frame.contents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10016E924((uint64_t *)(v1 + 24), a1);
}

uint64_t IEEE80211Frame.contents.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10016E958(a1, v1 + 24);
}

uint64_t IEEE80211InformationElement.VeryHighThroughputCapability.txHighLGIRate.getter(uint64_t a1, unsigned int a2)
{
  return HIWORD(a2);
}

double IEEE80211Frame.Management.Beacon.hash(into:)(int a1, Swift::UInt64 a2, unsigned int a3, uint64_t a4)
{
  Swift::UInt16 v5;
  unsigned int v6;
  Swift::UInt v7;
  double result;
  uint64_t v9;
  _BYTE v10[56];

  v5 = a3;
  v6 = HIWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  v7 = *(_QWORD *)(a4 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    v9 = a4 + 32;
    swift_bridgeObjectRetain(a4);
    do
    {
      sub_100095708(v9, (uint64_t)v10);
      sub_100095744((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063C58);
      IEEE80211InformationElement.hash(into:)();
      sub_100095744((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063518);
      v9 += 56;
      --v7;
    }
    while (v7);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

uint64_t static IEEE80211Frame.Management.Beacon.__derived_struct_equals(_:_:)(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if (a1 == a4 && (unsigned __int16)a2 == (unsigned __int16)a5 && HIWORD(a2) == HIWORD(a5))
    return sub_100089C38(a3, a6);
  else
    return 0;
}

uint64_t sub_100166BCC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100166C00 + 4 * byte_10034B4D6[*v0]))(0x6D617473656D6974, 0xE900000000000070);
}

uint64_t sub_100166C00()
{
  return 0x6E496E6F63616562;
}

uint64_t sub_100166C24()
{
  return 0x696C696261706163;
}

uint64_t sub_100166C44()
{
  return 0x73746E656D656C65;
}

uint64_t sub_100166C5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100174428(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100166C80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016E98C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100166CA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016E98C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Beacon.encode(to:)(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  char v23;
  _BYTE v24[2];

  v21 = a3;
  v8 = sub_100012C44(&qword_100409408);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_10016E98C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211Frame.Management.Beacon.CodingKeys, &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys, v14, v12, v13);
  v24[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  if (!v4)
  {
    v24[0] = 1;
    v15 = v21;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v24, v8);
    v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(v15), &v23, v8);
    v20 = a4;
    v22 = 3;
    v16 = sub_100012C44(&qword_100409418);
    v17 = sub_10017536C(&qword_100409420, (uint64_t (*)(void))sub_10016E9D0, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v22, v8, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int IEEE80211Frame.Management.Beacon.hashValue.getter(Swift::UInt64 a1, unsigned int a2, uint64_t a3)
{
  Swift::UInt16 v4;
  unsigned int v6;
  Swift::UInt v7;
  uint64_t v8;
  _QWORD v10[9];
  _BYTE v11[56];

  v4 = a2;
  v6 = HIWORD(a2);
  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  v7 = *(_QWORD *)(a3 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    v8 = a3 + 32;
    swift_bridgeObjectRetain(a3);
    do
    {
      sub_100095708(v8, (uint64_t)v11);
      sub_100095744((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063C58);
      IEEE80211InformationElement.hash(into:)();
      sub_100095744((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063518);
      v8 += 56;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease(a3);
  }
  return Hasher._finalize()();
}

uint64_t IEEE80211Frame.Management.Beacon.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_10016E3A8(a1);
  if (v1)
    return v3;
  return result;
}

Swift::Int sub_100166F90()
{
  uint64_t v0;

  return IEEE80211Frame.Management.Beacon.hashValue.getter(*(_QWORD *)v0, *(_DWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

double sub_100166FA0(int a1)
{
  uint64_t v1;

  return IEEE80211Frame.Management.Beacon.hash(into:)(a1, *(_QWORD *)v1, *(_DWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

Swift::Int sub_100166FB0()
{
  uint64_t v0;
  Swift::UInt64 v1;
  uint64_t v2;
  Swift::UInt16 v3;
  Swift::UInt16 v4;
  Swift::UInt v5;
  uint64_t v6;
  _QWORD v8[9];
  _BYTE v9[56];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_WORD *)(v0 + 8);
  v4 = *(_WORD *)(v0 + 10);
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  v5 = *(_QWORD *)(v2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    v6 = v2 + 32;
    swift_bridgeObjectRetain(v2);
    do
    {
      sub_100095708(v6, (uint64_t)v9);
      sub_100095744((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063C58);
      IEEE80211InformationElement.hash(into:)();
      sub_100095744((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063518);
      v6 += 56;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v2);
  }
  return Hasher._finalize()();
}

uint64_t sub_100167098@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;

  result = sub_10016E3A8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001670D0(_QWORD *a1)
{
  uint64_t v1;

  return IEEE80211Frame.Management.Beacon.encode(to:)(a1, *(_QWORD *)v1, *(_DWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1001670F0(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10))
  {
    return sub_100089C38(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  }
  else
  {
    return 0;
  }
}

BOOL IEEE80211Frame.Management.Authentication.FiniteCyclicGroup.init(rawValue:)(__int16 a1)
{
  return a1 != 19;
}

uint64_t static NANInformationElement.ouiType.getter()
{
  return 19;
}

unsigned __int16 *sub_100167144@<X0>(unsigned __int16 *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 19;
  return result;
}

void sub_100167158(_WORD *a1@<X8>)
{
  *a1 = 19;
}

Swift::Int sub_100167164()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0x13u);
  return Hasher._finalize()();
}

void sub_1001671A4()
{
  Hasher._combine(_:)(0x13u);
}

Swift::Int sub_1001671C8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0x13u);
  return Hasher._finalize()();
}

uint64_t sub_100167204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100174CE0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100167260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100174CE0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001672AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100174C9C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100167308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100174C9C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

CoreP2P::IEEE80211Frame::Management::Authentication::SimulatenousAuthenticationOfEquals::MessageType_optional __swiftcall IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType.init(rawValue:)(Swift::UInt16 rawValue)
{
  CoreP2P::IEEE80211Frame::Management::Authentication::SimulatenousAuthenticationOfEquals::MessageType_optional v1;

  if (rawValue == 2)
    v1.value = CoreP2P_IEEE80211Frame_Management_Authentication_SimulatenousAuthenticationOfEquals_MessageType_confirm;
  else
    v1.value = CoreP2P_IEEE80211Frame_Management_Authentication_SimulatenousAuthenticationOfEquals_MessageType_unknownDefault;
  if (rawValue == 1)
    return 0;
  else
    return v1;
}

uint64_t NANInternetSharingStatistics.Provider.SharingMode.rawValue.getter(char a1)
{
  return (a1 & 1u) + 1;
}

unsigned __int16 *sub_10016737C@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  int v2;
  char v3;
  char v4;

  v2 = *result;
  if (v2 == 2)
    v3 = 1;
  else
    v3 = 2;
  if (v2 == 1)
    v4 = 0;
  else
    v4 = v3;
  *a2 = v4;
  return result;
}

void sub_10016739C(__int16 *a1@<X8>)
{
  _BYTE *v1;
  __int16 v2;

  if (*v1)
    v2 = 2;
  else
    v2 = 1;
  *a1 = v2;
}

Swift::Int sub_1001673B4()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt16 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100167400()
{
  _BYTE *v0;
  Swift::UInt16 v1;

  if (*v0)
    v1 = 2;
  else
    v1 = 1;
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100167434()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt16 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10016747C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100174C58();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001674D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100174C58();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.finiteFieldElement.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_100031FEC(a3, a4);
  return a3;
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.finiteFieldElement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10000E614(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  __n128 v10;
  __n128 v11;

  Hasher._combine(_:)(0x13u);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(a1, a2, a3, v10);
  sub_10000E614(a2, a3);
  sub_100031FEC(a4, a5);
  Data.hash(into:)(a1, a4, a5, v11);
  return sub_10000E614(a4, a5);
}

void static IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;

  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
  if ((v6 & 1) != 0)
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4);
}

unint64_t sub_100167680()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x72616C616373;
  if (*v0 != 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_1001676D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100174628(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001676FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016EA14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100167724(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016EA14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v21 = a5;
  v22 = a3;
  v9 = sub_100012C44(&qword_100409430);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v14);
  v15 = sub_10016EA14();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys, v15, v14, v13);
  LOBYTE(v23) = 0;
  v16 = sub_10016EA58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v23, v9, &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup, v16);
  if (!v5)
  {
    v17 = a4;
    v18 = v21;
    v23 = a2;
    v24 = v22;
    v25 = 1;
    v19 = sub_100068570();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v25, v9, &type metadata for Data, v19);
    v23 = v17;
    v24 = v18;
    v25 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v25, v9, &type metadata for Data, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  __n128 v8;
  __n128 v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11);
  Hasher._combine(_:)(0x13u);
  sub_100031FEC(a1, a2);
  Data.hash(into:)(v11, a1, a2, v8);
  sub_10000E614(a1, a2);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(v11, a3, a4, v9);
  sub_10000E614(a3, a4);
  return Hasher._finalize()();
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_10016D804(a1);
  if (v1)
    return v3;
  return result;
}

Swift::Int sub_1001679AC()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(0x13u);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v8, v1, v2, v5);
  sub_10000E614(v1, v2);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v8, v3, v4, v6);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_100167A54(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  Hasher._combine(_:)(0x13u);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v7);
  sub_10000E614(v3, v4);
  sub_100031FEC(v5, v6);
  Data.hash(into:)(a1, v5, v6, v8);
  return sub_10000E614(v5, v6);
}

Swift::Int sub_100167AE0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(0x13u);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v8, v1, v2, v5);
  sub_10000E614(v1, v2);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v8, v3, v4, v6);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_100167B84@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10016D804(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100167BB0(_QWORD *a1)
{
  uint64_t *v1;

  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void sub_100167BCC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = a1[2];
  v2 = a1[3];
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v3 & 1) != 0)
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v1, v2);
}

uint64_t sub_100167C30()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D7269666E6F63;
  else
    return 0x666E6F43646E6573;
}

uint64_t sub_100167C74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10017476C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100167C98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016EA9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100167CC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016EA9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;

  v18 = a4;
  v8 = sub_100012C44(&qword_100409448);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_10016EA9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys, v14, v12, v13);
  LOBYTE(v19[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v19, v8);
  if (!v4)
  {
    v19[0] = a3;
    v19[1] = v18;
    v20 = 1;
    v15 = sub_100068570();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v8, &type metadata for Data, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.init(from:)(_QWORD *a1)
{
  return sub_10016DA34(a1);
}

uint64_t sub_100167E44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10016DA34(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100167E70(_QWORD *a1)
{
  unsigned __int16 *v1;

  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.encode(to:)(a1, *v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

uint64_t IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  __n128 v10;
  __n128 v11;
  __n128 v12;

  if ((a5 & 0x2000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a2);
    sub_100031FEC(a3, a4);
    Data.hash(into:)(a1, a3, a4, v12);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0x13u);
    sub_10016EAE0(a2, a3, a4, a5, (void (*)(void))sub_100031FEC);
    sub_100031FEC(a2, a3);
    Data.hash(into:)(a1, a2, a3, v10);
    sub_10000E614(a2, a3);
    sub_100031FEC(a4, a5);
    Data.hash(into:)(a1, a4, a5, v11);
    sub_10000E614(a4, a5);
  }
  return sub_10016EAE0(a2, a3, a4, a5, (void (*)(void))sub_10000E614);
}

Swift::Int IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hashValue.getter(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  __n128 v8;
  __n128 v9;
  __n128 v10;
  _QWORD v12[9];

  Hasher.init(_seed:)(v12);
  if ((a4 & 0x2000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
    sub_100031FEC(a2, a3);
    Data.hash(into:)(v12, a2, a3, v10);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0x13u);
    sub_10016EAE0(a1, a2, a3, a4, (void (*)(void))sub_100031FEC);
    sub_100031FEC(a1, a2);
    Data.hash(into:)(v12, a1, a2, v8);
    sub_10000E614(a1, a2);
    sub_100031FEC(a3, a4);
    Data.hash(into:)(v12, a3, a4, v9);
    sub_10000E614(a3, a4);
  }
  sub_10016EAE0(a1, a2, a3, a4, (void (*)(void))sub_10000E614);
  return Hasher._finalize()();
}

Swift::Int sub_1001680C4()
{
  uint64_t v0;

  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001680D0(uint64_t a1)
{
  uint64_t v1;

  return IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

Swift::Int sub_1001680DC()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  _QWORD v9[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)(v9);
  if ((v4 & 0x2000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    sub_100031FEC(v2, v3);
    Data.hash(into:)(v9, v2, v3, v7);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0x13u);
    sub_10016EAE0(v1, v2, v3, v4, (void (*)(void))sub_100031FEC);
    sub_100031FEC(v1, v2);
    Data.hash(into:)(v9, v1, v2, v5);
    sub_10000E614(v1, v2);
    sub_100031FEC(v3, v4);
    Data.hash(into:)(v9, v3, v4, v6);
    sub_10000E614(v3, v4);
  }
  sub_10016EAE0(v1, v2, v3, v4, (void (*)(void))sub_10000E614);
  return Hasher._finalize()();
}

BOOL sub_1001681FC(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO012SimulatenousF8OfEqualsO21__derived_enum_equalsySbAI_AItFZ_0(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.rsnCapability.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10016EB3C(v1 + 8, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.rsnCapability.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10016EB78(a1, v1 + 8);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.preAssociationSecurityNegotiationParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10016EBB4(v1 + 64, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.preAssociationSecurityNegotiationParameters.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10016EBF0(a1, v1 + 64);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.vendorSpecific.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10016EC2C(v1 + 112, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.vendorSpecific.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10016EC74(a1, v1 + 112);
}

void IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:)(uint64_t a1)
{
  char *v1;
  __int128 v3;
  uint64_t v4;
  Swift::UInt v5;
  Swift::UInt8 *v6;
  Swift::UInt8 v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  _OWORD v27[2];
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;

  Hasher._combine(_:)(word_10034CF08[*v1]);
  v3 = *(_OWORD *)(v1 + 24);
  v26 = *(_OWORD *)(v1 + 8);
  v27[0] = v3;
  *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)(v1 + 33);
  sub_10016ECBC(&v26);
  IEEE80211InformationElement.RSNCapability.hash(into:)(a1);
  sub_10016ED04(&v26);
  v4 = *((_QWORD *)v1 + 7);
  v5 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    v6 = (Swift::UInt8 *)(v4 + 32);
    do
    {
      v7 = *v6++;
      Hasher._combine(_:)(v7);
      --v5;
    }
    while (v5);
  }
  v8 = *((_OWORD *)v1 + 5);
  v22 = *((_OWORD *)v1 + 4);
  v23 = v8;
  v24 = *((_OWORD *)v1 + 6);
  v9 = v8;
  if ((unint64_t)v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_10016ED48(&v22, (void (*)(_QWORD, _QWORD, _QWORD))sub_100063C28, (void (*)(uint64_t, uint64_t))sub_1000339F4);
  }
  else
  {
    v10 = v22;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    sub_10016ED48(&v22, (void (*)(_QWORD, _QWORD, _QWORD))sub_100063C28, (void (*)(uint64_t, uint64_t))sub_1000339F4);
    sub_100063C28(v10, *((uint64_t *)&v10 + 1), v9);
    Data.hash(into:)(a1, *((_QWORD *)&v10 + 1), v9, v11);
    sub_1000634E8(v10, *((uint64_t *)&v10 + 1), v9);
  }
  sub_100063EB8((uint64_t)&v23 + 8, (uint64_t)&v25, &qword_100409460);
  sub_100063EB8((uint64_t)&v25, (uint64_t)&v35, &qword_100409460);
  if (v35 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }
  v12 = *((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v13 = v24;
    Hasher._combine(_:)(1u);
    sub_100031FEC(v13, v12);
    Data.hash(into:)(a1, v13, v12, v14);
    sub_10000E658(v13, v12);
  }
  sub_10016ED48(&v22, (void (*)(_QWORD, _QWORD, _QWORD))sub_1000634E8, (void (*)(uint64_t, uint64_t))sub_10000E658);
  v15 = v1[160];
  if (v15 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v17 = *((_QWORD *)v1 + 18);
    v16 = *((_QWORD *)v1 + 19);
    v19 = *((_QWORD *)v1 + 16);
    v18 = *((_QWORD *)v1 + 17);
    v21 = *((_QWORD *)v1 + 15);
    v28 = *((_QWORD *)v1 + 14);
    v20 = v28;
    v29 = v21;
    v30 = v19;
    v31 = v18;
    v32 = v17;
    v33 = v16;
    v34 = v15;
    Hasher._combine(_:)(1u);
    sub_100063C58(v20, v21, v19, v18, v17, v16, v15);
    IEEE80211InformationElement.hash(into:)();
    sub_100063504(v20, v21, v19, v18, v17, v16, v15);
  }
}

uint64_t sub_10016851C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100168554 + 4 * byte_10034B4DA[a1]))(0x6F43737574617473, 0xEA00000000006564);
}

uint64_t sub_100168554()
{
  return 0x62617061436E7372;
}

unint64_t sub_100168578()
{
  return 0xD000000000000015;
}

unint64_t sub_100168594()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1001685B4()
{
  return 0x7053726F646E6576;
}

uint64_t sub_1001685D8()
{
  unsigned __int8 *v0;

  return sub_10016851C(*v0);
}

uint64_t sub_1001685E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100174874(a1, a2);
  *a3 = result;
  return result;
}

void sub_100168604(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100168610(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016ED94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100168638(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016ED94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNRequest.encode(to:)(_QWORD *a1)
{
  return sub_100168874(a1, &qword_100409468, (uint64_t (*)(void))sub_10016ED94, (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys);
}

Swift::Int IEEE80211Frame.Management.Authentication.PASNResponse.hashValue.getter()
{
  return sub_1000DE8A0((void (*)(_QWORD *))IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:));
}

double IEEE80211Frame.Management.Authentication.PASNRequest.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100168AE0(a1, &qword_100409710, (uint64_t (*)(void))sub_10016ED94, (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys, a2).n128_u64[0];
  return result;
}

Swift::Int sub_1001686C4(uint64_t a1, uint64_t a2)
{
  return sub_1000DE8EC(a1, a2, (void (*)(_QWORD *))IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:));
}

Swift::Int sub_1001686D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D72EC(a1, a2, a3, (void (*)(_QWORD *))IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:));
}

double sub_1001686E0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100168B80(a1, &qword_100409710, (uint64_t (*)(void))sub_10016ED94, (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys, a2).n128_u64[0];
  return result;
}

uint64_t sub_10016870C(_QWORD *a1)
{
  return IEEE80211Frame.Management.Authentication.PASNRequest.encode(to:)(a1);
}

BOOL sub_100168764(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[10];
  char v14;
  _OWORD v15[10];
  char v16;

  v2 = *(_OWORD *)(a1 + 144);
  v13[8] = *(_OWORD *)(a1 + 128);
  v13[9] = v2;
  v14 = *(_BYTE *)(a1 + 160);
  v3 = *(_OWORD *)(a1 + 80);
  v13[4] = *(_OWORD *)(a1 + 64);
  v13[5] = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v13[6] = *(_OWORD *)(a1 + 96);
  v13[7] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v6;
  v7 = *(_OWORD *)(a2 + 144);
  v15[8] = *(_OWORD *)(a2 + 128);
  v15[9] = v7;
  v16 = *(_BYTE *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 80);
  v15[4] = *(_OWORD *)(a2 + 64);
  v15[5] = v8;
  v9 = *(_OWORD *)(a2 + 112);
  v15[6] = *(_OWORD *)(a2 + 96);
  v15[7] = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v11;
  return _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestV23__derived_struct_equalsySbAI_AItFZ_0((char *)v13, (char *)v15);
}

uint64_t sub_1001687F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016EEE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100168820(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016EEE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNResponse.encode(to:)(_QWORD *a1)
{
  return sub_100168874(a1, &qword_100409498, (uint64_t (*)(void))sub_10016EEE8, (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys);
}

uint64_t sub_100168874(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[2];
  __int128 v26;
  _BYTE v27[32];
  _BYTE v28[56];
  char v29;

  v7 = v4;
  v9 = sub_100012C44(a2);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10003259C(a1, v13);
  v15 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v15, v13, v14);
  LOBYTE(v26) = *(_BYTE *)v7;
  v29 = 0;
  v16 = sub_10016EDD8();
  v17 = v25[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v29, v9, &type metadata for IEEE80211Status, v16);
  if (!v17)
  {
    v18 = *(_OWORD *)(v7 + 24);
    v26 = *(_OWORD *)(v7 + 8);
    *(_OWORD *)v27 = v18;
    *(_OWORD *)&v27[9] = *(_OWORD *)(v7 + 33);
    v29 = 1;
    v19 = sub_10016EE1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v29, v9, &type metadata for IEEE80211InformationElement.RSNCapability, v19);
    *(_QWORD *)&v26 = *(_QWORD *)(v7 + 56);
    v29 = 2;
    v20 = sub_10016EE60();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v29, v9, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability, v20);
    v21 = *(_OWORD *)(v7 + 80);
    v26 = *(_OWORD *)(v7 + 64);
    *(_OWORD *)v27 = v21;
    *(_OWORD *)&v27[16] = *(_OWORD *)(v7 + 96);
    v29 = 3;
    v22 = sub_10016EEA4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v29, v9, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters, v22);
    sub_100063EB8(v7 + 112, (uint64_t)v28, &qword_100409458);
    sub_100063EB8((uint64_t)v28, (uint64_t)&v26, &qword_100409458);
    v29 = 4;
    v23 = sub_10016E9D0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v29, v9, &type metadata for IEEE80211InformationElement, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

double IEEE80211Frame.Management.Authentication.PASNResponse.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100168AE0(a1, &qword_1004096F0, (uint64_t (*)(void))sub_10016EEE8, (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys, a2).n128_u64[0];
  return result;
}

__n128 sub_100168AE0@<Q0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[10];
  char v13;

  sub_10016DD4C(a1, a2, a3, a4, (uint64_t)v12);
  if (!v5)
  {
    v8 = v12[9];
    *(_OWORD *)(a5 + 128) = v12[8];
    *(_OWORD *)(a5 + 144) = v8;
    *(_BYTE *)(a5 + 160) = v13;
    v9 = v12[5];
    *(_OWORD *)(a5 + 64) = v12[4];
    *(_OWORD *)(a5 + 80) = v9;
    v10 = v12[7];
    *(_OWORD *)(a5 + 96) = v12[6];
    *(_OWORD *)(a5 + 112) = v10;
    v11 = v12[1];
    *(_OWORD *)a5 = v12[0];
    *(_OWORD *)(a5 + 16) = v11;
    result = (__n128)v12[3];
    *(_OWORD *)(a5 + 32) = v12[2];
    *(__n128 *)(a5 + 48) = result;
  }
  return result;
}

double sub_100168B54@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100168B80(a1, &qword_1004096F0, (uint64_t (*)(void))sub_10016EEE8, (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys, a2).n128_u64[0];
  return result;
}

__n128 sub_100168B80@<Q0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[10];
  char v13;

  sub_10016DD4C(a1, a2, a3, a4, (uint64_t)v12);
  if (!v5)
  {
    v8 = v12[9];
    *(_OWORD *)(a5 + 128) = v12[8];
    *(_OWORD *)(a5 + 144) = v8;
    *(_BYTE *)(a5 + 160) = v13;
    v9 = v12[5];
    *(_OWORD *)(a5 + 64) = v12[4];
    *(_OWORD *)(a5 + 80) = v9;
    v10 = v12[7];
    *(_OWORD *)(a5 + 96) = v12[6];
    *(_OWORD *)(a5 + 112) = v10;
    v11 = v12[1];
    *(_OWORD *)a5 = v12[0];
    *(_OWORD *)(a5 + 16) = v11;
    result = (__n128)v12[3];
    *(_OWORD *)(a5 + 32) = v12[2];
    *(__n128 *)(a5 + 48) = result;
  }
  return result;
}

uint64_t sub_100168C00(_QWORD *a1)
{
  return IEEE80211Frame.Management.Authentication.PASNResponse.encode(to:)(a1);
}

BOOL sub_100168C58(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[10];
  char v14;
  _OWORD v15[10];
  char v16;

  v2 = *(_OWORD *)(a1 + 144);
  v13[8] = *(_OWORD *)(a1 + 128);
  v13[9] = v2;
  v14 = *(_BYTE *)(a1 + 160);
  v3 = *(_OWORD *)(a1 + 80);
  v13[4] = *(_OWORD *)(a1 + 64);
  v13[5] = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v13[6] = *(_OWORD *)(a1 + 96);
  v13[7] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v6;
  v7 = *(_OWORD *)(a2 + 144);
  v15[8] = *(_OWORD *)(a2 + 128);
  v15[9] = v7;
  v16 = *(_BYTE *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 80);
  v15[4] = *(_OWORD *)(a2 + 64);
  v15[5] = v8;
  v9 = *(_OWORD *)(a2 + 112);
  v15[6] = *(_OWORD *)(a2 + 96);
  v15[7] = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v11;
  return _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO12PASNResponseV23__derived_struct_equalsySbAI_AItFZ_0((char *)v13, (char *)v15);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNConfirm.preAssociationSecurityNegotiationParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10016EBB4(v1 + 8, a1);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNConfirm.preAssociationSecurityNegotiationParameters.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10016EBF0(a1, v1 + 8);
}

_QWORD *IEEE80211Frame.Management.Authentication.PASNConfirm.hash(into:)(uint64_t a1)
{
  char *v1;
  char *v2;
  __n128 v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;

  v2 = v1;
  Hasher._combine(_:)(word_10034CF08[*v2]);
  v9 = *(_OWORD *)(v2 + 8);
  v10 = *(_OWORD *)(v2 + 24);
  v11 = *(_OWORD *)(v2 + 40);
  if ((unint64_t)v10 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_10016EF2C(v2, (void (*)(_QWORD, _QWORD, _QWORD))sub_100063C28, (void (*)(uint64_t, uint64_t))sub_1000339F4);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    sub_10016EF2C(v2, (void (*)(_QWORD, _QWORD, _QWORD))sub_100063C28, (void (*)(uint64_t, uint64_t))sub_1000339F4);
    sub_100063C28(v9, *((uint64_t *)&v9 + 1), v10);
    Data.hash(into:)(a1, *((_QWORD *)&v9 + 1), v10, v4);
    sub_1000634E8(v9, *((uint64_t *)&v9 + 1), v10);
  }
  sub_100063EB8((uint64_t)&v10 + 8, (uint64_t)&v12, &qword_100409460);
  sub_100063EB8((uint64_t)&v12, (uint64_t)&v13, &qword_100409460);
  if (v13 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }
  v5 = *((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v6 = v11;
    Hasher._combine(_:)(1u);
    sub_100031FEC(v6, v5);
    Data.hash(into:)(a1, v6, v5, v7);
    sub_10000E658(v6, v5);
  }
  return sub_10016EF2C(v2, (void (*)(_QWORD, _QWORD, _QWORD))sub_1000634E8, (void (*)(uint64_t, uint64_t))sub_10000E658);
}

BOOL static IEEE80211Frame.Management.Authentication.PASNConfirm.__derived_struct_equals(_:_:)(char *a1, char *a2)
{
  __int128 v2;
  __int128 v3;
  unint64_t v4;
  char v5;
  char v6;
  __int128 v7;
  __int128 v8;
  char v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  char v21;

  if (word_10034CF08[*a1] != word_10034CF08[*a2])
    return 0;
  v2 = *(_OWORD *)(a1 + 24);
  v16 = *(_OWORD *)(a1 + 8);
  v17 = v2;
  v18 = *(_OWORD *)(a1 + 40);
  v3 = *(_OWORD *)(a2 + 24);
  v12 = *(_OWORD *)(a2 + 8);
  *((_QWORD *)&v13 + 1) = *((_QWORD *)a2 + 4);
  v14 = *(_OWORD *)(a2 + 40);
  v4 = v3;
  if ((unint64_t)v17 >> 60 == 15)
  {
    if ((unint64_t)v3 >> 60 == 15)
      goto LABEL_4;
LABEL_8:
    sub_100063C28(v16, *((uint64_t *)&v16 + 1), v17);
    sub_100063C28(v12, *((uint64_t *)&v12 + 1), v4);
    sub_1000634E8(v16, *((uint64_t *)&v16 + 1), v17);
    sub_1000634E8(v12, *((uint64_t *)&v12 + 1), v4);
    return 0;
  }
  if ((unint64_t)v3 >> 60 == 15)
    goto LABEL_8;
  if ((unsigned __int16)v16 != (unsigned __int16)v12)
    return 0;
  sub_100063C28(v16, *((uint64_t *)&v16 + 1), v17);
  sub_100063C28(v12, *((uint64_t *)&v12 + 1), v4);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((uint64_t *)&v16 + 1), v17);
  v6 = v5;
  sub_1000634E8(v12, *((uint64_t *)&v12 + 1), v4);
  sub_1000634E8(v16, *((uint64_t *)&v16 + 1), v17);
  if ((v6 & 1) == 0)
    return 0;
LABEL_4:
  sub_100063EB8((uint64_t)&v17 + 8, (uint64_t)&v19, &qword_100409460);
  sub_100063EB8((uint64_t)&v13 + 8, (uint64_t)&v15, &qword_100409460);
  sub_100063EB8((uint64_t)&v19, (uint64_t)&v20, &qword_100409460);
  if ((v20 & 1) != 0)
  {
    sub_100063EB8((uint64_t)&v15, (uint64_t)&v21, &qword_100409460);
    if (v21 != 1)
      return 0;
  }
  else
  {
    sub_100063EB8((uint64_t)&v15, (uint64_t)&v21, &qword_100409460);
    if ((v21 & 1) != 0)
      return 0;
  }
  v7 = v18;
  v8 = v14;
  if (*((_QWORD *)&v18 + 1) >> 60 == 15)
  {
    if (*((_QWORD *)&v14 + 1) >> 60 == 15)
      return 1;
    goto LABEL_17;
  }
  if (*((_QWORD *)&v14 + 1) >> 60 == 15)
  {
LABEL_17:
    sub_1000339F4(v18, *((unint64_t *)&v18 + 1));
    sub_1000339F4(v8, *((unint64_t *)&v8 + 1));
    sub_10000E658(v7, *((unint64_t *)&v7 + 1));
    sub_10000E658(v8, *((unint64_t *)&v8 + 1));
    return 0;
  }
  sub_1000339F4(v18, *((unint64_t *)&v18 + 1));
  sub_1000339F4(v8, *((unint64_t *)&v8 + 1));
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v7, *((uint64_t *)&v7 + 1));
  v10 = v9;
  sub_10000E658(v8, *((unint64_t *)&v8 + 1));
  sub_10000E658(v7, *((unint64_t *)&v7 + 1));
  return (v10 & 1) != 0;
}

uint64_t sub_100169150()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000002BLL;
  else
    return 0x6F43737574617473;
}

uint64_t sub_100169194@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100174AD8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001691B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016EF78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001691E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016EF78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211Frame.Management.Authentication.PASNConfirm.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  _OWORD v16[3];
  char v17;

  v3 = v1;
  v5 = sub_100012C44(&qword_1004094A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_10016EF78();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys, &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys, v11, v9, v10);
  LOBYTE(v16[0]) = *(_BYTE *)v3;
  v17 = 0;
  v12 = sub_10016EDD8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v17, v5, &type metadata for IEEE80211Status, v12);
  if (!v2)
  {
    v13 = *(_OWORD *)(v3 + 24);
    v16[0] = *(_OWORD *)(v3 + 8);
    v16[1] = v13;
    v16[2] = *(_OWORD *)(v3 + 40);
    v17 = 1;
    v14 = sub_10016EEA4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v17, v5, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int IEEE80211Frame.Management.Authentication.PASNConfirm.hashValue.getter()
{
  char *v0;
  __int128 v1;
  unint64_t v2;
  __int128 v3;
  __n128 v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD v9[9];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  char v14;

  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(word_10034CF08[*v0]);
  v1 = *(_OWORD *)(v0 + 24);
  v10 = *(_OWORD *)(v0 + 8);
  v11 = v1;
  v12 = *(_OWORD *)(v0 + 40);
  v2 = v1;
  if ((unint64_t)v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_10016EF2C(v0, (void (*)(_QWORD, _QWORD, _QWORD))sub_100063C28, (void (*)(uint64_t, uint64_t))sub_1000339F4);
  }
  else
  {
    v3 = v10;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_10016EF2C(v0, (void (*)(_QWORD, _QWORD, _QWORD))sub_100063C28, (void (*)(uint64_t, uint64_t))sub_1000339F4);
    sub_100063C28(v3, *((uint64_t *)&v3 + 1), v2);
    Data.hash(into:)(v9, *((_QWORD *)&v3 + 1), v2, v4);
    sub_1000634E8(v3, *((uint64_t *)&v3 + 1), v2);
  }
  sub_100063EB8((uint64_t)&v11 + 8, (uint64_t)&v13, &qword_100409460);
  sub_100063EB8((uint64_t)&v13, (uint64_t)&v14, &qword_100409460);
  if (v14 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }
  v5 = *((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v6 = v12;
    Hasher._combine(_:)(1u);
    sub_100031FEC(v6, v5);
    Data.hash(into:)(v9, v6, v5, v7);
    sub_10000E658(v6, v5);
  }
  sub_10016EF2C(v0, (void (*)(_QWORD, _QWORD, _QWORD))sub_1000634E8, (void (*)(uint64_t, uint64_t))sub_10000E658);
  return Hasher._finalize()();
}

double IEEE80211Frame.Management.Authentication.PASNConfirm.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_10016DBA0(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

Swift::Int sub_100169580()
{
  return IEEE80211Frame.Management.Authentication.PASNConfirm.hashValue.getter();
}

_QWORD *sub_1001695C0(uint64_t a1)
{
  return IEEE80211Frame.Management.Authentication.PASNConfirm.hash(into:)(a1);
}

Swift::Int sub_100169600()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9;
  _QWORD v11[9];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  v4 = *((_QWORD *)v0 + 3);
  v5 = v0[32];
  v6 = *((_QWORD *)v0 + 5);
  v7 = *((_QWORD *)v0 + 6);
  Hasher.init(_seed:)(v11);
  Hasher._combine(_:)(word_10034CF08[v1]);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_100063C28(v2, v3, v4);
    sub_1000339F4(v6, v7);
    if (!v5)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(0x13u);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    sub_100063C28(v2, v3, v4);
    sub_1000339F4(v6, v7);
    sub_100063C28(v2, v3, v4);
    Data.hash(into:)(v11, v3, v4, v8);
    sub_1000634E8(v2, v3, v4);
    if (!v5)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
LABEL_6:
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_100031FEC(v6, v7);
    Data.hash(into:)(v11, v6, v7, v9);
    sub_10000E658(v6, v7);
  }
  sub_1000634E8(v2, v3, v4);
  sub_10000E658(v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_10016979C(_QWORD *a1)
{
  return IEEE80211Frame.Management.Authentication.PASNConfirm.encode(to:)(a1);
}

BOOL sub_1001697B0(char *a1, char *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v10[3];
  _OWORD v11[3];

  v2 = *a1;
  v3 = *(_OWORD *)(a1 + 24);
  v10[0] = *(_OWORD *)(a1 + 8);
  v10[1] = v3;
  v4 = *a2;
  v5 = *(_OWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 24);
  v10[2] = *(_OWORD *)(a1 + 40);
  v11[0] = v5;
  v7 = *(_OWORD *)(a2 + 40);
  v11[1] = v6;
  v11[2] = v7;
  return word_10034CF08[v2] == word_10034CF08[v4]
      && _s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v10, (uint64_t *)v11);
}

void IEEE80211Frame.Management.Authentication.hash(into:)()
{
  __int128 *v0;
  char *v1;
  __int128 v2[10];
  _BYTE v3[400];
  _BYTE v4[168];

  sub_10016EFBC(v0, (uint64_t)v2);
  sub_10016EFBC(v2, (uint64_t)v4);
  sub_10016EFBC(v0, (uint64_t)v3);
  v1 = (char *)sub_100169890 + 4 * byte_10034B4DF[sub_10016EFFC((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_100169890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[344];
  _BYTE v7[184];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;

  v3 = sub_10016F074((uint64_t)v7);
  v14 = *(_OWORD *)(v3 + 112);
  v15 = *(_OWORD *)(v3 + 128);
  v16 = *(_OWORD *)(v3 + 144);
  v17 = *(_BYTE *)(v3 + 160);
  v10 = *(_OWORD *)(v3 + 48);
  v11 = *(_OWORD *)(v3 + 64);
  v12 = *(_OWORD *)(v3 + 80);
  v13 = *(_OWORD *)(v3 + 96);
  *(_OWORD *)&v7[168] = *(_OWORD *)v3;
  v8 = *(_OWORD *)(v3 + 16);
  v9 = *(_OWORD *)(v3 + 32);
  Hasher._combine(_:)(0);
  sub_10016EFBC((__int128 *)(v2 - 232), (uint64_t)v6);
  v4 = sub_10016F074((uint64_t)v6);
  sub_10016F084(v4);
  IEEE80211Frame.Management.Authentication.PASNResponse.hash(into:)(v0);
  return sub_10016F008(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000633AC);
}

Swift::Int IEEE80211Frame.Management.Authentication.hashValue.getter()
{
  return sub_1000DE8A0((void (*)(_QWORD *))IEEE80211Frame.Management.Authentication.hash(into:));
}

Swift::Int sub_100169BF8(uint64_t a1, uint64_t a2)
{
  return sub_10016B23C(a1, a2, (void (*)(uint64_t, _BYTE *))sub_10016EFBC, (void (*)(_QWORD *))IEEE80211Frame.Management.Authentication.hash(into:));
}

void sub_100169C0C()
{
  __int128 *v0;
  _BYTE v1[168];

  sub_10016EFBC(v0, (uint64_t)v1);
  IEEE80211Frame.Management.Authentication.hash(into:)();
}

Swift::Int sub_100169C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10016B2E4(a1, a2, a3, (void (*)(uint64_t, _BYTE *))sub_10016EFBC, (void (*)(_QWORD *))IEEE80211Frame.Management.Authentication.hash(into:));
}

uint64_t IEEE80211Frame.Management.Authentication.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5[10];

  result = sub_10016F6D0(a1, (uint64_t)v5);
  if (!v2)
    return sub_10016EFBC(v5, a2);
  return result;
}

uint64_t sub_100169CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016B354(a1, a2, a3, a4, (void (*)(uint64_t, _BYTE *))sub_10016EFBC, (uint64_t (*)(_BYTE *, _BYTE *))_s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO21__derived_enum_equalsySbAG_AGtFZ_0);
}

unint64_t IEEE80211Frame.Management.ActionFrame.Category.rawValue.getter(char a1)
{
  return 0x7F7E0907060504uLL >> (8 * a1);
}

BOOL sub_100169CD8(_BYTE *a1, _BYTE *a2)
{
  return ((0x7F7E0907060504uLL >> (8 * *a1)) & 0x7F) == ((0x7F7E0907060504uLL >> (8 * *a2)) & 0x7F);
}

uint64_t sub_100169D14@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8CategoryO8rawValueAISgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100169D3C(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = 0x7F7E0907060504uLL >> (8 * *v1);
}

Swift::Int sub_100169D60()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * v1));
  return Hasher._finalize()();
}

void sub_100169DB8()
{
  _BYTE *v0;

  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * *v0));
}

Swift::Int sub_100169DF8()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * v1));
  return Hasher._finalize()();
}

uint64_t sub_100169E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100174C14();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100169EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100174C14();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL IEEE80211Frame.Management.ActionFrame.PublicActionField.init(rawValue:)(char a1)
{
  return a1 != 9;
}

uint64_t IEEE80211Frame.Management.ActionFrame.PublicActionField.rawValue.getter()
{
  return 9;
}

_BYTE *sub_100169F0C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 9;
  return result;
}

Swift::Int sub_100169F20()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(9u);
  return Hasher._finalize()();
}

void sub_100169F60()
{
  Hasher._combine(_:)(9u);
}

Swift::Int sub_100169F84()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(9u);
  return Hasher._finalize()();
}

uint64_t sub_100169FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100174BD0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10016A01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100174BD0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt8 v7;
  Swift::UInt v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (a2 >> 30)
  {
    if (a2 >> 30 != 1)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(8u);
    Hasher._combine(_:)(a2);
    if ((a2 & 0x100) != 0)
      v7 = 3;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(BYTE2(a2));
    Hasher._combine(_:)(HIDWORD(a2));
    Hasher._combine(_:)(a3);
    v8 = *(_QWORD *)(a4 + 16);
    Hasher._combine(_:)(v8);
    if (v8)
    {
      v9 = *(_QWORD *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0) - 8);
      v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v11 = *(_QWORD *)(v9 + 72);
      swift_bridgeObjectRetain(a4);
      do
      {
        AWDLActionFrame.AWDLAttribute.hash(into:)();
        v10 += v11;
        --v8;
      }
      while (v8);
LABEL_17:
      sub_1000632E8(a2, a3, a4);
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if (a2 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(byte_10034CF81[(char)a2]);
    }
    v12 = *(_QWORD *)(a3 + 16);
    Hasher._combine(_:)(v12);
    if (v12)
    {
      v13 = *(_QWORD *)(type metadata accessor for NANAttribute(0) - 8);
      v14 = a3 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v15 = *(_QWORD *)(v13 + 72);
      swift_bridgeObjectRetain(a3);
      do
      {
        NANAttribute.hash(into:)();
        v14 += v15;
        --v12;
      }
      while (v12);
      goto LABEL_17;
    }
  }
}

Swift::Int IEEE80211Frame.Management.ActionFrame.Contents.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_10016A280()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_10016A2D8(uint64_t a1)
{
  uint64_t *v1;

  IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)(a1, *v1, v1[1], v1[2]);
}

Swift::Int sub_10016A2E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  IEEE80211Frame.Management.ActionFrame.Contents.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10016A338(uint64_t a1, uint64_t *a2)
{
  return _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8ContentsO21__derived_enum_equalsySbAI_AItFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *a2, a2[1], a2[2]);
}

uint64_t IEEE80211Frame.Management.ActionFrame.contents.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100063D24(a2, a3, a4);
  return a2;
}

uint64_t IEEE80211Frame.Management.ActionFrame.contents.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000632E8(v3[1], v3[2], v3[3]);
  v3[1] = a1;
  v3[2] = a2;
  v3[3] = a3;
  return result;
}

uint64_t IEEE80211Frame.Management.ActionFrame.nanActionFrame.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if ((a2 & 0xC0000000) != 0)
    return 0;
  v4 = a2;
  sub_100063D24(a2, a3, a4);
  return v4;
}

void IEEE80211Frame.Management.ActionFrame.nanActionFrame.setter(unsigned __int8 a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;

  if (a2)
  {
    v5 = v2[1];
    if ((v5 & 0xC0000000) != 0)
    {
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      sub_1000632E8(v5, v2[2], v2[3]);
      v2[1] = a1;
      v2[2] = a2;
      v2[3] = 0;
    }
  }
}

void (*IEEE80211Frame.Management.ActionFrame.nanActionFrame.modify(_QWORD *a1))(unsigned __int8 *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 8);
  if ((v3 & 0xC0000000) != 0)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v6 = v1 + 16;
    v5 = *(_QWORD *)(v1 + 16);
    v4 = v3;
    sub_100063D24(v3, v5, *(_QWORD *)(v6 + 8));
  }
  *a1 = v4;
  a1[1] = v5;
  return sub_10016A4E8;
}

void sub_10016A4E8(unsigned __int8 *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *((_QWORD *)a1 + 1);
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      v3 = (_QWORD *)*((_QWORD *)a1 + 2);
      v4 = v3[1];
      if ((v4 & 0xC0000000) == 0)
      {
        v6 = v3[2];
        v5 = v3[3];
        v7 = *a1;
        swift_bridgeObjectRetain(*((_QWORD *)a1 + 1));
        sub_1000632E8(v4, v6, v5);
        v3[1] = v7;
        v3[2] = v2;
        v3[3] = 0;
      }
    }
LABEL_7:
    swift_bridgeObjectRelease(v2);
    return;
  }
  if (!v2)
    return;
  v8 = (uint64_t *)*((_QWORD *)a1 + 2);
  if ((v8[1] & 0xC0000000) != 0)
    goto LABEL_7;
  v9 = *a1;
  sub_1000632E8(v8[1], v8[2], v8[3]);
  v8[1] = v9;
  v8[2] = v2;
  v8[3] = 0;
}

unint64_t IEEE80211Frame.Management.ActionFrame.awdlActionFrame.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;

  if ((a2 & 0xC0000000) != 0x40000000)
    return 0;
  v4 = a2 & 0xFFFFFFFF00FF01FFLL;
  sub_100063D24(a2, a3, a4);
  return v4;
}

double IEEE80211Frame.Management.ActionFrame.awdlActionFrame.setter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v3;
  double result;

  if (a3)
  {
    if ((v3[1] & 0xC0000000) == 0x40000000)
    {
      sub_1000632E8(v3[1], v3[2], v3[3]);
      v3[1] = a1 & 0xFFFFFFFF00FF01FFLL | 0x40000000;
      v3[2] = a2;
      v3[3] = a3;
    }
    else
    {
      *(_QWORD *)&result = swift_bridgeObjectRelease(a3).n128_u64[0];
    }
  }
  return result;
}

double (*IEEE80211Frame.Management.ActionFrame.awdlActionFrame.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  a1[3] = (unint64_t)v1;
  v3 = v1[1];
  if ((v3 & 0xC0000000) == 0x40000000)
  {
    v4 = v1[2];
    v5 = v1[3];
    v6 = v3 & 0xFFFFFFFF00FF01FFLL;
    v7 = v4;
    sub_100063D24(v3, v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v5 = 0;
  }
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v5;
  return sub_10016A704;
}

double sub_10016A704(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v2 = a1[2];
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      v3 = (_QWORD *)a1[3];
      v4 = v3[1];
      if ((v4 & 0xC0000000) == 0x40000000)
      {
        v6 = v3[2];
        v5 = v3[3];
        v7 = *((unsigned int *)a1 + 2);
        v8 = *a1;
        swift_bridgeObjectRetain(a1[2]);
        sub_1000632E8(v4, v6, v5);
        v3[1] = v8 & 0xFFFFFFFF00FF01FFLL | 0x40000000;
        v3[2] = v7;
        v3[3] = v2;
      }
    }
    goto LABEL_9;
  }
  if (v2)
  {
    v9 = (uint64_t *)a1[3];
    if ((v9[1] & 0xC0000000) != 0x40000000)
    {
LABEL_9:
      *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
      return result;
    }
    v10 = *((unsigned int *)a1 + 2);
    v11 = *a1;
    sub_1000632E8(v9[1], v9[2], v9[3]);
    v9[1] = v11 & 0xFFFFFFFF00FF01FFLL | 0x40000000;
    v9[2] = v10;
    v9[3] = v2;
  }
  return result;
}

void IEEE80211Frame.Management.ActionFrame.hash(into:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt8 v8;
  Swift::UInt v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  Hasher._combine(_:)(0x7F7E0907060504uLL >> (8 * a2));
  if (a3 >> 30)
  {
    if (a3 >> 30 != 1)
    {
      Hasher._combine(_:)(0);
LABEL_17:
      sub_1000632E8(a3, a4, a5);
      return;
    }
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(8u);
    Hasher._combine(_:)(a3);
    if ((a3 & 0x100) != 0)
      v8 = 3;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(BYTE2(a3));
    Hasher._combine(_:)(HIDWORD(a3));
    Hasher._combine(_:)(a4);
    v9 = *(_QWORD *)(a5 + 16);
    Hasher._combine(_:)(v9);
    if (v9)
    {
      v10 = *(_QWORD *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0) - 8);
      v11 = a5 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      sub_100063D24(a3, a4, a5);
      v12 = *(_QWORD *)(v10 + 72);
      do
      {
        AWDLActionFrame.AWDLAttribute.hash(into:)();
        v11 += v12;
        --v9;
      }
      while (v9);
      goto LABEL_17;
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if (a3 == 14)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(byte_10034CF81[(char)a3]);
    }
    v13 = *(_QWORD *)(a4 + 16);
    Hasher._combine(_:)(v13);
    if (v13)
    {
      v14 = *(_QWORD *)(type metadata accessor for NANAttribute(0) - 8);
      v15 = a4 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      sub_100063D24(a3, a4, a5);
      v16 = *(_QWORD *)(v14 + 72);
      do
      {
        NANAttribute.hash(into:)();
        v15 += v16;
        --v13;
      }
      while (v13);
      goto LABEL_17;
    }
  }
}

Swift::Int IEEE80211Frame.Management.ActionFrame.hashValue.getter(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  IEEE80211Frame.Management.ActionFrame.hash(into:)((uint64_t)v9, a1, a2, a3, a4);
  return Hasher._finalize()();
}

Swift::Int sub_10016AA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v6);
  IEEE80211Frame.Management.ActionFrame.hash(into:)((uint64_t)v6, v4, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_10016AAAC(uint64_t a1)
{
  uint64_t v1;

  IEEE80211Frame.Management.ActionFrame.hash(into:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

Swift::Int sub_10016AABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v6);
  IEEE80211Frame.Management.ActionFrame.hash(into:)((uint64_t)v6, v4, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10016AB18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10016FA58(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t IEEE80211Frame.Management.ActionFrame.init(from:)(_QWORD *a1)
{
  return sub_10016FA58(a1);
}

uint64_t sub_10016AB6C(_QWORD *a1)
{
  uint64_t v1;

  return IEEE80211Frame.Management.ActionFrame.encode(to:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t IEEE80211Frame.Management.ActionFrame.encode(to:)(_QWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  ValueMetadata *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  v10 = a1[3];
  v11 = a1[4];
  sub_10003259C(a1, v10);
  dispatch thunk of Encoder.unkeyedContainer()(v37, v10, v11);
  LOBYTE(v32) = a2;
  v12 = v38;
  v13 = v39;
  sub_100034C68((uint64_t)v37, v38);
  v14 = sub_10016FD38();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v32, &type metadata for IEEE80211Frame.Management.ActionFrame.Category, v14, v12, v13);
  if (!v5)
  {
    if (a3 >> 30)
    {
      if (a3 >> 30 != 1)
      {
        v29 = sub_100012C84();
        v30 = swift_allocError(&type metadata for WiFiError, v29, 0, 0);
        *(_OWORD *)v31 = xmmword_100337850;
        *(_BYTE *)(v31 + 16) = 2;
        swift_willThrow(v30);
        return sub_100014430(v37);
      }
      v32 = 5888;
      v33 = -14;
      v16 = v38;
      v17 = v39;
      sub_100034C68((uint64_t)v37, v38);
      v18 = sub_10016FD7C();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v32, &type metadata for OUI, v18, v16, v17);
      v32 = a3 & 0x1FF;
      v33 = BYTE2(a3);
      v34 = HIDWORD(a3);
      LODWORD(v35) = a4;
      v36 = a5;
      v19 = v38;
      v20 = v39;
      sub_100034C68((uint64_t)v37, v38);
      v21 = sub_10016FDC0();
      v22 = &type metadata for AWDLActionFrame;
    }
    else
    {
      v23 = v38;
      v24 = v39;
      sub_100034C68((uint64_t)v37, v38);
      v25 = sub_10016FE04();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v25, &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField, v25, v23, v24);
      v32 = 28496;
      v33 = -102;
      v26 = v38;
      v27 = v39;
      sub_100034C68((uint64_t)v37, v38);
      v28 = sub_10016FD7C();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v32, &type metadata for OUI, v28, v26, v27);
      LOBYTE(v32) = a3;
      v35 = a4;
      v19 = v38;
      v20 = v39;
      sub_100034C68((uint64_t)v37, v38);
      v21 = sub_10016FE48();
      v22 = &type metadata for NANActionFrame;
    }
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v32, v22, v21, v19, v20);
  }
  return sub_100014430(v37);
}

uint64_t sub_10016AE04(_QWORD *a1, _QWORD *a2)
{
  return static IEEE80211Frame.Management.ActionFrame.__derived_struct_equals(_:_:)(*(unsigned __int8 *)a1, a1[1], a1[2], a1[3], *(unsigned __int8 *)a2, a2[1], a2[2], a2[3]);
}

void IEEE80211Frame.Management.hash(into:)()
{
  __int128 *v0;
  char *v1;
  __int128 v2[10];
  _BYTE v3[408];
  _BYTE v4[168];

  sub_10016EFBC(v0, (uint64_t)v2);
  sub_10016EFBC(v2, (uint64_t)v4);
  sub_10016EFBC(v0, (uint64_t)v3);
  v1 = (char *)sub_10016AE94 + 4 * byte_10034B4E3[sub_10016FE8C((uint64_t)v3)];
  __asm { BR              X10 }
}

void sub_10016AE94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt64 v3;
  uint64_t v4;
  Swift::UInt16 v5;
  Swift::UInt16 v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[336];
  uint64_t v11;
  _BYTE v12[504];

  v2 = sub_10016FE98((uint64_t)&v11);
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_WORD *)(v2 + 8);
  v6 = *(_WORD *)(v2 + 10);
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  v7 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    v8 = v4 + 32;
    sub_10016EFBC((__int128 *)(v1 - 248), (uint64_t)v12);
    v9 = sub_10016FE98((uint64_t)v12);
    swift_bridgeObjectRetain(*(_QWORD *)(v9 + 16));
    do
    {
      sub_100095708(v8, (uint64_t)v10);
      sub_100095744((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063C58);
      IEEE80211InformationElement.hash(into:)();
      sub_100095744((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063518);
      v8 += 56;
      --v7;
    }
    while (v7);
    sub_10016F008(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100063308);
  }
}

Swift::Int IEEE80211Frame.Management.hashValue.getter()
{
  return sub_1000DE8A0((void (*)(_QWORD *))IEEE80211Frame.Management.hash(into:));
}

Swift::Int sub_10016B228(uint64_t a1, uint64_t a2)
{
  return sub_10016B23C(a1, a2, (void (*)(uint64_t, _BYTE *))sub_10011984C, (void (*)(_QWORD *))IEEE80211Frame.Management.hash(into:));
}

Swift::Int sub_10016B23C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _BYTE *), void (*a4)(_QWORD *))
{
  uint64_t v4;
  _QWORD v7[9];
  _BYTE v8[168];

  a3(v4, v8);
  Hasher.init(_seed:)(v7);
  a4(v7);
  return Hasher._finalize()();
}

void sub_10016B294()
{
  __int128 *v0;
  _BYTE v1[168];

  sub_10016EFBC(v0, (uint64_t)v1);
  IEEE80211Frame.Management.hash(into:)();
}

Swift::Int sub_10016B2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10016B2E4(a1, a2, a3, (void (*)(uint64_t, _BYTE *))sub_10011984C, (void (*)(_QWORD *))IEEE80211Frame.Management.hash(into:));
}

Swift::Int sub_10016B2E4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _BYTE *), void (*a5)(_QWORD *))
{
  uint64_t v5;
  _QWORD v8[9];
  _BYTE v9[168];

  a4(v5, v9);
  Hasher.init(_seed:)(v8);
  a5(v8);
  return Hasher._finalize()();
}

uint64_t sub_10016B340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10016B354(a1, a2, a3, a4, (void (*)(uint64_t, _BYTE *))sub_10011984C, (uint64_t (*)(_BYTE *, _BYTE *))_s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0);
}

uint64_t sub_10016B354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _BYTE *), uint64_t (*a6)(_BYTE *, _BYTE *))
{
  _BYTE v10[168];
  _BYTE v11[168];

  a5(a1, v10);
  a5(a2, v11);
  return a6(v10, v11) & 1;
}

double IEEE80211Frame.init(header:contents:)@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X8>)
{
  char v5;
  char v6;
  __int16 v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33[5];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];

  v5 = a3;
  v6 = a2;
  v7 = a1;
  v9 = a1 >> 16;
  v10 = HIDWORD(a1);
  v11 = a1 >> 40;
  v12 = HIWORD(a1);
  v13 = HIBYTE(a1);
  v14 = a2 >> 8;
  v21 = a2 >> 16;
  v22 = a2 >> 24;
  v23 = HIDWORD(a2);
  v24 = a2 >> 40;
  v25 = HIWORD(a2);
  v26 = HIBYTE(a2);
  v27 = a3 >> 8;
  v28 = a3 >> 16;
  v29 = a3 >> 24;
  v30 = HIDWORD(a3);
  v31 = a3 >> 40;
  v32 = HIWORD(a3);
  sub_10016EFBC(a4, (uint64_t)v33);
  sub_10016EFBC(v33, (uint64_t)&v34);
  LOWORD(v35) = v7;
  WORD1(v35) = v9;
  BYTE4(v35) = v10;
  BYTE5(v35) = v11;
  BYTE6(v35) = v12;
  BYTE7(v35) = v13;
  BYTE8(v35) = v6;
  BYTE9(v35) = v14;
  BYTE10(v35) = v21;
  BYTE11(v35) = v22;
  BYTE12(v35) = v23;
  BYTE13(v35) = v24;
  BYTE14(v35) = v25;
  HIBYTE(v35) = v26;
  LOBYTE(v36) = v5;
  BYTE1(v36) = v27;
  BYTE2(v36) = v28;
  BYTE3(v36) = v29;
  BYTE4(v36) = v30;
  BYTE5(v36) = v31;
  WORD3(v36) = v32;
  sub_10016EFBC(&v34, (uint64_t)&v36 + 8);
  v15 = v44;
  a5[8] = v43;
  a5[9] = v15;
  a5[10] = v45[0];
  *(_OWORD *)((char *)a5 + 169) = *(_OWORD *)((char *)v45 + 9);
  v16 = v40;
  a5[4] = v39;
  a5[5] = v16;
  v17 = v42;
  a5[6] = v41;
  a5[7] = v17;
  v18 = v36;
  *a5 = v35;
  a5[1] = v18;
  result = *(double *)&v37;
  v20 = v38;
  a5[2] = v37;
  a5[3] = v20;
  return result;
}

double IEEE80211Frame.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];

  sub_10016F15C(a1, v10);
  if (!v2)
  {
    v5 = v18;
    a2[8] = v17;
    a2[9] = v5;
    a2[10] = v19[0];
    *(_OWORD *)((char *)a2 + 169) = *(_OWORD *)((char *)v19 + 9);
    v6 = v14;
    a2[4] = v13;
    a2[5] = v6;
    v7 = v16;
    a2[6] = v15;
    a2[7] = v7;
    v8 = v10[1];
    *a2 = v10[0];
    a2[1] = v8;
    result = *(double *)&v11;
    v9 = v12;
    a2[2] = v11;
    a2[3] = v9;
  }
  return result;
}

uint64_t IEEE80211Frame.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v13;
  __int128 v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  __int128 v18[10];
  __int128 v19[10];
  __int128 v20[10];
  _BYTE v21[168];

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Encoder.unkeyedContainer()(v15, v3, v4);
  v13 = *v1;
  *(_QWORD *)&v14 = *((_QWORD *)v1 + 2);
  v5 = v16;
  v6 = v17;
  sub_100034C68((uint64_t)v15, v16);
  v7 = sub_10016FEA8();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v13, &type metadata for IEEE80211Frame.Header, v7, v5, v6);
  if (!v2)
  {
    sub_10016EFBC((__int128 *)((char *)v1 + 24), (uint64_t)v18);
    sub_10016EFBC(v18, (uint64_t)v19);
    if (!sub_100119838((uint64_t)v19))
    {
      sub_10016EFBC(v19, (uint64_t)v20);
      sub_10016EFBC(v20, (uint64_t)v21);
      v11 = (char *)&loc_10016B71C + 4 * byte_10034B4E7[sub_10016FE8C((uint64_t)v21)];
      __asm { BR              X10 }
    }
    v8 = sub_100012C84();
    v9 = swift_allocError(&type metadata for WiFiError, v8, 0, 0);
    *(_OWORD *)v10 = xmmword_100337850;
    *(_BYTE *)(v10 + 16) = 2;
    swift_willThrow(v9);
  }
  return sub_100014430(v15);
}

void sub_10016B81C()
{
  sub_10016FE98((uint64_t)&STACK[0x2C8]);
  JUMPOUT(0x10016B6A0);
}

void IEEE80211Frame.hash(into:)(int a1)
{
  uint64_t v1;
  char *v2;
  __int128 v3[21];
  _BYTE v4[336];

  IEEE80211Frame.Header.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
  sub_10016EFBC((__int128 *)(v1 + 24), (uint64_t)v3);
  sub_10016EFBC(v3, (uint64_t)v4);
  v2 = (char *)sub_10016B88C + 4 * byte_10034B4EB[sub_100119838((uint64_t)v4)];
  __asm { BR              X10 }
}

uint64_t sub_10016B88C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  __int128 v4;

  sub_10016EFBC(&v4, v1 - 200);
  sub_10016EFBC((__int128 *)(v1 - 200), (uint64_t)&v3);
  Hasher._combine(_:)(0);
  sub_10016D668(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063A48);
  IEEE80211Frame.Management.hash(into:)();
  return sub_10016D668(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
}

void IEEE80211Frame.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt16 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  char *v9;
  Swift::UInt8 v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  Swift::UInt8 v15;
  Swift::UInt8 v16;
  Swift::UInt8 v17;
  Swift::UInt8 v18;
  Swift::UInt8 v19;
  Swift::UInt8 v20;
  Swift::UInt16 v21;
  _QWORD v22[9];
  __int128 v23[21];
  _BYTE v24[344];

  Hasher.init(_seed:)(v22);
  v1 = *(_WORD *)(v0 + 2);
  v2 = *(_BYTE *)(v0 + 4);
  v3 = *(_BYTE *)(v0 + 5);
  v4 = *(_BYTE *)(v0 + 6);
  v5 = *(_BYTE *)(v0 + 7);
  v6 = *(_BYTE *)(v0 + 8);
  v7 = *(_BYTE *)(v0 + 9);
  v8 = *(_BYTE *)(v0 + 10);
  v10 = *(_BYTE *)(v0 + 11);
  v11 = *(_BYTE *)(v0 + 12);
  v12 = *(_BYTE *)(v0 + 13);
  v13 = *(_BYTE *)(v0 + 14);
  v14 = *(_BYTE *)(v0 + 15);
  v15 = *(_BYTE *)(v0 + 16);
  v16 = *(_BYTE *)(v0 + 17);
  v17 = *(_BYTE *)(v0 + 18);
  v18 = *(_BYTE *)(v0 + 19);
  v19 = *(_BYTE *)(v0 + 20);
  v20 = *(_BYTE *)(v0 + 21);
  v21 = *(_WORD *)(v0 + 22);
  Hasher._combine(_:)(*(_WORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  sub_10016EFBC((__int128 *)(v0 + 24), (uint64_t)v23);
  sub_10016EFBC(v23, (uint64_t)v24);
  v9 = (char *)sub_10016BAE0 + 4 * byte_10034B4EF[sub_100119838((uint64_t)v24)];
  __asm { BR              X10 }
}

Swift::Int sub_10016BAE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  __int128 v4;

  sub_10016EFBC(&v4, v1 - 256);
  sub_10016EFBC((__int128 *)(v1 - 256), (uint64_t)&v3);
  Hasher._combine(_:)(0);
  sub_10016D668(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063A48);
  IEEE80211Frame.Management.hash(into:)();
  sub_10016D668(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
  return Hasher._finalize()();
}

uint64_t sub_10016BB80(_QWORD *a1)
{
  return IEEE80211Frame.encode(to:)(a1);
}

void sub_10016BBE0()
{
  IEEE80211Frame.hashValue.getter();
}

void sub_10016BC40(int a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char *v6;
  __int128 v7;
  _OWORD v8[9];
  _OWORD v9[2];
  _BYTE v10[168];

  v2 = v1[9];
  v8[7] = v1[8];
  v8[8] = v2;
  v9[0] = v1[10];
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)v1 + 169);
  v3 = v1[5];
  v8[3] = v1[4];
  v8[4] = v3;
  v4 = v1[7];
  v8[5] = v1[6];
  v8[6] = v4;
  v7 = *v1;
  v8[0] = v1[1];
  v5 = v1[3];
  v8[1] = v1[2];
  v8[2] = v5;
  IEEE80211Frame.Header.hash(into:)(a1, v7, *((unint64_t *)&v7 + 1), *(unint64_t *)&v8[0]);
  sub_10016EFBC((_OWORD *)((char *)v8 + 8), (uint64_t)v10);
  v6 = (char *)sub_10016BCD0 + 4 * byte_10034B4F3[sub_100119838((uint64_t)v10)];
  __asm { BR              X10 }
}

uint64_t sub_10016BCD0()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[416];

  sub_10016EFBC((__int128 *)(v0 - 200), (uint64_t)&v2);
  Hasher._combine(_:)(0);
  sub_10016D668((uint64_t)v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063A48);
  IEEE80211Frame.Management.hash(into:)();
  return sub_10016D668((uint64_t)v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
}

void sub_10016BD48()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char *v6;
  _QWORD v7[19];
  __int128 v8;
  _OWORD v9[9];
  _OWORD v10[2];
  _BYTE v11[168];

  v1 = v0[9];
  v9[7] = v0[8];
  v9[8] = v1;
  v10[0] = v0[10];
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)v0 + 169);
  v2 = v0[5];
  v9[3] = v0[4];
  v9[4] = v2;
  v3 = v0[7];
  v9[5] = v0[6];
  v9[6] = v3;
  v4 = v0[1];
  v8 = *v0;
  v9[0] = v4;
  v5 = v0[3];
  v9[1] = v0[2];
  v9[2] = v5;
  Hasher.init(_seed:)(v7);
  IEEE80211Frame.Header.hash(into:)((int)v7, v8, *((unint64_t *)&v8 + 1), *(unint64_t *)&v9[0]);
  sub_10016EFBC((_OWORD *)((char *)v9 + 8), (uint64_t)v11);
  v6 = (char *)sub_10016BDE0 + 4 * byte_10034B4F7[sub_100119838((uint64_t)v11)];
  __asm { BR              X10 }
}

Swift::Int sub_10016BDE0()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[400];

  sub_10016EFBC((__int128 *)(v0 - 184), (uint64_t)&v2);
  Hasher._combine(_:)(0);
  sub_10016D668((uint64_t)v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063A48);
  IEEE80211Frame.Management.hash(into:)();
  sub_10016D668((uint64_t)v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
  return Hasher._finalize()();
}

uint64_t sub_10016BE64(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  _BYTE v14[168];
  __int128 v15;
  _OWORD v16[9];
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];

  v2 = a1[9];
  v16[7] = a1[8];
  v16[8] = v2;
  v17[0] = a1[10];
  *(_OWORD *)((char *)v17 + 9) = *(__int128 *)((char *)a1 + 169);
  v3 = a1[5];
  v16[3] = a1[4];
  v16[4] = v3;
  v4 = a1[7];
  v16[5] = a1[6];
  v16[6] = v4;
  v5 = a1[1];
  v15 = *a1;
  v16[0] = v5;
  v6 = a1[3];
  v16[1] = a1[2];
  v16[2] = v6;
  v7 = a2[9];
  v26 = a2[8];
  v27 = v7;
  v28[0] = a2[10];
  *(_OWORD *)((char *)v28 + 9) = *(__int128 *)((char *)a2 + 169);
  v8 = a2[5];
  v22 = a2[4];
  v23 = v8;
  v9 = a2[7];
  v24 = a2[6];
  v25 = v9;
  v10 = a2[1];
  v18 = *a2;
  v19 = v10;
  v11 = a2[3];
  v20 = a2[2];
  v21 = v11;
  if (_s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(v15, *((uint64_t *)&v15 + 1), *(unint64_t *)&v16[0], v18, *((uint64_t *)&v18 + 1), v19))
  {
    sub_10016EFBC((_OWORD *)((char *)v16 + 8), (uint64_t)v14);
    v12 = (char *)&loc_10016BF44 + 4 * byte_10034B4FB[sub_100119838((uint64_t)v14)];
    __asm { BR              X10 }
  }
  return 0;
}

BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO012SimulatenousF8OfEqualsO21__derived_enum_equalsySbAI_AItFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  if ((a4 & 0x2000000000000000) != 0)
  {
    if ((a8 & 0x2000000000000000) == 0 || (unsigned __int16)a1 != (unsigned __int16)a5)
      return 0;
    sub_10016EAE0(a1, a2, a3, a4, (void (*)(void))sub_100031FEC);
    sub_10016EAE0(a5, a6, a7, a8, (void (*)(void))sub_100031FEC);
    v17 = a2;
    v18 = a3;
  }
  else
  {
    if ((a8 & 0x2000000000000000) != 0)
      return 0;
    sub_10016EAE0(a1, a2, a3, a4, (void (*)(void))sub_100031FEC);
    sub_10016EAE0(a5, a6, a7, a8, (void (*)(void))sub_100031FEC);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
    if ((v16 & 1) == 0)
    {
      sub_10016EAE0(a5, a6, a7, a8, (void (*)(void))sub_10000E614);
      sub_10016EAE0(a1, a2, a3, a4, (void (*)(void))sub_10000E614);
      return 0;
    }
    v17 = a3;
    v18 = a4;
  }
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18);
  v20 = v19;
  sub_10016EAE0(a5, a6, a7, a8, (void (*)(void))sub_10000E614);
  sub_10016EAE0(a1, a2, a3, a4, (void (*)(void))sub_10000E614);
  return (v20 & 1) != 0;
}

BOOL _s7CoreP2P14IEEE80211FrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int v11;
  int v12;
  int v13;
  __int16 v14;
  __int16 v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  __int16 v20;

  if ((_DWORD)a1 != (_DWORD)a4)
    return 0;
  LOBYTE(v16) = BYTE4(a1);
  BYTE1(v16) = BYTE5(a1);
  BYTE2(v16) = BYTE6(a1);
  HIBYTE(v16) = HIBYTE(a1);
  LOBYTE(v11) = BYTE4(a4);
  BYTE1(v11) = BYTE5(a4);
  BYTE2(v11) = BYTE6(a4);
  HIBYTE(v11) = HIBYTE(a4);
  if (v16 != v11 || (unsigned __int16)a2 != (unsigned __int16)a5)
    return 0;
  LOBYTE(v17) = BYTE2(a2);
  BYTE1(v17) = BYTE3(a2);
  BYTE2(v17) = BYTE4(a2);
  HIBYTE(v17) = BYTE5(a2);
  LOBYTE(v19) = BYTE6(a2);
  HIBYTE(v19) = HIBYTE(a2);
  LOBYTE(v12) = BYTE2(a5);
  BYTE1(v12) = BYTE3(a5);
  BYTE2(v12) = BYTE4(a5);
  HIBYTE(v12) = BYTE5(a5);
  LOBYTE(v14) = BYTE6(a5);
  HIBYTE(v14) = HIBYTE(a5);
  if (v17 != v12 || v19 != v14)
    return 0;
  LOWORD(v18) = a3;
  BYTE2(v18) = BYTE2(a3);
  HIBYTE(v18) = BYTE3(a3);
  LOBYTE(v20) = BYTE4(a3);
  HIBYTE(v20) = BYTE5(a3);
  LOWORD(v13) = a6;
  BYTE2(v13) = BYTE2(a6);
  HIBYTE(v13) = BYTE3(a6);
  LOBYTE(v15) = BYTE4(a6);
  HIBYTE(v15) = BYTE5(a6);
  return v18 == v13 && v20 == v15 && HIWORD(a3) == HIWORD(a6);
}

void _s7CoreP2P14IEEE80211FrameV10ManagementO21__derived_enum_equalsySbAE_AEtFZ_0(__int128 *a1)
{
  char *v1;
  _BYTE v2[480];

  sub_10016EFBC(a1, (uint64_t)v2);
  v1 = (char *)sub_10016C3F8 + 4 * byte_10034B4FF[sub_10016FE8C((uint64_t)v2)];
  __asm { BR              X10 }
}

BOOL sub_10016C3F8()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  _BYTE v10[376];

  v1 = sub_10016FE98((uint64_t)&v9);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int16 *)(v1 + 8);
  v4 = *(unsigned __int16 *)(v1 + 10);
  v5 = *(_QWORD *)(v1 + 16);
  sub_10016EFBC(v0, (uint64_t)v10);
  v7 = 0;
  if (!sub_10016FE8C((uint64_t)v10))
  {
    v6 = sub_10016FE98((uint64_t)v10);
    if (v2 == *(_QWORD *)v6
      && v3 == *(unsigned __int16 *)(v6 + 8)
      && v4 == *(unsigned __int16 *)(v6 + 10)
      && (sub_100089C38(v5, *(_QWORD *)(v6 + 16)) & 1) != 0)
    {
      return 1;
    }
  }
  return v7;
}

void _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO21__derived_enum_equalsySbAG_AGtFZ_0(__int128 *a1)
{
  char *v1;
  _BYTE v2[472];

  sub_10016EFBC(a1, (uint64_t)v2);
  v1 = (char *)sub_10016C810 + 4 * byte_10034B503[sub_10016EFFC((uint64_t)v2)];
  __asm { BR              X10 }
}

BOOL sub_10016C810()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;
  _BYTE v11[176];
  _OWORD v12[10];
  char v13;
  uint64_t v14;
  _OWORD v15[10];
  char v16;

  v2 = sub_10016F074((uint64_t)&v14);
  v15[7] = *(_OWORD *)(v2 + 112);
  v15[8] = *(_OWORD *)(v2 + 128);
  v15[9] = *(_OWORD *)(v2 + 144);
  v16 = *(_BYTE *)(v2 + 160);
  v15[3] = *(_OWORD *)(v2 + 48);
  v15[4] = *(_OWORD *)(v2 + 64);
  v15[5] = *(_OWORD *)(v2 + 80);
  v15[6] = *(_OWORD *)(v2 + 96);
  v15[0] = *(_OWORD *)v2;
  v15[1] = *(_OWORD *)(v2 + 16);
  v15[2] = *(_OWORD *)(v2 + 32);
  sub_10016EFBC(v1, (uint64_t)v11);
  if (sub_10016EFFC((uint64_t)v11))
  {
    return 0;
  }
  else
  {
    v3 = sub_10016F074((uint64_t)v11);
    v4 = *(_OWORD *)(v3 + 144);
    v12[8] = *(_OWORD *)(v3 + 128);
    v12[9] = v4;
    v13 = *(_BYTE *)(v3 + 160);
    v5 = *(_OWORD *)(v3 + 80);
    v12[4] = *(_OWORD *)(v3 + 64);
    v12[5] = v5;
    v6 = *(_OWORD *)(v3 + 112);
    v12[6] = *(_OWORD *)(v3 + 96);
    v12[7] = v6;
    v7 = *(_OWORD *)(v3 + 16);
    v12[0] = *(_OWORD *)v3;
    v12[1] = v7;
    v8 = *(_OWORD *)(v3 + 48);
    v12[2] = *(_OWORD *)(v3 + 32);
    v12[3] = v8;
    sub_10016F008(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100063AEC);
    sub_10016F008((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100063AEC);
    v9 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestV23__derived_struct_equalsySbAI_AItFZ_0((char *)v15, (char *)v12);
    sub_10016F008((uint64_t)v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000633AC);
    sub_10016F008(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000633AC);
  }
  return v9;
}

BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO12PASNResponseV23__derived_struct_equalsySbAI_AItFZ_0(char *a1, char *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BOOL8 result;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _OWORD v58[3];
  _OWORD v59[3];
  _QWORD v60[6];
  char v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;

  if (word_10034CF08[*a1] != word_10034CF08[*a2])
    return 0;
  if (*((unsigned __int16 *)a1 + 4) != *((unsigned __int16 *)a2 + 4))
    return 0;
  if (byte_10034CF74[a1[10]] != byte_10034CF74[a2[10]])
    return 0;
  v4 = *((_QWORD *)a1 + 3);
  v5 = *((unsigned __int16 *)a1 + 16);
  v6 = *((_QWORD *)a1 + 5);
  v55 = a1[48];
  v7 = *((_QWORD *)a2 + 3);
  v8 = *((unsigned __int16 *)a2 + 16);
  v9 = *((_QWORD *)a2 + 5);
  v10 = a2[48];
  if (!sub_1000892A0(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2)))
    return 0;
  v11 = sub_1000851D0(v4, v7);
  result = 0;
  if ((v11 & 1) != 0 && v5 == v8)
  {
    if ((_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(v6, v9) & 1) != 0
      && byte_10034CF74[v55] == byte_10034CF74[v10]
      && (sub_1000851D0(*((_QWORD *)a1 + 7), *((_QWORD *)a2 + 7)) & 1) != 0)
    {
      v13 = *((_OWORD *)a1 + 5);
      v59[0] = *((_OWORD *)a1 + 4);
      v59[1] = v13;
      v59[2] = *((_OWORD *)a1 + 6);
      v14 = *((_OWORD *)a2 + 5);
      v58[0] = *((_OWORD *)a2 + 4);
      v58[1] = v14;
      v58[2] = *((_OWORD *)a2 + 6);
      if (_s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v59, (uint64_t *)v58))
      {
        v16 = *((_QWORD *)a1 + 14);
        v15 = *((_QWORD *)a1 + 15);
        v18 = *((_QWORD *)a1 + 16);
        v17 = *((_QWORD *)a1 + 17);
        v20 = *((_QWORD *)a1 + 18);
        v19 = *((_QWORD *)a1 + 19);
        v21 = a1[160];
        v23 = *((_QWORD *)a2 + 14);
        v22 = *((_QWORD *)a2 + 15);
        v25 = *((_QWORD *)a2 + 16);
        v24 = *((_QWORD *)a2 + 17);
        v27 = *((_QWORD *)a2 + 18);
        v26 = *((_QWORD *)a2 + 19);
        v28 = a2[160];
        if (v21 == 255)
        {
          if (v28 == 255)
            return 1;
        }
        else if (v28 != 255)
        {
          v60[0] = v16;
          v60[1] = v15;
          v60[2] = v18;
          v60[3] = v17;
          v60[4] = v20;
          v60[5] = v19;
          v61 = v21;
          v62 = v23;
          v63 = v22;
          v29 = v22;
          v64 = v25;
          v65 = v24;
          v66 = v27;
          v67 = v26;
          v68 = v28;
          v30 = v16;
          v53 = v16;
          v56 = v15;
          v31 = v15;
          v32 = v18;
          v49 = v18;
          v50 = v17;
          v33 = v25;
          v34 = v17;
          v35 = v24;
          v36 = v27;
          v37 = v26;
          sub_100063C44(v30, v31, v32, v34, v20, v19, v21);
          sub_100063C44(v23, v29, v33, v35, v36, v37, v28);
          static IEEE80211InformationElement.__derived_enum_equals(_:_:)((uint64_t)v60);
          v48 = v38;
          sub_100063504(v23, v29, v33, v35, v36, v37, v28);
          sub_100063504(v53, v56, v49, v50, v20, v19, v21);
          return (v48 & 1) != 0;
        }
        v39 = v16;
        v54 = v16;
        v57 = v15;
        v40 = v15;
        v41 = v25;
        v42 = v24;
        v43 = v20;
        v52 = v20;
        v44 = v27;
        v45 = v19;
        v51 = v19;
        v46 = v22;
        v47 = v26;
        sub_100063C44(v39, v40, v18, v17, v43, v45, v21);
        sub_100063C44(v23, v46, v41, v42, v44, v47, v28);
        sub_100063504(v54, v57, v18, v17, v52, v51, v21);
        sub_100063504(v23, v46, v41, v42, v44, v47, v28);
      }
    }
    return 0;
  }
  return result;
}

BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestV23__derived_struct_equalsySbAI_AItFZ_0(char *a1, char *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BOOL8 result;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _OWORD v58[3];
  _OWORD v59[3];
  _QWORD v60[6];
  char v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;

  if (word_10034CF08[*a1] != word_10034CF08[*a2])
    return 0;
  if (*((unsigned __int16 *)a1 + 4) != *((unsigned __int16 *)a2 + 4))
    return 0;
  if (byte_10034CF74[a1[10]] != byte_10034CF74[a2[10]])
    return 0;
  v4 = *((_QWORD *)a1 + 3);
  v5 = *((unsigned __int16 *)a1 + 16);
  v6 = *((_QWORD *)a1 + 5);
  v55 = a1[48];
  v7 = *((_QWORD *)a2 + 3);
  v8 = *((unsigned __int16 *)a2 + 16);
  v9 = *((_QWORD *)a2 + 5);
  v10 = a2[48];
  if (!sub_1000892A0(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2)))
    return 0;
  v11 = sub_1000851D0(v4, v7);
  result = 0;
  if ((v11 & 1) != 0 && v5 == v8)
  {
    if ((_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(v6, v9) & 1) != 0
      && byte_10034CF74[v55] == byte_10034CF74[v10]
      && (sub_1000851D0(*((_QWORD *)a1 + 7), *((_QWORD *)a2 + 7)) & 1) != 0)
    {
      v13 = *((_OWORD *)a1 + 5);
      v59[0] = *((_OWORD *)a1 + 4);
      v59[1] = v13;
      v59[2] = *((_OWORD *)a1 + 6);
      v14 = *((_OWORD *)a2 + 5);
      v58[0] = *((_OWORD *)a2 + 4);
      v58[1] = v14;
      v58[2] = *((_OWORD *)a2 + 6);
      if (_s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v59, (uint64_t *)v58))
      {
        v16 = *((_QWORD *)a1 + 14);
        v15 = *((_QWORD *)a1 + 15);
        v18 = *((_QWORD *)a1 + 16);
        v17 = *((_QWORD *)a1 + 17);
        v20 = *((_QWORD *)a1 + 18);
        v19 = *((_QWORD *)a1 + 19);
        v21 = a1[160];
        v23 = *((_QWORD *)a2 + 14);
        v22 = *((_QWORD *)a2 + 15);
        v25 = *((_QWORD *)a2 + 16);
        v24 = *((_QWORD *)a2 + 17);
        v27 = *((_QWORD *)a2 + 18);
        v26 = *((_QWORD *)a2 + 19);
        v28 = a2[160];
        if (v21 == 255)
        {
          if (v28 == 255)
            return 1;
        }
        else if (v28 != 255)
        {
          v60[0] = v16;
          v60[1] = v15;
          v60[2] = v18;
          v60[3] = v17;
          v60[4] = v20;
          v60[5] = v19;
          v61 = v21;
          v62 = v23;
          v63 = v22;
          v29 = v22;
          v64 = v25;
          v65 = v24;
          v66 = v27;
          v67 = v26;
          v68 = v28;
          v30 = v16;
          v53 = v16;
          v56 = v15;
          v31 = v15;
          v32 = v18;
          v49 = v18;
          v50 = v17;
          v33 = v25;
          v34 = v17;
          v35 = v24;
          v36 = v27;
          v37 = v26;
          sub_100063C44(v30, v31, v32, v34, v20, v19, v21);
          sub_100063C44(v23, v29, v33, v35, v36, v37, v28);
          _s7CoreP2P27IEEE80211InformationElementO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v60);
          v48 = v38;
          sub_100063504(v23, v29, v33, v35, v36, v37, v28);
          sub_100063504(v53, v56, v49, v50, v20, v19, v21);
          return (v48 & 1) != 0;
        }
        v39 = v16;
        v54 = v16;
        v57 = v15;
        v40 = v15;
        v41 = v25;
        v42 = v24;
        v43 = v20;
        v52 = v20;
        v44 = v27;
        v45 = v19;
        v51 = v19;
        v46 = v22;
        v47 = v26;
        sub_100063C44(v39, v40, v18, v17, v43, v45, v21);
        sub_100063C44(v23, v46, v41, v42, v44, v47, v28);
        sub_100063504(v54, v57, v18, v17, v52, v51, v21);
        sub_100063504(v23, v46, v41, v42, v44, v47, v28);
      }
    }
    return 0;
  }
  return result;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8ContentsO21__derived_enum_equalsySbAI_AItFZ_0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 >> 30)
  {
    if (a1 >> 30 == 1)
    {
      if ((a4 & 0xC0000000) == 0x40000000
        && a1 == a4
        && HIDWORD(a1) == HIDWORD(a4)
        && ((a1 >> 8) & 1) != ((a4 & 0x100) == 0)
        && BYTE2(a1) == BYTE2(a4)
        && (_DWORD)a2 == (_DWORD)a5
        && (sub_100089D24(a3, a6) & 1) != 0)
      {
        return 1;
      }
    }
    else if ((a4 & 0xC0000000) == 0x80000000 && a4 == 0x80000000 && !(a6 | a5))
    {
      return 1;
    }
  }
  else if ((a4 & 0xC0000000) == 0)
  {
    if (a1 == 14)
    {
      if (a4 != 14)
        return 0;
    }
    else if (a4 == 14 || byte_10034CF81[(char)a1] != byte_10034CF81[(char)a4])
    {
      return 0;
    }
    if ((_s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a5) & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V23__derived_struct_equalsySbAG_AGtFZ_0(char a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (((0x7F7E0907060504uLL >> (8 * a1)) & 0x7F) != ((0x7F7E0907060504uLL >> (8 * a5)) & 0x7F))
    return 0;
  if (a2 >> 30)
  {
    if (a2 >> 30 == 1)
    {
      if ((a6 & 0xC0000000) == 0x40000000
        && a2 == a6
        && ((a2 >> 8) & 1) != ((a6 & 0x100) == 0)
        && BYTE2(a2) == BYTE2(a6)
        && HIDWORD(a2) == HIDWORD(a6)
        && (_DWORD)a3 == (_DWORD)a7
        && (sub_100089D24(a4, a8) & 1) != 0)
      {
        return 1;
      }
    }
    else if ((a6 & 0xC0000000) == 0x80000000 && a6 == 0x80000000 && !(a8 | a7))
    {
      return 1;
    }
  }
  else if ((a6 & 0xC0000000) == 0)
  {
    if (a2 == 14)
    {
      if (a6 != 14)
        return 0;
    }
    else if (a6 == 14 || byte_10034CF81[(char)a2] != byte_10034CF81[(char)a6])
    {
      return 0;
    }
    if ((_s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a7) & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t sub_10016D668(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  LOBYTE(v4) = *(_BYTE *)(a1 + 184);
  sub_1000639BC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    v4,
    a2);
  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV0D4TypeO010ManagementE0O8rawValueAGSgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  if (a1 > 0xEu)
    return 14;
  else
    return byte_10034CF8F[(char)a1];
}

unint64_t sub_10016D708()
{
  unint64_t result;

  result = qword_1004093F8;
  if (!qword_1004093F8)
  {
    result = swift_getWitnessTable(aY_11, &type metadata for IEEE80211Frame.Header.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004093F8);
  }
  return result;
}

unint64_t sub_10016D74C()
{
  unint64_t result;

  result = qword_100409400;
  if (!qword_100409400)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Header.FrameControl, &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409400);
  }
  return result;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8CategoryO8rawValueAISgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  result = 1;
  switch(v1)
  {
    case 4:
      result = 0;
      break;
    case 5:
      return result;
    case 6:
      result = 2;
      break;
    case 7:
      result = 3;
      break;
    case 8:
      goto LABEL_6;
    case 9:
      result = 4;
      break;
    default:
      if (v1 == 126)
      {
        result = 5;
      }
      else if (v1 == 127)
      {
        result = 6;
      }
      else
      {
LABEL_6:
        result = 7;
      }
      break;
  }
  return result;
}

uint64_t sub_10016D804(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v3 = sub_100012C44(&qword_100409720);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_10016EA14();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    LOBYTE(v17) = 0;
    v10 = sub_100175328();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup, &v17, v3, &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup, v10);
    v19 = 1;
    v12 = sub_10007BAC0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for Data, &v19, v3, &type metadata for Data, v12);
    v7 = v17;
    v14 = v18;
    v19 = 2;
    sub_100031FEC(v17, v18);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for Data, &v19, v3, &type metadata for Data, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v15 = v17;
    v16 = v18;
    sub_100031FEC(v7, v14);
    sub_100031FEC(v15, v16);
    sub_10000E614(v7, v14);
    sub_100014430(a1);
    sub_10000E614(v7, v14);
    sub_10000E614(v15, v16);
  }
  return v7;
}

uint64_t sub_10016DA34(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = sub_100012C44(&qword_100409718);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_10016EA9C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    LOBYTE(v14) = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    v13 = 1;
    v10 = sub_10007BAC0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, &v13, v3, &type metadata for Data, v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100014430(a1);
  return v7;
}

uint64_t sub_10016DBA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v5 = sub_100012C44(&qword_1004096E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_10016EF78();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys, &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100014430(a1);
  v26 = 0;
  v12 = sub_100174F84();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, &type metadata for IEEE80211Status, &v26, v5, &type metadata for IEEE80211Status, v12);
  v13 = v21;
  v26 = 1;
  v14 = sub_100175140();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters, &v26, v5, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters, v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v20 = v21;
  v15 = v22;
  v16 = v23;
  v17 = v24;
  v18 = v25;
  result = sub_100014430(a1);
  *(_BYTE *)a2 = v13;
  *(_OWORD *)(a2 + 8) = v20;
  *(_QWORD *)(a2 + 24) = v15;
  *(_BYTE *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v18;
  return result;
}

uint64_t sub_10016DD4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t result;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned __int8 v116;
  char v117;
  char v118;

  v75 = a5;
  v76 = sub_100012C44(a2);
  v9 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin();
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v77 = a1;
  sub_10003259C(a1, v12);
  v14 = a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (v5)
  {
    sub_100014430(v77);
    return sub_100063504(0, 0, 0, 0, 0, 0, 255);
  }
  else
  {
    v15 = v9;
    LOBYTE(v78) = 0;
    v16 = sub_100174F84();
    v17 = v76;
    v18 = v11;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v89, &type metadata for IEEE80211Status, &v78, v76, &type metadata for IEEE80211Status, v16);
    v70 = v89;
    LOBYTE(v78) = 1;
    v19 = sub_100175184();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v89, &type metadata for IEEE80211InformationElement.RSNCapability, &v78, v17, &type metadata for IEEE80211InformationElement.RSNCapability, v19);
    v69 = BYTE2(v89);
    v20 = v90;
    v21 = v91;
    v67 = (unsigned __int16)v89;
    v68 = (unsigned __int16)v92;
    v22 = v93;
    v23 = v94;
    LOBYTE(v78) = 2;
    v24 = sub_1001751C8();
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v89, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability, &v78, v17, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability, v24);
    v74 = v22;
    v65 = v23;
    v25 = v21;
    v66 = v20;
    v26 = v89;
    LOBYTE(v78) = 3;
    v27 = sub_100175140();
    swift_bridgeObjectRetain(v26);
    v28 = v76;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v89, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters, &v78, v76, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters, v27);
    v64 = v26;
    v29 = v91;
    v30 = v93;
    v31 = v94;
    v61 = v92;
    v117 = v92;
    v118 = 4;
    v62 = v90;
    v63 = v89;
    sub_100063C28(v89, v90, v91);
    v73 = v30;
    sub_1000339F4(v30, v31);
    v32 = sub_10017520C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v110, &type metadata for IEEE80211InformationElement, &v118, v28, &type metadata for IEEE80211InformationElement, v32);
    v71 = v31;
    v72 = v29;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v28);
    v76 = v111;
    v33 = v113;
    v34 = v114;
    v59 = v115;
    v60 = v112;
    LODWORD(v15) = v116;
    v35 = v110;
    sub_100063C44(v110, v111, v112, v113, v114, v115, v116);
    sub_100063504(0, 0, 0, 0, 0, 0, 255);
    LOBYTE(v78) = v70;
    WORD4(v78) = v67;
    BYTE10(v78) = v69;
    *(_QWORD *)&v79 = v66;
    *((_QWORD *)&v79 + 1) = v25;
    v54 = v25;
    LOWORD(v80) = v68;
    *((_QWORD *)&v80 + 1) = v74;
    LOBYTE(v81) = v65;
    *((_QWORD *)&v81 + 1) = v64;
    *(_QWORD *)&v82 = v63;
    *((_QWORD *)&v82 + 1) = v62;
    *(_QWORD *)&v83 = v29;
    BYTE8(v83) = v61;
    *(_QWORD *)&v84 = v73;
    *((_QWORD *)&v84 + 1) = v31;
    v36 = v35;
    v56 = v35;
    v57 = v34;
    *(_QWORD *)&v85 = v35;
    v37 = v76;
    v39 = v59;
    v38 = v60;
    *((_QWORD *)&v85 + 1) = v76;
    *(_QWORD *)&v86 = v60;
    v58 = v33;
    *((_QWORD *)&v86 + 1) = v33;
    *(_QWORD *)&v87 = v34;
    *((_QWORD *)&v87 + 1) = v59;
    v88 = v15;
    sub_10016F084((uint64_t)&v78);
    v55 = v15;
    sub_100063504(v36, v37, v38, v33, v34, v39, v15);
    v40 = v62;
    v41 = v63;
    sub_1000634E8(v63, v62, v72);
    v42 = v73;
    v43 = v71;
    sub_10000E658(v73, v71);
    swift_bridgeObjectRelease(v74);
    v44 = v54;
    swift_bridgeObjectRelease(v54);
    v45 = v66;
    swift_bridgeObjectRelease(v66);
    v46 = v64;
    swift_bridgeObjectRelease(v64);
    sub_100014430(v77);
    LOBYTE(v89) = v70;
    LOWORD(v90) = v67;
    BYTE2(v90) = v69;
    v91 = v45;
    v92 = v44;
    LOWORD(v93) = v68;
    v94 = v74;
    v95 = v65;
    v96 = v46;
    v97 = v41;
    v98 = v40;
    v99 = v72;
    v100 = v117;
    v101 = v42;
    v102 = v43;
    v103 = v56;
    v104 = v76;
    v105 = v60;
    v106 = v58;
    v107 = v57;
    v108 = v59;
    v109 = v55;
    result = sub_100175250((uint64_t)&v89);
    v48 = v87;
    v49 = v75;
    *(_OWORD *)(v75 + 128) = v86;
    *(_OWORD *)(v49 + 144) = v48;
    *(_BYTE *)(v49 + 160) = v88;
    v50 = v83;
    *(_OWORD *)(v49 + 64) = v82;
    *(_OWORD *)(v49 + 80) = v50;
    v51 = v85;
    *(_OWORD *)(v49 + 96) = v84;
    *(_OWORD *)(v49 + 112) = v51;
    v52 = v79;
    *(_OWORD *)v49 = v78;
    *(_OWORD *)(v49 + 16) = v52;
    v53 = v81;
    *(_OWORD *)(v49 + 32) = v80;
    *(_OWORD *)(v49 + 48) = v53;
  }
  return result;
}

uint64_t sub_10016E3A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v2 = sub_100012C44(&qword_100409730);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  v8 = sub_10016E98C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IEEE80211Frame.Management.Beacon.CodingKeys, &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys, v8, v6, v7);
  v18 = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v2);
  v17 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v17, v2);
  v16 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v16, v2);
  v11 = sub_100012C44(&qword_100409418);
  v15 = 3;
  v12 = sub_10017536C(&qword_100409738, (uint64_t (*)(void))sub_10017520C, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11, &v15, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100014430(a1);
  return v9;
}

unint64_t sub_10016E590(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  unint64_t v13;
  _QWORD v15[12];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = sub_100012C44(&qword_100409740);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_10016D708();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IEEE80211Frame.Header.CodingKeys, &type metadata for IEEE80211Frame.Header.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  HIBYTE(v20) = 0;
  v10 = sub_1001753D4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v20, &type metadata for IEEE80211Frame.Header.FrameControl, (char *)&v20 + 7, v3, &type metadata for IEEE80211Frame.Header.FrameControl, v10);
  v11 = (unsigned __int16)v20;
  LOBYTE(v20) = 1;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v3);
  HIBYTE(v20) = 2;
  v13 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v20, &type metadata for WiFiAddress, (char *)&v20 + 7, v3, &type metadata for WiFiAddress, v13);
  v19 = v20;
  v18 = BYTE1(v20);
  v17 = BYTE2(v20);
  v16 = BYTE3(v20);
  v15[11] = BYTE4(v20);
  v15[10] = BYTE5(v20);
  HIBYTE(v20) = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v20, &type metadata for WiFiAddress, (char *)&v20 + 7, v3, &type metadata for WiFiAddress, v13);
  v15[9] = v20;
  v15[8] = BYTE1(v20);
  v15[7] = BYTE2(v20);
  v15[6] = BYTE3(v20);
  v15[5] = BYTE4(v20);
  v15[4] = BYTE5(v20);
  HIBYTE(v20) = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v20, &type metadata for WiFiAddress, (char *)&v20 + 7, v3, &type metadata for WiFiAddress, v13);
  v15[3] = v20;
  v15[1] = BYTE4(v20);
  v15[2] = BYTE5(v20);
  LOBYTE(v20) = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v20, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v11 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v12 << 16) | (v19 << 32) | (v18 << 40) | (v17 << 48) | (v16 << 56);
}

uint64_t sub_10016E8B4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  LOBYTE(v4) = *(_BYTE *)(a1 + 160);
  sub_1000639BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    v4,
    a2);
  return a1;
}

uint64_t sub_10016E924(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for IEEE80211Frame.Contents(a2, a1);
  return a2;
}

uint64_t sub_10016E958(uint64_t a1, uint64_t a2)
{
  assignWithTake for IEEE80211Frame.Contents(a2, a1);
  return a2;
}

unint64_t sub_10016E98C()
{
  unint64_t result;

  result = qword_100409410;
  if (!qword_100409410)
  {
    result = swift_getWitnessTable(byte_10034CE58, &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409410);
  }
  return result;
}

unint64_t sub_10016E9D0()
{
  unint64_t result;

  result = qword_100409428;
  if (!qword_100409428)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement, &type metadata for IEEE80211InformationElement);
    atomic_store(result, (unint64_t *)&qword_100409428);
  }
  return result;
}

unint64_t sub_10016EA14()
{
  unint64_t result;

  result = qword_100409438;
  if (!qword_100409438)
  {
    result = swift_getWitnessTable(byte_10034CE08, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409438);
  }
  return result;
}

unint64_t sub_10016EA58()
{
  unint64_t result;

  result = qword_100409440;
  if (!qword_100409440)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup, &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup);
    atomic_store(result, (unint64_t *)&qword_100409440);
  }
  return result;
}

unint64_t sub_10016EA9C()
{
  unint64_t result;

  result = qword_100409450;
  if (!qword_100409450)
  {
    result = swift_getWitnessTable(aI_0, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409450);
  }
  return result;
}

uint64_t sub_10016EAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  if ((a4 & 0x2000000000000000) != 0)
    return ((uint64_t (*)(uint64_t, uint64_t))a5)(a2, a3);
  a5();
  return ((uint64_t (*)(uint64_t, uint64_t))a5)(a3, a4);
}

uint64_t sub_10016EB3C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for IEEE80211InformationElement.RSNCapability(a2, a1);
  return a2;
}

uint64_t sub_10016EB78(uint64_t a1, uint64_t a2)
{
  assignWithTake for IEEE80211InformationElement.RSNCapability(a2, a1);
  return a2;
}

uint64_t sub_10016EBB4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(a2, a1);
  return a2;
}

uint64_t sub_10016EBF0(uint64_t a1, uint64_t a2)
{
  assignWithTake for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(a2, a1);
  return a2;
}

uint64_t sub_10016EC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44(&qword_100409458);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016EC74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44(&qword_100409458);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10016ECBC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  v3 = a1[4];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *sub_10016ED04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

_QWORD *sub_10016ED48(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1[4];
  v6 = a1[5];
  a2(*a1, a1[1], a1[2]);
  a3(v5, v6);
  return a1;
}

unint64_t sub_10016ED94()
{
  unint64_t result;

  result = qword_100409470;
  if (!qword_100409470)
  {
    result = swift_getWitnessTable(byte_10034CD68, &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409470);
  }
  return result;
}

unint64_t sub_10016EDD8()
{
  unint64_t result;

  result = qword_100409478;
  if (!qword_100409478)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Status, &type metadata for IEEE80211Status);
    atomic_store(result, (unint64_t *)&qword_100409478);
  }
  return result;
}

unint64_t sub_10016EE1C()
{
  unint64_t result;

  result = qword_100409480;
  if (!qword_100409480)
  {
    result = swift_getWitnessTable("շ\t", &type metadata for IEEE80211InformationElement.RSNCapability);
    atomic_store(result, (unint64_t *)&qword_100409480);
  }
  return result;
}

unint64_t sub_10016EE60()
{
  unint64_t result;

  result = qword_100409488;
  if (!qword_100409488)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_100409488);
  }
  return result;
}

unint64_t sub_10016EEA4()
{
  unint64_t result;

  result = qword_100409490;
  if (!qword_100409490)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters);
    atomic_store(result, (unint64_t *)&qword_100409490);
  }
  return result;
}

unint64_t sub_10016EEE8()
{
  unint64_t result;

  result = qword_1004094A0;
  if (!qword_1004094A0)
  {
    result = swift_getWitnessTable(byte_10034CD18, &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004094A0);
  }
  return result;
}

_QWORD *sub_10016EF2C(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1[5];
  v6 = a1[6];
  a2(a1[1], a1[2], a1[3]);
  a3(v5, v6);
  return a1;
}

unint64_t sub_10016EF78()
{
  unint64_t result;

  result = qword_1004094B0;
  if (!qword_1004094B0)
  {
    result = swift_getWitnessTable(a9_0, &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004094B0);
  }
  return result;
}

uint64_t sub_10016EFBC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v2 = *a1;
  v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[6];
  *(_OWORD *)(a2 + 80) = a1[5];
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  *(_BYTE *)(a2 + 160) = *((_BYTE *)a1 + 160);
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 144) = v9;
  *(_OWORD *)(a2 + 112) = v7;
  return a2;
}

uint64_t sub_10016EFFC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88) >> 62;
}

uint64_t sub_10016F008(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 160);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    v4);
  return a1;
}

uint64_t sub_10016F074(uint64_t result)
{
  *(_QWORD *)(result + 88) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_10016F084(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 136);
  v13 = *(_QWORD *)(a1 + 152);
  v12 = *(_BYTE *)(a1 + 160);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100063C28(v5, v6, v7);
  sub_1000339F4(v8, v9);
  sub_100063C44(v10, v17, v16, v15, v14, v13, v12);
  return a1;
}

uint64_t sub_10016F15C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  __int16 v11;
  __int16 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  __int128 v53[10];
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  _OWORD v61[9];
  _OWORD v62[2];
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68[11];
  int v69;
  int v70;

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v63, v5, v6);
  if (v2)
    return sub_100014430(a1);
  v7 = v64;
  v8 = v65;
  sub_100034C68((uint64_t)v63, v64);
  v9 = sub_100174D24();
  UnkeyedDecodingContainer.inferredDecode<A>()(v7, (uint64_t)&type metadata for IEEE80211Frame.Header, v8, v9);
  v11 = v60;
  v12 = WORD1(v60);
  v13 = BYTE4(v60);
  v14 = BYTE5(v60);
  v15 = BYTE6(v60);
  v66 = v60;
  v69 = BYTE7(v60);
  v51 = BYTE9(v60);
  v52 = BYTE8(v60);
  v49 = BYTE11(v60);
  v50 = BYTE10(v60);
  v47 = BYTE13(v60);
  v48 = BYTE12(v60);
  v45 = HIBYTE(v60);
  v46 = BYTE14(v60);
  v43 = BYTE1(v61[0]);
  v44 = v61[0];
  v67 = *(_QWORD *)&v61[0];
  v41 = BYTE3(v61[0]);
  v42 = BYTE2(v61[0]);
  v39 = BYTE5(v61[0]);
  v40 = BYTE4(v61[0]);
  v16 = sub_10007CCF8(2uLL, 2, v60);
  v70 = WORD3(v61[0]);
  switch(v16)
  {
    case 0:
      v17 = IEEE80211Frame.Header.FrameControl.managementSubtype.getter(v60);
      switch(v17)
      {
        case 7:
          v18 = v64;
          v36 = v65;
          sub_100034C68((uint64_t)v63, v64);
          v19 = sub_100174EE4();
          UnkeyedDecodingContainer.inferredDecode<A>()(v18, (uint64_t)&type metadata for IEEE80211Frame.Management.Beacon, v36, v19);
          v57 = v54;
          LODWORD(v58) = v55;
          *((_QWORD *)&v58 + 1) = *((_QWORD *)&v55 + 1);
          sub_100174F28((uint64_t)&v57);
          break;
        case 10:
          v22 = v64;
          v38 = v65;
          sub_100034C68((uint64_t)v63, v64);
          v23 = sub_100174E84();
          UnkeyedDecodingContainer.inferredDecode<A>()(v22, (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication, v38, v23);
          sub_10016EFBC(&v60, (uint64_t)v53);
          sub_10016EFBC(v53, (uint64_t)&v54);
          sub_100174EC8((uint64_t)&v54);
          sub_10016EFBC((__int128 *)&v54, (uint64_t)&v57);
          NANBitmap.Channel.operatingClass.getter(&v57);
          v24 = (__int128 *)&v57;
          goto LABEL_16;
        case 12:
          v20 = v64;
          v37 = v65;
          sub_100034C68((uint64_t)v63, v64);
          v21 = sub_100174E24();
          UnkeyedDecodingContainer.inferredDecode<A>()(v20, (uint64_t)&type metadata for IEEE80211Frame.Management.ActionFrame, v37, v21);
          LOBYTE(v57) = v54;
          v58 = v55;
          v59 = v56;
          sub_100174E68((uint64_t)&v57);
          break;
        case 14:
          v25 = sub_100012C84();
          v26 = swift_allocError(&type metadata for WiFiError, v25, 0, 0);
          *(_OWORD *)v27 = xmmword_100337850;
          *(_BYTE *)(v27 + 16) = 2;
          swift_willThrow(v26);
          sub_100014430(v63);
          return sub_100014430(a1);
        default:
          LOBYTE(v57) = v17;
          sub_100174E08((uint64_t)&v57);
          break;
      }
      sub_10016EFBC((__int128 *)&v57, (uint64_t)&v60);
      NANBitmap.Channel.operatingClass.getter(&v60);
      goto LABEL_15;
    case 1:
      sub_100174DD4((uint64_t)&v60);
      goto LABEL_15;
    case 2:
      sub_100174DA0((uint64_t)&v60);
      goto LABEL_15;
    case 3:
      sub_100174D68((uint64_t)&v60);
LABEL_15:
      v24 = &v60;
LABEL_16:
      sub_10016EFBC(v24, (uint64_t)v68);
      sub_100014430(v63);
      sub_10016EFBC(v68, (uint64_t)&v57);
      LOWORD(v60) = v11;
      WORD1(v60) = v12;
      BYTE4(v60) = v13;
      BYTE5(v60) = v14;
      BYTE6(v60) = v15;
      BYTE7(v60) = v69;
      BYTE8(v60) = v52;
      BYTE9(v60) = v51;
      BYTE10(v60) = v50;
      BYTE11(v60) = v49;
      BYTE12(v60) = v48;
      BYTE13(v60) = v47;
      BYTE14(v60) = v46;
      HIBYTE(v60) = v45;
      LOBYTE(v61[0]) = v44;
      BYTE1(v61[0]) = v43;
      BYTE2(v61[0]) = v42;
      BYTE3(v61[0]) = v41;
      BYTE4(v61[0]) = v40;
      BYTE5(v61[0]) = v39;
      WORD3(v61[0]) = v70;
      sub_10016EFBC((__int128 *)&v57, (uint64_t)v61 + 8);
      result = sub_100014430(a1);
      v28 = v61[8];
      a2[8] = v61[7];
      a2[9] = v28;
      a2[10] = v62[0];
      *(_OWORD *)((char *)a2 + 169) = *(_OWORD *)((char *)v62 + 9);
      v29 = v61[4];
      a2[4] = v61[3];
      a2[5] = v29;
      v30 = v61[6];
      a2[6] = v61[5];
      a2[7] = v30;
      v31 = v61[0];
      *a2 = v60;
      a2[1] = v31;
      v32 = v61[2];
      a2[2] = v61[1];
      a2[3] = v32;
      break;
    default:
      v33 = sub_100012C84();
      v34 = swift_allocError(&type metadata for WiFiError, v33, 0, 0);
      *(_OWORD *)v35 = xmmword_100337850;
      *(_BYTE *)(v35 + 16) = 2;
      swift_willThrow(v34);
      result = swift_unexpectedError(v34, "CoreP2P/IEEE80211Frame.swift", 28, 1, 52);
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_10016F6D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[32];
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  _BYTE v39[32];
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  __int128 v48[10];
  char v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v50, v5, v6);
  if (v2)
    return sub_100014430(a1);
  v7 = v51;
  v8 = v52;
  sub_100034C68((uint64_t)v50, v51);
  v9 = sub_100174F40();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm, &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm, v9, v7, v8);
  v10 = v51;
  v11 = v52;
  sub_100034C68((uint64_t)v50, v51);
  v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v10, v11);
  v13 = v51;
  v14 = v52;
  sub_100034C68((uint64_t)v50, v51);
  v15 = sub_100174F84();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for IEEE80211Status, &type metadata for IEEE80211Status, v15, v13, v14);
  if (((1 << SLOBYTE(v48[0])) & 0x77) == 0)
  {
    if (LOBYTE(v48[0]) == 3)
    {
      v39[0] = 3;
      goto LABEL_6;
    }
    switch(v12)
    {
      case 3:
        v21 = v51;
        v22 = v52;
        sub_100034C68((uint64_t)v50, v51);
        v23 = sub_100174FF4();
        UnkeyedDecodingContainer.inferredDecode<A>()(v21, (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm, v22, v23);
        v39[0] = v30[0];
        *(_OWORD *)&v39[8] = *(_OWORD *)&v30[8];
        *(_QWORD *)&v39[24] = *(_QWORD *)&v30[24];
        LOBYTE(v40[0]) = v31[0];
        *(_OWORD *)((char *)v40 + 8) = *(_OWORD *)&v31[8];
        sub_100175038((uint64_t)v39);
        goto LABEL_7;
      case 2:
        v24 = v51;
        v25 = v52;
        sub_100034C68((uint64_t)v50, v51);
        v26 = sub_100175064();
        UnkeyedDecodingContainer.inferredDecode<A>()(v24, (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNResponse, v25, v26);
        v36 = v45;
        v37 = v46;
        v38 = v47;
        v32 = v41;
        v33 = v42;
        v34 = v43;
        v35 = v44;
        *(_OWORD *)v30 = *(_OWORD *)v39;
        *(_OWORD *)&v30[16] = *(_OWORD *)&v39[16];
        *(_OWORD *)v31 = v40[0];
        *(_OWORD *)&v31[16] = v40[1];
        sub_1001750A8((uint64_t)v30);
        goto LABEL_17;
      case 1:
        v18 = v51;
        v19 = v52;
        sub_100034C68((uint64_t)v50, v51);
        v20 = sub_1001750D4();
        UnkeyedDecodingContainer.inferredDecode<A>()(v18, (uint64_t)&type metadata for IEEE80211Frame.Management.Authentication.PASNRequest, v19, v20);
        v36 = v45;
        v37 = v46;
        v38 = v47;
        v32 = v41;
        v33 = v42;
        v34 = v43;
        v35 = v44;
        *(_OWORD *)v30 = *(_OWORD *)v39;
        *(_OWORD *)&v30[16] = *(_OWORD *)&v39[16];
        *(_OWORD *)v31 = v40[0];
        *(_OWORD *)&v31[16] = v40[1];
        sub_100175118((uint64_t)v30);
LABEL_17:
        v17 = (__int128 *)v30;
        goto LABEL_8;
    }
    v27 = sub_100012C84();
    v28 = swift_allocError(&type metadata for WiFiError, v27, 0, 0);
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 2;
    swift_willThrow(v28);
    sub_100014430(v50);
    return sub_100014430(a1);
  }
  v39[0] = v48[0];
LABEL_6:
  *(_WORD *)&v39[2] = v12;
  v39[4] = v49;
  sub_100174FC8((uint64_t)v39);
LABEL_7:
  v17 = (__int128 *)v39;
LABEL_8:
  sub_10016EFBC(v17, (uint64_t)v48);
  sub_100014430(v50);
  sub_100014430(a1);
  return sub_10016EFBC(v48, a2);
}

uint64_t sub_10016FA58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 v23;
  unsigned __int8 v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v25, v3, v4);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v5 = v26;
    v6 = v27;
    sub_100034C68((uint64_t)v25, v26);
    v7 = sub_100175418();
    UnkeyedDecodingContainer.inferredDecode<A>()(v5, (uint64_t)&type metadata for IEEE80211Frame.Management.ActionFrame.Category, v6, v7);
    v3 = v23;
    if (((1 << v23) & 0xE) == 0)
    {
      if (((1 << v23) & 0x11) != 0)
      {
        v9 = v26;
        v10 = v27;
        sub_100034C68((uint64_t)v25, v26);
        if (dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v9, v10) == 9)
        {
          v11 = v26;
          v12 = v27;
          sub_100034C68((uint64_t)v25, v26);
          v13 = sub_10007BA7C();
          dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for OUI, &type metadata for OUI, v13, v11, v12);
          if ((sub_1000349A4(v23 | (v24 << 16), 0x9A6F50u) & 1) != 0)
          {
            v14 = v26;
            v15 = v27;
            sub_100034C68((uint64_t)v25, v26);
            v16 = sub_1001754A0();
            UnkeyedDecodingContainer.inferredDecode<A>()(v14, (uint64_t)&type metadata for NANActionFrame, v15, v16);
          }
        }
      }
      else
      {
        v17 = v26;
        v18 = v27;
        sub_100034C68((uint64_t)v25, v26);
        v19 = sub_10007BA7C();
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for OUI, &type metadata for OUI, v19, v17, v18);
        if ((sub_1000349A4(v23 | (v24 << 16), 0xF21700u) & 1) != 0)
        {
          v20 = v26;
          v21 = v27;
          sub_100034C68((uint64_t)v25, v26);
          v22 = sub_10017545C();
          UnkeyedDecodingContainer.inferredDecode<A>()(v20, (uint64_t)&type metadata for AWDLActionFrame, v21, v22);
        }
      }
    }
    sub_100014430(v25);
    sub_100014430(a1);
  }
  return v3;
}

unint64_t sub_10016FD38()
{
  unint64_t result;

  result = qword_1004094B8;
  if (!qword_1004094B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.Category, &type metadata for IEEE80211Frame.Management.ActionFrame.Category);
    atomic_store(result, (unint64_t *)&qword_1004094B8);
  }
  return result;
}

unint64_t sub_10016FD7C()
{
  unint64_t result;

  result = qword_1004094C0;
  if (!qword_1004094C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for OUI, &type metadata for OUI);
    atomic_store(result, (unint64_t *)&qword_1004094C0);
  }
  return result;
}

unint64_t sub_10016FDC0()
{
  unint64_t result;

  result = qword_1004094C8;
  if (!qword_1004094C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLActionFrame, &type metadata for AWDLActionFrame);
    atomic_store(result, (unint64_t *)&qword_1004094C8);
  }
  return result;
}

unint64_t sub_10016FE04()
{
  unint64_t result;

  result = qword_1004094D0;
  if (!qword_1004094D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.PublicActionField, &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField);
    atomic_store(result, (unint64_t *)&qword_1004094D0);
  }
  return result;
}

unint64_t sub_10016FE48()
{
  unint64_t result;

  result = qword_1004094D8;
  if (!qword_1004094D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANActionFrame, &type metadata for NANActionFrame);
    atomic_store(result, (unint64_t *)&qword_1004094D8);
  }
  return result;
}

uint64_t sub_10016FE8C(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 88) >> 60) & 3;
}

uint64_t sub_10016FE98(uint64_t result)
{
  *(_QWORD *)(result + 88) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

unint64_t sub_10016FEA8()
{
  unint64_t result;

  result = qword_1004094E0;
  if (!qword_1004094E0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Header, &type metadata for IEEE80211Frame.Header);
    atomic_store(result, (unint64_t *)&qword_1004094E0);
  }
  return result;
}

unint64_t sub_10016FEEC()
{
  unint64_t result;

  result = qword_1004094E8;
  if (!qword_1004094E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication, &type metadata for IEEE80211Frame.Management.Authentication);
    atomic_store(result, (unint64_t *)&qword_1004094E8);
  }
  return result;
}

unint64_t sub_10016FF30()
{
  unint64_t result;

  result = qword_1004094F0;
  if (!qword_1004094F0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame, &type metadata for IEEE80211Frame.Management.ActionFrame);
    atomic_store(result, (unint64_t *)&qword_1004094F0);
  }
  return result;
}

unint64_t sub_10016FF74()
{
  unint64_t result;

  result = qword_1004094F8;
  if (!qword_1004094F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Beacon, &type metadata for IEEE80211Frame.Management.Beacon);
    atomic_store(result, (unint64_t *)&qword_1004094F8);
  }
  return result;
}

unint64_t sub_10016FFBC()
{
  unint64_t result;

  result = qword_100409500;
  if (!qword_100409500)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.FrameType.ManagementType, &type metadata for IEEE80211Frame.FrameType.ManagementType);
    atomic_store(result, (unint64_t *)&qword_100409500);
  }
  return result;
}

unint64_t sub_100170004()
{
  unint64_t result;

  result = qword_100409508;
  if (!qword_100409508)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.FrameType, &type metadata for IEEE80211Frame.FrameType);
    atomic_store(result, (unint64_t *)&qword_100409508);
  }
  return result;
}

unint64_t sub_10017004C()
{
  unint64_t result;

  result = qword_100409510;
  if (!qword_100409510)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Header.FrameControl, &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409510);
  }
  return result;
}

unint64_t sub_100170094()
{
  unint64_t result;

  result = qword_100409518;
  if (!qword_100409518)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Header.FrameControl, &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409518);
  }
  return result;
}

unint64_t sub_1001700DC()
{
  unint64_t result;

  result = qword_100409520;
  if (!qword_100409520)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Header.FrameControl, &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409520);
  }
  return result;
}

unint64_t sub_100170124()
{
  unint64_t result;

  result = qword_100409528;
  if (!qword_100409528)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Header.FrameControl, &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409528);
  }
  return result;
}

unint64_t sub_10017016C()
{
  unint64_t result;

  result = qword_100409530;
  if (!qword_100409530)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Header, &type metadata for IEEE80211Frame.Header);
    atomic_store(result, (unint64_t *)&qword_100409530);
  }
  return result;
}

unint64_t sub_1001701B4()
{
  unint64_t result;

  result = qword_100409538;
  if (!qword_100409538)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Contents, &type metadata for IEEE80211Frame.Contents);
    atomic_store(result, (unint64_t *)&qword_100409538);
  }
  return result;
}

unint64_t sub_1001701FC()
{
  unint64_t result;

  result = qword_100409540;
  if (!qword_100409540)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Beacon, &type metadata for IEEE80211Frame.Management.Beacon);
    atomic_store(result, (unint64_t *)&qword_100409540);
  }
  return result;
}

unint64_t sub_100170244()
{
  unint64_t result;

  result = qword_100409548;
  if (!qword_100409548)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup, &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup);
    atomic_store(result, (unint64_t *)&qword_100409548);
  }
  return result;
}

unint64_t sub_10017028C()
{
  unint64_t result;

  result = qword_100409550;
  if (!qword_100409550)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm, &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm);
    atomic_store(result, (unint64_t *)&qword_100409550);
  }
  return result;
}

unint64_t sub_1001702D4()
{
  unint64_t result;

  result = qword_100409558;
  if (!qword_100409558)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType);
    atomic_store(result, (unint64_t *)&qword_100409558);
  }
  return result;
}

unint64_t sub_10017031C()
{
  unint64_t result;

  result = qword_100409560;
  if (!qword_100409560)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit);
    atomic_store(result, (unint64_t *)&qword_100409560);
  }
  return result;
}

unint64_t sub_100170364()
{
  unint64_t result;

  result = qword_100409568;
  if (!qword_100409568)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm);
    atomic_store(result, (unint64_t *)&qword_100409568);
  }
  return result;
}

unint64_t sub_1001703AC()
{
  unint64_t result;

  result = qword_100409570;
  if (!qword_100409570)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals);
    atomic_store(result, (unint64_t *)&qword_100409570);
  }
  return result;
}

unint64_t sub_1001703F4()
{
  unint64_t result;

  result = qword_100409578;
  if (!qword_100409578)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNRequest, &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest);
    atomic_store(result, (unint64_t *)&qword_100409578);
  }
  return result;
}

unint64_t sub_10017043C()
{
  unint64_t result;

  result = qword_100409580;
  if (!qword_100409580)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNResponse, &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse);
    atomic_store(result, (unint64_t *)&qword_100409580);
  }
  return result;
}

unint64_t sub_100170484()
{
  unint64_t result;

  result = qword_100409588;
  if (!qword_100409588)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNConfirm, &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm);
    atomic_store(result, (unint64_t *)&qword_100409588);
  }
  return result;
}

unint64_t sub_1001704CC()
{
  unint64_t result;

  result = qword_100409590;
  if (!qword_100409590)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication, &type metadata for IEEE80211Frame.Management.Authentication);
    atomic_store(result, (unint64_t *)&qword_100409590);
  }
  return result;
}

unint64_t sub_100170514()
{
  unint64_t result;

  result = qword_100409598;
  if (!qword_100409598)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.Category, &type metadata for IEEE80211Frame.Management.ActionFrame.Category);
    atomic_store(result, (unint64_t *)&qword_100409598);
  }
  return result;
}

unint64_t sub_10017055C()
{
  unint64_t result;

  result = qword_1004095A0;
  if (!qword_1004095A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.PublicActionField, &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField);
    atomic_store(result, (unint64_t *)&qword_1004095A0);
  }
  return result;
}

unint64_t sub_1001705A4()
{
  unint64_t result;

  result = qword_1004095A8;
  if (!qword_1004095A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.Contents, &type metadata for IEEE80211Frame.Management.ActionFrame.Contents);
    atomic_store(result, (unint64_t *)&qword_1004095A8);
  }
  return result;
}

unint64_t sub_1001705EC()
{
  unint64_t result;

  result = qword_1004095B0;
  if (!qword_1004095B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame, &type metadata for IEEE80211Frame.Management.ActionFrame);
    atomic_store(result, (unint64_t *)&qword_1004095B0);
  }
  return result;
}

unint64_t sub_100170634()
{
  unint64_t result;

  result = qword_1004095B8;
  if (!qword_1004095B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management, &type metadata for IEEE80211Frame.Management);
    atomic_store(result, (unint64_t *)&qword_1004095B8);
  }
  return result;
}

unint64_t sub_10017067C()
{
  unint64_t result;

  result = qword_1004095C0;
  if (!qword_1004095C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame, &type metadata for IEEE80211Frame);
    atomic_store(result, (unint64_t *)&qword_1004095C0);
  }
  return result;
}

uint64_t destroy for IEEE80211Frame(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(result + 56);
  v2 = *(_QWORD *)(result + 112);
  if (v1 >> 16 != 4294967293 && v1 >> 17 != 0x7FFFFFFF || (v2 & 0x3FFFFFFFFFFFFFFELL) != 0)
    return sub_100063308(*(_QWORD *)(result + 24), *(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), v1, *(_QWORD *)(result + 64), *(_QWORD *)(result + 72), *(_QWORD *)(result + 80), *(_QWORD *)(result + 88), *(_QWORD *)(result + 96), *(_QWORD *)(result + 104), v2, *(_QWORD *)(result + 120), *(_QWORD *)(result + 128), *(_QWORD *)(result + 136), *(_QWORD *)(result + 144), *(_QWORD *)(result + 152), *(_QWORD *)(result + 160), *(_QWORD *)(result + 168),
             *(_QWORD *)(result + 176),
             *(_BYTE *)(result + 184));
  return result;
}

uint64_t initializeWithCopy for IEEE80211Frame(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 112);
  if ((v3 >> 16 == 4294967293 || v3 >> 17 == 0x7FFFFFFF) && (v4 & 0x3FFFFFFFFFFFFFFELL) == 0)
  {
    v14 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v14;
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    v15 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v15;
    v16 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v16;
    v17 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v17;
    v18 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v18;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 64);
    v12 = *(_QWORD *)(a2 + 72);
    v20 = *(_QWORD *)(a2 + 88);
    v21 = *(_QWORD *)(a2 + 96);
    v22 = *(_QWORD *)(a2 + 104);
    v23 = *(_QWORD *)(a2 + 120);
    v24 = *(_QWORD *)(a2 + 128);
    v25 = *(_QWORD *)(a2 + 136);
    v26 = *(_QWORD *)(a2 + 144);
    v27 = *(_QWORD *)(a2 + 152);
    v28 = *(_QWORD *)(a2 + 160);
    v29 = *(_QWORD *)(a2 + 168);
    v30 = *(_QWORD *)(a2 + 176);
    v31 = *(_BYTE *)(a2 + 184);
    v13 = *(_QWORD *)(a2 + 80);
    sub_100063A48(v7, v8, v10, v9, v3, v11, v12, v13, v20, v21, v22, v4, v23, v24, v25, v26, v27, v28, v29, v30, v31);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v3;
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v20;
    *(_QWORD *)(a1 + 96) = v21;
    *(_QWORD *)(a1 + 104) = v22;
    *(_QWORD *)(a1 + 112) = v4;
    *(_QWORD *)(a1 + 120) = v23;
    *(_QWORD *)(a1 + 128) = v24;
    *(_QWORD *)(a1 + 136) = v25;
    *(_QWORD *)(a1 + 144) = v26;
    *(_QWORD *)(a1 + 152) = v27;
    *(_QWORD *)(a1 + 160) = v28;
    *(_QWORD *)(a1 + 168) = v29;
    *(_QWORD *)(a1 + 176) = v30;
    *(_BYTE *)(a1 + 184) = v31;
  }
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v11;
  BOOL v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  char v83;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 22);
  v3 = a1 + 24;
  v4 = (__int128 *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = v5 >> 17;
  v7 = v5 >> 16;
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 112);
  v11 = v8 >> 17 == 0x7FFFFFFF || v8 >> 16 == 4294967293;
  if ((v9 & 0x3FFFFFFFFFFFFFFELL) != 0)
    v11 = 0;
  v12 = v7 == 4294967293 || v6 == 0x7FFFFFFF;
  if (!v12 || (*(_QWORD *)(a1 + 112) & 0x3FFFFFFFFFFFFFFELL) != 0)
  {
    if (v11)
    {
      sub_100170CFC(a1 + 24);
      v22 = v4[1];
      v21 = v4[2];
      *(_OWORD *)v3 = *v4;
      *(_OWORD *)(v3 + 16) = v22;
      *(_OWORD *)(v3 + 32) = v21;
      v23 = v4[6];
      v25 = v4[3];
      v24 = v4[4];
      *(_OWORD *)(v3 + 80) = v4[5];
      *(_OWORD *)(v3 + 96) = v23;
      *(_OWORD *)(v3 + 48) = v25;
      *(_OWORD *)(v3 + 64) = v24;
      v27 = v4[8];
      v26 = v4[9];
      v28 = v4[7];
      *(_BYTE *)(v3 + 160) = *((_BYTE *)v4 + 160);
      *(_OWORD *)(v3 + 128) = v27;
      *(_OWORD *)(v3 + 144) = v26;
      *(_OWORD *)(v3 + 112) = v28;
    }
    else
    {
      v29 = *(_QWORD *)(a2 + 24);
      v30 = *(_QWORD *)(a2 + 32);
      v31 = *(_QWORD *)(a2 + 40);
      v32 = *(_QWORD *)(a2 + 48);
      v33 = *(_QWORD *)(a2 + 64);
      v34 = *(_QWORD *)(a2 + 72);
      v35 = *(_QWORD *)(a2 + 80);
      v60 = *(_QWORD *)(a2 + 88);
      v62 = *(_QWORD *)(a2 + 96);
      v64 = *(_QWORD *)(a2 + 104);
      v66 = *(_QWORD *)(a2 + 120);
      v68 = *(_QWORD *)(a2 + 128);
      v70 = *(_QWORD *)(a2 + 136);
      v72 = *(_QWORD *)(a2 + 144);
      v74 = *(_QWORD *)(a2 + 152);
      v76 = *(_QWORD *)(a2 + 160);
      v78 = *(_QWORD *)(a2 + 168);
      v80 = *(_QWORD *)(a2 + 176);
      v82 = *(_BYTE *)(a2 + 184);
      sub_100063A48(v29, v30, v31, v32, v8, v33, v34, v35, v60, v62, v64, v9, v66, v68, v70, v72, v74, v76, v78,
        v80,
        v82);
      v36 = *(_QWORD *)(a1 + 24);
      v37 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v29;
      *(_QWORD *)(a1 + 32) = v30;
      v38 = *(_QWORD *)(a1 + 40);
      v39 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v31;
      *(_QWORD *)(a1 + 48) = v32;
      v40 = *(_QWORD *)(a1 + 56);
      v41 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)(a1 + 64) = v33;
      v42 = *(_QWORD *)(a1 + 72);
      v43 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 72) = v34;
      *(_QWORD *)(a1 + 80) = v35;
      v44 = *(_OWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v60;
      *(_QWORD *)(a1 + 96) = v62;
      v45 = *(_OWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v64;
      *(_QWORD *)(a1 + 112) = v9;
      v46 = *(_OWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v66;
      *(_QWORD *)(a1 + 128) = v68;
      v47 = *(_OWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v70;
      *(_QWORD *)(a1 + 144) = v72;
      v48 = *(_OWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v74;
      *(_QWORD *)(a1 + 160) = v76;
      v49 = *(_QWORD *)(a1 + 168);
      v50 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 168) = v78;
      *(_QWORD *)(a1 + 176) = v80;
      v51 = *(_BYTE *)(a1 + 184);
      *(_BYTE *)(a1 + 184) = v82;
      sub_100063308(v36, v37, v38, v39, v40, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v45, *((unint64_t *)&v45 + 1), v46, *((unint64_t *)&v46 + 1), v47, *((unint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49,
        v50,
        v51);
    }
  }
  else if (v11)
  {
    v13 = *v4;
    v14 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v14;
    *(_OWORD *)v3 = v13;
    v15 = *(_OWORD *)(a2 + 72);
    v16 = *(_OWORD *)(a2 + 88);
    v17 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v17;
    *(_OWORD *)(a1 + 72) = v15;
    *(_OWORD *)(a1 + 88) = v16;
    v18 = *(_OWORD *)(a2 + 136);
    v19 = *(_OWORD *)(a2 + 152);
    v20 = *(_OWORD *)(a2 + 168);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_OWORD *)(a1 + 152) = v19;
    *(_OWORD *)(a1 + 168) = v20;
    *(_OWORD *)(a1 + 136) = v18;
  }
  else
  {
    v52 = *(_QWORD *)(a2 + 24);
    v53 = *(_QWORD *)(a2 + 32);
    v55 = *(_QWORD *)(a2 + 40);
    v54 = *(_QWORD *)(a2 + 48);
    v56 = *(_QWORD *)(a2 + 64);
    v57 = *(_QWORD *)(a2 + 72);
    v61 = *(_QWORD *)(a2 + 88);
    v63 = *(_QWORD *)(a2 + 96);
    v65 = *(_QWORD *)(a2 + 104);
    v67 = *(_QWORD *)(a2 + 120);
    v69 = *(_QWORD *)(a2 + 128);
    v71 = *(_QWORD *)(a2 + 136);
    v73 = *(_QWORD *)(a2 + 144);
    v75 = *(_QWORD *)(a2 + 152);
    v77 = *(_QWORD *)(a2 + 160);
    v79 = *(_QWORD *)(a2 + 168);
    v81 = *(_QWORD *)(a2 + 176);
    v83 = *(_BYTE *)(a2 + 184);
    v58 = *(_QWORD *)(a2 + 80);
    sub_100063A48(v52, v53, v55, v54, v8, v56, v57, v58, v61, v63, v65, v9, v67, v69, v71, v73, v75, v77, v79, v81, v83);
    *(_QWORD *)(a1 + 24) = v52;
    *(_QWORD *)(a1 + 32) = v53;
    *(_QWORD *)(a1 + 40) = v55;
    *(_QWORD *)(a1 + 48) = v54;
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v56;
    *(_QWORD *)(a1 + 72) = v57;
    *(_QWORD *)(a1 + 80) = v58;
    *(_QWORD *)(a1 + 88) = v61;
    *(_QWORD *)(a1 + 96) = v63;
    *(_QWORD *)(a1 + 104) = v65;
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = v67;
    *(_QWORD *)(a1 + 128) = v69;
    *(_QWORD *)(a1 + 136) = v71;
    *(_QWORD *)(a1 + 144) = v73;
    *(_QWORD *)(a1 + 152) = v75;
    *(_QWORD *)(a1 + 160) = v77;
    *(_QWORD *)(a1 + 168) = v79;
    *(_QWORD *)(a1 + 176) = v81;
    *(_BYTE *)(a1 + 184) = v83;
  }
  return a1;
}

uint64_t sub_100170CFC(uint64_t a1)
{
  destroy for IEEE80211Frame.Management(a1, (uint64_t)&type metadata for IEEE80211Frame.Management);
  return a1;
}

__n128 initializeWithTake for IEEE80211Frame(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(__int128 *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for IEEE80211Frame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v9;
  uint64_t v10;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v3 = a1 + 24;
  v4 = a2 + 24;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 112);
  if ((v5 >> 16 == 4294967293 || v5 >> 17 == 0x7FFFFFFF) && (v6 & 0x3FFFFFFFFFFFFFFELL) == 0)
    goto LABEL_17;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 112);
  if (((v9 & 0xFFFFFFFFFFFF0000) == 0xFFFFFFFD0000 || v9 >> 17 == 0x7FFFFFFF) && (v10 & 0x3FFFFFFFFFFFFFFELL) == 0)
  {
    sub_100170CFC(a1 + 24);
LABEL_17:
    v30 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)(v3 + 128) = *(_OWORD *)(v4 + 128);
    *(_OWORD *)(v3 + 144) = v30;
    *(_BYTE *)(v3 + 160) = *(_BYTE *)(v4 + 160);
    v31 = *(_OWORD *)(v4 + 80);
    *(_OWORD *)(v3 + 64) = *(_OWORD *)(v4 + 64);
    *(_OWORD *)(v3 + 80) = v31;
    v32 = *(_OWORD *)(v4 + 112);
    *(_OWORD *)(v3 + 96) = *(_OWORD *)(v4 + 96);
    *(_OWORD *)(v3 + 112) = v32;
    v33 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v33;
    v34 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)(v4 + 32);
    *(_OWORD *)(v3 + 48) = v34;
    return a1;
  }
  v13 = *(_BYTE *)(a2 + 184);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *(_OWORD *)(a1 + 88);
  v22 = *(_QWORD *)(a1 + 104);
  v23 = *(_OWORD *)(a1 + 120);
  v24 = *(_OWORD *)(a1 + 136);
  v25 = *(_OWORD *)(a1 + 152);
  v26 = *(_QWORD *)(a1 + 168);
  v27 = *(_QWORD *)(a1 + 176);
  v28 = *(_BYTE *)(a1 + 184);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v9;
  v29 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v29;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = v13;
  sub_100063308(v14, v15, v16, v17, v5, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, v6, v23, *((unint64_t *)&v23 + 1), v24, *((unint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26,
    v27,
    v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 185))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_DWORD *)(a1 + 58);
  v4 = -4 - v3;
  if ((int)(-4 - v3) < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 184) = 0;
    *(_QWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 185) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 185) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      *(_QWORD *)(result + 56) = (unint64_t)(-3 - a2) << 16;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 169) = 0u;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame()
{
  return &type metadata for IEEE80211Frame;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.FrameType()
{
  return &type metadata for IEEE80211Frame.FrameType;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.FrameType.ManagementType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_100171070 + 4 * byte_10034B520[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1001710A4 + 4 * byte_10034B51B[v4]))();
}

uint64_t sub_1001710A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001710AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001710B4);
  return result;
}

uint64_t sub_1001710C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001710C8);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1001710CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001710D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.FrameType.ManagementType()
{
  return &type metadata for IEEE80211Frame.FrameType.ManagementType;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Header()
{
  return &type metadata for IEEE80211Frame.Header;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Header.FrameControl()
{
  return &type metadata for IEEE80211Frame.Header.FrameControl;
}

uint64_t destroy for IEEE80211Frame.Contents(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if ((v1 >> 16) <= 0x80000000)
    return sub_100063308(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), v1, *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), *(_QWORD *)(result + 64), *(_QWORD *)(result + 72), *(_QWORD *)(result + 80), *(_QWORD *)(result + 88), *(_QWORD *)(result + 96), *(_QWORD *)(result + 104), *(_QWORD *)(result + 112), *(_QWORD *)(result + 120), *(_QWORD *)(result + 128), *(_QWORD *)(result + 136), *(_QWORD *)(result + 144),
             *(_QWORD *)(result + 152),
             *(_BYTE *)(result + 160));
  return result;
}

uint64_t initializeWithCopy for IEEE80211Frame.Contents(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = a2[4];
  if ((v3 >> 16) > 0x80000000)
  {
    v12 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v12;
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    v13 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v13;
    v14 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v14;
    v15 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    v16 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v16;
  }
  else
  {
    v4 = a2[1];
    v5 = a2[2];
    v6 = a2[3];
    v7 = a2[5];
    v8 = a2[6];
    v9 = a2[8];
    v18 = a2[9];
    v19 = a2[10];
    v20 = a2[11];
    v21 = a2[12];
    v22 = a2[13];
    v23 = a2[14];
    v24 = a2[15];
    v25 = a2[16];
    v26 = a2[17];
    v27 = a2[18];
    v28 = a2[19];
    v29 = *((_BYTE *)a2 + 160);
    v10 = *a2;
    v11 = a2[7];
    sub_100063A48(*a2, v4, v5, v6, v3, v7, v8, v11, v9, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v18;
    *(_QWORD *)(a1 + 80) = v19;
    *(_QWORD *)(a1 + 88) = v20;
    *(_QWORD *)(a1 + 96) = v21;
    *(_QWORD *)(a1 + 104) = v22;
    *(_QWORD *)(a1 + 112) = v23;
    *(_QWORD *)(a1 + 120) = v24;
    *(_QWORD *)(a1 + 128) = v25;
    *(_QWORD *)(a1 + 136) = v26;
    *(_QWORD *)(a1 + 144) = v27;
    *(_QWORD *)(a1 + 152) = v28;
    *(_BYTE *)(a1 + 160) = v29;
  }
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Contents(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *((_QWORD *)a2 + 4);
  v6 = v5 >> 16;
  if ((v4 >> 16) > 0x80000000)
  {
    if (v6 <= 0x80000000)
    {
      v31 = *(_QWORD *)a2;
      v32 = *((_QWORD *)a2 + 1);
      v33 = *((_QWORD *)a2 + 2);
      v34 = *((_QWORD *)a2 + 3);
      v35 = *((_QWORD *)a2 + 5);
      v36 = *((_QWORD *)a2 + 6);
      v49 = *((_QWORD *)a2 + 9);
      v51 = *((_QWORD *)a2 + 10);
      v53 = *((_QWORD *)a2 + 11);
      v55 = *((_QWORD *)a2 + 12);
      v57 = *((_QWORD *)a2 + 13);
      v59 = *((_QWORD *)a2 + 14);
      v61 = *((_QWORD *)a2 + 15);
      v63 = *((_QWORD *)a2 + 16);
      v65 = *((_QWORD *)a2 + 17);
      v67 = *((_QWORD *)a2 + 18);
      v69 = *((_QWORD *)a2 + 19);
      v71 = *((_BYTE *)a2 + 160);
      v37 = *((_QWORD *)a2 + 8);
      v38 = *((_QWORD *)a2 + 7);
      sub_100063A48(*(_QWORD *)a2, v32, v33, v34, v5, v35, v36, v38, v37, v49, v51, v53, v55, v57, v59, v61, v63, v65, v67,
        v69,
        v71);
      *(_QWORD *)a1 = v31;
      *(_QWORD *)(a1 + 8) = v32;
      *(_QWORD *)(a1 + 16) = v33;
      *(_QWORD *)(a1 + 24) = v34;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v35;
      *(_QWORD *)(a1 + 48) = v36;
      *(_QWORD *)(a1 + 56) = v38;
      *(_QWORD *)(a1 + 64) = v37;
      *(_QWORD *)(a1 + 72) = v49;
      *(_QWORD *)(a1 + 80) = v51;
      *(_QWORD *)(a1 + 88) = v53;
      *(_QWORD *)(a1 + 96) = v55;
      *(_QWORD *)(a1 + 104) = v57;
      *(_QWORD *)(a1 + 112) = v59;
      *(_QWORD *)(a1 + 120) = v61;
      *(_QWORD *)(a1 + 128) = v63;
      *(_QWORD *)(a1 + 136) = v65;
      *(_QWORD *)(a1 + 144) = v67;
      *(_QWORD *)(a1 + 152) = v69;
      *(_BYTE *)(a1 + 160) = v71;
      return a1;
    }
LABEL_7:
    v39 = *a2;
    v40 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v40;
    *(_OWORD *)a1 = v39;
    v41 = a2[3];
    v42 = a2[4];
    v43 = a2[6];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v43;
    *(_OWORD *)(a1 + 48) = v41;
    *(_OWORD *)(a1 + 64) = v42;
    v44 = a2[7];
    v45 = a2[8];
    v46 = a2[9];
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    *(_OWORD *)(a1 + 128) = v45;
    *(_OWORD *)(a1 + 144) = v46;
    *(_OWORD *)(a1 + 112) = v44;
    return a1;
  }
  if (v6 > 0x80000000)
  {
    sub_100063308(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
      *(_QWORD *)(a1 + 152),
      *(_BYTE *)(a1 + 160));
    goto LABEL_7;
  }
  v7 = *(_QWORD *)a2;
  v8 = *((_QWORD *)a2 + 1);
  v9 = *((_QWORD *)a2 + 2);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)a2 + 6);
  v13 = *((_QWORD *)a2 + 7);
  v48 = *((_QWORD *)a2 + 8);
  v50 = *((_QWORD *)a2 + 9);
  v52 = *((_QWORD *)a2 + 10);
  v54 = *((_QWORD *)a2 + 11);
  v56 = *((_QWORD *)a2 + 12);
  v58 = *((_QWORD *)a2 + 13);
  v60 = *((_QWORD *)a2 + 14);
  v62 = *((_QWORD *)a2 + 15);
  v64 = *((_QWORD *)a2 + 16);
  v66 = *((_QWORD *)a2 + 17);
  v68 = *((_QWORD *)a2 + 18);
  v70 = *((_QWORD *)a2 + 19);
  v14 = *((_BYTE *)a2 + 160);
  sub_100063A48(*(_QWORD *)a2, v8, v9, v10, v5, v11, v12, v13, v48, v50, v52, v54, v56, v58, v60, v62, v64, v66, v68,
    v70,
    v14);
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v11;
  v21 = *(_QWORD *)(a1 + 48);
  v22 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  v23 = *(_OWORD *)(a1 + 64);
  v24 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v48;
  *(_QWORD *)(a1 + 72) = v50;
  *(_QWORD *)(a1 + 80) = v52;
  *(_QWORD *)(a1 + 88) = v54;
  v25 = *(_OWORD *)(a1 + 96);
  v26 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v56;
  *(_QWORD *)(a1 + 104) = v58;
  *(_QWORD *)(a1 + 112) = v60;
  *(_QWORD *)(a1 + 120) = v62;
  v27 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v64;
  *(_QWORD *)(a1 + 136) = v66;
  v28 = *(_QWORD *)(a1 + 144);
  v29 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v68;
  *(_QWORD *)(a1 + 152) = v70;
  v30 = *(_BYTE *)(a1 + 160);
  *(_BYTE *)(a1 + 160) = v14;
  sub_100063308(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((uint64_t *)&v23 + 1), v24, *((unint64_t *)&v24 + 1), v25, *((unint64_t *)&v25 + 1), v26, *((unint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28,
    v29,
    v30);
  return a1;
}

__n128 initializeWithTake for IEEE80211Frame.Contents(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for IEEE80211Frame.Contents(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = *(_QWORD *)(a1 + 32);
  if ((v4 >> 16) > 0x80000000)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 32);
  if ((v5 >> 16) > 0x80000000)
  {
    sub_100063308(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
      *(_QWORD *)(a1 + 152),
      *(_BYTE *)(a1 + 160));
LABEL_5:
    v24 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v24;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    v25 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v25;
    v26 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v26;
    v27 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v27;
    v28 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v28;
    return a1;
  }
  v6 = *(_QWORD *)(a2 + 152);
  v7 = *(_BYTE *)(a2 + 160);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(_QWORD *)(a1 + 152);
  v22 = *(_BYTE *)(a1 + 160);
  v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = v6;
  *(_BYTE *)(a1 + 160) = v7;
  sub_100063308(v8, v9, v10, v11, v4, v12, v13, v14, v15, *((uint64_t *)&v15 + 1), v16, *((unint64_t *)&v16 + 1), v17, *((unint64_t *)&v17 + 1), v18, *((unint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20,
    v21,
    v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Contents(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 161))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_DWORD *)(a1 + 34);
  if (v3 > 0x80000000)
    v4 = -v3;
  else
    v4 = 0;
  if (v4 >= 4)
    return v4 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Contents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_BYTE *)(result + 160) = 0;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 161) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 161) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 32) = (unint64_t)(-3 - a2) << 16;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 104) = 0u;
      *(_OWORD *)(result + 120) = 0u;
      *(_OWORD *)(result + 136) = 0u;
      *(_OWORD *)(result + 145) = 0u;
    }
  }
  return result;
}

double sub_10017188C(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 152) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 160) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = (unint64_t)-a2 << 16;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 145) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Contents()
{
  return &type metadata for IEEE80211Frame.Contents;
}

uint64_t destroy for IEEE80211Frame.Management(uint64_t a1, uint64_t a2)
{
  return sub_100171B50(a1, a2, sub_100063308);
}

uint64_t initializeWithCopy for IEEE80211Frame.Management(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100171BB8(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063A48);
}

uint64_t *assignWithCopy for IEEE80211Frame.Management(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100171D04(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_100063A48, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, int))sub_100063308);
}

uint64_t *assignWithTake for IEEE80211Frame.Management(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100171E94(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, char))sub_100063308);
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 161))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 34);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for IEEE80211Frame.Management(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 152) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 160) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 161) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = (unint64_t)-a2 << 16;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 145) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 161) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_100171A34(uint64_t result, char a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(result + 88) & 0xC000000000000001 | ((unint64_t)(a2 & 3) << 60);
  *(_QWORD *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(_QWORD *)(result + 88) = v2;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management()
{
  return &type metadata for IEEE80211Frame.Management;
}

uint64_t sub_100171A68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Management.Beacon(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for IEEE80211Frame.Management.Beacon(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Beacon()
{
  return &type metadata for IEEE80211Frame.Management.Beacon;
}

uint64_t destroy for IEEE80211Frame.Management.Authentication(uint64_t a1, uint64_t a2)
{
  return sub_100171B50(a1, a2, sub_1000633AC);
}

uint64_t sub_100171B50(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 160);
  return a3(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           v4);
}

uint64_t initializeWithCopy for IEEE80211Frame.Management.Authentication(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100171BB8(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063AEC);
}

uint64_t sub_100171BB8(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  v8 = a2[6];
  v9 = a2[7];
  v15 = a2[9];
  v16 = a2[10];
  v17 = a2[11];
  v18 = a2[12];
  v19 = a2[13];
  v20 = a2[14];
  v21 = a2[15];
  v22 = a2[16];
  v23 = a2[17];
  v24 = a2[18];
  v25 = a2[19];
  v26 = *((_BYTE *)a2 + 160);
  v10 = a2[8];
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  a4(*a2, v12, v13, v5, v6, v7, v8, v9, v10, v15, v16, v17, v18);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v17;
  *(_QWORD *)(a1 + 96) = v18;
  *(_QWORD *)(a1 + 104) = v19;
  *(_QWORD *)(a1 + 112) = v20;
  *(_QWORD *)(a1 + 120) = v21;
  *(_QWORD *)(a1 + 128) = v22;
  *(_QWORD *)(a1 + 136) = v23;
  *(_QWORD *)(a1 + 144) = v24;
  *(_QWORD *)(a1 + 152) = v25;
  *(_BYTE *)(a1 + 160) = v26;
  return a1;
}

uint64_t *assignWithCopy for IEEE80211Frame.Management.Authentication(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100171D04(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_100063AEC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, int))sub_1000633AC);
}

uint64_t *sub_100171D04(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, int))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  v14 = a2[8];
  v33 = a2[9];
  v34 = a2[10];
  v35 = a2[11];
  v36 = a2[12];
  v37 = a2[13];
  v38 = a2[14];
  v39 = a2[15];
  v40 = a2[16];
  v41 = a2[17];
  v42 = a2[18];
  v43 = a2[19];
  v44 = *((_BYTE *)a2 + 160);
  a4(*a2, v7, v8, v9, v10, v11, v12, v13, v14, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
  v15 = *a1;
  v16 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  v17 = a1[2];
  v18 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  v19 = a1[4];
  v20 = a1[5];
  a1[4] = v10;
  a1[5] = v11;
  v21 = a1[6];
  v22 = a1[7];
  a1[6] = v12;
  a1[7] = v13;
  v23 = *((_OWORD *)a1 + 4);
  v24 = *((_OWORD *)a1 + 5);
  a1[8] = v14;
  a1[9] = v33;
  a1[10] = v34;
  a1[11] = v35;
  v25 = *((_OWORD *)a1 + 6);
  v26 = *((_OWORD *)a1 + 7);
  a1[12] = v36;
  a1[13] = v37;
  a1[14] = v38;
  a1[15] = v39;
  v27 = *((_OWORD *)a1 + 8);
  a1[16] = v40;
  a1[17] = v41;
  v28 = a1[18];
  v29 = a1[19];
  a1[18] = v42;
  a1[19] = v43;
  v30 = *((_BYTE *)a1 + 160);
  *((_BYTE *)a1 + 160) = v44;
  LOBYTE(v32) = v30;
  a5(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((_QWORD *)&v23 + 1), v24, *((_QWORD *)&v24 + 1), v25, *((_QWORD *)&v25 + 1), v26, *((_QWORD *)&v26 + 1), v27, *((_QWORD *)&v27 + 1), v28,
    v29,
    v32);
  return a1;
}

uint64_t *assignWithTake for IEEE80211Frame.Management.Authentication(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100171E94(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, char))sub_1000633AC);
}

uint64_t *sub_100171E94(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, char))
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v29;

  v6 = *(_BYTE *)(a2 + 160);
  v7 = *a1;
  v9 = a1[1];
  v8 = a1[2];
  v10 = a1[3];
  v11 = a1[4];
  v12 = a1[5];
  v13 = a1[6];
  v14 = a1[7];
  v15 = *((_OWORD *)a1 + 4);
  v16 = *((_OWORD *)a1 + 5);
  v17 = *((_OWORD *)a1 + 6);
  v18 = *((_OWORD *)a1 + 7);
  v19 = *((_OWORD *)a1 + 8);
  v20 = a1[18];
  v21 = a1[19];
  v22 = *((_BYTE *)a1 + 160);
  v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v23;
  v24 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v24;
  v25 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)a1 + 5) = v25;
  v26 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)a1 + 7) = v26;
  v27 = *(_OWORD *)(a2 + 144);
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  *((_OWORD *)a1 + 9) = v27;
  *((_BYTE *)a1 + 160) = v6;
  v29 = v22;
  a4(v7, v9, v8, v10, v11, v12, v13, v14, v15, *((_QWORD *)&v15 + 1), v16, *((_QWORD *)&v16 + 1), v17, *((_QWORD *)&v17 + 1), v18, *((_QWORD *)&v18 + 1), v19, *((_QWORD *)&v19 + 1), v20,
    v21,
    v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.Authentication(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 161))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)a1 >> 28) & 0xFFFFFC00 | ((unsigned __int16)*(_QWORD *)a1 >> 6);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 152) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 160) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 161) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = (((unint64_t)-a2 << 6) | ((unint64_t)-a2 << 28)) & 0xFFFFFFC00000FFFFLL;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 145) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 161) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10017202C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned __int16 *)(result + 32);
  v3 = *(_QWORD *)(result + 88) & 1 | (a2 << 62);
  *(_QWORD *)result &= 0x3FFFFF003FuLL;
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 88) = v3;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication()
{
  return &type metadata for IEEE80211Frame.Management.Authentication;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1001720C8 + 4 * byte_10034B52A[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1001720FC + 4 * byte_10034B525[v4]))();
}

uint64_t sub_1001720FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100172104(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10017210CLL);
  return result;
}

uint64_t sub_100172118(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100172120);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100172124(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017212C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm;
}

uint64_t destroy for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t *a1)
{
  return sub_10016EAE0(*a1, a1[1], a1[2], a1[3], (void (*)(void))sub_10000E614);
}

uint64_t *initializeWithCopy for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_10016EAE0(*a2, v4, v5, v6, (void (*)(void))sub_100031FEC);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_10016EAE0(*a2, v4, v5, v6, (void (*)(void))sub_100031FEC);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_10016EAE0(v7, v8, v9, v10, (void (*)(void))sub_10000E614);
  return a1;
}

uint64_t *assignWithTake for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_10016EAE0(v3, v5, v4, v6, (void (*)(void))sub_10000E614);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 24) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 24) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_100172324(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 24) >> 61) & 1;
}

uint64_t sub_100172330(uint64_t result)
{
  *(_QWORD *)(result + 24) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_100172340(uint64_t result, char a2)
{
  *(_QWORD *)(result + 24) = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType;
}

uint64_t destroy for NANAttribute.PairingIdentityResolution(uint64_t a1)
{
  sub_10000E614(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_10000E614(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *initializeWithCopy for NANAttribute.PairingIdentityResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_100031FEC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v7 = a2[2];
  v6 = a2[3];
  sub_100031FEC(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for NANAttribute.PairingIdentityResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_100031FEC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10000E614(v6, v7);
  v9 = a2[2];
  v8 = a2[3];
  sub_100031FEC(v9, v8);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_10000E614(v10, v11);
  return a1;
}

uint64_t *assignWithTake for NANAttribute.PairingIdentityResolution(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000E614(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10000E614(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.PairingIdentityResolution(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.PairingIdentityResolution(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm;
}

uint64_t sub_100172578(uint64_t a1)
{
  destroy for NANAttribute.FurtherServiceDiscovery();
  return a1;
}

uint64_t sub_1001725AC(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t sub_1001725E0(uint64_t a1)
{
  destroy for IEEE80211InformationElement(a1);
  return a1;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNRequest()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest;
}

void _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwxx_0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  int v4;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >> 60 != 15)
    sub_10000E614(*(_QWORD *)(a1 + 72), v2);
  v3 = *(_QWORD *)(a1 + 104);
  if (v3 >> 60 != 15)
    sub_10000E614(*(_QWORD *)(a1 + 96), v3);
  v4 = *(unsigned __int8 *)(a1 + 160);
  if (v4 != 255)
    sub_100063518(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), v4);
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  else
  {
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    v9 = *(_QWORD *)(a2 + 72);
    sub_100031FEC(v9, v8);
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = v8;
  }
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v10 = (uint64_t *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 104);
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v10;
  }
  else
  {
    v12 = *v10;
    sub_100031FEC(*v10, *(_QWORD *)(a2 + 104));
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 104) = v11;
  }
  v13 = *(unsigned __int8 *)(a2 + 160);
  if (v13 == 255)
  {
    v20 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v20;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 112);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = *(_QWORD *)(a2 + 128);
    v17 = *(_QWORD *)(a2 + 136);
    v19 = *(_QWORD *)(a2 + 144);
    v18 = *(_QWORD *)(a2 + 152);
    sub_100063C58(v14, v15, v16, v17, v19, v18, v13);
    *(_QWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 120) = v15;
    *(_QWORD *)(a1 + 128) = v16;
    *(_QWORD *)(a1 + 136) = v17;
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v18;
    *(_BYTE *)(a1 + 160) = v13;
  }
  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (__int128 *)(a1 + 64);
  v13 = (__int128 *)(a2 + 64);
  if (*(_QWORD *)(a1 + 80) >> 60 == 15)
  {
    if (*(_QWORD *)(a2 + 80) >> 60 == 15)
    {
      v14 = *v13;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *v12 = v14;
    }
    else
    {
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      v16 = *(_QWORD *)(a2 + 72);
      v17 = *(_QWORD *)(a2 + 80);
      sub_100031FEC(v16, v17);
      *(_QWORD *)(a1 + 72) = v16;
      *(_QWORD *)(a1 + 80) = v17;
    }
  }
  else if (*(_QWORD *)(a2 + 80) >> 60 == 15)
  {
    sub_100172578(a1 + 64);
    v15 = *(_QWORD *)(a2 + 80);
    *v12 = *v13;
    *(_QWORD *)(a1 + 80) = v15;
  }
  else
  {
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    v18 = *(_QWORD *)(a2 + 72);
    v19 = *(_QWORD *)(a2 + 80);
    sub_100031FEC(v18, v19);
    v20 = *(_QWORD *)(a1 + 72);
    v21 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 72) = v18;
    *(_QWORD *)(a1 + 80) = v19;
    sub_10000E614(v20, v21);
  }
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v22 = (uint64_t *)(a2 + 96);
  v23 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104) >> 60 == 15)
  {
    if (v23 >> 60 != 15)
    {
      v24 = *v22;
      sub_100031FEC(*v22, *(_QWORD *)(a2 + 104));
      *(_QWORD *)(a1 + 96) = v24;
      *(_QWORD *)(a1 + 104) = v23;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v23 >> 60 == 15)
  {
    sub_1001725AC(a1 + 96);
LABEL_13:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v22;
    goto LABEL_15;
  }
  v25 = *v22;
  sub_100031FEC(*v22, *(_QWORD *)(a2 + 104));
  v26 = *(_QWORD *)(a1 + 96);
  v27 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v25;
  *(_QWORD *)(a1 + 104) = v23;
  sub_10000E614(v26, v27);
LABEL_15:
  v28 = (_OWORD *)(a1 + 112);
  v29 = (__int128 *)(a2 + 112);
  v30 = *(unsigned __int8 *)(a2 + 160);
  if (*(unsigned __int8 *)(a1 + 160) == 255)
  {
    if (v30 == 255)
    {
      v53 = *v29;
      v54 = *(_OWORD *)(a2 + 128);
      v55 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v54;
      *(_OWORD *)(a1 + 144) = v55;
      *v28 = v53;
    }
    else
    {
      v44 = *(_QWORD *)(a2 + 112);
      v45 = *(_QWORD *)(a2 + 120);
      v46 = *(_QWORD *)(a2 + 128);
      v47 = *(_QWORD *)(a2 + 136);
      v49 = *(_QWORD *)(a2 + 144);
      v48 = *(_QWORD *)(a2 + 152);
      sub_100063C58(v44, v45, v46, v47, v49, v48, v30);
      *(_QWORD *)(a1 + 112) = v44;
      *(_QWORD *)(a1 + 120) = v45;
      *(_QWORD *)(a1 + 128) = v46;
      *(_QWORD *)(a1 + 136) = v47;
      *(_QWORD *)(a1 + 144) = v49;
      *(_QWORD *)(a1 + 152) = v48;
      *(_BYTE *)(a1 + 160) = v30;
    }
  }
  else if (v30 == 255)
  {
    sub_1001725E0(a1 + 112);
    v51 = *(_OWORD *)(a2 + 128);
    v50 = *(_OWORD *)(a2 + 144);
    v52 = *v29;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v51;
    *(_OWORD *)(a1 + 144) = v50;
    *v28 = v52;
  }
  else
  {
    v31 = *(_QWORD *)(a2 + 112);
    v32 = *(_QWORD *)(a2 + 120);
    v33 = *(_QWORD *)(a2 + 128);
    v34 = *(_QWORD *)(a2 + 136);
    v36 = *(_QWORD *)(a2 + 144);
    v35 = *(_QWORD *)(a2 + 152);
    sub_100063C58(v31, v32, v33, v34, v36, v35, v30);
    v37 = *(_QWORD *)(a1 + 112);
    v38 = *(_QWORD *)(a1 + 120);
    v39 = *(_QWORD *)(a1 + 128);
    v40 = *(_QWORD *)(a1 + 136);
    v41 = *(_QWORD *)(a1 + 144);
    v42 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 112) = v31;
    *(_QWORD *)(a1 + 120) = v32;
    *(_QWORD *)(a1 + 128) = v33;
    *(_QWORD *)(a1 + 136) = v34;
    *(_QWORD *)(a1 + 144) = v36;
    *(_QWORD *)(a1 + 152) = v35;
    v43 = *(_BYTE *)(a1 + 160);
    *(_BYTE *)(a1 + 160) = v30;
    sub_100063518(v37, v38, v39, v40, v41, v42, v43);
  }
  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8 >> 60 == 15)
    goto LABEL_4;
  v9 = *(_QWORD *)(a2 + 80);
  if (v9 >> 60 == 15)
  {
    sub_100172578(a1 + 64);
LABEL_4:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  sub_10000E614(v10, v8);
LABEL_6:
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = (_OWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a1 + 104);
  if (v12 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 96) = *v11;
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(a2 + 104);
  if (v13 >> 60 == 15)
  {
    sub_1001725AC(a1 + 96);
    goto LABEL_9;
  }
  v14 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)v11;
  *(_QWORD *)(a1 + 104) = v13;
  sub_10000E614(v14, v12);
LABEL_11:
  v15 = *(unsigned __int8 *)(a1 + 160);
  if (v15 == 255)
  {
LABEL_15:
    v24 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    return a1;
  }
  v16 = *(unsigned __int8 *)(a2 + 160);
  if (v16 == 255)
  {
    sub_1001725E0(a1 + 112);
    goto LABEL_15;
  }
  v17 = *(_QWORD *)(a1 + 112);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 136);
  v21 = *(_QWORD *)(a1 + 144);
  v22 = *(_QWORD *)(a1 + 152);
  v23 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v23;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = v16;
  sub_100063518(v17, v18, v19, v20, v21, v22, v15);
  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 161))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100172D24(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 160) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 161) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 161) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNResponse()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse;
}

uint64_t destroy for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = result;
  v2 = *(_QWORD *)(result + 24);
  if (v2 >> 60 != 15)
    result = sub_10000E614(*(_QWORD *)(result + 16), v2);
  v3 = *(_QWORD *)(v1 + 48);
  if (v3 >> 60 != 15)
    return sub_10000E614(*(_QWORD *)(v1 + 40), v3);
  return result;
}

uint64_t initializeWithCopy for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  }
  else
  {
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    sub_100031FEC(v5, v4);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v4;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = (uint64_t *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_100031FEC(*v6, v7);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 24) >> 60 == 15)
  {
    if (*(_QWORD *)(a2 + 24) >> 60 == 15)
    {
      v6 = *v5;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)v4 = v6;
    }
    else
    {
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      sub_100031FEC(v8, v9);
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v9;
    }
  }
  else if (*(_QWORD *)(a2 + 24) >> 60 == 15)
  {
    sub_100172578(a1 + 8);
    v7 = *((_QWORD *)v5 + 2);
    *(_OWORD *)v4 = *v5;
    *(_QWORD *)(v4 + 16) = v7;
  }
  else
  {
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 24);
    sub_100031FEC(v10, v11);
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v11;
    sub_10000E614(v12, v13);
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v14 = (uint64_t *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48) >> 60 != 15)
  {
    if (v15 >> 60 != 15)
    {
      v17 = *v14;
      sub_100031FEC(*v14, v15);
      v18 = *(_QWORD *)(a1 + 40);
      v19 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v17;
      *(_QWORD *)(a1 + 48) = v15;
      sub_10000E614(v18, v19);
      return a1;
    }
    sub_1001725AC(a1 + 40);
    goto LABEL_13;
  }
  if (v15 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v14;
    return a1;
  }
  v16 = *v14;
  sub_100031FEC(*v14, v15);
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = v15;
  return a1;
}

uint64_t assignWithTake for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 >> 60 == 15)
  {
    sub_100172578(a1 + 8);
LABEL_4:
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  sub_10000E614(v8, v6);
LABEL_6:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = (_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 >> 60 != 15)
  {
    v11 = *(_QWORD *)(a2 + 48);
    if (v11 >> 60 != 15)
    {
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = *v9;
      *(_QWORD *)(a1 + 48) = v11;
      sub_10000E614(v12, v10);
      return a1;
    }
    sub_1001725AC(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.PASNConfirm(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xCB && a1[56])
    return (*(_DWORD *)a1 + 203);
  v3 = *a1;
  v4 = v3 >= 0x36;
  v5 = v3 - 54;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xCA)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 203;
    if (a3 >= 0xCB)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xCB)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 53;
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNConfirm()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm;
}

uint64_t destroy for IEEE80211Frame.Management.ActionFrame(uint64_t *a1)
{
  return sub_1000632E8(a1[1], a1[2], a1[3]);
}

uint64_t initializeWithCopy for IEEE80211Frame.Management.ActionFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  sub_100063D24(v3, v4, v5);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Management.ActionFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  sub_100063D24(v3, v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  sub_1000632E8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for IEEE80211Frame.Management.ActionFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  sub_1000632E8(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFE && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 32766);
  HIDWORD(v3) = (*(_DWORD *)(a1 + 8) >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)(a1 + 8) >> 9);
  LODWORD(v3) = *(_DWORD *)(a1 + 8);
  v4 = (v3 >> 30) ^ 0x7FFF;
  if (v4 >= 0x7FFD)
    v4 = -1;
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 32766;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFE)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFE)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 8) = ((-(__int16)a2 & 0x7FFF) << 7) & 0xFE00 | ((((-a2 >> 2) & 0x1FFF) - (a2 << 13)) << 17) & 0xFF00FFFF;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame.Category(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1001733CC + 4 * byte_10034B534[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100173400 + 4 * byte_10034B52F[v4]))();
}

uint64_t sub_100173400(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100173408(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100173410);
  return result;
}

uint64_t sub_10017341C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100173424);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100173428(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100173430(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame.Category()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame.Category;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO17FiniteCyclicGroupOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10017348C + 4 * byte_10034B539[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001734AC + 4 * byte_10034B53E[v4]))();
}

_BYTE *sub_10017348C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001734AC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001734B4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001734BC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001734C4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001734CC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame.PublicActionField()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField;
}

uint64_t destroy for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t *a1)
{
  return sub_1000632E8(*a1, a1[1], a1[2]);
}

uint64_t *_s7CoreP2P14IEEE80211FrameV10ManagementO11ActionFrameV8ContentsOwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_100063D24(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_100063D24(*a2, v4, v5);
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_1000632E8(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_1000632E8(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFE && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 32766);
  HIDWORD(v3) = (*(_DWORD *)a1 >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)a1 >> 9);
  LODWORD(v3) = *(_DWORD *)a1;
  v4 = (v3 >> 30) ^ 0x7FFF;
  if (v4 >= 0x7FFD)
    v4 = -1;
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 32766;
    if (a3 >= 0x7FFE)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFE)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)result = ((-(__int16)a2 & 0x7FFF) << 7) & 0xFE00 | ((((-a2 >> 2) & 0x1FFF) - (a2 << 13)) << 17) & 0xFF00FFFF;
    }
  }
  return result;
}

uint64_t sub_1001736B0(_QWORD *a1)
{
  if ((int)*a1 >= 0)
    return *a1 >> 30;
  else
    return (*a1 & 0x1FF | (BYTE2(*a1) << 9) | (*a1 >> 15) & 0xFFFE0000) + 2;
}

_QWORD *sub_1001736E0(_QWORD *result)
{
  *result &= 0xFFFFFFFF3FFFFFFFLL;
  return result;
}

unint64_t *sub_1001736F0(unint64_t *result, unsigned int a2)
{
  if (a2 < 2)
  {
    *result = *result & 0xFFFFFFFF00FF01FFLL | (a2 << 30);
  }
  else
  {
    result[1] = 0;
    result[2] = 0;
    *result = ((a2 - 2) << 7) & 0xFF0000 | (a2 - 2) & 0x1FFLL | ((unint64_t)((a2 - 2) >> 17) << 32) | 0x80000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame.Contents()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame.Contents;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO12PASNResponseV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001737C0 + 4 * byte_10034B548[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001737F4 + 4 * byte_10034B543[v4]))();
}

uint64_t sub_1001737F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001737FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100173804);
  return result;
}

uint64_t sub_100173810(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100173818);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10017381C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100173824(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO34SimulatenousAuthenticationOfEqualsO11MessageTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10017388C + 4 * byte_10034B552[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001738C0 + 4 * byte_10034B54D[v4]))();
}

uint64_t sub_1001738C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001738C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001738D0);
  return result;
}

uint64_t sub_1001738DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001738E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001738E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001738F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100173958 + 4 * byte_10034B55C[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10017398C + 4 * byte_10034B557[v4]))();
}

uint64_t sub_10017398C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100173994(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10017399CLL);
  return result;
}

uint64_t sub_1001739A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001739B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001739B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001739BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys;
}

uint64_t _s7CoreP2P14IEEE80211FrameV9FrameTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100173A24 + 4 * byte_10034B566[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100173A58 + 4 * byte_10034B561[v4]))();
}

uint64_t sub_100173A58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100173A60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100173A68);
  return result;
}

uint64_t sub_100173A74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100173A7CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100173A80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100173A88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Beacon.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Header.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100173AF0 + 4 * byte_10034B570[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100173B24 + 4 * byte_10034B56B[v4]))();
}

uint64_t sub_100173B24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100173B2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100173B34);
  return result;
}

uint64_t sub_100173B40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100173B48);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100173B4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100173B54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Header.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Header.CodingKeys;
}

unint64_t sub_100173B74()
{
  unint64_t result;

  result = qword_1004095C8;
  if (!qword_1004095C8)
  {
    result = swift_getWitnessTable(a1_1, &type metadata for IEEE80211Frame.Header.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004095C8);
  }
  return result;
}

unint64_t sub_100173BBC()
{
  unint64_t result;

  result = qword_1004095D0;
  if (!qword_1004095D0)
  {
    result = swift_getWitnessTable(aY_12, &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004095D0);
  }
  return result;
}

unint64_t sub_100173C04()
{
  unint64_t result;

  result = qword_1004095D8;
  if (!qword_1004095D8)
  {
    result = swift_getWitnessTable(byte_10034C9C0, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004095D8);
  }
  return result;
}

unint64_t sub_100173C4C()
{
  unint64_t result;

  result = qword_1004095E0;
  if (!qword_1004095E0)
  {
    result = swift_getWitnessTable(asc_10034CA78, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004095E0);
  }
  return result;
}

unint64_t sub_100173C94()
{
  unint64_t result;

  result = qword_1004095E8;
  if (!qword_1004095E8)
  {
    result = swift_getWitnessTable(aQ_1, &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004095E8);
  }
  return result;
}

unint64_t sub_100173CDC()
{
  unint64_t result;

  result = qword_1004095F0;
  if (!qword_1004095F0)
  {
    result = swift_getWitnessTable(byte_10034CBE8, &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004095F0);
  }
  return result;
}

unint64_t sub_100173D24()
{
  unint64_t result;

  result = qword_1004095F8;
  if (!qword_1004095F8)
  {
    result = swift_getWitnessTable(byte_10034CCA0, &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004095F8);
  }
  return result;
}

unint64_t sub_100173D6C()
{
  unint64_t result;

  result = qword_100409600;
  if (!qword_100409600)
  {
    result = swift_getWitnessTable(byte_10034CC10, &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409600);
  }
  return result;
}

unint64_t sub_100173DB4()
{
  unint64_t result;

  result = qword_100409608;
  if (!qword_100409608)
  {
    result = swift_getWitnessTable(byte_10034CC38, &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409608);
  }
  return result;
}

unint64_t sub_100173DFC()
{
  unint64_t result;

  result = qword_100409610;
  if (!qword_100409610)
  {
    result = swift_getWitnessTable(byte_10034CB58, &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409610);
  }
  return result;
}

unint64_t sub_100173E44()
{
  unint64_t result;

  result = qword_100409618;
  if (!qword_100409618)
  {
    result = swift_getWitnessTable(aQ_2, &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409618);
  }
  return result;
}

unint64_t sub_100173E8C()
{
  unint64_t result;

  result = qword_100409620;
  if (!qword_100409620)
  {
    result = swift_getWitnessTable(aA_4, &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409620);
  }
  return result;
}

unint64_t sub_100173ED4()
{
  unint64_t result;

  result = qword_100409628;
  if (!qword_100409628)
  {
    result = swift_getWitnessTable(asc_10034CAC8, &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409628);
  }
  return result;
}

unint64_t sub_100173F1C()
{
  unint64_t result;

  result = qword_100409630;
  if (!qword_100409630)
  {
    result = swift_getWitnessTable(byte_10034C9E8, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409630);
  }
  return result;
}

unint64_t sub_100173F64()
{
  unint64_t result;

  result = qword_100409638;
  if (!qword_100409638)
  {
    result = swift_getWitnessTable(byte_10034CA10, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409638);
  }
  return result;
}

unint64_t sub_100173FAC()
{
  unint64_t result;

  result = qword_100409640;
  if (!qword_100409640)
  {
    result = swift_getWitnessTable(byte_10034C930, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409640);
  }
  return result;
}

unint64_t sub_100173FF4()
{
  unint64_t result;

  result = qword_100409648;
  if (!qword_100409648)
  {
    result = swift_getWitnessTable(byte_10034C958, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409648);
  }
  return result;
}

unint64_t sub_10017403C()
{
  unint64_t result;

  result = qword_100409650;
  if (!qword_100409650)
  {
    result = swift_getWitnessTable(aI_1, &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409650);
  }
  return result;
}

unint64_t sub_100174084()
{
  unint64_t result;

  result = qword_100409658;
  if (!qword_100409658)
  {
    result = swift_getWitnessTable(aQ_3, &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409658);
  }
  return result;
}

unint64_t sub_1001740CC()
{
  unint64_t result;

  result = qword_100409660;
  if (!qword_100409660)
  {
    result = swift_getWitnessTable(asc_10034C7C0, &type metadata for IEEE80211Frame.Header.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409660);
  }
  return result;
}

unint64_t sub_100174114()
{
  unint64_t result;

  result = qword_100409668;
  if (!qword_100409668)
  {
    result = swift_getWitnessTable(asc_10034C7E8, &type metadata for IEEE80211Frame.Header.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409668);
  }
  return result;
}

uint64_t sub_100174158(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6E6F43656D617266 && a2 == 0xEC0000006C6F7274)
  {
    v5 = 0xEC0000006C6F7274;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F43656D617266, 0xEC0000006C6F7274, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7265766965636572 && a2 == 0xEF73736572646441)
  {
    v8 = 0xEF73736572646441;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265766965636572, 0xEF73736572646441, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000012)
  {
    v9 = 0x8000000100367470;
    if (a2 == 0x8000000100367470)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100367470, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000012)
  {
    v10 = 0x8000000100367490;
    if (a2 == 0x8000000100367490)
      goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100367490, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x65636E6575716573 && a2 == 0xEF6C6F72746E6F43)
  {
    swift_bridgeObjectRelease(0xEF6C6F72746E6F43);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6575716573, 0xEF6C6F72746E6F43, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100174428(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v5 = 0xE900000000000070;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E496E6F63616562 && a2 == 0xEE006C6176726574)
  {
    v7 = 0xEE006C6176726574;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E496E6F63616562, 0xEE006C6176726574, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974)
  {
    v8 = 0xEC00000073656974;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163, 0xEC00000073656974, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x73746E656D656C65 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E656D656C65, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100174628(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x80000001003674B0;
    if (a2 == 0x80000001003674B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001003674B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x72616C616373 && a2 == 0xE600000000000000)
  {
    v6 = 0xE600000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72616C616373, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001003674D0)
  {
    swift_bridgeObjectRelease(0x80000001003674D0);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001003674D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10017476C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x666E6F43646E6573 && a2 == 0xEB000000006D7269)
  {
    v5 = 0xEB000000006D7269;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x666E6F43646E6573, 0xEB000000006D7269, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D7269666E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D7269666E6F63, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100174874(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564)
  {
    v5 = 0xEA00000000006564;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473, 0xEA00000000006564, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x62617061436E7372 && a2 == 0xED00007974696C69)
  {
    v7 = 0xED00007974696C69;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x62617061436E7372, 0xED00007974696C69, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000015)
  {
    v8 = 0x80000001003674F0;
    if (a2 == 0x80000001003674F0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001003674F0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD00000000000002BLL && a2 == 0x8000000100367510)
  {
    v9 = 0x8000000100367510;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x8000000100367510, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x7053726F646E6576 && a2 == 0xEE00636966696365)
  {
    swift_bridgeObjectRelease(0xEE00636966696365);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7053726F646E6576, 0xEE00636966696365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100174AD8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564)
  {
    v5 = 0xEA00000000006564;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473, 0xEA00000000006564, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD00000000000002BLL && a2 == 0x8000000100367510)
  {
    swift_bridgeObjectRelease(0x8000000100367510);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x8000000100367510, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_100174BD0()
{
  unint64_t result;

  result = qword_100409670;
  if (!qword_100409670)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.PublicActionField, &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField);
    atomic_store(result, (unint64_t *)&qword_100409670);
  }
  return result;
}

unint64_t sub_100174C14()
{
  unint64_t result;

  result = qword_100409678;
  if (!qword_100409678)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.Category, &type metadata for IEEE80211Frame.Management.ActionFrame.Category);
    atomic_store(result, (unint64_t *)&qword_100409678);
  }
  return result;
}

unint64_t sub_100174C58()
{
  unint64_t result;

  result = qword_100409680;
  if (!qword_100409680)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType, &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType);
    atomic_store(result, (unint64_t *)&qword_100409680);
  }
  return result;
}

unint64_t sub_100174C9C()
{
  unint64_t result;

  result = qword_100409688;
  if (!qword_100409688)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm, &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm);
    atomic_store(result, (unint64_t *)&qword_100409688);
  }
  return result;
}

unint64_t sub_100174CE0()
{
  unint64_t result;

  result = qword_100409690;
  if (!qword_100409690)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup, &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup);
    atomic_store(result, (unint64_t *)&qword_100409690);
  }
  return result;
}

unint64_t sub_100174D24()
{
  unint64_t result;

  result = qword_100409698;
  if (!qword_100409698)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Header, &type metadata for IEEE80211Frame.Header);
    atomic_store(result, (unint64_t *)&qword_100409698);
  }
  return result;
}

double sub_100174D68(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0xFFFFFFFD0000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  return result;
}

double sub_100174DA0(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0xFFFFFFFE0000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  return result;
}

double sub_100174DD4(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0xFFFFFFFF0000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  return result;
}

uint64_t sub_100174E08(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 88) & 0xC000000000000001 | 0x3000000000000000;
  *(_QWORD *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(_QWORD *)(result + 88) = v1;
  return result;
}

unint64_t sub_100174E24()
{
  unint64_t result;

  result = qword_1004096A0;
  if (!qword_1004096A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame, &type metadata for IEEE80211Frame.Management.ActionFrame);
    atomic_store(result, (unint64_t *)&qword_1004096A0);
  }
  return result;
}

uint64_t sub_100174E68(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 88) & 0xC000000000000001 | 0x2000000000000000;
  *(_QWORD *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(_QWORD *)(result + 88) = v1;
  return result;
}

unint64_t sub_100174E84()
{
  unint64_t result;

  result = qword_1004096A8;
  if (!qword_1004096A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication, &type metadata for IEEE80211Frame.Management.Authentication);
    atomic_store(result, (unint64_t *)&qword_1004096A8);
  }
  return result;
}

uint64_t sub_100174EC8(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 88) & 0xC000000000000001 | 0x1000000000000000;
  *(_QWORD *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(_QWORD *)(result + 88) = v1;
  return result;
}

unint64_t sub_100174EE4()
{
  unint64_t result;

  result = qword_1004096B0;
  if (!qword_1004096B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Beacon, &type metadata for IEEE80211Frame.Management.Beacon);
    atomic_store(result, (unint64_t *)&qword_1004096B0);
  }
  return result;
}

uint64_t sub_100174F28(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 88) & 0xC000000000000001;
  *(_QWORD *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(_QWORD *)(result + 88) = v1;
  return result;
}

unint64_t sub_100174F40()
{
  unint64_t result;

  result = qword_1004096B8;
  if (!qword_1004096B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm, &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm);
    atomic_store(result, (unint64_t *)&qword_1004096B8);
  }
  return result;
}

unint64_t sub_100174F84()
{
  unint64_t result;

  result = qword_1004096C0;
  if (!qword_1004096C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Status, &type metadata for IEEE80211Status);
    atomic_store(result, (unint64_t *)&qword_1004096C0);
  }
  return result;
}

uint64_t sub_100174FC8(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(unsigned __int16 *)(result + 32);
  v2 = *(_QWORD *)(result + 88) & 1 | 0xC000000000000000;
  *(_QWORD *)result &= 0x3FFFFF003FuLL;
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 88) = v2;
  return result;
}

unint64_t sub_100174FF4()
{
  unint64_t result;

  result = qword_1004096C8;
  if (!qword_1004096C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNConfirm, &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm);
    atomic_store(result, (unint64_t *)&qword_1004096C8);
  }
  return result;
}

uint64_t sub_100175038(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(unsigned __int16 *)(result + 32);
  v2 = *(_QWORD *)(result + 88) & 1 | 0x8000000000000000;
  *(_QWORD *)result &= 0x3FFFFF003FuLL;
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 88) = v2;
  return result;
}

unint64_t sub_100175064()
{
  unint64_t result;

  result = qword_1004096D0;
  if (!qword_1004096D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNResponse, &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse);
    atomic_store(result, (unint64_t *)&qword_1004096D0);
  }
  return result;
}

uint64_t sub_1001750A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int16 *)(result + 32);
  v2 = *(_QWORD *)(result + 88) & 1 | 0x4000000000000000;
  *(_QWORD *)result &= 0x3FFFFF003FuLL;
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 88) = v2;
  return result;
}

unint64_t sub_1001750D4()
{
  unint64_t result;

  result = qword_1004096D8;
  if (!qword_1004096D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.PASNRequest, &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest);
    atomic_store(result, (unint64_t *)&qword_1004096D8);
  }
  return result;
}

uint64_t sub_100175118(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int16 *)(result + 32);
  v2 = *(_QWORD *)(result + 88) & 1;
  *(_QWORD *)result &= 0x3FFFFF003FuLL;
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 88) = v2;
  return result;
}

unint64_t sub_100175140()
{
  unint64_t result;

  result = qword_1004096E8;
  if (!qword_1004096E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters);
    atomic_store(result, (unint64_t *)&qword_1004096E8);
  }
  return result;
}

unint64_t sub_100175184()
{
  unint64_t result;

  result = qword_1004096F8;
  if (!qword_1004096F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.RSNCapability, &type metadata for IEEE80211InformationElement.RSNCapability);
    atomic_store(result, (unint64_t *)&qword_1004096F8);
  }
  return result;
}

unint64_t sub_1001751C8()
{
  unint64_t result;

  result = qword_100409700;
  if (!qword_100409700)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_100409700);
  }
  return result;
}

unint64_t sub_10017520C()
{
  unint64_t result;

  result = qword_100409708;
  if (!qword_100409708)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement, &type metadata for IEEE80211InformationElement);
    atomic_store(result, (unint64_t *)&qword_100409708);
  }
  return result;
}

uint64_t sub_100175250(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 136);
  v13 = *(_QWORD *)(a1 + 152);
  v12 = *(_BYTE *)(a1 + 160);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  sub_1000634E8(v5, v6, v7);
  sub_10000E658(v8, v9);
  sub_100063504(v10, v17, v16, v15, v14, v13, v12);
  return a1;
}

unint64_t sub_100175328()
{
  unint64_t result;

  result = qword_100409728;
  if (!qword_100409728)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup, &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup);
    atomic_store(result, (unint64_t *)&qword_100409728);
  }
  return result;
}

uint64_t sub_10017536C(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_100013C64(&qword_100409418);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001753D4()
{
  unint64_t result;

  result = qword_100409748;
  if (!qword_100409748)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Header.FrameControl, &type metadata for IEEE80211Frame.Header.FrameControl);
    atomic_store(result, (unint64_t *)&qword_100409748);
  }
  return result;
}

unint64_t sub_100175418()
{
  unint64_t result;

  result = qword_100409750;
  if (!qword_100409750)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211Frame.Management.ActionFrame.Category, &type metadata for IEEE80211Frame.Management.ActionFrame.Category);
    atomic_store(result, (unint64_t *)&qword_100409750);
  }
  return result;
}

unint64_t sub_10017545C()
{
  unint64_t result;

  result = qword_100409758;
  if (!qword_100409758)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AWDLActionFrame, &type metadata for AWDLActionFrame);
    atomic_store(result, (unint64_t *)&qword_100409758);
  }
  return result;
}

unint64_t sub_1001754A0()
{
  unint64_t result;

  result = qword_100409760;
  if (!qword_100409760)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANActionFrame, &type metadata for NANActionFrame);
    atomic_store(result, (unint64_t *)&qword_100409760);
  }
  return result;
}

void sub_10017550C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  _QWORD v11[2];

  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(a6, sub_100177478, v10);
LABEL_7:
    swift_bridgeObjectRelease(a5);
    return;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v8 = _StringObject.sharedUTF8.getter(a1, a2);
    }
    sub_100209354(v8, v9, (uint64_t (*)(void))sub_100177478);
    goto LABEL_7;
  }
  v11[0] = a1;
  v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  sub_100175B64(v11, a3, a4, a5);
  swift_bridgeObjectRelease(a5);
}

uint64_t NANServiceName.hash.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Swift::String v12;
  _QWORD *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for SHA256Digest(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SHA256(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_bridgeObjectRetain(a2);
  SHA256.init()(v11);
  v12 = String.lowercased()();
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRetain(v12._object);
  sub_10017550C(v12._countAndFlagsBits, (uint64_t)v12._object, (uint64_t)v10, v12._countAndFlagsBits, (uint64_t)v12._object, v13);
  v14 = swift_bridgeObjectRelease(v12._object);
  SHA256.finalize()(v14);
  SHA256Digest.withUnsafeBytes<A>(_:)(&v18, sub_100175E14, 0, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v15 = v18;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v15;
}

void *NANServiceName.Hash.size.unsafeMutableAddressor()
{
  return &static NANServiceName.Hash.size;
}

uint64_t static NANServiceName.== infix(_:_:)()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  char v3;

  v0 = String.lowercased()();
  v1 = String.lowercased()();
  object = v1._object;
  if (v0._countAndFlagsBits == v1._countAndFlagsBits && v0._object == v1._object)
  {
    v3 = 1;
    object = v0._object;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v0._countAndFlagsBits, v0._object, v1._countAndFlagsBits, v1._object, 0);
  }
  swift_bridgeObjectRelease(v0._object);
  swift_bridgeObjectRelease(object);
  return v3 & 1;
}

uint64_t sub_10017582C(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  v22 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a4) & 0xF;
  else
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v19 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v20 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain(a4);
    v10 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        v13 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v10 << 16, a3, a4);
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v21[0] = a3;
          v21[1] = v20;
          v11 = v21;
          v12 = v22;
        }
        else
        {
          v11 = (_QWORD *)v19;
          v12 = v5;
          if ((a3 & 0x1000000000000000) == 0)
            v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
        }
        v13 = _decodeScalar(_:startingAt:)(v11, v12, v10);
      }
      v15 = v14;
      LODWORD(v21[0]) = v13;
      v16 = a1(v21);
      if (v4)
      {
        swift_bridgeObjectRelease(a4);
        return v17 & 1;
      }
      if ((v16 & 1) == 0)
        break;
      v10 += v15;
      if (v10 >= v6)
      {
        swift_bridgeObjectRelease(a4);
        v17 = 1;
        return v17 & 1;
      }
    }
    swift_bridgeObjectRelease(a4);
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  return v17 & 1;
}

Swift::Bool __swiftcall NANServiceName.contains(_:)(CoreP2P::NANServiceName a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  CoreP2P::NANServiceName v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v1;
  v7 = v2;
  v5 = a1;
  v3 = sub_10001C920();
  return StringProtocol.localizedCaseInsensitiveContains<A>(_:)(&v5, &type metadata for String, &type metadata for String, v3, v3) & 1;
}

uint64_t NANServiceName.hash(into:)(uint64_t a1)
{
  Swift::String v2;

  v2 = String.lowercased()();
  String.hash(into:)(a1, v2._countAndFlagsBits, v2._object);
  return swift_bridgeObjectRelease(v2._object);
}

uint64_t static NANServiceName.Hash.size.getter()
{
  return 6;
}

uint64_t NANServiceName.Hash.init(serviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  _QWORD *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for SHA256Digest(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SHA256(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin();
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  SHA256.init()(v9);
  v12 = String.lowercased()();
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRetain(v12._object);
  sub_10017550C(v12._countAndFlagsBits, (uint64_t)v12._object, (uint64_t)v11, v12._countAndFlagsBits, (uint64_t)v12._object, v13);
  v14 = swift_bridgeObjectRelease(v12._object);
  SHA256.finalize()(v14);
  SHA256Digest.withUnsafeBytes<A>(_:)(&v18, sub_100175E14, 0, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v15 = v18;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v15;
}

void sub_100175B64(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = String.count.getter(a3, a4);
  sub_10021BD08(a1, v5);
  __asm { BR              X10 }
}

uint64_t sub_100175BD8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v5 = v0;
  v6 = v1;
  v7 = BYTE2(v1);
  v8 = BYTE3(v1);
  v9 = BYTE4(v1);
  v10 = BYTE5(v1);
  v2 = type metadata accessor for SHA256(0);
  v3 = sub_100011DE4(&qword_100405EC0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.update(bufferPointer:)(&v5, (char *)&v5 + BYTE6(v1), v2, v3);
  sub_10000E614(v0, v1);
  return sub_10000E614(v0, v1);
}

uint64_t sub_100175E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  _QWORD v12[5];

  v6 = sub_100012C44(&qword_100405BF8);
  v12[3] = v6;
  v12[4] = sub_10006373C();
  v7 = swift_allocObject(&unk_1003E8F68, 48, 7);
  v12[0] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_10034CFA0;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  sub_10003259C(v12, v6);
  Slice<>.withUnsafeBytes<A>(_:)(v11, sub_100106424, 0, v6, &type metadata for Data._Representation, &protocol witness table for UnsafeRawBufferPointer);
  v8 = v11[0];
  v9 = v11[1];
  result = sub_100014430(v12);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t NANServiceName.Hash.init(_:_:_:_:_:_:)(char a1, char a2, char a3, char a4, char a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = sub_100012C44(&qword_100403E88);
  v13 = swift_allocObject(v12, 38, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10033B190;
  *(_BYTE *)(v13 + 32) = a1;
  *(_BYTE *)(v13 + 33) = a2;
  *(_BYTE *)(v13 + 34) = a3;
  *(_BYTE *)(v13 + 35) = a4;
  *(_BYTE *)(v13 + 36) = a5;
  *(_BYTE *)(v13 + 37) = a6;
  v14 = sub_1001068EC(v13);
  swift_bridgeObjectRelease(v13);
  return v14;
}

void NANServiceName.Hash.description.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

uint64_t sub_10017601C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  __n128 v15;

  sub_100031FEC(v3, v1);
  sub_100031FEC(v3, v1);
  ((void (*)(uint64_t, unint64_t, _QWORD))Data.Iterator.init(_:at:))(v3, v1, (int)v3);
  sub_10000E614(v3, v1);
  v5 = sub_100011DE4((unint64_t *)&qword_100404F08, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator, (uint64_t)&protocol conformance descriptor for Data.Iterator);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
  if ((*(_BYTE *)(v4 - 81) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
    *(_OWORD *)(v4 - 128) = xmmword_10033A110;
    do
    {
      v8 = *(_BYTE *)(v4 - 82);
      v9 = sub_100012C44((uint64_t *)&unk_100404F10);
      v10 = swift_allocObject(v9, 72, 7);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v4 - 128);
      *(_QWORD *)(v10 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v10 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32) = v8;
      v11 = String.init(format:_:)(1479684133, 0xE400000000000000, v10);
      v13 = v12;
      *(_QWORD *)(v4 - 104) = v6;
      *(_QWORD *)(v4 - 96) = v7;
      swift_bridgeObjectRetain(v7);
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v7);
      v15 = swift_bridgeObjectRelease(v13);
      v6 = *(_QWORD *)(v4 - 104);
      v7 = *(_QWORD *)(v4 - 96);
      ((void (*)(uint64_t, uint64_t, __n128))dispatch thunk of IteratorProtocol.next())(v0, v5, v15);
    }
    while (*(_BYTE *)(v4 - 81) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 136) + 8))(v2, v0);
  return v6;
}

uint64_t NANServiceName.Hash.init(from:)(_QWORD *a1)
{
  return sub_100176F54(a1);
}

uint64_t sub_1001761B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001770A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001761DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001770A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANServiceName.Hash.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = sub_100012C44(&qword_100409768);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10003259C(a1, v10);
  v12 = sub_1001770A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANServiceName.Hash.CodingKeys, &type metadata for NANServiceName.Hash.CodingKeys, v12, v10, v11);
  v16[0] = a2;
  v16[1] = a3;
  v13 = sub_100068570();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100176308@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100176F54(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100176330(_QWORD *a1)
{
  uint64_t *v1;

  return NANServiceName.Hash.encode(to:)(a1, *v1, v1[1]);
}

void sub_100176348()
{
  uint64_t *v0;

  NANServiceName.Hash.description.getter(*v0, v0[1]);
}

uint64_t sub_100176350()
{
  return 0x676E69727473;
}

uint64_t sub_100176364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x676E69727473 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease(0xE600000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E69727473, 0xE600000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1001763F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001770E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100176418(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001770E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANServiceName.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v6 = sub_100012C44(&qword_100409778);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10003259C(a1, v10);
  v12 = sub_1001770E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANServiceName.CodingKeys, &type metadata for NANServiceName.CodingKeys, v12, v10, v11);
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int NANServiceName.hashValue.getter()
{
  Swift::String v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  v0 = String.lowercased()();
  String.hash(into:)(v2, v0._countAndFlagsBits, v0._object);
  swift_bridgeObjectRelease(v0._object);
  return Hasher._finalize()();
}

_QWORD *NANServiceName.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100012C44(&qword_100409788);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10003259C(a1, v7);
  v10 = sub_1001770E4();
  v11 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANServiceName.CodingKeys, &type metadata for NANServiceName.CodingKeys, v10, v7, v8);
  if (!v1)
  {
    v9 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100014430(a1);
  return v9;
}

Swift::Int sub_1001766A4()
{
  Swift::String v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  v0 = String.lowercased()();
  String.hash(into:)(v2, v0._countAndFlagsBits, v0._object);
  swift_bridgeObjectRelease(v0._object);
  return Hasher._finalize()();
}

uint64_t sub_100176708(uint64_t a1)
{
  Swift::String v2;

  v2 = String.lowercased()();
  String.hash(into:)(a1, v2._countAndFlagsBits, v2._object);
  return swift_bridgeObjectRelease(v2._object);
}

Swift::Int sub_100176748()
{
  Swift::String v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  v0 = String.lowercased()();
  String.hash(into:)(v2, v0._countAndFlagsBits, v0._object);
  swift_bridgeObjectRelease(v0._object);
  return Hasher._finalize()();
}

uint64_t sub_1001767A8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v5 = sub_100012C44(&qword_100409788);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001770E4();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANServiceName.CodingKeys, &type metadata for NANServiceName.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100014430(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_100014430(a1);
  *a2 = v13;
  a2[1] = v15;
  return result;
}

uint64_t sub_1001768CC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v3 = sub_100012C44(&qword_100409778);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001770E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANServiceName.CodingKeys, &type metadata for NANServiceName.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001769B8()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  char v4;

  v0 = String.lowercased()();
  v1 = String.lowercased()();
  if (v0._countAndFlagsBits == v1._countAndFlagsBits && v0._object == v1._object)
  {
    v4 = 1;
    object = v0._object;
  }
  else
  {
    object = v1._object;
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v0._countAndFlagsBits, v0._object, v1._countAndFlagsBits, v1._object, 0);
  }
  swift_bridgeObjectRelease(v0._object);
  swift_bridgeObjectRelease(object);
  return v4 & 1;
}

uint64_t NANServiceName.description.getter(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  swift_bridgeObjectRetain(a2);
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(a2);
  v5._countAndFlagsBits = 39;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 39;
}

uint64_t NANServiceName.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[2];

  v4 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = a1;
  v16[1] = a2;
  v15 = _swiftEmptyArrayStorage;
  v10 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Mirror.AncestorRepresentation.generated(_:), v4);
  swift_bridgeObjectRetain(a2);
  v11 = sub_100012C44(&qword_100405B90);
  v12 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v16, &v15, v9, v7, &type metadata for NANServiceName, v11, v12);
}

uint64_t sub_100176C04()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  v1 = *v0;
  v2 = (void *)v0[1];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 39;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 39;
}

uint64_t sub_100176C70(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for SHA256(0);
  v13 = sub_100011DE4(&qword_100405EC0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t _s7CoreP2P14NANServiceNameVyACSgSScfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t);
  char v17;
  __n128 v18;
  _BYTE v20[16];

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v9 = &v20[-v8];
  __chkstk_darwin();
  v11 = &v20[-v10];
  __chkstk_darwin();
  v13 = &v20[-v12];
  if ((a2 & 0x2000000000000000) != 0)
    v14 = HIBYTE(a2) & 0xF;
  else
    v14 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v14)
    goto LABEL_9;
  if ((a2 & 0x1000000000000000) != 0)
  {
    if (String.UTF8View._foreignCount()() > 254)
      goto LABEL_9;
    if (String.UTF8View._foreignCount()() != 1)
      return a1;
LABEL_8:
    v15 = static CharacterSet.letters.getter();
    static CharacterSet.decimalDigits.getter(v15);
    CharacterSet.union(_:)(v7);
    v16 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v16(v7, v4);
    v16(v9, v4);
    CharacterSet.init(charactersIn:)(3039021, 0xE300000000000000);
    CharacterSet.union(_:)(v9);
    v16(v9, v4);
    v16(v11, v4);
    __chkstk_darwin();
    *(_QWORD *)&v20[-16] = v13;
    swift_bridgeObjectRetain(a2);
    v17 = sub_10017582C((uint64_t (*)(_QWORD *))sub_100177438, (uint64_t)&v20[-32], a1, a2);
    v18 = swift_bridgeObjectRelease(a2);
    ((void (*)(_BYTE *, uint64_t, __n128))v16)(v13, v4, v18);
    if ((v17 & 1) == 0)
      goto LABEL_9;
    return a1;
  }
  if (v14 >= 0xFF)
  {
LABEL_9:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (v14 == 1)
    goto LABEL_8;
  return a1;
}

uint64_t sub_100176F54(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v9, v3, v4);
  if (!v1)
  {
    v5 = v10;
    v6 = v11;
    sub_100034C68((uint64_t)v9, v10);
    UnkeyedDecodingContainer.decodeData(with:)(6, v5, v6);
    __asm { BR              X10 }
  }
  sub_100014430(a1);
  return v4;
}

void sub_100177034(uint64_t a1, ...)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  va_list va;

  va_start(va, a1);
  Data.subdata(in:)(0, BYTE6(v3), v2, v3);
  sub_10000E614(v2, v3);
  sub_100014430((uint64_t *)va);
  sub_100014430(v1);
  JUMPOUT(0x100176FE4);
}

unint64_t sub_1001770A0()
{
  unint64_t result;

  result = qword_100409770;
  if (!qword_100409770)
  {
    result = swift_getWitnessTable(aU_4, &type metadata for NANServiceName.Hash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409770);
  }
  return result;
}

unint64_t sub_1001770E4()
{
  unint64_t result;

  result = qword_100409780;
  if (!qword_100409780)
  {
    result = swift_getWitnessTable("ż\t", &type metadata for NANServiceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409780);
  }
  return result;
}

unint64_t sub_10017712C()
{
  unint64_t result;

  result = qword_100409790;
  if (!qword_100409790)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANServiceName.Hash, &type metadata for NANServiceName.Hash);
    atomic_store(result, (unint64_t *)&qword_100409790);
  }
  return result;
}

unint64_t sub_100177174()
{
  unint64_t result;

  result = qword_100409798;
  if (!qword_100409798)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANServiceName, &type metadata for NANServiceName);
    atomic_store(result, (unint64_t *)&qword_100409798);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANServiceName()
{
  return &type metadata for NANServiceName;
}

ValueMetadata *type metadata accessor for NANServiceName.Hash()
{
  return &type metadata for NANServiceName.Hash;
}

ValueMetadata *type metadata accessor for NANServiceName.CodingKeys()
{
  return &type metadata for NANServiceName.CodingKeys;
}

uint64_t _s7CoreP2P14NANServiceNameV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10017722C + 4 * byte_10034CFB4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10017724C + 4 * byte_10034CFB9[v4]))();
}

_BYTE *sub_10017722C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10017724C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100177254(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10017725C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100177264(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10017726C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NANServiceName.Hash.CodingKeys()
{
  return &type metadata for NANServiceName.Hash.CodingKeys;
}

unint64_t sub_10017728C()
{
  unint64_t result;

  result = qword_1004097A0;
  if (!qword_1004097A0)
  {
    result = swift_getWitnessTable(aU_5, &type metadata for NANServiceName.Hash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004097A0);
  }
  return result;
}

unint64_t sub_1001772D4()
{
  unint64_t result;

  result = qword_1004097A8;
  if (!qword_1004097A8)
  {
    result = swift_getWitnessTable(byte_10034D31C, &type metadata for NANServiceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004097A8);
  }
  return result;
}

unint64_t sub_10017731C()
{
  unint64_t result;

  result = qword_1004097B0;
  if (!qword_1004097B0)
  {
    result = swift_getWitnessTable(aM_4, &type metadata for NANServiceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004097B0);
  }
  return result;
}

unint64_t sub_100177364()
{
  unint64_t result;

  result = qword_1004097B8;
  if (!qword_1004097B8)
  {
    result = swift_getWitnessTable(byte_10034D2B4, &type metadata for NANServiceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004097B8);
  }
  return result;
}

unint64_t sub_1001773AC()
{
  unint64_t result;

  result = qword_1004097C0;
  if (!qword_1004097C0)
  {
    result = swift_getWitnessTable(asc_10034D1D4, &type metadata for NANServiceName.Hash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004097C0);
  }
  return result;
}

unint64_t sub_1001773F4()
{
  unint64_t result;

  result = qword_1004097C8;
  if (!qword_1004097C8)
  {
    result = swift_getWitnessTable("ͽ\t", &type metadata for NANServiceName.Hash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004097C8);
  }
  return result;
}

uint64_t sub_100177438(unsigned int *a1)
{
  return CharacterSet.contains(_:)(*a1) & 1;
}

uint64_t sub_100177468()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_100177478(_BYTE *a1)
{
  uint64_t *v1;

  sub_100175B64(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100177494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = __chkstk_darwin(a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

double BinaryEncoder.__allocating_init(userInfo:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = swift_allocObject(v1, 40, 7);
  result = 0.0;
  *(_OWORD *)(v3 + 16) = xmmword_10033A100;
  *(_QWORD *)(v3 + 32) = a1;
  return result;
}

uint64_t static BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v7 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for BinaryEncoder();
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10033A100;
  v10 = v9 + 16;
  *(_QWORD *)(v9 + 32) = v7;
  BinaryEncoder.encode<A>(_:)(a1, a2, a3);
  if (v3)
  {
    swift_release(v9);
  }
  else
  {
    swift_beginAccess(v10, v12, 0, 0);
    v10 = *(_QWORD *)(v9 + 16);
    sub_100031FEC(v10, *(_QWORD *)(v9 + 24));
    swift_release(v9);
  }
  return v10;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v7 = type metadata accessor for Optional(0, a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = &v21[-v9 - 8];
  v11 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin();
  v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, a2);
    v15 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
    v16 = type metadata accessor for BinaryEncoder();
    v17 = swift_allocObject(v16, 40, 7);
    *(_OWORD *)(v17 + 16) = xmmword_10033A100;
    *(_QWORD *)(v17 + 32) = v15;
    v18 = a3;
    v14 = v17;
    BinaryEncoder.encode<A>(_:)((uint64_t)v13, a2, v18);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
    if (!v3)
    {
      swift_beginAccess(v17 + 16, v21, 0, 0);
      v14 = *(_QWORD *)(v17 + 16);
      sub_100031FEC(v14, *(_QWORD *)(v17 + 24));
    }
    swift_release(v17);
  }
  return v14;
}

uint64_t sub_100177804(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  swift_beginAccess(*a2 + 16, v8, 1, 0);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  sub_100031FEC(v2, v3);
  return sub_10000E614(v5, v6);
}

uint64_t BinaryEncoder.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  sub_100031FEC(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t BinaryEncoder.userInfo.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t BinaryEncoder.userInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 32, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *BinaryEncoder.userInfo.modify(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t BinaryEncoder.init(userInfo:)(uint64_t a1)
{
  uint64_t v1;

  *(_OWORD *)(v1 + 16) = xmmword_10033A100;
  *(_QWORD *)(v1 + 32) = a1;
  return v1;
}

Swift::Void __swiftcall BinaryEncoder.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v1 + 16, v3, 33, 0);
  Data._Representation.reserveCapacity(_:)(a1);
  swift_endAccess(v3);
}

uint64_t sub_1001779D4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[3] = type metadata accessor for BinaryEncoder();
  a2[4] = sub_100179664();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_100177A0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  a2[3] = type metadata accessor for BinaryEncoder();
  a2[4] = sub_100179664();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_100177A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return BinaryEncoder.container<A>(keyedBy:)(a1, a5, a7, a4);
}

uint64_t sub_100177A6C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[3] = &type metadata for BinaryEncoder.UnkeyedContainer;
  a2[4] = sub_100079B58();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_100177AA8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char v5;

  v5 = a1;
  return sub_10017972C((uint64_t)&v5, *v3, *(_QWORD *)(a3 + 16), (uint64_t)&type metadata for Bool, *(_QWORD *)(a3 + 24), (uint64_t)&protocol witness table for Bool);
}

uint64_t sub_100177AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  return sub_10017972C((uint64_t)v6, *v4, *(_QWORD *)(a4 + 16), (uint64_t)&type metadata for String, *(_QWORD *)(a4 + 24), (uint64_t)&protocol witness table for String);
}

uint64_t sub_100177B24(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  double v5;

  v5 = a1;
  return sub_10017972C((uint64_t)&v5, *v3, *(_QWORD *)(a3 + 16), (uint64_t)&type metadata for Double, *(_QWORD *)(a3 + 24), (uint64_t)&protocol witness table for Double);
}

uint64_t sub_100177B64(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  float v5;

  v5 = a1;
  return sub_10017972C((uint64_t)&v5, *v3, *(_QWORD *)(a3 + 16), (uint64_t)&type metadata for Float, *(_QWORD *)(a3 + 24), (uint64_t)&protocol witness table for Float);
}

uint64_t sub_100177BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100177EC0(a1, a2, a3, a4, (void (*)(void))sub_1000CB880, (uint64_t)&type metadata for Int);
}

uint64_t sub_100177BD0(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100177CEC(a1, a2, a3, a4, (void (*)(void))sub_1000CB83C, (uint64_t)&type metadata for Int8);
}

uint64_t sub_100177BFC(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100177D88(a1, a2, a3, a4, (void (*)(void))sub_1000CB7F8, (uint64_t)&type metadata for Int16);
}

uint64_t sub_100177C28(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100177E24(a1, a2, a3, a4, (void (*)(void))sub_1000CB7B4, (uint64_t)&type metadata for Int32);
}

uint64_t sub_100177C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100177EC0(a1, a2, a3, a4, (void (*)(void))sub_1000CB770, (uint64_t)&type metadata for Int64);
}

uint64_t sub_100177C80()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t sub_100177C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100177EC0(a1, a2, a3, a4, (void (*)(void))sub_1000CB72C, (uint64_t)&type metadata for UInt);
}

uint64_t sub_100177CC0(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100177CEC(a1, a2, a3, a4, (void (*)(void))sub_1000CB6E8, (uint64_t)&type metadata for UInt8);
}

uint64_t sub_100177CEC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v11 = a1;
  v8 = *v6;
  v9 = *(_QWORD *)(a3 + 16);
  a5();
  return sub_100179704((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_100177D5C(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100177D88(a1, a2, a3, a4, (void (*)(void))sub_1000CB6A4, (uint64_t)&type metadata for UInt16);
}

uint64_t sub_100177D88(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  __int16 v11;

  v11 = a1;
  v8 = *v6;
  v9 = *(_QWORD *)(a3 + 16);
  a5();
  return sub_100179704((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_100177DF8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100177E24(a1, a2, a3, a4, (void (*)(void))sub_1000CB660, (uint64_t)&type metadata for UInt32);
}

uint64_t sub_100177E24(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v11 = a1;
  v8 = *v6;
  v9 = *(_QWORD *)(a3 + 16);
  a5();
  return sub_100179704((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_100177E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100177EC0(a1, a2, a3, a4, (void (*)(void))sub_1000CB61C, (uint64_t)&type metadata for UInt64);
}

uint64_t sub_100177EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = a1;
  v8 = *v6;
  v9 = *(_QWORD *)(a3 + 16);
  a5();
  return sub_100179704((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_100177F30()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t sub_100177F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_10017972C(a1, *v5, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t sub_100177F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

uint64_t sub_100177F90()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100177FA4()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100177FB8(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_100177FD0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100178134(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_100177FEC(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_100178004(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001780BC(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_100178020(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001780F8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_10017803C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100178134(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_100178058(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_100178070(uint64_t a1, uint64_t a2, char a3)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1);
}

uint64_t sub_100178088(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_1001780A0(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001780BC(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001780BC(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_1001780DC(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001780F8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001780F8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_100178118(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100178134(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_100178134(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_10017815C(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_100178174(uint64_t a1, uint64_t a2, char a3)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1);
}

uint64_t sub_10017818C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

uint64_t sub_1001781B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_100177A44(a1, a2, *v5, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t sub_1001781CC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_100177A6C(*v1, a1);
}

uint64_t sub_1001781DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_100177A0C(*v1, a1);
}

uint64_t sub_1001781EC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_1001779D4(*v1, a1);
}

uint64_t sub_1001781FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BinaryEncoder.encode<A>(_:)(a1, a3, a4);
}

uint64_t sub_100178224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BinaryEncoder.container<A>(keyedBy:)(a1, a3, a4, a4);
}

void sub_10017824C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v2[24];

  v1 = *v0;
  swift_beginAccess(*v0 + 16, v2, 0, 0);
  __asm { BR              X12 }
}

uint64_t sub_100178298()
{
  uint64_t v0;

  return BYTE6(v0);
}

uint64_t sub_1001782E8(uint64_t a1)
{
  return sub_100178878(a1);
}

double sub_1001782FC(uint64_t a1, uint64_t a2)
{
  return sub_1001788E8(a1, a2);
}

uint64_t sub_100178310(double a1)
{
  return sub_100178970(a1);
}

uint64_t sub_100178358(float a1)
{
  return sub_100178A24(a1);
}

uint64_t sub_10017836C(uint64_t a1)
{
  return sub_100178D0C(a1);
}

uint64_t sub_1001783B4(char a1)
{
  return sub_100178AF0(a1);
}

uint64_t sub_1001783FC(__int16 a1)
{
  return sub_100178BA4(a1);
}

uint64_t sub_100178444(int a1)
{
  return sub_100178C58(a1);
}

uint64_t sub_10017848C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100179604();
  return SingleValueEncodingContainer<>.encode(_:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1001784E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100179604();
  return SingleValueEncodingContainer<>.encode(_:)(a1, a2, a3, v8, a4);
}

uint64_t sub_100178544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10017856C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100178594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001785BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001785E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10017860C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100178634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10017865C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100178684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001786AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001786D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001786FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100178724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10017874C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100178774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10017879C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001787C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001787EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a5, a2, a6, a3, a4);
}

uint64_t sub_10017881C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_100178224(a1, *v3, a2, a3);
}

uint64_t sub_10017882C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v4;
  return swift_retain(v4);
}

uint64_t sub_100178840@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for BinaryEncoder();
  a1[4] = sub_100179664();
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_100178878(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD v5[5];

  v3 = *v1;
  v5[3] = type metadata accessor for BinaryEncoder();
  v5[4] = sub_100179664();
  v5[0] = v3;
  swift_retain();
  Bool.encode(to:)(v5, a1);
  return sub_100014430(v5);
}

double sub_1001788E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  double result;
  _QWORD v7[5];

  v5 = *v2;
  v7[3] = type metadata accessor for BinaryEncoder();
  v7[4] = sub_100179664();
  v7[0] = v5;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  String.encode(to:)(v7, a1, a2);
  sub_100014430(v7);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  return result;
}

uint64_t sub_100178970(double a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v7;
  _BYTE v8[24];

  v2 = *v1;
  v7 = a1;
  v3 = sub_1000FADC0((uint64_t)&v7, (uint64_t)v8);
  v5 = v4;
  swift_beginAccess(v2 + 16, v8, 33, 0);
  sub_1000FBDAC(v3, v5);
  swift_endAccess(v8);
  return sub_10000E614(v3, v5);
}

uint64_t sub_100178A24(float a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD v5[5];

  v3 = *v1;
  v5[3] = type metadata accessor for BinaryEncoder();
  v5[4] = sub_100179664();
  v5[0] = v3;
  swift_retain();
  Float.encode(to:)(v5, a1);
  return sub_100014430(v5);
}

uint64_t sub_100178A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100079B58();
  return SingleValueEncodingContainer<>.encode(_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_100178AF0(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v7;
  _BYTE v8[24];

  v2 = *v1;
  v7 = a1;
  v3 = sub_1000FADC0((uint64_t)&v7, (uint64_t)v8);
  v5 = v4;
  swift_beginAccess(v2 + 16, v8, 33, 0);
  sub_1000FBDAC(v3, v5);
  swift_endAccess(v8);
  return sub_10000E614(v3, v5);
}

uint64_t sub_100178BA4(__int16 a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int16 v7;
  _BYTE v8[24];

  v2 = *v1;
  v7 = a1;
  v3 = sub_1000FADC0((uint64_t)&v7, (uint64_t)v8);
  v5 = v4;
  swift_beginAccess(v2 + 16, v8, 33, 0);
  sub_1000FBDAC(v3, v5);
  swift_endAccess(v8);
  return sub_10000E614(v3, v5);
}

uint64_t sub_100178C58(int a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  _BYTE v8[24];

  v2 = *v1;
  v7 = a1;
  v3 = sub_1000FADC0((uint64_t)&v7, (uint64_t)v8);
  v5 = v4;
  swift_beginAccess(v2 + 16, v8, 33, 0);
  sub_1000FBDAC(v3, v5);
  swift_endAccess(v8);
  return sub_10000E614(v3, v5);
}

uint64_t sub_100178D0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  _BYTE v8[24];

  v2 = *v1;
  v7 = a1;
  v3 = sub_1000FADC0((uint64_t)&v7, (uint64_t)v8);
  v5 = v4;
  swift_beginAccess(v2 + 16, v8, 33, 0);
  sub_1000FBDAC(v3, v5);
  swift_endAccess(v8);
  return sub_10000E614(v3, v5);
}

uint64_t sub_100178DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100079B58();
  return SingleValueEncodingContainer<>.encode(_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_100178E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1001781FC(a1, *v3, a2, a3);
}

uint64_t BinaryEncoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v8;

  v5 = type metadata accessor for BinaryEncoder.KeyedContainer(0, a2, a3, a4);
  swift_retain();
  WitnessTable = swift_getWitnessTable(byte_10034D56C, v5);
  return KeyedEncodingContainer.init<A>(_:)(&v8, a2, v5, WitnessTable);
}

uint64_t BinaryEncoder.unkeyedContainer()@<X0>(_QWORD *a1@<X8>)
{
  return sub_100178EC4((uint64_t (*)(void))sub_100079B58, a1);
}

uint64_t BinaryEncoder.singleValueContainer()@<X0>(_QWORD *a1@<X8>)
{
  return sub_100178EC4((uint64_t (*)(void))sub_100179604, a1);
}

uint64_t sub_100178EC4@<X0>(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  a2[3] = &type metadata for BinaryEncoder.UnkeyedContainer;
  a2[4] = a1();
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t BinaryEncoder.encode(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  swift_beginAccess(v2 + 16, v6, 33, 0);
  sub_100031FEC(a1, a2);
  sub_1000FBDAC(a1, a2);
  swift_endAccess(v6);
  return sub_10000E614(a1, a2);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BinaryEncoder.encode(_:)(Swift::Double a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::Double v5;
  _BYTE v6[24];

  v5 = a1;
  v2 = sub_1000FADC0((uint64_t)&v5, (uint64_t)v6);
  v4 = v3;
  swift_beginAccess(v1 + 16, v6, 33, 0);
  sub_1000FBDAC(v2, v4);
  swift_endAccess(v6);
  sub_10000E614(v2, v4);
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin();
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of FixedWidthInteger.littleEndian.getter(v7, v8);
  sub_100177494((uint64_t)v6, (uint64_t)sub_100179648, v2, a2, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol witness table for Never, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t sub_100179120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE v8[24];

  v4 = sub_1000FADC0(a1, a2);
  v6 = v5;
  swift_beginAccess(a3 + 16, v8, 33, 0);
  sub_1000FBDAC(v4, v6);
  swift_endAccess(v8);
  return sub_10000E614(v4, v6);
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  _QWORD v47[3];
  _QWORD v48[2];

  v36 = a3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v37 = (char *)&v35 - v10;
  __chkstk_darwin();
  v12 = (char *)&v35 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin();
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a2);
  if (swift_dynamicCast(v48, v15, a2, &type metadata for Data, 0))
  {
    v16 = v48[0];
    v17 = v48[1];
    swift_beginAccess(v3 + 16, &v38, 33, 0);
    sub_100031FEC(v16, v17);
    sub_1000FBDAC(v16, v17);
    swift_endAccess(&v38);
    sub_10000E614(v16, v17);
    v18 = v16;
    v19 = v17;
  }
  else
  {
    v35 = v3;
    if (!swift_dynamicCast(v12, v15, a2, v6, 0))
    {
      v47[1] = type metadata accessor for BinaryEncoder();
      v47[2] = sub_100179664();
      v38 = v35;
      swift_retain(v35);
      dispatch thunk of Encodable.encode(to:)(&v38, a2, v36);
      sub_100014430(&v38);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a2);
    }
    v20 = v37;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v37, v12, v6);
    v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))(v9, v20, v6);
    v38 = UUID.uuid.getter(v21);
    v39 = v22;
    v40 = v23;
    v41 = v24;
    v42 = v25;
    v43 = v26;
    v44 = v27;
    v45 = v28;
    v46 = v29;
    v30 = sub_1000FADC0((uint64_t)&v38, (uint64_t)v47);
    v32 = v31;
    v33 = *(void (**)(char *, uint64_t))(v7 + 8);
    v33(v9, v6);
    swift_beginAccess(v35 + 16, &v38, 33, 0);
    sub_1000FBDAC(v30, v32);
    swift_endAccess(&v38);
    v33(v37, v6);
    v18 = v30;
    v19 = v32;
  }
  sub_10000E614(v18, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a2);
}

_QWORD *BinaryEncoder.deinit()
{
  _QWORD *v0;

  sub_10000E614(v0[2], v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return v0;
}

uint64_t BinaryEncoder.__deallocating_deinit()
{
  _QWORD *v0;

  sub_10000E614(v0[2], v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_100179524()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *v0;
  swift_beginAccess(*v0 + 32, v3, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + 32));
}

uint64_t sub_100179564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BinaryEncoder.container<A>(keyedBy:)(a1, a2, a3, a4);
}

uint64_t sub_100179584@<X0>(_QWORD *a1@<X8>)
{
  return sub_10017959C((uint64_t (*)(void))sub_100079B58, a1);
}

uint64_t sub_100179590@<X0>(_QWORD *a1@<X8>)
{
  return sub_10017959C((uint64_t (*)(void))sub_100179604, a1);
}

uint64_t sub_10017959C@<X0>(uint64_t (*a1)(void)@<X2>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  a2[3] = &type metadata for BinaryEncoder.UnkeyedContainer;
  a2[4] = a1();
  *a2 = v4;
  return swift_retain(v4);
}

uint64_t type metadata accessor for BinaryEncoder()
{
  return objc_opt_self(_TtC7CoreP2P13BinaryEncoder);
}

uint64_t type metadata accessor for BinaryEncoder.KeyedContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100033C60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BinaryEncoder.KeyedContainer);
}

unint64_t sub_100179604()
{
  unint64_t result;

  result = qword_1004097D0;
  if (!qword_1004097D0)
  {
    result = swift_getWitnessTable(byte_10034D4B4, &type metadata for BinaryEncoder.UnkeyedContainer);
    atomic_store(result, (unint64_t *)&qword_1004097D0);
  }
  return result;
}

uint64_t sub_100179648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100179120(a1, a2, v2);
}

unint64_t sub_100179664()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100406278;
  if (!qword_100406278)
  {
    v1 = type metadata accessor for BinaryEncoder();
    result = swift_getWitnessTable(protocol conformance descriptor for BinaryEncoder, v1);
    atomic_store(result, (unint64_t *)&qword_100406278);
  }
  return result;
}

uint64_t sub_1001796A8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 16, v7, 0, 0);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  *a2 = v4;
  a2[1] = v5;
  return sub_100031FEC(v4, v5);
}

ValueMetadata *type metadata accessor for BinaryEncoder.UnkeyedContainer()
{
  return &type metadata for BinaryEncoder.UnkeyedContainer;
}

uint64_t sub_100179704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BinaryEncoder.encode<A>(_:)(a1, a4);
}

uint64_t sub_10017972C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return BinaryEncoder.encode<A>(_:)(a1, a4, a6);
}

uint64_t sub_100179754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100178E1C(a1, a2, a3);
}

char *Socket.__allocating_init(domain:type:proto:)(int a1, int a2, int a3)
{
  uint64_t v3;

  swift_allocObject(v3, 20, 7);
  return Socket.init(domain:type:proto:)(a1, a2, a3);
}

uint64_t RoutingSocket.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  Swift::Int32 v9;
  Swift::Int32 v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for RoutingSocket(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x676E6974756F72, 0xE700000000000000);
  *(_DWORD *)&v5[*(int *)(v2 + 20)] = 0;
  v6 = type metadata accessor for Socket();
  swift_allocObject(v6, 20, 7);
  v7 = Socket.init(domain:type:proto:)(17, 3, 0);
  if (!v7)
    goto LABEL_4;
  v8 = v7;
  v9 = *((_DWORD *)v7 + 4);
  v10 = fcntl(_:_:)(v9, 3);
  if (fcntl(_:_:_:)(v9, 4, v10 | 4))
  {
    swift_release(v8);
LABEL_4:
    v11 = type metadata accessor for Logger(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v5, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  *(_QWORD *)&v5[*(int *)(v2 + 24)] = v8;
  sub_10017AC48((uint64_t)v5, a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(a1, 0, 1, v2);
  return sub_10017AC8C((uint64_t)v5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RoutingSocket.clearNeighborDiscoveryTable(for:with:interfaceIndex:)(Swift::String a1, CoreP2P::WiFiAddress_optional *with, Swift::UInt32 interfaceIndex)
{
  sub_10017B044((unint64_t)with & 0xFFFFFFFFFFFFLL | ((((unint64_t)with >> 48) & 1) << 48), interfaceIndex);
}

void RoutingSocket.updateNeighborDiscoveryTable(macAddress:ipv6Address:for:interfaceIndex:command:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  sub_10017B9DC(a1 & 0xFFFFFFFFFFFFLL, a2, a3, a8, a9);
}

uint64_t RoutingSocket.macAddress(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  __int128 *v6;
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  _BYTE v18[24];
  int v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _BYTE v23[40];

  v20 = xmmword_10033A100;
  v11 = 0;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0;
  v9 = 1029;
  v10 = 0x1100000807;
  v4 = *(int *)(type metadata accessor for RoutingSocket(0) + 20);
  v12 = *(_DWORD *)(v1 + v4) + 1;
  *(_DWORD *)(v1 + v4) = v12;
  sub_100063EB8(a1, (uint64_t)v23, &qword_100405B20);
  if (v23[32])
    v5 = 140;
  else
    v5 = 128;
  v8 = v5;
  Data._Representation.append(contentsOf:)(&v8, v18);
  sub_100063EB8(a1, (uint64_t)&v21, &qword_100405B20);
  if ((v22 & 1) != 0)
  {
    v19 = 0;
    *(_QWORD *)v18 = 7708;
    *(_OWORD *)&v18[8] = v21;
    v6 = &v20;
  }
  else
  {
    *(_QWORD *)&v18[8] = 0;
    *(_DWORD *)v18 = 528;
    *(_DWORD *)&v18[4] = v21;
    v6 = (__int128 *)&v18[16];
  }
  Data._Representation.append(contentsOf:)(v18, v6);
  *(_QWORD *)&v18[7] = 0;
  *(_QWORD *)&v18[12] = 0;
  *(_DWORD *)v18 = 4628;
  *(_WORD *)&v18[4] = 6;
  v18[6] = 6;
  Data._Representation.append(contentsOf:)(v18, &v18[20]);
  sub_10017ACC8((uint64_t)&v20);
  if (!v2)
    __asm { BR              X10 }
  return sub_10000E614(v20, *((unint64_t *)&v20 + 1));
}

Swift::Bool __swiftcall NSXPCConnection.has(entitlement:)(Swift::String entitlement)
{
  void *v1;
  NSString v2;
  id v3;
  Swift::Bool v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "valueForEntitlement:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v6, v3);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100063EB8((uint64_t)v6, (uint64_t)v7, &qword_100405050);
  if (v8)
  {
    if ((swift_dynamicCast(&v5, v7, &type metadata for Any[8], &type metadata for Bool, 6) & 1) != 0)
      return v5;
  }
  else
  {
    sub_100033A84((uint64_t)v7, &qword_100405050);
  }
  return 0;
}

void NWConnection.send<A>(_:errorHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for NWConnection.SendCompletion(0);
  __chkstk_darwin();
  v8 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = JSONEncoder.init()();
  dispatch thunk of JSONEncoder.encode<A>(_:)(a1, a4, a5);
  v11 = v10;
  swift_release(v9);
  __asm { BR              X11 }
}

uint64_t NWConnection.send(_:errorHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = type metadata accessor for NWConnection.SendCompletion(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (uint64_t (**)(uint64_t))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = swift_allocObject(&unk_1003E9440, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  *v11 = sub_10017BE50;
  v11[1] = (uint64_t (*)(uint64_t))v12;
  (*(void (**)(uint64_t (**)(uint64_t), _QWORD, uint64_t))(v9 + 104))(v11, enum case for NWConnection.SendCompletion.contentProcessed(_:), v8);
  type metadata accessor for NWConnection.ContentContext(0);
  v13 = swift_retain();
  v14 = static NWConnection.ContentContext.defaultMessage.getter(v13);
  NWConnection.send(content:contentContext:isComplete:completion:)(a1, a2, v14, 1, v11);
  swift_release(v14);
  return (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10017A590(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;

  sub_100012C44(&qword_100409AB8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NWError(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10017C27C(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return sub_100033A84((uint64_t)v5, &qword_100409AB8);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  v11 = sub_10017C2C4();
  v12 = Error.localizedDescription.getter(v6, v11);
  v14 = v13;
  a2(v12);
  v15 = swift_bridgeObjectRelease(v14);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v15);
}

char *Socket.init(domain:type:proto:)(int a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *result;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = socket(a1, a2, a3);
  *(_DWORD *)(v4 + 16) = v12;
  if ((v12 & 0x80000000) == 0)
    return (char *)v4;
  swift_release(v4);
  v13 = Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x676E6974756F72, 0xE700000000000000);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  if (!os_log_type_enabled(v14, v15))
  {
LABEL_5:

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  v16 = (uint8_t *)swift_slowAlloc(12, -1);
  v17 = swift_slowAlloc(32, -1);
  v25 = v17;
  *(_DWORD *)v16 = 136315138;
  v19 = errno.getter(v17, v18);
  result = strerror(v19);
  if (result)
  {
    v21 = String.init(cString:)(result);
    v23 = v22;
    v24 = sub_100013CC8(v21, v22, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to create socket: %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RoutingSocket(uint64_t a1)
{
  uint64_t result;

  result = qword_100409A78;
  if (!qword_100409A78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RoutingSocket);
  return result;
}

uint64_t Socket.__allocating_init(rawValue:)(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_allocObject(v1, 20, 7);
  if (a1 < 0)
    __break(1u);
  else
    *(_DWORD *)(result + 16) = a1;
  return result;
}

uint64_t Socket.init(rawValue:)(uint64_t result)
{
  uint64_t v1;

  if ((result & 0x80000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v1 + 16) = result;
    return v1;
  }
  return result;
}

uint64_t Socket.deinit()
{
  uint64_t v0;

  close(*(_DWORD *)(v0 + 16));
  return v0;
}

uint64_t Socket.__deallocating_deinit()
{
  uint64_t v0;

  close(*(_DWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 20, 7);
}

uint64_t sub_10017A97C(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = type metadata accessor for RoutingSocket(0);
  if (!a1)
    goto LABEL_16;
  v7 = result;
  v8 = *(int *)(result + 24);
  v9 = a2 - (_QWORD)a1;
  result = write(*(_DWORD *)(*(_QWORD *)(a3 + v8) + 16), a1, v9);
  if (result < 0)
  {
LABEL_10:
    if ((unint64_t)result >= 0xFFFFFFFF80000000)
    {
LABEL_11:
      v12 = result;
      if (result == 0xFFFFFFFFLL)
        v12 = errno.getter(result, v10);
      v13 = sub_100012C84();
      v14 = swift_allocError(&type metadata for WiFiError, v13, 0, 0);
      *(_QWORD *)v15 = v12;
      *(_QWORD *)(v15 + 8) = 0;
      *(_BYTE *)(v15 + 16) = 0;
      return swift_willThrow(v14);
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  result = read(*(_DWORD *)(*(_QWORD *)(a3 + v8) + 16), a1, v9);
  if (result < 1)
  {
LABEL_7:
    if ((result & 0x8000000000000000) == 0)
      return result;
    if ((unint64_t)result >= 0xFFFFFFFF80000000)
      goto LABEL_11;
    __break(1u);
    goto LABEL_10;
  }
  v11 = *(int *)(v7 + 20);
  while (a1[5] != *(_DWORD *)(a3 + v11))
  {
    result = read(*(_DWORD *)(*(_QWORD *)(a3 + v8) + 16), a1, v9);
    if (result < 1)
      goto LABEL_7;
  }
  return result;
}

uint64_t sub_10017AAA4(_DWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  ssize_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = type metadata accessor for RoutingSocket(0);
  if (!a1)
    goto LABEL_24;
  v9 = result;
  v10 = *(int *)(result + 24);
  v11 = a2 - (_QWORD)a1;
  v12 = write(*(_DWORD *)(*(_QWORD *)(a3 + v10) + 16), a1, v11);
  if (v12 < 0)
  {
    v14 = v12;
    v15 = errno.getter(v12, v13);
    if ((_DWORD)v15 != 3 || a4 != 2)
    {
      result = errno.getter(v15, v16);
      if ((_DWORD)result != 17 || a4 != 1)
      {
        if (v14 >= 0xFFFFFFFF80000000)
        {
          v22 = v14;
          goto LABEL_18;
        }
        __break(1u);
        goto LABEL_23;
      }
    }
  }
  result = read(*(_DWORD *)(*(_QWORD *)(a3 + v10) + 16), a1, v11);
  if (result < 1)
  {
LABEL_11:
    v20 = result;
    if ((result & 0x8000000000000000) == 0)
      return result;
    result = errno.getter(result, v18);
    if ((_DWORD)result == 35)
      return result;
    result = errno.getter(result, v21);
    if ((_DWORD)result == 35)
      return result;
    if (v20 >= 0xFFFFFFFF80000000)
    {
      v22 = v20;
LABEL_18:
      if (v22 == 0xFFFFFFFFLL)
        v22 = errno.getter(result, v17);
      v23 = sub_100012C84();
      v24 = swift_allocError(&type metadata for WiFiError, v23, 0, 0);
      *(_QWORD *)v25 = v22;
      *(_QWORD *)(v25 + 8) = 0;
      *(_BYTE *)(v25 + 16) = 0;
      return swift_willThrow(v24);
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  v19 = *(int *)(v9 + 20);
  while (a1[5] != *(_DWORD *)(a3 + v19))
  {
    result = read(*(_DWORD *)(*(_QWORD *)(a3 + v10) + 16), a1, v11);
    if (result < 1)
      goto LABEL_11;
  }
  return result;
}

uint64_t type metadata accessor for Socket()
{
  return objc_opt_self(_TtC7CoreP2P6Socket);
}

uint64_t sub_10017AC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoutingSocket(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017AC8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoutingSocket(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10017ACC8(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_10017AD28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = sub_10017A97C(&v6, (uint64_t)&v6 + BYTE6(a1), v3);
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v2 = v6;
  v2[1] = v5;
  return result;
}

void sub_10017AEF4(int *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  Data.InlineSlice.ensureUniqueReference()();
  v6 = *a1;
  v7 = a1[1];
  if ((int)v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = __DataStorage._bytes.getter();
  if (!v8)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v9 = v8;
  v10 = __DataStorage._offset.getter();
  v11 = v6 - v10;
  if (__OFSUB__(v6, v10))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v12 = v7 - v6;
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  sub_10017AAA4((_DWORD *)(v9 + v11), v9 + v11 + v14, a2, a3);
}

void sub_10017AFA4(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  sub_10017A97C((_DWORD *)(v7 + v9), v7 + v9 + v12, a2);
}

void sub_10017B044(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *inited;
  int v9;
  char *v10;
  char *v11;
  int v12;
  __int128 v13;
  int64_t v14;
  char *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  char *v26;
  size_t v27;
  BOOL v28;
  char v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  size_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  ssize_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  ssize_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  NSObject *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  int v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unsigned int v112;
  size_t v113;
  __int128 __dst;
  uint64_t v115;
  int v116;
  char v117[8];

  v112 = a2;
  v110 = a1;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012C44(&qword_100406930);
  inited = (_QWORD *)swift_initStackObject(v7, v117);
  *((_OWORD *)inited + 1) = xmmword_10033B190;
  *((_OWORD *)inited + 2) = xmmword_10034D850;
  inited[6] = 1;
  v113 = 0;
  v9 = sysctl((int *)inited + 8, 6u, 0, &v113, 0, 0);
  if (v9 < 0)
  {
    v16 = v9;
    swift_bridgeObjectRelease(inited);
    v17 = sub_100012C84();
    v18 = swift_allocError(&type metadata for WiFiError, v17, 0, 0);
    *(_QWORD *)v19 = v16;
    *(_QWORD *)(v19 + 8) = 0;
LABEL_10:
    *(_BYTE *)(v19 + 16) = 0;
    swift_willThrow(v18);
    return;
  }
  v10 = (char *)malloc(v113);
  if (!v10)
  {
    swift_bridgeObjectRelease(inited);
    v20 = sub_100012C84();
    v18 = swift_allocError(&type metadata for WiFiError, v20, 0, 0);
    *(_OWORD *)v19 = xmmword_10033B1B0;
    goto LABEL_10;
  }
  v11 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native(inited) & 1) == 0)
    inited = sub_10000E66C(0, 6, 0, inited);
  v12 = sysctl((int *)inited + 8, 6u, v11, &v113, 0, 0);
  if (v12 < 0)
  {
    v21 = v12;
    swift_bridgeObjectRelease(inited);
    v22 = sub_100012C84();
    v23 = swift_allocError(&type metadata for WiFiError, v22, 0, 0);
    *(_QWORD *)v24 = v21;
    *(_QWORD *)(v24 + 8) = 0;
    *(_BYTE *)(v24 + 16) = 0;
    swift_willThrow(v23);
    free(v11);
    return;
  }
  v111 = v11;
  v98 = inited;
  v14 = v113;
  if (v113 >= 0x5C)
  {
    v95 = v6;
    v96 = v4;
    v97 = v3;
    v100 = v2;
    v25 = 0;
    v99 = bswap32(v112) >> 16;
    *(_QWORD *)&v13 = 136315394;
    v94 = v13;
    v93 = (char *)&type metadata for Any + 8;
    v15 = v111;
    v102 = v113;
    while (1)
    {
      v26 = &v15[v25];
      v27 = *(unsigned __int16 *)&v15[v25];
      v28 = __OFADD__(v25, v27);
      v25 += v27;
      if (v28)
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
      }
      if (v14 < v25)
        goto LABEL_61;
      if (v27 < 0x8C)
        goto LABEL_59;
      v29 = v26[2];
      v30 = *((_WORD *)v26 + 2);
      v31 = *((_QWORD *)v26 + 1);
      v32 = *((_DWORD *)v26 + 4);
      v33 = *((_DWORD *)v26 + 22);
      __chkstk_darwin();
      *(_OWORD *)((char *)&v90 - 4) = *(_OWORD *)&v15[v38 + 12];
      v89 = *(_OWORD *)&v15[v38];
      v28 = __OFADD__(v38, 28);
      v39 = v38 + 28;
      if (v28)
        goto LABEL_64;
      v101 = v90;
      v109 = *((_QWORD *)&v89 + 1);
      v40 = &v15[v39];
      v41 = v15[v39 + 5];
      v42 = v40[6];
      v115 = *((_QWORD *)v40 + 1);
      v116 = *((_DWORD *)v40 + 4);
      v108 = v34;
      v107 = v35;
      v106 = v36;
      v105 = v37;
      if ((_DWORD)v42)
      {
        v103 = v33;
        v43 = (char *)&v115 + v41;
        if (v42 <= 0xE)
        {
          *(_QWORD *)((char *)&__dst + 6) = 0;
          *(_QWORD *)&__dst = 0;
          BYTE14(__dst) = v42;
          memcpy(&__dst, (char *)&v115 + v41, v42);
          v46 = __dst;
          v47 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
        }
        else
        {
          v44 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
          v45 = __DataStorage.init(bytes:length:)(v43, v42);
          v46 = v42 << 32;
          v47 = v45 | 0x4000000000000000;
        }
        v33 = v103;
      }
      else
      {
        v46 = 0;
        v47 = 0xC000000000000000;
      }
      v48 = sub_10000E38C(v46, v47);
      if (v91 != v112)
      {
        if (v112 >= 0x10000)
        {
          LOBYTE(v89) = 2;
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v89, 3455, 0);
          __break(1u);
          return;
        }
        if (v99 != WORD1(v109))
          goto LABEL_58;
      }
      if ((v110 & 0x1000000000000) != 0)
      {
        if ((v48 & 0x1000000000000) != 0)
          goto LABEL_58;
      }
      else if ((v48 & 0x1000000000000) == 0)
      {
        LODWORD(__dst) = v110;
        WORD2(__dst) = WORD2(v110);
        LODWORD(v115) = v48;
        BYTE4(v115) = BYTE4(v48);
        BYTE5(v115) = BYTE5(v48);
        if ((_DWORD)v110 == (_DWORD)v48 && WORD2(v110) == WORD2(v115))
          goto LABEL_58;
      }
      v50 = type metadata accessor for RoutingSocket(0);
      v51 = *(int *)(v50 + 20);
      v52 = v100;
      v53 = *(_DWORD *)(v100 + v51) + 1;
      *(_DWORD *)(v100 + v51) = v53;
      *(_WORD *)v26 = v27;
      v26[2] = v29;
      v26[3] = 2;
      *((_WORD *)v26 + 2) = v30;
      *((_QWORD *)v26 + 1) = v31;
      *((_DWORD *)v26 + 4) = v32;
      *((_DWORD *)v26 + 5) = v53;
      *(_OWORD *)(v26 + 24) = v108;
      *(_OWORD *)(v26 + 40) = v107;
      *(_OWORD *)(v26 + 56) = v106;
      *(_OWORD *)(v26 + 72) = v105;
      *((_DWORD *)v26 + 22) = v33;
      v54 = *(_DWORD *)(*(_QWORD *)(v52 + *(int *)(v50 + 24)) + 16);
      v55 = write(v54, v26, v27);
      if (v55 < 0)
      {
        v57 = v55;
        v58 = errno.getter(v55, v56);
        if ((_DWORD)v58 != 3)
          break;
      }
      v60 = read(v54, v26, v27);
      if (v60 >= 1)
      {
        v14 = v102;
        if (*((_DWORD *)v26 + 5) == v53)
          goto LABEL_59;
        while (1)
        {
          v60 = read(v54, v26, v27);
          if (v60 < 1)
            break;
          if (*((_DWORD *)v26 + 5) == v53)
            goto LABEL_59;
        }
        v62 = v60;
        if ((v60 & 0x8000000000000000) == 0)
          goto LABEL_59;
LABEL_51:
        v84 = errno.getter(v60, v61);
        if ((_DWORD)v84 == 35)
          goto LABEL_59;
        v86 = errno.getter(v84, v85);
        if ((_DWORD)v86 == 35)
          goto LABEL_59;
        if (v62 < 0xFFFFFFFF80000000)
          goto LABEL_66;
        v62 = v62;
        if (v62 == 0xFFFFFFFFLL)
          v62 = errno.getter(v86, v87);
        v88 = sub_100012C84();
        v67 = swift_allocError(&type metadata for WiFiError, v88, 0, 0);
        v69 = v67;
        *(_QWORD *)v68 = v62;
        v63 = v97;
        v64 = v96;
        v65 = v95;
        goto LABEL_48;
      }
      v62 = v60;
      v14 = v102;
      if (v60 < 0)
        goto LABEL_51;
LABEL_59:
      if (__OFADD__(v25, 92))
        goto LABEL_63;
      v15 = v111;
      if (v14 < v25 + 92)
        goto LABEL_61;
    }
    if (v57 < 0xFFFFFFFF80000000)
      goto LABEL_65;
    v57 = v57;
    v63 = v97;
    v64 = v96;
    v65 = v95;
    if (v57 == 0xFFFFFFFFLL)
      v57 = errno.getter(v58, v59);
    v66 = sub_100012C84();
    v67 = swift_allocError(&type metadata for WiFiError, v66, 0, 0);
    v69 = v67;
    *(_QWORD *)v68 = v57;
LABEL_48:
    *(_QWORD *)(v68 + 8) = 0;
    *(_BYTE *)(v68 + 16) = 0;
    swift_willThrow(v67);
    v104 = 0;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v65, v100, v63);
    swift_errorRetain(v69);
    v70 = swift_errorRetain(v69);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.error.getter(v71);
    v73 = v71;
    if (os_log_type_enabled(v71, v72))
    {
      v74 = swift_slowAlloc(22, -1);
      *(_QWORD *)&v107 = swift_slowAlloc(8, -1);
      *(_QWORD *)&v108 = swift_slowAlloc(32, -1);
      v115 = v108;
      *(_DWORD *)v74 = v94;
      v75 = (char *)swift_slowAlloc(46, -1);
      *(_QWORD *)&__dst = v109;
      *((_QWORD *)&__dst + 1) = v101;
      inet_ntop(30, &__dst, v75, 0x2Eu);
      v76 = String.init(cString:)(v75);
      v78 = v77;
      swift_slowDealloc(v75, -1, -1);
      *(_QWORD *)(v74 + 4) = sub_100013CC8(v76, v78, &v115);
      swift_bridgeObjectRelease(v78);
      *(_WORD *)(v74 + 12) = 2112;
      swift_errorRetain(v69);
      v79 = _swift_stdlib_bridgeErrorToNSError(v69);
      *(_QWORD *)(v74 + 14) = v79;
      v80 = v107;
      *(_QWORD *)v107 = v79;
      swift_errorRelease(v69);
      swift_errorRelease(v69);
      v81 = v73;
      _os_log_impl((void *)&_mh_execute_header, v73, v72, "Failed to remove from NDP entry for %s because %@", (uint8_t *)v74, 0x16u);
      v82 = sub_100012C44(&qword_100404BB0);
      swift_arrayDestroy(v80, 1, v82);
      swift_slowDealloc(v80, -1, -1);
      v83 = v108;
      swift_arrayDestroy(v108, 1, v93);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v74, -1, -1);

      swift_errorRelease(v69);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v65, v97);
    }
    else
    {
      swift_errorRelease(v69);
      swift_errorRelease(v69);
      swift_errorRelease(v69);

      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v63);
    }
LABEL_58:
    v14 = v102;
    goto LABEL_59;
  }
  v15 = v111;
LABEL_61:
  swift_bridgeObjectRelease(v98);
  free(v15);
}

void sub_10017B9DC(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD v21[3];
  char v22;
  _BYTE v23[13];
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;

  v24 = 327680;
  v25 = 0;
  v28 = 0;
  v27 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  v29 = 4;
  v26 = 0x300000804;
  v35 = 7708;
  v41 = a4;
  if (a4 < 0x10000)
  {
    v6 = v5;
    v7 = a1;
    v36 = a2;
    v37 = bswap32(a4) >> 16;
    v38 = WORD2(a2);
    v39 = HIWORD(a2);
    v8 = a1 >> 40;
    v40 = a3;
    v9 = HIDWORD(a1);
    memset(v23, 0, sizeof(v23));
    v10 = a1 >> 24;
    v11 = a1 >> 16;
    v21[0] = 4628;
    v12 = a1 >> 8;
    v21[2] = 6;
    v22 = 6;
    v21[1] = a4;
    v13 = sub_100012C44(&qword_100403E88);
    v14 = swift_allocObject(v13, 38, 7);
    *(_OWORD *)(v14 + 16) = xmmword_10033B190;
    *(_BYTE *)(v14 + 32) = v7;
    *(_BYTE *)(v14 + 33) = v12;
    *(_BYTE *)(v14 + 34) = v11;
    *(_BYTE *)(v14 + 35) = v10;
    *(_BYTE *)(v14 + 36) = v9;
    *(_BYTE *)(v14 + 37) = v8;
    v15 = sub_1001068EC(v14);
    v17 = v16;
    swift_bridgeObjectRelease(v14);
    *(_QWORD *)&v34 = v15;
    *((_QWORD *)&v34 + 1) = v17;
    v18 = sub_100068D00();
    DataProtocol.copyBytes(to:)(&v23[1], &v24, &type metadata for Data, v18);
    sub_10000E614(v15, v17);
    LOWORD(v24) = 140;
    v19 = *(int *)(type metadata accessor for RoutingSocket(0) + 20);
    HIDWORD(v27) = *(_DWORD *)(v6 + v19) + 1;
    *(_DWORD *)(v6 + v19) = HIDWORD(v27);
    if ((a5 & 0x80000000) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      goto LABEL_7;
    }
    if (a5 < 0x100)
    {
      HIBYTE(v24) = a5;
      v34 = xmmword_10033A100;
      Data._Representation.append(contentsOf:)(&v24, &v34);
      Data._Representation.append(contentsOf:)(&v35, &v42);
      Data._Representation.append(contentsOf:)(v21, &v24);
      __asm { BR              X12 }
    }
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_7:
  __break(1u);
  JUMPOUT(0x10017BE1CLL);
}

uint64_t sub_10017BE2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017BE50(uint64_t a1)
{
  uint64_t v1;

  return sub_10017A590(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t *initializeBufferWithCopyOfBuffer for RoutingSocket(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t destroy for RoutingSocket(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t initializeWithCopy for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t initializeWithTake for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10017C0F8);
}

uint64_t sub_10017C0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017C180);
}

uint64_t sub_10017C180(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_10017C1F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10017C27C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44(&qword_100409AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10017C2C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100409AC0;
  if (!qword_100409AC0)
  {
    v1 = type metadata accessor for NWError(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NWError, v1);
    atomic_store(result, (unint64_t *)&qword_100409AC0);
  }
  return result;
}

uint64_t static DispatchTime.- infix(_:_:)()
{
  return DispatchTime.distance(to:)();
}

BOOL sub_10017C334(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  char v10;
  void (*v11)(char *, uint64_t);
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = enum case for DispatchTimeInterval.never(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for DispatchTimeInterval.never(_:), v4);
  v10 = static DispatchTimeInterval.== infix(_:_:)(a2, v7);
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if ((v10 & 1) != 0)
    return 1;
  v9(v7, v8, v4);
  v13 = static DispatchTimeInterval.== infix(_:_:)(a1, v7);
  v11(v7, v4);
  if ((v13 & 1) != 0)
    return 0;
  v14 = sub_10017C64C();
  return v14 >= sub_10017C64C();
}

uint64_t sub_10017C444(unsigned __int8 a1, char a2)
{
  int v4;
  uint64_t v5;
  uint64_t result;

  v4 = a1;
  v5 = sub_100012C44(&qword_100406E48);
  if (v4 == 2)
    return 1;
  if (a2 == 2)
    return 0;
  if (a1 == 3)
    return 1;
  if (a2 == 3)
    return 0;
  if ((a1 - 2) >= 5u && (a1 & 1) == 0)
    return 1;
  if ((a2 - 2) >= 5u && (a2 & 1) == 0)
    return 0;
  if ((a1 - 2) >= 5u && (a1 & 1) != 0)
    return 1;
  if ((a2 - 2) >= 5u && (a2 & 1) != 0)
    return 0;
  if (a1 == 4)
    return 1;
  if (a2 == 4)
    return 0;
  if (a1 == 5)
    return 1;
  if (a2 == 5)
    return 0;
  if (a1 == 6)
    return 1;
  if (a2 == 6)
    return 0;
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v5, v5);
  __break(1u);
  return result;
}

BOOL sub_10017C550(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = dword_10034DA50[(int)a2];
  if ((a1 & 0x100000000) != 0)
    LODWORD(a1) = dword_10034DA50[(int)a1];
  return a2 >= a1;
}

uint64_t DispatchTimeInterval.nanDiscoveryWindowCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = type metadata accessor for DispatchTimeInterval(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (uint64_t *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_10017C64C();
  *v3 = 0x80000;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DispatchTimeInterval.microseconds(_:), v0);
  v5 = sub_10017C64C();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v3, v0);
  if (v5)
  {
    if (v4 != 0x8000000000000000 || v5 != -1)
      return v4 / v5;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10017C64C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    v7 = *(_QWORD *)v5;
    v8 = 1000000000;
LABEL_7:
    v9 = v7 * v8;
    v10 = (unsigned __int128)(v7 * (__int128)v8) >> 64;
    v11 = v7 <= 0;
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (v11)
      v12 = 0x8000000000000000;
    if (v10 == v9 >> 63)
      return v9;
    else
      return v12;
  }
  if (v6 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    v7 = *(_QWORD *)v5;
    v8 = 1000000;
    goto LABEL_7;
  }
  if (v6 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    v7 = *(_QWORD *)v5;
    v8 = 1000;
    goto LABEL_7;
  }
  if (v6 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    return *(_QWORD *)v5;
  }
  else
  {
    if (v6 != enum case for DispatchTimeInterval.never(_:))
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

uint64_t DispatchTimeInterval.rawSeconds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v7 = *v5;
    v8 = 1000000000;
  }
  else if (v6 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v7 = *v5;
    v8 = 1000000;
  }
  else
  {
    if (v6 != enum case for DispatchTimeInterval.microseconds(_:))
    {
      if (v6 != enum case for DispatchTimeInterval.nanoseconds(_:))
      {
        if (v6 != enum case for DispatchTimeInterval.never(_:))
          (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
        return 0x7FFFFFFFFFFFFFFFLL;
      }
      (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
      v9 = *v5;
      goto LABEL_12;
    }
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v7 = *v5;
    v8 = 1000;
  }
  v9 = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
    if (v7 <= 0)
      return 0x8000000000000000;
    return 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_12:
  if (v9 > 0x1DCD64FFFFFFFFFFLL)
    return 0x7FFFFFFFFFFFFFFFLL;
  if (v9 <= -2147483649000000000)
    return 0x8000000000000000;
  return v9 / 1000000000;
}

void DispatchTime.hash(into:)()
{
  Swift::UInt64 v0;

  v0 = DispatchTime.rawValue.getter();
  Hasher._combine(_:)(v0);
}

uint64_t static DispatchTime.+= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  + infix(_:_:)(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
}

Swift::Int DispatchTime.hashValue.getter()
{
  _QWORD *v0;
  Swift::UInt64 v1;
  _QWORD v3[9];

  v0 = Hasher.init(_seed:)(v3);
  v1 = DispatchTime.rawValue.getter(v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10017CAB8()
{
  _QWORD *v0;
  Swift::UInt64 v1;
  _QWORD v3[9];

  v0 = Hasher.init(_seed:)(v3);
  v1 = DispatchTime.rawValue.getter(v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t DispatchTime.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for DispatchTimeInterval(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100403F80 != -1)
    swift_once(&qword_100403F80, sub_10012AF3C);
  (*(void (**)(void))(*(_QWORD *)algn_1004104A8 + 8))();
  v9 = sub_100011DE4(&qword_100409AC8, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime, (uint64_t)&protocol conformance descriptor for DispatchTime);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v0, v8, v5, v9) & 1) != 0)
  {
    DispatchTime.distance(to:)(v8);
    v16 = DispatchTimeInterval.description.getter();
    v17 = v10;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v11 = 1869046048;
    v12 = 0xE400000000000000;
  }
  else
  {
    if ((static DispatchTime.< infix(_:_:)(v8, v0) & 1) == 0)
    {
      v14 = 7827310;
      goto LABEL_9;
    }
    DispatchTime.distance(to:)(v0);
    v16 = DispatchTimeInterval.description.getter();
    v17 = v13;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v11 = 0x726574616C20;
    v12 = 0xE600000000000000;
  }
  String.append(_:)(*(Swift::String *)&v11);
  v14 = v16;
LABEL_9:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v14;
}

uint64_t DispatchTime.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  __chkstk_darwin();
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v1, v8);
  v17 = _swiftEmptyArrayStorage;
  v12 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  v13 = sub_100012C44(&qword_100405B90);
  v14 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v10, &v17, v7, v5, v8, v13, v14);
}

uint64_t sub_10017CE74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v1, a1);
  v17 = _swiftEmptyArrayStorage;
  v12 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  v13 = sub_100012C44(&qword_100405B90);
  v14 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v10, &v17, v8, v6, a1, v13, v14);
}

uint64_t static DispatchTimeInterval.hours(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if ((unsigned __int128)(result * (__int128)3600) >> 64 == (3600 * result) >> 63)
  {
    *a2 = 3600 * result;
    v3 = enum case for DispatchTimeInterval.seconds(_:);
    v4 = type metadata accessor for DispatchTimeInterval(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(a2, v3, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static DispatchTimeInterval.zero.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 0;
  v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t DispatchTimeInterval.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v0 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v40 = *(_QWORD *)(v0 - 8);
  v41 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v37 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10017C64C();
  v33 = ((v12 >> 63) & 0xFFFFFFFFC4653600) + (((unint64_t)v12 * (unsigned __int128)0x3B9ACA00uLL) >> 64);
  v34 = 1000000000 * v12;
  v13 = sub_100012C44(&qword_1004088C0);
  v14 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(v13, v18 - v16 + 8 * v16, v17 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_100349F50;
  v20 = static Duration.UnitsFormatStyle.Unit.days.getter();
  v21 = static Duration.UnitsFormatStyle.Unit.hours.getter(v20);
  v22 = static Duration.UnitsFormatStyle.Unit.minutes.getter(v21);
  v23 = static Duration.UnitsFormatStyle.Unit.seconds.getter(v22);
  v24 = static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v23);
  v25 = static Duration.UnitsFormatStyle.Unit.microseconds.getter(v24);
  static Duration.UnitsFormatStyle.Unit.nanoseconds.getter(v25);
  v26 = sub_100016974(v19);
  swift_setDeallocating(v19);
  swift_arrayDestroy(v19 + v18, 7, v14);
  v27 = swift_deallocClassInstance(v19, 32, 7);
  v28 = static Duration.UnitsFormatStyle.UnitWidth.wide.getter(v27);
  v29 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v28);
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v29);
  static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)(v26, v8, 1, 0, v5, 0, 1, v2);
  swift_bridgeObjectRelease(v26);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v2, v41);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v39);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
  v30 = sub_100011DE4(&qword_1004088C8, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  Duration.formatted<A>(_:)(&v42, v11, v34, v33, v9, v30);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v9);
  return v42;
}

void DispatchTimeInterval.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 *v4;
  int v5;
  int64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  Swift::UInt64 v12;
  uint64_t v13;

  v1 = type metadata accessor for DispatchTimeInterval(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (Swift::UInt64 *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  v5 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    v6 = *v4;
    v7 = 1000000000;
LABEL_7:
    v8 = v6 * v7;
    v9 = (unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63;
    v10 = v6 <= 0;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (v10)
      v11 = 0x8000000000000000;
    if (v9)
      v12 = v11;
    else
      v12 = v8;
    goto LABEL_12;
  }
  if (v5 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    v6 = *v4;
    v7 = 1000000;
    goto LABEL_7;
  }
  if (v5 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    v6 = *v4;
    v7 = 1000;
    goto LABEL_7;
  }
  if (v5 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    v12 = *v4;
  }
  else
  {
    if (v5 != enum case for DispatchTimeInterval.never(_:))
      (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 8))(v4, v1);
    v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_12:
  Hasher._combine(_:)(v12);
}

BOOL static DispatchTimeInterval.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  char v10;
  void (*v11)(char *, uint64_t);
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = enum case for DispatchTimeInterval.never(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for DispatchTimeInterval.never(_:), v4);
  v10 = static DispatchTimeInterval.== infix(_:_:)(a1, v7);
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if ((v10 & 1) != 0)
    return 0;
  v9(v7, v8, v4);
  v13 = static DispatchTimeInterval.== infix(_:_:)(a2, v7);
  v11(v7, v4);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_10017C64C();
  return v14 < sub_10017C64C();
}

uint64_t static DispatchTimeInterval.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t *, uint64_t, uint64_t);
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v24 = a3;
  v5 = type metadata accessor for DispatchTimeInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)&v23 - v9;
  v11 = enum case for DispatchTimeInterval.never(_:);
  v12 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v6 + 104);
  v12((uint64_t *)((char *)&v23 - v9), enum case for DispatchTimeInterval.never(_:), v5);
  v13 = sub_100011DE4(&qword_10040E1E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTimeInterval, (uint64_t)&protocol conformance descriptor for DispatchTimeInterval);
  v23 = a1;
  v14 = dispatch thunk of static Equatable.== infix(_:_:)(a1, v10, v5, v13);
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v10, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  if ((v14 & 1) != 0)
  {
    v15(v8, v5);
LABEL_6:
    v21 = v24;
    v22 = v11;
    return v12(v21, v22, v5);
  }
  v12((uint64_t *)v10, v11, v5);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v10, v5, v13);
  v15(v10, v5);
  v15(v8, v5);
  if ((v16 & 1) != 0)
    goto LABEL_6;
  v17 = sub_10017C64C();
  v18 = sub_10017C64C();
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
    goto LABEL_6;
  v21 = v24;
  *v24 = v19;
  v22 = enum case for DispatchTimeInterval.nanoseconds(_:);
  return v12(v21, v22, v5);
}

uint64_t static DispatchTimeInterval.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t *, uint64_t, uint64_t);
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v24 = a3;
  v5 = type metadata accessor for DispatchTimeInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)&v23 - v9;
  v11 = enum case for DispatchTimeInterval.never(_:);
  v12 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v6 + 104);
  v12((uint64_t *)((char *)&v23 - v9), enum case for DispatchTimeInterval.never(_:), v5);
  v13 = sub_100011DE4(&qword_10040E1E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTimeInterval, (uint64_t)&protocol conformance descriptor for DispatchTimeInterval);
  v23 = a1;
  v14 = dispatch thunk of static Equatable.== infix(_:_:)(a1, v10, v5, v13);
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v10, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  if ((v14 & 1) != 0)
  {
    v15(v8, v5);
LABEL_6:
    v21 = v24;
    v22 = v11;
    return v12(v21, v22, v5);
  }
  v12((uint64_t *)v10, v11, v5);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v10, v5, v13);
  v15(v10, v5);
  v15(v8, v5);
  if ((v16 & 1) != 0)
    goto LABEL_6;
  v17 = sub_10017C64C();
  v18 = sub_10017C64C();
  v19 = v17 - v18;
  if (__OFSUB__(v17, v18))
    goto LABEL_6;
  v21 = v24;
  *v24 = v19;
  v22 = enum case for DispatchTimeInterval.nanoseconds(_:);
  return v12(v21, v22, v5);
}

double DispatchTimeInterval.timeInterval.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v7 = *v5;
    v8 = 1000000000;
LABEL_7:
    v9 = v7 * v8;
    v10 = (unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63;
    v11 = v7 <= 0;
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (v11)
      v12 = 0x8000000000000000;
    if (!v10)
      v12 = v9;
    return (double)v12 / 1000000000.0;
  }
  if (v6 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v7 = *v5;
    v8 = 1000000;
    goto LABEL_7;
  }
  if (v6 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v7 = *v5;
    v8 = 1000;
    goto LABEL_7;
  }
  if (v6 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v12 = *v5;
  }
  else
  {
    if (v6 != enum case for DispatchTimeInterval.never(_:))
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
    v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
  return (double)v12 / 1000000000.0;
}

Swift::Int DispatchTimeInterval.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  DispatchTimeInterval.hash(into:)();
  return Hasher._finalize()();
}

BOOL sub_10017DBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char v11;
  void (*v12)(char *, uint64_t);
  char v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = enum case for DispatchTimeInterval.never(_:);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  ((void (*)(char *, _QWORD))v10)(v8, enum case for DispatchTimeInterval.never(_:));
  v11 = static DispatchTimeInterval.== infix(_:_:)(a1, v8);
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, a3);
  if ((v11 & 1) != 0)
    return 0;
  v10(v8, v9, a3);
  v14 = static DispatchTimeInterval.== infix(_:_:)(a2, v8);
  v12(v8, a3);
  if ((v14 & 1) != 0)
    return 1;
  v15 = sub_10017C64C();
  return v15 < sub_10017C64C();
}

BOOL sub_10017DCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char v11;
  void (*v12)(char *, uint64_t);
  char v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = enum case for DispatchTimeInterval.never(_:);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  ((void (*)(char *, _QWORD))v10)(v8, enum case for DispatchTimeInterval.never(_:));
  v11 = static DispatchTimeInterval.== infix(_:_:)(a2, v8);
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, a3);
  if ((v11 & 1) != 0)
    return 0;
  v10(v8, v9, a3);
  v14 = static DispatchTimeInterval.== infix(_:_:)(a1, v8);
  v12(v8, a3);
  if ((v14 & 1) != 0)
    return 1;
  v15 = sub_10017C64C();
  return v15 < sub_10017C64C();
}

uint64_t sub_10017DDD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  return (*(uint64_t (**)(_QWORD *, _QWORD))(*(_QWORD *)(a1 - 8) + 104))(a2, enum case for DispatchTimeInterval.nanoseconds(_:));
}

uint64_t sub_10017DE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017DE1C(a1, a2, a3);
}

uint64_t sub_10017DE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017DE1C(a1, a2, a3);
}

uint64_t sub_10017DE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, a3);
}

Swift::Int sub_10017DEA8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  DispatchTimeInterval.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_10017DEE0(uint64_t a1)
{
  return sub_10017DF54(a1, "wifip2pd.nan", 0xD000000000000011, 0x8000000100367630, &static OS_dispatch_queue.nan);
}

id static OS_dispatch_queue.nan.getter()
{
  return sub_10017E188(&qword_1004040F8, (id *)&static OS_dispatch_queue.nan);
}

uint64_t sub_10017DF28(uint64_t a1)
{
  return sub_10017DF54(a1, "wifip2pd.awdl", 0xD000000000000012, 0x8000000100367600, &static OS_dispatch_queue.awdl);
}

uint64_t sub_10017DF54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;

  v23 = a4;
  v24 = a5;
  v22 = a3;
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = sub_100016750();
  static DispatchQoS.userInteractive.getter();
  v16 = sub_1003342EC(a2);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100011DE4((unint64_t *)&unk_10040FFC0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_100012C44((uint64_t *)&unk_1004042C0);
  v19 = sub_100011770(qword_10040FFD0, (uint64_t *)&unk_1004042C0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v10, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v22, v23, v15, v12, v9, v16);
  *v24 = result;
  return result;
}

id static OS_dispatch_queue.awdl.getter()
{
  return sub_10017E188(&qword_100404100, (id *)&static OS_dispatch_queue.awdl);
}

uint64_t sub_10017E140(uint64_t a1)
{
  return sub_10017DF54(a1, "wifip2pd.p2p", 0xD000000000000011, 0x8000000100367650, &static OS_dispatch_queue.p2p);
}

id static OS_dispatch_queue.p2p.getter()
{
  return sub_10017E188(&qword_100404108, (id *)&static OS_dispatch_queue.p2p);
}

id sub_10017E188(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t sub_10017E1C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28[24];

  v26 = a2;
  v24 = a4;
  v25 = a1;
  v23 = a6;
  v8 = sub_100013C64((uint64_t *)&unk_10040C360);
  v9 = type metadata accessor for Result(255, a5, v8, &protocol self-conformance witness table for Error);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin();
  v14 = (char *)&v23 - v13;
  v15 = swift_allocBox(v12);
  v17 = v16;
  v18 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v9);
  v19 = (_QWORD *)swift_allocObject(&unk_1003E9468, 40, 7);
  v19[2] = a5;
  v19[3] = a3;
  v20 = v25;
  v19[4] = v24;
  sub_10017E374((uint64_t)sub_10017E944, (uint64_t)v19, v20, v26, v15, v27, a5);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation(v19, "", 89, 279, 3, 0);
  result = swift_release(v19);
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v22 = swift_beginAccess(v17, v28, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, v17, v10, v22);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v9);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v23, v14, v9);
      return swift_release(v15);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10017E374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  _QWORD aBlock[5];
  _QWORD *v27;

  v25[1] = a6;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v19 + 16))(v18, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  v20 = (_QWORD *)swift_allocObject(&unk_1003E9490, 48, 7);
  v20[2] = a7;
  v20[3] = a5;
  v20[4] = a1;
  v20[5] = a2;
  aBlock[4] = sub_10017E990;
  v27 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = &unk_1003E94A8;
  v21 = _Block_copy(aBlock);
  v22 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  swift_retain();
  swift_retain();
  v23 = DispatchWorkItem.init(qos:flags:block:)(v18, v16, v21);
  swift_release(v27);
  OS_dispatch_queue.asyncAndWait(execute:)(v23);
  return swift_release(v23);
}

uint64_t sub_10017E520(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  __n128 v14;
  _BYTE v16[32];

  v7 = sub_100013C64((uint64_t *)&unk_10040C360);
  v8 = type metadata accessor for Result(255, a4, v7, &protocol self-conformance witness table for Error);
  v9 = type metadata accessor for Optional(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  v12 = &v16[-v11];
  v13 = swift_projectBox(a1);
  a2();
  swift_storeEnumTagMultiPayload(v12, v8, 0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v12, 0, 1, v8);
  v14 = swift_beginAccess(v13, v16, 1, 0);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, __n128))(v10 + 40))(v13, v12, v9, v14);
}

uint64_t OS_dispatch_queue.asyncAndWait<A>(qos:flags:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;

  v12 = sub_100013C64((uint64_t *)&unk_10040C360);
  v13 = type metadata accessor for Result(0, a5, v12, &protocol self-conformance witness table for Error);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)&v18 - v15;
  sub_10017E1C0(a1, a2, a3, a4, a5, (uint64_t)&v18 - v15);
  if (swift_getEnumCaseMultiPayload(v16, v13) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a6, v16, a5);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "CoreP2P/DispatchExtensions.swift", 32, 2, 301, 0);
  __break(1u);
  return result;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;

  v18 = a6;
  v11 = sub_100013C64((uint64_t *)&unk_10040C360);
  v12 = type metadata accessor for Result(0, a5, v11, &protocol self-conformance witness table for Error);
  __chkstk_darwin();
  v14 = (char *)&v17 - v13;
  sub_10017E1C0(a1, a2, a3, a4, a5, (uint64_t)&v17 - v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v12);
  if ((_DWORD)EnumCaseMultiPayload == 1)
    return swift_willThrow(EnumCaseMultiPayload);
  else
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v18, v14, a5);
}

uint64_t sub_10017E8DC()
{
  return sub_100011DE4(&qword_100409AD0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime, (uint64_t)&protocol conformance descriptor for DispatchTime);
}

uint64_t sub_10017E908()
{
  return sub_100011DE4(&qword_10040E1E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTimeInterval, (uint64_t)&protocol conformance descriptor for DispatchTimeInterval);
}

uint64_t sub_10017E934()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10017E944()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_10017E964()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10017E990()
{
  uint64_t v0;

  return sub_10017E520(*(_QWORD *)(v0 + 24), *(void (**)(void))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
}

uint64_t static OWEKeys.== infix(_:_:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  v2 = v1;
  v3 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  v5 = v4;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v0, v2);
  v7 = v6;
  sub_10000E614(v3, v5);
  sub_10000E614(v0, v2);
  return v7 & 1;
}

uint64_t OWEKeys.init(privateKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_10017EA5C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1000FAE78(0xD000000000000012, 0x8000000100367670);
  *(_QWORD *)&xmmword_100410550 = result;
  *((_QWORD *)&xmmword_100410550 + 1) = v1;
  return result;
}

uint64_t sub_10017EA94()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1001068EC((uint64_t)&off_1003D70F8);
  qword_100409AD8 = result;
  unk_100409AE0 = v1;
  return result;
}

uint64_t OWEKeys.generatePMK(for:asClient:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[4];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  _QWORD v49[2];
  uint64_t v50;
  unint64_t v51;

  v47 = a2;
  v4 = type metadata accessor for SymmetricKey(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin();
  v44 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100408860);
  __chkstk_darwin();
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SharedSecret(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(a1);
  v39[3] = 0;
  v40 = v7;
  v16 = v47;
  v41 = v6;
  v42 = v2;
  v43 = v15;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    v39[1] = v13;
    v39[2] = v12;
    v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v43, v11, v12);
    if ((v16 & 1) != 0)
    {
      v19 = P256.KeyAgreement.PrivateKey.publicKey.getter(v18);
      v20 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v19);
      v22 = v21;
      v23 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v9, v41);
      v24 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v23);
      v26 = v25;
      v50 = v20;
      v51 = v22;
      sub_100031FEC(v20, v22);
      sub_1000FBDAC(v24, v26);
    }
    else
    {
      v20 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v18);
      v22 = v27;
      v28 = P256.KeyAgreement.PrivateKey.publicKey.getter(v20);
      v24 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v28);
      v26 = v29;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
      v50 = v20;
      v51 = v22;
      sub_100031FEC(v20, v22);
      sub_100031FEC(v24, v26);
      sub_1000FBDAC(v24, v26);
      sub_10000E614(v24, v26);
    }
    sub_10000E614(v24, v26);
    sub_10000E614(v20, v22);
    v30 = v50;
    v31 = v51;
    v32 = type metadata accessor for SHA256(0);
    if (qword_100404118 != -1)
      swift_once(&qword_100404118, sub_10017EA94);
    v33 = qword_100409AD8;
    v34 = qword_100409AE0;
    v50 = v30;
    v51 = v31;
    sub_100031FEC(qword_100409AD8, qword_100409AE0);
    sub_100031FEC(v30, v31);
    sub_1000FBDAC(v33, v34);
    sub_10000E614(v33, v34);
    v35 = v50;
    v36 = v51;
    v49[0] = v50;
    v49[1] = v51;
    if (qword_100404110 != -1)
      swift_once(&qword_100404110, sub_10017EA5C);
    v48 = xmmword_100410550;
    v37 = sub_100011DE4(&qword_100405EC0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
    v38 = sub_100068D00();
    SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)(v32, v49, &v48, 32, v32, &type metadata for Data, &type metadata for Data, v37, v38, v38);
    sub_10000E614(v35, v36);
    SymmetricKey.withUnsafeBytes<A>(_:)(&v50, sub_10006C85C, 0, &type metadata for Data);
    __asm { BR              X10 }
  }
  sub_10017F36C((uint64_t)v11);
  return 0;
}

uint64_t OWEKeys.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v1 = v0;
  v2 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OWEKeys(0);
  __chkstk_darwin();
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001297C8(v1, (uint64_t)v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  v12 = sub_100012C44(&qword_100405B90);
  v13 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v10, &v16, v7, v5, v8, v12, v13);
}

uint64_t OWEKeys.hash(into:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __n128 v5;

  v2 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  v4 = v3;
  Data.hash(into:)(a1, v2, v3, v5);
  return sub_10000E614(v2, v4);
}

Swift::Int OWEKeys.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  __n128 v4;
  _QWORD v6[9];

  v0 = Hasher.init(_seed:)(v6);
  v1 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter(v0);
  v3 = v2;
  Data.hash(into:)(v6, v1, v2, v4);
  sub_10000E614(v1, v3);
  return Hasher._finalize()();
}

Swift::Int sub_10017F1A4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  __n128 v4;
  _QWORD v6[9];

  v0 = Hasher.init(_seed:)(v6);
  v1 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter(v0);
  v3 = v2;
  Data.hash(into:)(v6, v1, v2, v4);
  sub_10000E614(v1, v3);
  return Hasher._finalize()();
}

uint64_t sub_10017F1FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001297C8(v1, (uint64_t)v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  v12 = sub_100012C44(&qword_100405B90);
  v13 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v10, &v16, v8, v6, a1, v12, v13);
}

uint64_t sub_10017F36C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012C44(&qword_100408860);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for OWEKeys(uint64_t a1)
{
  uint64_t result;

  result = qword_100409B48;
  if (!qword_100409B48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OWEKeys);
  return result;
}

uint64_t sub_10017F3E8()
{
  return sub_100011DE4(&qword_100409AE8, type metadata accessor for OWEKeys, (uint64_t)&protocol conformance descriptor for OWEKeys);
}

uint64_t initializeBufferWithCopyOfBuffer for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for OWEKeys(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for OWEKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10017F5A0);
}

uint64_t sub_10017F5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for OWEKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017F5E8);
}

uint64_t sub_10017F5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10017F628(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for P256.KeyAgreement.PrivateKey(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

void NANServiceInfo.genericServiceProtocol.getter(char a1, uint64_t a2, unint64_t a3)
{
  if (a1 == 2)
  {
    sub_100031FEC(a2, a3);
    _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(a2, a3);
  }
}

uint64_t NANServiceInfo.init(csaMatterPayload:)()
{
  return 3;
}

uint64_t NANServiceInfo.init(information:filter:)(uint64_t a1, uint64_t a2)
{
  NANGenericServiceProtocol.packetData(for:)(a2, a1);
  swift_bridgeObjectRelease(a1);
  return 2;
}

uint64_t sub_10017F740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001807A4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017F79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001807A4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10017F7E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10017F818 + 4 * byte_10034DB10[*v0]))(0x6465767265736552, 0xE800000000000000);
}

uint64_t sub_10017F818()
{
  return 0x72756F6A6E6F42;
}

uint64_t sub_10017F830()
{
  return 0x20636972656E6547;
}

uint64_t sub_10017F854()
{
  return 0x7474614D20415343;
}

uint64_t NANServiceInfo.csaMatterPayload.getter(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  if (a1 != 3)
    return 0;
  v3 = a2;
  sub_100031FEC(a2, a3);
  return v3;
}

uint64_t NANServiceInfo.hash(into:)(uint64_t a1, Swift::UInt8 a2, uint64_t a3, unint64_t a4)
{
  __n128 v7;

  Hasher._combine(_:)(a2);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(a1, a3, a4, v7);
  return sub_10000E614(a3, a4);
}

void static NANServiceInfo.__derived_struct_equals(_:_:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a1 == a4)
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
}

Swift::Int NANServiceInfo.hashValue.getter(Swift::UInt8 a1, uint64_t a2, unint64_t a3)
{
  __n128 v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(a1);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(v8, a2, a3, v6);
  sub_10000E614(a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_10017F9B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  __n128 v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(v3);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v6, v1, v2, v4);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10017FA30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(*(_BYTE *)v1);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v5);
  return sub_10000E614(v3, v4);
}

Swift::Int sub_10017FA88()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  __n128 v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(v3);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v6, v1, v2, v4);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

void sub_10017FAFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

uint64_t NANServiceInfo.init(from:)(_QWORD *a1)
{
  return sub_100180130(a1);
}

void NANServiceInfo.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

_QWORD *sub_10017FB88(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[2];
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  if ((v2 & 0xFF000000000000) != 0)
  {
    v5 = result[3];
    v6 = result[4];
    sub_10003259C(result, v5);
    dispatch thunk of Encoder.unkeyedContainer()(v17, v5, v6);
    LOWORD(v16[0]) = 28496;
    BYTE2(v16[0]) = -102;
    v7 = v18;
    v8 = v19;
    sub_100034C68((uint64_t)v17, v18);
    v9 = sub_10016FD7C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v16, &type metadata for OUI, v9, v7, v8);
    if (!v1)
    {
      LOBYTE(v16[0]) = v4;
      v10 = v18;
      v11 = v19;
      sub_100034C68((uint64_t)v17, v18);
      v12 = sub_100180520();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v16, &type metadata for NANServiceInfo.ServiceProtocolType, v12, v10, v11);
      v16[0] = v3;
      v16[1] = v2;
      v13 = v18;
      v14 = v19;
      sub_100034C68((uint64_t)v17, v18);
      v15 = sub_100068570();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v16, &type metadata for Data, v15, v13, v14);
    }
    return (_QWORD *)sub_100014430(v17);
  }
  return result;
}

uint64_t sub_10017FCD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = NANServiceInfo.init(from:)(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

void sub_10017FCFC(uint64_t a1)
{
  unsigned __int8 *v1;

  NANServiceInfo.encode(to:)(a1, *v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

uint64_t NANServiceInfo.customMirror.getter(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v24[8];
  uint64_t v25;
  unint64_t v26;

  v6 = a1;
  v7 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (v6 == 2
    && (sub_100031FEC(a2, a3), _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(a2, a3), v13))
  {
    v14 = v13;
    v24[0] = 2;
    v25 = a2;
    v26 = a3;
    v15 = sub_100012C44(qword_100405C70);
    v16 = swift_allocObject(v15, 80, 7);
    *(_OWORD *)(v16 + 16) = xmmword_10033A110;
    *(_QWORD *)(v16 + 32) = 0x636972656E6567;
    *(_QWORD *)(v16 + 40) = 0xE700000000000000;
    *(_QWORD *)(v16 + 72) = &type metadata for NANGenericServiceProtocol;
    *(_QWORD *)(v16 + 48) = v14;
    v17 = type metadata accessor for Mirror.DisplayStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v12, 1, 1, v17);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Mirror.AncestorRepresentation.generated(_:), v7);
    sub_100031FEC(a2, a3);
  }
  else
  {
    v24[0] = a1;
    v25 = a2;
    v26 = a3;
    v18 = sub_100012C44(qword_100405C70);
    v16 = swift_allocObject(v18, 80, 7);
    *(_OWORD *)(v16 + 16) = xmmword_10033A110;
    *(_QWORD *)(v16 + 32) = 1635017060;
    *(_QWORD *)(v16 + 40) = 0xE400000000000000;
    sub_100031FEC(a2, a3);
    sub_100032030(0, 0xE000000000000000, a2, a3);
    *(_QWORD *)(v16 + 72) = &type metadata for String;
    *(_QWORD *)(v16 + 48) = v19;
    *(_QWORD *)(v16 + 56) = v20;
    v21 = type metadata accessor for Mirror.DisplayStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 1, 1, v21);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Mirror.AncestorRepresentation.generated(_:), v7);
  }
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v24, v16, v12, v10, &type metadata for NANServiceInfo);
}

void NANServiceInfo.description.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10017FFDC()
{
  unint64_t v0;
  Swift::String v1;
  Swift::String v2;

  v1._countAndFlagsBits = 0x72756F6A6E6F42;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return ((uint64_t (*)(void))((char *)&loc_100180064 + dword_100180114[v0 >> 62]))();
}

uint64_t sub_100180074()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  uint64_t v4;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 0x736574796220;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  return v4;
}

uint64_t sub_100180124()
{
  uint64_t v0;

  return NANServiceInfo.customMirror.getter(*(_BYTE *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t sub_100180130(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v10, v3, v4);
  if (!v1)
  {
    v5 = v11;
    v6 = v12;
    sub_100034C68((uint64_t)v10, v11);
    v7 = sub_10007BAC0();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for Data, &type metadata for Data, v7, v5, v6);
    __asm { BR              X9 }
  }
  sub_100014430(a1);
  return v4;
}

uint64_t sub_100180230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = Data._Representation.subscript.getter(0, BYTE6(v0), v2, v0);
  v6 = v5;
  sub_1002134C0(v4, v5);
  if (v1)
  {
    sub_10000E614(v4, v6);
    return ((uint64_t (*)(_QWORD, _QWORD))((char *)&loc_100180408 + *((int *)qword_100180510 + v3)))(0, 0);
  }
  else
  {
    v7 = sub_10000E614(v4, v6);
    return ((uint64_t (*)(uint64_t))((char *)&loc_1001802B8 + *((int *)qword_1001804E0 + v3)))(v7);
  }
}

unint64_t sub_100180520()
{
  unint64_t result;

  result = qword_100409B80;
  if (!qword_100409B80)
  {
    result = swift_getWitnessTable(byte_10034DD24, &type metadata for NANServiceInfo.ServiceProtocolType);
    atomic_store(result, (unint64_t *)&qword_100409B80);
  }
  return result;
}

unint64_t sub_100180568()
{
  unint64_t result;

  result = qword_100409B88;
  if (!qword_100409B88)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANServiceInfo, &type metadata for NANServiceInfo);
    atomic_store(result, (unint64_t *)&qword_100409B88);
  }
  return result;
}

uint64_t sub_1001805B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for NANServiceInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  sub_10000E614(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANServiceInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000E614(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANServiceInfo()
{
  return &type metadata for NANServiceInfo;
}

uint64_t storeEnumTagSinglePayload for NANServiceInfo.ServiceProtocolType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001806DC + 4 * byte_10034DB1D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100180710 + 4 * byte_10034DB18[v4]))();
}

uint64_t sub_100180710(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100180718(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100180720);
  return result;
}

uint64_t sub_10018072C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100180734);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100180738(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100180740(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANServiceInfo.ServiceProtocolType()
{
  return &type metadata for NANServiceInfo.ServiceProtocolType;
}

unint64_t sub_100180760()
{
  unint64_t result;

  result = qword_100409B90;
  if (!qword_100409B90)
  {
    result = swift_getWitnessTable(byte_10034DCFC, &type metadata for NANServiceInfo.ServiceProtocolType);
    atomic_store(result, (unint64_t *)&qword_100409B90);
  }
  return result;
}

unint64_t sub_1001807A4()
{
  unint64_t result;

  result = qword_100409B98;
  if (!qword_100409B98)
  {
    result = swift_getWitnessTable(byte_10034DCC4, &type metadata for NANServiceInfo.ServiceProtocolType);
    atomic_store(result, (unint64_t *)&qword_100409B98);
  }
  return result;
}

uint64_t sub_1001807E8(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;

  if (!a2)
  {
    v5 = 0;
    a3 = 0;
    goto LABEL_30;
  }
  if (!a3)
  {
    v5 = 0;
    goto LABEL_30;
  }
  if (a3 < 0)
    goto LABEL_33;
  if (!a4)
  {
    a3 = 0;
    v5 = 0;
    goto LABEL_30;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 == 1)
    {
      v5 = 1;
LABEL_30:
      *(_QWORD *)result = a4;
      *(_BYTE *)(result + 8) = a5;
      *(_QWORD *)(result + 16) = v5;
      return a3;
    }
    v6 = a4 - 1;
    if (a4 == 1)
    {
      a3 = 1;
      v5 = 1;
      goto LABEL_30;
    }
    v7 = a4 - 2;
    if (a4 - 2 >= (unint64_t)(a3 - 2))
      v7 = a3 - 2;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 >= 0x11)
    {
      v12 = v8 & 0xF;
      if ((v8 & 0xF) == 0)
        v12 = 16;
      v13 = v8 - v12;
      v10 = v8 - v12 + 1;
      v11 = &a2[v13];
      v9 = v13 + 2;
      v14 = vdupq_n_s8(a5);
      v15 = (int8x16_t *)(a2 + 1);
      do
      {
        *v15++ = v14;
        v13 -= 16;
      }
      while (v13);
    }
    else
    {
      v9 = 2;
      v10 = 1;
      v11 = a2;
    }
    v16 = 0;
    v17 = v10 - a4;
    v18 = v11 + 1;
    while (v17 + v16)
    {
      v18[v16] = a5;
      if (!(v9 - a3 + v16))
      {
        v5 = v10 + v16 + 1;
        goto LABEL_30;
      }
      if (v10 - a3 + v16 == -1)
        goto LABEL_32;
      ++v16;
      if (!(v17 + v16))
      {
        a3 = v9 + v16 - 1;
        v5 = a4;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100180928(uint64_t result, _BYTE *a2, uint64_t a3, unsigned __int8 a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  v4 = a4;
  if (!a2)
  {
LABEL_26:
    v5 = 0;
    v12 = 0;
    goto LABEL_29;
  }
  if (!a3)
  {
    v5 = 0;
LABEL_28:
    v12 = a3;
    goto LABEL_29;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = 1;
LABEL_5:
    if (v5 < -8)
    {
LABEL_17:
      v11 = 1 << v5;
      if ((unint64_t)v5 >= 9)
        LOBYTE(v11) = 0;
      v7 = __OFADD__(v5++, 1);
      if (!v7)
        goto LABEL_20;
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    while (1)
    {
      if (v5 < 0)
      {
        v8 = 0;
        v10 = __OFADD__(v5, 8);
        if ((unint64_t)v5 <= 0xFFFFFFFFFFFFFFF8)
        {
          LOBYTE(v11) = 0;
          v5 = -7;
          if (v10)
            goto LABEL_25;
          goto LABEL_20;
        }
      }
      else
      {
        v7 = __OFSUB__(v5, 8);
        if ((unint64_t)v5 >= 8)
        {
          LOBYTE(v11) = 0;
          v5 = 9;
          if (v7)
            goto LABEL_25;
LABEL_20:
          *a2 = v11;
          if (v6 == a3)
            goto LABEL_28;
          ++a2;
          v12 = v6++;
          if (v5 > 7)
          {
LABEL_29:
            *(_BYTE *)result = v4;
            *(_QWORD *)(result + 8) = v5;
            return v12;
          }
          goto LABEL_5;
        }
        v8 = 1 << v5;
      }
      if ((v8 & ~v4) == 0)
        goto LABEL_17;
      v9 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
        break;
      }
      ++v5;
      if ((unint64_t)(v9 - 9) < 0xFFFFFFFFFFFFFFEFLL)
      {
        v5 = v9;
        goto LABEL_17;
      }
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_100180A1C(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;

  if (!a2)
  {
    v4 = 0;
    a3 = 0;
LABEL_17:
    *result = a4;
    result[1] = v4;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v4 = 0;
    goto LABEL_17;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = *(_QWORD *)(a4 + 16);
    if (v4)
    {
      v5 = *(_DWORD *)(a4 + 32);
      *(_WORD *)(a2 + 4) = *(_WORD *)(a4 + 36);
      *(_DWORD *)a2 = v5;
      if (a3 == 1)
      {
        v4 = 1;
      }
      else if (v4 == 1)
      {
        a3 = 1;
      }
      else
      {
        v6 = 0;
        v7 = (int *)(a4 + 40);
        v8 = a2 + 8;
        while (1)
        {
          v9 = *v7;
          *(_WORD *)(v8 + 4) = *((_WORD *)v7 + 2);
          *(_DWORD *)v8 = v9;
          if (a3 - 2 == v6)
            break;
          ++v6;
          v7 += 2;
          v8 += 8;
          if (v4 - 1 == v6)
          {
            a3 = v6 + 1;
            goto LABEL_17;
          }
        }
        v4 = v6 + 2;
      }
    }
    else
    {
      a3 = 0;
    }
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t *ChannelSequence.empty.unsafeMutableAddressor()
{
  if (qword_100404120 != -1)
    swift_once(&qword_100404120, sub_100180B20);
  return &static ChannelSequence.empty;
}

void sub_100180B20()
{
  static ChannelSequence.empty = (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t static ChannelSequence.empty.getter()
{
  return sub_10006998C(&qword_100404120, &static ChannelSequence.empty);
}

void *ChannelSequence.slotDuration.unsafeMutableAddressor()
{
  return &static ChannelSequence.slotDuration;
}

uint64_t ChannelSequence.endIndex.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

Swift::Int __swiftcall ChannelSequence.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall ChannelSequence.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

unint64_t ChannelSequence.subscript.getter(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > result)
  {
    return *(unsigned int *)(a2 + 8 * result + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 8 * result + 36) << 32);
  }
  __break(1u);
  return result;
}

void ChannelSequence.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  unsigned int *v4;
  Swift::UInt8 v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (unsigned int *)(a2 + 32);
    do
    {
      v6 = *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32);
      if ((v6 & 0xFF00000000) == 0x300000000)
      {
        v5 = 0;
LABEL_4:
        Hasher._combine(_:)(v5);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6);
        Hasher._combine(_:)(0x801004u >> ((v6 >> 29) & 0xF8));
        switch(v6 >> 40)
        {
          case 2uLL:
            Hasher._combine(_:)(0);
            break;
          case 3uLL:
            Hasher._combine(_:)(1uLL);
            break;
          case 4uLL:
            Hasher._combine(_:)(3uLL);
            break;
          case 5uLL:
            Hasher._combine(_:)(4uLL);
            break;
          case 6uLL:
            Hasher._combine(_:)(5uLL);
            break;
          default:
            Hasher._combine(_:)(2uLL);
            v5 = BYTE5(v6) & 1;
            goto LABEL_4;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

void sub_100180CCC(uint64_t a1)
{
  uint64_t *v1;

  ChannelSequence.hash(into:)(a1, *v1);
}

Swift::Int sub_100180CD4()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  ChannelSequence.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

_QWORD *sub_100180D14@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *sub_100180D2C(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t sub_100180D44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_100181820(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100180D70(uint64_t *a1, uint64_t *a2)
{
  return sub_10018179C(*a1, *a2);
}

uint64_t sub_100180D7C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_100180D84(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

uint64_t (*sub_100180D94(uint64_t (*result)(_QWORD), unint64_t *a2))(_QWORD)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    v4 = *(_QWORD *)v2 + 8 * v3;
    v5 = *(_DWORD *)(v4 + 32);
    *((_WORD *)result + 2) = *(_WORD *)(v4 + 36);
    *(_DWORD *)result = v5;
    return NANBitmap.Channel.operatingClass.getter;
  }
  __break(1u);
  return result;
}

uint64_t *sub_100180DDC@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    return (uint64_t *)swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t sub_100180E08@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  *a1 = *v1;
  a1[1] = 0;
  a1[2] = v3;
  return swift_bridgeObjectRetain(v2);
}

BOOL sub_100180E1C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

uint64_t sub_100180E30@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = sub_100181878(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *sub_100180E64(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *sub_100180E80(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

_QWORD *sub_100180E9C(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

_QWORD *sub_100180EB8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_100180ED0(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

void sub_100180EE8(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_100180EF4()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

_QWORD *sub_100180F00()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *v0;
  v2 = sub_10008C5F0(*v0);
  swift_bridgeObjectRelease(v1);
  return v2;
}

_QWORD *sub_100180F34(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_100180A1C(a1, a2, a3, *v3);
}

uint64_t sub_100180F3C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;

  v0 = sub_100012C44(&qword_100406150);
  result = swift_allocObject(v0, 160, 7);
  v2 = result;
  *(_OWORD *)(result + 16) = xmmword_10034DFB0;
  if (qword_100404170 != -1)
    result = swift_once(&qword_100404170, sub_1001901DC);
  v3 = static Channel.awdlSocial5GHz;
  v4 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410594 << 32) | ((unint64_t)byte_100410595 << 40);
  *(_DWORD *)(v2 + 32) = static Channel.awdlSocial5GHz;
  *(_WORD *)(v2 + 36) = WORD2(v4);
  *(_DWORD *)(v2 + 40) = v3;
  *(_WORD *)(v2 + 44) = WORD2(v4);
  *(_DWORD *)(v2 + 48) = v3;
  *(_WORD *)(v2 + 52) = WORD2(v4);
  *(_DWORD *)(v2 + 56) = v3;
  *(_WORD *)(v2 + 60) = WORD2(v4);
  *(_DWORD *)(v2 + 64) = 0;
  *(_WORD *)(v2 + 68) = 3;
  *(_DWORD *)(v2 + 72) = 0;
  *(_WORD *)(v2 + 76) = 3;
  *(_DWORD *)(v2 + 80) = 0;
  *(_WORD *)(v2 + 84) = 3;
  *(_DWORD *)(v2 + 88) = 0;
  *(_WORD *)(v2 + 92) = 3;
  if (qword_100404168 != -1)
  {
    result = swift_once(&qword_100404168, sub_100190174);
    v4 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410594 << 32) | ((unint64_t)byte_100410595 << 40);
  }
  v5 = ((unint64_t)byte_10041058D << 40) | ((unint64_t)byte_10041058C << 32);
  *(_DWORD *)(v2 + 96) = static Channel.awdlSocial2GHz;
  *(_WORD *)(v2 + 100) = WORD2(v5);
  *(_DWORD *)(v2 + 104) = v4;
  *(_WORD *)(v2 + 108) = WORD2(v4);
  *(_DWORD *)(v2 + 112) = v4;
  *(_WORD *)(v2 + 116) = WORD2(v4);
  *(_DWORD *)(v2 + 120) = v4;
  *(_WORD *)(v2 + 124) = WORD2(v4);
  *(_DWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 132) = 3;
  *(_DWORD *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 140) = 3;
  *(_DWORD *)(v2 + 144) = 0;
  *(_WORD *)(v2 + 148) = 3;
  *(_DWORD *)(v2 + 152) = 0;
  *(_WORD *)(v2 + 156) = 3;
  static ChannelSequence.awdlDiscoveryMode = v2;
  return result;
}

uint64_t *ChannelSequence.awdlDiscoveryMode.unsafeMutableAddressor()
{
  if (qword_100404128 != -1)
    swift_once(&qword_100404128, sub_100180F3C);
  return &static ChannelSequence.awdlDiscoveryMode;
}

uint64_t static ChannelSequence.awdlDiscoveryMode.getter()
{
  return sub_10006998C(&qword_100404128, &static ChannelSequence.awdlDiscoveryMode);
}

uint64_t sub_100181110()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;

  v0 = sub_100012C44(&qword_100406150);
  result = swift_allocObject(v0, 160, 7);
  v2 = result;
  *(_OWORD *)(result + 16) = xmmword_10034DFB0;
  if (qword_100404170 != -1)
    result = swift_once(&qword_100404170, sub_1001901DC);
  v3 = static Channel.awdlSocial5GHz;
  v4 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410594 << 32) | ((unint64_t)byte_100410595 << 40);
  *(_DWORD *)(v2 + 32) = static Channel.awdlSocial5GHz;
  *(_WORD *)(v2 + 36) = WORD2(v4);
  *(_DWORD *)(v2 + 40) = v3;
  *(_WORD *)(v2 + 44) = WORD2(v4);
  *(_DWORD *)(v2 + 48) = v3;
  *(_WORD *)(v2 + 52) = WORD2(v4);
  *(_DWORD *)(v2 + 56) = 0;
  *(_WORD *)(v2 + 60) = 3;
  *(_DWORD *)(v2 + 64) = 0;
  *(_WORD *)(v2 + 68) = 3;
  *(_DWORD *)(v2 + 72) = 0;
  *(_WORD *)(v2 + 76) = 3;
  *(_DWORD *)(v2 + 80) = 0;
  *(_WORD *)(v2 + 84) = 3;
  *(_DWORD *)(v2 + 88) = 0;
  *(_WORD *)(v2 + 92) = 3;
  if (qword_100404168 != -1)
  {
    result = swift_once(&qword_100404168, sub_100190174);
    v4 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410594 << 32) | ((unint64_t)byte_100410595 << 40);
  }
  v5 = ((unint64_t)byte_10041058D << 40) | ((unint64_t)byte_10041058C << 32);
  *(_DWORD *)(v2 + 96) = static Channel.awdlSocial2GHz;
  *(_WORD *)(v2 + 100) = WORD2(v5);
  *(_DWORD *)(v2 + 104) = v4;
  *(_WORD *)(v2 + 108) = WORD2(v4);
  *(_DWORD *)(v2 + 112) = v4;
  *(_WORD *)(v2 + 116) = WORD2(v4);
  *(_DWORD *)(v2 + 120) = 0;
  *(_WORD *)(v2 + 124) = 3;
  *(_DWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 132) = 3;
  *(_DWORD *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 140) = 3;
  *(_DWORD *)(v2 + 144) = 0;
  *(_WORD *)(v2 + 148) = 3;
  *(_DWORD *)(v2 + 152) = 0;
  *(_WORD *)(v2 + 156) = 3;
  static ChannelSequence.awdlIdleMode = v2;
  return result;
}

uint64_t *ChannelSequence.awdlIdleMode.unsafeMutableAddressor()
{
  if (qword_100404130 != -1)
    swift_once(&qword_100404130, sub_100181110);
  return &static ChannelSequence.awdlIdleMode;
}

uint64_t static ChannelSequence.awdlIdleMode.getter()
{
  return sub_10006998C(&qword_100404130, &static ChannelSequence.awdlIdleMode);
}

uint64_t sub_1001812E4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v0 = sub_100012C44(&qword_100406150);
  result = swift_allocObject(v0, 160, 7);
  v2 = result;
  *(_OWORD *)(result + 16) = xmmword_10034DFB0;
  if (qword_100404170 != -1)
    result = swift_once(&qword_100404170, sub_1001901DC);
  v3 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410594 << 32) | ((unint64_t)byte_100410595 << 40);
  *(_DWORD *)(v2 + 32) = static Channel.awdlSocial5GHz;
  *(_WORD *)(v2 + 36) = WORD2(v3);
  *(_DWORD *)(v2 + 40) = 0;
  *(_WORD *)(v2 + 44) = 3;
  *(_DWORD *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 52) = 3;
  *(_DWORD *)(v2 + 56) = 0;
  *(_WORD *)(v2 + 60) = 3;
  *(_DWORD *)(v2 + 64) = 0;
  *(_WORD *)(v2 + 68) = 3;
  *(_DWORD *)(v2 + 72) = 0;
  *(_WORD *)(v2 + 76) = 3;
  *(_DWORD *)(v2 + 80) = 0;
  *(_WORD *)(v2 + 84) = 3;
  *(_DWORD *)(v2 + 88) = 0;
  *(_WORD *)(v2 + 92) = 3;
  if (qword_100404168 != -1)
  {
    result = swift_once(&qword_100404168, sub_100190174);
    v3 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100410594 << 32) | ((unint64_t)byte_100410595 << 40);
  }
  v4 = ((unint64_t)byte_10041058D << 40) | ((unint64_t)byte_10041058C << 32);
  *(_DWORD *)(v2 + 96) = static Channel.awdlSocial2GHz;
  *(_WORD *)(v2 + 100) = WORD2(v4);
  *(_DWORD *)(v2 + 104) = v3;
  *(_WORD *)(v2 + 108) = WORD2(v3);
  *(_DWORD *)(v2 + 112) = v3;
  *(_WORD *)(v2 + 116) = WORD2(v3);
  *(_DWORD *)(v2 + 120) = 0;
  *(_WORD *)(v2 + 124) = 3;
  *(_DWORD *)(v2 + 128) = 0;
  *(_WORD *)(v2 + 132) = 3;
  *(_DWORD *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 140) = 3;
  *(_DWORD *)(v2 + 144) = 0;
  *(_WORD *)(v2 + 148) = 3;
  *(_DWORD *)(v2 + 152) = 0;
  *(_WORD *)(v2 + 156) = 3;
  static ChannelSequence.awdlLowPowerMode = v2;
  return result;
}

uint64_t *ChannelSequence.awdlLowPowerMode.unsafeMutableAddressor()
{
  if (qword_100404138 != -1)
    swift_once(&qword_100404138, sub_1001812E4);
  return &static ChannelSequence.awdlLowPowerMode;
}

uint64_t static ChannelSequence.awdlLowPowerMode.getter()
{
  return sub_10006998C(&qword_100404138, &static ChannelSequence.awdlLowPowerMode);
}

void sub_1001814B8()
{
  static ChannelSequence.none = (uint64_t)&off_1003D7120;
}

uint64_t *ChannelSequence.none.unsafeMutableAddressor()
{
  if (qword_100404140 != -1)
    swift_once(&qword_100404140, sub_1001814B8);
  return &static ChannelSequence.none;
}

uint64_t static ChannelSequence.none.getter()
{
  return sub_10006998C(&qword_100404140, &static ChannelSequence.none);
}

unint64_t sub_10018152C()
{
  unint64_t result;

  result = qword_100409BA0;
  if (!qword_100409BA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ChannelSequence, &type metadata for ChannelSequence);
    atomic_store(result, (unint64_t *)&qword_100409BA0);
  }
  return result;
}

unint64_t sub_100181574()
{
  unint64_t result;

  result = qword_100409BA8;
  if (!qword_100409BA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ChannelSequence, &type metadata for ChannelSequence);
    atomic_store(result, (unint64_t *)&qword_100409BA8);
  }
  return result;
}

uint64_t sub_1001815B8()
{
  return sub_100181654(&qword_100409BB0, &qword_100409BB8, (const char *)&protocol conformance descriptor for <> DefaultIndices<A>);
}

unint64_t sub_1001815E4()
{
  unint64_t result;

  result = qword_100409BC0;
  if (!qword_100409BC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ChannelSequence, &type metadata for ChannelSequence);
    atomic_store(result, (unint64_t *)&qword_100409BC0);
  }
  return result;
}

uint64_t sub_100181628()
{
  return sub_100181654(&qword_100409BC8, &qword_100409BD0, (const char *)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t sub_100181654(unint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_100013C64(a2);
    v7 = sub_1001815E4();
    result = swift_getWitnessTable(a3, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001816B8()
{
  unint64_t result;

  result = qword_100409BD8;
  if (!qword_100409BD8)
  {
    result = swift_getWitnessTable("\u0379\t", &type metadata for ChannelSequence);
    atomic_store(result, (unint64_t *)&qword_100409BD8);
  }
  return result;
}

void *sub_1001816FC()
{
  return &protocol witness table for Int;
}

uint64_t sub_100181708()
{
  return sub_100011770(&qword_100409BE0, &qword_100409BB8, (const char *)&protocol conformance descriptor for DefaultIndices<A>);
}

uint64_t sub_100181734()
{
  return sub_100011770(&qword_100409BE8, &qword_100409BD0, (const char *)&protocol conformance descriptor for Slice<A>);
}

uint64_t sub_100181760()
{
  return sub_100011770(&qword_100409BF0, &qword_100409BF8, (const char *)&protocol conformance descriptor for IndexingIterator<A>);
}

ValueMetadata *type metadata accessor for ChannelSequence()
{
  return &type metadata for ChannelSequence;
}

uint64_t sub_10018179C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = a2 - a1;
  v3 = a2 < a1;
  if (a2 <= a1)
  {
    result = 0;
    if (!v3)
      return result;
    v7 = ~a2 + a1;
    v8 = a1 ^ 0x8000000000000000;
    if (v7 >= v8)
      v7 = v8;
    v9 = 0x8000000000000000;
    if (v7 < 0x8000000000000000)
      v9 = v7;
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v8 == v9)
        goto LABEL_18;
      if (v4 == --result)
        return result;
    }
  }
  else
  {
    result = 0;
    v6 = ~a1 + a2;
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++result)
        return result;
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100181820(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (a2 < 0)
  {
    v4 = 0;
    while ((result ^ 0x8000000000000000) > ~a2)
    {
      if (--v4 <= a2)
      {
        result += v4;
        return result;
      }
    }
    goto LABEL_12;
  }
  if (a2)
  {
    v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2)
        return result;
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_100181878(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (a2 < 0)
  {
    v7 = 0;
    while (result - a3 + v7)
    {
      v8 = result + v7 - 1;
      if (__OFSUB__(result + v7, 1))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }
      if (--v7 <= a2)
        return v8;
    }
    return 0;
  }
  if (a2)
  {
    v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1))
      v3 = a2 - 1;
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL))
      v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3 + 1;
    if (v4 >= 5)
    {
      v9 = v4 & 3;
      if ((v4 & 3) == 0)
        v9 = 4;
      v5 = v4 - v9;
      v10 = 0uLL;
      v11 = (int64x2_t)(unint64_t)result;
      v12 = vdupq_n_s64(1uLL);
      v13 = v5;
      do
      {
        v11 = vaddq_s64(v11, v12);
        v10 = vaddq_s64(v10, v12);
        v13 -= 4;
      }
      while (v13);
      v6 = vaddvq_s64(vaddq_s64(v10, v11));
    }
    else
    {
      v5 = 0;
      v6 = result;
    }
    v14 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    v15 = v5 + result - a3;
    v16 = a2 - v5;
    result = v6;
    while (v15)
    {
      if (!v14)
        goto LABEL_27;
      ++result;
      ++v14;
      ++v15;
      if (!--v16)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t NANDatapath.Configuration.serviceInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(v1);
  NANGenericServiceProtocol.packetData(for:)(3, v1);
  swift_bridgeObjectRelease(v1);
  return 2;
}

void *NANDatapath.DatapathType.defaultValue.unsafeMutableAddressor()
{
  return &static NANDatapath.DatapathType.defaultValue;
}

uint64_t NANDatapath.DatapathType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x73616369746C756DLL;
  else
    return 0x74736163696E75;
}

CoreP2P::NANDatapath::DatapathType_optional __swiftcall NANDatapath.DatapathType.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1003D4FF8;
  return (CoreP2P::NANDatapath::DatapathType_optional)sub_1001822D0(rawValue, v1);
}

uint64_t sub_100181A50(char *a1, char *a2)
{
  return sub_10003C944(*a1, *a2);
}

uint64_t sub_100181A5C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1003D4FF8;
  return sub_100158888(v2, a1, a2);
}

void sub_100181A68(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x74736163696E75;
  if (*v1)
    v2 = 0x73616369746C756DLL;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE900000000000074;
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_100181AAC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x73616369746C756DLL;
  else
    v2 = 0x74736163696E75;
  if (v1)
    v3 = 0xE900000000000074;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100181B30(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x73616369746C756DLL;
  else
    v2 = 0x74736163696E75;
  if (*v1)
    v3 = 0xE900000000000074;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100181B90()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x73616369746C756DLL;
  else
    v2 = 0x74736163696E75;
  if (v1)
    v3 = 0xE900000000000074;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100181C10()
{
  _BYTE *v0;

  if (*v0)
    return 0x73616369746C756DLL;
  else
    return 0x74736163696E75;
}

void *NANDatapath.ServiceType.defaultValue.unsafeMutableAddressor()
{
  return &static NANDatapath.ServiceType.defaultValue;
}

uint64_t NANDatapath.ServiceType.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6576697470616461;
  if (a1 == 1)
    return 0x656D69746C616572;
  return 0x6E6574614C776F6CLL;
}

uint64_t static NANDatapath.ServiceType.< infix(_:_:)(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1 && a2 == 2)
      return 1;
  }
  else if (a2 - 1 < 2)
  {
    return 1;
  }
  return 0;
}

_UNKNOWN **static NANDatapath.ServiceType.allCases.getter()
{
  return &off_1003D71C0;
}

uint64_t sub_100181D08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003C948(*a1, *a2);
}

unint64_t sub_100181D14@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s7CoreP2P11NANDatapathO11ServiceTypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100181D40(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x656D69746C616572;
  if (v2 != 1)
  {
    v5 = 0x6E6574614C776F6CLL;
    v4 = 0xEA00000000007963;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6576697470616461;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_100181DA4(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D71E8;
}

Swift::Int sub_100181DB4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE800000000000000;
  v3 = 0x656D69746C616572;
  if (v1 != 1)
  {
    v3 = 0x6E6574614C776F6CLL;
    v2 = 0xEA00000000007963;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6576697470616461;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100181E58(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x656D69746C616572;
  if (*v1 != 1)
  {
    v3 = 0x6E6574614C776F6CLL;
    v2 = 0xEA00000000007963;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6576697470616461;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100181ED8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE800000000000000;
  v3 = 0x656D69746C616572;
  if (v1 != 1)
  {
    v3 = 0x6E6574614C776F6CLL;
    v2 = 0xEA00000000007963;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6576697470616461;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100181F78(_BYTE *a1, unsigned __int8 *a2)
{
  int v2;

  v2 = *a2;
  if (*a1)
  {
    if (*a1 != 1 || v2 != 2)
      return 0;
  }
  else if ((v2 - 1) >= 2)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_100181FAC(unsigned __int8 *a1, _BYTE *a2)
{
  int v2;

  v2 = *a1;
  if (*a2)
  {
    if (*a2 != 1 || v2 != 2)
      return 1;
  }
  else if ((v2 - 1) >= 2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100181FE0(_BYTE *a1, unsigned __int8 *a2)
{
  int v2;

  v2 = *a2;
  if (*a1)
  {
    if (*a1 != 1 || v2 != 2)
      return 1;
  }
  else if ((v2 - 1) >= 2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100182014(unsigned __int8 *a1, _BYTE *a2)
{
  int v2;

  v2 = *a1;
  if (*a2)
  {
    if (*a2 != 1 || v2 != 2)
      return 0;
  }
  else if ((v2 - 1) >= 2)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_100182048()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656D69746C616572;
  if (*v0 != 1)
    v1 = 0x6E6574614C776F6CLL;
  if (*v0)
    return v1;
  else
    return 0x6576697470616461;
}

void *NANDatapath.ParametersType.defaultValue.unsafeMutableAddressor()
{
  return &static NANDatapath.ParametersType.defaultValue;
}

uint64_t NANDatapath.ParametersType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1735617902;
  else
    return 7365742;
}

CoreP2P::NANDatapath::ParametersType_optional __swiftcall NANDatapath.ParametersType.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1003D5048;
  return (CoreP2P::NANDatapath::ParametersType_optional)sub_1001822D0(rawValue, v1);
}

uint64_t sub_1001820E8(char *a1, char *a2)
{
  return sub_10003C8B0(*a1, *a2);
}

uint64_t sub_1001820F4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1003D5048;
  return sub_100158888(v2, a1, a2);
}

void sub_100182100(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 7365742;
  if (*v1)
    v2 = 1735617902;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_100182130()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 1735617902;
  else
    v2 = 7365742;
  if (v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001821A0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 1735617902;
  else
    v2 = 7365742;
  if (*v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001821EC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 1735617902;
  else
    v2 = 7365742;
  if (v1)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100182258()
{
  _BYTE *v0;

  if (*v0)
    return 1735617902;
  else
    return 7365742;
}

uint64_t NANDatapath.ParametersMulticastType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x614D6F54796E616DLL;
  else
    return 0x6E614D6F54656E6FLL;
}

CoreP2P::NANDatapath::ParametersMulticastType_optional __swiftcall NANDatapath.ParametersMulticastType.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1003D5098;
  return (CoreP2P::NANDatapath::ParametersMulticastType_optional)sub_1001822D0(rawValue, v1);
}

uint64_t sub_1001822D0(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  unsigned int v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (v5)
    return v6;
  else
    return 0;
}

uint64_t sub_10018231C(char *a1, char *a2)
{
  return sub_10003CD64(*a1, *a2);
}

uint64_t sub_100182328@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1003D5098;
  return sub_100158888(v2, a1, a2);
}

void sub_100182334(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6E614D6F54656E6FLL;
  if (*v1)
    v2 = 0x614D6F54796E616DLL;
  v3 = 0xE900000000000079;
  if (*v1)
    v3 = 0xEA0000000000796ELL;
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_10018237C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x614D6F54796E616DLL;
  else
    v2 = 0x6E614D6F54656E6FLL;
  if (v1)
    v3 = 0xEA0000000000796ELL;
  else
    v3 = 0xE900000000000079;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100182404(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x614D6F54796E616DLL;
  else
    v2 = 0x6E614D6F54656E6FLL;
  if (*v1)
    v3 = 0xEA0000000000796ELL;
  else
    v3 = 0xE900000000000079;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100182468()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x614D6F54796E616DLL;
  else
    v2 = 0x6E614D6F54656E6FLL;
  if (v1)
    v3 = 0xEA0000000000796ELL;
  else
    v3 = 0xE900000000000079;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001824EC()
{
  _BYTE *v0;

  if (*v0)
    return 0x614D6F54796E616DLL;
  else
    return 0x6E614D6F54656E6FLL;
}

uint64_t static NANDatapath.InternetSharingConfiguration.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  _QWORD v4[5];
  _QWORD v5[3];
  uint64_t v6;

  sub_100184EEC(a1, (uint64_t)v4);
  sub_100184EEC(a2, (uint64_t)v5);
  if (!v4[3])
  {
    if (!v6)
      goto LABEL_6;
LABEL_5:
    sub_100033A84((uint64_t)v4, &qword_100409C00);
    return 0;
  }
  if (!v6)
    goto LABEL_5;
  sub_100184F4C(v5);
LABEL_6:
  sub_100184F4C(v4);
  return 1;
}

void NANDatapath.InternetSharingConfiguration.hash(into:)()
{
  __int128 *v0;
  Swift::UInt8 v1;
  _QWORD v2[5];

  sub_100184EEC(v0, (uint64_t)v2);
  v1 = v2[3] == 0;
  sub_100184F4C(v2);
  Hasher._combine(_:)(v1);
}

Swift::Int NANDatapath.InternetSharingConfiguration.hashValue.getter()
{
  __int128 *v0;
  Swift::UInt8 v1;
  _QWORD v3[5];
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  sub_100184EEC(v0, (uint64_t)v3);
  v1 = v3[3] == 0;
  sub_100184F4C(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100182664()
{
  __int128 *v0;
  Swift::UInt8 v1;
  _QWORD v3[5];
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  sub_100184EEC(v0, (uint64_t)v3);
  v1 = v3[3] == 0;
  sub_100184F4C(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.operation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_100031FEC(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t NANAttribute.DatapathExtension.interfaceIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_1000339F4(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t NANAttribute.DatapathExtension.interfaceIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10000E658(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t NANDatapath.SecurityConfiguration.init(cipherSuite:key:pmkID:passphrase:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_BYTE *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = a7;
  return result;
}

void NANDatapath.SecurityConfiguration.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  __int128 v11;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2 + 1);
  v11 = *(_OWORD *)(v2 + 8);
  v4 = v11;
  sub_100184F84((uint64_t)&v11);
  Data.hash(into:)(a1, v4, *((_QWORD *)&v4 + 1), v5);
  sub_100184FB0((uint64_t)&v11);
  v6 = *(_QWORD *)(v2 + 32);
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    v7 = *(_QWORD *)(v2 + 48);
    if (v7)
    {
LABEL_3:
      v8 = *(_QWORD *)(v2 + 40);
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(a1, v8, v7);
      swift_bridgeObjectRelease(v7);
      return;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 24);
    Hasher._combine(_:)(1u);
    sub_100031FEC(v9, v6);
    Data.hash(into:)(a1, v9, v6, v10);
    sub_10000E658(v9, v6);
    v7 = *(_QWORD *)(v2 + 48);
    if (v7)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

Swift::Int NANDatapath.SecurityConfiguration.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANDatapath.SecurityConfiguration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001828A8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANDatapath.SecurityConfiguration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1001828E0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(v5, v7) & 1;
}

unint64_t NANDatapath.Configuration.identifier.getter()
{
  unsigned __int16 *v0;

  return *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v0 + 3) << 24);
}

uint64_t NANDatapath.Configuration.initiatorSubscribeID.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 7);
}

unint64_t NANDatapath.Configuration.responderManagementAddress.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 25) | ((unint64_t)*(unsigned int *)(v0 + 27) << 16);
}

uint64_t NANDatapath.Configuration.type.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 31);
}

uint64_t NANDatapath.Configuration.type.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 31) = result & 1;
  return result;
}

uint64_t (*NANDatapath.Configuration.type.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDatapath.Configuration.securityConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100033B48(v1 + 48, a1, &qword_100409C08);
}

uint64_t NANDatapath.Configuration.securityConfiguration.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10006298C(a1, v1 + 48, &qword_100409C08);
}

uint64_t NANDatapath.Configuration.internetSharingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100033B48(v1 + 104, a1, (uint64_t *)&unk_10040DAA0);
}

uint64_t NANDatapath.Configuration.internetSharingConfiguration.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10006298C(a1, v1 + 104, (uint64_t *)&unk_10040DAA0);
}

unint64_t NANDatapath.Configuration.multicastAddress.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 144) | ((unint64_t)*(unsigned __int16 *)(v0 + 148) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 150) << 48);
}

uint64_t NANDatapath.Configuration.multicastAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 144) = result;
  *(_WORD *)(v1 + 148) = WORD2(result);
  *(_BYTE *)(v1 + 150) = BYTE6(result) & 1;
  return result;
}

uint64_t NANDatapath.Configuration.multicastServiceType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 151);
}

uint64_t NANDatapath.Configuration.multicastServiceType.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 151) = result & 1;
  return result;
}

uint64_t (*NANDatapath.Configuration.multicastServiceType.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void NANDatapath.Configuration.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  uint64_t v9;
  Swift::String v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  Swift::UInt8 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  Swift::UInt8 v37;
  _QWORD v38[5];
  __int128 v39[2];
  __int128 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v1);
  v4 = *(_BYTE *)(v1 + 2);
  v5 = *(_BYTE *)(v1 + 3);
  v6 = *(_BYTE *)(v1 + 4);
  v7 = *(_BYTE *)(v1 + 5);
  v8 = *(_BYTE *)(v1 + 6);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 1));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 7));
  v9 = *(_QWORD *)(v1 + 16);
  v10 = String.lowercased()();
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v10._countAndFlagsBits, v10._object);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10._object);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 24));
  v11 = *(_BYTE *)(v2 + 26);
  v12 = *(_BYTE *)(v2 + 27);
  v13 = *(_BYTE *)(v2 + 28);
  v14 = *(_BYTE *)(v2 + 29);
  v15 = *(_BYTE *)(v2 + 30);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 25));
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  if (*(_BYTE *)(v2 + 31))
    v16 = 0x73616369746C756DLL;
  else
    v16 = 0x74736163696E75;
  if (*(_BYTE *)(v2 + 31))
    v17 = 0xE900000000000074;
  else
    v17 = 0xE700000000000000;
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease(v17);
  v18 = 0xE800000000000000;
  v19 = 0x656D69746C616572;
  if (*(_BYTE *)(v2 + 32) != 1)
  {
    v19 = 0x6E6574614C776F6CLL;
    v18 = 0xEA00000000007963;
  }
  if (*(_BYTE *)(v2 + 32))
    v20 = v19;
  else
    v20 = 0x6576697470616461;
  if (*(_BYTE *)(v2 + 32))
    v21 = v18;
  else
    v21 = 0xE800000000000000;
  String.hash(into:)(a1, v20, v21);
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(v2 + 40);
  swift_bridgeObjectRetain(v22);
  sub_100077EC8(a1, v22);
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(v2 + 96);
  if (v23 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v25 = *(_QWORD *)(v2 + 80);
    v24 = *(_QWORD *)(v2 + 88);
    v27 = *(_QWORD *)(v2 + 64);
    v26 = *(_QWORD *)(v2 + 72);
    v29 = *(_QWORD *)(v2 + 48);
    v28 = *(_QWORD *)(v2 + 56);
    v42 = v29;
    v43 = v28;
    v44 = v27;
    v45 = v26;
    v46 = v25;
    v47 = v24;
    v48 = v23;
    Hasher._combine(_:)(1u);
    sub_100031FEC(v28, v27);
    sub_1000339F4(v26, v25);
    swift_bridgeObjectRetain(v23);
    NANDatapath.SecurityConfiguration.hash(into:)((uint64_t)a1);
    sub_1000B6530(v29, v28, v27, v26, v25, v24, v23);
  }
  sub_100033B48(v2 + 104, (uint64_t)&v40, (uint64_t *)&unk_10040DAA0);
  if (v41 == 1)
  {
    Hasher._combine(_:)(0);
    if ((*(_BYTE *)(v2 + 150) & 1) == 0)
    {
LABEL_20:
      v30 = *(unsigned __int16 *)(v2 + 148);
      v31 = *(_DWORD *)(v2 + 144);
      v32 = v31 | ((unint64_t)*(unsigned __int16 *)(v2 + 148) << 32);
      v33 = v32 >> 8;
      v34 = v32 >> 16;
      v35 = v32 >> 24;
      v36 = v30 >> 8;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(v33);
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(v35);
      Hasher._combine(_:)(v30);
      goto LABEL_23;
    }
  }
  else
  {
    sub_1000641F0(&v40, (uint64_t)v39);
    Hasher._combine(_:)(1u);
    sub_100184EEC(v39, (uint64_t)v38);
    v37 = v38[3] == 0;
    sub_100184F4C(v38);
    Hasher._combine(_:)(v37);
    sub_100184F4C(v39);
    if ((*(_BYTE *)(v2 + 150) & 1) == 0)
      goto LABEL_20;
  }
  LOBYTE(v36) = 0;
LABEL_23:
  Hasher._combine(_:)(v36);
  if (*(_BYTE *)(v2 + 151) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)(a1, 0xD000000000000012, 0x8000000100362060);
  }
}

Swift::Int NANDatapath.Configuration.hashValue.getter()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1);
  NANDatapath.Configuration.hash(into:)(v1);
  return Hasher._finalize()();
}

void sub_100182E8C(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;
  char v3;

  v2 = *(_WORD *)(v1 + 4);
  v3 = *(_BYTE *)(v1 + 6);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_WORD *)(a1 + 4) = v2;
  *(_BYTE *)(a1 + 6) = v3;
}

Swift::Int sub_100182EAC()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1);
  NANDatapath.Configuration.hash(into:)(v1);
  return Hasher._finalize()();
}

unint64_t NANDatapath.ResponseConfiguration.identifier.getter()
{
  unsigned __int8 *v0;

  return *v0 | ((unint64_t)v0[8] << 8) | ((unint64_t)v0[9] << 16) | ((unint64_t)*(unsigned int *)(v0 + 10) << 24);
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceInfo.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[2];
  sub_100111B7C(v1, v0[3], v0[4]);
  return v1;
}

unint64_t NANDatapath.ResponseConfiguration.responderManagementAddress.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 40) | ((unint64_t)*(unsigned int *)(v0 + 42) << 16);
}

unint64_t NANDatapath.ResponseConfiguration.responderDataAddress.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 46) | ((unint64_t)*(unsigned int *)(v0 + 48) << 16);
}

uint64_t NANDatapath.ResponseConfiguration.serviceName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t NANDatapath.ResponseConfiguration.dialogToken.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t NANDatapath.ResponseConfiguration.status.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 74);
}

uint64_t NANDatapath.ResponseConfiguration.status.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 74) = result;
  return result;
}

uint64_t (*NANDatapath.ResponseConfiguration.status.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDatapath.ResponseConfiguration.securityConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100033B48(v1 + 80, a1, &qword_100409C08);
}

uint64_t NANDatapath.ResponseConfiguration.securityConfiguration.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10006298C(a1, v1 + 80, &qword_100409C08);
}

uint64_t NANDatapath.ResponseConfiguration.internetSharingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100033B48(v1 + 136, a1, (uint64_t *)&unk_10040E260);
}

uint64_t NANDatapath.ResponseConfiguration.internetSharingConfiguration.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10006298C(a1, v1 + 136, (uint64_t *)&unk_10040E260);
}

unint64_t NANDatapath.ResponseConfiguration.multicastAddress.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 177) | ((unint64_t)*(unsigned __int16 *)(v0 + 181) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 183) << 48);
}

uint64_t NANDatapath.ResponseConfiguration.multicastAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 177) = result;
  *(_WORD *)(v1 + 181) = WORD2(result);
  *(_BYTE *)(v1 + 183) = BYTE6(result) & 1;
  return result;
}

uint64_t (*NANDatapath.ResponseConfiguration.multicastAddress.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDatapath.ResponseConfiguration.multicastServiceType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 184);
}

uint64_t NANDatapath.ResponseConfiguration.multicastServiceType.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 184) = result & 1;
  return result;
}

uint64_t NANDatapath.ResponseConfiguration.init(instanceID:publishID:initiatorManagementAddress:initiatorDataAddress:initiatorServiceInfo:responderManagementAddress:responderDataAddress:serviceName:serviceType:dialogToken:status:securityConfiguration:internetSharingConfiguration:multicastAddress:multicastServiceType:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v21;
  uint64_t result;

  *(_BYTE *)(a9 + 176) = -1;
  *(_BYTE *)a9 = a1;
  *(_BYTE *)(a9 + 1) = a2;
  *(_BYTE *)(a9 + 3) = BYTE1(a3);
  *(_BYTE *)(a9 + 4) = BYTE2(a3);
  *(_BYTE *)(a9 + 5) = BYTE3(a3);
  *(_QWORD *)(a9 + 177) = 0x101000000000000;
  v21 = a9 + 177;
  *(_BYTE *)(a9 + 6) = BYTE4(a3);
  *(_BYTE *)(a9 + 2) = a3;
  *(_BYTE *)(a9 + 7) = BYTE5(a3);
  *(_BYTE *)(a9 + 9) = BYTE1(a4);
  *(_BYTE *)(a9 + 10) = BYTE2(a4);
  *(_BYTE *)(a9 + 11) = BYTE3(a4);
  *(_BYTE *)(a9 + 12) = BYTE4(a4);
  *(_BYTE *)(a9 + 8) = a4;
  *(_BYTE *)(a9 + 13) = BYTE5(a4);
  *(_QWORD *)(a9 + 16) = a5;
  *(_QWORD *)(a9 + 24) = a6;
  *(_QWORD *)(a9 + 32) = a7;
  *(_BYTE *)(a9 + 41) = BYTE1(a8);
  *(_BYTE *)(a9 + 42) = BYTE2(a8);
  *(_BYTE *)(a9 + 43) = BYTE3(a8);
  *(_BYTE *)(a9 + 40) = a8;
  *(_BYTE *)(a9 + 44) = BYTE4(a8);
  *(_BYTE *)(a9 + 45) = BYTE5(a8);
  *(_DWORD *)(a9 + 47) = *(_DWORD *)((char *)&a10 + 1);
  *(_BYTE *)(a9 + 46) = a10;
  *(_BYTE *)(a9 + 51) = BYTE5(a10);
  *(_QWORD *)(a9 + 56) = a11;
  *(_QWORD *)(a9 + 64) = a12;
  *(_BYTE *)(a9 + 72) = a13;
  *(_QWORD *)(a9 + 168) = 0;
  *(_OWORD *)(a9 + 152) = 0u;
  *(_WORD *)(a9 + 73) = *(_WORD *)((char *)&a13 + 1);
  *(_OWORD *)(a9 + 136) = 0u;
  sub_100063EB8(a14, a9 + 80, &qword_100409C08);
  result = sub_10006298C(a15, a9 + 136, (uint64_t *)&unk_10040E260);
  *(_WORD *)(v21 + 4) = a17;
  *(_DWORD *)v21 = a16;
  *(_BYTE *)(a9 + 183) = a18 & 1;
  *(_BYTE *)(a9 + 184) = a20 & 1;
  return result;
}

void NANDatapath.ResponseConfiguration.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 v17;
  Swift::UInt8 v18;
  Swift::UInt8 v19;
  Swift::UInt8 v20;
  Swift::UInt8 v21;
  Swift::UInt8 v22;
  Swift::UInt8 v23;
  Swift::UInt8 v24;
  Swift::UInt8 v25;
  Swift::UInt8 v26;
  Swift::UInt8 v27;
  uint64_t v28;
  Swift::String v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt8 v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  Swift::UInt8 v52;
  char v53;
  _BYTE v54[48];
  _BYTE v55[56];
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 1));
  v4 = *(_BYTE *)(v1 + 3);
  v5 = *(_BYTE *)(v1 + 4);
  v6 = *(_BYTE *)(v1 + 5);
  v7 = *(_BYTE *)(v1 + 6);
  v8 = *(_BYTE *)(v1 + 7);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 2));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  v9 = *(_BYTE *)(v1 + 9);
  v10 = *(_BYTE *)(v1 + 10);
  v11 = *(_BYTE *)(v1 + 11);
  v12 = *(_BYTE *)(v1 + 12);
  v13 = *(_BYTE *)(v1 + 13);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 8));
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  v14 = *(_QWORD *)(v1 + 16);
  if (v14 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v16 = *(_QWORD *)(v1 + 24);
    v15 = *(_QWORD *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
    sub_100031FEC(v16, v15);
    Data.hash(into:)(a1, v16, v15, v17);
    sub_100111BBC(v14, v16, v15);
  }
  v18 = *(_BYTE *)(v1 + 41);
  v19 = *(_BYTE *)(v1 + 42);
  v20 = *(_BYTE *)(v1 + 43);
  v21 = *(_BYTE *)(v1 + 44);
  v22 = *(_BYTE *)(v1 + 45);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 40));
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  Hasher._combine(_:)(v22);
  v23 = *(_BYTE *)(v1 + 47);
  v24 = *(_BYTE *)(v1 + 48);
  v25 = *(_BYTE *)(v1 + 49);
  v26 = *(_BYTE *)(v1 + 50);
  v27 = *(_BYTE *)(v1 + 51);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 46));
  Hasher._combine(_:)(v23);
  Hasher._combine(_:)(v24);
  Hasher._combine(_:)(v25);
  Hasher._combine(_:)(v26);
  Hasher._combine(_:)(v27);
  v28 = *(_QWORD *)(v1 + 64);
  v29 = String.lowercased()();
  swift_bridgeObjectRetain(v28);
  String.hash(into:)(a1, v29._countAndFlagsBits, v29._object);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v29._object);
  v30 = 0xE800000000000000;
  v31 = 0x656D69746C616572;
  if (*(_BYTE *)(v2 + 72) != 1)
  {
    v31 = 0x6E6574614C776F6CLL;
    v30 = 0xEA00000000007963;
  }
  if (*(_BYTE *)(v2 + 72))
    v32 = v31;
  else
    v32 = 0x6576697470616461;
  if (*(_BYTE *)(v2 + 72))
    v33 = v30;
  else
    v33 = 0xE800000000000000;
  String.hash(into:)(a1, v32, v33);
  swift_bridgeObjectRelease(v33);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 73));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 74));
  v34 = *(_QWORD *)(v2 + 128);
  if (v34 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = *(_QWORD *)(v2 + 112);
    v35 = *(_QWORD *)(v2 + 120);
    v38 = *(_QWORD *)(v2 + 96);
    v37 = *(_QWORD *)(v2 + 104);
    v40 = *(_QWORD *)(v2 + 80);
    v39 = *(_QWORD *)(v2 + 88);
    v55[48] = v40;
    v56 = v39;
    v57 = v38;
    v58 = v37;
    v59 = v36;
    v60 = v35;
    v61 = v34;
    Hasher._combine(_:)(1u);
    sub_100031FEC(v39, v38);
    sub_1000339F4(v37, v36);
    swift_bridgeObjectRetain(v34);
    NANDatapath.SecurityConfiguration.hash(into:)(a1);
    sub_1000B6530(v40, v39, v38, v37, v36, v35, v34);
  }
  sub_100033B48(v2 + 136, (uint64_t)v55, (uint64_t *)&unk_10040E260);
  if (v55[40] != 255)
  {
    sub_100184FDC((uint64_t)v55, (uint64_t)v54);
    Hasher._combine(_:)(1u);
    sub_100185018((uint64_t)v54, (uint64_t)v51);
    if ((v53 & 1) != 0)
    {
      sub_100185054((uint64_t)v51);
      v41 = 0;
    }
    else
    {
      v49 = v51[0];
      v50 = v51[1];
      v41 = v52;
      Hasher._combine(_:)(1u);
      String.hash(into:)(a1, v49, v50);
      swift_bridgeObjectRelease(v50);
    }
    Hasher._combine(_:)(v41);
    sub_100185054((uint64_t)v54);
    if ((*(_BYTE *)(v2 + 183) & 1) != 0)
      goto LABEL_22;
LABEL_19:
    v42 = *(unsigned __int16 *)(v2 + 181);
    v43 = *(_DWORD *)(v2 + 177);
    v44 = v43 | ((unint64_t)*(unsigned __int16 *)(v2 + 181) << 32);
    v45 = v44 >> 8;
    v46 = v44 >> 16;
    v47 = v44 >> 24;
    v48 = v42 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
    Hasher._combine(_:)(v45);
    Hasher._combine(_:)(v46);
    Hasher._combine(_:)(v47);
    Hasher._combine(_:)(v42);
    goto LABEL_23;
  }
  Hasher._combine(_:)(0);
  if ((*(_BYTE *)(v2 + 183) & 1) == 0)
    goto LABEL_19;
LABEL_22:
  LOBYTE(v48) = 0;
LABEL_23:
  Hasher._combine(_:)(v48);
  if (*(_BYTE *)(v2 + 184) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)(a1, 0xD000000000000012, 0x8000000100362060);
  }
}

Swift::Int NANDatapath.ResponseConfiguration.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANDatapath.ResponseConfiguration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void sub_1001836F8(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;

  v2 = *(_WORD *)(v1 + 12);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(v1 + 8);
  *(_WORD *)(a1 + 5) = v2;
}

Swift::Int sub_100183718()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANDatapath.ResponseConfiguration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void __swiftcall NANDatapath.ConfirmationConfiguration.init(instanceID:initiatorDataAddress:status:)(CoreP2P::NANDatapath::ConfirmationConfiguration *__return_ptr retstr, Swift::UInt8 instanceID, CoreP2P::WiFiAddress *initiatorDataAddress, CoreP2P::NANAttribute::Datapath::Status status)
{
  ;
}

BOOL sub_10018376C(unint64_t *a1, unint64_t *a2)
{
  return _s7CoreP2P11NANDatapathO25ConfirmationConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t NANDatapath.Configuration.init(instanceID:serviceName:responderPublishID:responderManagementAddress:initiatorDataAddress:initiatorSubscribeID:publicOWEKey:protocolType:port:hostname:serviceType:securityConfiguration:internetSharingConfiguration:multicastAddress:multicastServiceType:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, unint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18)
{
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;

  v65 = a7;
  v66 = a4;
  v63 = a2;
  v64 = a3;
  v62 = a1;
  v70 = a17;
  v71 = a8;
  v69 = a16;
  v67 = a5;
  v68 = a15;
  v55 = a13;
  v56 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v58 = (uint64_t)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100404E70);
  __chkstk_darwin();
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v59 = (uint64_t)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v27 = (uint64_t *)((char *)&v45 - v26);
  __chkstk_darwin();
  v29 = (char *)&v45 - v28;
  __chkstk_darwin();
  v31 = (char *)&v45 - v30;
  v72 = sub_100031A88((uint64_t)_swiftEmptyArrayStorage);
  if (a10 == 2)
  {
    v32 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  }
  else
  {
    *v31 = a10 & 1;
    v33 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v31, v33, 1);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v31, 0, 1, v33);
  }
  v60 = a18;
  v57 = a14;
  sub_100033B48((uint64_t)v31, (uint64_t)v29, &qword_100404EE8);
  sub_10002548C((uint64_t)v29, 1);
  sub_100033A84((uint64_t)v31, &qword_100404EE8);
  sub_100033B48(a11, (uint64_t)v24, &qword_100404E70);
  NANGenericServiceProtocol.port.setter((uint64_t)v24);
  v61 = a11;
  if (v55 && (v34 = _s7CoreP2P14NANServiceNameVyACSgSScfC_0(a12, v55), v35))
  {
    *v27 = v34;
    v27[1] = v35;
    v36 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v27, v36, 2);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v27, 0, 1, v36);
  }
  else
  {
    v36 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v27, 1, 1, v36);
  }
  v51 = a6 >> 40;
  v49 = HIDWORD(a6);
  v48 = a6 >> 24;
  v47 = a6 >> 16;
  v46 = a6 >> 8;
  v45 = a6;
  v37 = v67;
  v54 = HIDWORD(v67);
  v55 = v67 >> 40;
  v52 = v67 >> 16;
  v53 = v67 >> 24;
  v50 = v67 >> 8;
  sub_100033B48((uint64_t)v27, (uint64_t)v29, &qword_100404EE8);
  sub_10002548C((uint64_t)v29, 2);
  sub_100033A84((uint64_t)v27, &qword_100404EE8);
  v38 = v58;
  sub_100033B48(v71, v58, (uint64_t *)&unk_10040D200);
  sub_100071FA8(v72, (uint64_t)v21);
  sub_100078AC4(v38, (uint64_t)&v21[*(int *)(v56 + 24)]);
  sub_100185088((uint64_t)v21, (uint64_t)v29);
  type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  swift_storeEnumTagMultiPayload(v29, v36, 7);
  v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
  v39(v29, 0, 1, v36);
  v40 = v59;
  sub_100033B48((uint64_t)v29, v59, &qword_100404EE8);
  sub_10002548C(v40, 7);
  sub_1001850CC((uint64_t)v21);
  sub_100033A84((uint64_t)v29, &qword_100404EE8);
  sub_100033A84(v38, (uint64_t *)&unk_10040D200);
  sub_100071FA8(v72, (uint64_t)v21);
  LOBYTE(v38) = v65;
  *(_WORD *)(v21 + 1) = v65;
  sub_100185088((uint64_t)v21, (uint64_t)v29);
  swift_storeEnumTagMultiPayload(v29, v36, 7);
  v39(v29, 0, 1, v36);
  sub_100033B48((uint64_t)v29, v40, &qword_100404EE8);
  sub_10002548C(v40, 7);
  sub_1001850CC((uint64_t)v21);
  sub_100033A84((uint64_t)v29, &qword_100404EE8);
  sub_100033A84(v61, &qword_100404E70);
  sub_100033A84(v71, (uint64_t *)&unk_10040D200);
  v41 = v72;
  *(_BYTE *)a9 = v62;
  *(_BYTE *)(a9 + 1) = v45;
  *(_BYTE *)(a9 + 2) = v46;
  *(_BYTE *)(a9 + 3) = v47;
  *(_BYTE *)(a9 + 4) = v48;
  *(_BYTE *)(a9 + 5) = v49;
  *(_BYTE *)(a9 + 6) = v51;
  *(_BYTE *)(a9 + 7) = v38;
  v42 = v64;
  *(_QWORD *)(a9 + 8) = v63;
  *(_QWORD *)(a9 + 16) = v42;
  *(_BYTE *)(a9 + 24) = v66;
  *(_BYTE *)(a9 + 25) = v37;
  *(_BYTE *)(a9 + 26) = v50;
  *(_BYTE *)(a9 + 27) = v52;
  *(_BYTE *)(a9 + 28) = v53;
  *(_BYTE *)(a9 + 29) = v54;
  *(_WORD *)(a9 + 30) = v55;
  *(_BYTE *)(a9 + 32) = v57;
  *(_QWORD *)(a9 + 40) = v41;
  sub_100063EB8(v68, a9 + 48, &qword_100409C08);
  result = sub_100063EB8(v69, a9 + 104, (uint64_t *)&unk_10040DAA0);
  v44 = v70;
  *(_WORD *)(a9 + 148) = WORD2(v70);
  *(_DWORD *)(a9 + 144) = v44;
  *(_BYTE *)(a9 + 150) = BYTE6(v44) & 1;
  *(_BYTE *)(a9 + 151) = v60 & 1;
  return result;
}

uint64_t NANDatapath.ServiceType.init(apiServiceType:)(uint64_t a1)
{
  if (a1 == 2)
    return 2;
  else
    return a1 == 1;
}

uint64_t _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1[1], a1[2]);
  if ((v4 & 1) == 0)
    return 0;
  v5 = a1[3];
  v6 = a1[4];
  v7 = a2[3];
  v8 = a2[4];
  if (v6 >> 60 != 15)
  {
    if (v8 >> 60 != 15)
    {
      sub_1000339F4(a1[3], a1[4]);
      sub_1000339F4(v7, v8);
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6);
      v10 = v9;
      sub_10000E658(v7, v8);
      sub_10000E658(v5, v6);
      if ((v10 & 1) == 0)
        return 0;
      goto LABEL_9;
    }
LABEL_7:
    sub_1000339F4(a1[3], a1[4]);
    sub_1000339F4(v7, v8);
    sub_10000E658(v5, v6);
    sub_10000E658(v7, v8);
    return 0;
  }
  if (v8 >> 60 != 15)
    goto LABEL_7;
LABEL_9:
  v11 = a1[6];
  v12 = a2[6];
  if (v11)
  {
    if (v12)
    {
      v13 = a1[5];
      v14 = a2[5];
      if (v13 == v14 && v11 == v12)
        return 1;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v13, v11, v14, v12, 0) & 1) != 0)
        return 1;
    }
  }
  else if (!v12)
  {
    return 1;
  }
  return 0;
}

uint64_t _s7CoreP2P11NANDatapathO21ResponseConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  int v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v21;
  int v22;
  uint64_t result;
  Swift::String v25;
  Swift::String v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  int8x16_t v63;
  uint64x2_t v64;
  int16x8_t v65;
  uint64x2_t v66;
  int64x2_t v67;
  int16x8_t v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[48];
  _BYTE v82[48];
  _BYTE v83[36];
  unsigned __int8 v84;
  _BYTE v85[40];
  unsigned __int8 v86;
  _BYTE v87[48];
  _BYTE v88[48];
  _QWORD v89[7];
  _QWORD v90[7];

  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  v4 = *((unsigned __int16 *)a1 + 3);
  v5 = *((unsigned __int16 *)a2 + 3);
  *(_DWORD *)v83 = *(_DWORD *)(a1 + 2);
  *(_WORD *)&v83[4] = v4;
  if (*(_DWORD *)v83 != *(_DWORD *)(a2 + 2) || v4 != v5)
    return 0;
  v7 = *((unsigned __int16 *)a1 + 6);
  v8 = *((unsigned __int16 *)a2 + 6);
  *(_DWORD *)v83 = *((_DWORD *)a1 + 2);
  *(_WORD *)&v83[4] = v7;
  if (*(_DWORD *)v83 != *((_DWORD *)a2 + 2) || v7 != v8)
    return 0;
  v10 = *((_QWORD *)a1 + 2);
  v11 = *((_QWORD *)a1 + 3);
  v12 = *((_QWORD *)a1 + 4);
  v13 = *((_QWORD *)a2 + 2);
  v14 = *((_QWORD *)a2 + 3);
  v15 = *((_QWORD *)a2 + 4);
  if (v10 == 4)
  {
    if (v13 == 4)
      goto LABEL_20;
LABEL_17:
    sub_100111B7C(*((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4));
    sub_100111B7C(v13, v14, v15);
    sub_100111BBC(v10, v11, v12);
    sub_100111BBC(v13, v14, v15);
    return 0;
  }
  if (v13 == 4)
    goto LABEL_17;
  if (v10 != v13)
    return 0;
  sub_100111B7C(*((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4));
  sub_100111B7C(v13, v14, v15);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v11, v12);
  v17 = v16;
  sub_100111BBC(v13, v14, v15);
  sub_100111BBC(v10, v11, v12);
  if ((v17 & 1) == 0)
    return 0;
LABEL_20:
  v18 = *((unsigned __int16 *)a1 + 22);
  v19 = *((unsigned __int16 *)a2 + 22);
  *(_DWORD *)v83 = *((_DWORD *)a1 + 10);
  *(_WORD *)&v83[4] = v18;
  if (*(_DWORD *)v83 != *((_DWORD *)a2 + 10) || v18 != v19)
    return 0;
  v21 = *((unsigned __int16 *)a1 + 25);
  v22 = *((unsigned __int16 *)a2 + 25);
  *(_DWORD *)v83 = *(_DWORD *)(a1 + 46);
  *(_WORD *)&v83[4] = v21;
  if (*(_DWORD *)v83 != *(_DWORD *)(a2 + 46) || v21 != v22)
    return 0;
  v25 = String.lowercased()();
  v26 = String.lowercased()();
  if (v25._countAndFlagsBits == v26._countAndFlagsBits && v25._object == v26._object)
  {
    swift_bridgeObjectRelease_n(v25._object, 2);
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v25._countAndFlagsBits, v25._object, v26._countAndFlagsBits, v26._object, 0);
    swift_bridgeObjectRelease(v25._object);
    swift_bridgeObjectRelease(v26._object);
    result = 0;
    if ((v27 & 1) == 0)
      return result;
  }
  v28 = 0x6576697470616461;
  if (a1[72])
  {
    if (a1[72] == 1)
    {
      v29 = 0xE800000000000000;
      v30 = 0x656D69746C616572;
    }
    else
    {
      v30 = 0x6E6574614C776F6CLL;
      v29 = 0xEA00000000007963;
    }
  }
  else
  {
    v29 = 0xE800000000000000;
    v30 = 0x6576697470616461;
  }
  if (a2[72])
  {
    if (a2[72] == 1)
    {
      v31 = 0xE800000000000000;
      v28 = 0x656D69746C616572;
    }
    else
    {
      v28 = 0x6E6574614C776F6CLL;
      v31 = 0xEA00000000007963;
    }
  }
  else
  {
    v31 = 0xE800000000000000;
  }
  if (v30 == v28 && v29 == v31)
  {
    swift_bridgeObjectRelease_n(v29, 2);
LABEL_49:
    if (a1[73] != a2[73] || a1[74] != a2[74])
      return 0;
    v33 = *((_QWORD *)a1 + 10);
    v34 = *((_QWORD *)a1 + 11);
    v35 = *((_QWORD *)a1 + 12);
    v36 = *((_QWORD *)a1 + 13);
    v38 = *((_QWORD *)a1 + 14);
    v37 = *((_QWORD *)a1 + 15);
    v39 = *((_QWORD *)a1 + 16);
    v40 = *((_QWORD *)a2 + 10);
    v41 = *((_QWORD *)a2 + 11);
    v42 = *((_QWORD *)a2 + 12);
    v43 = *((_QWORD *)a2 + 13);
    v45 = *((_QWORD *)a2 + 14);
    v44 = *((_QWORD *)a2 + 15);
    v46 = *((_QWORD *)a2 + 16);
    if (v39 == 1)
    {
      if (v46 == 1)
        goto LABEL_57;
    }
    else if (v46 != 1)
    {
      LOBYTE(v89[0]) = *((_QWORD *)a1 + 10);
      v89[1] = v34;
      v89[2] = v35;
      v89[3] = v36;
      v89[4] = v38;
      v89[5] = v37;
      v89[6] = v39;
      LOBYTE(v90[0]) = v40;
      v90[1] = v41;
      v90[2] = v42;
      v90[3] = v43;
      v90[4] = v45;
      v90[5] = v44;
      v90[6] = v46;
      v78 = v39;
      v80 = v33;
      v70 = v34;
      v71 = v35;
      v53 = v34;
      v54 = v35;
      v55 = v36;
      v56 = v36;
      v72 = v38;
      v73 = v37;
      v57 = v45;
      v58 = v44;
      v59 = v46;
      sub_10018717C(v33, v53, v54, v56, v38, v37, v39);
      sub_10018717C(v40, v41, v42, v43, v57, v58, v59);
      v76 = _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(v89, v90);
      sub_1000B6530(v40, v41, v42, v43, v57, v58, v59);
      sub_1000B6530(v80, v70, v71, v55, v72, v73, v78);
      if ((v76 & 1) == 0)
        return 0;
LABEL_57:
      sub_100033B48((uint64_t)(a1 + 136), (uint64_t)v88, (uint64_t *)&unk_10040E260);
      sub_100033B48((uint64_t)(a2 + 136), (uint64_t)v87, (uint64_t *)&unk_10040E260);
      sub_100033B48((uint64_t)v88, (uint64_t)v83, (uint64_t *)&unk_10040E260);
      sub_100033B48((uint64_t)v87, (uint64_t)v85, (uint64_t *)&unk_10040E260);
      if (v84 == 255)
      {
        sub_100033A84((uint64_t)v87, (uint64_t *)&unk_10040E260);
        sub_100033A84((uint64_t)v88, (uint64_t *)&unk_10040E260);
        if (v86 == 255)
        {
          sub_100033A84((uint64_t)v83, (uint64_t *)&unk_10040E260);
LABEL_63:
          if ((a1[183] & 1) != 0)
          {
            if (!a2[183])
              return 0;
          }
          else
          {
            if ((a2[183] & 1) != 0)
              return 0;
            v61 = *(unsigned int *)(a1 + 177) | ((unint64_t)*(unsigned __int16 *)(a1 + 181) << 32);
            v62 = *(unsigned int *)(a2 + 177) | ((unint64_t)*(unsigned __int16 *)(a2 + 181) << 32);
            v63.i64[0] = 0xFFFFFFFFFFFFLL;
            v63.i64[1] = 0xFFFFFFFFFFFFLL;
            v64 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v61), v63);
            v65 = (int16x8_t)vshlq_u64(v64, (uint64x2_t)xmmword_10033B100);
            v66 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v62), v63);
            v67 = (int64x2_t)vshlq_u64(v66, (uint64x2_t)xmmword_10033B100);
            v68 = (int16x8_t)vshlq_u64(v66, (uint64x2_t)xmmword_10033B0F0);
            v83[0] = *(_DWORD *)(a1 + 177);
            *(int32x2_t *)v64.i8 = vmovn_s64((int64x2_t)vshlq_u64(v64, (uint64x2_t)xmmword_10033B0F0));
            *(int32x2_t *)v65.i8 = vmovn_s64((int64x2_t)v65);
            v65.i16[1] = v65.i16[2];
            v65.i16[2] = v64.i16[0];
            v65.i16[3] = v64.i16[2];
            *(_DWORD *)&v83[1] = vmovn_s16(v65).u32[0];
            v83[5] = BYTE5(v61);
            v88[0] = v62;
            *(int32x2_t *)v64.i8 = vmovn_s64((int64x2_t)v68);
            *(int32x2_t *)v68.i8 = vmovn_s64(v67);
            v68.i16[1] = v68.i16[2];
            v68.i16[2] = v64.i16[0];
            v68.i16[3] = v64.i16[2];
            *(_DWORD *)&v88[1] = vmovn_s16(v68).u32[0];
            v88[5] = BYTE5(v62);
            if (*(_DWORD *)v83 != *(_DWORD *)v88 || *(unsigned __int16 *)&v83[4] != *(unsigned __int16 *)&v88[4])
              return 0;
          }
          if ((a1[184] & 1) != 0)
          {
            if ((a2[184] & 1) != 0)
              return 1;
          }
          else if ((a2[184] & 1) == 0)
          {
            return 1;
          }
          return 0;
        }
      }
      else
      {
        sub_100033B48((uint64_t)v83, (uint64_t)v82, (uint64_t *)&unk_10040E260);
        if (v86 != 255)
        {
          sub_100184FDC((uint64_t)v85, (uint64_t)v81);
          v60 = _s7CoreP2P10NANPublishO28InternetSharingConfigurationO2eeoiySbAE_AEtFZ_0((uint64_t)v82, (uint64_t)v81);
          sub_100185054((uint64_t)v81);
          sub_100033A84((uint64_t)v87, (uint64_t *)&unk_10040E260);
          sub_100033A84((uint64_t)v88, (uint64_t *)&unk_10040E260);
          sub_100185054((uint64_t)v82);
          sub_100033A84((uint64_t)v83, (uint64_t *)&unk_10040E260);
          if ((v60 & 1) == 0)
            return 0;
          goto LABEL_63;
        }
        sub_100033A84((uint64_t)v87, (uint64_t *)&unk_10040E260);
        sub_100033A84((uint64_t)v88, (uint64_t *)&unk_10040E260);
        sub_100185054((uint64_t)v82);
      }
      sub_100033A84((uint64_t)v83, &qword_100409D10);
      return 0;
    }
    v47 = *((_QWORD *)a1 + 10);
    v77 = *((_QWORD *)a1 + 16);
    v79 = v47;
    v74 = *((_QWORD *)a2 + 11);
    v75 = *((_QWORD *)a2 + 14);
    v48 = *((_QWORD *)a2 + 12);
    v49 = *((_QWORD *)a1 + 14);
    v50 = *((_QWORD *)a1 + 15);
    v51 = v44;
    v52 = v46;
    sub_10018717C(v47, v34, v35, v36, v38, v37, v39);
    sub_10018717C(v40, v74, v48, v43, v75, v51, v52);
    sub_1000B6530(v79, v34, v35, v36, v49, v50, v77);
    sub_1000B6530(v40, v74, v48, v43, v75, v51, v52);
    return 0;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v29, v28, v31, 0);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v31);
  result = 0;
  if ((v32 & 1) != 0)
    goto LABEL_49;
  return result;
}

BOOL _s7CoreP2P11NANDatapathO25ConfirmationConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(unint64_t a1, unint64_t a2)
{
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;

  if (a1 != a2)
    return 0;
  LOBYTE(v7) = BYTE1(a1);
  BYTE1(v7) = BYTE2(a1);
  BYTE2(v7) = BYTE3(a1);
  HIBYTE(v7) = BYTE4(a1);
  LOBYTE(v8) = BYTE5(a1);
  HIBYTE(v8) = BYTE6(a1);
  LOBYTE(v5) = BYTE1(a2);
  BYTE1(v5) = BYTE2(a2);
  BYTE2(v5) = BYTE3(a2);
  HIBYTE(v5) = BYTE4(a2);
  LOBYTE(v6) = BYTE5(a2);
  HIBYTE(v6) = BYTE6(a2);
  return v7 == v5 && v8 == v6 && HIBYTE(a1) == HIBYTE(a2);
}

uint64_t _s7CoreP2P11NANDatapathO13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  BOOL v6;
  Swift::String v7;
  Swift::String v8;
  char v9;
  uint64_t result;
  int v11;
  int v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  int8x16_t v49;
  uint64x2_t v50;
  int16x8_t v51;
  uint64x2_t v52;
  int64x2_t v53;
  int16x8_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD v67[5];
  _QWORD v68[3];
  uint64_t v69;
  __int128 v70[2];
  __int128 v71[2];
  _BYTE v72[24];
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _BYTE v76[40];
  _BYTE v77[40];
  _QWORD v78[7];
  _QWORD v79[7];

  if (*a1 != *a2)
    return 0;
  v4 = *(unsigned __int16 *)(a1 + 5);
  v5 = *(unsigned __int16 *)(a2 + 5);
  *(_DWORD *)v72 = *(_DWORD *)(a1 + 1);
  *(_WORD *)&v72[4] = v4;
  v6 = *(_DWORD *)v72 == *(_DWORD *)(a2 + 1) && v4 == v5;
  if (!v6 || a1[7] != a2[7])
    return 0;
  v7 = String.lowercased()();
  v8 = String.lowercased()();
  if (v7._countAndFlagsBits == v8._countAndFlagsBits && v7._object == v8._object)
  {
    swift_bridgeObjectRelease_n(v7._object, 2);
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v7._countAndFlagsBits, v7._object, v8._countAndFlagsBits, v8._object, 0);
    swift_bridgeObjectRelease(v7._object);
    swift_bridgeObjectRelease(v8._object);
    result = 0;
    if ((v9 & 1) == 0)
      return result;
  }
  if (a1[24] != a2[24])
    return 0;
  v11 = *(unsigned __int16 *)(a1 + 29);
  v12 = *(unsigned __int16 *)(a2 + 29);
  *(_DWORD *)v72 = *(_DWORD *)(a1 + 25);
  *(_WORD *)&v72[4] = v11;
  if (*(_DWORD *)v72 != *(_DWORD *)(a2 + 25) || v11 != v12)
    return 0;
  if (a1[31])
    v14 = 0x73616369746C756DLL;
  else
    v14 = 0x74736163696E75;
  if (a1[31])
    v15 = 0xE900000000000074;
  else
    v15 = 0xE700000000000000;
  if (a2[31])
    v16 = 0x73616369746C756DLL;
  else
    v16 = 0x74736163696E75;
  if (a2[31])
    v17 = 0xE900000000000074;
  else
    v17 = 0xE700000000000000;
  if (v14 == v16 && v15 == v17)
  {
    swift_bridgeObjectRelease_n(v15, 2);
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, 0);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v17);
    result = 0;
    if ((v18 & 1) == 0)
      return result;
  }
  v19 = 0x6576697470616461;
  if (a1[32])
  {
    if (a1[32] == 1)
    {
      v20 = 0xE800000000000000;
      v21 = 0x656D69746C616572;
    }
    else
    {
      v21 = 0x6E6574614C776F6CLL;
      v20 = 0xEA00000000007963;
    }
  }
  else
  {
    v20 = 0xE800000000000000;
    v21 = 0x6576697470616461;
  }
  if (a2[32])
  {
    if (a2[32] == 1)
    {
      v22 = 0xE800000000000000;
      v19 = 0x656D69746C616572;
    }
    else
    {
      v19 = 0x6E6574614C776F6CLL;
      v22 = 0xEA00000000007963;
    }
  }
  else
  {
    v22 = 0xE800000000000000;
  }
  if (v21 == v19 && v20 == v22)
  {
    swift_bridgeObjectRelease_n(v20, 2);
    goto LABEL_49;
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v20, v19, v22, 0);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v22);
  result = 0;
  if ((v23 & 1) != 0)
  {
LABEL_49:
    if ((sub_1000738DC(*((_QWORD *)a1 + 5), *((_QWORD *)a2 + 5)) & 1) == 0)
      return 0;
    v24 = *((_QWORD *)a1 + 6);
    v25 = *((_QWORD *)a1 + 7);
    v27 = *((_QWORD *)a1 + 8);
    v26 = *((_QWORD *)a1 + 9);
    v29 = *((_QWORD *)a1 + 10);
    v28 = *((_QWORD *)a1 + 11);
    v30 = *((_QWORD *)a1 + 12);
    v31 = *((_QWORD *)a2 + 6);
    v32 = *((_QWORD *)a2 + 7);
    v33 = *((_QWORD *)a2 + 8);
    v34 = *((_QWORD *)a2 + 9);
    v36 = *((_QWORD *)a2 + 10);
    v35 = *((_QWORD *)a2 + 11);
    v37 = *((_QWORD *)a2 + 12);
    if (v30 == 1)
    {
      if (v37 == 1)
        goto LABEL_56;
    }
    else if (v37 != 1)
    {
      LOBYTE(v78[0]) = *((_QWORD *)a1 + 6);
      v78[1] = v25;
      v78[2] = v27;
      v78[3] = v26;
      v78[4] = v29;
      v78[5] = v28;
      v78[6] = v30;
      LOBYTE(v79[0]) = v31;
      v79[1] = v32;
      v79[2] = v33;
      v79[3] = v34;
      v79[4] = v36;
      v79[5] = v35;
      v79[6] = v37;
      v56 = v25;
      v57 = v24;
      v61 = v32;
      v62 = v31;
      v41 = v24;
      v42 = v25;
      v43 = v33;
      v44 = v34;
      v64 = v28;
      v66 = v29;
      v45 = v30;
      sub_10018717C(v41, v42, v27, v26, v29, v28, v30);
      sub_10018717C(v62, v61, v43, v44, v36, v35, v37);
      v59 = _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(v78, v79);
      sub_1000B6530(v62, v61, v43, v44, v36, v35, v37);
      sub_1000B6530(v57, v56, v27, v26, v66, v64, v45);
      if ((v59 & 1) == 0)
        return 0;
LABEL_56:
      sub_100033B48((uint64_t)(a1 + 104), (uint64_t)v77, (uint64_t *)&unk_10040DAA0);
      sub_100033B48((uint64_t)(a2 + 104), (uint64_t)v76, (uint64_t *)&unk_10040DAA0);
      sub_100033B48((uint64_t)v77, (uint64_t)v72, (uint64_t *)&unk_10040DAA0);
      sub_100033B48((uint64_t)v76, (uint64_t)&v74, (uint64_t *)&unk_10040DAA0);
      if (v73 == 1)
      {
        sub_100033A84((uint64_t)v76, (uint64_t *)&unk_10040DAA0);
        sub_100033A84((uint64_t)v77, (uint64_t *)&unk_10040DAA0);
        if (v75 == 1)
        {
          sub_100033A84((uint64_t)v72, (uint64_t *)&unk_10040DAA0);
LABEL_69:
          if ((a1[150] & 1) != 0)
          {
            if (!a2[150])
              return 0;
          }
          else
          {
            if ((a2[150] & 1) != 0)
              return 0;
            v47 = *((unsigned int *)a1 + 36) | ((unint64_t)*((unsigned __int16 *)a1 + 74) << 32);
            v48 = *((unsigned int *)a2 + 36) | ((unint64_t)*((unsigned __int16 *)a2 + 74) << 32);
            v49.i64[0] = 0xFFFFFFFFFFFFLL;
            v49.i64[1] = 0xFFFFFFFFFFFFLL;
            v50 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v47), v49);
            v51 = (int16x8_t)vshlq_u64(v50, (uint64x2_t)xmmword_10033B100);
            v52 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v48), v49);
            v53 = (int64x2_t)vshlq_u64(v52, (uint64x2_t)xmmword_10033B100);
            v54 = (int16x8_t)vshlq_u64(v52, (uint64x2_t)xmmword_10033B0F0);
            v72[0] = *((_DWORD *)a1 + 36);
            *(int32x2_t *)v50.i8 = vmovn_s64((int64x2_t)vshlq_u64(v50, (uint64x2_t)xmmword_10033B0F0));
            *(int32x2_t *)v51.i8 = vmovn_s64((int64x2_t)v51);
            v51.i16[1] = v51.i16[2];
            v51.i16[2] = v50.i16[0];
            v51.i16[3] = v50.i16[2];
            *(_DWORD *)&v72[1] = vmovn_s16(v51).u32[0];
            v72[5] = BYTE5(v47);
            LOBYTE(v67[0]) = v48;
            *(int32x2_t *)v50.i8 = vmovn_s64((int64x2_t)v54);
            *(int32x2_t *)v54.i8 = vmovn_s64(v53);
            v54.i16[1] = v54.i16[2];
            v54.i16[2] = v50.i16[0];
            v54.i16[3] = v50.i16[2];
            *(_DWORD *)((char *)v67 + 1) = vmovn_s16(v54).u32[0];
            BYTE5(v67[0]) = BYTE5(v48);
            if (*(_DWORD *)v72 != LODWORD(v67[0]) || *(unsigned __int16 *)&v72[4] != WORD2(v67[0]))
              return 0;
          }
          if ((a1[151] & 1) != 0)
          {
            if ((a2[151] & 1) != 0)
              return 1;
          }
          else if ((a2[151] & 1) == 0)
          {
            return 1;
          }
          return 0;
        }
LABEL_61:
        sub_100033A84((uint64_t)v72, &qword_100409D18);
        return 0;
      }
      sub_100033B48((uint64_t)v72, (uint64_t)v71, (uint64_t *)&unk_10040DAA0);
      if (v75 == 1)
      {
        sub_100033A84((uint64_t)v76, (uint64_t *)&unk_10040DAA0);
        sub_100033A84((uint64_t)v77, (uint64_t *)&unk_10040DAA0);
        sub_100184F4C(v71);
        goto LABEL_61;
      }
      sub_1000641F0(&v74, (uint64_t)v70);
      sub_100184EEC(v71, (uint64_t)v67);
      sub_100184EEC(v70, (uint64_t)v68);
      if (v67[3])
      {
        if (v69)
        {
          sub_100184F4C(v68);
LABEL_67:
          sub_100184F4C(v67);
          v46 = 1;
LABEL_68:
          sub_100184F4C(v70);
          sub_100033A84((uint64_t)v76, (uint64_t *)&unk_10040DAA0);
          sub_100033A84((uint64_t)v77, (uint64_t *)&unk_10040DAA0);
          sub_100184F4C(v71);
          sub_100033A84((uint64_t)v72, (uint64_t *)&unk_10040DAA0);
          if ((v46 & 1) == 0)
            return 0;
          goto LABEL_69;
        }
      }
      else if (!v69)
      {
        goto LABEL_67;
      }
      sub_100033A84((uint64_t)v67, &qword_100409C00);
      v46 = 0;
      goto LABEL_68;
    }
    v38 = *((_QWORD *)a2 + 6);
    v60 = *((_QWORD *)a2 + 7);
    v39 = *((_QWORD *)a2 + 8);
    v58 = v37;
    v63 = v28;
    v65 = v29;
    v40 = v30;
    sub_10018717C(v24, v25, v27, v26, v29, v28, v30);
    sub_10018717C(v38, v60, v39, v34, v36, v35, v58);
    sub_1000B6530(v24, v25, v27, v26, v65, v63, v40);
    sub_1000B6530(v38, v60, v39, v34, v36, v35, v58);
    return 0;
  }
  return result;
}

unint64_t _s7CoreP2P11NANDatapathO11ServiceTypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D4F90, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_100184EEC(__int128 *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 4);
    *(_QWORD *)(a2 + 24) = v3;
    *(_QWORD *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

_QWORD *sub_100184F4C(_QWORD *a1)
{
  if (a1[3] >= 0xFFFFFFFFuLL)
    sub_100014430(a1);
  return a1;
}

uint64_t sub_100184F84(uint64_t a1)
{
  sub_100031FEC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100184FB0(uint64_t a1)
{
  sub_10000E614(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100184FDC(uint64_t a1, uint64_t a2)
{
  initializeWithTake for NANAttribute.WLANInfrastructure(a2, a1);
  return a2;
}

uint64_t sub_100185018(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NANPublish.InternetSharingConfiguration(a2, a1);
  return a2;
}

uint64_t sub_100185054(uint64_t a1)
{
  destroy for NANPublish.InternetSharingConfiguration(a1);
  return a1;
}

uint64_t sub_100185088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001850CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10018510C()
{
  unint64_t result;

  result = qword_100409C10;
  if (!qword_100409C10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.DatapathType, &type metadata for NANDatapath.DatapathType);
    atomic_store(result, (unint64_t *)&qword_100409C10);
  }
  return result;
}

unint64_t sub_100185154()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100409C18;
  if (!qword_100409C18)
  {
    v1 = sub_100013C64(&qword_100409C20);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100409C18);
  }
  return result;
}

unint64_t sub_1001851A4()
{
  unint64_t result;

  result = qword_100409C28;
  if (!qword_100409C28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.ServiceType, &type metadata for NANDatapath.ServiceType);
    atomic_store(result, (unint64_t *)&qword_100409C28);
  }
  return result;
}

unint64_t sub_1001851EC()
{
  unint64_t result;

  result = qword_100409C30;
  if (!qword_100409C30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.ParametersType, &type metadata for NANDatapath.ParametersType);
    atomic_store(result, (unint64_t *)&qword_100409C30);
  }
  return result;
}

unint64_t sub_100185234()
{
  unint64_t result;

  result = qword_100409C38;
  if (!qword_100409C38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.ParametersMulticastType, &type metadata for NANDatapath.ParametersMulticastType);
    atomic_store(result, (unint64_t *)&qword_100409C38);
  }
  return result;
}

unint64_t sub_10018527C()
{
  unint64_t result;

  result = qword_100409C40;
  if (!qword_100409C40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.InternetSharingConfiguration, &type metadata for NANDatapath.InternetSharingConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409C40);
  }
  return result;
}

unint64_t sub_1001852C4()
{
  unint64_t result;

  result = qword_100409C48;
  if (!qword_100409C48)
  {
    result = swift_getWitnessTable("Ѻ\t", &type metadata for NANDatapath.SecurityConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409C48);
  }
  return result;
}

unint64_t sub_100185308(uint64_t a1)
{
  unint64_t result;

  result = sub_10018532C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10018532C()
{
  unint64_t result;

  result = qword_100409C50;
  if (!qword_100409C50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.Configuration, &type metadata for NANDatapath.Configuration);
    atomic_store(result, (unint64_t *)&qword_100409C50);
  }
  return result;
}

unint64_t sub_100185374()
{
  unint64_t result;

  result = qword_10040D1C0;
  if (!qword_10040D1C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPeerServiceIdentifier, &type metadata for NANPeerServiceIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040D1C0);
  }
  return result;
}

uint64_t sub_1001853B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100185518(a1, a2, a3, (uint64_t (*)(void))sub_1001853CC, (uint64_t (*)(void))sub_100185410);
}

unint64_t sub_1001853CC()
{
  unint64_t result;

  result = qword_100409C98;
  if (!qword_100409C98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.Configuration, &type metadata for NANDatapath.Configuration);
    atomic_store(result, (unint64_t *)&qword_100409C98);
  }
  return result;
}

unint64_t sub_100185410()
{
  unint64_t result;

  result = qword_100409CA0;
  if (!qword_100409CA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.Configuration, &type metadata for NANDatapath.Configuration);
    atomic_store(result, (unint64_t *)&qword_100409CA0);
  }
  return result;
}

unint64_t sub_100185458()
{
  unint64_t result;

  result = qword_100409CA8;
  if (!qword_100409CA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.Configuration, &type metadata for NANDatapath.Configuration);
    atomic_store(result, (unint64_t *)&qword_100409CA8);
  }
  return result;
}

unint64_t sub_10018549C(uint64_t a1)
{
  unint64_t result;

  result = sub_1001854C0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001854C0()
{
  unint64_t result;

  result = qword_10040C2A0;
  if (!qword_10040C2A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.ResponseConfiguration, &type metadata for NANDatapath.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_10040C2A0);
  }
  return result;
}

uint64_t sub_100185504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100185518(a1, a2, a3, (uint64_t (*)(void))sub_100185548, (uint64_t (*)(void))sub_10018558C);
}

uint64_t sub_100185518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100185548()
{
  unint64_t result;

  result = qword_100409CF0;
  if (!qword_100409CF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.ResponseConfiguration, &type metadata for NANDatapath.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409CF0);
  }
  return result;
}

unint64_t sub_10018558C()
{
  unint64_t result;

  result = qword_100409CF8;
  if (!qword_100409CF8)
  {
    result = swift_getWitnessTable("ٹ\t", &type metadata for NANDatapath.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409CF8);
  }
  return result;
}

unint64_t sub_1001855D4()
{
  unint64_t result;

  result = qword_100409D00;
  if (!qword_100409D00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANDatapath.ResponseConfiguration, &type metadata for NANDatapath.ResponseConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409D00);
  }
  return result;
}

unint64_t sub_10018561C()
{
  unint64_t result;

  result = qword_100409D08;
  if (!qword_100409D08)
  {
    result = swift_getWitnessTable("ٸ\t", &type metadata for NANDatapath.ConfirmationConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409D08);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath()
{
  return &type metadata for NANDatapath;
}

ValueMetadata *type metadata accessor for NANDatapath.DatapathType()
{
  return &type metadata for NANDatapath.DatapathType;
}

uint64_t storeEnumTagSinglePayload for NANDatapath.ServiceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001856D0 + 4 * byte_10034DFC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100185704 + 4 * byte_10034DFC0[v4]))();
}

uint64_t sub_100185704(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018570C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100185714);
  return result;
}

uint64_t sub_100185720(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100185728);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10018572C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100185734(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ServiceType()
{
  return &type metadata for NANDatapath.ServiceType;
}

ValueMetadata *type metadata accessor for NANDatapath.ParametersType()
{
  return &type metadata for NANDatapath.ParametersType;
}

uint64_t _s7CoreP2P11NANDatapathO12DatapathTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001857AC + 4 * byte_10034DFCF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001857E0 + 4 * byte_10034DFCA[v4]))();
}

uint64_t sub_1001857E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001857E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001857F0);
  return result;
}

uint64_t sub_1001857FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100185804);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100185808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100185810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ParametersMulticastType()
{
  return &type metadata for NANDatapath.ParametersMulticastType;
}

_QWORD *destroy for NANDatapath.InternetSharingConfiguration(_QWORD *a1)
{
  if (a1[3] >= 0xFFFFFFFFuLL)
    return (_QWORD *)sub_100014430(a1);
  return a1;
}

uint64_t initializeWithCopy for NANDatapath.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for NANDatapath.InternetSharingConfiguration(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    sub_100014430((_QWORD *)a1);
    goto LABEL_7;
  }
  sub_100185938((_QWORD *)a1, a2);
  return a1;
}

_QWORD *sub_100185938(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for NANDatapath.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    sub_100014430((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.InternetSharingConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NANDatapath.InternetSharingConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_100185B98(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_100185BB0(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.InternetSharingConfiguration()
{
  return &type metadata for NANDatapath.InternetSharingConfiguration;
}

double destroy for NANDatapath.SecurityConfiguration(_QWORD *a1)
{
  unint64_t v2;
  double result;

  sub_10000E614(a1[1], a1[2]);
  v2 = a1[4];
  if (v2 >> 60 != 15)
    sub_10000E614(a1[3], v2);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[6]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for NANDatapath.SecurityConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = (uint64_t *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_100031FEC(*v6, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for NANDatapath.SecurityConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  sub_10000E614(v6, v7);
  v8 = (uint64_t *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      v11 = *v8;
      sub_100031FEC(*v8, *(_QWORD *)(a2 + 32));
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v9;
      sub_10000E614(v12, v13);
      goto LABEL_8;
    }
    sub_100185DB0(a1 + 24);
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v10 = *v8;
  sub_100031FEC(*v8, *(_QWORD *)(a2 + 32));
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v9;
LABEL_8:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_100185DB0(uint64_t a1)
{
  destroy for NANServiceName.Hash(a1);
  return a1;
}

uint64_t assignWithTake for NANDatapath.SecurityConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000E614(v4, v5);
  v6 = (_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 32);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = *v6;
      *(_QWORD *)(a1 + 32) = v8;
      sub_10000E614(v9, v7);
      goto LABEL_6;
    }
    sub_100185DB0(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
LABEL_6:
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.SecurityConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.SecurityConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.SecurityConfiguration()
{
  return &type metadata for NANDatapath.SecurityConfiguration;
}

void destroy for NANDatapath.Configuration(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[5]);
  v2 = a1[12];
  if (v2 != 1)
  {
    sub_10000E614(a1[7], a1[8]);
    v3 = a1[10];
    if (v3 >> 60 != 15)
      sub_10000E614(a1[9], v3);
    swift_bridgeObjectRelease(v2);
  }
  if (a1[16] >= 2uLL)
    sub_100014430(a1 + 13);
}

uint64_t initializeWithCopy for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 1);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 29) = *(_WORD *)(a2 + 29);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v6 == 1)
  {
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  else
  {
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 64);
    sub_100031FEC(v8, v9);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    v10 = (uint64_t *)(a2 + 72);
    v11 = *(_QWORD *)(a2 + 80);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72) = *(_OWORD *)v10;
    }
    else
    {
      v12 = *v10;
      sub_100031FEC(*v10, *(_QWORD *)(a2 + 80));
      *(_QWORD *)(a1 + 72) = v12;
      *(_QWORD *)(a1 + 80) = v11;
    }
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v6;
    swift_bridgeObjectRetain(v6);
  }
  v13 = (_OWORD *)(a1 + 104);
  v14 = (_OWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 128);
  if (v15 > 1)
  {
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 136) = v17;
    (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 120);
    *v13 = *v14;
    *(_OWORD *)(a1 + 120) = v16;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  }
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 147) = *(_DWORD *)(a2 + 147);
  *(_BYTE *)(a1 + 151) = *(_BYTE *)(a2 + 151);
  return a1;
}

uint64_t assignWithCopy for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  __n128 *v9;
  uint64_t v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (__n128 *)(a1 + 48);
  v9 = (__n128 *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) != 1)
  {
    if (v10 == 1)
    {
      sub_100186498((_QWORD *)(a1 + 48));
      v14 = *(_OWORD *)(a2 + 64);
      v11 = *(__n128 *)(a2 + 80);
      v15 = *v9;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 64) = v14;
      *(__n128 *)(a1 + 80) = v11;
      *v8 = v15;
      goto LABEL_18;
    }
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v20 = *(_QWORD *)(a2 + 56);
    v21 = *(_QWORD *)(a2 + 64);
    sub_100031FEC(v20, v21);
    v22 = *(_QWORD *)(a1 + 56);
    v23 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v20;
    *(_QWORD *)(a1 + 64) = v21;
    sub_10000E614(v22, v23);
    v24 = (uint64_t *)(a2 + 72);
    v25 = *(_QWORD *)(a2 + 80);
    if (*(_QWORD *)(a1 + 80) >> 60 == 15)
    {
      if (v25 >> 60 != 15)
      {
        v26 = *v24;
        sub_100031FEC(*v24, *(_QWORD *)(a2 + 80));
        *(_QWORD *)(a1 + 72) = v26;
        *(_QWORD *)(a1 + 80) = v25;
LABEL_17:
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        v32 = *(_QWORD *)(a2 + 96);
        v33 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v32;
        swift_bridgeObjectRetain(v32);
        v11 = swift_bridgeObjectRelease(v33);
        goto LABEL_18;
      }
    }
    else
    {
      if (v25 >> 60 != 15)
      {
        v29 = *v24;
        sub_100031FEC(*v24, *(_QWORD *)(a2 + 80));
        v30 = *(_QWORD *)(a1 + 72);
        v31 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 72) = v29;
        *(_QWORD *)(a1 + 80) = v25;
        sub_10000E614(v30, v31);
        goto LABEL_17;
      }
      sub_100185DB0(a1 + 72);
    }
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v24;
    goto LABEL_17;
  }
  if (v10 == 1)
  {
    v11 = *v9;
    v12 = *(_OWORD *)(a2 + 64);
    v13 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 80) = v13;
    *v8 = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v16 = *(_QWORD *)(a2 + 56);
    v17 = *(_QWORD *)(a2 + 64);
    sub_100031FEC(v16, v17);
    *(_QWORD *)(a1 + 56) = v16;
    *(_QWORD *)(a1 + 64) = v17;
    v18 = (uint64_t *)(a2 + 72);
    v19 = *(_QWORD *)(a2 + 80);
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72) = *(_OWORD *)v18;
    }
    else
    {
      v27 = *v18;
      sub_100031FEC(*v18, *(_QWORD *)(a2 + 80));
      *(_QWORD *)(a1 + 72) = v27;
      *(_QWORD *)(a1 + 80) = v19;
    }
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v28 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v28;
    swift_bridgeObjectRetain(v28);
  }
LABEL_18:
  v34 = (_OWORD *)(a1 + 104);
  v35 = (_OWORD *)(a2 + 104);
  v36 = *(_QWORD *)(a1 + 128);
  v37 = *(_QWORD *)(a2 + 128);
  if (v36 == 1)
  {
    if (v37 >= 2)
      goto LABEL_27;
    goto LABEL_29;
  }
  if (v37 == 1)
  {
    sub_100184F4C((_QWORD *)(a1 + 104));
    v38 = *(_QWORD *)(a2 + 136);
    v39 = *(_OWORD *)(a2 + 120);
    *v34 = *v35;
    *(_OWORD *)(a1 + 120) = v39;
    *(_QWORD *)(a1 + 136) = v38;
  }
  else
  {
    if (!v36)
    {
      if (v37)
      {
LABEL_27:
        *(_QWORD *)(a1 + 128) = v37;
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        (**(void (***)(uint64_t, uint64_t, __n128))(v37 - 8))(a1 + 104, a2 + 104, v11);
        goto LABEL_30;
      }
LABEL_29:
      v40 = *v35;
      v41 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *v34 = v40;
      *(_OWORD *)(a1 + 120) = v41;
      goto LABEL_30;
    }
    if (!v37)
    {
      sub_100014430((_QWORD *)(a1 + 104));
      goto LABEL_29;
    }
    sub_100185938((_QWORD *)(a1 + 104), (_QWORD *)(a2 + 104));
  }
LABEL_30:
  v42 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 147) = *(_DWORD *)(a2 + 147);
  *(_DWORD *)(a1 + 144) = v42;
  *(_BYTE *)(a1 + 151) = *(_BYTE *)(a2 + 151);
  return a1;
}

_QWORD *sub_100186498(_QWORD *a1)
{
  destroy for NANDatapath.SecurityConfiguration(a1);
  return a1;
}

__n128 initializeWithTake for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_WORD *)(a1 + 29) = *(_WORD *)(a2 + 29);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  if (*(_QWORD *)(a1 + 96) == 1)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 96);
  if (v7 == 1)
  {
    sub_100186498((_QWORD *)(a1 + 48));
LABEL_4:
    v8 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v8;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    goto LABEL_11;
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_10000E614(v9, v10);
  v11 = (_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  if (v12 >> 60 != 15)
  {
    v13 = *(_QWORD *)(a2 + 80);
    if (v13 >> 60 != 15)
    {
      v14 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = *v11;
      *(_QWORD *)(a1 + 80) = v13;
      sub_10000E614(v14, v12);
      goto LABEL_10;
    }
    sub_100185DB0(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v11;
LABEL_10:
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  swift_bridgeObjectRelease(v15);
LABEL_11:
  v16 = *(_QWORD *)(a1 + 128);
  if (v16 != 1)
  {
    if (*(_QWORD *)(a2 + 128) == 1)
    {
      sub_100184F4C((_QWORD *)(a1 + 104));
    }
    else if (v16)
    {
      sub_100014430((_QWORD *)(a1 + 104));
    }
  }
  v17 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v17;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 147) = *(_DWORD *)(a2 + 147);
  *(_BYTE *)(a1 + 151) = *(_BYTE *)(a2 + 151);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.Configuration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.Configuration()
{
  return &type metadata for NANDatapath.Configuration;
}

void destroy for NANDatapath.ResponseConfiguration(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;

  if (*(_BYTE *)(a1 + 16) != 4)
    sub_10000E614(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 128);
  if (v2 != 1)
  {
    sub_10000E614(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
    v3 = *(_QWORD *)(a1 + 112);
    if (v3 >> 60 != 15)
      sub_10000E614(*(_QWORD *)(a1 + 104), v3);
    swift_bridgeObjectRelease(v2);
  }
  v4 = *(unsigned __int8 *)(a1 + 176);
  if (v4 != 255)
  {
    if ((v4 & 1) != 0)
      sub_100014430((_QWORD *)(a1 + 136));
    else
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 144));
  }
}

uint64_t initializeWithCopy for NANDatapath.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(_WORD *)(a1 + 6) = *(_WORD *)(a2 + 6);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 4)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    *(_BYTE *)(a1 + 16) = v4;
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 32);
    sub_100031FEC(v5, v6);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 46) = *(_DWORD *)(a2 + 46);
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 50);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  v8 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain(v7);
  if (v8 == 1)
  {
    v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v9;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  }
  else
  {
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 96);
    sub_100031FEC(v10, v11);
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v11;
    v12 = (uint64_t *)(a2 + 104);
    v13 = *(_QWORD *)(a2 + 112);
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 104) = *(_OWORD *)v12;
    }
    else
    {
      v14 = *v12;
      sub_100031FEC(*v12, *(_QWORD *)(a2 + 112));
      *(_QWORD *)(a1 + 104) = v14;
      *(_QWORD *)(a1 + 112) = v13;
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v8;
    swift_bridgeObjectRetain(v8);
  }
  v15 = (_OWORD *)(a1 + 136);
  v16 = (_OWORD *)(a2 + 136);
  v17 = *(unsigned __int8 *)(a2 + 176);
  if (v17 == 255)
  {
    v18 = *(_OWORD *)(a2 + 152);
    *v15 = *v16;
    *(_OWORD *)(a1 + 152) = v18;
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  }
  else if ((v17 & 1) != 0)
  {
    v20 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 160) = v20;
    (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v15, v16);
    *(_BYTE *)(a1 + 176) = 1;
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v19;
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 176) = 0;
    swift_bridgeObjectRetain(v19);
  }
  *(_DWORD *)(a1 + 177) = *(_DWORD *)(a2 + 177);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  return a1;
}

uint64_t assignWithCopy for NANDatapath.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  v4 = a1 + 16;
  v6 = (__int128 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    if (v5 == 4)
    {
      v7 = *v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v4 = v7;
    }
    else
    {
      *(_BYTE *)(a1 + 16) = v5;
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      sub_100031FEC(v9, v10);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v10;
    }
  }
  else if (v5 == 4)
  {
    sub_100186E18(a1 + 16);
    v8 = *((_QWORD *)v6 + 2);
    *(_OWORD *)v4 = *v6;
    *(_QWORD *)(v4 + 16) = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = v5;
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 32);
    sub_100031FEC(v11, v12);
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v12;
    sub_10000E614(v13, v14);
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 47);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  v17 = (_OWORD *)(a1 + 80);
  v18 = (__int128 *)(a2 + 80);
  v19 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128) != 1)
  {
    if (v19 == 1)
    {
      sub_100186498((_QWORD *)(a1 + 80));
      v24 = *(_OWORD *)(a2 + 96);
      v23 = *(_OWORD *)(a2 + 112);
      v25 = *v18;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 96) = v24;
      *(_OWORD *)(a1 + 112) = v23;
      *v17 = v25;
      goto LABEL_25;
    }
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v30 = *(_QWORD *)(a2 + 88);
    v31 = *(_QWORD *)(a2 + 96);
    sub_100031FEC(v30, v31);
    v32 = *(_QWORD *)(a1 + 88);
    v33 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = v30;
    *(_QWORD *)(a1 + 96) = v31;
    sub_10000E614(v32, v33);
    v34 = (uint64_t *)(a2 + 104);
    v35 = *(_QWORD *)(a2 + 112);
    if (*(_QWORD *)(a1 + 112) >> 60 == 15)
    {
      if (v35 >> 60 != 15)
      {
        v36 = *v34;
        sub_100031FEC(*v34, *(_QWORD *)(a2 + 112));
        *(_QWORD *)(a1 + 104) = v36;
        *(_QWORD *)(a1 + 112) = v35;
LABEL_24:
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        v42 = *(_QWORD *)(a2 + 128);
        v43 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v42;
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRelease(v43);
        goto LABEL_25;
      }
    }
    else
    {
      if (v35 >> 60 != 15)
      {
        v39 = *v34;
        sub_100031FEC(*v34, *(_QWORD *)(a2 + 112));
        v40 = *(_QWORD *)(a1 + 104);
        v41 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 104) = v39;
        *(_QWORD *)(a1 + 112) = v35;
        sub_10000E614(v40, v41);
        goto LABEL_24;
      }
      sub_100185DB0(a1 + 104);
    }
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v34;
    goto LABEL_24;
  }
  if (v19 == 1)
  {
    v20 = *v18;
    v21 = *(_OWORD *)(a2 + 96);
    v22 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 96) = v21;
    *(_OWORD *)(a1 + 112) = v22;
    *v17 = v20;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v26 = *(_QWORD *)(a2 + 88);
    v27 = *(_QWORD *)(a2 + 96);
    sub_100031FEC(v26, v27);
    *(_QWORD *)(a1 + 88) = v26;
    *(_QWORD *)(a1 + 96) = v27;
    v28 = (uint64_t *)(a2 + 104);
    v29 = *(_QWORD *)(a2 + 112);
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 104) = *(_OWORD *)v28;
    }
    else
    {
      v37 = *v28;
      sub_100031FEC(*v28, *(_QWORD *)(a2 + 112));
      *(_QWORD *)(a1 + 104) = v37;
      *(_QWORD *)(a1 + 112) = v29;
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v38 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v38;
    swift_bridgeObjectRetain(v38);
  }
LABEL_25:
  v44 = (__int128 *)(a1 + 136);
  v45 = (__int128 *)(a2 + 136);
  v46 = *(unsigned __int8 *)(a2 + 176);
  if (*(unsigned __int8 *)(a1 + 176) == 255)
  {
    if (v46 == 255)
    {
      v49 = *v45;
      v50 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
      *v44 = v49;
      *(_OWORD *)(a1 + 152) = v50;
      goto LABEL_35;
    }
    if ((v46 & 1) != 0)
    {
LABEL_32:
      v51 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 160) = v51;
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      (**(void (***)(uint64_t, uint64_t))(v51 - 8))(a1 + 136, a2 + 136);
      *(_BYTE *)(a1 + 176) = 1;
      goto LABEL_35;
    }
LABEL_34:
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    v52 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 144) = v52;
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 176) = 0;
    swift_bridgeObjectRetain(v52);
    goto LABEL_35;
  }
  if (v46 != 255)
  {
    if (a1 == a2)
      goto LABEL_35;
    sub_100185054(a1 + 136);
    if ((*(_BYTE *)(a2 + 176) & 1) != 0)
      goto LABEL_32;
    goto LABEL_34;
  }
  sub_100185054(a1 + 136);
  v47 = *(_OWORD *)(a2 + 161);
  v48 = *(_OWORD *)(a2 + 152);
  *v44 = *v45;
  *(_OWORD *)(a1 + 152) = v48;
  *(_OWORD *)(a1 + 161) = v47;
LABEL_35:
  v53 = *(_DWORD *)(a2 + 177);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 177) = v53;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  return a1;
}

uint64_t sub_100186E18(uint64_t a1)
{
  destroy for NANServiceInfo(a1);
  return a1;
}

uint64_t assignWithTake for NANDatapath.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  v4 = a1 + 16;
  v6 = a2 + 16;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16) == 4)
    goto LABEL_4;
  if (v5 == 4)
  {
    sub_100186E18(a1 + 16);
LABEL_4:
    *(_OWORD *)v4 = *(_OWORD *)v6;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v6 + 16);
    goto LABEL_6;
  }
  *(_BYTE *)(a1 + 16) = v5;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_10000E614(v7, v8);
LABEL_6:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  if (*(_QWORD *)(a1 + 128) == 1)
  {
LABEL_9:
    v11 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v11;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    goto LABEL_16;
  }
  if (*(_QWORD *)(a2 + 128) == 1)
  {
    sub_100186498((_QWORD *)(a1 + 80));
    goto LABEL_9;
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_10000E614(v12, v13);
  v14 = (_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 112);
  if (v15 >> 60 != 15)
  {
    v16 = *(_QWORD *)(a2 + 112);
    if (v16 >> 60 != 15)
    {
      v17 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = *v14;
      *(_QWORD *)(a1 + 112) = v16;
      sub_10000E614(v17, v15);
      goto LABEL_15;
    }
    sub_100185DB0(a1 + 104);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)v14;
LABEL_15:
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRelease(v19);
LABEL_16:
  if (*(unsigned __int8 *)(a1 + 176) == 255)
  {
LABEL_20:
    v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    goto LABEL_21;
  }
  if (*(unsigned __int8 *)(a2 + 176) == 255 || a1 != a2)
  {
    sub_100185054(a1 + 136);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(a1 + 177) = *(_DWORD *)(a2 + 177);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.ResponseConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 185))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.ResponseConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 184) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 185) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 185) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ResponseConfiguration()
{
  return &type metadata for NANDatapath.ResponseConfiguration;
}

uint64_t getEnumTagSinglePayload for NANDatapath.ConfirmationConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 7);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.ConfirmationConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)(result + 7) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ConfirmationConfiguration()
{
  return &type metadata for NANDatapath.ConfirmationConfiguration;
}

uint64_t sub_10018717C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a7 != 1)
  {
    sub_100031FEC(a2, a3);
    sub_1000339F4(a4, a5);
    return swift_bridgeObjectRetain(a7);
  }
  return result;
}

uint64_t static NANActionFrame.__derived_struct_equals(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a1 != 14)
  {
    if (a3 == 14 || byte_10034E91A[a1] != byte_10034E91A[a3])
      return 0;
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a4);
  }
  if (a3 == 14)
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a4);
  return 0;
}

uint64_t NANActionFrame.init(customDeviceInformation:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = sub_100012C44(&qword_10040D570);
  v3 = type metadata accessor for NANAttribute(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v2, v7 + v5, v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_10033A110;
  v9 = v8 + v7;
  sub_100187A6C(a1, v9);
  swift_storeEnumTagMultiPayload(v9, v3, 40);
  sub_100063824(a1, type metadata accessor for NANAttribute.CustomDeviceInformation);
  return 13;
}

void NANActionFrame.init(customAttributes:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  _QWORD v6[5];

  v0 = sub_100012C44(&qword_10040D570);
  v1 = type metadata accessor for NANAttribute(0);
  *(_OWORD *)(swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7)+ 16) = xmmword_10033A110;
  v2 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v3 = type metadata accessor for BinaryEncoder();
  v4 = (uint64_t *)swift_allocObject(v3, 40, 7);
  *((_OWORD *)v4 + 1) = xmmword_10033A100;
  v4[4] = v2;
  v6[3] = v3;
  v6[4] = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)&protocol conformance descriptor for BinaryEncoder);
  v6[0] = v4;
  swift_retain(v4);
  NANAttribute.CustomDeviceInformation.CustomAttributes.encode(to:)(v6);
  sub_100014430(v6);
  swift_beginAccess(v4 + 2, v6, 0, 0);
  v5 = v4[3];
  sub_100031FEC(v4[2], v5);
  swift_release(v4);
  __asm { BR              X9 }
}

double NANActionFrame.hash(into:)(uint64_t a1, char a2, uint64_t a3)
{
  Swift::UInt v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10034E91A[a2]);
  }
  v5 = *(_QWORD *)(a3 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    v7 = *(_QWORD *)(type metadata accessor for NANAttribute(0) - 8);
    v8 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain(a3);
    do
    {
      NANAttribute.hash(into:)();
      v8 += v9;
      --v5;
    }
    while (v5);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a3).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001875E0()
{
  _BYTE *v0;

  if (*v0)
    return 0x7475626972747461;
  else
    return 1701869940;
}

uint64_t sub_100187618@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100187EE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10018763C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100187AB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100187664(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100187AB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANActionFrame.encode(to:)(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v7 = sub_100012C44(&qword_100409D20);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_100187AB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANActionFrame.CodingKeys, &type metadata for NANActionFrame.CodingKeys, v13, v11, v12);
  v22 = a2;
  v21 = 0;
  v14 = sub_100187AF4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v7, &type metadata for NANManagementFrameType, v14);
  if (!v3)
  {
    v19 = a3;
    v20 = 1;
    v15 = sub_100012C44(&qword_100405C48);
    v16 = sub_100188010((unint64_t *)&qword_100409D38, &qword_100406720, (uint64_t)&protocol conformance descriptor for NANAttribute, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANActionFrame.hashValue.getter(unsigned __int8 a1, uint64_t a2)
{
  int v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v4 = a1;
  Hasher.init(_seed:)(v10);
  if (v4 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10034E91A[(char)a1]);
  }
  v5 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    v6 = *(_QWORD *)(type metadata accessor for NANAttribute(0) - 8);
    v7 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain(a2);
    do
    {
      NANAttribute.hash(into:)();
      v7 += v8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(a2);
  }
  return Hasher._finalize()();
}

uint64_t NANActionFrame.init(from:)(_QWORD *a1)
{
  return sub_100187B38(a1);
}

Swift::Int sub_1001878F0()
{
  uint64_t v0;

  return NANActionFrame.hashValue.getter(*(_BYTE *)v0, *(_QWORD *)(v0 + 8));
}

double sub_1001878FC(uint64_t a1)
{
  uint64_t v1;

  return NANActionFrame.hash(into:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8));
}

Swift::Int sub_100187908()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  Hasher.init(_seed:)(v8);
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10034E91A[v1]);
  }
  v3 = *(_QWORD *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = *(_QWORD *)(type metadata accessor for NANAttribute(0) - 8);
    v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain(v2);
    do
    {
      NANAttribute.hash(into:)();
      v5 += v6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(v2);
  }
  return Hasher._finalize()();
}

uint64_t sub_1001879D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100187B38(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_100187A00(_QWORD *a1)
{
  uint64_t v1;

  return NANActionFrame.encode(to:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_100187A1C(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  if (v2 != 14)
  {
    if ((_DWORD)v4 == 14 || byte_10034E91A[v2] != byte_10034E91A[v4])
      return 0;
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v5);
  }
  if ((_DWORD)v4 == 14)
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v5);
  return 0;
}

uint64_t sub_100187A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100187AB0()
{
  unint64_t result;

  result = qword_100409D28;
  if (!qword_100409D28)
  {
    result = swift_getWitnessTable(aY_13, &type metadata for NANActionFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409D28);
  }
  return result;
}

unint64_t sub_100187AF4()
{
  unint64_t result;

  result = qword_100409D30;
  if (!qword_100409D30)
  {
    result = swift_getWitnessTable("IA\t", &type metadata for NANManagementFrameType);
    atomic_store(result, (unint64_t *)&qword_100409D30);
  }
  return result;
}

uint64_t sub_100187B38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v2 = sub_100012C44(&qword_100409D60);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  v8 = sub_100187AB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANActionFrame.CodingKeys, &type metadata for NANActionFrame.CodingKeys, v8, v6, v7);
  v17 = 0;
  v9 = sub_100187FCC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for NANManagementFrameType, &v17, v2, &type metadata for NANManagementFrameType, v9);
  v10 = v18;
  v11 = sub_100012C44(&qword_100405C48);
  v15 = 1;
  v12 = sub_100188010((unint64_t *)&qword_1004066F8, &qword_100406700, (uint64_t)protocol conformance descriptor for NANAttribute, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, &v15, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100014430(a1);
  return v10;
}

unint64_t sub_100187CE8()
{
  unint64_t result;

  result = qword_100409D40;
  if (!qword_100409D40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANActionFrame, &type metadata for NANActionFrame);
    atomic_store(result, (unint64_t *)&qword_100409D40);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANActionFrame()
{
  return &type metadata for NANActionFrame;
}

uint64_t storeEnumTagSinglePayload for NANActionFrame.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100187D88 + 4 * byte_10034E731[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100187DBC + 4 * asc_10034E72C[v4]))();
}

uint64_t sub_100187DBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100187DC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100187DCCLL);
  return result;
}

uint64_t sub_100187DD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100187DE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100187DE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100187DEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANActionFrame.CodingKeys()
{
  return &type metadata for NANActionFrame.CodingKeys;
}

unint64_t sub_100187E0C()
{
  unint64_t result;

  result = qword_100409D48;
  if (!qword_100409D48)
  {
    result = swift_getWitnessTable(aQ_4, &type metadata for NANActionFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409D48);
  }
  return result;
}

unint64_t sub_100187E54()
{
  unint64_t result;

  result = qword_100409D50;
  if (!qword_100409D50)
  {
    result = swift_getWitnessTable(byte_10034E810, &type metadata for NANActionFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409D50);
  }
  return result;
}

unint64_t sub_100187E9C()
{
  unint64_t result;

  result = qword_100409D58;
  if (!qword_100409D58)
  {
    result = swift_getWitnessTable(byte_10034E838, &type metadata for NANActionFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409D58);
  }
  return result;
}

uint64_t sub_100187EE0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7475626972747461 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease(0xEA00000000007365);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7475626972747461, 0xEA00000000007365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_100187FCC()
{
  unint64_t result;

  result = qword_100409D68;
  if (!qword_100409D68)
  {
    result = swift_getWitnessTable("aA\t", &type metadata for NANManagementFrameType);
    atomic_store(result, (unint64_t *)&qword_100409D68);
  }
  return result;
}

uint64_t sub_100188010(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_100013C64(&qword_100405C48);
    v10 = sub_100011DE4(a2, type metadata accessor for NANAttribute, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *sub_100188094()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  __int16 v6;
  char v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  int v12;
  __int16 v13;
  char v14;
  ValueMetadata *v15;
  unint64_t v16;

  v15 = &type metadata for NANDatapath.Configuration;
  v1 = sub_100012C44(&qword_100409F28);
  v2 = String.init<A>(describing:)(&v15, v1);
  v4 = v3;
  v15 = 0;
  v16 = 0xE000000000000000;
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6 = *((_WORD *)v0 + 2);
  v7 = *((_BYTE *)v0 + 6);
  v12 = *v0;
  v13 = v6;
  v14 = v7;
  _print_unlocked<A, B>(_:_:)(&v12, &v15, &type metadata for NANPeerServiceIdentifier, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8 = (uint64_t)v15;
  v9 = (void *)v16;
  v15 = (ValueMetadata *)v2;
  v16 = v4;
  swift_bridgeObjectRetain(v4);
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v9);
  return v15;
}

ValueMetadata *sub_10018817C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  __int16 v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  char v11;
  int v12;
  __int16 v13;
  ValueMetadata *v14;
  unint64_t v15;

  v14 = &type metadata for NANDatapath.ResponseConfiguration;
  v1 = sub_100012C44(&qword_100409F20);
  v2 = String.init<A>(describing:)(&v14, v1);
  v4 = v3;
  v14 = 0;
  v15 = 0xE000000000000000;
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6 = *((_WORD *)v0 + 6);
  v11 = *v0;
  v12 = *((_DWORD *)v0 + 2);
  v13 = v6;
  _print_unlocked<A, B>(_:_:)(&v11, &v14, &type metadata for NANPeerServiceIdentifier, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7 = (uint64_t)v14;
  v8 = (void *)v15;
  v14 = (ValueMetadata *)v2;
  v15 = v4;
  swift_bridgeObjectRetain(v4);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  return v14;
}

uint64_t sub_100188264()
{
  return sub_100188278(type metadata accessor for NANSubscribe.Configuration, &qword_100409F30);
}

uint64_t sub_100188278(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  char v13;
  uint64_t v14;
  unint64_t v15;

  v14 = a1(0);
  v4 = sub_100012C44(a2);
  v5 = String.init<A>(describing:)(&v14, v4);
  v7 = v6;
  v14 = 0;
  v15 = 0xE000000000000000;
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v13 = *v2;
  _print_unlocked<A, B>(_:_:)(&v13, &v14, &type metadata for UInt8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9 = v14;
  v10 = (void *)v15;
  v14 = v5;
  v15 = v7;
  swift_bridgeObjectRetain(v7);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v10);
  return v14;
}

uint64_t NANPublish.Configuration.serviceInfo.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_100404208 != -1)
    swift_once(&qword_100404208, sub_1001F08D4);
  v1 = String.lowercased()();
  v2 = String.lowercased()();
  if (v1._countAndFlagsBits == v2._countAndFlagsBits && v1._object == v2._object)
  {
    swift_bridgeObjectRelease_n(v1._object, 2);
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v1._countAndFlagsBits, v1._object, v2._countAndFlagsBits, v2._object, 0);
    swift_bridgeObjectRelease(v1._object);
    swift_bridgeObjectRelease(v2._object);
    if ((v4 & 1) == 0)
    {
      v5 = *(_QWORD *)(v0 + 24);
      goto LABEL_11;
    }
  }
  v5 = *(_QWORD *)(v0 + 24);
  NANGenericServiceProtocol.blob.getter(v5);
  if (v6 >> 60 != 15)
    return 3;
LABEL_11:
  v7 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 96));
  v8 = *(unsigned __int8 *)(v0 + 77) == 2;
  v9 = 2;
  if ((v7 & v8) != 0)
    v10 = 3;
  else
    v10 = 2;
  swift_bridgeObjectRetain(v5);
  NANGenericServiceProtocol.packetData(for:)(v10, v5);
  swift_bridgeObjectRelease(v5);
  return v9;
}

uint64_t NANPublish.Configuration.controlFlag.getter()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;

  if (*(_QWORD *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 84) + 16) + 16))
    v1 = 580;
  else
    v1 = 516;
  v2 = *(unsigned __int8 *)(v0 + 77);
  if ((v2 & 1) != 0)
    v3 = 3;
  else
    v3 = 1;
  if (v2 == 2)
    v4 = 0;
  else
    v4 = v3;
  return v4 | v1;
}

uint64_t NANPublish.DatapathConfiguration.serviceInfo.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  NANGenericServiceProtocol.packetData(for:)(3, a2);
  swift_bridgeObjectRelease(a2);
  return 2;
}

uint64_t NANPublish.FurtherServiceDiscoveryFunction.apiFunction.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 2;
  else
    return 1;
}

void *NANPublish.PublishType.defaultValue.unsafeMutableAddressor()
{
  return &static NANPublish.PublishType.defaultValue;
}

uint64_t NANPublish.PublishType.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6963696C6F736E75;
  if (a1 == 1)
    return 0x65746963696C6F73;
  return 0xD000000000000017;
}

uint64_t sub_1001885F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003CEB4(*a1, *a2);
}

unint64_t sub_100188600@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s7CoreP2P10NANPublishO11PublishTypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10018862C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEB00000000646574;
  v4 = 0xE900000000000064;
  v5 = 0x65746963696C6F73;
  if (v2 != 1)
  {
    v5 = 0xD000000000000017;
    v4 = 0x8000000100361130;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6963696C6F736E75;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

Swift::Int sub_10018869C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE900000000000064;
  v3 = 0x65746963696C6F73;
  if (v1 != 1)
  {
    v3 = 0xD000000000000017;
    v2 = 0x8000000100361130;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6963696C6F736E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEB00000000646574;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10018874C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE900000000000064;
  v3 = 0x65746963696C6F73;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000017;
    v2 = 0x8000000100361130;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6963696C6F736E75;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEB00000000646574;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001887D8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE900000000000064;
  v3 = 0x65746963696C6F73;
  if (v1 != 1)
  {
    v3 = 0xD000000000000017;
    v2 = 0x8000000100361130;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6963696C6F736E75;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEB00000000646574;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100188884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10018D824();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001888E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10018D824();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10018892C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x65746963696C6F73;
  if (*v0 != 1)
    v1 = 0xD000000000000017;
  if (*v0)
    return v1;
  else
    return 0x6963696C6F736E75;
}

void *NANPublish.SolicitedTransmissionType.defaultValue.unsafeMutableAddressor()
{
  return &static NANPublish.SolicitedTransmissionType.defaultValue;
}

CoreP2P::NANPublish::SolicitedTransmissionType_optional __swiftcall NANPublish.SolicitedTransmissionType.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1003D4C48;
  return (CoreP2P::NANPublish::SolicitedTransmissionType_optional)sub_1001822D0(rawValue, v1);
}

uint64_t sub_1001889B0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1003D4C48;
  return sub_100158888(v2, a1, a2);
}

uint64_t sub_1001889BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10018D7E0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100188A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10018D7E0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANPublish.EventCondition.defaultValue.unsafeMutableAddressor()
{
  return &static NANPublish.EventCondition.defaultValue;
}

uint64_t NANPublish.EventCondition.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65746963696C6F73;
  else
    return 1701736302;
}

CoreP2P::NANPublish::EventCondition_optional __swiftcall NANPublish.EventCondition.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1003D4BF8;
  return (CoreP2P::NANPublish::EventCondition_optional)sub_1001822D0(rawValue, v1);
}

uint64_t sub_100188AB4(char *a1, char *a2)
{
  return sub_10003CE10(*a1, *a2);
}

uint64_t sub_100188AC0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1003D4BF8;
  return sub_100158888(v2, a1, a2);
}

void sub_100188ACC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701736302;
  if (*v1)
    v2 = 0x65746963696C6F73;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xEB00000000785464;
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_100188B0C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x65746963696C6F73;
  else
    v2 = 1701736302;
  if (v1)
    v3 = 0xEB00000000785464;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100188B8C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x65746963696C6F73;
  else
    v2 = 1701736302;
  if (*v1)
    v3 = 0xEB00000000785464;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100188BE8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x65746963696C6F73;
  else
    v2 = 1701736302;
  if (v1)
    v3 = 0xEB00000000785464;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100188C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10018D79C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100188CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10018D79C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100188D0C()
{
  _BYTE *v0;

  if (*v0)
    return 0x65746963696C6F73;
  else
    return 1701736302;
}

uint64_t NANPublish.FurtherServiceDiscoveryFunction.controlFlag.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 3;
  else
    return 1;
}

uint64_t NANPublish.FurtherServiceDiscoveryFunction.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 7561575;
  else
    return 0x7055776F6C6C6F66;
}

CoreP2P::NANPublish::FurtherServiceDiscoveryFunction_optional __swiftcall NANPublish.FurtherServiceDiscoveryFunction.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_1003D4C98;
  return (CoreP2P::NANPublish::FurtherServiceDiscoveryFunction_optional)sub_1001822D0(rawValue, v1);
}

_UNKNOWN **static NANPublish.FurtherServiceDiscoveryFunction.allCases.getter()
{
  return &off_1003D7210;
}

uint64_t sub_100188DA0(char *a1, char *a2)
{
  return sub_10003CC20(*a1, *a2);
}

uint64_t sub_100188DAC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1003D4C98;
  return sub_100158888(v2, a1, a2);
}

void sub_100188DB8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 7561575;
  if (!*v1)
    v2 = 0x7055776F6C6C6F66;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_100188DF0(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D7238;
}

Swift::Int sub_100188E00()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 7561575;
  else
    v2 = 0x7055776F6C6C6F66;
  if (v1)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100188E78(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 7561575;
  else
    v2 = 0x7055776F6C6C6F66;
  if (*v1)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100188ECC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 7561575;
  else
    v2 = 0x7055776F6C6C6F66;
  if (v1)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100188F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10018D758();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100188F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10018D758();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100188FE8()
{
  _BYTE *v0;

  if (*v0)
    return 7561575;
  else
    return 0x7055776F6C6C6F66;
}

void NANPublish.InternetSharingConfiguration.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  Swift::UInt8 v8;
  char v9;

  v2 = v1;
  sub_100185018(v2, (uint64_t)v7);
  if ((v9 & 1) != 0)
  {
    sub_100185054((uint64_t)v7);
    v4 = 0;
  }
  else
  {
    v5 = v7[0];
    v6 = v7[1];
    v4 = v8;
    Hasher._combine(_:)(1u);
    String.hash(into:)(a1, v5, v6);
    swift_bridgeObjectRelease(v6);
  }
  Hasher._combine(_:)(v4);
}

Swift::Int NANPublish.InternetSharingConfiguration.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  Swift::UInt8 v6;
  char v7;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  sub_100185018(v0, (uint64_t)v5);
  if ((v7 & 1) != 0)
  {
    sub_100185054((uint64_t)v5);
    v1 = 0;
  }
  else
  {
    v2 = v5[0];
    v3 = v5[1];
    v1 = v6;
    Hasher._combine(_:)(1u);
    String.hash(into:)(v8, v2, v3);
    swift_bridgeObjectRelease(v3);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100189140()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  Swift::UInt8 v6;
  char v7;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  sub_100185018(v0, (uint64_t)v5);
  if ((v7 & 1) != 0)
  {
    sub_100185054((uint64_t)v5);
    v1 = 0;
  }
  else
  {
    v2 = v5[0];
    v3 = v5[1];
    v1 = v6;
    Hasher._combine(_:)(1u);
    String.hash(into:)(v8, v2, v3);
    swift_bridgeObjectRelease(v3);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t NANInternetSharingStatistics.Provider.sharingMode.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

CoreP2P::NANPublish::DatapathConfiguration __swiftcall NANPublish.DatapathConfiguration.init(serviceType:serviceSpecificInfo:securityConfiguration:)(CoreP2P::NANDatapath::ServiceType serviceType, CoreP2P::NANGenericServiceProtocol serviceSpecificInfo, Swift::OpaquePointer securityConfiguration)
{
  int v3;
  CoreP2P::NANPublish::DatapathConfiguration result;

  v3 = (serviceType << 16) | 0x200;
  result.securityConfiguration = securityConfiguration;
  result.serviceSpecificInfo = serviceSpecificInfo;
  result.parametersType = v3;
  result.multicastType = (CoreP2P::NANDatapath::ParametersMulticastType_optional)SBYTE1(v3);
  result.serviceType = BYTE2(v3);
  return result;
}

double NANPublish.DatapathConfiguration.hash(into:)(__int128 *a1, int a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double result;

  v8 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v9 = 1735617902;
  else
    v9 = 7365742;
  if (v8)
    v10 = 0xE300000000000000;
  else
    v10 = 0xE400000000000000;
  String.hash(into:)(a1, v9, v10);
  swift_bridgeObjectRelease(v10);
  if ((a2 & 0xFF00) == 0x200)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((a2 & 0x100) != 0)
      v11 = 0x614D6F54796E616DLL;
    else
      v11 = 0x6E614D6F54656E6FLL;
    if ((a2 & 0x100) != 0)
      v12 = 0xEA0000000000796ELL;
    else
      v12 = 0xE900000000000079;
    String.hash(into:)(a1, v11, v12);
    swift_bridgeObjectRelease(v12);
  }
  v13 = 0xE800000000000000;
  v14 = 0x656D69746C616572;
  if (BYTE2(a2) != 1)
  {
    v14 = 0x6E6574614C776F6CLL;
    v13 = 0xEA00000000007963;
  }
  if (BYTE2(a2))
    v15 = v14;
  else
    v15 = 0x6576697470616461;
  if (BYTE2(a2))
    v16 = v13;
  else
    v16 = 0xE800000000000000;
  String.hash(into:)(a1, v15, v16);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRetain(a3);
  sub_100077EC8(a1, a3);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRetain(a4);
  sub_10008EC00((uint64_t)a1, a4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  return result;
}

uint64_t static NANPublish.DatapathConfiguration.__derived_struct_equals(_:_:)(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_10018B2A4(a1 & 0xFFFF01, a2, a3, a4 & 0xFFFF01, a5, a6);
}

Swift::Int NANPublish.DatapathConfiguration.hashValue.getter(int a1, uint64_t a2, uint64_t a3)
{
  __int128 v7[4];

  Hasher.init(_seed:)(v7);
  NANPublish.DatapathConfiguration.hash(into:)(v7, a1 & 0xFFFF01, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1001893E8()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7[4];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 1);
  v5 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)(v7);
  NANPublish.DatapathConfiguration.hash(into:)(v7, v1 | (v2 << 8) | (v3 << 16), v4, v5);
  return Hasher._finalize()();
}

double sub_100189454(__int128 *a1)
{
  unsigned __int8 *v1;

  return NANPublish.DatapathConfiguration.hash(into:)(a1, *v1 | (v1[1] << 8) | (v1[2] << 16), *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

Swift::Int sub_100189470()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7[4];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 1);
  v5 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)(v7);
  NANPublish.DatapathConfiguration.hash(into:)(v7, v1 | (v2 << 8) | (v3 << 16), v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1001894D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10018B2A4(*a1 | (a1[1] << 8) | (a1[2] << 16), *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), *a2 | (a2[1] << 8) | (a2[2] << 16), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
}

uint64_t NANPublish.Configuration.serviceSpecificInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = a1;
  ++*(_BYTE *)(v1 + 32);
  return result;
}

uint64_t (*NANPublish.Configuration.serviceSpecificInfo.modify(_QWORD *a1))(uint64_t result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_100189558;
}

uint64_t sub_100189558(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    ++*(_BYTE *)(*(_QWORD *)result + 32);
  return result;
}

uint64_t NANPublish.Configuration.matchingFilterTx.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(unsigned __int8 *)(v0 + 40);
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t NANPublish.Configuration.matchingFilterTx.setter(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 48));
  *(_BYTE *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t NANPublish.Configuration.matchingFilterRx.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(unsigned __int8 *)(v0 + 56);
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t NANPublish.Configuration.matchingFilterRx.setter(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 64));
  *(_BYTE *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t NANPublish.Configuration.solicitedTransmissionType.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 73) = result & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.solicitedTransmissionType.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.eventCondition.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 74) = result & 1;
  return result;
}

uint64_t NANPublish.Configuration.matchingFilterCondition.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 75);
}

uint64_t NANPublish.Configuration.matchingFilterCondition.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 75) = result & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.matchingFilterCondition.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.rangingRequired.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 76);
}

uint64_t NANPublish.Configuration.rangingRequired.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 76) = result;
  return result;
}

uint64_t (*NANPublish.Configuration.rangingRequired.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANPublish.Configuration.managementAddress.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 78) | ((unint64_t)*(unsigned int *)(v0 + 80) << 16);
}

uint64_t NANPublish.Configuration.managementAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 78) = result;
  *(_BYTE *)(v1 + 80) = BYTE2(result);
  *(_BYTE *)(v1 + 81) = BYTE3(result);
  *(_BYTE *)(v1 + 82) = BYTE4(result);
  *(_BYTE *)(v1 + 83) = BYTE5(result);
  return result;
}

unint64_t NANPublish.Configuration.responderAddress.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 84) | ((unint64_t)*(unsigned int *)(v0 + 86) << 16);
}

uint64_t NANPublish.Configuration.responderAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 84) = result;
  *(_BYTE *)(v1 + 86) = BYTE2(result);
  *(_BYTE *)(v1 + 87) = BYTE3(result);
  *(_BYTE *)(v1 + 88) = BYTE4(result);
  *(_BYTE *)(v1 + 89) = BYTE5(result);
  return result;
}

uint64_t NANPublish.Configuration.announcementPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 72);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NANPublish.Configuration.announcementPeriod.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 72);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NANPublish.Configuration.announcementPeriod.modify())(_QWORD)
{
  type metadata accessor for NANPublish.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.awakeDWInterval.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 76));
}

uint64_t NANPublish.Configuration.awakeDWInterval.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANPublish.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 76)) = a1;
  return result;
}

uint64_t (*NANPublish.Configuration.awakeDWInterval.modify())(_QWORD)
{
  type metadata accessor for NANPublish.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.enableFastDiscovery.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 80));
}

uint64_t NANPublish.Configuration.enableFastDiscovery.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANPublish.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 80)) = a1;
  return result;
}

uint64_t (*NANPublish.Configuration.enableFastDiscovery.modify())(_QWORD)
{
  type metadata accessor for NANPublish.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.datapathConfiguration.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 84));
  v2 = *((_QWORD *)v1 + 2);
  v3 = *v1 | (v1[1] << 8) | (v1[2] << 16);
  swift_bridgeObjectRetain(*((_QWORD *)v1 + 1));
  swift_bridgeObjectRetain(v2);
  return v3;
}

void NANPublish.Configuration.datapathConfiguration.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v6 = a1;
  v7 = a1 >> 8;
  v8 = HIWORD(a1);
  v9 = v3 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 84);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 16));
  *(_BYTE *)v9 = v6 & 1;
  *(_BYTE *)(v9 + 1) = v7;
  *(_BYTE *)(v9 + 2) = v8;
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 16) = a3;
}

uint64_t (*NANPublish.Configuration.datapathConfiguration.modify())(_QWORD)
{
  type metadata accessor for NANPublish.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.internetSharingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NANPublish.Configuration(0);
  return sub_100033B48(v1 + *(int *)(v3 + 88), a1, (uint64_t *)&unk_10040E260);
}

uint64_t NANPublish.Configuration.internetSharingConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 88);
  return sub_10018BE84(a1, v3);
}

uint64_t (*NANPublish.Configuration.internetSharingConfiguration.modify())(_QWORD)
{
  type metadata accessor for NANPublish.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t sub_100189A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v1 = v0;
  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v5 = (char *)&v18 - v4;
  v6 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OWEKeys(0);
  __chkstk_darwin();
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NANPublish.Configuration(0);
  v14 = sub_1000637E0(v1 + *(int *)(v13 + 92), (uint64_t)v10, type metadata accessor for OWEKeys);
  P256.KeyAgreement.PrivateKey.publicKey.getter(v14);
  sub_100063824((uint64_t)v10, type metadata accessor for OWEKeys);
  v15 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 0, 1, v15);
  sub_100071FA8(*(_QWORD *)(v1 + 24), (uint64_t)v8);
  sub_100078AC4((uint64_t)v12, (uint64_t)&v8[*(int *)(v6 + 24)]);
  sub_1000637E0((uint64_t)v8, (uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v16 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  swift_storeEnumTagMultiPayload(v5, v16, 7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v5, 0, 1, v16);
  sub_100033B48((uint64_t)v5, (uint64_t)v3, &qword_100404EE8);
  sub_10002548C((uint64_t)v3, 7);
  sub_100063824((uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_100033A84((uint64_t)v5, &qword_100404EE8);
  result = sub_100033A84((uint64_t)v12, (uint64_t *)&unk_10040D200);
  ++*(_BYTE *)(v1 + 32);
  return result;
}

uint64_t NANPublish.Configuration.oweKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NANPublish.Configuration(0);
  return sub_1000637E0(v1 + *(int *)(v3 + 92), a1, type metadata accessor for OWEKeys);
}

uint64_t NANPublish.Configuration.oweKeys.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NANPublish.Configuration(0);
  sub_10018BECC(a1, v1 + *(int *)(v3 + 92));
  sub_100189A5C();
  return sub_100063824(a1, type metadata accessor for OWEKeys);
}

uint64_t (*NANPublish.Configuration.oweKeys.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for NANPublish.Configuration(0);
  return sub_100189D64;
}

uint64_t sub_100189D64(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return sub_100189A5C();
  return result;
}

uint64_t NANPublish.Configuration.authenticationType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 96));
}

BOOL NANPublish.Configuration.requiresAuthentication.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 96)) & 1) == 0;
}

uint64_t NANPublish.Configuration.pairingBootstrappingMethod.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for NANPublish.Configuration(0);
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 100)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 100) + 2) << 16);
}

uint64_t NANPublish.Configuration.pairingBootstrappingMethod.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for NANPublish.Configuration(0);
  v4 = v1 + *(int *)(result + 100);
  *(_WORD *)v4 = a1;
  *(_BYTE *)(v4 + 2) = BYTE2(a1) & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.pairingBootstrappingMethod.modify())(_QWORD)
{
  type metadata accessor for NANPublish.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANPublish.Configuration.multicastAddress.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 104));
  return *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48);
}

uint64_t NANPublish.Configuration.multicastAddress.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for NANPublish.Configuration(0);
  v4 = v1 + *(int *)(result + 104);
  *(_WORD *)(v4 + 4) = WORD2(a1);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 6) = BYTE6(a1) & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.multicastAddress.modify())(_QWORD)
{
  type metadata accessor for NANPublish.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.multicastServiceType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 108));
}

uint64_t NANPublish.Configuration.multicastServiceType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANPublish.Configuration(0);
  *(_BYTE *)(v1 + *(int *)(result + 108)) = a1 & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.multicastServiceType.modify())(_QWORD)
{
  type metadata accessor for NANPublish.Configuration(0);
  return NANBitmap.Channel.operatingClass.getter;
}

void NANPublish.Configuration.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 *v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  Swift::UInt8 v27;
  Swift::UInt8 v28;
  Swift::UInt8 v29;
  Swift::UInt8 v30;
  Swift::UInt8 v31;
  Swift::UInt8 v32;
  Swift::UInt8 v33;
  Swift::UInt8 v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int64_t v40;
  uint64_t v41;
  Swift::UInt64 v42;
  BOOL v43;
  BOOL v44;
  unint64_t v45;
  Swift::UInt64 v46;
  uint64_t v47;

  v2 = v1;
  v47 = type metadata accessor for DispatchTimeInterval(0);
  v4 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin();
  v6 = (Swift::UInt64 *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher._combine(_:)(*(_BYTE *)v1);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = String.lowercased()();
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v8._countAndFlagsBits, v8._object);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8._object);
  v9 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain(v9);
  sub_100077EC8(a1, v9);
  swift_bridgeObjectRelease(v9);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 32));
  v10 = *(_QWORD *)(v2 + 48);
  v11 = *(_BYTE *)(v2 + 40);
  swift_bridgeObjectRetain(v10);
  NANMatchingFilter.hash(into:)((uint64_t)a1, v11);
  swift_bridgeObjectRelease(v10);
  v12 = *(_QWORD *)(v2 + 64);
  v13 = *(_BYTE *)(v2 + 56);
  swift_bridgeObjectRetain(v12);
  NANMatchingFilter.hash(into:)((uint64_t)a1, v13);
  swift_bridgeObjectRelease(v12);
  v14 = 0xD000000000000017;
  v15 = 0x8000000100361130;
  if (*(_BYTE *)(v2 + 72) == 1)
  {
    v14 = 0x65746963696C6F73;
    v15 = 0xE900000000000064;
  }
  if (*(_BYTE *)(v2 + 72))
    v16 = v14;
  else
    v16 = 0x6963696C6F736E75;
  if (*(_BYTE *)(v2 + 72))
    v17 = v15;
  else
    v17 = 0xEB00000000646574;
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease(v17);
  if (*(_BYTE *)(v2 + 73))
    v18 = 0x73616369746C756DLL;
  else
    v18 = 0x74736163696E75;
  if (*(_BYTE *)(v2 + 73))
    v19 = 0xE900000000000074;
  else
    v19 = 0xE700000000000000;
  String.hash(into:)(a1, v18, v19);
  swift_bridgeObjectRelease(v19);
  if (*(_BYTE *)(v2 + 74))
    v20 = 0x65746963696C6F73;
  else
    v20 = 1701736302;
  if (*(_BYTE *)(v2 + 74))
    v21 = 0xEB00000000785464;
  else
    v21 = 0xE400000000000000;
  String.hash(into:)(a1, v20, v21);
  swift_bridgeObjectRelease(v21);
  if (*(_BYTE *)(v2 + 75))
    v22 = 0x757145746F4E7874;
  else
    v22 = 0x526C617571457874;
  if (*(_BYTE *)(v2 + 75))
    v23 = 0xEC00000078526C61;
  else
    v23 = 0xE900000000000078;
  String.hash(into:)(a1, v22, v23);
  swift_bridgeObjectRelease(v23);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 76));
  v24 = *(unsigned __int8 *)(v2 + 77);
  if (v24 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v24 & 1) != 0)
      v25 = 7561575;
    else
      v25 = 0x7055776F6C6C6F66;
    if ((v24 & 1) != 0)
      v26 = 0xE300000000000000;
    else
      v26 = 0xE800000000000000;
    String.hash(into:)(a1, v25, v26);
    swift_bridgeObjectRelease(v26);
  }
  v27 = *(_BYTE *)(v2 + 79);
  v28 = *(_BYTE *)(v2 + 80);
  v29 = *(_BYTE *)(v2 + 81);
  v30 = *(_BYTE *)(v2 + 82);
  v31 = *(_BYTE *)(v2 + 83);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 78));
  Hasher._combine(_:)(v27);
  Hasher._combine(_:)(v28);
  Hasher._combine(_:)(v29);
  Hasher._combine(_:)(v30);
  Hasher._combine(_:)(v31);
  v32 = *(_BYTE *)(v2 + 85);
  v33 = *(_BYTE *)(v2 + 86);
  v34 = *(_BYTE *)(v2 + 87);
  v35 = *(_BYTE *)(v2 + 88);
  v36 = *(_BYTE *)(v2 + 89);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 84));
  Hasher._combine(_:)(v32);
  Hasher._combine(_:)(v33);
  Hasher._combine(_:)(v34);
  Hasher._combine(_:)(v35);
  Hasher._combine(_:)(v36);
  v37 = type metadata accessor for NANPublish.Configuration(0);
  v38 = v47;
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v4 + 16))(v6, v2 + *(int *)(v37 + 72), v47);
  v39 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v4 + 88))(v6, v38);
  if (v39 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v38);
    v40 = *v6;
    v41 = 1000000000;
  }
  else if (v39 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v38);
    v40 = *v6;
    v41 = 1000000;
  }
  else
  {
    if (v39 != enum case for DispatchTimeInterval.microseconds(_:))
    {
      if (v39 == enum case for DispatchTimeInterval.nanoseconds(_:))
      {
        (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v38);
        v46 = *v6;
      }
      else
      {
        if (v39 != enum case for DispatchTimeInterval.never(_:))
          (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 8))(v6, v38);
        v46 = 0x7FFFFFFFFFFFFFFFLL;
      }
LABEL_47:
      Hasher._combine(_:)(v46);
      __asm { BR              X10 }
    }
    (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v38);
    v40 = *v6;
    v41 = 1000;
  }
  v42 = v40 * v41;
  v43 = (unsigned __int128)(v40 * (__int128)v41) >> 64 != (v40 * v41) >> 63;
  v44 = v40 <= 0;
  v45 = 0x7FFFFFFFFFFFFFFFLL;
  if (v44)
    v45 = 0x8000000000000000;
  if (v43)
    v46 = v45;
  else
    v46 = v42;
  goto LABEL_47;
}

Swift::Int NANPublish.Configuration.hashValue.getter()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1);
  NANPublish.Configuration.hash(into:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10018A7D0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, char a13, char a14, char a15, char a16, int a17, __int16 a18, uint64_t a19, uint64_t a20,char a21,char a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,__int16 a29,__int16 a30,char a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;

  *(_BYTE *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_BYTE *)(a9 + 72) = a11;
  *(_BYTE *)(a9 + 73) = a12 & 1;
  *(_BYTE *)(a9 + 74) = a13 & 1;
  *(_BYTE *)(a9 + 75) = a14 & 1;
  *(_BYTE *)(a9 + 76) = a15;
  *(_BYTE *)(a9 + 77) = a16;
  *(_DWORD *)(a9 + 78) = a17;
  *(_WORD *)(a9 + 82) = a18;
  *(_WORD *)(a9 + 85) = *(_WORD *)((char *)&a19 + 1);
  *(_BYTE *)(a9 + 84) = a19;
  *(_WORD *)(a9 + 87) = *(_WORD *)((char *)&a19 + 3);
  *(_BYTE *)(a9 + 89) = BYTE5(a19);
  v37 = (int *)type metadata accessor for NANPublish.Configuration(0);
  v38 = a9 + v37[18];
  v39 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v38, a20, v39);
  *(_BYTE *)(a9 + v37[19]) = a21;
  *(_BYTE *)(a9 + v37[20]) = a22;
  v40 = a9 + v37[21];
  *(_BYTE *)v40 = a23 & 1;
  *(_WORD *)(v40 + 1) = *(_WORD *)((char *)&a23 + 1);
  *(_QWORD *)(v40 + 8) = a24;
  *(_QWORD *)(v40 + 16) = a25;
  sub_10018D868(a26, a9 + v37[22]);
  result = sub_10018D8B0(a27, a9 + v37[23]);
  *(_BYTE *)(a9 + v37[24]) = a28 & 1;
  v42 = a9 + v37[25];
  *(_WORD *)v42 = a30;
  *(_BYTE *)(v42 + 2) = a31 & 1;
  v43 = a9 + v37[26];
  *(_WORD *)(v43 + 4) = a33;
  *(_DWORD *)v43 = a32;
  *(_BYTE *)(v43 + 6) = a34 & 1;
  *(_BYTE *)(a9 + v37[27]) = a36 & 1;
  return result;
}

Swift::Int sub_10018AA04()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1);
  NANPublish.Configuration.hash(into:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10018AA3C()
{
  return sub_100188278(type metadata accessor for NANPublish.Configuration, &qword_100409EF8);
}

uint64_t NANPublish.Configuration.init(instanceID:serviceName:instanceName:blob:txtRecordData:managementAddress:responderAddress:datapathConfiguration:announcementPeriod:furtherServiceDiscoveryFunction:enableFastDiscovery:authenticationType:internetSharingConfiguration:pairingBootstrappingMethod:publisherType:multicastAddress:multicastServiceType:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, unsigned __int8 a18, char a19, uint64_t a20,unsigned __int16 a21,unsigned __int8 a22,unint64_t a23,char a24)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;

  v92 = a6;
  v93 = a7;
  v90 = a2;
  v89 = a1;
  v88 = a9;
  type metadata accessor for OWEKeys(0);
  __chkstk_darwin();
  v87 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v86 = (uint64_t)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v31 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v83 = (uint64_t)&v65 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v34 = (uint64_t *)((char *)&v65 - v33);
  __chkstk_darwin();
  v36 = (uint64_t *)((char *)&v65 - v35);
  __chkstk_darwin();
  v38 = (char *)&v65 - v37;
  __chkstk_darwin();
  v40 = (uint64_t *)((char *)&v65 - v39);
  v41 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v84 = *(_QWORD *)(v41 - 8);
  v85 = v41;
  v42 = __chkstk_darwin();
  v81 = (char *)&v65 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  P256.KeyAgreement.PrivateKey.init()(v42);
  v95 = sub_100031A88((uint64_t)_swiftEmptyArrayStorage);
  if (a5)
  {
    *v40 = a4;
    v40[1] = a5;
    v44 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v40, v44, 3);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v40, 0, 1, v44);
  }
  else
  {
    v45 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v40, 1, 1, v45);
  }
  sub_100033B48((uint64_t)v40, (uint64_t)v38, &qword_100404EE8);
  sub_10002548C((uint64_t)v38, 3);
  sub_100033A84((uint64_t)v40, &qword_100404EE8);
  v46 = v93;
  v91 = a3;
  v66 = a8;
  if (v93 >> 60 == 15)
  {
    v47 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v36, 1, 1, v47);
    v48 = v92;
  }
  else
  {
    v48 = v92;
    *v36 = v92;
    v36[1] = v46;
    v49 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v36, v49, 6);
    v50 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56);
    v51 = v49;
    v46 = v93;
    v50(v36, 0, 1, v51);
  }
  v73 = a23;
  v80 = a22;
  v72 = a21;
  v77 = a18;
  v79 = a17;
  v78 = a16;
  v75 = a15;
  v76 = a20;
  v74 = a14;
  v71 = a13;
  v70 = a12;
  v69 = a11;
  sub_100033B48((uint64_t)v36, (uint64_t)v38, &qword_100404EE8);
  sub_1000339F4(v48, v46);
  sub_10002548C((uint64_t)v38, 6);
  sub_100033A84((uint64_t)v36, &qword_100404EE8);
  if (a10 >> 60 == 15)
  {
    v52 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v34, 1, 1, v52);
    v53 = v66;
  }
  else
  {
    v53 = v66;
    *v34 = v66;
    v34[1] = a10;
    v52 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v34, v52, 4);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v34, 0, 1, v52);
  }
  v67 = a24 & 1;
  v68 = a19 & 1;
  sub_100033B48((uint64_t)v34, (uint64_t)v38, &qword_100404EE8);
  sub_1000339F4(v53, a10);
  sub_10002548C((uint64_t)v38, 4);
  v54 = sub_100033A84((uint64_t)v34, &qword_100404EE8);
  v55 = v81;
  P256.KeyAgreement.PrivateKey.publicKey.getter(v54);
  v56 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v31, 0, 1, v56);
  v57 = v86;
  sub_100071FA8(v95, v86);
  sub_100078AC4((uint64_t)v31, v57 + *(int *)(v82 + 24));
  sub_1000637E0(v57, (uint64_t)v38, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  swift_storeEnumTagMultiPayload(v38, v52, 7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v38, 0, 1, v52);
  v58 = v83;
  sub_100033B48((uint64_t)v38, v83, &qword_100404EE8);
  sub_10002548C(v58, 7);
  sub_100063824(v57, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_100033A84((uint64_t)v38, &qword_100404EE8);
  sub_100033A84((uint64_t)v31, (uint64_t *)&unk_10040D200);
  v59 = v95;
  v94 = 0;
  swift_stdlib_random(&v94, 8);
  sub_10000E658(v53, a10);
  sub_10000E658(v92, v93);
  v60 = v94;
  v61 = (uint64_t)v87;
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v87, v55, v85);
  v64 = v73 & 0xFFFFFFFFFFFFLL | ((HIWORD(v73) & 1) << 48);
  return sub_10018A7D0(v89, v90, v91, v59, v60, 2, (uint64_t)_swiftEmptyArrayStorage, 3, v88, (uint64_t)_swiftEmptyArrayStorage, v80, 1, 0, 0, 0, v79, v69, (v69 & 0xFFFFFFFFFFFFuLL) >> 32, v70 & 0xFFFFFFFFFFFFLL,
           v78,
           1,
           v77 & 1,
           v71 & 0xFFFF01,
           v74,
           v75,
           v76,
           v61,
           v68,
           v63,
           v72,
           0,
           v64,
           SWORD2(v64),
           SBYTE6(v64),
           SHIBYTE(v64),
           v67);
}

